uint64_t TranscriptionView.positionalData.getter()
{
  uint64_t vars8;

  type metadata accessor for TranscriptionView();
  return swift_retain();
}

uint64_t TranscriptionView.lowConfidenceText.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TranscriptionView() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

void TranscriptionView.body.getter()
{
  OUTLINED_FUNCTION_31();
  v19[1] = v3;
  uint64_t v4 = type metadata accessor for TranscriptionView();
  uint64_t v5 = OUTLINED_FUNCTION_1(v4);
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingMod);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_64();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_63();
  uint64_t *v2 = static Alignment.bottomLeading.getter();
  v2[1] = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, _ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>);
  closure #1 in TranscriptionView.body.getter(v0, (uint64_t)v2 + *(int *)(v16 + 44));
  outlined init with copy of TranscriptionView(v0, (uint64_t)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for TranscriptionView);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  outlined init with take of TranscriptionView((uint64_t)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (void (*)(void))type metadata accessor for TranscriptionView);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritin, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingMod);
  View.onTapGesture(count:perform:)();
  swift_release();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v2, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingMod);
  static Alignment.bottomLeading.getter();
  OUTLINED_FUNCTION_20_39();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v11);
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in TranscriptionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _Environmen);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayo);
  uint64_t v6 = MEMORY[0x1F4188790](v65);
  uint64_t v60 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v61 = (uint64_t)&v58 - v8;
  uint64_t v9 = type metadata accessor for TranscriptionView();
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v59 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<F);
  MEMORY[0x1F4188790](v64);
  uint64_t v63 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>.Storage);
  MEMORY[0x1F4188790](v62);
  uint64_t v13 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>);
  MEMORY[0x1F4188790](v67);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v24 = (char *)&v58 - v23;
  if (TranscriptionView.showWaiting.getter())
  {
    id v25 = objc_msgSend(self, sel_conversationKit);
    v68._object = (void *)0xE000000000000000;
    v26._countAndFlagsBits = 0x2E474E4954494157;
    v26._object = (void *)0xEA00000000002E2ELL;
    v27.value._countAndFlagsBits = 0x61737265766E6F43;
    v27.value._object = (void *)0xEF74694B6E6F6974;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v68._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v68);

    TranscriptionView.text(verbatim:)();
    swift_bridgeObjectRelease();
    LOBYTE(v25) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    outlined init with copy of FeatureEligibility?((uint64_t)v18, (uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
    v37 = &v22[*(int *)(v19 + 36)];
    char *v37 = (char)v25;
    *((void *)v37 + 1) = v30;
    *((void *)v37 + 2) = v32;
    *((void *)v37 + 3) = v34;
    *((void *)v37 + 4) = v36;
    v37[40] = 0;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
    v38 = &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>;
    outlined init with take of Any?((uint64_t)v22, (uint64_t)v24, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>);
    outlined init with copy of FeatureEligibility?((uint64_t)v24, (uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>);
    _ConditionalContent<>.init(storage:)();
    outlined init with copy of FeatureEligibility?((uint64_t)v15, v63, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout();
    _ConditionalContent<>.init(storage:)();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>);
    uint64_t v39 = (uint64_t)v24;
  }
  else
  {
    uint64_t v40 = v63;
    TranscriptionView.showTranscript.getter();
    if (v41)
    {
      outlined init with copy of TranscriptionView(a1, (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for TranscriptionView);
      unint64_t v42 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      uint64_t v43 = swift_allocObject();
      outlined init with take of TranscriptionView((uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v43 + v42, (void (*)(void))type metadata accessor for TranscriptionView);
      *uint64_t v13 = partial apply for closure #1 in TranscriptionView.transcriptView.getter;
      v13[1] = v43;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>);
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>);
      _ConditionalContent<>.init(storage:)();
      outlined init with copy of FeatureEligibility?((uint64_t)v15, v40, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout();
      _ConditionalContent<>.init(storage:)();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>);
      return swift_release();
    }
    *(void *)uint64_t v5 = static HorizontalAlignment.center.getter();
    *((void *)v5 + 1) = 0x4018000000000000;
    v5[16] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _Fl);
    closure #1 in closure #1 in TranscriptionView.body.getter(a1);
    char v45 = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v54 = v60;
    outlined init with copy of FeatureEligibility?((uint64_t)v5, v60, &demangling cache variable for type metadata for VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _Environmen);
    uint64_t v55 = v54 + *(int *)(v65 + 36);
    *(unsigned char *)uint64_t v55 = v45;
    *(void *)(v55 + 8) = v47;
    *(void *)(v55 + 16) = v49;
    *(void *)(v55 + 24) = v51;
    *(void *)(v55 + 32) = v53;
    *(unsigned char *)(v55 + 40) = 0;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v5, &demangling cache variable for type metadata for VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _Environmen);
    v38 = &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayo;
    uint64_t v56 = v54;
    uint64_t v57 = v61;
    outlined init with take of Any?(v56, v61, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayo);
    outlined init with copy of FeatureEligibility?(v57, v40, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayo);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout();
    _ConditionalContent<>.init(storage:)();
    uint64_t v39 = v57;
  }
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v39, v38);
}

void TranscriptionView.text(verbatim:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Material?>)
      - 8;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = (uint64_t *)(v6 - v5);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
  MEMORY[0x1F4188790](v8 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v16 = (void *)(v15 - v14);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>)
      - 8;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_64();
  swift_getKeyPath();
  uint64_t v17 = v2;
  swift_bridgeObjectRetain();
  static Alignment.center.getter();
  OUTLINED_FUNCTION_20_39();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v18, v19);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v20 = static Font.title3.getter();
  v29[20] = swift_getKeyPath();
  v29[21] = v20;
  LODWORD(v20) = static HierarchicalShapeStyle.primary.getter();
  memcpy(v30, v29, 0xB0uLL);
  v30[44] = v20;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1C8772A80]();
  uint64_t v22 = type metadata accessor for Material();
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v22);
  outlined init with copy of FeatureEligibility?(v11, (uint64_t)v7 + *(int *)(v26 + 36), &demangling cache variable for type metadata for Material?);
  *uint64_t v7 = KeyPath;
  outlined init with copy of FeatureEligibility?((uint64_t)v7, (uint64_t)v16 + *(int *)(v13 + 44), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Material?>);
  memcpy(v16, v30, 0xB4uLL);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>((uint64_t)v30);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Material?>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v11, &demangling cache variable for type metadata for Material?);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>((uint64_t)v29);
  outlined init with copy of FeatureEligibility?((uint64_t)v16, v0, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>);
  *(void *)(v0 + *(int *)(v25 + 44)) = 0x3FE6666666666666;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>);
  uint64_t v23 = swift_getKeyPath();
  outlined init with copy of FeatureEligibility?(v0, v28, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>);
  uint64_t v24 = v28
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>)
               + 36);
  *(void *)uint64_t v24 = v27;
  *(void *)(v24 + 8) = v17;
  *(void *)(v24 + 16) = v23;
  *(unsigned char *)(v24 + 24) = 0;
  swift_bridgeObjectRetain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v0, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>);
  OUTLINED_FUNCTION_28();
}

#error "1C3384E38: call analysis failed (funcsize=143)"

void TranscriptionView.aMessageIsBeingLeftView()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>.Storage);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_31_27();
  uint64_t v9 = TranscriptionViewModel.callerDisplayName.getter();
  unint64_t v11 = v10;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    id v13 = objc_msgSend(self, sel_conversationKit);
    v26._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_4_6();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v26._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v13, v14, v26);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1C3769620;
    swift_retain();
    uint64_t v18 = TranscriptionViewModel.callerDisplayName.getter();
    v25[1] = v1;
    uint64_t v20 = v19;
    swift_release();
    *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    String.init(format:_:)();
    swift_bridgeObjectRelease();
    TranscriptionView.text(verbatim:)();
    swift_bridgeObjectRelease();
    outlined init with copy of FeatureEligibility?((uint64_t)v8, v5, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>();
  }
  else
  {
    if (one-time initialization token for someoneIsLeavingAMessage != -1) {
      swift_once();
    }
    id v21 = objc_msgSend(self, sel_conversationKit);
    v27._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_4_6();
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v27._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v21, v22, v27);

    TranscriptionView.text(verbatim:)();
    swift_bridgeObjectRelease();
    outlined init with copy of FeatureEligibility?((uint64_t)v8, v5, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>();
  }
  _ConditionalContent<>.init(storage:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
  OUTLINED_FUNCTION_28();
}

uint64_t closure #2 in TranscriptionView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  type metadata accessor for SpringBoardUtilities();
  outlined init with copy of TranscriptionView(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for TranscriptionView);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  outlined init with take of TranscriptionView((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (void (*)(void))type metadata accessor for TranscriptionView);
  static SpringBoardUtilities.requestPasscodeUnlock(_:)((void (*)(uint64_t))partial apply for closure #1 in closure #2 in TranscriptionView.body.getter, v6);
  return swift_release();
}

uint64_t closure #1 in closure #2 in TranscriptionView.body.getter()
{
  swift_retain();
  TranscriptionViewModel.hidePrivacySensitiveContent.setter();
  return swift_release();
}

uint64_t *TranscriptionView_Previews.viewModel.unsafeMutableAddressor()
{
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  return &static TranscriptionView_Previews.viewModel;
}

uint64_t static TranscriptionView_Previews.viewModel.getter()
{
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static TranscriptionView_Previews.previews.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_80();
  uint64_t v7 = (int *)type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<TranscriptionView, _FrameLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_63();
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  type metadata accessor for PositionalData();
  swift_allocObject();
  swift_retain();
  uint64_t v11 = PositionalData.init()();
  *(_DWORD *)uint64_t v3 = 0x10000;
  uint64_t v12 = (uint64_t *)(v3 + v7[6]);
  *uint64_t v12 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  OUTLINED_FUNCTION_24_34();
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  swift_retain();
  *(void *)(v3 + 8) = ObservedObject.init(wrappedValue:)();
  *(void *)(v3 + 16) = v13;
  *(void *)(v3 + v7[7]) = v11;
  Swift::String v14 = (void *)(v3 + v7[8]);
  *Swift::String v14 = 0xD000000000000013;
  v14[1] = 0x80000001C37AAF70;
  type metadata accessor for UIFont();
  uint64_t v15 = *MEMORY[0x1E4FB2988];
  swift_retain_n();
  id v16 = OUTLINED_FUNCTION_22_34(v15);
  Class isa = UIFont.withTraits(_:)(*(_DWORD *)v3).super.isa;

  [(objc_class *)isa pointSize];
  double v19 = v18;

  v20.n128_f64[0] = v19 + v19;
  (*(void (**)(__n128))(*(void *)v11 + 328))(v20);
  swift_release();
  swift_release_n();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of TranscriptionView(v3, v2, (void (*)(void))type metadata accessor for TranscriptionView);
  id v21 = (_OWORD *)(v2 + *(int *)(v9 + 36));
  *id v21 = v27;
  v21[1] = v28;
  v21[2] = v29;
  outlined destroy of TranscriptionView(v3, (void (*)(void))type metadata accessor for TranscriptionView);
  static TaskPriority.userInitiated.getter();
  Swift::String v22 = (char *)(a1
               + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TranscriptionView, _FrameLayout>, _TaskModifier>)
                        + 36));
  uint64_t v23 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v22[*(int *)(v23 + 20)], v1, v26);
  *(void *)Swift::String v22 = &async function pointer to partial apply for closure #1 in static TranscriptionView_Previews.previews.getter;
  *((void *)v22 + 1) = 0;
  outlined init with copy of FeatureEligibility?(v2, a1, &demangling cache variable for type metadata for ModifiedContent<TranscriptionView, _FrameLayout>);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v26);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for ModifiedContent<TranscriptionView, _FrameLayout>);
}

uint64_t closure #1 in static TranscriptionView_Previews.previews.getter()
{
  uint64_t v1 = type metadata accessor for TranscriptionViewModel.Caption(0);
  v0[18] = v1;
  v0[19] = *(void *)(v1 - 8);
  v0[20] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  v0[21] = v2;
  v0[22] = *(void *)(v2 - 8);
  v0[23] = swift_task_alloc();
  v0[24] = swift_task_alloc();
  v0[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v0[26] = v3;
  v0[27] = *(void *)(v3 - 8);
  v0[28] = swift_task_alloc();
  v0[29] = swift_task_alloc();
  type metadata accessor for MainActor();
  v0[30] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[31] = v5;
  v0[32] = v4;
  return MEMORY[0x1F4188298](closure #1 in static TranscriptionView_Previews.previews.getter, v5, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;

  uint64_t v1 = swift_allocObject();
  v0[33] = v1;
  *(void *)(v1 + 16) = 0;
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  if (one-time initialization token for phrases != -1) {
    swift_once();
  }
  uint64_t v2 = specialized Collection.prefix(_:)(4, static TranscriptionView_Previews.phrases);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVySSG_15ConversationKit22TranscriptionViewModelC7CaptionVs5NeverOTg506_sSS15f5Kit22hij2C7k12VIggr_SSAEs5L11OIegnrzr_TRSSAMIggr_Tf1cn_n(v2, v4, v6, v8, (void (*)(uint64_t, uint64_t))partial apply for makeCaption #1 (_:) in closure #1 in static TranscriptionView_Previews.previews.getter, v1);
  swift_unknownObjectRelease();
  TranscriptionViewModel.captions.setter();
  for (v0[34] = 0; ; v0[34] = v14 + 1)
  {
    uint64_t v23 = static TranscriptionView_Previews.phrases;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.shuffle<A>(using:)();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_21_4(v23);
    if (v13) {
      break;
    }
    swift_release();
    OUTLINED_FUNCTION_19_5();
    if (v15)
    {
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_4_89();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_263();
      __asm { BRAA            X1, X16 }
    }
  }
  v0[37] = 0;
  if (v9[2])
  {
    v0[38] = v9[4];
    v0[39] = v9[5];
    swift_bridgeObjectRetain();
    ContinuousClock.init()();
    static ContinuousClock.Instant.now.getter();
    OUTLINED_FUNCTION_5_94();
    id v16 = OUTLINED_FUNCTION_3_25();
    v17(v16);
    double v18 = (void *)swift_task_alloc();
    v0[42] = (uint64_t)v18;
    *double v18 = v0;
    v18[1] = closure #1 in static TranscriptionView_Previews.previews.getter;
    OUTLINED_FUNCTION_9_5(v0[25]);
    OUTLINED_FUNCTION_263();
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4187F40](v9, v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[43] = v0;
  swift_task_dealloc();
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v2[40];
  if (v0)
  {
    uint64_t v6 = v3[29];
    uint64_t v7 = v3[26];
    uint64_t v8 = v3[27];
    uint64_t v9 = v3[25];
    uint64_t v10 = v3[21];
    swift_bridgeObjectRelease();
    v5(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_release();
    uint64_t v11 = v3[31];
    uint64_t v12 = v3[32];
    uint64_t v13 = closure #1 in static TranscriptionView_Previews.previews.getter;
  }
  else
  {
    Swift::String v14 = v3[29];
    uint64_t v15 = v3[26];
    id v16 = v3[27];
    v5(v3[25], v3[21]);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v3[44] = v17;
    v3[45] = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v17(v14, v15);
    uint64_t v11 = v3[31];
    uint64_t v12 = v3[32];
    uint64_t v13 = closure #1 in static TranscriptionView_Previews.previews.getter;
  }
  return MEMORY[0x1F4188298](v13, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;

  *(void *)(v0 + 120) = *(void *)(v0 + 304);
  *(void *)(v0 + 104) = 0;
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 112) = 0xE000000000000000;
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v3 = MEMORY[0x1C8774260](32, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E4FBB1A0], v2);
  *(void *)(v0 + 368) = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 376) = v4;
  if (v4)
  {
    swift_beginAccess();
    *(void *)(v0 + 384) = 0;
    uint64_t v5 = *(void *)(v0 + 368);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v5 + 48);
    uint64_t v9 = *(void *)(v5 + 56);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v5 + 32);
    *(void *)(v0 + 32) = v10;
    *(void *)(v0 + 40) = v9;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.append<A>(contentsOf:)();
    ContinuousClock.init()();
    static ContinuousClock.Instant.now.getter();
    uint64_t v11 = OUTLINED_FUNCTION_26_31();
    MEMORY[0x1C8774620](v11);
    v6(v7, v8);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v12;
    *uint64_t v12 = v0;
    v12[1] = closure #1 in static TranscriptionView_Previews.previews.getter;
    uint64_t v13 = *(void *)(v0 + 184);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  Swift::String v14 = *(void *)(v0 + 288);
  uint64_t v15 = *(void *)(v0 + 296);
  swift_bridgeObjectRelease();
  TranscriptionViewModel.captions.getter();
  specialized Sequence.suffix(_:)();
  TranscriptionViewModel.captions.setter();
  if (v15 + 1 != v14)
  {
    uint64_t v25 = *(void *)(v0 + 296) + 1;
    id v21 = *(void *)(v0 + 280);
LABEL_13:
    *(void *)(v0 + 296) = v25;
    if (v25 >= *(void *)(v21 + 16))
    {
      __break(1u);
      return MEMORY[0x1F4187F40](v21, v16, v17, v18);
    }
    OUTLINED_FUNCTION_14_49(v21, v25);
    ContinuousClock.init()();
    static ContinuousClock.Instant.now.getter();
    OUTLINED_FUNCTION_5_94();
    uint64_t v26 = OUTLINED_FUNCTION_3_25();
    v27(v26);
    long long v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v28;
    *long long v28 = v0;
    v28[1] = closure #1 in static TranscriptionView_Previews.previews.getter;
    uint64_t v13 = *(void *)(v0 + 200);
LABEL_15:
    id v21 = OUTLINED_FUNCTION_9_5(v13);
    return MEMORY[0x1F4187F40](v21, v16, v17, v18);
  }
  swift_release();
  OUTLINED_FUNCTION_19_5();
  if (!v20)
  {
    while (1)
    {
      *(void *)(v0 + 272) = v19 + 1;
      long long v29 = static TranscriptionView_Previews.phrases;
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.shuffle<A>(using:)();
      id v21 = OUTLINED_FUNCTION_21_4(v29);
      if (v22) {
        break;
      }
      swift_release();
      OUTLINED_FUNCTION_19_5();
      if (v20) {
        goto LABEL_8;
      }
    }
    uint64_t v25 = 0;
    goto LABEL_13;
  }
LABEL_8:
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_4_89();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v23();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v3 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 352);
    uint64_t v7 = *(void *)(v3 + 224);
    uint64_t v8 = *(void *)(v3 + 208);
    (*(void (**)(void, void))(v3 + 320))(*(void *)(v3 + 184), *(void *)(v3 + 168));
    v6(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = *(void *)(v3 + 248);
    uint64_t v10 = *(void *)(v3 + 256);
    uint64_t v11 = closure #1 in static TranscriptionView_Previews.previews.getter;
  }
  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v3 + 352);
    uint64_t v13 = *(void *)(v3 + 224);
    Swift::String v14 = *(void *)(v3 + 208);
    (*(void (**)(void, void))(v3 + 320))(*(void *)(v3 + 184), *(void *)(v3 + 168));
    v12(v13, v14);
    uint64_t v9 = *(void *)(v3 + 248);
    uint64_t v10 = *(void *)(v3 + 256);
    uint64_t v11 = closure #1 in static TranscriptionView_Previews.previews.getter;
  }
  return MEMORY[0x1F4188298](v11, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  void (*v4)(uint64_t, void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  void *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 160);
  uint64_t v3 = *(uint64_t **)(v0 + 144);
  uint64_t v4 = (void (*)(uint64_t, void))static TranscriptionView_Previews.viewModel;
  uint64_t v43 = *(void *)(TranscriptionViewModel.captions.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  Date.init()();
  Date.init()();
  uint64_t *v2 = v7;
  uint64_t v8 = (void *)((char *)v2 + *((int *)v3 + 7));
  *uint64_t v8 = v6;
  v8[1] = v5;
  *((unsigned char *)v2 + *((int *)v3 + 8)) = 0;
  *(void *)((char *)v2 + *((int *)v3 + 9)) = MEMORY[0x1E4FBC860];
  *((unsigned char *)v2 + *((int *)v3 + 10)) = 1;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0 + 48;
    *(void *)(*(void *)(v0 + 264) + 16) = v11;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v4 = (void (*)(uint64_t, void))static Published.subscript.modify();
    uint64_t v3 = v12;
    uint64_t v13 = *v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v3 = v13;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  isUniquelyReferenced_nonNull_native = specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v13 = isUniquelyReferenced_nonNull_native;
  *uint64_t v3 = isUniquelyReferenced_nonNull_native;
LABEL_3:
  if (!v43)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v43 > *(void *)(v13 + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v18 = *(void *)(v0 + 376);
  double v19 = *(void *)(v0 + 384) + 1;
  outlined assign with take of TranscriptionViewModel.Caption(*(void *)(v0 + 160), v13+ ((*(unsigned __int8 *)(*(void *)(v0 + 152) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 152) + 80))+ *(void *)(*(void *)(v0 + 152) + 72) * (v43 - 1));
  v4(v5, 0);
  swift_release();
  swift_release();
  if (v19 != v18)
  {
    long long v27 = *(void *)(v0 + 384) + 1;
    *(void *)(v0 + 384) = v27;
    long long v28 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    long long v29 = *(void *)(v0 + 192);
    uint64_t v30 = *(void *)(v0 + 168);
    uint64_t v31 = *(void *)(v0 + 368) + 32 * v27;
    uint64_t v33 = *(void *)(v31 + 48);
    uint64_t v32 = *(void *)(v31 + 56);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v31 + 32);
    *(void *)(v0 + 32) = v33;
    *(void *)(v0 + 40) = v32;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.append<A>(contentsOf:)();
    ContinuousClock.init()();
    static ContinuousClock.Instant.now.getter();
    uint64_t v34 = OUTLINED_FUNCTION_26_31();
    MEMORY[0x1C8774620](v34);
    v28(v29, v30);
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v35;
    *uint64_t v35 = v0;
    v35[1] = closure #1 in static TranscriptionView_Previews.previews.getter;
    uint64_t v36 = *(void *)(v0 + 184);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  __n128 v20 = *(void *)(v0 + 288);
  id v21 = *(void *)(v0 + 296);
  swift_bridgeObjectRelease();
  TranscriptionViewModel.captions.getter();
  specialized Sequence.suffix(_:)();
  TranscriptionViewModel.captions.setter();
  if (v21 + 1 == v20)
  {
    swift_release();
    OUTLINED_FUNCTION_19_5();
    if (v23)
    {
LABEL_11:
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_4_89();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_263();
      __asm { BRAA            X1, X16 }
    }
    while (1)
    {
      *(void *)(v0 + 272) = v22 + 1;
      v44 = static TranscriptionView_Previews.phrases;
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.shuffle<A>(using:)();
      isUniquelyReferenced_nonNull_native = OUTLINED_FUNCTION_21_4(v44);
      if (v24) {
        break;
      }
      swift_release();
      OUTLINED_FUNCTION_19_5();
      if (v23) {
        goto LABEL_11;
      }
    }
    v37 = 0;
  }
  else
  {
    v37 = *(void *)(v0 + 296) + 1;
    isUniquelyReferenced_nonNull_native = *(void *)(v0 + 280);
  }
  *(void *)(v0 + 296) = v37;
  if (v37 >= *(void *)(isUniquelyReferenced_nonNull_native + 16))
  {
LABEL_26:
    __break(1u);
    return MEMORY[0x1F4187F40](isUniquelyReferenced_nonNull_native, v15, v16, v17);
  }
  OUTLINED_FUNCTION_14_49(isUniquelyReferenced_nonNull_native, v37);
  ContinuousClock.init()();
  static ContinuousClock.Instant.now.getter();
  OUTLINED_FUNCTION_5_94();
  v38 = OUTLINED_FUNCTION_3_25();
  v39(v38);
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v40;
  *uint64_t v40 = v0;
  v40[1] = closure #1 in static TranscriptionView_Previews.previews.getter;
  uint64_t v36 = *(void *)(v0 + 200);
LABEL_19:
  OUTLINED_FUNCTION_9_5(v36);
  OUTLINED_FUNCTION_263();
  return MEMORY[0x1F4187F40](isUniquelyReferenced_nonNull_native, v15, v16, v17);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 344);
  swift_release();

  swift_release();
  OUTLINED_FUNCTION_4_89();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 400);
  swift_release();

  swift_release();
  OUTLINED_FUNCTION_4_89();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v2();
}

uint64_t makeCaption #1 (_:) in closure #1 in static TranscriptionView_Previews.previews.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (void *)(a3 + 16);
  swift_beginAccess();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = (int *)type metadata accessor for TranscriptionViewModel.Caption(0);
  Date.init()();
  Date.init()();
  *a4 = v9;
  uint64_t v11 = (void *)((char *)a4 + v10[7]);
  *uint64_t v11 = a1;
  v11[1] = a2;
  *((unsigned char *)a4 + v10[8]) = 0;
  *(void *)((char *)a4 + v10[9]) = MEMORY[0x1E4FBC860];
  *((unsigned char *)a4 + v10[10]) = 1;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = *(void *)(a3 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v8 = v15;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *TranscriptionView_Previews.phrases.unsafeMutableAddressor()
{
  if (one-time initialization token for phrases != -1) {
    swift_once();
  }
  return &static TranscriptionView_Previews.phrases;
}

void one-time initialization function for phrases()
{
  static TranscriptionView_Previews.phrases = (uint64_t)&outlined read-only object #0 of one-time initialization function for phrases;
}

{
  phrases._rawValue = &outlined read-only object #0 of one-time initialization function for phrases;
}

uint64_t static TranscriptionView_Previews.phrases.getter()
{
  if (one-time initialization token for phrases != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _PreviewProvider._previews.getter in conformance TranscriptionView_Previews(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TranscriptionView_Previews and conformance TranscriptionView_Previews();
  return MEMORY[0x1F40F8C48](a1, v2);
}

uint64_t protocol witness for static _PreviewProvider._platform.getter in conformance TranscriptionView_Previews(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TranscriptionView_Previews and conformance TranscriptionView_Previews();
  return MEMORY[0x1F40F8C40](a1, v2);
}

uint64_t specialized AutoScrollViewModel.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TranscriptionViewModel.CaptionID>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v13 = MEMORY[0x1E4FBC870];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TranscriptionViewModel.CaptionID>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 32))(v9, v8, v5);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 104);
  v12[7] = 1;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v2 + 32))(v10, v4, v1);
  return v0;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in variable initialization expression of AutoScrollingList._autoScrollViewModel()
{
  return specialized AutoScrollViewModel.init()();
}

uint64_t outlined destroy of TranscriptionView(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t partial apply for closure #2 in TranscriptionView.body.getter()
{
  uint64_t v1 = type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return closure #2 in TranscriptionView.body.getter(v3);
}

uint64_t key path getter for EnvironmentValues.multilineTextAlignment : EnvironmentValues, serialized@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C3386F30@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.multilineTextAlignment : EnvironmentValues, serialized()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1C3386F84()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type AccessibilityVoiceOverModifier and conformance AccessibilityVoiceOverModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Material?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Material?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<HierarchicalShapeStyle> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static TranscriptionView_Previews.previews.getter()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in CallScreeningRTTHelper.callStatusChanged(_:);
  return closure #1 in static TranscriptionView_Previews.previews.getter();
}

uint64_t associated type witness table accessor for View.Body : View in TranscriptionView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type TranscriptionView_Previews and conformance TranscriptionView_Previews()
{
  unint64_t result = lazy protocol witness table cache variable for type TranscriptionView_Previews and conformance TranscriptionView_Previews;
  if (!lazy protocol witness table cache variable for type TranscriptionView_Previews and conformance TranscriptionView_Previews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptionView_Previews and conformance TranscriptionView_Previews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptionView_Previews and conformance TranscriptionView_Previews;
  if (!lazy protocol witness table cache variable for type TranscriptionView_Previews and conformance TranscriptionView_Previews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptionView_Previews and conformance TranscriptionView_Previews);
  }
  return result;
}

uint64_t associated type witness table accessor for PreviewProvider.Previews : View in TranscriptionView_Previews()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C3387460@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TranscriptionView.viewModel.getter();
  *a1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TranscriptionView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[2];
    v4[1] = a2[1];
    v4[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (uint64_t *)((char *)v4 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    BOOL v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *BOOL v14 = *v15;
    v14[1] = v16;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TranscriptionView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for RedactionReasons();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TranscriptionView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for RedactionReasons();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TranscriptionView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[6];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v6, (uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TranscriptionView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for RedactionReasons();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for TranscriptionView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v7, (uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3387B5C);
}

uint64_t sub_1C3387B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<RedactionReasons>);
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TranscriptionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3387BFC);
}

uint64_t sub_1C3387BFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<RedactionReasons>);
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for TranscriptionView()
{
  type metadata accessor for Environment<RedactionReasons>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<RedactionReasons>.Content()
{
  if (!lazy cache variable for type metadata for Environment<RedactionReasons>.Content)
  {
    type metadata accessor for RedactionReasons();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<RedactionReasons>.Content);
    }
  }
}

ValueMetadata *type metadata accessor for TranscriptionView.Strings()
{
  return &type metadata for TranscriptionView.Strings;
}

ValueMetadata *type metadata accessor for TranscriptionView_Previews()
{
  return &type metadata for TranscriptionView_Previews;
}

uint64_t sub_1C3387DAC()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, _FlexFrameLayout>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingMod);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritin, &demangling cache variable for type metadata for ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>, ModifiedContent<VStack<TupleView<(_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingMod);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onTapGesture(count:perform:)>>.0, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C3387EC8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TranscriptionView, _FrameLayout>, _TaskModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TranscriptionView, _FrameLayout>, _TaskModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TranscriptionView, _FrameLayout>, _TaskModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TranscriptionView, _FrameLayout>, _TaskModifier>);
    lazy protocol witness table accessor for type ModifiedContent<TranscriptionView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, MEMORY[0x1E4F3C900]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TranscriptionView, _FrameLayout>, _TaskModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TranscriptionView, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TranscriptionView, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TranscriptionView, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<TranscriptionView, _FrameLayout>);
    _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type TranscriptionView and conformance TranscriptionView, (void (*)(uint64_t))type metadata accessor for TranscriptionView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TranscriptionView, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C33881BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for makeCaption #1 (_:) in closure #1 in static TranscriptionView_Previews.previews.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return makeCaption #1 (_:) in closure #1 in static TranscriptionView_Previews.previews.getter(a1, a2, v3, a3);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t outlined init with take of TranscriptionView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in TranscriptionView.body.getter()
{
  uint64_t v0 = type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_1_1(v0);
  return closure #1 in closure #2 in TranscriptionView.body.getter();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect>, AccessibilityVoiceOverModifier>, _PaddingLayout>, GeometryReader<AutoScrollingList<ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>, [TranscriptionViewModel.Caption], TranscriptionViewModel.Caption, <<opaque return type of View.privacySensitive(_:)>>.0>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in TranscriptionView.transcriptView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_1_1(v3);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return closure #1 in TranscriptionView.transcriptView.getter(v5, a1);
}

void partial apply for closure #1 in closure #1 in TranscriptionView.transcriptView.getter()
{
  uint64_t v0 = type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_1_1(v0);
  TranscriptionView.captionRow(caption:)();
}

uint64_t objectdestroyTm_9()
{
  uint64_t v1 = type metadata accessor for TranscriptionView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for RedactionReasons();
    OUTLINED_FUNCTION_0();
    (*(void (**)(uint64_t))(v4 + 8))(v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in TranscriptionView.transcriptView.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_1_1(v3);
  uint64_t v5 = (UIFontDescriptorSymbolicTraits *)(v1
                                        + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
  return closure #2 in closure #1 in TranscriptionView.transcriptView.getter(v5, a1);
}

uint64_t outlined init with copy of TranscriptionView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t View.transition<A>(_:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  AnyTransition.init<A>(_:)();
  View.transition(_:)();
  return swift_release();
}

uint64_t TransitioningText<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (void *)((char *)a3
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>)
                         + 40));
  *uint64_t v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a3 = a1;
  a3[1] = a2;
  return result;
}

void FadeOutFadeInViewModifier.opacity.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*FadeOutFadeInViewModifier.opacity.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double FadeOutFadeInViewModifier.modifiedOpacity.getter(double a1)
{
  double v1 = (a1 + -0.75) * 4.0;
  BOOL v2 = a1 <= 0.75;
  double result = 0.0;
  if (!v2) {
    return v1;
  }
  return result;
}

void FadeOutFadeInViewModifier.animatableData.setter(double a1)
{
  *double v1 = a1;
}

double (*FadeOutFadeInViewModifier.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return FadeOutFadeInViewModifier.animatableData.modify;
}

double FadeOutFadeInViewModifier.animatableData.modify(uint64_t a1)
{
  return OUTLINED_FUNCTION_2_104((double *)a1, *(void **)(a1 + 8));
}

uint64_t FadeOutFadeInViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  if (a3 <= 0.75) {
    double v11 = 0.0;
  }
  else {
    double v11 = (a3 + -0.75) * 4.0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<FadeOutFadeInViewModifier>);
  OUTLINED_FUNCTION_1_9();
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v10, a1);
  *(double *)(v10 + *(int *)(v7 + 44)) = v11;
  return outlined init with take of ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect>(v10, a2, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FadeOutFadeInViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = lazy protocol witness table accessor for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier();
  return MEMORY[0x1F40F8340](a1, a2, a3, a4, a5, v12, a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FadeOutFadeInViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = lazy protocol witness table accessor for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier();
  return MEMORY[0x1F40F8348](a1, a2, a3, a4, a5, v12, a6);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance FadeOutFadeInViewModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FadeOutFadeInViewModifier.body(content:)(a1, a2, *v2);
}

void protocol witness for Animatable.animatableData.setter in conformance FadeOutFadeInViewModifier(double *a1)
{
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance FadeOutFadeInViewModifier(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance FadeOutFadeInViewModifier;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance FadeOutFadeInViewModifier()
{
  return MEMORY[0x1F40F7DA8]();
}

uint64_t FadeOutFadeInTransition.body(content:phase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier>);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  if (TransitionPhase.isIdentity.getter()) {
    double v9 = 1.0;
  }
  else {
    double v9 = 0.0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlaceholderContentView<FadeOutFadeInTransition>);
  OUTLINED_FUNCTION_1_9();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v8, a1);
  *(double *)(v8 + *(int *)(v5 + 44)) = v9;
  return outlined init with take of ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect>(v8, a2, &demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier>);
}

uint64_t protocol witness for static Transition.properties.getter in conformance FadeOutFadeInTransition()
{
  return MEMORY[0x1F40F7FC8]();
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance FadeOutFadeInTransition()
{
  return MEMORY[0x1F40F7FC0]();
}

uint64_t TransitioningText.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TransitioningText.transition.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

void TransitioningText.horizontalSizeClass.getter()
{
}

uint64_t TransitioningText.toolbarFont.getter()
{
  uint64_t v0 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v21 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v21 - v14;
  if (static Platform.current.getter() != 1) {
    goto LABEL_10;
  }
  specialized Environment.wrappedValue.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E4F3DA58], v0);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v0);
  uint64_t v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>((uint64_t)v13, v16, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v0) != 1)
  {
    outlined init with copy of ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass();
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      double v18 = *(void (**)(char *, uint64_t))(v1 + 8);
      v18(v3, v0);
      outlined destroy of Conversation?((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v18(v10, v0);
      outlined destroy of Conversation?((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (v17) {
        goto LABEL_9;
      }
LABEL_10:
      static Font.caption.getter();
      static Font.Weight.regular.getter();
      goto LABEL_11;
    }
    outlined destroy of Conversation?((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_7:
    outlined destroy of Conversation?((uint64_t)v6, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_10;
  }
  outlined destroy of Conversation?((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v16, 1, v0) != 1) {
    goto LABEL_7;
  }
  outlined destroy of Conversation?((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
LABEL_9:
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
LABEL_11:
  uint64_t v19 = Font.weight(_:)();
  swift_release();
  return v19;
}

uint64_t TransitioningText.init(_:transition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for TransitioningText();
  uint64_t v11 = (void *)((char *)a5 + *(int *)(v10 + 40));
  *uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  swift_storeEnumTagMultiPayload();
  *a5 = a1;
  a5[1] = a2;
  uint64_t v12 = (char *)a5 + *(int *)(v10 + 36);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);
  return v13(v12, a3, a4);
}

uint64_t TransitioningText.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>);
  MEMORY[0x1F4188790](v6 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = (uint64_t *)(v8 - v7);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  *uint64_t v9 = static Alignment.center.getter();
  v9[1] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>);
  closure #1 in TransitioningText.body.getter(v3, *(void *)(a1 + 16), *(void *)(a1 + 24), (uint64_t)v9 + *(int *)(v11 + 44));
  static Animation.default.getter();
  uint64_t v12 = Animation.speed(_:)();
  swift_release();
  uint64_t v14 = *v3;
  uint64_t v13 = v3[1];
  outlined init with copy of ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>((uint64_t)v9, a2, &demangling cache variable for type metadata for ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>);
  uint64_t v15 = (uint64_t *)(a2
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>, _AnimationModifier<String>>)
                           + 36));
  *uint64_t v15 = v12;
  v15[1] = v14;
  v15[2] = v13;
  swift_bridgeObjectRetain();
  return outlined destroy of Conversation?((uint64_t)v9, &demangling cache variable for type metadata for ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>);
}

uint64_t closure #1 in TransitioningText.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[1] = a2;
  v27[2] = a3;
  uint64_t v28 = a4;
  uint64_t v5 = type metadata accessor for MarqueeLabel();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDView<MarqueeLabel, String>);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  char v17 = self;
  swift_bridgeObjectRetain();
  id v18 = objc_msgSend(v17, sel_labelColor);
  MarqueeLabel.init(text:color:animated:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
  uint64_t v19 = &v11[*(int *)(v9 + 52)];
  *(void *)uint64_t v19 = v16;
  *((void *)v19 + 1) = v15;
  __n128 v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  v20(v8, v5);
  uint64_t v21 = (uint64_t)a1 + *(int *)(type metadata accessor for TransitioningText() + 36);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IDView<MarqueeLabel, String> and conformance IDView<A, B>, &demangling cache variable for type metadata for IDView<MarqueeLabel, String>);
  View.transition<A>(_:)(v21);
  outlined destroy of Conversation?((uint64_t)v11, &demangling cache variable for type metadata for IDView<MarqueeLabel, String>);
  uint64_t v22 = TransitioningText.toolbarFont.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = v28;
  outlined init with copy of ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>((uint64_t)v14, v28, &demangling cache variable for type metadata for ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>);
  uint64_t v25 = (uint64_t *)(v24
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>)
                           + 36));
  *uint64_t v25 = KeyPath;
  v25[1] = v22;
  return outlined destroy of Conversation?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>);
}

uint64_t outlined init with take of ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_9();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for TransitioningText()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IDView<MarqueeLabel, String> and conformance IDView<A, B>, &demangling cache variable for type metadata for IDView<MarqueeLabel, String>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>, &demangling cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FadeOutFadeInViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in FadeOutFadeInViewModifier()
{
  return MEMORY[0x1E4F3F128];
}

uint64_t associated type witness table accessor for Transition.Body : View in FadeOutFadeInTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in TransitioningText<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1C3389820(double *a1)
{
}

ValueMetadata *type metadata accessor for FadeOutFadeInViewModifier()
{
  return &type metadata for FadeOutFadeInViewModifier;
}

ValueMetadata *type metadata accessor for FadeOutFadeInTransition()
{
  return &type metadata for FadeOutFadeInTransition;
}

void type metadata completion function for TransitioningText()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TransitioningText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = v9 + v13;
  uint64_t v15 = (v9 + v13 + ((v8 + 16) & ~v8)) & ~v13;
  if (*(_DWORD *)(v11 + 84)) {
    size_t v16 = *(void *)(v11 + 64);
  }
  else {
    size_t v16 = *(void *)(v11 + 64) + 1;
  }
  if (v16 <= 8) {
    uint64_t v17 = 8;
  }
  else {
    uint64_t v17 = v16;
  }
  int v18 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7 || v18 != 0 || (unint64_t)(v17 + v15 + 1) > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + (((v13 | v7) + 16) & ~(v13 | v7)));
LABEL_32:
    swift_retain();
    return a1;
  }
  uint64_t v36 = v10;
  uint64_t v22 = ~v13;
  uint64_t v23 = a2[1];
  *a1 = *a2;
  a1[1] = v23;
  uint64_t v24 = (char *)a2 + v8;
  uint64_t v25 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v26 = (unint64_t)(v24 + 16) & ~v8;
  long long v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v27(v25, v26, v5);
  uint64_t v28 = (void *)((v25 + v14) & v22);
  long long v29 = (unsigned __int8 *)((v26 + v14) & v22);
  unsigned int v30 = v29[v17];
  unsigned int v31 = v30 - 2;
  if (v30 >= 2)
  {
    if (v17 <= 3) {
      uint64_t v32 = v17;
    }
    else {
      uint64_t v32 = 4;
    }
    switch(v32)
    {
      case 1:
        int v33 = *v29;
        goto LABEL_26;
      case 2:
        int v33 = *(unsigned __int16 *)v29;
        goto LABEL_26;
      case 3:
        int v33 = *(unsigned __int16 *)v29 | (*(unsigned __int8 *)(((v26 + v14) & v22) + 2) << 16);
        goto LABEL_26;
      case 4:
        int v33 = *(_DWORD *)v29;
LABEL_26:
        int v34 = (v33 | (v31 << (8 * v17))) + 2;
        unsigned int v30 = v33 + 2;
        if (v17 < 4) {
          unsigned int v30 = v34;
        }
        break;
      default:
        break;
    }
  }
  if (v30 != 1)
  {
    *uint64_t v28 = *(void *)v29;
    *((unsigned char *)v28 + v17) = 0;
    goto LABEL_32;
  }
  if (__swift_getEnumTagSinglePayload((v26 + v14) & v22, 1, v36))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(v28, v29, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v36);
  }
  *((unsigned char *)v28 + v17) = 1;
  return a1;
}

uint64_t destroy for TransitioningText(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v11 = (unsigned __int8 *)((v6 + v7 + v10) & ~v10);
  unint64_t v12 = *(void *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84)) {
    ++v12;
  }
  if (v12 <= 8) {
    unint64_t v12 = 8;
  }
  unsigned int v13 = v11[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *v11;
        goto LABEL_14;
      case 2:
        int v16 = *(unsigned __int16 *)v11;
        goto LABEL_14;
      case 3:
        int v16 = *(unsigned __int16 *)v11 | (v11[2] << 16);
        goto LABEL_14;
      case 4:
        int v16 = *(_DWORD *)v11;
LABEL_14:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    uint64_t v20 = *(void *)(v8 - 8);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v8);
    if (!result)
    {
      uint64_t v19 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v20 + 8);
      return v19(v11, v8);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for TransitioningText(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  swift_bridgeObjectRetain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48);
  uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  uint64_t v15 = (void *)((v11 + v14 + v9) & ~v14);
  int v16 = (unsigned __int8 *)((v11 + v14 + v10) & ~v14);
  if (*(_DWORD *)(v13 + 84)) {
    size_t v17 = *(void *)(v13 + 64);
  }
  else {
    size_t v17 = *(void *)(v13 + 64) + 1;
  }
  if (v17 <= 8) {
    uint64_t v18 = 8;
  }
  else {
    uint64_t v18 = v17;
  }
  unsigned int v19 = v16[v18];
  unsigned int v20 = v19 - 2;
  if (v19 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v16;
        goto LABEL_16;
      case 2:
        int v22 = *(unsigned __int16 *)v16;
        goto LABEL_16;
      case 3:
        int v22 = *(unsigned __int16 *)v16 | (v16[2] << 16);
        goto LABEL_16;
      case 4:
        int v22 = *(_DWORD *)v16;
LABEL_16:
        int v23 = (v22 | (v20 << (8 * v18))) + 2;
        unsigned int v19 = v22 + 2;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  if (v19 == 1)
  {
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v12))
    {
      memcpy(v15, v16, v17);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v13 + 16))(v15, v16, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
    }
    *((unsigned char *)v15 + v18) = 1;
  }
  else
  {
    *uint64_t v15 = *(void *)v16;
    *((unsigned char *)v15 + v18) = 0;
    swift_retain();
  }
  return a1;
}

void *assignWithCopy for TransitioningText(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40);
  uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  uint64_t v15 = (unsigned __int8 *)((v11 + v14 + v9) & ~v14);
  int v16 = (unsigned __int8 *)((v11 + v14 + v10) & ~v14);
  if (v15 != v16)
  {
    uint64_t v17 = v12;
    uint64_t v18 = *(void *)(v12 - 8);
    if (*(_DWORD *)(v13 + 84)) {
      size_t v19 = *(void *)(v13 + 64);
    }
    else {
      size_t v19 = *(void *)(v13 + 64) + 1;
    }
    if (v19 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v19;
    }
    unsigned int v21 = v15[v20];
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *v15;
          goto LABEL_17;
        case 2:
          int v24 = *(unsigned __int16 *)v15;
          goto LABEL_17;
        case 3:
          int v24 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_17;
        case 4:
          int v24 = *(_DWORD *)v15;
LABEL_17:
          int v25 = (v24 | (v22 << (8 * v20))) + 2;
          unsigned int v21 = v24 + 2;
          if (v20 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 1)
    {
      if (!__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v12)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v15, v17);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v26 = v16[v20];
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v28 = v20;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *v16;
          goto LABEL_32;
        case 2:
          int v29 = *(unsigned __int16 *)v16;
          goto LABEL_32;
        case 3:
          int v29 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_32;
        case 4:
          int v29 = *(_DWORD *)v16;
LABEL_32:
          int v30 = (v29 | (v27 << (8 * v20))) + 2;
          unsigned int v26 = v29 + 2;
          if (v20 < 4) {
            unsigned int v26 = v30;
          }
          break;
        default:
          break;
      }
    }
    if (v26 == 1)
    {
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        memcpy(v15, v16, v19);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16))(v15, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      }
      v15[v20] = 1;
    }
    else
    {
      *(void *)uint64_t v15 = *(void *)v16;
      v15[v20] = 0;
      swift_retain();
    }
  }
  return a1;
}

_OWORD *initializeWithTake for TransitioningText(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  uint64_t v13 = (void *)((v9 + v12 + v7) & ~v12);
  uint64_t v14 = (unsigned __int8 *)((v9 + v12 + v8) & ~v12);
  if (*(_DWORD *)(v11 + 84)) {
    size_t v15 = *(void *)(v11 + 64);
  }
  else {
    size_t v15 = *(void *)(v11 + 64) + 1;
  }
  if (v15 <= 8) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = v15;
  }
  unsigned int v17 = v14[v16];
  unsigned int v18 = v17 - 2;
  if (v17 >= 2)
  {
    if (v16 <= 3) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *v14;
        goto LABEL_16;
      case 2:
        int v20 = *(unsigned __int16 *)v14;
        goto LABEL_16;
      case 3:
        int v20 = *(unsigned __int16 *)v14 | (v14[2] << 16);
        goto LABEL_16;
      case 4:
        int v20 = *(_DWORD *)v14;
LABEL_16:
        int v21 = (v20 | (v18 << (8 * v16))) + 2;
        unsigned int v17 = v20 + 2;
        if (v16 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  if (v17 == 1)
  {
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10))
    {
      memcpy(v13, v14, v15);
      char v22 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 32))(v13, v14, v10);
      char v22 = 1;
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
    }
  }
  else
  {
    char v22 = 0;
    *uint64_t v13 = *(void *)v14;
  }
  *((unsigned char *)v13 + v16) = v22;
  return a1;
}

void *assignWithTake for TransitioningText(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v16 = (unsigned __int8 *)((v12 + v15 + v10) & ~v15);
  unsigned int v17 = (unsigned __int8 *)((v12 + v15 + v11) & ~v15);
  if (v16 != v17)
  {
    uint64_t v18 = v13;
    uint64_t v19 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84)) {
      size_t v20 = *(void *)(v14 + 64);
    }
    else {
      size_t v20 = *(void *)(v14 + 64) + 1;
    }
    if (v20 <= 8) {
      uint64_t v21 = 8;
    }
    else {
      uint64_t v21 = v20;
    }
    unsigned int v22 = v16[v21];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v21 <= 3) {
        uint64_t v24 = v21;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v16;
          goto LABEL_17;
        case 2:
          int v25 = *(unsigned __int16 *)v16;
          goto LABEL_17;
        case 3:
          int v25 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_17;
        case 4:
          int v25 = *(_DWORD *)v16;
LABEL_17:
          int v26 = (v25 | (v23 << (8 * v21))) + 2;
          unsigned int v22 = v25 + 2;
          if (v21 < 4) {
            unsigned int v22 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v22 == 1)
    {
      if (!__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v13)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(v16, v18);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v27 = v17[v21];
    unsigned int v28 = v27 - 2;
    if (v27 >= 2)
    {
      if (v21 <= 3) {
        uint64_t v29 = v21;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *v17;
          goto LABEL_32;
        case 2:
          int v30 = *(unsigned __int16 *)v17;
          goto LABEL_32;
        case 3:
          int v30 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          goto LABEL_32;
        case 4:
          int v30 = *(_DWORD *)v17;
LABEL_32:
          int v31 = (v30 | (v28 << (8 * v21))) + 2;
          unsigned int v27 = v30 + 2;
          if (v21 < 4) {
            unsigned int v27 = v31;
          }
          break;
        default:
          break;
      }
    }
    if (v27 == 1)
    {
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        memcpy(v16, v17, v20);
        char v32 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v19 + 32))(v16, v17, v18);
        char v32 = 1;
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
    }
    else
    {
      char v32 = 0;
      *(void *)uint64_t v16 = *(void *)v17;
    }
    v16[v21] = v32;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitioningText(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for UserInterfaceSizeClass() - 8);
  unint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  if (!*(_DWORD *)(v9 + 84)) {
    ++v10;
  }
  uint64_t v12 = 8;
  if (v10 > 8) {
    uint64_t v12 = v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_27;
  }
  uint64_t v13 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v14 = v12 + ((((v11 + 16) & ~v11) + *(void *)(v6 + 64) + v13) & ~v13) + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v18 < 2)
    {
LABEL_27:
      if ((v7 & 0x80000000) != 0)
      {
        return __swift_getEnumTagSinglePayload(((unint64_t)a1 + v11 + 16) & ~v11, v7, v5);
      }
      else
      {
        unint64_t v20 = *((void *)a1 + 1);
        if (v20 >= 0xFFFFFFFF) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_27;
  }
LABEL_19:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void storeEnumTagSinglePayload for TransitioningText(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for UserInterfaceSizeClass() - 8);
  unint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  uint64_t v15 = (((v13 + 16) & ~v13) + *(void *)(v8 + 64) + v14) & ~v14;
  if (!*(_DWORD *)(v11 + 84)) {
    ++v12;
  }
  if (v12 <= 8) {
    unint64_t v12 = 8;
  }
  size_t v16 = v12 + v15 + 1;
  char v17 = 8 * v16;
  if (a3 <= v10)
  {
    int v18 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v21 = ((a3 - v10 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v19 = ~v10 + a2;
    if (v16 < 4)
    {
      int v20 = (v19 >> v17) + 1;
      if (v16)
      {
        int v22 = v19 & ~(-1 << v17);
        bzero(a1, v16);
        if (v16 == 3)
        {
          *a1 = v22;
          *((unsigned char *)a1 + 2) = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *a1 = v22;
        }
        else
        {
          *(unsigned char *)a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        *((unsigned char *)a1 + v16) = v20;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v16) = v20;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)((char *)a1 + v16) = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      *((unsigned char *)a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)((char *)a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x1C338ADC4);
    case 4:
      *(_DWORD *)((char *)a1 + v16) = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if ((v9 & 0x80000000) != 0)
        {
          __swift_storeEnumTagSinglePayload(((unint64_t)a1 + v13 + 16) & ~v13, a2, v9, v7);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = (a2 - 1);
        }
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<FadeOutFadeInViewModifier> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<FadeOutFadeInViewModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<FadeOutFadeInViewModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PlaceholderContentView<FadeOutFadeInTransition> and conformance PlaceholderContentView<A>, &demangling cache variable for type metadata for PlaceholderContentView<FadeOutFadeInTransition>);
    lazy protocol witness table accessor for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<FadeOutFadeInTransition>, FadeOutFadeInViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier;
  if (!lazy protocol witness table cache variable for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier;
  if (!lazy protocol witness table cache variable for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FadeOutFadeInViewModifier and conformance FadeOutFadeInViewModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>, _AnimationModifier<String>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>, _AnimationModifier<String>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>, _AnimationModifier<String>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>, _AnimationModifier<String>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<String> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>, _AnimationModifier<String>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of ZStack<ModifiedContent<ModifiedContent<IDView<MarqueeLabel, String>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_9();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t URL.withoutFragment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URLComponents();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URLComponents?);
  MEMORY[0x1F4188790](v7 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if (__swift_getEnumTagSinglePayload(v10, 1, v2) == 1)
  {
    outlined destroy of Conversation?(v10, (uint64_t *)&demangling cache variable for type metadata for URLComponents?);
    uint64_t v11 = type metadata accessor for URL();
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v11);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v10, v2);
    URLComponents.fragment.setter();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v13 - 8);
    OUTLINED_FUNCTION_21();
    uint64_t v16 = v15 - v14;
    URL.baseURL.getter();
    URLComponents.url(relativeTo:)();
    outlined destroy of Conversation?(v16, &demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t ClarityUIRecentsView.body.getter()
{
  uint64_t v0 = type metadata accessor for ClarityUINavigationTitle();
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for List<Never, ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>>);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>);
  lazy protocol witness table accessor for type ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>();
  List<>.init(content:)();
  static ClarityUINavigationTitle.recents.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type List<Never, ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>> and conformance List<A, B>, &demangling cache variable for type metadata for List<Never, ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>>);
  View.navigationTitle(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v6);
}

uint64_t closure #1 in ClarityUIRecentsView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.badge(_:)>>.0);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [CHRecentCall] and conformance [A], &demangling cache variable for type metadata for [CHRecentCall]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<Label<Text, ClarityUIContactAvatar>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  swift_getOpaqueTypeConformance2();
  return ForEach<>.init(_:id:content:)();
}

uint64_t partial apply for closure #1 in ClarityUIRecentsView.body.getter()
{
  return closure #1 in ClarityUIRecentsView.body.getter();
}

unint64_t lazy protocol witness table accessor for type ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<Label<Text, ClarityUIContactAvatar>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void key path getter for CHRecentCall.uniqueId : CHRecentCall(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_uniqueId);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

void key path setter for CHRecentCall.uniqueId : CHRecentCall(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  id v3 = (id)MEMORY[0x1C87730B0](*a1, a1[1]);
  objc_msgSend(v2, sel_setUniqueId_, v3);
}

uint64_t closure #1 in closure #1 in ClarityUIRecentsView.body.getter(void **a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *a1;
  ClarityUIRecentsView.contact(for:)(*a1, a2, &v21);
  uint64_t v9 = v22;
  uint64_t v11 = v23;
  uint64_t v10 = v24;
  id v12 = v21;
  id v13 = v9;
  swift_bridgeObjectRetain();
  id v14 = v8;
  ClarityUIOutgoingCallAction.init(recentCall:)(v14, (uint64_t)v29);
  id v21 = v12;
  id v22 = v13;
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v25 = v29[0];
  uint64_t v26 = v29[1];
  uint64_t v27 = v30;
  long long v28 = v31;
  id v17 = v12;
  id v18 = v13;
  uint64_t v19 = v11;
  uint64_t v20 = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, ClarityUIContactAvatar>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Label<Text, ClarityUIContactAvatar> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, ClarityUIContactAvatar>);
  lazy protocol witness table accessor for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination();
  NavigationLink<>.init<A>(value:label:)();
  objc_msgSend(v14, sel_unreadCount);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<Label<Text, ClarityUIContactAvatar>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  View.badge(_:)();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

void ClarityUIRecentsView.contact(for:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v55[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC15ConversationKit20ClarityUICallHistory_contactStore);
  id v6 = objc_allocWithZone(MEMORY[0x1E4F57C70]);
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_initWithDataSource_, v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769830;
  *(void *)(v9 + 32) = a1;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  id v10 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  static ClarityUIContact.requiredDescriptors(for:)((uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v55[0] = 0;
  id v13 = objc_msgSend(v8, sel_contactsByHandleForCalls_keyDescriptors_error_, isa, v12, v55);

  id v14 = v55[0];
  if (v13)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v16 = v14;

    id v17 = specialized Collection.first.getter(v15);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    if (v17)
    {

      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v36) {
          goto LABEL_5;
        }
      }
      else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_5:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v19 & 0xC000000000000001) == 0, v19);
        if ((v19 & 0xC000000000000001) != 0) {
          id v20 = (id)MEMORY[0x1C87744F0](0, v19);
        }
        else {
          id v20 = *(id *)(v19 + 32);
        }
        id v21 = v20;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
    if (!outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v10)
      || (specialized Collection.first.getter(), v38 = v37, swift_bridgeObjectRelease(), !v38)
      || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNMutableContact), (id v39 = CNMutableContact.init(handle:)(v38)) == 0))
    {
      if (one-time initialization token for clarityUI != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Log.clarityUI);
      char v41 = v10;
      unint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        char v45 = (void *)swift_slowAlloc();
        *(_DWORD *)v44 = 138412290;
        v55[0] = v41;
        uint64_t v46 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v45 = v41;

        _os_log_impl(&dword_1C2F90000, v42, v43, "Unable to create contact for recent call: %@", v44, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        unint64_t v42 = v41;
      }

      id v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8F8]), sel_init);
    }
    id v21 = v39;
  }
  else
  {
    id v54 = v8;
    id v22 = v55[0];
    uint64_t v23 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.clarityUI);
    id v25 = v10;
    id v26 = v23;
    id v27 = v25;
    id v28 = v23;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      char v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412546;
      id v53 = v7;
      v55[0] = v27;
      id v33 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v32 = v27;

      *(_WORD *)(v31 + 12) = 2112;
      id v34 = v23;
      uint64_t v35 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v55[0] = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v32[1] = v35;
      id v7 = v53;

      _os_log_impl(&dword_1C2F90000, v29, v30, "Unable to get contacts by handle for recent call: %@. Error: %@", (uint8_t *)v31, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8F8]), sel_init);

    id v8 = v54;
  }
LABEL_26:
  id v47 = v7;
  id v48 = v21;
  id v49 = objc_msgSend(v48, sel_identifier);
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  *a3 = v48;
  a3[1] = v47;
  a3[2] = v50;
  a3[3] = v52;
}

uint64_t ClarityUIOutgoingCallAction.init(recentCall:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_uniqueId);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  LOBYTE(v4) = CHRecentCall.callType.getter();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)a2 = 0x2D746E65636552;
  *(void *)(a2 + 8) = 0xE700000000000000;
  *(unsigned char *)(a2 + 16) = (_BYTE)v4;
  *(void *)(a2 + 24) = partial apply for closure #1 in ClarityUIOutgoingCallAction.init(recentCall:);
  *(void *)(a2 + 32) = result;
  return result;
}

uint64_t ClarityUIRecentsView.init()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t protocol witness for View.body.getter in conformance ClarityUIRecentsView()
{
  return ClarityUIRecentsView.body.getter();
}

uint64_t CHRecentCall.callType.getter()
{
  id v1 = objc_msgSend(v0, sel_mediaType);
  if (v1 != (id)1)
  {
    if (v1 == (id)2) {
      return 1;
    }
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.clarityUI);
    id v4 = v0;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (_DWORD *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *id v7 = 136315138;
      objc_msgSend(v4, sel_mediaType);
      type metadata accessor for CHRecentCallMediaType(0);
      uint64_t v8 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_2(&dword_1C2F90000, v10, v11, "Unhandled media type for recent call: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
  }
  return 0;
}

Swift::Void __swiftcall CHRecentCall.makeCall()()
{
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  id v1 = objc_msgSend(v16, sel_dialRequestForRecentCall_, v0);
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, sel_setOriginatingUIType_, 31);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v0;
    aBlock[4] = partial apply for closure #1 in CHRecentCall.makeCall();
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_61;
    id v4 = _Block_copy(aBlock);
    id v5 = v2;
    id v6 = v0;
    swift_release();
    objc_msgSend(v16, sel_launchAppForDialRequest_completion_, v5, v4);
    _Block_release(v4);
  }
  else
  {
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.clarityUI);
    id v8 = v0;
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (_DWORD *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *uint64_t v11 = 138412290;
      aBlock[0] = v8;
      id v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v8;

      OUTLINED_FUNCTION_19_2(&dword_1C2F90000, v14, v15, "Unable to make dial request for recent call: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
  }
}

void closure #1 in CHRecentCall.makeCall()(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v6 = a1;
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.clarityUI);
    id v8 = a1;
    id v9 = a2;
    id v10 = a3;
    id v11 = a1;
    id v12 = v9;
    id v13 = v10;
    oslog = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      *(_DWORD *)uint64_t v15 = 138412802;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v16 = v12;

      *(_WORD *)(v15 + 12) = 2112;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16[1] = v13;

      *(_WORD *)(v15 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, oslog, v14, "Unable to launch app for dial request: %@, recent call: %@, error: %s", (uint8_t *)v15, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v21, -1, -1);
      MEMORY[0x1C87760E0](v15, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t static ClarityUIRecentsNavigationDestination.== infix(_:_:)()
{
  return 1;
}

Swift::Int ClarityUIRecentsNavigationDestination.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_remoteParticipantHandles);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  lazy protocol witness table accessor for type CHHandle and conformance NSObject();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1C338C9F0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ClarityUIOutgoingCallAction.init(recentCall:)()
{
}

uint64_t sub_1C338CA4C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CHRecentCall.makeCall()(void *a1)
{
  closure #1 in CHRecentCall.makeCall()(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIRecentsView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIRecentsView()
{
  return &type metadata for ClarityUIRecentsView;
}

ValueMetadata *type metadata accessor for ClarityUIRecentsNavigationDestination()
{
  return &type metadata for ClarityUIRecentsNavigationDestination;
}

uint64_t sub_1C338CB20()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for List<Never, ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type List<Never, ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>> and conformance List<A, B>, &demangling cache variable for type metadata for List<Never, ForEach<[CHRecentCall], String, <<opaque return type of View.badge(_:)>>.0>>);
  return swift_getOpaqueTypeConformance2();
}

char *keypath_get_selector_uniqueId()
{
  return sel_uniqueId;
}

uint64_t partial apply for closure #1 in closure #1 in ClarityUIRecentsView.body.getter(void **a1)
{
  return closure #1 in closure #1 in ClarityUIRecentsView.body.getter(a1, v1);
}

unint64_t lazy protocol witness table accessor for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination);
  }
  return result;
}

void static InCallControlsParticipantCell.invalidateCalculatedHeights()()
{
  static InCallControlsParticipantCell._defaultContentHeight = 0;
  byte_1EA350050 = 1;
  static InCallControlsParticipantCell._extendedContentHeight = 0;
  byte_1EA350060 = 1;
}

uint64_t InCallControlsParticipantCell.configure(with:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v3 - 8);
  id v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for InCallControlsParticipantCellViewModel();
  uint64_t v79 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v80 = v7;
  v83 = (long long *)((char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InCallControlsParticipantCellViewModel?, InCallControlsParticipantCellViewModel?));
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v77 = (uint64_t)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v17 = (char *)&v77 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v77 - v18;
  *(void *)&long long v81 = v1;
  uint64_t v20 = v1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_viewModel;
  swift_beginAccess();
  uint64_t v82 = a1;
  outlined init with copy of InCallControlsParticipantCellViewModel(a1, (uint64_t)v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v6);
  uint64_t v21 = (uint64_t)&v11[*(int *)(v9 + 56)];
  outlined init with copy of InCallControlsParticipantCellViewModel?(v20, (uint64_t)v11);
  outlined init with copy of InCallControlsParticipantCellViewModel?((uint64_t)v19, v21);
  OUTLINED_FUNCTION_27_16((uint64_t)v11);
  v78 = (int *)v6;
  if (v23)
  {
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
    OUTLINED_FUNCTION_27_16(v21);
    if (v23) {
      return outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
    }
    goto LABEL_9;
  }
  outlined init with copy of InCallControlsParticipantCellViewModel?((uint64_t)v11, (uint64_t)v17);
  OUTLINED_FUNCTION_27_16(v21);
  if (v23)
  {
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
    outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v17);
LABEL_9:
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for (InCallControlsParticipantCellViewModel?, InCallControlsParticipantCellViewModel?));
    uint64_t v24 = (char *)v81;
    goto LABEL_11;
  }
  id v25 = v83;
  outlined init with take of InCallControlsParticipantCellViewModel(v21, (uint64_t)v83);
  char v26 = static InCallControlsParticipantCellViewModel.== infix(_:_:)((uint64_t)v17, v25);
  outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v25);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v17);
  uint64_t result = outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  uint64_t v24 = (char *)v81;
  if (v26) {
    return result;
  }
LABEL_11:
  static UIBackgroundConfiguration.listGroupedCell()();
  id v27 = self;
  id v28 = objc_msgSend(v27, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v29 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v29);
  MEMORY[0x1C8773CE0](v5);
  objc_msgSend(v24, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  uint64_t v30 = v82;
  uint64_t v31 = v77;
  outlined init with copy of InCallControlsParticipantCellViewModel(v82, v77);
  char v32 = v78;
  __swift_storeEnumTagSinglePayload(v31, 0, 1, (uint64_t)v78);
  swift_beginAccess();
  outlined assign with take of InCallControlsParticipantCellViewModel?(v31, v20);
  swift_endAccess();
  id v33 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel];
  id v34 = (uint64_t *)(v30 + v32[6]);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  swift_bridgeObjectRetain();
  outlined bridged method (mbgnn) of @objc UILabel.text.setter(v35, v36, v33);
  swift_bridgeObjectRelease();
  int v37 = *(unsigned __int8 *)(v30 + v32[8]);
  if ((v37 - 2) < 2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    long long v81 = xmmword_1C3769610;
    *(_OWORD *)(inited + 16) = xmmword_1C3769610;
    id v39 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton];
    *(void *)(inited + 32) = v39;
    id v40 = v39;
    *(void *)(inited + 40) = InCallControlsParticipantCell.kickMemberButton.getter();
    *(void *)&long long v84 = inited;
    specialized Array._endMutation()();
    OUTLINED_FUNCTION_0_90();
    swift_bridgeObjectRelease();
    char v41 = *(unsigned char *)(v30 + v32[13]);
    uint64_t v42 = swift_initStackObject();
    *(_OWORD *)(v42 + 16) = v81;
    *(void *)(v42 + 32) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter);
    *(void *)(v42 + 40) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter);
LABEL_15:
    *(void *)&long long v84 = v42;
    specialized Array._endMutation()();
    InCallControlsParticipantCell.setEnabled(_:for:)(v41, v84);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v37 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v43 = swift_initStackObject();
    *(_OWORD *)(v43 + 16) = xmmword_1C3769F40;
    v44 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton];
    *(void *)(v43 + 32) = v44;
    id v45 = v44;
    *(void *)(v43 + 40) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter);
    *(void *)(v43 + 48) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter);
    *(void *)&long long v84 = v43;
    specialized Array._endMutation()();
    OUTLINED_FUNCTION_0_90();
    swift_bridgeObjectRelease();
    char v41 = *(unsigned char *)(v30 + v32[12]);
    uint64_t v42 = swift_initStackObject();
    *(_OWORD *)(v42 + 16) = xmmword_1C3769830;
    *(void *)(v42 + 32) = InCallControlsParticipantCell.kickMemberButton.getter();
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v46 = swift_initStackObject();
  *(_OWORD *)(v46 + 16) = xmmword_1C3769F40;
  *(void *)(v46 + 32) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter);
  *(void *)(v46 + 40) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter);
  *(void *)(v46 + 48) = InCallControlsParticipantCell.kickMemberButton.getter();
  *(void *)&long long v84 = v46;
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_0_90();
  swift_bridgeObjectRelease();
  LOBYTE(v46) = *(unsigned char *)(v30 + v32[10]);
  uint64_t v47 = swift_initStackObject();
  *(_OWORD *)(v47 + 16) = xmmword_1C3769830;
  id v48 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton];
  *(void *)(v47 + 32) = v48;
  *(void *)&long long v84 = v47;
  specialized Array._endMutation()();
  unint64_t v49 = v84;
  uint64_t v50 = v48;
  InCallControlsParticipantCell.setEnabled(_:for:)(v46, v49);
  swift_bridgeObjectRelease();
  uint64_t v51 = (uint64_t *)(v30 + v32[9]);
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  id v54 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v50) + 0x170);
  swift_bridgeObjectRetain();
  v54(v52, v53);
  uint64_t v30 = v82;
LABEL_17:
  uint64_t v55 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_avatarView];
  uint64_t v57 = *(void *)(v30 + 16);
  uint64_t v56 = *(void *)(v30 + 24);
  uint64_t v59 = *(void *)(v30 + 32);
  uint64_t v58 = *(void *)(v30 + 40);
  uint64_t v60 = *(void *)(v30 + 48);
  long long v84 = *(_OWORD *)v30;
  uint64_t v85 = v57;
  uint64_t v86 = v56;
  uint64_t v87 = v59;
  uint64_t v88 = v58;
  uint64_t v89 = v60;
  id v61 = (id)v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ParticipantContactView.contactDetails.setter((uint64_t *)&v84);
  id v62 = objc_msgSend(v55, sel_layer);
  id v63 = objc_msgSend(v27, sel_clearColor);
  id v64 = objc_msgSend(v63, sel_CGColor);

  objc_msgSend(v62, sel_setShadowColor_, v64);
  uint64_t v65 = swift_bridgeObjectRetain();
  GradientView.colors.setter(v65);
  objc_msgSend(v33, sel_setTextColor_, *(void *)(v30 + v32[17]));
  unsigned int v66 = *(unsigned __int8 *)(v30 + v32[7] + 16);
  switch(v66 >> 5)
  {
    case 1u:
      OUTLINED_FUNCTION_16_39();
      OUTLINED_FUNCTION_4_90();
      OUTLINED_FUNCTION_3_106();
      uint64_t v67 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon];
      objc_msgSend(v67, sel_setAlpha_, 1.0);
      uint64_t v68 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_cameraSymbolImage;
      goto LABEL_24;
    case 2u:
      OUTLINED_FUNCTION_16_39();
      OUTLINED_FUNCTION_4_90();
      OUTLINED_FUNCTION_3_106();
      v69 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon];
      objc_msgSend(v69, sel_setAlpha_, 1.0);
      v70 = &OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_cameraSymbolImage;
      if (v66) {
        v70 = &OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_messagesSymbolImage;
      }
      objc_msgSend(v69, sel_setImage_, *(void *)&v24[*v70]);
      goto LABEL_28;
    case 3u:
      OUTLINED_FUNCTION_16_39();
      OUTLINED_FUNCTION_4_90();
      OUTLINED_FUNCTION_3_106();
      uint64_t v67 = *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon];
      objc_msgSend(v67, sel_setAlpha_, 1.0);
      uint64_t v68 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_linkSymbolImage;
LABEL_24:
      objc_msgSend(v67, sel_setImage_, *(void *)&v24[v68]);
      goto LABEL_28;
    case 4u:
      outlined bridged method (mbnn) of @objc UILabel.text.setter(0, 0xE000000000000000, *(void **)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel]);
      goto LABEL_27;
    default:
      OUTLINED_FUNCTION_16_39();
      OUTLINED_FUNCTION_4_90();
      OUTLINED_FUNCTION_3_106();
LABEL_27:
      objc_msgSend(*(id *)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon], sel_setAlpha_, 0.0);
LABEL_28:
      objc_msgSend(v24, sel_setNeedsLayout);
      uint64_t v71 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v72 = (uint64_t)v83;
      outlined init with copy of InCallControlsParticipantCellViewModel(v30, (uint64_t)v83);
      unint64_t v73 = (*(unsigned __int8 *)(v79 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v74 = swift_allocObject();
      *(void *)(v74 + 16) = v71;
      outlined init with take of InCallControlsParticipantCellViewModel(v72, v74 + v73);
      v75 = (void (**)())&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_callDelegate];
      uint64_t v76 = *(void *)&v24[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_callDelegate];
      *v75 = partial apply for closure #1 in InCallControlsParticipantCell.configure(with:);
      v75[1] = (void (*)())v74;
      uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v76);
      break;
  }
  return result;
}

uint64_t outlined init with copy of InCallControlsParticipantCellViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InCallControlsParticipantCellViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of InCallControlsParticipantCellViewModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of InCallControlsParticipantCellViewModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id InCallControlsParticipantCell.nameLabel.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel);
}

id InCallControlsParticipantCell.subtitleLabel.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel);
}

id InCallControlsParticipantCell.actionButton.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton);
}

void InCallControlsParticipantCell.lmiApproveButton.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1
                + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton) = a1;
}

void *closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter(void *a1)
{
  uint64_t v2 = InCallControlsParticipantCell.inCallControlButton(for:)(2);
  if (one-time initialization token for joinButton != -1) {
    swift_once();
  }
  uint64_t v3 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x188);
  uint64_t v4 = swift_bridgeObjectRetain();
  v3(v4);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000010, 0x80000001C37AB230, v2);
  id v5 = objc_msgSend(a1, sel_contentView);
  objc_msgSend(v5, sel_addSubview_, v2);

  return v2;
}

void *InCallControlsParticipantCell.inCallControlButton(for:)(char a1)
{
  type metadata accessor for InCallControlButton();
  switch(a1)
  {
    case 1:
      *((void *)&v8 + 1) = &type metadata for SymbolImageDescribers.DrawerTable;
      uint64_t v9 = &protocol witness table for SymbolImageDescribers.DrawerTable;
      char v2 = 9;
      break;
    case 3:
      *((void *)&v8 + 1) = &type metadata for SymbolImageDescribers.DrawerTable;
      uint64_t v9 = &protocol witness table for SymbolImageDescribers.DrawerTable;
      char v2 = 12;
      break;
    case 2:
      *((void *)&v8 + 1) = &type metadata for SymbolImageDescribers.DrawerTable;
      uint64_t v9 = &protocol witness table for SymbolImageDescribers.DrawerTable;
      char v2 = 10;
      break;
    default:
      uint64_t v9 = 0;
      long long v7 = 0u;
      long long v8 = 0u;
      goto LABEL_9;
  }
  LOBYTE(v7) = v2;
LABEL_9:
  uint64_t v3 = (void *)InCallControlButton.__allocating_init(style:symbolDescriber:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(0, (uint64_t)&v7, 0, 0, 0, 1, 0, 0, 56.0, 1);
  objc_msgSend(v3, sel_setAlpha_, 0.0);
  objc_msgSend(v3, sel_setEnabled_, 0);
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = a1;
  swift_retain();
  UIControl.addAction(for:handler:)(64, (uint64_t)partial apply for closure #1 in InCallControlsParticipantCell.inCallControlButton(for:), v5);
  swift_release();
  swift_release();
  return v3;
}

id InCallControlsParticipantCell.lmiApproveButton.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    long long v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void InCallControlsParticipantCell.lmiRejectButton.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton) = a1;
}

void *closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter(void *a1)
{
  uint64_t v2 = InCallControlsParticipantCell.inCallControlButton(for:)(3);
  if (one-time initialization token for leaveButton != -1) {
    swift_once();
  }
  uint64_t v3 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x188);
  uint64_t v4 = swift_bridgeObjectRetain();
  v3(v4);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x63656A6552696D6CLL, 0xEF6E6F7474754274, v2);
  id v5 = objc_msgSend(a1, sel_contentView);
  objc_msgSend(v5, sel_addSubview_, v2);

  return v2;
}

id InCallControlsParticipantCell.kickMemberButton.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton];
  }
  else
  {
    uint64_t v4 = InCallControlsParticipantCell.inCallControlButton(for:)(1);
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000010, 0x80000001C37AB2A0, v4);
    id v5 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v5, sel_addSubview_, v4);

    uint64_t v6 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

void InCallControlsParticipantCell.kickMemberButton.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1
                + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton) = a1;
}

uint64_t InCallControlsParticipantCell.contentViews.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___contentViews;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___contentViews))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___contentViews);
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    id v5 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_avatarView);
    uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel);
    *(_OWORD *)(v4 + 16) = xmmword_1C37709C0;
    id v7 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel);
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v6;
    id v8 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon);
    *(void *)(v4 + 48) = v7;
    *(void *)(v4 + 56) = v8;
    uint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton);
    *(void *)(v4 + 64) = v9;
    id v10 = v5;
    id v11 = v6;
    id v12 = v7;
    id v13 = v8;
    id v14 = v9;
    *(void *)(v4 + 72) = InCallControlsParticipantCell.kickMemberButton.getter();
    *(void *)(v4 + 80) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter);
    *(void *)(v4 + 88) = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter);
    specialized Array._endMutation()();
    uint64_t v2 = v4;
    *(void *)(v3 + v1) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for InCallControlsParticipantCell.participantCellDelegate : InCallControlsParticipantCell@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for InCallControlsParticipantCell.participantCellDelegate : InCallControlsParticipantCell(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallControlsParticipantCell.participantCellDelegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t InCallControlsParticipantCell.participantCellDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsParticipantCell.participantCellDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id InCallControlsParticipantCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

unint64_t InCallControlsParticipantCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  swift_getObjectType();
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel;
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel;
  *(void *)&v3[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v6 = (void *)*MEMORY[0x1E4FB28C8];
  v97[0] = 0x69662E6F65646976;
  v97[1] = 0xEA00000000006C6CLL;
  v97[2] = -1;
  v97[3] = v6;
  __int16 v98 = 0;
  uint64_t v99 = 4;
  char v100 = 0;
  uint64_t v101 = 0;
  id v7 = v6;
  id v8 = static UIImage.symbolImage(for:)((uint64_t)v97);

  OUTLINED_FUNCTION_13_56();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v8);

  *(void *)&v3[v5] = v9;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_avatarView;
  LOBYTE(v91) = 0;
  id v11 = objc_allocWithZone((Class)type metadata accessor for ParticipantContactView());
  *(void *)&v3[v10] = ParticipantContactView.init(colorStyle:)((unsigned __int8 *)&v91);
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton;
  uint64_t v13 = type metadata accessor for InCallControlButton();
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  *(void *)&v3[v12] = OUTLINED_FUNCTION_1_114(56.0, v13, (uint64_t)&v91, v14, v15, v16, v17, v18, v19, 1);
  uint64_t v20 = type metadata accessor for InCallControlsParticipantCellViewModel();
  OUTLINED_FUNCTION_13_18(v20);
  uint64_t v21 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_cameraSymbolImage;
  *(void *)&long long v91 = 0x69662E6F65646976;
  *((void *)&v91 + 1) = 0xEA00000000006C6CLL;
  *(void *)&long long v92 = -1;
  *((void *)&v92 + 1) = v7;
  LOWORD(v93) = 0;
  uint64_t v94 = 4;
  char v95 = 0;
  uint64_t v96 = 0;
  id v22 = v7;
  id v23 = static UIImage.symbolImage(for:)((uint64_t)&v91);

  OUTLINED_FUNCTION_13_56();
  *(void *)&v3[v21] = v23;
  uint64_t v24 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_copresenceSymbolImage;
  OUTLINED_FUNCTION_7_82();
  v86[0] = v25;
  v86[1] = v26;
  v86[2] = -1;
  v86[3] = v22;
  __int16 v87 = 0;
  uint64_t v88 = 4;
  char v89 = 0;
  uint64_t v90 = 0;
  id v27 = v22;
  id v28 = static UIImage.symbolImage(for:)((uint64_t)v86);

  OUTLINED_FUNCTION_14_50();
  *(void *)&v3[v24] = v28;
  uint64_t v29 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_linkSymbolImage;
  uint64_t v30 = (void *)*MEMORY[0x1E4FB2950];
  v81[0] = 1802398060;
  v81[1] = 0xE400000000000000;
  v81[2] = 1;
  v81[3] = v30;
  __int16 v82 = 0;
  uint64_t v83 = 4;
  char v84 = 0;
  uint64_t v85 = 0;
  id v31 = v30;
  id v32 = static UIImage.symbolImage(for:)((uint64_t)v81);
  id v75 = v31;

  swift_bridgeObjectRelease();
  *(void *)&v3[v29] = v32;
  uint64_t v33 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_messagesSymbolImage;
  OUTLINED_FUNCTION_9_63();
  v76[0] = v34;
  v76[1] = v35;
  v76[2] = 1;
  v76[3] = v36;
  __int16 v77 = 0;
  uint64_t v78 = 4;
  char v79 = 0;
  uint64_t v80 = 0;
  id v37 = v36;
  id v38 = static UIImage.symbolImage(for:)((uint64_t)v76);

  swift_bridgeObjectRelease();
  *(void *)&v3[v33] = v38;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___contentViews] = 0;
  id v39 = &v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_callDelegate];
  *(void *)id v39 = 0;
  *((void *)v39 + 1) = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate + 8] = 0;
  swift_unknownObjectWeakInit();

  double v40 = OUTLINED_FUNCTION_6_2();
  uint64_t v43 = (char *)objc_msgSendSuper2(v41, v42, v40);
  objc_msgSend(v43, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  uint64_t v44 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel;
  uint64_t v45 = one-time initialization token for tableViewCellTitleLabel;
  id v46 = *(id *)&v43[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel];
  if (v45 != -1) {
    swift_once();
  }
  objc_msgSend(v46, sel_setTextColor_, static Colors.InCallControls.tableViewCellTitleLabel);

  uint64_t v47 = *(void **)&v43[v44];
  id v48 = self;
  uint64_t v49 = *MEMORY[0x1E4FB2908];
  id v50 = v47;
  id v51 = objc_msgSend(v48, sel_preferredFontForTextStyle_, v49);
  Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

  objc_msgSend(v50, sel_setFont_, isa);
  uint64_t v53 = *(void **)&v43[v44];
  objc_msgSend(v53, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v53, sel_setNumberOfLines_, 2);
  uint64_t v54 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel;
  uint64_t v55 = one-time initialization token for tableViewCellSubtitleLabel;
  id v56 = *(id *)&v43[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel];
  if (v55 != -1) {
    swift_once();
  }
  objc_msgSend(v56, sel_setTextColor_, static Colors.InCallControls.tableViewCellSubtitleLabel);

  id v57 = *(id *)&v43[v54];
  id v58 = objc_msgSend(v48, sel_preferredFontForTextStyle_, v75);
  objc_msgSend(v57, sel_setFont_, v58);

  objc_msgSend(*(id *)&v43[v54], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v43[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon], sel_setTintColor_, static Colors.InCallControls.tableViewCellSubtitleLabel);
  uint64_t v59 = *(char **)&v43[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton];
  uint64_t v60 = *(void **)&v59[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label];
  objc_msgSend(v60, sel_setAdjustsFontForContentSizeCategory_, 1);
  if (v60)
  {
    LODWORD(v61) = 1148846080;
    objc_msgSend(v60, sel_setContentCompressionResistancePriority_forAxis_, 0, v61);
  }
  uint64_t v62 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v63 = v59;
  swift_retain();
  UIControl.addAction(for:handler:)(64, (uint64_t)partial apply for closure #1 in InCallControlsParticipantCell.init(frame:), v62);

  swift_release_n();
  unint64_t result = InCallControlsParticipantCell.contentViews.getter();
  unint64_t v65 = result;
  if (!(result >> 62))
  {
    uint64_t v66 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v66) {
      goto LABEL_9;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    id v71 = objc_msgSend(v43, sel_separatorLayoutGuide);
    id v72 = objc_msgSend(v71, sel_leadingAnchor);

    id v73 = objc_msgSend(*(id *)&v43[v44], sel_leadingAnchor);
    id v74 = objc_msgSend(v72, sel_constraintEqualToAnchor_, v73);

    objc_msgSend(v74, sel_setActive_, 1);
    return (unint64_t)v43;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v66 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_9:
  if (v66 >= 1)
  {
    uint64_t v67 = 0;
    do
    {
      if ((v65 & 0xC000000000000001) != 0) {
        id v68 = (id)MEMORY[0x1C87744F0](v67, v65);
      }
      else {
        id v68 = *(id *)(v65 + 8 * v67 + 32);
      }
      v69 = v68;
      ++v67;
      id v70 = objc_msgSend(v43, sel_contentView);
      objc_msgSend(v70, sel_addSubview_, v69);
    }
    while (v66 != v67);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

void closure #1 in InCallControlsParticipantCell.init(frame:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (char *)MEMORY[0x1C8776240](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void (**)(void))&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_callDelegate];
    if (v5)
    {
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)&v3[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_callDelegate]);

      v5();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v5);
    }
    else
    {
    }
  }
}

id InCallControlsParticipantCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsParticipantCell.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel;
  *(void *)&v1[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel;
  *(void *)&v1[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v5 = (void *)*MEMORY[0x1E4FB28C8];
  v60[0] = 0x69662E6F65646976;
  v60[1] = 0xEA00000000006C6CLL;
  v60[2] = -1;
  v60[3] = v5;
  __int16 v61 = 0;
  uint64_t v62 = 4;
  char v63 = 0;
  uint64_t v64 = 0;
  id v6 = v5;
  id v7 = static UIImage.symbolImage(for:)((uint64_t)v60);

  OUTLINED_FUNCTION_13_56();
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v7);

  *(void *)&v1[v4] = v8;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_avatarView;
  LOBYTE(v54) = 0;
  id v10 = objc_allocWithZone((Class)type metadata accessor for ParticipantContactView());
  *(void *)&v1[v9] = ParticipantContactView.init(colorStyle:)((unsigned __int8 *)&v54);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton;
  uint64_t v12 = type metadata accessor for InCallControlButton();
  uint64_t v56 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  *(void *)&v1[v11] = OUTLINED_FUNCTION_1_114(56.0, v12, (uint64_t)&v54, v13, v14, v15, v16, v17, v18, 1);
  uint64_t v19 = type metadata accessor for InCallControlsParticipantCellViewModel();
  OUTLINED_FUNCTION_13_18(v19);
  uint64_t v20 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_cameraSymbolImage;
  *(void *)&long long v54 = 0x69662E6F65646976;
  *((void *)&v54 + 1) = 0xEA00000000006C6CLL;
  *(void *)&long long v55 = -1;
  *((void *)&v55 + 1) = v6;
  LOWORD(v56) = 0;
  uint64_t v57 = 4;
  char v58 = 0;
  uint64_t v59 = 0;
  id v21 = v6;
  id v22 = static UIImage.symbolImage(for:)((uint64_t)&v54);

  OUTLINED_FUNCTION_13_56();
  *(void *)&v1[v20] = v22;
  uint64_t v23 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_copresenceSymbolImage;
  OUTLINED_FUNCTION_7_82();
  v49[0] = v24;
  v49[1] = v25;
  v49[2] = -1;
  v49[3] = v21;
  __int16 v50 = 0;
  uint64_t v51 = 4;
  char v52 = 0;
  uint64_t v53 = 0;
  id v26 = v21;
  id v27 = static UIImage.symbolImage(for:)((uint64_t)v49);

  OUTLINED_FUNCTION_14_50();
  *(void *)&v1[v23] = v27;
  uint64_t v28 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_linkSymbolImage;
  uint64_t v29 = (void *)*MEMORY[0x1E4FB2950];
  v44[0] = 1802398060;
  v44[1] = 0xE400000000000000;
  v44[2] = 1;
  v44[3] = v29;
  __int16 v45 = 0;
  uint64_t v46 = 4;
  char v47 = 0;
  uint64_t v48 = 0;
  id v30 = v29;
  id v31 = static UIImage.symbolImage(for:)((uint64_t)v44);

  swift_bridgeObjectRelease();
  *(void *)&v1[v28] = v31;
  uint64_t v32 = OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_messagesSymbolImage;
  OUTLINED_FUNCTION_9_63();
  v39[0] = v33;
  v39[1] = v34;
  v39[2] = 1;
  v39[3] = v35;
  __int16 v40 = 0;
  uint64_t v41 = 4;
  char v42 = 0;
  uint64_t v43 = 0;
  id v36 = v35;
  id v37 = static UIImage.symbolImage(for:)((uint64_t)v39);

  swift_bridgeObjectRelease();
  *(void *)&v1[v32] = v37;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___kickMemberButton] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___contentViews] = 0;
  id v38 = &v1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_callDelegate];
  *(void *)id v38 = 0;
  *((void *)v38 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t InCallControlsParticipantCell.setEnabled(_:for:)(char a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_11;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  if (a1) {
    double v7 = 1.0;
  }
  else {
    double v7 = 0.0;
  }
  do
  {
    if ((a2 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x1C87744F0](v6, a2);
    }
    else {
      id v8 = *(id *)(a2 + 8 * v6 + 32);
    }
    uint64_t v9 = v8;
    ++v6;
    objc_msgSend(v8, sel_setEnabled_, a1 & 1);
    objc_msgSend(v9, sel_setAlpha_, v7);
  }
  while (v4 != v6);
LABEL_11:
  return swift_bridgeObjectRelease();
}

void closure #1 in InCallControlsParticipantCell.configure(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v33 = static OS_os_log.conversationKit;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1C376BA10;
    double v7 = &v5[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate];
    swift_beginAccess();
    uint64_t v8 = MEMORY[0x1C8776240](v7);
    if (v8)
    {
      uint64_t v9 = *((void *)v7 + 1);
      uint64_t v34 = v8;
      uint64_t v35 = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InCallControlsParticipantCellDelegate);
      uint64_t v10 = String.init<A>(reflecting:)();
      unint64_t v12 = v11;
    }
    else
    {
      unint64_t v12 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    uint64_t v13 = MEMORY[0x1E4FBB1A0];
    *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
    uint64_t v14 = v13;
    unint64_t v15 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v6 + 64) = v15;
    *(void *)(v6 + 32) = v10;
    *(void *)(v6 + 40) = v12;
    uint64_t v16 = type metadata accessor for InCallControlsParticipantCellViewModel();
    uint64_t v32 = *(int *)(v16 + 32);
    LOBYTE(v34) = *(unsigned char *)(a2 + v32);
    uint64_t v17 = String.init<A>(reflecting:)();
    *(void *)(v6 + 96) = v14;
    *(void *)(v6 + 104) = v15;
    *(void *)(v6 + 72) = v17;
    *(void *)(v6 + 80) = v18;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    MEMORY[0x1F4188790](v19 - 8);
    id v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = a2 + *(int *)(v16 + 20);
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v31 = a2;
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v24);
    uint64_t v25 = specialized >> prefix<A>(_:)((uint64_t)v21);
    uint64_t v27 = v26;
    outlined destroy of UUID?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(void *)(v6 + 136) = MEMORY[0x1E4FBB1A0];
    *(void *)(v6 + 144) = v15;
    *(void *)(v6 + 112) = v25;
    *(void *)(v6 + 120) = v27;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (MEMORY[0x1C8776240](v7))
    {
      uint64_t v28 = *((void *)v7 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, void, uint64_t, uint64_t, uint64_t))(v28 + 8))(v5, *(unsigned __int8 *)(v31 + v32), v22, ObjectType, v28);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall InCallControlsParticipantCell.layoutSubviews()()
{
  v104.receiver = v0;
  v104.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v104, sel_layoutSubviews);
  v103.origin = (CGPoint)xmmword_1C377DDE0;
  v103.size = (CGSize)vdupq_n_s64(0x4042800000000000uLL);
  closure #2 in InCallControlsParticipantCell.layoutSubviews()(v0);
  double v80 = v2;
  double v81 = v1;
  *(double *)v102 = v1;
  v102[1] = v3;
  *(double *)&v102[2] = v2;
  *(double *)&v102[3] = v4;
  double v90 = v4;
  id v5 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v5, sel_bounds);
  double v7 = v6;

  id v8 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v8, sel_bounds);
  double v10 = v9;

  double v84 = v10 + -10.0 + -32.0 + -32.0 + -26.0;
  double v99 = v84;
  long long v100 = xmmword_1C377DDF0;
  uint64_t v101 = 0x4040000000000000;
  id v11 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v11, sel_bounds);
  double v13 = v12;

  double v87 = v13 + -10.0 + -32.0;
  double v96 = v87;
  long long v97 = xmmword_1C377DDF0;
  uint64_t v98 = 0x4040000000000000;
  closure #6 in InCallControlsParticipantCell.layoutSubviews()(&v103, v0);
  double rect = v14;
  double rect_8 = v15;
  double rect_16 = v16;
  CGFloat v17 = 0.0;
  v105.origin.x = 14.0;
  v105.origin.double y = 0.0;
  v105.size.width = 37.0;
  v105.size.height = 37.0;
  double v18 = CGRectGetMaxX(v105) + 12.0;
  uint64_t v19 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon];
  id v20 = objc_msgSend(v19, sel_image);
  CGFloat v21 = 0.0;
  if (v20)
  {
    uint64_t v22 = v20;
    objc_msgSend(v20, sel_size);
    CGFloat v21 = v23;
    CGFloat v17 = v24;
  }
  double v78 = v7 + -10.0;
  CGFloat v88 = v21;
  CGFloat v89 = v18;
  v95.origin.x = v18;
  v95.origin.double y = 0.0;
  v95.size.width = v21;
  v95.size.height = v17;
  double rect_24 = v17;
  closure #8 in InCallControlsParticipantCell.layoutSubviews()(v0, &v95, (uint64_t)&v96, (uint64_t)&v99, (uint64_t)v102);
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  double v30 = v29;
  InCallControlsParticipantCell.contentHeight.getter();
  double v32 = v31 * 0.5;
  double v33 = floor(v32 + -18.5);
  double v34 = floor(v32 - v90 * 0.5);
  double v35 = v32 + -16.0;
  v106.size.height = rect_8;
  v106.origin.double y = floor(v32 - (rect_8 + v30) * 0.5);
  v106.origin.x = rect;
  double y = v106.origin.y;
  v106.size.width = rect_16;
  v107.origin.double y = CGRectGetMaxY(v106);
  double v85 = v26;
  double v86 = v28;
  v107.origin.x = v26;
  double v83 = v107.origin.y;
  v107.size.width = v28;
  v107.size.height = v30;
  double MidY = CGRectGetMidY(v107);
  id v36 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_avatarView];
  objc_msgSend(v36, sel_frame);
  v113.origin.x = 14.0;
  v113.origin.double y = v33;
  v113.size.width = 37.0;
  v113.size.height = 37.0;
  if (!CGRectEqualToRect(v108, v113)) {
    objc_msgSend(v36, sel_setFrame_, 14.0, v33, 37.0, 37.0);
  }
  double v37 = v78 + -32.0;
  double v38 = floor(v35);
  OUTLINED_FUNCTION_8_60(OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton);
  v114.origin.x = v81;
  v114.origin.double y = v34;
  v114.size.width = v80;
  v114.size.height = v90;
  if (!CGRectEqualToRect(v109, v114)) {
    objc_msgSend(v36, sel_setFrame_, v81, v34, v80, v90);
  }
  id v39 = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter);
  objc_msgSend(v39, sel_frame);
  double v41 = v40;
  double v43 = v42;
  double v45 = v44;
  double v47 = v46;

  if (!OUTLINED_FUNCTION_10_58(v41, v43, v45, v47, v37))
  {
    id v48 = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiApproveButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiApproveButton.getter);
    objc_msgSend(v48, sel_setFrame_, v37, v38, 32.0, 32.0);
  }
  id v49 = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter);
  objc_msgSend(v49, sel_frame);
  OUTLINED_FUNCTION_15_54();
  double v50 = OUTLINED_FUNCTION_6_87();
  if (!OUTLINED_FUNCTION_10_58(v50, v51, v52, v53, v84))
  {
    id v54 = InCallControlsParticipantCell.lmiApproveButton.getter(&OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell____lazy_storage___lmiRejectButton, (uint64_t (*)(uint64_t))closure #1 in InCallControlsParticipantCell.lmiRejectButton.getter);
    OUTLINED_FUNCTION_5_95(v54);
  }
  id v55 = InCallControlsParticipantCell.kickMemberButton.getter();
  objc_msgSend(v55, sel_frame);
  OUTLINED_FUNCTION_15_54();
  double v56 = OUTLINED_FUNCTION_6_87();
  if (!OUTLINED_FUNCTION_10_58(v56, v57, v58, v59, v87))
  {
    id v60 = InCallControlsParticipantCell.kickMemberButton.getter();
    OUTLINED_FUNCTION_5_95(v60);
  }
  OUTLINED_FUNCTION_8_60(OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel);
  v115.origin.x = rect;
  v115.origin.double y = y;
  v115.size.width = rect_16;
  v115.size.height = rect_8;
  if (!CGRectEqualToRect(v110, v115)) {
    objc_msgSend(v55, sel_setFrame_, rect, y, rect_16, rect_8);
  }
  double v61 = floor(MidY - rect_24 * 0.5);
  OUTLINED_FUNCTION_8_60(OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel);
  v116.origin.x = v85;
  v116.origin.double y = v83;
  v116.size.width = v86;
  v116.size.height = v30;
  if (!CGRectEqualToRect(v111, v116)) {
    objc_msgSend(v55, sel_setFrame_, v85, v83, v86, v30);
  }
  objc_msgSend(v19, sel_frame, *(void *)&v78);
  v117.origin.x = v89;
  v117.origin.double y = v61;
  v117.size.width = v88;
  v117.size.height = rect_24;
  if (!CGRectEqualToRect(v112, v117))
  {
    double v62 = OUTLINED_FUNCTION_6_2();
    objc_msgSend(v63, v64, v62);
  }
  if (objc_msgSend(v0, sel__shouldReverseLayoutDirection))
  {
    unint64_t v65 = InCallControlsParticipantCell.contentViews.getter();
    unint64_t v66 = v65;
    if (v65 >> 62)
    {
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      if (v67) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v67 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v67)
      {
LABEL_22:
        if (v67 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v68 = 0;
        do
        {
          if ((v66 & 0xC000000000000001) != 0) {
            id v69 = (id)MEMORY[0x1C87744F0](v68, v66);
          }
          else {
            id v69 = *(id *)(v66 + 8 * v68 + 32);
          }
          id v70 = v69;
          ++v68;
          id v71 = objc_msgSend(v0, sel_contentView);
          objc_msgSend(v71, sel_bounds);
          double v73 = v72;

          objc_msgSend(v70, sel_frame);
          double v75 = v73 - v74;
          objc_msgSend(v70, sel_frame);
          double v77 = v75 - v76;
          objc_msgSend(v70, sel_frame);
          objc_msgSend(v70, sel_setFrame_, v77);
        }
        while (v67 != v68);
      }
    }
    swift_bridgeObjectRelease();
  }
}

void closure #2 in InCallControlsParticipantCell.layoutSubviews()(char *a1)
{
  double v1 = *(char **)&a1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_actionButton];
  double v2 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label];
  if (v2)
  {
    id v4 = v2;
    objc_msgSend(v4, sel_intrinsicContentSize);
    id v5 = objc_msgSend(v4, sel_font);
    if (v5)
    {
      double v6 = v5;
      objc_msgSend(v5, sel_lineHeight);

      id v7 = objc_msgSend(a1, sel_contentView);
      objc_msgSend(v7, sel_bounds);

      return;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(52);
  v8._object = (void *)0x80000001C37AB2C0;
  v8._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v8);
  type metadata accessor for InCallControlButton();
  double v9 = v1;
  v10._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id closure #6 in InCallControlsParticipantCell.layoutSubviews()(CGRect *a1, char *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  MEMORY[0x1F4188790](v4 - 8);
  double v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InCallControlsParticipantCellViewModel();
  MEMORY[0x1F4188790](v7);
  double v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRectGetMaxX(*a1);
  id result = objc_msgSend(*(id *)&a2[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_nameLabel], sel_font);
  if (result)
  {
    id v11 = result;
    objc_msgSend(result, sel_lineHeight);

    uint64_t v12 = (uint64_t)&a2[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_viewModel];
    swift_beginAccess();
    __swift_getEnumTagSinglePayload(v12, 1, v7);
    outlined init with copy of InCallControlsParticipantCellViewModel?(v12, (uint64_t)v6);
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
    {
      return (id)outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
    }
    else
    {
      outlined init with take of InCallControlsParticipantCellViewModel((uint64_t)v6, (uint64_t)v9);
      if (v9[*(int *)(v7 + 32)] == 4)
      {
        id v13 = objc_msgSend(a2, sel_contentView);
        objc_msgSend(v13, sel_bounds);
      }
      return (id)outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id closure #8 in InCallControlsParticipantCell.layoutSubviews()(char *a1, CGRect *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v30[1] = a4;
  v30[2] = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  MEMORY[0x1F4188790](v7 - 8);
  double v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v30 - v11;
  uint64_t v13 = type metadata accessor for InCallControlsParticipantCellViewModel();
  MEMORY[0x1F4188790](v13);
  double v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v17 = MEMORY[0x1F4188790](v16).n128_u64[0];
  uint64_t v19 = (char *)v30 - v18;
  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_statusIcon], sel_alpha, v17);
  if (v20 >= 0.5) {
    CGRectGetMaxX(*a2);
  }
  uint64_t v21 = (uint64_t)&a1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_viewModel];
  swift_beginAccess();
  outlined init with copy of InCallControlsParticipantCellViewModel?(v21, (uint64_t)v12);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  }
  else
  {
    outlined init with take of InCallControlsParticipantCellViewModel((uint64_t)v12, (uint64_t)v19);
    uint64_t v22 = &v19[*(int *)(v13 + 28)];
    uint64_t v24 = *(void *)v22;
    uint64_t v23 = *((void *)v22 + 1);
    int v25 = v22[16];
    outlined copy of InCallControlsParticipantCellViewModel.SubtitleState(*(void *)v22, v23, v22[16]);
    outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v19);
    BOOL v26 = (v25 & 0xE0) == 0x80 && (v23 | v24) == 0;
    if (v26 && v25 == 128) {
      goto LABEL_12;
    }
    outlined consume of InCallControlsParticipantCellViewModel.SubtitleState(v24, v23, v25);
  }
  id result = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_subtitleLabel], sel_font);
  if (!result)
  {
    __break(1u);
    return result;
  }
  CGFloat v28 = result;
  objc_msgSend(result, sel_lineHeight);

LABEL_12:
  outlined init with copy of InCallControlsParticipantCellViewModel?(v21, (uint64_t)v9);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v13) == 1) {
    return (id)outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  }
  outlined init with take of InCallControlsParticipantCellViewModel((uint64_t)v9, (uint64_t)v15);
  if (v15[*(int *)(v13 + 32)] == 4)
  {
    id v29 = objc_msgSend(a1, sel_contentView);
    objc_msgSend(v29, sel_bounds);
  }
  return (id)outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v15);
}

void InCallControlsParticipantCell.contentHeight.getter()
{
  swift_getObjectType();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_viewModel;
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for InCallControlsParticipantCellViewModel();
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) || *(unsigned char *)(v1 + *(int *)(v2 + 60)) != 1) {
    static InCallControlsParticipantCell.defaultContentHeight.getter();
  }
  else {
    static InCallControlsParticipantCell.extendedContentHeight.getter();
  }
}

UICollectionViewLayoutAttributes __swiftcall InCallControlsParticipantCell.preferredLayoutAttributesFitting(_:)(UICollectionViewLayoutAttributes a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_preferredLayoutAttributesFittingAttributes_, a1.super.isa);
  InCallControlsParticipantCell.contentHeight.getter();
  objc_msgSend(v3, sel_bounds);
  objc_msgSend(v3, sel_setBounds_);
  return (UICollectionViewLayoutAttributes)v3;
}

uint64_t closure #1 in InCallControlsParticipantCell.inCallControlButton(for:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v36[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for InCallControlsParticipantCellViewModel();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a2 + 16);
  if (result)
  {
    uint64_t v12 = (char *)result;
    uint64_t v13 = result + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_viewModel;
    swift_beginAccess();
    outlined init with copy of InCallControlsParticipantCellViewModel?(v13, (uint64_t)v7);
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
    {

      return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for InCallControlsParticipantCellViewModel?);
    }
    else
    {
      outlined init with take of InCallControlsParticipantCellViewModel((uint64_t)v7, (uint64_t)v10);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v38 = static OS_os_log.conversationKit;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1C376BA10;
      double v15 = &v12[OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate];
      swift_beginAccess();
      uint64_t v16 = MEMORY[0x1C8776240](v15);
      if (v16)
      {
        uint64_t v17 = *((void *)v15 + 1);
        uint64_t v39 = v16;
        uint64_t v40 = v17;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InCallControlsParticipantCellDelegate);
        uint64_t v18 = String.init<A>(reflecting:)();
        unint64_t v20 = v19;
      }
      else
      {
        unint64_t v20 = 0xE300000000000000;
        uint64_t v18 = 7104878;
      }
      uint64_t v21 = MEMORY[0x1E4FBB1A0];
      *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
      uint64_t v22 = v21;
      unint64_t v23 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v14 + 64) = v23;
      *(void *)(v14 + 32) = v18;
      *(void *)(v14 + 40) = v20;
      LOBYTE(v39) = a3;
      uint64_t v24 = String.init<A>(reflecting:)();
      *(void *)(v14 + 96) = v22;
      *(void *)(v14 + 104) = v23;
      *(void *)(v14 + 72) = v24;
      *(void *)(v14 + 80) = v25;
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      MEMORY[0x1F4188790](v26 - 8);
      CGFloat v28 = &v36[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
      id v29 = &v10[*(int *)(v8 + 20)];
      uint64_t v30 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
      uint64_t v31 = specialized >> prefix<A>(_:)((uint64_t)v28);
      unsigned int v37 = a3;
      uint64_t v33 = v32;
      outlined destroy of UUID?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      *(void *)(v14 + 136) = MEMORY[0x1E4FBB1A0];
      *(void *)(v14 + 144) = v23;
      *(void *)(v14 + 112) = v31;
      *(void *)(v14 + 120) = v33;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      if (MEMORY[0x1C8776240](v15))
      {
        uint64_t v34 = *((void *)v15 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(char *, void, unsigned char *, uint64_t, uint64_t))(v34 + 8))(v12, v37, v29, ObjectType, v34);

        swift_unknownObjectRelease();
      }
      else
      {
      }
      return outlined destroy of InCallControlsParticipantCellViewModel((uint64_t)v10);
    }
  }
  return result;
}

void static InCallControlsParticipantCell.extendedContentHeight.getter()
{
}

void static InCallControlsParticipantCell.defaultContentHeight.getter()
{
}

void static InCallControlsParticipantCell.extendedContentHeight.getter(unsigned char *a1, uint64_t *a2)
{
  if (*a1) {
    static InCallControlsParticipantCell.cellHeight(for:)();
  }
  else {
    uint64_t v4 = *a2;
  }
  *a2 = v4;
  *a1 = 0;
}

void static InCallControlsParticipantCell.cellHeight(for:)()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2908]);
  Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

  [(objc_class *)isa lineHeight];
  id v3 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  objc_msgSend(v3, sel_lineHeight);
}

id InCallControlsParticipantCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t outlined consume of InCallControlsParticipantCellViewModel.SubtitleState(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C3390B44()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C3390B7C()
{
  id v1 = (int *)(type metadata accessor for InCallControlsParticipantCellViewModel() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_release();
  uint64_t v3 = v0 + v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = v0 + v2 + v1[7];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(unint64_t))(v5 + 8))(v4);
  swift_bridgeObjectRelease();
  outlined consume of InCallControlsParticipantCellViewModel.SubtitleState(*(void *)(v3 + v1[9]), *(void *)(v3 + v1[9] + 8), *(unsigned char *)(v3 + v1[9] + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of InCallControlsParticipantCellViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InCallControlsParticipantCellViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in InCallControlsParticipantCell.configure(with:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for InCallControlsParticipantCellViewModel() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in InCallControlsParticipantCell.configure(with:)(v2, v3);
}

uint64_t outlined destroy of InCallControlsParticipantCellViewModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InCallControlsParticipantCellViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in InCallControlsParticipantCell.init(frame:)(uint64_t a1)
{
  closure #1 in InCallControlsParticipantCell.init(frame:)(a1, v1);
}

uint64_t ObjC metadata update function for InCallControlsParticipantCell()
{
  return type metadata accessor for InCallControlsParticipantCell();
}

uint64_t type metadata accessor for InCallControlsParticipantCell()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsParticipantCell;
  if (!type metadata singleton initialization cache for InCallControlsParticipantCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for InCallControlsParticipantCell()
{
  type metadata accessor for InCallControlsParticipantCellViewModel?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for InCallControlsParticipantCellViewModel?()
{
  if (!lazy cache variable for type metadata for InCallControlsParticipantCellViewModel?)
  {
    type metadata accessor for InCallControlsParticipantCellViewModel();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InCallControlsParticipantCellViewModel?);
    }
  }
}

uint64_t outlined copy of InCallControlsParticipantCellViewModel.SubtitleState(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C3390F8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InCallControlsParticipantCell.inCallControlButton(for:)(uint64_t a1)
{
  return closure #1 in InCallControlsParticipantCell.inCallControlButton(for:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

id PersonalNicknameMenuView.__allocating_init(displayContext:personalNicknameMenuViewDelegate:)(char *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return PersonalNicknameMenuView.init(displayContext:personalNicknameMenuViewDelegate:)(a1, a2, a3);
}

ConversationKit::PersonalNicknameMenuViewDisplayContext_optional __swiftcall PersonalNicknameMenuViewDisplayContext.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (ConversationKit::PersonalNicknameMenuViewDisplayContext_optional)rawValue;
}

uint64_t PersonalNicknameMenuViewDisplayContext.rawValue.getter()
{
  return *v0;
}

ConversationKit::PersonalNicknameMenuViewDisplayContext_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PersonalNicknameMenuViewDisplayContext(Swift::Int *a1)
{
  return PersonalNicknameMenuViewDisplayContext.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PersonalNicknameMenuViewDisplayContext@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PersonalNicknameMenuViewDisplayContext.rawValue.getter();
  *a1 = result;
  return result;
}

void PersonalNicknameMenuView.personalNickname.didset()
{
  uint64_t v1 = *(void **)((char *)nicknamesDefaults.value._kvo_ + v0);
  if (v1)
  {
    id v27 = v1;
    id v2 = PersonalNicknameMenuView.nameLabel.getter();
    type metadata accessor for NameAndPhotoUtilities();
    uint64_t v3 = static NameAndPhotoUtilities.formattedDisplayName(for:)(v27);
    outlined bridged method (mbnn) of @objc UILabel.text.setter(v3, v4, v2);

    id v5 = objc_msgSend(v27, sel_avatar);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_imageData);

      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      id v11 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v11, sel_scale);
      double v13 = v12;

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      outlined copy of Data._Representation(v8, v10);
      id v14 = UIImage.__allocating_init(data:scale:)(v8, v10, v13);
      Class isa = PersonalNicknameMenuView.leadingAvatarView.getter();
      self;
      uint64_t v16 = (void *)swift_dynamicCastObjCClass();
      if (v16)
      {
        objc_msgSend(v16, sel_setImage_, v14);
      }
      else
      {

        id v17 = PersonalNicknameMenuView.containerStackView.getter();
        id v18 = PersonalNicknameMenuView.leadingAvatarView.getter();
        objc_msgSend(v17, sel_removeArrangedSubview_, v18);

        PersonalNicknameMenuView.leadingAvatarView.setter((uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v14));
        id v19 = PersonalNicknameMenuView.leadingAvatarView.getter();
        objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

        id v20 = PersonalNicknameMenuView.containerStackView.getter();
        id v21 = PersonalNicknameMenuView.leadingAvatarView.getter();
        objc_msgSend(v20, sel_insertArrangedSubview_atIndex_, v21, 0);

        uint64_t v22 = self;
        PersonalNicknameMenuView.generateLeadingAvatarConstraints()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v22, sel_activateConstraints_, isa);
      }

      id v23 = PersonalNicknameMenuView.leadingAvatarView.getter();
      id v24 = objc_msgSend(v23, sel_layer);

      if (one-time initialization token for leadingImageSize != -1) {
        swift_once();
      }
      objc_msgSend(v24, sel_setCornerRadius_, *(double *)&static Layout.Nickname.leadingImageSize * 0.5);

      id v25 = PersonalNicknameMenuView.leadingAvatarView.getter();
      id v26 = objc_msgSend(v25, sel_layer);

      objc_msgSend(v26, sel_setMasksToBounds_, 1);
      outlined consume of Data._Representation(v8, v10);
    }
    else
    {
    }
  }
}

id UIImage.__allocating_init(data:scale:)(uint64_t a1, unint64_t a2, double a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = objc_msgSend(v6, sel_initWithData_scale_, isa, a3);
  outlined consume of Data._Representation(a1, a2);

  return v8;
}

void PersonalNicknameMenuView.personalNickname.setter(void *a1)
{
  id v2 = *(void **)((char *)nicknamesDefaults.value._kvo_ + v1);
  *(void *)((char *)nicknamesDefaults.value._kvo_ + v1) = a1;
  id v3 = a1;

  PersonalNicknameMenuView.personalNickname.didset();
}

id PersonalNicknameMenuView.contactStore.getter()
{
  CFStringRef identifier = nicknamesDefaults.value._identifier_;
  id v2 = *(void **)((char *)&nicknamesDefaults.value._identifier_->isa + v0);
  if (v2)
  {
    id v3 = *(void **)((char *)&nicknamesDefaults.value._identifier_->isa + v0);
  }
  else
  {
    id v4 = closure #1 in PersonalNicknameMenuView.contactStore.getter();
    id v5 = *(void **)((char *)&identifier->isa + v0);
    *(void **)((char *)&identifier->isa + v0) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in PersonalNicknameMenuView.contactStore.getter()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  uint64_t v1 = outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v0);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
  }
  else
  {
    id v5 = (id)TUPreferredFaceTimeBundleIdentifier();
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v6;
  }
  id v7 = self;
  id v8 = (void *)MEMORY[0x1C87730B0](v3, v4);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_tu_contactStoreConfigurationForBundleIdentifier_, v8);

  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v9);
  return v10;
}

id PersonalNicknameMenuView.meContact.getter()
{
  CFStringRef container = nicknamesDefaults.value._container_;
  uint64_t v2 = *(void **)((char *)&nicknamesDefaults.value._container_->isa + v0);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = closure #1 in PersonalNicknameMenuView.meContact.getter();
    uint64_t v4 = *(void **)((char *)&container->isa + v0);
    *(void **)((char *)&container->isa + v0) = v3;
    id v5 = v3;
    outlined consume of UIView??(v4);
  }
  outlined copy of UIView??(v2);
  return v3;
}

id closure #1 in PersonalNicknameMenuView.meContact.getter()
{
  v16[1] = *(id *)MEMORY[0x1E4F143B8];
  id v0 = PersonalNicknameMenuView.contactStore.getter();
  Class isa = (Class)objc_msgSend(self, sel_keysForNicknameHandling);
  if (!isa)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v16[0] = 0;
  id v2 = objc_msgSend(v0, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v16);

  id v3 = v16[0];
  if (!v2)
  {
    uint64_t v4 = v3;
    id v5 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.nickname);
    id v7 = v5;
    id v8 = v5;
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      double v12 = (void *)swift_slowAlloc();
      *(_DWORD *)id v11 = 138412290;
      id v13 = v5;
      id v14 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v16[0] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *double v12 = v14;

      _os_log_impl(&dword_1C2F90000, v9, v10, "Could not fetch me card %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v12, -1, -1);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return v2;
}

id PersonalNicknameMenuView.leadingAvatarView.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter((uint64_t *)&nicknamesDefaults.is_nil, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.leadingAvatarView.getter);
}

id closure #1 in PersonalNicknameMenuView.leadingAvatarView.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)((char *)nicknamesDefaults.value._kvo_ + a1);
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v2, sel_avatar);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = objc_msgSend(v3, sel_imageData);

      uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      id v9 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v9, sel_scale);
      double v11 = v10;

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      outlined copy of Data._Representation(v6, v8);
      id v12 = UIImage.__allocating_init(data:scale:)(v6, v8, v11);
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v12);
      id v14 = objc_msgSend(v13, sel_layer);
      if (one-time initialization token for leadingImageSize != -1) {
        swift_once();
      }
      objc_msgSend(v14, sel_setCornerRadius_, *(double *)&static Layout.Nickname.leadingImageSize * 0.5);

      id v15 = objc_msgSend(v13, sel_layer);
      objc_msgSend(v15, sel_setMasksToBounds_, 1);

      outlined consume of Data._Representation(v6, v8);
      return v13;
    }
    else
    {
      id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_init);
      id v21 = objc_msgSend(v2, sel_firstName);
      if (!v21)
      {
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v21 = (id)MEMORY[0x1C87730B0](v22);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v20, sel_setGivenName_, v21);

      id v23 = objc_msgSend(v2, sel_lastName);
      if (!v23)
      {
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v23 = (id)MEMORY[0x1C87730B0](v24);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v20, sel_setFamilyName_, v23);

      id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB38]), sel_initWithContact_, v20);
      return v25;
    }
  }
  else
  {
    id v17 = PersonalNicknameMenuView.meContact.getter();
    if (v17)
    {
      id v18 = v17;
      id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB38]), sel_initWithContact_, v17);

      return v19;
    }
    else
    {
      id v26 = objc_allocWithZone(MEMORY[0x1E4FB1EB0]);
      return objc_msgSend(v26, sel_init);
    }
  }
}

void PersonalNicknameMenuView.leadingAvatarView.setter(uint64_t a1)
{
  id v2 = *(void **)(v1 + *(void *)&nicknamesDefaults.is_nil);
  *(void *)(v1 + *(void *)&nicknamesDefaults.is_nil) = a1;
}

id PersonalNicknameMenuView.nameLabel.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___nameLabel, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.nameLabel.getter);
}

id closure #1 in PersonalNicknameMenuView.nameLabel.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28D0]);
  objc_msgSend(v2, sel_setFont_, v3);

  id v4 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v2, sel_setTextColor_, v4);

  id v5 = *(void **)((char *)nicknamesDefaults.value._kvo_ + a1);
  if (v5)
  {
    type metadata accessor for NameAndPhotoUtilities();
    id v6 = v5;
    uint64_t v7 = static NameAndPhotoUtilities.formattedDisplayName(for:)(v6);
    outlined bridged method (mbnn) of @objc UILabel.text.setter(v7, v8, v2);
LABEL_8:

    return v2;
  }
  id v9 = PersonalNicknameMenuView.meContact.getter();
  if (v9)
  {
    double v10 = v9;
    uint64_t v11 = outlined bridged method (pb) of @objc CNContact.displayName.getter(v9);
    if (v12)
    {
      id v6 = (id)MEMORY[0x1C87730B0](v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v6 = 0;
    }
    objc_msgSend(v2, sel_setText_, v6);

    goto LABEL_8;
  }
  return v2;
}

id PersonalNicknameMenuView.subtitleLabel.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___subtitleLabel, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.subtitleLabel.getter);
}

id closure #1 in PersonalNicknameMenuView.subtitleLabel.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28F0]);
  objc_msgSend(v2, sel_setFont_, v3);

  id v4 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v4);

  LODWORD(v4) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView_displayContext);
  id v5 = objc_msgSend(self, sel_conversationKit);
  unint64_t v13 = 0xE000000000000000;
  if (v4 == 2)
  {
    unint64_t v6 = 0x80000001C37AB6A0;
    unint64_t v7 = 0xD000000000000014;
  }
  else
  {
    unint64_t v7 = 0x50202620656D614ELL;
    unint64_t v6 = 0xEC0000006F746F68;
  }
  v8.value._countAndFlagsBits = 0x61737265766E6F43;
  v8.value._object = (void *)0xEF74694B6E6F6974;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  uint64_t v10 = 0;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, v8, (NSBundle)v5, v9, *(Swift::String *)(&v13 - 1));

  outlined bridged method (mbnn) of @objc UILabel.text.setter(v11._countAndFlagsBits, (uint64_t)v11._object, v2);
  return v2;
}

id PersonalNicknameMenuView.labelStackView.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___labelStackView, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.labelStackView.getter);
}

void *closure #1 in PersonalNicknameMenuView.labelStackView.getter()
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C3769610;
  *(void *)(v0 + 32) = PersonalNicknameMenuView.nameLabel.getter();
  *(void *)(v0 + 40) = PersonalNicknameMenuView.subtitleLabel.getter();
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v1, (Swift::OpaquePointer)v0);
  id v3 = v2;
  objc_msgSend(v2, sel_setAxis_, 1);
  objc_msgSend(v3, sel_setAlignment_, 1);
  if (one-time initialization token for distanceBetweenLabels != -1) {
    swift_once();
  }
  objc_msgSend(v3, sel_setSpacing_, *(double *)&static Layout.Nickname.distanceBetweenLabels);
  return v3;
}

id PersonalNicknameMenuView.containerStackView.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___containerStackView, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.containerStackView.getter);
}

id PersonalNicknameMenuView.leadingAvatarView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    unint64_t v6 = (void *)a2(v2);
    unint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void *closure #1 in PersonalNicknameMenuView.containerStackView.getter()
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C3769610;
  *(void *)(v0 + 32) = PersonalNicknameMenuView.leadingAvatarView.getter();
  *(void *)(v0 + 40) = PersonalNicknameMenuView.labelStackView.getter();
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v1, (Swift::OpaquePointer)v0);
  uint64_t v3 = v2;
  objc_msgSend(v2, sel_setAxis_, 0);
  objc_msgSend(v3, sel_setAlignment_, 3);
  if (one-time initialization token for distanceBetweenImageAndLabels != -1) {
    swift_once();
  }
  objc_msgSend(v3, sel_setSpacing_, *(double *)&static Layout.Nickname.distanceBetweenImageAndLabels);
  return v3;
}

id PersonalNicknameMenuView.tapRecognizer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___tapRecognizer;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___tapRecognizer];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___tapRecognizer];
  }
  else
  {
    id v4 = v0;
    v10[3] = type metadata accessor for PersonalNicknameMenuView();
    v10[0] = v0;
    objc_allocWithZone(MEMORY[0x1E4FB1D38]);
    id v5 = v0;
    id v6 = @nonobjc UITapGestureRecognizer.init(target:action:)(v10, (uint64_t)sel_didTapWithSender_);
    unint64_t v7 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id PersonalNicknameMenuView.init(displayContext:personalNicknameMenuViewDelegate:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  *(void *)&v3[(unint64_t)nicknamesDefaults.value._kvo_] = 0;
  *(void *)&v3[(unint64_t)nicknamesDefaults.value._identifier_] = 0;
  *(void *)&v3[(unint64_t)nicknamesDefaults.value._container_] = 1;
  *(void *)&v3[*(void *)&nicknamesDefaults.is_nil] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___nameLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___subtitleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___labelStackView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___containerStackView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___tapRecognizer] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView_personalNicknameMenuViewDelegate + 8] = 0;
  uint64_t v6 = swift_unknownObjectWeakInit();
  v3[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView_displayContext] = v5;
  *(void *)(v6 + 8) = a3;
  swift_unknownObjectWeakAssign();
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for PersonalNicknameMenuView();
  id v7 = objc_msgSendSuper2(&v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized PersonalNicknameMenuView.getPersonalNickname(completion:)((uint64_t)v7, v7);

  PersonalNicknameMenuView.setupConstraints()();
  id v8 = v7;
  id v9 = PersonalNicknameMenuView.tapRecognizer.getter();
  objc_msgSend(v8, sel_addGestureRecognizer_, v9);

  swift_unknownObjectRelease();
  return v8;
}

id PersonalNicknameMenuView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PersonalNicknameMenuView.init(coder:)()
{
  *(void *)&v0[(unint64_t)nicknamesDefaults.value._kvo_] = 0;
  *(void *)&v0[(unint64_t)nicknamesDefaults.value._identifier_] = 0;
  *(void *)&v0[(unint64_t)nicknamesDefaults.value._container_] = 1;
  *(void *)&v0[*(void *)&nicknamesDefaults.is_nil] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___nameLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___subtitleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___labelStackView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___containerStackView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView____lazy_storage___tapRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView_personalNicknameMenuViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PersonalNicknameMenuView.setupConstraints()()
{
  uint64_t v1 = v0;
  id v2 = PersonalNicknameMenuView.leadingAvatarView.getter();
  id v3 = PersonalNicknameMenuView.nameLabel.getter();
  id v4 = PersonalNicknameMenuView.subtitleLabel.getter();
  id v5 = PersonalNicknameMenuView.labelStackView.getter();
  id v6 = PersonalNicknameMenuView.containerStackView.getter();
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  OUTLINED_FUNCTION_5_96();
  objc_msgSend(v1, sel_addSubview_, v6);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769580;
  id v8 = PersonalNicknameMenuView.containerStackView.getter();
  id v9 = objc_msgSend(v8, sel_topAnchor);

  id v10 = objc_msgSend(v1, sel_topAnchor);
  if (one-time initialization token for distanceFromEdge != -1) {
    swift_once();
  }
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v10, *(double *)&static Layout.Nickname.distanceFromEdge);

  *(void *)(v7 + 32) = v11;
  id v12 = objc_msgSend(OUTLINED_FUNCTION_5_96(), sel_bottomAnchor);

  id v13 = OUTLINED_FUNCTION_4_91((uint64_t)objc_msgSend(v1, sel_bottomAnchor));
  *(void *)(v7 + 40) = v13;
  id v14 = objc_msgSend(OUTLINED_FUNCTION_5_96(), sel_leadingAnchor);

  id v15 = objc_msgSend(v1, sel_leadingAnchor);
  id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v15, *(double *)&static Layout.Nickname.distanceFromEdge);

  *(void *)(v7 + 48) = v16;
  id v17 = objc_msgSend(OUTLINED_FUNCTION_5_96(), sel_trailingAnchor);

  id v18 = OUTLINED_FUNCTION_4_91((uint64_t)objc_msgSend(v1, sel_trailingAnchor));
  *(void *)(v7 + 56) = v18;
  specialized Array._endMutation()();
  PersonalNicknameMenuView.generateLeadingAvatarConstraints()();
  specialized Array.append<A>(contentsOf:)();
  id v19 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_activateConstraints_, isa);
}

uint64_t PersonalNicknameMenuView.generateLeadingAvatarConstraints()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C3769610;
  id v1 = PersonalNicknameMenuView.leadingAvatarView.getter();
  id v2 = objc_msgSend(v1, sel_heightAnchor);

  if (one-time initialization token for leadingImageSize != -1) {
    swift_once();
  }
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(v2, sel_constraintEqualToConstant_, *((double *)&static Layout.Nickname.leadingImageSize
                                                                                           + 1)));

  *(void *)(v0 + 32) = v3;
  id v4 = PersonalNicknameMenuView.leadingAvatarView.getter();
  id v5 = objc_msgSend(v4, sel_widthAnchor);

  id v6 = objc_msgSend(v5, sel_constraintEqualToConstant_, *(double *)&static Layout.Nickname.leadingImageSize);
  *(void *)(v0 + 40) = v6;
  specialized Array._endMutation()();
  return v0;
}

Swift::Void __swiftcall PersonalNicknameMenuView.didTap(sender:)(UITapGestureRecognizer *sender)
{
  uint64_t v2 = v1;
  if (one-time initialization token for nickname != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.nickname);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "Received tap on nickname menu view");
    OUTLINED_FUNCTION_3();
  }

  uint64_t v8 = v2 + OBJC_IVAR____TtC15ConversationKit24PersonalNicknameMenuView_personalNicknameMenuViewDelegate;
  if (MEMORY[0x1C8776240](v8))
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
    swift_unknownObjectRelease();
  }
}

id PersonalNicknameMenuView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void PersonalNicknameMenuView.init(frame:)()
{
}

id PersonalNicknameMenuView.__deallocating_deinit()
{
  return PersonalNicknameMenuView.__deallocating_deinit(type metadata accessor for PersonalNicknameMenuView);
}

void closure #1 in PersonalNicknameMenuView.setNickname()(void *a1)
{
  id v2 = a1;
  PersonalNicknameMenuView.personalNickname.setter(a1);
}

void specialized PersonalNicknameMenuView.getPersonalNickname(completion:)(uint64_t a1, void *a2)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a2;
  id v4 = self;
  id v5 = a2;
  id v6 = objc_msgSend(v4, sel_sharedController);
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](0xD000000000000018, 0x80000001C377DFA0);
  unsigned __int8 v8 = objc_msgSend(v6, sel_hasListenerForID_, v7);

  if ((v8 & 1) == 0)
  {
    id v9 = objc_msgSend(v4, sel_sharedController);
    id v10 = (void *)MEMORY[0x1C87730B0](0xD000000000000018, 0x80000001C377DFA0);
    objc_msgSend(v9, sel_addListenerID_capabilities_, v10, *MEMORY[0x1E4F6C4F0]);
  }
  id v11 = self;
  id v12 = objc_msgSend(v11, sel_sharedInstance);
  id v13 = objc_msgSend(v12, sel_personalNickname);

  if (v13)
  {
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.nickname);
    id v15 = v13;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      *(_DWORD *)id v18 = 138412290;
      aBlock[0] = v15;
      id v19 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v23 = v13;

      _os_log_impl(&dword_1C2F90000, v16, v17, "Reading the personal nick name from cache %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v23, -1, -1);
      MEMORY[0x1C87760E0](v18, -1, -1);
    }
    else
    {
    }
    id v20 = v15;
    PersonalNicknameMenuView.personalNickname.setter(v13);
  }
  else
  {
    id v20 = objc_msgSend(v11, sel_sharedInstance);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = partial apply for closure #1 in PersonalNicknameMenuView.setNickname();
    *(void *)(v21 + 24) = v3;
    aBlock[4] = partial apply for closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:);
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed AVCaptureDevice?) -> ();
    aBlock[3] = &block_descriptor_42_0;
    uint64_t v22 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_fetchPersonalNicknameWithCompletion_, v22);
    _Block_release(v22);
  }

  swift_release();
}

uint64_t closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:)(void *a1, uint64_t (*a2)(void *))
{
  if (one-time initialization token for nickname != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.nickname);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unsigned __int8 v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)unsigned __int8 v8 = 138412290;
    if (a1) {
      id v10 = v5;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = a1;

    _os_log_impl(&dword_1C2F90000, v6, v7, "Fetching the personal nick name: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v9, -1, -1);
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  else
  {
  }
  return a2(a1);
}

uint64_t type metadata accessor for PersonalNicknameMenuView()
{
  return self;
}

void *PersonalNicknameNameProvider.personalNickname.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit28PersonalNicknameNameProvider_personalNickname);
  id v2 = v1;
  return v1;
}

id PersonalNicknameNameProvider.__allocating_init(personalNickname:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit28PersonalNicknameNameProvider_personalNickname] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id PersonalNicknameNameProvider.init(personalNickname:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit28PersonalNicknameNameProvider_personalNickname] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PersonalNicknameNameProvider();
  return objc_msgSendSuper2(&v3, sel_init);
}

id PersonalNicknameNameProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PersonalNicknameNameProvider.init()()
{
}

id PersonalNicknameNameProvider.__deallocating_deinit()
{
  return PersonalNicknameMenuView.__deallocating_deinit(type metadata accessor for PersonalNicknameNameProvider);
}

Swift::String_optional __swiftcall PersonalNicknameNameProvider.givenName()()
{
  uint64_t v0 = PersonalNicknameNameProvider.givenName()((SEL *)&selRef_firstName);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PersonalNicknameNameProvider.middleName()()
{
  OUTLINED_FUNCTION_30_1();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PersonalNicknameNameProvider.familyName()()
{
  uint64_t v0 = PersonalNicknameNameProvider.givenName()((SEL *)&selRef_lastName);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t PersonalNicknameNameProvider.givenName()(SEL *a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC15ConversationKit28PersonalNicknameNameProvider_personalNickname))
  {
    id v2 = [*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit28PersonalNicknameNameProvider_personalNickname) *a1];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_35();
}

id @objc PersonalNicknameNameProvider.givenName()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    unsigned __int8 v8 = (void *)MEMORY[0x1C87730B0](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned __int8 v8 = 0;
  }
  return v8;
}

Swift::String_optional __swiftcall PersonalNicknameNameProvider.nickname()()
{
  OUTLINED_FUNCTION_30_1();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t PersonalNicknameAvatarProvider.imageData.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_35();
  outlined copy of Data?(v0, v1);
  return OUTLINED_FUNCTION_35();
}

uint64_t PersonalNicknameAvatarProvider.wallpaperFilePath.getter()
{
  return PersonalNicknameAvatarProvider.wallpaperFilePath.getter();
}

{
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_35();
}

uint64_t PersonalNicknameAvatarProvider.nameString.getter()
{
  return PersonalNicknameAvatarProvider.wallpaperFilePath.getter();
}

id PersonalNicknameAvatarProvider.__allocating_init(imageData:wallpaperFilePath:nameString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return PersonalNicknameAvatarProvider.init(imageData:wallpaperFilePath:nameString:)(a1, a2, a3, a4, a5, a6);
}

id PersonalNicknameAvatarProvider.init(imageData:wallpaperFilePath:nameString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = &v6[OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_imageData];
  *(void *)uint64_t v7 = a1;
  *((void *)v7 + 1) = a2;
  unsigned __int8 v8 = &v6[OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_wallpaperFilePath];
  *(void *)unsigned __int8 v8 = a3;
  *((void *)v8 + 1) = a4;
  id v9 = &v6[OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_nameString];
  *(void *)id v9 = a5;
  *((void *)v9 + 1) = a6;
  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for PersonalNicknameAvatarProvider();
  return objc_msgSendSuper2(&v11, sel_init);
}

void PersonalNicknameAvatarProvider.init()()
{
}

id PersonalNicknameAvatarProvider.__deallocating_deinit()
{
  return PersonalNicknameMenuView.__deallocating_deinit(type metadata accessor for PersonalNicknameAvatarProvider);
}

id PersonalNicknameMenuView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void specialized PersonalNicknameAvatarProvider.generateAvatarImage(of:imageHandler:)(uint64_t a1, void (**a2)(void, void, void), double a3, double a4)
{
  double v6 = 100.0;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v7 = a4;
  }
  else {
    double v7 = 100.0;
  }
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v6 = a3;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v8 = a4;
  }
  else {
    double v8 = v7;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v9 = a3;
  }
  else {
    double v9 = v6;
  }
  id v10 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v10, sel_scale);
  CGFloat v12 = v11;

  id v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_imageData);
  unint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_imageData + 8);
  if (v14 >> 60 == 15
    || (uint64_t v15 = *v13,
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage),
        outlined copy of Data._Representation(v15, v14),
        (id v16 = UIImage.__allocating_init(data:scale:)(v15, v14, v12)) == 0))
  {
    id v18 = 0;
    id v17 = 0;
  }
  else
  {
    id v17 = v16;
    v20.width = v9;
    v20.height = v8;
    UIGraphicsBeginImageContextWithOptions(v20, 0, v12);
    objc_msgSend(v17, sel_drawInRect_, 0.0, 0.0, v9, v8);
    id v18 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
  }
  ((void (**)(void, UIImage *, void))a2)[2](a2, v18, 0);

  _Block_release(a2);
}

void PersonalNicknameAvatarProvider.generateAvatarImage(of:imageHandler:)(void (*a1)(void), double a2, double a3)
{
  double v5 = a3;
  double v6 = a2;
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) == 0 && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    double v5 = 100.0;
    double v6 = 100.0;
  }
  id v7 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v7, sel_scale);
  double v9 = v8;

  id v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_imageData);
  unint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_imageData + 8);
  if (v11 >> 60 == 15)
  {
    id v12 = 0;
  }
  else
  {
    uint64_t v13 = *v10;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    outlined copy of Data._Representation(v13, v11);
    id v12 = UIImage.__allocating_init(data:scale:)(v13, v11, v9);
    if (v12)
    {
      id v14 = v12;
      v18.width = v6;
      v18.height = v5;
      UIGraphicsBeginImageContextWithOptions(v18, 0, v9);
      objc_msgSend(v14, sel_drawInRect_, 0.0, 0.0, v6, v5);
      uint64_t v15 = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();

      id v12 = v15;
      goto LABEL_9;
    }
  }
  id v14 = 0;
LABEL_9:
  id v16 = v12;
  a1();
}

uint64_t PersonalNicknameAvatarProvider.generatePosterImage(handler:)(void (*a1)(void, void *), uint64_t a2)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_wallpaperFilePath + 8))
  {
    uint64_t v55 = a2;
    double v53 = a1;
    uint64_t v4 = type metadata accessor for URL();
    v52[3] = v52;
    OUTLINED_FUNCTION_4();
    uint64_t v54 = v5;
    uint64_t v7 = *(void *)(v6 + 64);
    MEMORY[0x1F4188790](v8);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
    MEMORY[0x1F4188790](v9 - 8);
    uint64_t v57 = v4;
    __swift_storeEnumTagSinglePayload((uint64_t)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
    type metadata accessor for URL.DirectoryHint();
    OUTLINED_FUNCTION_4();
    __n128 v12 = MEMORY[0x1F4188790](v11);
    (*(void (**)(char *, void, __n128))(v14 + 104))((char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F276C8], v12);
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)();
    double v56 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v21 = (void *)Data.init(contentsOf:options:)();
    unint64_t v23 = v22;
    uint64_t v24 = self;
    outlined copy of Data._Representation((uint64_t)v21, v23);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id aBlock = 0;
    id v26 = objc_msgSend(v24, sel_unarchiveConfigurationFromData_error_, isa, &aBlock);

    id v27 = aBlock;
    uint64_t v28 = v55;
    if (v26)
    {
      id v29 = v26;
      OUTLINED_FUNCTION_2_105();
      uint64_t v30 = v2 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_nameString;
      uint64_t v31 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit30PersonalNicknameAvatarProvider_nameString);
      uint64_t v32 = *(void *)(v30 + 8);
      objc_allocWithZone(MEMORY[0x1E4FADA30]);
      swift_bridgeObjectRetain();
      id v33 = @nonobjc TPInComingCallUISnapshotViewController.init(configuration:style:nameString:)(v26, 3, v31, v32);
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v53;
      *(void *)(v34 + 24) = v28;
      double v62 = partial apply for closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:);
      uint64_t v63 = v34;
      id aBlock = (id)MEMORY[0x1E4F143A8];
      uint64_t v59 = 1107296256;
      id v60 = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
      double v61 = &block_descriptor_62;
      double v35 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v33, sel_snapshotWithOptions_completionBlock_, 0, v35);
      _Block_release(v35);

      OUTLINED_FUNCTION_2_105();
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v56, v57);
    }
    else
    {
      id v36 = v27;
      unsigned int v37 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for nickname != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.nickname);
      id v39 = v37;
      outlined copy of Data._Representation((uint64_t)v21, v23);
      id v40 = v37;
      double v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        v64[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136315394;
        id aBlock = v21;
        uint64_t v59 = v23;
        outlined copy of Data._Representation((uint64_t)v21, v23);
        uint64_t v44 = String.init<A>(reflecting:)();
        id aBlock = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2_105();
        OUTLINED_FUNCTION_2_105();
        *(_WORD *)(v43 + 12) = 2080;
        id aBlock = v37;
        id v46 = v37;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v47 = String.init<A>(reflecting:)();
        id aBlock = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2F90000, v41, v42, "Could not unarchive configuration from data: %s error: %s", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        OUTLINED_FUNCTION_2_105();
        OUTLINED_FUNCTION_2_105();
      }
      id v49 = v53;
      uint64_t v50 = v57;
      id v51 = v37;
      v49(0, v37);

      OUTLINED_FUNCTION_2_105();
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v56, v50);
    }
  }
  else
  {
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.nickname);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v18, v19, "Could not find a wallpaperFilePath");
      OUTLINED_FUNCTION_3();
    }

    return ((uint64_t (*)(void, void))a1)(0, 0);
  }
}

uint64_t closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:)(uint64_t a1, id a2, uint64_t (*a3)(uint64_t, id))
{
  if (a2)
  {
    id v6 = a2;
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.nickname);
    id v8 = a2;
    id v9 = a2;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      __n128 v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v18 = v13;
      *(_DWORD *)__n128 v12 = 136315138;
      id v14 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v15 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v10, v11, "Could not snapshot TPInComingCallUISnapshotViewController with error: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v13, -1, -1);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }
    else
    {
    }
  }
  return a3(a1, a2);
}

id @nonobjc TPInComingCallUISnapshotViewController.init(configuration:style:nameString:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a4)
  {
    id v8 = (void *)MEMORY[0x1C87730B0](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = 0;
  }
  id v9 = objc_msgSend(v5, sel_initWithConfiguration_style_nameString_, a1, a2, v8);

  return v9;
}

uint64_t type metadata accessor for PersonalNicknameNameProvider()
{
  return self;
}

uint64_t type metadata accessor for PersonalNicknameAvatarProvider()
{
  return self;
}

uint64_t sub_1C3394954()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:)(uint64_t a1, void *a2)
{
  return closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:)(a1, a2, *(uint64_t (**)(uint64_t, id))(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext;
  if (!lazy protocol witness table cache variable for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PersonalNicknameMenuViewDisplayContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3394AB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for PersonalNicknameMenuViewDisplayContext()
{
}

uint64_t dispatch thunk of PersonalNicknameMenuViewDelegate.presentOnboardingViewController()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for PersonalNicknameMenuView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PersonalNicknameMenuView);
}

uint64_t dispatch thunk of PersonalNicknameMenuView.__allocating_init(displayContext:personalNicknameMenuViewDelegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 408))();
}

uint64_t dispatch thunk of PersonalNicknameMenuView.didTap(sender:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t method lookup function for PersonalNicknameNameProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PersonalNicknameNameProvider);
}

uint64_t dispatch thunk of PersonalNicknameNameProvider.__allocating_init(personalNickname:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for PersonalNicknameAvatarProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PersonalNicknameAvatarProvider);
}

uint64_t dispatch thunk of PersonalNicknameAvatarProvider.__allocating_init(imageData:wallpaperFilePath:nameString:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1C3394BB8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PersonalNicknameMenuView.setNickname()(void *a1)
{
}

uint64_t partial apply for closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:)(void *a1)
{
  return closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:)(a1, *(uint64_t (**)(void *))(v1 + 16));
}

void specialized _ArrayProtocol.filter(_:)()
{
  uint64_t v4 = OUTLINED_FUNCTION_9_64();
  uint64_t v5 = type metadata accessor for Participant(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_4_92(v7, v22);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_6_88();
  OUTLINED_FUNCTION_17_40();
  if (v9)
  {
    uint64_t v24 = v1;
    unint64_t v23 = v2;
    while (*(void *)(v1 + 16))
    {
      unint64_t v10 = OUTLINED_FUNCTION_3_107();
      _s15ConversationKit11ParticipantVWOcTm_11(v10, v3, (void (*)(void))type metadata accessor for Participant);
      uint64_t v11 = OUTLINED_FUNCTION_15_55();
      char v12 = v2(v11);
      if (v0)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v3, (void (*)(void))type metadata accessor for Participant);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v12)
      {
        _s15ConversationKit11ParticipantVWObTm_4(v3, v25, (void (*)(void))type metadata accessor for Participant);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v13 = OUTLINED_FUNCTION_10_59();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v14, v15);
        }
        OUTLINED_FUNCTION_12_51();
        if (v16)
        {
          OUTLINED_FUNCTION_21_37();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, v21);
        }
        OUTLINED_FUNCTION_20_40();
        _s15ConversationKit11ParticipantVWObTm_4(v25, v17, (void (*)(void))type metadata accessor for Participant);
        uint64_t v1 = v24;
        uint64_t v2 = v23;
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v3, (void (*)(void))type metadata accessor for Participant);
      }
      OUTLINED_FUNCTION_19_39();
      if (v18) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    OUTLINED_FUNCTION_18_44();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = OUTLINED_FUNCTION_9_64();
  uint64_t v5 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_4_92(v7, v22);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_6_88();
  OUTLINED_FUNCTION_17_40();
  if (v9)
  {
    uint64_t v24 = v1;
    unint64_t v23 = v2;
    while (*(void *)(v1 + 16))
    {
      unint64_t v10 = OUTLINED_FUNCTION_3_107();
      _s15ConversationKit11ParticipantVWOcTm_11(v10, v3, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v11 = OUTLINED_FUNCTION_15_55();
      char v12 = v2(v11);
      if (v0)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v3, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v12)
      {
        _s15ConversationKit11ParticipantVWObTm_4(v3, v25, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v13 = OUTLINED_FUNCTION_10_59();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v14, v15);
        }
        OUTLINED_FUNCTION_12_51();
        if (v16)
        {
          OUTLINED_FUNCTION_21_37();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, v21);
        }
        OUTLINED_FUNCTION_20_40();
        _s15ConversationKit11ParticipantVWObTm_4(v25, v17, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v1 = v24;
        uint64_t v2 = v23;
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v3, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      }
      OUTLINED_FUNCTION_19_39();
      if (v18) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    OUTLINED_FUNCTION_18_44();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = OUTLINED_FUNCTION_9_64();
  uint64_t v5 = type metadata accessor for TranscriptionViewModel.Caption(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_4_92(v7, v22);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_6_88();
  OUTLINED_FUNCTION_17_40();
  if (v9)
  {
    uint64_t v24 = v1;
    unint64_t v23 = v2;
    while (*(void *)(v1 + 16))
    {
      unint64_t v10 = OUTLINED_FUNCTION_3_107();
      _s15ConversationKit11ParticipantVWOcTm_11(v10, v3, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      uint64_t v11 = OUTLINED_FUNCTION_15_55();
      char v12 = v2(v11);
      if (v0)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v3, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v12)
      {
        _s15ConversationKit11ParticipantVWObTm_4(v3, v25, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v13 = OUTLINED_FUNCTION_10_59();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v14, v15);
        }
        OUTLINED_FUNCTION_12_51();
        if (v16)
        {
          OUTLINED_FUNCTION_21_37();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, v21);
        }
        OUTLINED_FUNCTION_20_40();
        _s15ConversationKit11ParticipantVWObTm_4(v25, v17, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        uint64_t v1 = v24;
        uint64_t v2 = v23;
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v3, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      }
      OUTLINED_FUNCTION_19_39();
      if (v18) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    OUTLINED_FUNCTION_18_44();
  }
}

void Array<A>.screenSharingParticipant.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_64();
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v7 = OUTLINED_FUNCTION_1(v6);
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10_5();
  uint64_t v32 = v10;
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v27 - v12;
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v37 = MEMORY[0x1E4FBC860];
  uint64_t v15 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (v15)
  {
    uint64_t v27 = v2;
    uint64_t v28 = v4;
    OUTLINED_FUNCTION_22_0();
    uint64_t v31 = v16;
    uint64_t v17 = v2 + v16;
    uint64_t v18 = *(void *)(v9 + 72);
    char v19 = v36;
    uint64_t v20 = &v33[12];
    id v29 = &v33[12];
    uint64_t v30 = v36;
    while (1)
    {
      _s15ConversationKit11ParticipantVWOcTm_11(v17, (uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v13, v0, (void (*)(void))type metadata accessor for Participant.State);
      OUTLINED_FUNCTION_102();
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v22 = (const void *)(v0 + *(int *)(v21 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v0 + *(int *)(v21 + 64)), *(void *)(v0 + *(int *)(v21 + 64) + 8));
        memcpy(v33, v22, sizeof(v33));
        type metadata accessor for Date();
        OUTLINED_FUNCTION_0();
        OUTLINED_FUNCTION_26_2();
        v23();
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v20, (uint64_t)v34);
        outlined destroy of Participant.MediaInfo((uint64_t)v33);
        if (v35 != 1)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v13, v32, (void (*)(void))type metadata accessor for Participant);
          uint64_t v24 = v37;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
            uint64_t v24 = v37;
          }
          unint64_t v26 = *(void *)(v24 + 16);
          unint64_t v25 = *(void *)(v24 + 24);
          if (v26 >= v25 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
            uint64_t v24 = v37;
          }
          *(void *)(v24 + 16) = v26 + 1;
          _s15ConversationKit11ParticipantVWObTm_4(v32, v24 + v31 + v26 * v18, (void (*)(void))type metadata accessor for Participant);
          uint64_t v20 = v29;
          char v19 = v30;
          goto LABEL_12;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v0, (void (*)(void))type metadata accessor for Participant.State);
        memset(v34, 0, sizeof(v34));
        uint64_t v35 = 1;
        bzero(v19, 0xB1uLL);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
LABEL_12:
      v17 += v18;
      if (!--v15)
      {
        uint64_t v14 = v37;
        uint64_t v4 = v28;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v33[0] = v14;
  swift_retain();
  specialized MutableCollection<>.sort(by:)(v33, (uint64_t (*)(void *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_release();
  specialized Collection.first.getter(v33[0], v4);
  swift_release();
  OUTLINED_FUNCTION_28();
}

void Array<A>.arrayCloselyMatching(_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v34 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_3();
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v12);
  uint64_t v31 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_6_88();
  MEMORY[0x1F4188790](v14);
  id v33 = (char *)&v30 - v15;
  uint64_t v43 = v16;
  uint64_t v39 = v17;
  uint64_t v40 = v18;
  uint64_t v41 = v19;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v48 = _ArrayProtocol.filter(_:)();
  uint64_t v43 = v7;
  uint64_t v36 = v3;
  uint64_t v37 = v34;
  uint64_t v38 = v5;
  swift_bridgeObjectRetain();
  uint64_t v47 = _ArrayProtocol.filter(_:)();
  uint64_t v46 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRetain();
  uint64_t v20 = Array.startIndex.getter();
  uint64_t v45 = v20;
  if (v20 == MEMORY[0x1C87734C0](v5, v3))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    static Array.+ infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_16_40();
    static Array.+= infix(_:_:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28();
    return;
  }
  uint64_t v30 = v11;
  uint64_t v35 = (void (**)(char *, uint64_t *, uint64_t))(v9 + 16);
  uint64_t v32 = v9 + 32;
  uint64_t v21 = (void (**)(char *, uint64_t))(v9 + 8);
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    OUTLINED_FUNCTION_22_0();
    uint64_t v24 = *(void (**)(char *, uint64_t *, uint64_t))(v9 + 16);
    v24(v33, (uint64_t *)(v5 + v23 + *(void *)(v9 + 72) * v20), v3);
LABEL_6:
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_16_40();
    MEMORY[0x1C87734E0]();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_46();
    v25();
    uint64_t v26 = v47;
    uint64_t v42 = v47;
    swift_getWitnessTable();
    Collection<>.firstIndex(of:)();
    if (v44)
    {
      uint64_t v43 = v48;
      if ((Collection.isEmpty.getter() & 1) == 0 || (uint64_t v43 = v26, (Collection.isEmpty.getter() & 1) == 0))
      {
        swift_getWitnessTable();
        RangeReplaceableCollection.removeFirst()();
        Array.append(_:)();
      }
      (*v21)(v0, v3);
    }
    else
    {
      uint64_t v27 = v31;
      v24(v31, (uint64_t *)v0, v3);
      Array.append(_:)();
      Array.remove(at:)();
      uint64_t v28 = *v21;
      (*v21)(v27, v3);
      v28(v0, v3);
    }
    uint64_t v20 = v45;
    if (v20 == MEMORY[0x1C87734C0](v5, v3)) {
      goto LABEL_2;
    }
  }
  OUTLINED_FUNCTION_16_40();
  uint64_t v29 = _ArrayBuffer._getElementSlowPath(_:)();
  if (v30 == 8)
  {
    uint64_t v43 = v29;
    uint64_t v24 = *v35;
    (*v35)(v33, &v43, v3);
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  __break(1u);
}

void Array<A>.sortToMatch(_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v34 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v2 + 16);
  OUTLINED_FUNCTION_5_3();
  uint64_t v32 = v7;
  uint64_t v33 = v8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_64();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_5_3();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (uint64_t *)((char *)&v27 - v18);
  uint64_t v38 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1C87732D0](&v35, v3, WitnessTable);
  uint64_t v37 = v35;
  OUTLINED_FUNCTION_16_40();
  type metadata accessor for EnumeratedSequence();
  EnumeratedSequence.makeIterator()();
  OUTLINED_FUNCTION_16_40();
  uint64_t v29 = type metadata accessor for EnumeratedSequence.Iterator();
  EnumeratedSequence.Iterator.next()();
  uint64_t v21 = *(void (**)(uint64_t *, char *, uint64_t))(v13 + 32);
  uint64_t v30 = v13 + 32;
  uint64_t v31 = v11;
  uint64_t v28 = v21;
  v21(v19, v16, v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, TupleTypeMetadata2) != 1)
  {
    uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 32);
    v33 += 32;
    do
    {
      uint64_t v22 = *v19;
      v27(v1, (char *)v19 + *(int *)(TupleTypeMetadata2 + 48), v6);
      uint64_t v23 = *v34;
      uint64_t v37 = *v34;
      swift_getWitnessTable();
      Collection<>.firstIndex(of:)();
      if (v36 != 1)
      {
        uint64_t v24 = v35;
        if (v22 < MEMORY[0x1C8773490](v23, v6))
        {
          uint64_t v35 = v22;
          uint64_t v37 = v24;
          swift_getWitnessTable();
          MutableCollection.swapAt(_:_:)();
        }
      }
      uint64_t v25 = OUTLINED_FUNCTION_102();
      v26(v25);
      EnumeratedSequence.Iterator.next()();
      v28(v19, v16, v31);
    }
    while (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, TupleTypeMetadata2) != 1);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28();
}

void Array<A>.filterAndSortForInCallControls()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v26 = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  if (v12)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v14 = *(void *)(v4 + 72);
    v25[1] = v1;
    uint64_t v15 = v1 + v13;
    do
    {
      uint64_t v16 = OUTLINED_FUNCTION_102();
      _s15ConversationKit11ParticipantVWOcTm_11(v16, v17, v18);
      if (*(void *)&v10[*(int *)(v2 + 28)])
      {
        _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v10, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v19 = OUTLINED_FUNCTION_48_0();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, v21);
        }
        uint64_t v22 = v26;
        unint64_t v24 = *(void *)(v26 + 16);
        unint64_t v23 = *(void *)(v26 + 24);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v26;
        }
        *(void *)(v22 + 16) = v24 + 1;
        _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v8, v22 + v13 + v24 * v14, (void (*)(void))type metadata accessor for Participant);
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
      }
      v15 += v14;
      --v12;
    }
    while (v12);
    uint64_t v11 = v26;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = v11;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v26, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_release();
  OUTLINED_FUNCTION_28();
}

BOOL closure #1 in Array<A>.arrayCloselyMatching(_:)()
{
  return (Sequence<>.contains(_:)() & 1) == 0;
}

uint64_t closure #2 in Array<A>.arrayCloselyMatching(_:)()
{
  return Sequence<>.contains(_:)() & 1;
}

void Array<A>.union()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 56;
    swift_bridgeObjectRetain();
    do
    {
      v3.origin.x = OUTLINED_FUNCTION_25_36();
      CGRectUnion(v3, v4);
      v2 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_25_36();
}

uint64_t closure #1 in Array<A>.sortForInCallControls()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v37 - v8;
  uint64_t v10 = type metadata accessor for Participant.State(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v37 - v14;
  _s15ConversationKit11ParticipantVWOcTm_11(a1, (uint64_t)v37 - v14, (void (*)(void))type metadata accessor for Participant.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v29 = (uint64_t)&v15[*(int *)(v28 + 48)];
      outlined consume of Participant.CopresenceInfo?(*(void *)&v15[*(int *)(v28 + 64)], *(void *)&v15[*(int *)(v28 + 64) + 8]);
      outlined destroy of Participant.MediaInfo(v29);
      uint64_t v30 = type metadata accessor for Date();
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v32 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v33 = v15;
      uint64_t v34 = v32;
      v37[15] = v31 + 8;
      v32(v33, v30);
      _s15ConversationKit11ParticipantVWOcTm_11(a2, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v9, (uint64_t)v13, (void (*)(void))type metadata accessor for Participant.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v36 = (uint64_t)&v13[*(int *)(v35 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v13[*(int *)(v35 + 64)], *(void *)&v13[*(int *)(v35 + 64) + 8]);
          outlined destroy of Participant.MediaInfo(v36);
          v34(v13, v30);
          goto LABEL_4;
        case 6u:
          break;
        default:
          v34(v13, v30);
          break;
      }
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
      char v19 = 1;
      return v19 & 1;
    case 6u:
      goto LABEL_3;
    default:
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
LABEL_3:
      _s15ConversationKit11ParticipantVWOcTm_11(a2, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
LABEL_4:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
      char v17 = Participant.isActive.getter();
      _s15ConversationKit11ParticipantVWOcTm_11(a2, (uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
      if (v17)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
      }
      else
      {
        char v18 = Participant.isActive.getter();
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
        if (v18)
        {
          char v19 = 0;
          return v19 & 1;
        }
      }
      Participant.contactDetails.getter();
      char v21 = (void *)v37[7];
      uint64_t v20 = v37[8];
      uint64_t v22 = v37[9];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Participant.contactDetails.getter();
      unint64_t v24 = (void *)v37[0];
      uint64_t v23 = v37[1];
      uint64_t v25 = v37[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (v23 == v20 && v25 == v22) {
        char v19 = 0;
      }
      else {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19 & 1;
  }
}

void Array<A>.participants(notIn:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v37 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_3();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *(void *)(v3 + 16);
  if (v10)
  {
    v33[0] = v1;
    uint64_t v38 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    OUTLINED_FUNCTION_22_0();
    uint64_t v12 = v3 + v11;
    uint64_t v13 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_5_3();
    uint64_t v35 = *(void *)(v15 + 64);
    uint64_t v36 = v14;
    uint64_t v16 = *(void *)(v5 + 72);
    char v18 = (void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    v33[1] = v17 + 32;
    uint64_t v34 = v16;
    do
    {
      MEMORY[0x1F4188790](v14);
      uint64_t v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_11(v12, v9, (void (*)(void))type metadata accessor for Participant);
      (*v18)(v20, v9 + *(int *)(v37 + 20), v13);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v9, (void (*)(void))type metadata accessor for Participant);
      uint64_t v21 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v22 = OUTLINED_FUNCTION_48_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22, v23, v24);
        uint64_t v21 = v38;
      }
      unint64_t v26 = *(void *)(v21 + 16);
      unint64_t v25 = *(void *)(v21 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v21 = v38;
      }
      *(void *)(v21 + 16) = v26 + 1;
      OUTLINED_FUNCTION_22_0();
      uint64_t v13 = v36;
      OUTLINED_FUNCTION_46();
      uint64_t v14 = v29(v27, v28);
      uint64_t v38 = v21;
      v12 += v34;
      --v10;
    }
    while (v10);
  }
  specialized Set.init<A>(_:)();
  uint64_t v31 = v30;
  uint64_t v32 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v32, v31);
  OUTLINED_FUNCTION_28();
}

void Array<A>.sorted(byIdentifiers:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v6 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v79 = v8 - v7;
  uint64_t v83 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_10_5();
  uint64_t v78 = v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v77 = (uint64_t)v73 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v73 - v14;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_6_88();
  uint64_t v17 = *(char **)(v3 + 16);
  uint64_t v75 = v3;
  uint64_t v76 = v18;
  uint64_t v74 = v5;
  if (v17)
  {
    OUTLINED_FUNCTION_22_0();
    uint64_t v20 = v3 + v19;
    char v22 = *(void **)(v21 + 72);
    swift_bridgeObjectRetain();
    uint64_t v23 = (void *)MEMORY[0x1E4FBC868];
    double v81 = v22;
    __int16 v82 = v15;
    double v80 = (void *)v1;
    while (1)
    {
      uint64_t v85 = v20;
      double v86 = v17;
      _s15ConversationKit11ParticipantVWOcTm_11(v20, v1, (void (*)(void))type metadata accessor for Participant);
      uint64_t v24 = type metadata accessor for UUID();
      double v84 = v73;
      OUTLINED_FUNCTION_5_3();
      uint64_t v26 = v25;
      MEMORY[0x1F4188790](v27);
      OUTLINED_FUNCTION_64();
      uint64_t v28 = *(void (**)(uint64_t))(v26 + 16);
      uint64_t v29 = OUTLINED_FUNCTION_102();
      v28(v29);
      _s15ConversationKit11ParticipantVWOcTm_11(v1, (uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      double v87 = v23;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)();
      uint64_t v33 = v23[2];
      BOOL v34 = (v32 & 1) == 0;
      Swift::Int v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        break;
      }
      unint64_t v36 = v31;
      char v37 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, Participant>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v35))
      {
        unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_35;
        }
        unint64_t v36 = v38;
      }
      uint64_t v23 = v87;
      if (v37)
      {
        uint64_t v40 = v81;
        uint64_t v41 = v87[7] + v36 * (void)v81;
        uint64_t v15 = v82;
        outlined assign with take of Participant((uint64_t)v82, v41);
      }
      else
      {
        v87[(v36 >> 6) + 8] |= 1 << v36;
        ((void (*)(unint64_t, uint64_t, uint64_t))v28)(v23[6] + *(void *)(v26 + 72) * v36, v0, v24);
        uint64_t v40 = v81;
        uint64_t v42 = v23[7] + v36 * (void)v81;
        uint64_t v15 = v82;
        _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v82, v42, (void (*)(void))type metadata accessor for Participant);
        uint64_t v43 = v23[2];
        BOOL v44 = __OFADD__(v43, 1);
        uint64_t v45 = v43 + 1;
        if (v44) {
          goto LABEL_34;
        }
        v23[2] = v45;
        uint64_t v23 = v87;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v0, v24);
      uint64_t v1 = (uint64_t)v80;
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v80, (void (*)(void))type metadata accessor for Participant);
      uint64_t v20 = (uint64_t)v40 + v85;
      uint64_t v17 = v86 - 1;
      if (v86 == (char *)1)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v74;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void *)MEMORY[0x1E4FBC868];
LABEL_14:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    v73[1] = v73;
    MEMORY[0x1F4188790](v46 - 8);
    OUTLINED_FUNCTION_21();
    uint64_t v49 = v48 - v47;
    uint64_t v50 = *(void *)(v5 + 16);
    if (v50)
    {
      uint64_t v51 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_5_3();
      double v53 = (void *)v52;
      uint64_t v54 = v5 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
      __int16 v82 = *(char **)(v55 + 72);
      uint64_t v57 = v55 + 16;
      double v56 = *(char **)(v55 + 16);
      uint64_t v85 = v57;
      double v86 = v56;
      double v84 = v53;
      double v80 = v53 + 1;
      double v81 = v53 + 4;
      swift_bridgeObjectRetain();
      uint64_t v58 = MEMORY[0x1E4FBC860];
      while (1)
      {
        ((void (*)(uint64_t, uint64_t, uint64_t))v86)(v49, v54, v51);
        __swift_storeEnumTagSinglePayload(v49, 0, 1, v51);
        uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v49, 1, v51);
        if (EnumTagSinglePayload == 1) {
          break;
        }
        MEMORY[0x1F4188790](EnumTagSinglePayload);
        OUTLINED_FUNCTION_21();
        OUTLINED_FUNCTION_46();
        v60();
        if (v23[2] && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(), (v62 & 1) != 0))
        {
          _s15ConversationKit11ParticipantVWOcTm_11(v23[7] + *(void *)(v76 + 72) * v61, v79, (void (*)(void))type metadata accessor for Participant);
          uint64_t v63 = 0;
        }
        else
        {
          uint64_t v63 = 1;
        }
        uint64_t v64 = v79;
        uint64_t v65 = v83;
        __swift_storeEnumTagSinglePayload(v79, v63, 1, v83);
        OUTLINED_FUNCTION_26_2();
        v66();
        if (__swift_getEnumTagSinglePayload(v64, 1, v65) == 1)
        {
          outlined destroy of SystemUpdateNotice?(v64, &demangling cache variable for type metadata for Participant?);
        }
        else
        {
          uint64_t v67 = v77;
          _s15ConversationKit11ParticipantVWObTm_4(v64, v77, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_11(v67, v78, (void (*)(void))type metadata accessor for Participant);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1, v58);
          }
          unint64_t v69 = *(void *)(v58 + 16);
          unint64_t v68 = *(void *)(v58 + 24);
          if (v69 >= v68 >> 1) {
            uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1, v58);
          }
          *(void *)(v58 + 16) = v69 + 1;
          OUTLINED_FUNCTION_22_0();
          _s15ConversationKit11ParticipantVWObTm_4(v78, v58 + v70 + *(void *)(v71 + 72) * v69, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v77, (void (*)(void))type metadata accessor for Participant);
        }
        v54 += (uint64_t)v82;
        if (!--v50) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v58 = MEMORY[0x1E4FBC860];
LABEL_31:
      uint64_t v72 = type metadata accessor for UUID();
      __swift_storeEnumTagSinglePayload(v49, 1, 1, v72);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Array<A>.participants(notIn:)();
    swift_bridgeObjectRelease();
    double v87 = (void *)v58;
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_28();
  }
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *(void *)(type metadata accessor for Participant(0) - 8);
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  v9[0] = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9[1] = v7;
  uint64_t result = a2(v9);
  *a1 = v5;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_14_51(a1);
  uint64_t v5 = type metadata accessor for Participant(v4);
  OUTLINED_FUNCTION_1(v5);
  return _s15ConversationKit11ParticipantVWObTm_4(v1, v2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v7 + 72) * v3, (void (*)(void))type metadata accessor for Participant);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(unint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t vars8;

  OUTLINED_FUNCTION_14_51(a1);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v2
     + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(void *)(v4 + 72) * v3;
  return v5(v8, v1, v7);
}

uint64_t outlined init with copy of Participant.ScreenInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL partial apply for closure #1 in Array<A>.arrayCloselyMatching(_:)()
{
  return closure #1 in Array<A>.arrayCloselyMatching(_:)();
}

uint64_t partial apply for closure #2 in Array<A>.arrayCloselyMatching(_:)()
{
  return closure #2 in Array<A>.arrayCloselyMatching(_:)() & 1;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for Participant.State(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v306 = (uint64_t)&v276 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v308 = (uint64_t)&v276 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v294 = (uint64_t)&v276 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v311 = (uint64_t)&v276 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v284 = (uint64_t)&v276 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v286 = (uint64_t)&v276 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v279 = (uint64_t)&v276 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v288 = (uint64_t)&v276 - v18;
  uint64_t v19 = type metadata accessor for Participant(0);
  uint64_t v291 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v282 = (uint64_t)&v276 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v312 = (uint64_t)&v276 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v310 = (uint64_t)&v276 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v276 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  unint64_t v31 = (char *)&v276 - v30;
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v323 = (uint64_t)&v276 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v307 = (uint64_t)&v276 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v287 = (uint64_t)&v276 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v283 = (uint64_t)&v276 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v300 = (uint64_t)&v276 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v295 = (uint64_t)&v276 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v46 = (char *)&v276 - v45;
  MEMORY[0x1F4188790](v44);
  v289 = (char *)&v276 - v47;
  v319 = a1;
  Swift::Int v48 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v48);
  if (result < v48)
  {
    Swift::Int v280 = result;
    uint64_t v299 = v1;
    uint64_t v277 = specialized static Array._allocateUninitialized(_:)(v48 / 2);
    unint64_t v290 = v50;
    uint64_t v278 = v48;
    if (v48 <= 0)
    {
      v293 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v214 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_180:
      if (v214 >= 2)
      {
        uint64_t v268 = *v319;
        v269 = v293;
        do
        {
          unint64_t v270 = v214 - 2;
          if (v214 < 2) {
            goto LABEL_213;
          }
          if (!v268) {
            goto LABEL_227;
          }
          uint64_t v271 = *(void *)&v269[16 * v270 + 32];
          uint64_t v272 = *(void *)&v269[16 * v214 + 24];
          uint64_t v273 = v299;
          specialized _merge<A>(low:mid:high:buffer:by:)(v268 + *(void *)(v291 + 72) * v271, v268 + *(void *)(v291 + 72) * *(void *)&v269[16 * v214 + 16], v268 + *(void *)(v291 + 72) * v272, v290);
          uint64_t v299 = v273;
          if (v273) {
            goto LABEL_195;
          }
          if (v272 < v271) {
            goto LABEL_214;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v269 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v269);
          }
          if (v270 >= *((void *)v269 + 2)) {
            goto LABEL_215;
          }
          v274 = &v269[16 * v270 + 32];
          *(void *)v274 = v271;
          *((void *)v274 + 1) = v272;
          unint64_t v275 = *((void *)v269 + 2);
          if (v214 > v275) {
            goto LABEL_216;
          }
          memmove(&v269[16 * v214 + 16], &v269[16 * v214 + 32], 16 * (v275 - v214));
          *((void *)v269 + 2) = v275 - 1;
          unint64_t v214 = v275 - 1;
        }
        while (v275 > 2);
      }
      swift_bridgeObjectRelease();
      if (v278 >= -1) {
        goto LABEL_196;
      }
      __break(1u);
    }
    else
    {
      uint64_t v51 = 0;
      v293 = (char *)MEMORY[0x1E4FBC860];
      Swift::Int v52 = v48;
      uint64_t v53 = v3;
      uint64_t v54 = v52;
      uint64_t v301 = v53;
      uint64_t v305 = v19;
      v304 = v28;
      v316 = v31;
      v292 = v46;
      uint64_t v55 = (uint64_t)v289;
      while (1)
      {
        uint64_t v56 = v51;
        uint64_t v57 = v51 + 1;
        uint64_t v285 = v51;
        if (v51 + 1 >= v54)
        {
          ++v51;
          Swift::Int v129 = v280;
          goto LABEL_69;
        }
        uint64_t v309 = v54;
        uint64_t v58 = (uint64_t *)*v319;
        uint64_t v59 = v56;
        uint64_t v60 = *(void *)(v291 + 72);
        uint64_t v317 = v57;
        uint64_t v61 = v55;
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v58 + v60 * v57, v55, (void (*)(void))type metadata accessor for Participant);
        v298 = v58;
        uint64_t v318 = v60;
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v58 + v60 * v59, (uint64_t)v46, (void (*)(void))type metadata accessor for Participant);
        uint64_t v62 = v299;
        LODWORD(v313) = closure #1 in Array<A>.sortForInCallControls()(v61, (uint64_t)v46);
        uint64_t v299 = v62;
        if (v62) {
          break;
        }
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v46, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v61, (void (*)(void))type metadata accessor for Participant);
        uint64_t v51 = v59 + 2;
        uint64_t v54 = v309;
        if (v59 + 2 >= v309)
        {
          uint64_t v56 = v59;
          goto LABEL_52;
        }
        uint64_t v303 = v318 * v317;
        uint64_t v63 = v298;
        uint64_t v302 = v318 * v51;
        while (2)
        {
          uint64_t v64 = v295;
          _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v63 + v302, v295, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v63 + v303, v300, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_11(v64, v288, (void (*)(void))type metadata accessor for Participant.State);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v66 = v283;
          switch(EnumCaseMultiPayload)
          {
            case 4:
              uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              uint64_t v113 = v288;
              uint64_t v114 = v66;
              uint64_t v115 = v288 + *(int *)(v112 + 48);
              outlined consume of Participant.CopresenceInfo?(*(void *)(v288 + *(int *)(v112 + 64)), *(void *)(v288 + *(int *)(v112 + 64) + 8));
              outlined destroy of Participant.MediaInfo(v115);
              uint64_t v116 = type metadata accessor for Date();
              CGRect v117 = *(void (**)(void, void))(*(void *)(v116 - 8) + 8);
              v117(v113, v116);
              _s15ConversationKit11ParticipantVWOcTm_11(v300, v114, (void (*)(void))type metadata accessor for Participant);
              _s15ConversationKit11ParticipantVWOcTm_11(v114, v279, (void (*)(void))type metadata accessor for Participant.State);
              switch(swift_getEnumCaseMultiPayload())
              {
                case 4u:
                  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                  uint64_t v127 = v279;
                  uint64_t v128 = v279 + *(int *)(v126 + 48);
                  outlined consume of Participant.CopresenceInfo?(*(void *)(v279 + *(int *)(v126 + 64)), *(void *)(v279 + *(int *)(v126 + 64) + 8));
                  outlined destroy of Participant.MediaInfo(v128);
                  v117(v127, v116);
                  unint64_t v31 = v316;
                  uint64_t v66 = v283;
                  uint64_t v46 = v292;
                  uint64_t v54 = v309;
                  goto LABEL_11;
                case 6u:
                  goto LABEL_45;
                default:
                  v117(v279, v116);
LABEL_45:
                  _s15ConversationKit11ParticipantV5StateOWOhTm_0(v283, (void (*)(void))type metadata accessor for Participant);
                  int v111 = 1;
                  unint64_t v31 = v316;
                  uint64_t v46 = v292;
                  uint64_t v54 = v309;
                  break;
              }
              goto LABEL_40;
            case 6:
              goto LABEL_10;
            default:
              uint64_t v67 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v288, v67);
LABEL_10:
              _s15ConversationKit11ParticipantVWOcTm_11(v300, v66, (void (*)(void))type metadata accessor for Participant);
              break;
          }
LABEL_11:
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v66, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_11(v295, v286, (void (*)(void))type metadata accessor for Participant.State);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 4u:
              uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              uint64_t v119 = v286;
              uint64_t v120 = v286 + *(int *)(v118 + 48);
              outlined consume of Participant.CopresenceInfo?(*(void *)(v286 + *(int *)(v118 + 64)), *(void *)(v286 + *(int *)(v118 + 64) + 8));
              outlined destroy of Participant.MediaInfo(v120);
              uint64_t v121 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v121 - 8) + 8))(v119, v121);
              _s15ConversationKit11ParticipantVWOcTm_11(v300, v287, (void (*)(void))type metadata accessor for Participant);
LABEL_15:
              _s15ConversationKit11ParticipantV5StateOWOhTm_0(v287, (void (*)(void))type metadata accessor for Participant);
              uint64_t v71 = *(void **)(v295 + *(int *)(v19 + 28));
              uint64_t v317 = (uint64_t)v63;
              if (!v71) {
                goto LABEL_23;
              }
              id v72 = v71;
              uint64_t v73 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v72);
              if (!v74)
              {

LABEL_23:
                uint64_t v87 = v307;
                _s15ConversationKit11ParticipantVWOcTm_11(v295, v307, (void (*)(void))type metadata accessor for Participant);
                swift_retain();
                ParticipantContactDetailsCache.contactDetails(for:)();
                uint64_t v315 = v321;
                CGFloat v88 = v322;
                id v89 = v320;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v314 = v88;
                swift_bridgeObjectRelease();

                swift_release();
                _s15ConversationKit11ParticipantV5StateOWOhTm_0(v87, (void (*)(void))type metadata accessor for Participant);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                goto LABEL_24;
              }
              uint64_t v75 = v73;
              uint64_t v76 = v74;
              if ((objc_msgSend(v72, sel_shouldHideContact) & 1) == 0)
              {

                swift_bridgeObjectRelease();
                goto LABEL_23;
              }
              uint64_t v315 = v75;
              uint64_t v77 = type metadata accessor for PersonNameComponents();
              v314 = &v276;
              uint64_t v78 = *(void *)(v77 - 8);
              MEMORY[0x1F4188790](v77);
              double v80 = (char *)&v276 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_bridgeObjectRetain();
              PersonNameComponents.init()();
              PersonNameComponents.givenName.setter();
              PersonNameComponents.familyName.setter();
              if (one-time initialization token for initials != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v81 = (id)static NSPersonNameComponentsFormatter.initials;
              Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
              id v83 = objc_msgSend(v81, sel_stringFromPersonNameComponents_, isa);

              double v84 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v86 = v85;

              (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
              id v320 = v84;
              uint64_t v321 = v86;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol.localizedUppercase.getter();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v314 = v76;
              swift_bridgeObjectRelease();
              uint64_t v19 = v305;
LABEL_24:
              double v90 = *(void **)(v300 + *(int *)(v19 + 28));
              if (!v90) {
                goto LABEL_33;
              }
              id v91 = v90;
              uint64_t v92 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v91);
              if (!v93)
              {

LABEL_33:
                uint64_t v107 = v51;
                uint64_t v108 = v307;
                _s15ConversationKit11ParticipantVWOcTm_11(v300, v307, (void (*)(void))type metadata accessor for Participant);
                swift_retain();
                ParticipantContactDetailsCache.contactDetails(for:)();
                uint64_t v109 = v321;
                CGRect v95 = v322;
                id v110 = v320;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_release();
                _s15ConversationKit11ParticipantV5StateOWOhTm_0(v108, (void (*)(void))type metadata accessor for Participant);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                if (v109 != v315)
                {
                  uint64_t v46 = v292;
                  uint64_t v51 = v107;
                  unint64_t v31 = v316;
                  uint64_t v54 = v309;
                  goto LABEL_38;
                }
                uint64_t v46 = v292;
                uint64_t v51 = v107;
                unint64_t v31 = v316;
                uint64_t v54 = v309;
                long long v100 = v314;
                goto LABEL_35;
              }
              uint64_t v94 = v92;
              CGRect v95 = v93;
              if ((objc_msgSend(v91, sel_shouldHideContact) & 1) == 0)
              {

                swift_bridgeObjectRelease();
                goto LABEL_33;
              }
              uint64_t v297 = v94;
              uint64_t v96 = type metadata accessor for PersonNameComponents();
              v296 = &v276;
              uint64_t v281 = v96;
              uint64_t v97 = *(void *)(v96 - 8);
              MEMORY[0x1F4188790](v96);
              double v99 = (char *)&v276 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_bridgeObjectRetain();
              PersonNameComponents.init()();
              PersonNameComponents.givenName.setter();
              PersonNameComponents.familyName.setter();
              long long v100 = v314;
              if (one-time initialization token for initials != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v101 = (id)static NSPersonNameComponentsFormatter.initials;
              Class v102 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
              id v103 = objc_msgSend(v101, sel_stringFromPersonNameComponents_, v102);

              objc_super v104 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v106 = v105;

              (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v281);
              id v320 = v104;
              uint64_t v321 = v106;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol.localizedUppercase.getter();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v19 = v305;
              unint64_t v31 = v316;
              uint64_t v46 = v292;
              uint64_t v54 = v309;
              if (v297 != v315) {
                goto LABEL_38;
              }
LABEL_35:
              if (v95 == v100)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                int v111 = 0;
                goto LABEL_39;
              }
LABEL_38:
              int v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_39:
              uint64_t v28 = v304;
              uint64_t v63 = (void *)v317;
LABEL_40:
              _s15ConversationKit11ParticipantV5StateOWOhTm_0(v300, (void (*)(void))type metadata accessor for Participant);
              _s15ConversationKit11ParticipantV5StateOWOhTm_0(v295, (void (*)(void))type metadata accessor for Participant);
              if ((v313 ^ v111)) {
                goto LABEL_51;
              }
              ++v51;
              uint64_t v63 = (void *)((char *)v63 + v318);
              if (v51 < v54) {
                continue;
              }
              uint64_t v51 = v54;
LABEL_51:
              uint64_t v56 = v285;
LABEL_52:
              Swift::Int v129 = v280;
              uint64_t v53 = v301;
              if (v313)
              {
                if (v51 >= v56)
                {
                  if (v56 < v51)
                  {
                    uint64_t v130 = 0;
                    uint64_t v131 = v318 * (v51 - 1);
                    uint64_t v132 = v51 * v318;
                    uint64_t v133 = v56;
                    uint64_t v134 = v56 * v318;
                    do
                    {
                      if (v133 != v51 + v130 - 1)
                      {
                        v135 = (char *)v298;
                        if (!v298) {
                          goto LABEL_226;
                        }
                        v136 = (char *)v298 + v134;
                        _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v298 + v134, v282, (void (*)(void))type metadata accessor for Participant);
                        if (v134 < v131 || v136 >= &v135[v132])
                        {
                          swift_arrayInitWithTakeFrontToBack();
                        }
                        else if (v134 != v131)
                        {
                          swift_arrayInitWithTakeBackToFront();
                        }
                        _s15ConversationKit11ParticipantVWObTm_4(v282, (uint64_t)&v135[v131], (void (*)(void))type metadata accessor for Participant);
                        Swift::Int v129 = v280;
                        uint64_t v53 = v301;
                      }
                      ++v133;
                      --v130;
                      v131 -= v318;
                      v132 -= v318;
                      v134 += v318;
                    }
                    while (v133 < v51 + v130);
                    uint64_t v19 = v305;
                    uint64_t v28 = v304;
                    unint64_t v31 = v316;
                    uint64_t v46 = v292;
                    uint64_t v56 = v285;
                    uint64_t v54 = v309;
                  }
                  goto LABEL_69;
                }
LABEL_223:
                __break(1u);
LABEL_224:
                __break(1u);
LABEL_225:
                __break(1u);
LABEL_226:
                __break(1u);
LABEL_227:
                __break(1u);
                JUMPOUT(0x1C3399CDCLL);
              }
LABEL_69:
              if (v51 >= v54) {
                goto LABEL_125;
              }
              if (__OFSUB__(v51, v56)) {
                goto LABEL_219;
              }
              if (v51 - v56 < v129)
              {
                uint64_t v56 = v285;
                if (__OFADD__(v285, v129)) {
                  goto LABEL_221;
                }
                if (v285 + v129 >= v54) {
                  uint64_t v138 = v54;
                }
                else {
                  uint64_t v138 = v285 + v129;
                }
                if (v138 < v285)
                {
LABEL_222:
                  __break(1u);
                  goto LABEL_223;
                }
                if (v51 == v138) {
                  goto LABEL_125;
                }
                uint64_t v139 = v53;
                uint64_t v140 = *(void *)(v291 + 72);
                uint64_t v318 = v140 * (v51 - 1);
                uint64_t v302 = v140;
                uint64_t v317 = v51 * v140;
                uint64_t v281 = v138;
LABEL_79:
                uint64_t v141 = 0;
                uint64_t v142 = v285;
                uint64_t v303 = v51;
                while (2)
                {
                  uint64_t v315 = v142;
                  uint64_t v143 = v19;
                  uint64_t v144 = v51;
                  uint64_t v145 = *v319;
                  v314 = (uint64_t *)(v317 + v141);
                  uint64_t v146 = v323;
                  _s15ConversationKit11ParticipantVWOcTm_11(v317 + v141 + v145, v323, (void (*)(void))type metadata accessor for Participant);
                  uint64_t v313 = v318 + v141;
                  _s15ConversationKit11ParticipantVWOcTm_11(v318 + v141 + v145, (uint64_t)v31, (void (*)(void))type metadata accessor for Participant);
                  _s15ConversationKit11ParticipantVWOcTm_11(v146, v311, (void (*)(void))type metadata accessor for Participant.State);
                  switch(swift_getEnumCaseMultiPayload())
                  {
                    case 4u:
                      uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                      uint64_t v194 = v311;
                      uint64_t v195 = v311 + *(int *)(v193 + 48);
                      outlined consume of Participant.CopresenceInfo?(*(void *)(v311 + *(int *)(v193 + 64)), *(void *)(v311 + *(int *)(v193 + 64) + 8));
                      outlined destroy of Participant.MediaInfo(v195);
                      uint64_t v196 = type metadata accessor for Date();
                      v197 = *(void (**)(void, void))(*(void *)(v196 - 8) + 8);
                      v197(v194, v196);
                      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v31, (uint64_t)v28, (void (*)(void))type metadata accessor for Participant);
                      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v28, v294, (void (*)(void))type metadata accessor for Participant.State);
                      switch(swift_getEnumCaseMultiPayload())
                      {
                        case 4u:
                          uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                          uint64_t v203 = v294;
                          uint64_t v204 = v294 + *(int *)(v202 + 48);
                          outlined consume of Participant.CopresenceInfo?(*(void *)(v294 + *(int *)(v202 + 64)), *(void *)(v294 + *(int *)(v202 + 64) + 8));
                          outlined destroy of Participant.MediaInfo(v204);
                          uint64_t v205 = v203;
                          uint64_t v28 = v304;
                          v197(v205, v196);
                          unint64_t v31 = v316;
                          uint64_t v51 = v303;
                          goto LABEL_83;
                        case 6u:
                          goto LABEL_116;
                        default:
                          v197(v294, v196);
LABEL_116:
                          _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v28, (void (*)(void))type metadata accessor for Participant);
                          unint64_t v31 = v316;
                          _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v316, (void (*)(void))type metadata accessor for Participant);
                          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v323, (void (*)(void))type metadata accessor for Participant);
                          uint64_t v51 = v303;
                          uint64_t v19 = v143;
                          break;
                      }
                      goto LABEL_111;
                    case 6u:
                      goto LABEL_82;
                    default:
                      uint64_t v147 = type metadata accessor for Date();
                      (*(void (**)(uint64_t, uint64_t))(*(void *)(v147 - 8) + 8))(v311, v147);
LABEL_82:
                      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v31, (uint64_t)v28, (void (*)(void))type metadata accessor for Participant);
                      uint64_t v51 = v144;
                      break;
                  }
LABEL_83:
                  uint64_t v19 = v143;
                  _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v28, (void (*)(void))type metadata accessor for Participant);
                  _s15ConversationKit11ParticipantVWOcTm_11(v323, v308, (void (*)(void))type metadata accessor for Participant.State);
                  switch(swift_getEnumCaseMultiPayload())
                  {
                    case 4u:
                      uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                      uint64_t v199 = v308;
                      uint64_t v200 = v308 + *(int *)(v198 + 48);
                      outlined consume of Participant.CopresenceInfo?(*(void *)(v308 + *(int *)(v198 + 64)), *(void *)(v308 + *(int *)(v198 + 64) + 8));
                      outlined destroy of Participant.MediaInfo(v200);
                      uint64_t v201 = type metadata accessor for Date();
                      (*(void (**)(uint64_t, uint64_t))(*(void *)(v201 - 8) + 8))(v199, v201);
                      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v31, v310, (void (*)(void))type metadata accessor for Participant);
LABEL_87:
                      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v310, (void (*)(void))type metadata accessor for Participant);
                      v151 = *(void **)(v323 + *(int *)(v143 + 28));
                      if (!v151) {
                        goto LABEL_95;
                      }
                      id v152 = v151;
                      uint64_t v153 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v152);
                      if (!v154)
                      {

LABEL_95:
                        uint64_t v169 = v307;
                        _s15ConversationKit11ParticipantVWOcTm_11(v323, v307, (void (*)(void))type metadata accessor for Participant);
                        swift_retain();
                        ParticipantContactDetailsCache.contactDetails(for:)();
                        uint64_t v309 = v321;
                        v156 = v322;
                        id v170 = v320;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();

                        swift_release();
                        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v169, (void (*)(void))type metadata accessor for Participant);
                        uint64_t v168 = (uint64_t)v316;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();

                        uint64_t v167 = *(int *)(v19 + 28);
                        goto LABEL_96;
                      }
                      uint64_t v155 = v153;
                      v156 = v154;
                      if ((objc_msgSend(v152, sel_shouldHideContact) & 1) == 0)
                      {

                        swift_bridgeObjectRelease();
                        goto LABEL_95;
                      }
                      uint64_t v309 = v155;
                      uint64_t v157 = type metadata accessor for PersonNameComponents();
                      v298 = &v276;
                      uint64_t v158 = *(void *)(v157 - 8);
                      MEMORY[0x1F4188790](v157);
                      v160 = (char *)&v276 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
                      swift_bridgeObjectRetain();
                      PersonNameComponents.init()();
                      PersonNameComponents.givenName.setter();
                      PersonNameComponents.familyName.setter();
                      if (one-time initialization token for initials != -1) {
                        swift_once();
                      }
                      swift_beginAccess();
                      id v161 = (id)static NSPersonNameComponentsFormatter.initials;
                      Class v162 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                      id v163 = objc_msgSend(v161, sel_stringFromPersonNameComponents_, v162);

                      v164 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v166 = v165;

                      (*(void (**)(char *, uint64_t))(v158 + 8))(v160, v157);
                      id v320 = v164;
                      uint64_t v321 = v166;
                      lazy protocol witness table accessor for type String and conformance String();
                      StringProtocol.localizedUppercase.getter();

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v167 = *(int *)(v305 + 28);
                      uint64_t v168 = (uint64_t)v316;
LABEL_96:
                      v171 = *(void **)(v168 + v167);
                      if (!v171) {
                        goto LABEL_105;
                      }
                      id v172 = v171;
                      uint64_t v173 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v172);
                      if (v174)
                      {
                        uint64_t v175 = v173;
                        v176 = v174;
                        if (objc_msgSend(v172, sel_shouldHideContact))
                        {
                          uint64_t v177 = type metadata accessor for PersonNameComponents();
                          v298 = &v276;
                          uint64_t v297 = v177;
                          v296 = *(uint64_t **)(v177 - 8);
                          MEMORY[0x1F4188790](v177);
                          v179 = (char *)&v276 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0);
                          swift_bridgeObjectRetain();
                          PersonNameComponents.init()();
                          PersonNameComponents.givenName.setter();
                          PersonNameComponents.familyName.setter();
                          if (one-time initialization token for initials != -1) {
                            swift_once();
                          }
                          swift_beginAccess();
                          id v180 = (id)static NSPersonNameComponentsFormatter.initials;
                          Class v181 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                          id v182 = objc_msgSend(v180, sel_stringFromPersonNameComponents_, v181);

                          v183 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v185 = v184;

                          ((void (*)(char *, uint64_t))v296[1])(v179, v297);
                          id v320 = v183;
                          uint64_t v321 = v185;
                          lazy protocol witness table accessor for type String and conformance String();
                          StringProtocol.localizedUppercase.getter();

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v19 = v305;
                          uint64_t v186 = (uint64_t)v316;
                          uint64_t v51 = v303;
                          if (v175 != v309) {
                            goto LABEL_110;
                          }
                          goto LABEL_107;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                      }
LABEL_105:
                      uint64_t v187 = v307;
                      _s15ConversationKit11ParticipantVWOcTm_11(v168, v307, (void (*)(void))type metadata accessor for Participant);
                      swift_retain();
                      ParticipantContactDetailsCache.contactDetails(for:)();
                      uint64_t v188 = v321;
                      v176 = v322;
                      id v189 = v320;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      swift_release();
                      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v187, (void (*)(void))type metadata accessor for Participant);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      if (v188 != v309)
                      {
                        uint64_t v19 = v305;
                        uint64_t v186 = (uint64_t)v316;
                        uint64_t v51 = v303;
LABEL_110:
                        char v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        unint64_t v31 = (char *)v186;
                        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v186, (void (*)(void))type metadata accessor for Participant);
                        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v323, (void (*)(void))type metadata accessor for Participant);
                        uint64_t v139 = v301;
                        uint64_t v28 = v304;
                        if ((v190 & 1) == 0) {
                          goto LABEL_122;
                        }
LABEL_111:
                        uint64_t v191 = *v319;
                        if (!*v319) {
                          goto LABEL_224;
                        }
                        uint64_t v192 = v191 + v318 + v141;
                        _s15ConversationKit11ParticipantVWObTm_4(v191 + v317 + v141, v312, (void (*)(void))type metadata accessor for Participant);
                        swift_arrayInitWithTakeFrontToBack();
                        _s15ConversationKit11ParticipantVWObTm_4(v312, v192, (void (*)(void))type metadata accessor for Participant);
                        v141 -= v302;
                        uint64_t v142 = v315 + 1;
                        if (v51 == v315 + 1) {
                          goto LABEL_122;
                        }
                        continue;
                      }
                      uint64_t v19 = v305;
                      uint64_t v186 = (uint64_t)v316;
                      uint64_t v51 = v303;
LABEL_107:
                      if (v176 == v156)
                      {
                        unint64_t v31 = (char *)v186;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v139 = v301;
                        uint64_t v28 = v304;
LABEL_121:
                        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v31, (void (*)(void))type metadata accessor for Participant);
                        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v323, (void (*)(void))type metadata accessor for Participant);
LABEL_122:
                        ++v51;
                        v318 += v302;
                        v317 += v302;
                        if (v51 == v281)
                        {
                          uint64_t v51 = v281;
                          uint64_t v46 = v292;
                          uint64_t v56 = v285;
                          uint64_t v53 = v139;
                          goto LABEL_125;
                        }
                        goto LABEL_79;
                      }
                      goto LABEL_110;
                    case 6u:
                      goto LABEL_85;
                    default:
                      uint64_t v148 = type metadata accessor for Date();
                      (*(void (**)(uint64_t, uint64_t))(*(void *)(v148 - 8) + 8))(v308, v148);
LABEL_85:
                      uint64_t v149 = v310;
                      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v31, v310, (void (*)(void))type metadata accessor for Participant);
                      _s15ConversationKit11ParticipantVWOcTm_11(v149, v306, (void (*)(void))type metadata accessor for Participant.State);
                      switch(swift_getEnumCaseMultiPayload())
                      {
                        case 4u:
                          uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                          uint64_t v207 = v306;
                          uint64_t v208 = v306 + *(int *)(v206 + 48);
                          outlined consume of Participant.CopresenceInfo?(*(void *)(v306 + *(int *)(v206 + 64)), *(void *)(v306 + *(int *)(v206 + 64) + 8));
                          outlined destroy of Participant.MediaInfo(v208);
                          uint64_t v209 = type metadata accessor for Date();
                          (*(void (**)(uint64_t, uint64_t))(*(void *)(v209 - 8) + 8))(v207, v209);
                          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v310, (void (*)(void))type metadata accessor for Participant);
                          goto LABEL_121;
                        case 6u:
                          goto LABEL_87;
                        default:
                          uint64_t v150 = type metadata accessor for Date();
                          (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v306, v150);
                          goto LABEL_87;
                      }
                  }
                }
              }
              uint64_t v56 = v285;
LABEL_125:
              if (v51 < v56) {
                goto LABEL_217;
              }
              uint64_t v210 = v19;
              uint64_t v211 = v53;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v293 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v293 + 2) + 1, 1, v293);
              }
              unint64_t v213 = *((void *)v293 + 2);
              unint64_t v212 = *((void *)v293 + 3);
              unint64_t v214 = v213 + 1;
              uint64_t v55 = (uint64_t)v289;
              if (v213 >= v212 >> 1)
              {
                v267 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v212 > 1), v213 + 1, 1, v293);
                uint64_t v55 = (uint64_t)v289;
                v293 = v267;
              }
              v215 = v293;
              *((void *)v293 + 2) = v214;
              v216 = v215 + 32;
              v217 = &v215[16 * v213 + 32];
              *(void *)v217 = v285;
              *((void *)v217 + 1) = v51;
              if (v213)
              {
                uint64_t v53 = v211;
                uint64_t v19 = v210;
                while (1)
                {
                  unint64_t v218 = v214 - 1;
                  if (v214 >= 4)
                  {
                    v223 = &v216[16 * v214];
                    uint64_t v224 = *((void *)v223 - 8);
                    uint64_t v225 = *((void *)v223 - 7);
                    BOOL v229 = __OFSUB__(v225, v224);
                    uint64_t v226 = v225 - v224;
                    if (v229) {
                      goto LABEL_202;
                    }
                    uint64_t v228 = *((void *)v223 - 6);
                    uint64_t v227 = *((void *)v223 - 5);
                    BOOL v229 = __OFSUB__(v227, v228);
                    uint64_t v221 = v227 - v228;
                    char v222 = v229;
                    if (v229) {
                      goto LABEL_203;
                    }
                    unint64_t v230 = v214 - 2;
                    v231 = &v216[16 * v214 - 32];
                    uint64_t v233 = *(void *)v231;
                    uint64_t v232 = *((void *)v231 + 1);
                    BOOL v229 = __OFSUB__(v232, v233);
                    uint64_t v234 = v232 - v233;
                    if (v229) {
                      goto LABEL_204;
                    }
                    BOOL v229 = __OFADD__(v221, v234);
                    uint64_t v235 = v221 + v234;
                    if (v229) {
                      goto LABEL_206;
                    }
                    if (v235 >= v226)
                    {
                      v253 = &v216[16 * v218];
                      uint64_t v255 = *(void *)v253;
                      uint64_t v254 = *((void *)v253 + 1);
                      BOOL v229 = __OFSUB__(v254, v255);
                      uint64_t v256 = v254 - v255;
                      if (v229) {
                        goto LABEL_212;
                      }
                      BOOL v246 = v221 < v256;
                      goto LABEL_163;
                    }
                  }
                  else
                  {
                    if (v214 != 3)
                    {
                      uint64_t v247 = *((void *)v293 + 4);
                      uint64_t v248 = *((void *)v293 + 5);
                      BOOL v229 = __OFSUB__(v248, v247);
                      uint64_t v240 = v248 - v247;
                      char v241 = v229;
                      goto LABEL_157;
                    }
                    uint64_t v220 = *((void *)v293 + 4);
                    uint64_t v219 = *((void *)v293 + 5);
                    BOOL v229 = __OFSUB__(v219, v220);
                    uint64_t v221 = v219 - v220;
                    char v222 = v229;
                  }
                  if (v222) {
                    goto LABEL_205;
                  }
                  unint64_t v230 = v214 - 2;
                  v236 = &v216[16 * v214 - 32];
                  uint64_t v238 = *(void *)v236;
                  uint64_t v237 = *((void *)v236 + 1);
                  BOOL v239 = __OFSUB__(v237, v238);
                  uint64_t v240 = v237 - v238;
                  char v241 = v239;
                  if (v239) {
                    goto LABEL_207;
                  }
                  v242 = &v216[16 * v218];
                  uint64_t v244 = *(void *)v242;
                  uint64_t v243 = *((void *)v242 + 1);
                  BOOL v229 = __OFSUB__(v243, v244);
                  uint64_t v245 = v243 - v244;
                  if (v229) {
                    goto LABEL_209;
                  }
                  if (__OFADD__(v240, v245)) {
                    goto LABEL_211;
                  }
                  if (v240 + v245 >= v221)
                  {
                    BOOL v246 = v221 < v245;
LABEL_163:
                    if (v246) {
                      unint64_t v218 = v230;
                    }
                    goto LABEL_165;
                  }
LABEL_157:
                  if (v241) {
                    goto LABEL_208;
                  }
                  v249 = &v216[16 * v218];
                  uint64_t v251 = *(void *)v249;
                  uint64_t v250 = *((void *)v249 + 1);
                  BOOL v229 = __OFSUB__(v250, v251);
                  uint64_t v252 = v250 - v251;
                  if (v229) {
                    goto LABEL_210;
                  }
                  if (v252 < v240) {
                    goto LABEL_174;
                  }
LABEL_165:
                  unint64_t v257 = v218 - 1;
                  if (v218 - 1 >= v214)
                  {
                    __break(1u);
LABEL_199:
                    __break(1u);
LABEL_200:
                    __break(1u);
LABEL_201:
                    __break(1u);
LABEL_202:
                    __break(1u);
LABEL_203:
                    __break(1u);
LABEL_204:
                    __break(1u);
LABEL_205:
                    __break(1u);
LABEL_206:
                    __break(1u);
LABEL_207:
                    __break(1u);
LABEL_208:
                    __break(1u);
LABEL_209:
                    __break(1u);
LABEL_210:
                    __break(1u);
LABEL_211:
                    __break(1u);
LABEL_212:
                    __break(1u);
LABEL_213:
                    __break(1u);
LABEL_214:
                    __break(1u);
LABEL_215:
                    __break(1u);
LABEL_216:
                    __break(1u);
LABEL_217:
                    __break(1u);
LABEL_218:
                    __break(1u);
LABEL_219:
                    __break(1u);
LABEL_220:
                    __break(1u);
LABEL_221:
                    __break(1u);
                    goto LABEL_222;
                  }
                  if (!*v319) {
                    goto LABEL_225;
                  }
                  uint64_t v258 = v53;
                  v259 = &v216[16 * v257];
                  uint64_t v260 = *(void *)v259;
                  v261 = &v216[16 * v218];
                  uint64_t v262 = *((void *)v261 + 1);
                  uint64_t v263 = v299;
                  specialized _merge<A>(low:mid:high:buffer:by:)(*v319 + *(void *)(v291 + 72) * *(void *)v259, *v319 + *(void *)(v291 + 72) * *(void *)v261, *v319 + *(void *)(v291 + 72) * v262, v290);
                  uint64_t v299 = v263;
                  if (v263) {
                    goto LABEL_195;
                  }
                  if (v262 < v260) {
                    goto LABEL_199;
                  }
                  v264 = v293;
                  if (v218 > *((void *)v293 + 2)) {
                    goto LABEL_200;
                  }
                  *(void *)v259 = v260;
                  *(void *)&v216[16 * v257 + 8] = v262;
                  unint64_t v265 = *((void *)v264 + 2);
                  if (v218 >= v265) {
                    goto LABEL_201;
                  }
                  v266 = v264;
                  unint64_t v214 = v265 - 1;
                  memmove(&v216[16 * v218], v261 + 16, 16 * (v265 - 1 - v218));
                  *((void *)v266 + 2) = v265 - 1;
                  BOOL v246 = v265 > 2;
                  uint64_t v19 = v305;
                  uint64_t v28 = v304;
                  uint64_t v46 = v292;
                  uint64_t v55 = (uint64_t)v289;
                  uint64_t v53 = v258;
                  if (!v246) {
                    goto LABEL_174;
                  }
                }
              }
              unint64_t v214 = 1;
              uint64_t v53 = v211;
              uint64_t v19 = v210;
LABEL_174:
              uint64_t v54 = v319[1];
              unint64_t v31 = v316;
              if (v51 >= v54) {
                goto LABEL_180;
              }
              break;
            case 6u:
              goto LABEL_13;
            default:
              uint64_t v68 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v286, v68);
LABEL_13:
              uint64_t v69 = v287;
              _s15ConversationKit11ParticipantVWOcTm_11(v300, v287, (void (*)(void))type metadata accessor for Participant);
              _s15ConversationKit11ParticipantVWOcTm_11(v69, v284, (void (*)(void))type metadata accessor for Participant.State);
              switch(swift_getEnumCaseMultiPayload())
              {
                case 4u:
                  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                  uint64_t v123 = v284;
                  uint64_t v124 = v284 + *(int *)(v122 + 48);
                  outlined consume of Participant.CopresenceInfo?(*(void *)(v284 + *(int *)(v122 + 64)), *(void *)(v284 + *(int *)(v122 + 64) + 8));
                  outlined destroy of Participant.MediaInfo(v124);
                  uint64_t v125 = type metadata accessor for Date();
                  (*(void (**)(uint64_t, uint64_t))(*(void *)(v125 - 8) + 8))(v123, v125);
                  _s15ConversationKit11ParticipantV5StateOWOhTm_0(v287, (void (*)(void))type metadata accessor for Participant);
                  int v111 = 0;
                  break;
                case 6u:
                  goto LABEL_15;
                default:
                  uint64_t v70 = type metadata accessor for Date();
                  (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(v284, v70);
                  goto LABEL_15;
              }
              goto LABEL_40;
          }
          break;
        }
      }
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v46, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v61, (void (*)(void))type metadata accessor for Participant);
    }
LABEL_195:
    swift_bridgeObjectRelease();
    if (v278 < -1) {
      goto LABEL_220;
    }
LABEL_196:
    *(void *)(v277 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  if (v48 < 0) {
    goto LABEL_218;
  }
  if (v48) {
    return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v48, 1, v319);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v118 = a4;
  uint64_t v99 = a1;
  uint64_t v6 = type metadata accessor for Participant.State(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v110 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v112 = (uint64_t)&v97 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  long long v100 = (char *)&v97 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v97 - v13;
  uint64_t v122 = type metadata accessor for Participant(0);
  uint64_t v15 = MEMORY[0x1F4188790](v122);
  uint64_t v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v111 = (uint64_t)&v97 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v114 = (uint64_t)&v97 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v97 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v97 - v26;
  uint64_t result = MEMORY[0x1F4188790](v25);
  uint64_t v126 = (uint64_t)&v97 - v30;
  uint64_t v109 = a3;
  uint64_t v98 = a2;
  if (a3 == a2) {
    return result;
  }
  uint64_t v31 = *(void *)(v29 + 72);
  uint64_t v121 = v31 * (v109 - 1);
  uint64_t v108 = v31;
  uint64_t v120 = v31 * v109;
  uint64_t v105 = v6;
  uint64_t v106 = v14;
  uint64_t v107 = v17;
  objc_super v104 = v24;
  uint64_t v115 = v27;
LABEL_3:
  uint64_t v32 = 0;
  uint64_t v119 = v99;
  while (2)
  {
    uint64_t v33 = *v118;
    uint64_t v117 = v120 + v32;
    uint64_t v34 = v126;
    _s15ConversationKit11ParticipantVWOcTm_11(v120 + v32 + v33, v126, (void (*)(void))type metadata accessor for Participant);
    uint64_t v116 = v121 + v32;
    _s15ConversationKit11ParticipantVWOcTm_11(v121 + v32 + v33, (uint64_t)v27, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOcTm_11(v34, (uint64_t)v14, (void (*)(void))type metadata accessor for Participant.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v82 = (uint64_t)&v14[*(int *)(v81 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v14[*(int *)(v81 + 64)], *(void *)&v14[*(int *)(v81 + 64) + 8]);
        outlined destroy of Participant.MediaInfo(v82);
        uint64_t v83 = type metadata accessor for Date();
        double v84 = *(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8);
        v84(v14, v83);
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v27, (uint64_t)v24, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v24, (uint64_t)v100, (void (*)(void))type metadata accessor for Participant.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            uint64_t v90 = (uint64_t)v100;
            uint64_t v91 = (uint64_t)&v100[*(int *)(v89 + 48)];
            outlined consume of Participant.CopresenceInfo?(*(void *)&v100[*(int *)(v89 + 64)], *(void *)&v100[*(int *)(v89 + 64) + 8]);
            outlined destroy of Participant.MediaInfo(v91);
            uint64_t v92 = v90;
            uint64_t v17 = v107;
            v84((char *)v92, v83);
            uint64_t v27 = v115;
            goto LABEL_7;
          case 6u:
            goto LABEL_40;
          default:
            v84(v100, v83);
LABEL_40:
            _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v24, (void (*)(void))type metadata accessor for Participant);
            uint64_t v27 = v115;
            _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v115, (void (*)(void))type metadata accessor for Participant);
            _s15ConversationKit11ParticipantV5StateOWOhTm_0(v126, (void (*)(void))type metadata accessor for Participant);
            break;
        }
        goto LABEL_35;
      case 6u:
        goto LABEL_6;
      default:
        uint64_t v35 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v14, v35);
LABEL_6:
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v27, (uint64_t)v24, (void (*)(void))type metadata accessor for Participant);
        break;
    }
LABEL_7:
    _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v24, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOcTm_11(v126, v112, (void (*)(void))type metadata accessor for Participant.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v86 = v112;
        uint64_t v87 = v112 + *(int *)(v85 + 48);
        outlined consume of Participant.CopresenceInfo?(*(void *)(v112 + *(int *)(v85 + 64)), *(void *)(v112 + *(int *)(v85 + 64) + 8));
        outlined destroy of Participant.MediaInfo(v87);
        uint64_t v88 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8))(v86, v88);
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v27, v114, (void (*)(void))type metadata accessor for Participant);
LABEL_11:
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v114, (void (*)(void))type metadata accessor for Participant);
        uint64_t v39 = *(void **)(v126 + *(int *)(v122 + 28));
        if (!v39) {
          goto LABEL_19;
        }
        id v40 = v39;
        uint64_t v41 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v40);
        if (!v42)
        {

LABEL_19:
          uint64_t v57 = v111;
          _s15ConversationKit11ParticipantVWOcTm_11(v126, v111, (void (*)(void))type metadata accessor for Participant);
          uint64_t v58 = v122;
          swift_retain();
          ParticipantContactDetailsCache.contactDetails(for:)();
          uint64_t v113 = v124;
          uint64_t v44 = v125;
          id v59 = v123;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v57, (void (*)(void))type metadata accessor for Participant);
          swift_bridgeObjectRelease();
          uint64_t v56 = (uint64_t)v115;
          swift_bridgeObjectRelease();

          uint64_t v55 = *(int *)(v58 + 28);
          goto LABEL_20;
        }
        uint64_t v43 = v41;
        uint64_t v44 = v42;
        if ((objc_msgSend(v40, sel_shouldHideContact) & 1) == 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
        uint64_t v113 = v43;
        uint64_t v45 = type metadata accessor for PersonNameComponents();
        id v103 = &v97;
        uint64_t v46 = *(void *)(v45 - 8);
        MEMORY[0x1F4188790](v45);
        Swift::Int v48 = (char *)&v97 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        swift_bridgeObjectRetain();
        PersonNameComponents.init()();
        PersonNameComponents.givenName.setter();
        PersonNameComponents.familyName.setter();
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v49 = (id)static NSPersonNameComponentsFormatter.initials;
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v51 = objc_msgSend(v49, sel_stringFromPersonNameComponents_, isa);

        Swift::Int v52 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v54 = v53;

        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
        id v123 = v52;
        uint64_t v124 = v54;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = *(int *)(v122 + 28);
        uint64_t v56 = (uint64_t)v115;
LABEL_20:
        uint64_t v60 = *(void **)(v56 + v55);
        if (!v60) {
          goto LABEL_29;
        }
        id v61 = v60;
        uint64_t v62 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v61);
        if (!v63)
        {

          goto LABEL_29;
        }
        uint64_t v64 = v62;
        uint64_t v65 = v63;
        if ((objc_msgSend(v61, sel_shouldHideContact) & 1) == 0)
        {

          swift_bridgeObjectRelease();
LABEL_29:
          uint64_t v75 = v111;
          _s15ConversationKit11ParticipantVWOcTm_11(v56, v111, (void (*)(void))type metadata accessor for Participant);
          swift_retain();
          ParticipantContactDetailsCache.contactDetails(for:)();
          uint64_t v76 = v124;
          uint64_t v65 = v125;
          id v77 = v123;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v75, (void (*)(void))type metadata accessor for Participant);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v76 == v113)
          {
            uint64_t v24 = v104;
            uint64_t v27 = v115;
            goto LABEL_31;
          }
          uint64_t v24 = v104;
          uint64_t v27 = v115;
LABEL_34:
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v27, (void (*)(void))type metadata accessor for Participant);
          uint64_t result = _s15ConversationKit11ParticipantV5StateOWOhTm_0(v126, (void (*)(void))type metadata accessor for Participant);
          uint64_t v14 = v106;
          uint64_t v17 = v107;
          if ((v78 & 1) == 0) {
            goto LABEL_46;
          }
LABEL_35:
          uint64_t v79 = *v118;
          if (!*v118)
          {
            __break(1u);
            JUMPOUT(0x1C339CEECLL);
          }
          uint64_t v80 = v79 + v121 + v32;
          _s15ConversationKit11ParticipantVWObTm_4(v79 + v120 + v32, (uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v17, v80, (void (*)(void))type metadata accessor for Participant);
          v32 -= v108;
          if (v109 == ++v119) {
            goto LABEL_46;
          }
          continue;
        }
        uint64_t v66 = type metadata accessor for PersonNameComponents();
        id v103 = &v97;
        uint64_t v102 = v66;
        uint64_t v101 = *(void *)(v66 - 8);
        MEMORY[0x1F4188790](v66);
        uint64_t v68 = (char *)&v97 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
        swift_bridgeObjectRetain();
        PersonNameComponents.init()();
        PersonNameComponents.givenName.setter();
        PersonNameComponents.familyName.setter();
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v69 = (id)static NSPersonNameComponentsFormatter.initials;
        Class v70 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v71 = objc_msgSend(v69, sel_stringFromPersonNameComponents_, v70);

        id v72 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v74 = v73;

        (*(void (**)(char *, uint64_t))(v101 + 8))(v68, v102);
        id v123 = v72;
        uint64_t v124 = v74;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v104;
        uint64_t v27 = v115;
        if (v64 != v113) {
          goto LABEL_34;
        }
LABEL_31:
        if (v65 != v44) {
          goto LABEL_34;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v106;
        uint64_t v17 = v107;
LABEL_45:
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v27, (void (*)(void))type metadata accessor for Participant);
        uint64_t result = _s15ConversationKit11ParticipantV5StateOWOhTm_0(v126, (void (*)(void))type metadata accessor for Participant);
LABEL_46:
        v121 += v108;
        v120 += v108;
        if (++v109 != v98) {
          goto LABEL_3;
        }
        return result;
      case 6u:
        goto LABEL_9;
      default:
        uint64_t v36 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v112, v36);
LABEL_9:
        uint64_t v37 = v114;
        _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v27, v114, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOcTm_11(v37, v110, (void (*)(void))type metadata accessor for Participant.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            uint64_t v94 = v110;
            uint64_t v95 = v110 + *(int *)(v93 + 48);
            outlined consume of Participant.CopresenceInfo?(*(void *)(v110 + *(int *)(v93 + 64)), *(void *)(v110 + *(int *)(v93 + 64) + 8));
            outlined destroy of Participant.MediaInfo(v95);
            uint64_t v96 = type metadata accessor for Date();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 8))(v94, v96);
            _s15ConversationKit11ParticipantV5StateOWOhTm_0(v114, (void (*)(void))type metadata accessor for Participant);
            goto LABEL_45;
          case 6u:
            goto LABEL_11;
          default:
            uint64_t v38 = type metadata accessor for Date();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v110, v38);
            goto LABEL_11;
        }
    }
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unsigned char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  void v92[27];
  unsigned char v93[336];
  void v94[28];
  uint64_t v95;

  uint64_t v87 = a4;
  id v69 = a1;
  uint64_t v6 = type metadata accessor for Participant.State(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  id v72 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v75 = (char *)&v67 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v80 = (uint64_t)&v67 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v74 = (uint64_t)&v67 - v13;
  Class v70 = type metadata accessor for Participant(0);
  uint64_t v14 = MEMORY[0x1F4188790](v70);
  uint64_t v85 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v83 = (char *)&v67 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  double v84 = (uint64_t)&v67 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v67 - v21;
  uint64_t result = MEMORY[0x1F4188790](v20);
  uint64_t v95 = (uint64_t)&v67 - v25;
  uint64_t v68 = a2;
  char v78 = a3;
  if (a3 == a2) {
    return result;
  }
  uint64_t v26 = *(void *)(v24 + 72);
  uint64_t v73 = &v94[4];
  uint64_t v81 = &v93[96];
  uint64_t v82 = v6;
  id v71 = &v92[4];
  uint64_t v91 = v26 * (v78 - 1);
  uint64_t v76 = v26;
  uint64_t v27 = v26 * v78;
  uint64_t v79 = v22;
  while (2)
  {
    uint64_t v28 = 0;
    uint64_t v88 = v69;
    id v77 = v27;
    do
    {
      uint64_t v29 = *v87;
      uint64_t v30 = v27 + v28 + *v87;
      uint64_t v31 = v95;
      _s15ConversationKit11ParticipantVWOcTm_11(v30, v95, (void (*)(void))type metadata accessor for Participant);
      uint64_t v90 = v28;
      uint64_t v32 = v91 + v28;
      _s15ConversationKit11ParticipantVWOcTm_11(v32 + v29, (uint64_t)v22, (void (*)(void))type metadata accessor for Participant);
      uint64_t v33 = v74;
      _s15ConversationKit11ParticipantVWOcTm_11(v31, v74, (void (*)(void))type metadata accessor for Participant.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v86 = v32;
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v36 = (const void *)(v33 + *(int *)(v35 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v33 + *(int *)(v35 + 64)), *(void *)(v33 + *(int *)(v35 + 64) + 8));
        memcpy(v93, v36, sizeof(v93));
        uint64_t v37 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v33, v37);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v81, (uint64_t)v94);
        outlined destroy of Participant.MediaInfo((uint64_t)v93);
        uint64_t v38 = (uint64_t)v83;
        if (v94[3] != 1)
        {
          memcpy(v93, v94, 0xD1uLL);
          uint64_t v39 = v93[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v93);
          uint64_t v38 = (uint64_t)v83;
          goto LABEL_9;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v33, (void (*)(void))type metadata accessor for Participant.State);
        memset(v94, 0, 24);
        v94[3] = 1;
        bzero(v73, 0xB1uLL);
        uint64_t v38 = (uint64_t)v83;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      uint64_t v39 = 2;
LABEL_9:
      id v40 = v84;
      _s15ConversationKit11ParticipantVWOcTm_11(v95, v84, (void (*)(void))type metadata accessor for Participant);
      uint64_t v41 = (uint64_t)v75;
      if (v39 == 2)
      {
        uint64_t v42 = 0;
        uint64_t v43 = v40;
        uint64_t v44 = (uint64_t)v79;
        goto LABEL_17;
      }
      uint64_t v45 = v80;
      _s15ConversationKit11ParticipantVWOcTm_11(v40, v80, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v45, (void (*)(void))type metadata accessor for Participant.State);
        memset(v92, 0, 24);
        v92[3] = 1;
        bzero(v71, 0xB1uLL);
        uint64_t v44 = (uint64_t)v79;
LABEL_15:
        outlined destroy of SystemUpdateNotice?((uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
        uint64_t v42 = 0;
        goto LABEL_16;
      }
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v47 = (const void *)(v80 + *(int *)(v46 + 48));
      outlined consume of Participant.CopresenceInfo?(*(void *)(v80 + *(int *)(v46 + 64)), *(void *)(v80 + *(int *)(v46 + 64) + 8));
      memcpy(v93, v47, sizeof(v93));
      Swift::Int v48 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v80, v48);
      outlined init with copy of Participant.ScreenInfo?((uint64_t)v81, (uint64_t)v92);
      outlined destroy of Participant.MediaInfo((uint64_t)v93);
      uint64_t v44 = (uint64_t)v79;
      if (v92[3] == 1) {
        goto LABEL_15;
      }
      memcpy(v94, v92, 0xD1uLL);
      uint64_t v42 = LOBYTE(v94[5]);
      outlined destroy of Participant.ScreenInfo((uint64_t)v94);
LABEL_16:
      uint64_t v43 = v84;
LABEL_17:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v43, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11(v44, v41, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        id v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        unint64_t v50 = (const void *)(v41 + *(int *)(v49 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v41 + *(int *)(v49 + 64)), *(void *)(v41 + *(int *)(v49 + 64) + 8));
        memcpy(v93, v50, sizeof(v93));
        id v51 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v41, v51);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v81, (uint64_t)v94);
        outlined destroy of Participant.MediaInfo((uint64_t)v93);
        if (v94[3] != 1)
        {
          memcpy(v93, v94, 0xD1uLL);
          Swift::Int v52 = v93[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v93);
          uint64_t v38 = (uint64_t)v83;
          uint64_t v44 = (uint64_t)v79;
          goto LABEL_22;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v41, (void (*)(void))type metadata accessor for Participant.State);
        memset(v94, 0, 24);
        v94[3] = 1;
        bzero(v73, 0xB1uLL);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      Swift::Int v52 = 2;
LABEL_22:
      _s15ConversationKit11ParticipantVWOcTm_11(v44, v38, (void (*)(void))type metadata accessor for Participant);
      uint64_t v89 = v42;
      if (v52 == 2) {
        goto LABEL_28;
      }
      uint64_t v53 = v72;
      _s15ConversationKit11ParticipantVWOcTm_11(v38, v72, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v53, (void (*)(void))type metadata accessor for Participant.State);
        memset(v92, 0, 24);
        v92[3] = 1;
        bzero(v71, 0xB1uLL);
LABEL_27:
        outlined destroy of SystemUpdateNotice?((uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
LABEL_28:
        uint64_t v57 = 0;
        goto LABEL_29;
      }
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v55 = (const void *)(v53 + *(int *)(v54 + 48));
      outlined consume of Participant.CopresenceInfo?(*(void *)(v53 + *(int *)(v54 + 64)), *(void *)(v53 + *(int *)(v54 + 64) + 8));
      memcpy(v93, v55, sizeof(v93));
      uint64_t v56 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v53, v56);
      outlined init with copy of Participant.ScreenInfo?((uint64_t)v81, (uint64_t)v92);
      outlined destroy of Participant.MediaInfo((uint64_t)v93);
      if (v92[3] == 1) {
        goto LABEL_27;
      }
      memcpy(v94, v92, 0xD1uLL);
      uint64_t v57 = LOBYTE(v94[5]);
      outlined destroy of Participant.ScreenInfo((uint64_t)v94);
LABEL_29:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v38, (void (*)(void))type metadata accessor for Participant);
      uint64_t v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v57);
      id v59 = objc_msgSend(v58, sel_integerValue);

      uint64_t v60 = objc_allocWithZone(MEMORY[0x1E4F28EC8]);
      id v61 = objc_msgSend(v60, sel_initWithBool_, v89);
      uint64_t v62 = objc_msgSend(v61, sel_integerValue);

      uint64_t v22 = (char *)v44;
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v44, (void (*)(void))type metadata accessor for Participant);
      uint64_t result = _s15ConversationKit11ParticipantV5StateOWOhTm_0(v95, (void (*)(void))type metadata accessor for Participant);
      uint64_t v63 = (uint64_t)v59 < (uint64_t)v62;
      uint64_t v27 = v77;
      uint64_t v64 = v90;
      if (!v63) {
        break;
      }
      uint64_t v65 = *v87;
      if (!*v87)
      {
        __break(1u);
        return result;
      }
      uint64_t v66 = v65 + v91 + v90;
      _s15ConversationKit11ParticipantVWObTm_4(v65 + v77 + v90, v85, (void (*)(void))type metadata accessor for Participant);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = _s15ConversationKit11ParticipantVWObTm_4(v85, v66, (void (*)(void))type metadata accessor for Participant);
      uint64_t v28 = v64 - v76;
      ++v88;
    }
    while (v78 != v88);
    v91 += v76;
    v27 += v76;
    if (++v78 != v68) {
      continue;
    }
    return result;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned char *v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned char *v47;
  uint64_t v48;
  int EnumTagSinglePayload;
  uint64_t v50;
  uint64_t v51;
  unsigned char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  unsigned char *v56;
  unsigned char *v57;
  unsigned char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned char *v62;
  id v63;
  Class isa;
  id v65;
  void *v66;
  unsigned char *v67;
  unsigned char *v68;
  id v69;
  unsigned char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned char *v75;
  uint64_t (*v76)(unsigned char *, unsigned char *, uint64_t);
  uint64_t v77;
  char v78;
  void (*v79)(unsigned char *, uint64_t);
  unsigned char *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  unsigned char *v87;
  unsigned char *v88;
  unsigned char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned char *v93;
  id v94;
  Class v95;
  id v96;
  void *v97;
  unsigned char *v98;
  unsigned char *v99;
  id v100;
  void *v101;
  unsigned char *v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned char v109[16];
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  unsigned char *v113;
  unsigned char *v114;
  unsigned char *v115;
  uint64_t v116;
  unsigned char *v117;
  unsigned char *v118;
  unsigned char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned char *v123;
  unsigned char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned char *v130;
  unsigned char *v131;
  unsigned char *v132;
  uint64_t v133;
  unsigned char *v134;
  unsigned char *v135;
  id v136;
  unsigned char *v137;
  unsigned char *v138;
  uint64_t v139;

  uint64_t v127 = a4;
  uint64_t v111 = a1;
  uint64_t v6 = type metadata accessor for Participant.State(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v109[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v109[-v10];
  uint64_t v121 = type metadata accessor for Participant(0);
  uint64_t v12 = MEMORY[0x1F4188790](v121);
  uint64_t v14 = &v109[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v117 = &v109[-v16];
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = &v109[-v18];
  uint64_t result = MEMORY[0x1F4188790](v17);
  uint64_t v23 = &v109[-v22];
  uint64_t v122 = a3;
  uint64_t v110 = a2;
  if (a3 == a2) {
    return result;
  }
  uint64_t v24 = *(void *)(v21 + 72);
  uint64_t v139 = v24 * (v122 - 1);
  uint64_t v120 = v24;
  uint64_t v133 = v24 * v122;
  uint64_t v116 = v6;
  uint64_t v115 = v9;
  uint64_t v119 = v11;
  uint64_t v114 = v14;
  uint64_t v124 = v19;
  id v123 = &v109[-v22];
  while (2)
  {
    uint64_t v25 = 0;
    Swift::Int v129 = v111;
    while (1)
    {
      uint64_t v26 = *v127;
      uint64_t v126 = v133 + v25;
      _s15ConversationKit11ParticipantVWOcTm_17(v133 + v25 + v26, (uint64_t)v23);
      uint64_t v125 = v139 + v25;
      _s15ConversationKit11ParticipantVWOcTm_17(v139 + v25 + v26, (uint64_t)v19);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v132 = v109;
      uint64_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
      MEMORY[0x1F4188790](v27 - 8);
      uint64_t v29 = &v109[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
      _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v23, (uint64_t)v11);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v128 = v25;
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v32 = (uint64_t)&v11[*(int *)(v31 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v11[*(int *)(v31 + 64)], *(void *)&v11[*(int *)(v31 + 64) + 8]);
        uint64_t v33 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 32))(&v109[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)], v11, v33);
        outlined destroy of Participant.MediaInfo(v32);
        uint64_t v34 = &v109[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
        uint64_t v35 = 0;
        uint64_t v36 = v33;
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v11, (void (*)(void))type metadata accessor for Participant.State);
        uint64_t v36 = type metadata accessor for Date();
        uint64_t v34 = &v109[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
        uint64_t v35 = 1;
      }
      uint64_t v37 = __swift_storeEnumTagSinglePayload((uint64_t)v34, v35, 1, v36);
      uint64_t v131 = v109;
      MEMORY[0x1F4188790](v37);
      uint64_t v38 = &v109[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
      _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v19, (uint64_t)v9);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        id v40 = (uint64_t)&v9[*(int *)(v39 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v9[*(int *)(v39 + 64)], *(void *)&v9[*(int *)(v39 + 64) + 8]);
        uint64_t v41 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v41 - 8) + 32))(v38, v9, v41);
        outlined destroy of Participant.MediaInfo(v40);
        uint64_t v42 = (uint64_t)v38;
        uint64_t v43 = 0;
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v9, (void (*)(void))type metadata accessor for Participant.State);
        uint64_t v41 = type metadata accessor for Date();
        uint64_t v42 = (uint64_t)v38;
        uint64_t v43 = 1;
      }
      __swift_storeEnumTagSinglePayload(v42, v43, 1, v41);
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
      uint64_t v130 = v109;
      uint64_t v45 = MEMORY[0x1F4188790](v44 - 8);
      uint64_t v47 = &v109[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
      Swift::Int v48 = (uint64_t)&v47[*(int *)(v45 + 56)];
      outlined init with take of Date?((uint64_t)v29, (uint64_t)v47);
      outlined init with take of Date?((uint64_t)v38, v48);
      type metadata accessor for Date();
      uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v47, 1, v41);
      unint64_t v50 = __swift_getEnumTagSinglePayload(v48, 1, v41);
      if (EnumTagSinglePayload == 1) {
        break;
      }
      id v71 = *(void *)(v41 - 8);
      id v72 = v71;
      if (v50 != 1)
      {
        uint64_t v118 = v109;
        uint64_t v74 = *(void *)(v71 + 64);
        MEMORY[0x1F4188790](v50);
        uint64_t v75 = &v109[-((v74 + 15) & 0xFFFFFFFFFFFFFFF0)];
        uint64_t v76 = *(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v72 + 32);
        id v77 = v76(v75, v47, v41);
        uint64_t v113 = v109;
        MEMORY[0x1F4188790](v77);
        uint64_t v9 = v115;
        v76(v75, (unsigned char *)v48, v41);
        char v78 = static Date.< infix(_:_:)();
        uint64_t v79 = *(void (**)(unsigned char *, uint64_t))(v72 + 8);
        v79(v75, v41);
        v79(v75, v41);
        uint64_t v14 = v114;
        uint64_t v11 = v119;
        uint64_t v23 = v123;
        goto LABEL_34;
      }
      (*(void (**)(unsigned char *, uint64_t))(v71 + 8))(v47, v41);
      uint64_t v19 = v124;
      _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v124, (void (*)(void))type metadata accessor for Participant);
      uint64_t v23 = v123;
      uint64_t result = _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v123, (void (*)(void))type metadata accessor for Participant);
      uint64_t v11 = v119;
      uint64_t v73 = v128;
LABEL_35:
      uint64_t v107 = *v127;
      if (!*v127)
      {
        __break(1u);
        return result;
      }
      uint64_t v108 = v107 + v139 + v73;
      outlined init with take of Participant(v107 + v133 + v73, (uint64_t)v14);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of Participant((uint64_t)v14, v108);
      uint64_t v25 = v73 - v120;
      if (v122 == ++v129) {
        goto LABEL_39;
      }
    }
    if (v50 == 1)
    {
      id v51 = v121;
      Swift::Int v52 = v123;
      uint64_t v53 = *(void **)&v123[*(int *)(v121 + 28)];
      if (v53)
      {
        uint64_t v54 = v53;
        uint64_t v55 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v54);
        if (v56)
        {
          uint64_t v57 = (unsigned char *)v55;
          uint64_t v58 = v56;
          if (objc_msgSend(v54, sel_shouldHideContact))
          {
            uint64_t v118 = v57;
            id v59 = type metadata accessor for PersonNameComponents();
            uint64_t v113 = v109;
            uint64_t v60 = *(void *)(v59 - 8);
            MEMORY[0x1F4188790](v59);
            uint64_t v62 = &v109[-((v61 + 15) & 0xFFFFFFFFFFFFFFF0)];
            swift_bridgeObjectRetain();
            PersonNameComponents.init()();
            PersonNameComponents.givenName.setter();
            PersonNameComponents.familyName.setter();
            if (one-time initialization token for initials != -1) {
              swift_once();
            }
            swift_beginAccess();
            uint64_t v63 = (id)static NSPersonNameComponentsFormatter.initials;
            Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
            uint64_t v65 = objc_msgSend(v63, sel_stringFromPersonNameComponents_, isa);

            uint64_t v66 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v68 = v67;

            (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v62, v59);
            v136 = v66;
            v137 = v68;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol.localizedUppercase.getter();

            swift_bridgeObjectRelease();
            id v69 = 0;
            id v51 = v121;
            Class v70 = v118;
LABEL_24:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            uint64_t v134 = v70;
            v135 = v58;
            uint64_t v118 = v58;
            uint64_t v83 = (uint64_t)v124;
            double v84 = *(void **)&v124[*(int *)(v51 + 28)];
            if (v84)
            {
              uint64_t v85 = v84;
              uint64_t v86 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v85);
              if (v87)
              {
                uint64_t v88 = (unsigned char *)v86;
                uint64_t v89 = v87;
                if (objc_msgSend(v85, sel_shouldHideContact))
                {
                  uint64_t v113 = v88;
                  uint64_t v90 = type metadata accessor for PersonNameComponents();
                  uint64_t v112 = v109;
                  uint64_t v91 = *(void *)(v90 - 8);
                  MEMORY[0x1F4188790](v90);
                  uint64_t v93 = &v109[-((v92 + 15) & 0xFFFFFFFFFFFFFFF0)];
                  swift_bridgeObjectRetain();
                  PersonNameComponents.init()();
                  PersonNameComponents.givenName.setter();
                  PersonNameComponents.familyName.setter();
                  if (one-time initialization token for initials != -1) {
                    swift_once();
                  }
                  swift_beginAccess();
                  uint64_t v94 = (id)static NSPersonNameComponentsFormatter.initials;
                  uint64_t v95 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                  uint64_t v96 = objc_msgSend(v94, sel_stringFromPersonNameComponents_, v95);

                  uint64_t v97 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v99 = v98;

                  (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v93, v90);
                  v136 = v97;
                  v137 = v99;
                  lazy protocol witness table accessor for type String and conformance String();
                  StringProtocol.localizedUppercase.getter();

                  swift_bridgeObjectRelease();
                  long long v100 = 0;
                  uint64_t v14 = v114;
                  uint64_t v23 = v123;
                  uint64_t v101 = v113;
                  goto LABEL_33;
                }

                swift_bridgeObjectRelease();
              }
              else
              {
              }
            }
            uint64_t v102 = v117;
            _s15ConversationKit11ParticipantVWOcTm_17(v83, (uint64_t)v117);
            swift_retain();
            ParticipantContactDetailsCache.contactDetails(for:)();
            long long v100 = v136;
            id v103 = v137;
            uint64_t v89 = v138;
            objc_super v104 = v136;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            uint64_t v101 = v103;
            swift_release();
            uint64_t v105 = (uint64_t)v102;
            uint64_t v23 = v123;
            _s15ConversationKit11ParticipantVWOhTm_11(v105, (void (*)(void))type metadata accessor for Participant);
            uint64_t v14 = v114;
LABEL_33:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v136 = v101;
            v137 = v89;
            lazy protocol witness table accessor for type String and conformance String();
            uint64_t v106 = StringProtocol.localizedCompare<A>(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v78 = v106 == 1;
            uint64_t v9 = v115;
            uint64_t v11 = v119;
LABEL_34:
            uint64_t v73 = v128;
            uint64_t v19 = v124;
            _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v124, (void (*)(void))type metadata accessor for Participant);
            uint64_t result = _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v23, (void (*)(void))type metadata accessor for Participant);
            if ((v78 & 1) == 0) {
              goto LABEL_39;
            }
            goto LABEL_35;
          }

          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      uint64_t v80 = v117;
      _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v52, (uint64_t)v117);
      swift_retain();
      ParticipantContactDetailsCache.contactDetails(for:)();
      id v69 = v136;
      uint64_t v118 = v137;
      uint64_t v58 = v138;
      uint64_t v81 = v136;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      uint64_t v82 = (uint64_t)v80;
      Class v70 = v118;
      _s15ConversationKit11ParticipantVWOhTm_11(v82, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_24;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v48, (uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v19 = v124;
    _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v124, (void (*)(void))type metadata accessor for Participant);
    uint64_t v23 = v123;
    uint64_t result = _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v123, (void (*)(void))type metadata accessor for Participant);
LABEL_39:
    v139 += v120;
    v133 += v120;
    if (++v122 != v110) {
      continue;
    }
    return result;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int EnumTagSinglePayload;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;

  uint64_t v62 = a4;
  id v49 = a1;
  uint64_t v66 = type metadata accessor for Participant.State(0);
  uint64_t v6 = MEMORY[0x1F4188790](v66);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v47 - v9;
  unint64_t v50 = type metadata accessor for Participant(0);
  uint64_t v11 = MEMORY[0x1F4188790](v50);
  uint64_t v58 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  id v69 = (uint64_t)&v47 - v14;
  uint64_t result = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v47 - v17;
  uint64_t v57 = a3;
  Swift::Int v48 = a2;
  if (a3 != a2)
  {
    uint64_t v19 = *(void *)(v16 + 72);
    uint64_t v20 = v19 * (v57 - 1);
    uint64_t v53 = (char *)&v47 - v17;
    uint64_t v54 = v19;
    uint64_t v21 = v19 * v57;
    id v51 = v8;
    Swift::Int v52 = v10;
    while (2)
    {
      uint64_t v22 = 0;
      uint64_t v64 = v49;
      uint64_t v55 = v21;
      uint64_t v56 = v20;
      while (1)
      {
        uint64_t v23 = *v62;
        uint64_t v24 = v21 + v22;
        _s15ConversationKit11ParticipantVWOcTm_19(v24 + *v62, (uint64_t)v18);
        id v61 = v20 + v22;
        _s15ConversationKit11ParticipantVWOcTm_19(v20 + v22 + v23, v69);
        uint64_t v25 = type metadata accessor for Date();
        uint64_t v67 = &v47;
        uint64_t v26 = *(void *)(v25 - 8);
        uint64_t v27 = *(void *)(v26 + 64);
        MEMORY[0x1F4188790](v25);
        uint64_t v68 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        Class v70 = &v47;
        uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 64);
        MEMORY[0x1F4188790](v28 - 8);
        _s15ConversationKit11ParticipantVWOcTm_19((uint64_t)v18, (uint64_t)v10);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
          _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v10, (void (*)(void))type metadata accessor for Participant.State);
          __swift_storeEnumTagSinglePayload((uint64_t)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v25);
LABEL_13:
          outlined destroy of SystemUpdateNotice?((uint64_t)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v10 = v52;
          goto LABEL_16;
        }
        id v59 = v24;
        uint64_t v60 = v22;
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v31 = v26;
        uint64_t v32 = (uint64_t)&v10[*(int *)(v30 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v10[*(int *)(v30 + 64)], *(void *)&v10[*(int *)(v30 + 64) + 8]);
        uint64_t v65 = v31;
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        v33((char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v25);
        outlined destroy of Participant.MediaInfo(v32);
        __swift_storeEnumTagSinglePayload((uint64_t)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v25);
        if (__swift_getEnumTagSinglePayload((uint64_t)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v25) == 1)goto LABEL_13; {
        uint64_t v34 = ((uint64_t (*)(char *, char *, uint64_t))v33)(v68, (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
        }
        Class v70 = &v47;
        uint64_t v35 = MEMORY[0x1F4188790](v34);
        uint64_t v36 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v63 = &v47;
        MEMORY[0x1F4188790](v35);
        uint64_t v37 = (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v38 = (uint64_t)v51;
        _s15ConversationKit11ParticipantVWOcTm_19(v69, (uint64_t)v51);
        if (swift_getEnumCaseMultiPayload() != 4) {
          break;
        }
        uint64_t v39 = v38 + *(int *)(v30 + 48);
        outlined consume of Participant.CopresenceInfo?(*(void *)(v38 + *(int *)(v30 + 64)), *(void *)(v38 + *(int *)(v30 + 64) + 8));
        v33(v37, (char *)v38, v25);
        outlined destroy of Participant.MediaInfo(v39);
        __swift_storeEnumTagSinglePayload((uint64_t)v37, 0, 1, v25);
        uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v25);
        uint64_t v10 = v52;
        if (EnumTagSinglePayload == 1) {
          goto LABEL_15;
        }
        v33(v36, v37, v25);
        uint64_t v41 = v68;
        uint64_t v42 = static Date.< infix(_:_:)();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v65 + 8);
        v43(v36, v25);
        v43(v41, v25);
        _s15ConversationKit11ParticipantVWOhTm_13(v69, (void (*)(void))type metadata accessor for Participant);
        uint64_t v18 = v53;
        uint64_t result = _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v53, (void (*)(void))type metadata accessor for Participant);
        uint64_t v21 = v55;
        uint64_t v20 = v56;
        uint64_t v44 = v60;
        if (v42)
        {
          uint64_t v45 = *v62;
          if (!*v62)
          {
            __break(1u);
            return result;
          }
          uint64_t v46 = v45 + v56 + v60;
          _s15ConversationKit11ParticipantVWObTm_6(v45 + v55 + v60, v58);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = _s15ConversationKit11ParticipantVWObTm_6(v58, v46);
          uint64_t v22 = v44 - v54;
          if (v57 != ++v64) {
            continue;
          }
        }
        goto LABEL_17;
      }
      _s15ConversationKit11ParticipantVWOhTm_13(v38, (void (*)(void))type metadata accessor for Participant.State);
      __swift_storeEnumTagSinglePayload((uint64_t)v37, 1, 1, v25);
      uint64_t v10 = v52;
LABEL_15:
      (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v25);
      outlined destroy of SystemUpdateNotice?((uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_16:
      _s15ConversationKit11ParticipantVWOhTm_13(v69, (void (*)(void))type metadata accessor for Participant);
      uint64_t v18 = v53;
      uint64_t result = _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v53, (void (*)(void))type metadata accessor for Participant);
      uint64_t v21 = v55;
      uint64_t v20 = v56;
LABEL_17:
      v20 += v54;
      v21 += v54;
      if (++v57 != v48) {
        continue;
      }
      break;
    }
  }
  return result;
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Participant.State(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v137 = (uint64_t)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v134 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v136 = (uint64_t)&v134 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v142 = (char *)&v134 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v140 = (unint64_t)&v134 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v145 = (char *)&v134 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v134 - v23;
  MEMORY[0x1F4188790](v22);
  unint64_t v144 = (unint64_t)&v134 - v25;
  uint64_t v147 = type metadata accessor for Participant(0);
  uint64_t v26 = MEMORY[0x1F4188790](v147);
  uint64_t v141 = (char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v143 = (char *)&v134 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v160 = (uint64_t)&v134 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v155 = (char *)&v134 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v149 = (uint64_t)&v134 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v146 = (char *)&v134 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v156 = (uint64_t)&v134 - v39;
  MEMORY[0x1F4188790](v38);
  unint64_t v154 = (unint64_t)&v134 - v40;
  uint64_t v42 = *(void *)(v41 + 72);
  if (!v42)
  {
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  int64_t v43 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v42 == -1) {
    goto LABEL_129;
  }
  int64_t v45 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v42 == -1) {
    goto LABEL_130;
  }
  uint64_t v139 = v24;
  uint64_t v47 = a4;
  uint64_t v48 = v43 / v42;
  uint64_t v49 = v45 / v42;
  uint64_t v150 = v8;
  uint64_t v148 = v42;
  if (v43 / v42 >= v45 / v42)
  {
    unint64_t v52 = v47;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v45 / v42, v47);
    unint64_t v53 = v52 + v49 * v42;
    if (v49 * v42 < 1 || a1 >= a2) {
      goto LABEL_73;
    }
    uint64_t v156 = -v42;
    uint64_t v139 = &v159[4];
    unint64_t v140 = v52;
    uint64_t v146 = &v158[96];
    v135 = &v157[4];
    unint64_t v153 = a1;
    uint64_t v138 = v13;
    while (1)
    {
      unint64_t v154 = a3;
      unint64_t v151 = v53;
      uint64_t v97 = v155;
      uint64_t v98 = v156;
      unint64_t v144 = v53 + v156;
      _s15ConversationKit11ParticipantVWOcTm_11(v53 + v156, (uint64_t)v155, (void (*)(void))type metadata accessor for Participant);
      uint64_t v99 = (char *)(a2 + v98);
      _s15ConversationKit11ParticipantVWOcTm_11(a2 + v98, v160, (void (*)(void))type metadata accessor for Participant);
      uint64_t v100 = (uint64_t)v97;
      uint64_t v101 = v142;
      _s15ConversationKit11ParticipantVWOcTm_11(v100, (uint64_t)v142, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        id v103 = &v101[*(int *)(v102 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v101[*(int *)(v102 + 64)], *(void *)&v101[*(int *)(v102 + 64) + 8]);
        memcpy(v158, v103, sizeof(v158));
        uint64_t v104 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v104 - 8) + 8))(v101, v104);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v146, (uint64_t)v159);
        outlined destroy of Participant.MediaInfo((uint64_t)v158);
        uint64_t v105 = (uint64_t)v143;
        if (v159[3] != 1)
        {
          memcpy(v158, v159, 0xD1uLL);
          char v106 = v158[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v158);
          uint64_t v105 = (uint64_t)v143;
          goto LABEL_83;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v101, (void (*)(void))type metadata accessor for Participant.State);
        memset(v159, 0, 24);
        v159[3] = 1;
        bzero(v139, 0xB1uLL);
        uint64_t v105 = (uint64_t)v143;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      char v106 = 2;
LABEL_83:
      _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v155, v105, (void (*)(void))type metadata accessor for Participant);
      if (v106 != 2)
      {
        uint64_t v107 = v136;
        _s15ConversationKit11ParticipantVWOcTm_11(v105, v136, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v109 = (const void *)(v107 + *(int *)(v108 + 48));
          outlined consume of Participant.CopresenceInfo?(*(void *)(v107 + *(int *)(v108 + 64)), *(void *)(v107 + *(int *)(v108 + 64) + 8));
          memcpy(v158, v109, sizeof(v158));
          uint64_t v110 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v107, v110);
          outlined init with copy of Participant.ScreenInfo?((uint64_t)v146, (uint64_t)v157);
          outlined destroy of Participant.MediaInfo((uint64_t)v158);
          if (v157[3] != 1)
          {
            memcpy(v159, v157, 0xD1uLL);
            LODWORD(v149) = LOBYTE(v159[5]);
            outlined destroy of Participant.ScreenInfo((uint64_t)v159);
            goto LABEL_90;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v107, (void (*)(void))type metadata accessor for Participant.State);
          memset(v157, 0, 24);
          v157[3] = 1;
          bzero(v135, 0xB1uLL);
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      }
      LODWORD(v149) = 0;
LABEL_90:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v105, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11(v160, (uint64_t)v13, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v112 = &v13[*(int *)(v111 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v13[*(int *)(v111 + 64)], *(void *)&v13[*(int *)(v111 + 64) + 8]);
        memcpy(v158, v112, sizeof(v158));
        uint64_t v113 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v113 - 8) + 8))(v13, v113);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v146, (uint64_t)v159);
        outlined destroy of Participant.MediaInfo((uint64_t)v158);
        uint64_t v114 = (uint64_t)v141;
        if (v159[3] != 1)
        {
          memcpy(v158, v159, 0xD1uLL);
          char v115 = v158[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v158);
          goto LABEL_95;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for Participant.State);
        memset(v159, 0, 24);
        v159[3] = 1;
        bzero(v139, 0xB1uLL);
        uint64_t v114 = (uint64_t)v141;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      char v115 = 2;
LABEL_95:
      _s15ConversationKit11ParticipantVWOcTm_11(v160, v114, (void (*)(void))type metadata accessor for Participant);
      uint64_t v145 = v99;
      if (v115 == 2)
      {
        unint64_t v116 = a2;
      }
      else
      {
        uint64_t v117 = v137;
        _s15ConversationKit11ParticipantVWOcTm_11(v114, v137, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v119 = (const void *)(v117 + *(int *)(v118 + 48));
          outlined consume of Participant.CopresenceInfo?(*(void *)(v117 + *(int *)(v118 + 64)), *(void *)(v117 + *(int *)(v118 + 64) + 8));
          memcpy(v158, v119, sizeof(v158));
          uint64_t v120 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v120 - 8) + 8))(v117, v120);
          outlined init with copy of Participant.ScreenInfo?((uint64_t)v146, (uint64_t)v157);
          outlined destroy of Participant.MediaInfo((uint64_t)v158);
          if (v157[3] != 1)
          {
            unint64_t v116 = a2;
            memcpy(v159, v157, 0xD1uLL);
            uint64_t v121 = LOBYTE(v159[5]);
            outlined destroy of Participant.ScreenInfo((uint64_t)v159);
            goto LABEL_103;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v117, (void (*)(void))type metadata accessor for Participant.State);
          memset(v157, 0, 24);
          v157[3] = 1;
          bzero(v135, 0xB1uLL);
        }
        unint64_t v116 = a2;
        outlined destroy of SystemUpdateNotice?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      }
      uint64_t v121 = 0;
LABEL_103:
      unint64_t v122 = v154;
      unint64_t v152 = v154 + v156;
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v114, (void (*)(void))type metadata accessor for Participant);
      id v123 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v121);
      id v124 = objc_msgSend(v123, sel_integerValue);

      id v125 = objc_allocWithZone(MEMORY[0x1E4F28EC8]);
      id v126 = objc_msgSend(v125, sel_initWithBool_, v149);
      id v127 = objc_msgSend(v126, sel_integerValue);

      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v160, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v155, (void (*)(void))type metadata accessor for Participant);
      if ((uint64_t)v124 < (uint64_t)v127)
      {
        a3 = v152;
        unint64_t v128 = v153;
        BOOL v129 = v122 < v116 || v152 >= v116;
        unint64_t v52 = v140;
        uint64_t v42 = v148;
        if (v129)
        {
          a2 = (unint64_t)v145;
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v53 = v151;
        }
        else
        {
          a2 = (unint64_t)v145;
          if (v122 != v116) {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v53 = v151;
        }
        goto LABEL_119;
      }
      a3 = v152;
      BOOL v130 = v122 < v151 || v152 >= v151;
      unint64_t v52 = v140;
      uint64_t v42 = v148;
      unint64_t v128 = v153;
      a2 = v116;
      if (v130)
      {
        uint64_t v131 = v144;
        swift_arrayInitWithTakeFrontToBack();
        unint64_t v53 = v131;
LABEL_119:
        uint64_t v13 = v138;
        goto LABEL_120;
      }
      uint64_t v13 = v138;
      if (v122 == v151)
      {
        unint64_t v53 = v144;
      }
      else
      {
        uint64_t v133 = v144;
        swift_arrayInitWithTakeBackToFront();
        unint64_t v53 = v133;
      }
LABEL_120:
      if (v53 <= v52 || a2 <= v128) {
        goto LABEL_73;
      }
    }
  }
  unint64_t v50 = v47;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v43 / v42, v47);
  uint64_t v51 = v48 * v42;
  unint64_t v52 = v50;
  unint64_t v53 = v50 + v51;
  if (v51 >= 1 && a2 < a3)
  {
    uint64_t v155 = &v158[96];
    uint64_t v142 = (char *)&v157[4];
    uint64_t v143 = (char *)&v159[4];
    unint64_t v151 = v50 + v51;
    unint64_t v152 = a3;
    uint64_t v55 = (uint64_t)v145;
    do
    {
      uint64_t v56 = v154;
      _s15ConversationKit11ParticipantVWOcTm_11(a2, v154, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11(v52, v156, (void (*)(void))type metadata accessor for Participant);
      uint64_t v57 = v56;
      uint64_t v58 = v144;
      _s15ConversationKit11ParticipantVWOcTm_11(v57, v144, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v60 = (const void *)(v58 + *(int *)(v59 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v58 + *(int *)(v59 + 64)), *(void *)(v58 + *(int *)(v59 + 64) + 8));
        memcpy(v158, v60, sizeof(v158));
        uint64_t v61 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v58, v61);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v155, (uint64_t)v159);
        outlined destroy of Participant.MediaInfo((uint64_t)v158);
        if (v159[3] != 1)
        {
          memcpy(v158, v159, 0xD1uLL);
          char v62 = v158[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v158);
          uint64_t v55 = (uint64_t)v145;
          goto LABEL_21;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v58, (void (*)(void))type metadata accessor for Participant.State);
        memset(v159, 0, 24);
        v159[3] = 1;
        bzero(v143, 0xB1uLL);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      char v62 = 2;
LABEL_21:
      uint64_t v63 = v146;
      _s15ConversationKit11ParticipantVWOcTm_11(v154, (uint64_t)v146, (void (*)(void))type metadata accessor for Participant);
      if (v62 == 2)
      {
        LODWORD(v160) = 0;
        goto LABEL_29;
      }
      uint64_t v64 = (uint64_t)v63;
      uint64_t v65 = (char *)v139;
      _s15ConversationKit11ParticipantVWOcTm_11(v64, (uint64_t)v139, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v65, (void (*)(void))type metadata accessor for Participant.State);
        memset(v157, 0, 24);
        v157[3] = 1;
        bzero(v142, 0xB1uLL);
LABEL_27:
        outlined destroy of SystemUpdateNotice?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
        LODWORD(v160) = 0;
        goto LABEL_28;
      }
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v67 = &v65[*(int *)(v66 + 48)];
      outlined consume of Participant.CopresenceInfo?(*(void *)&v65[*(int *)(v66 + 64)], *(void *)&v65[*(int *)(v66 + 64) + 8]);
      memcpy(v158, v67, sizeof(v158));
      uint64_t v68 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t))(*(void *)(v68 - 8) + 8))(v65, v68);
      outlined init with copy of Participant.ScreenInfo?((uint64_t)v155, (uint64_t)v157);
      outlined destroy of Participant.MediaInfo((uint64_t)v158);
      if (v157[3] == 1) {
        goto LABEL_27;
      }
      memcpy(v159, v157, 0xD1uLL);
      LODWORD(v160) = LOBYTE(v159[5]);
      outlined destroy of Participant.ScreenInfo((uint64_t)v159);
LABEL_28:
      uint64_t v63 = v146;
LABEL_29:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v63, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11(v156, v55, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        Class v70 = (const void *)(v55 + *(int *)(v69 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v55 + *(int *)(v69 + 64)), *(void *)(v55 + *(int *)(v69 + 64) + 8));
        memcpy(v158, v70, sizeof(v158));
        uint64_t v71 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v55, v71);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v155, (uint64_t)v159);
        outlined destroy of Participant.MediaInfo((uint64_t)v158);
        if (v159[3] != 1)
        {
          memcpy(v158, v159, 0xD1uLL);
          char v72 = v158[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v158);
          goto LABEL_34;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v55, (void (*)(void))type metadata accessor for Participant.State);
        memset(v159, 0, 24);
        v159[3] = 1;
        bzero(v143, 0xB1uLL);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      char v72 = 2;
LABEL_34:
      uint64_t v73 = v149;
      _s15ConversationKit11ParticipantVWOcTm_11(v156, v149, (void (*)(void))type metadata accessor for Participant);
      unint64_t v153 = a1;
      if (v72 == 2)
      {
        unint64_t v74 = v52;
        unint64_t v75 = a2;
      }
      else
      {
        uint64_t v76 = v140;
        _s15ConversationKit11ParticipantVWOcTm_11(v73, v140, (void (*)(void))type metadata accessor for Participant.State);
        unint64_t v75 = a2;
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v78 = v76;
          uint64_t v79 = (const void *)(v76 + *(int *)(v77 + 48));
          outlined consume of Participant.CopresenceInfo?(*(void *)(v78 + *(int *)(v77 + 64)), *(void *)(v78 + *(int *)(v77 + 64) + 8));
          memcpy(v158, v79, sizeof(v158));
          uint64_t v80 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v78, v80);
          outlined init with copy of Participant.ScreenInfo?((uint64_t)v155, (uint64_t)v157);
          outlined destroy of Participant.MediaInfo((uint64_t)v158);
          if (v157[3] != 1)
          {
            unint64_t v74 = v52;
            memcpy(v159, v157, 0xD1uLL);
            uint64_t v81 = LOBYTE(v159[5]);
            outlined destroy of Participant.ScreenInfo((uint64_t)v159);
            goto LABEL_42;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v76, (void (*)(void))type metadata accessor for Participant.State);
          memset(v157, 0, 24);
          v157[3] = 1;
          bzero(v142, 0xB1uLL);
        }
        unint64_t v74 = v52;
        outlined destroy of SystemUpdateNotice?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      }
      uint64_t v81 = 0;
LABEL_42:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v149, (void (*)(void))type metadata accessor for Participant);
      id v82 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v81);
      id v83 = objc_msgSend(v82, sel_integerValue);

      id v84 = objc_allocWithZone(MEMORY[0x1E4F28EC8]);
      id v85 = objc_msgSend(v84, sel_initWithBool_, v160);
      id v86 = objc_msgSend(v85, sel_integerValue);

      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v156, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v154, (void (*)(void))type metadata accessor for Participant);
      if ((uint64_t)v83 >= (uint64_t)v86)
      {
        unint64_t v90 = v74;
        uint64_t v42 = v148;
        unint64_t v52 = v74 + v148;
        unint64_t v87 = v153;
        if (v153 >= v74 && v153 < v52)
        {
          uint64_t v55 = (uint64_t)v145;
          if (v153 != v90) {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v75;
          unint64_t v53 = v151;
          unint64_t v92 = v152;
          goto LABEL_62;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 = v75;
      }
      else
      {
        uint64_t v42 = v148;
        a2 = v75 + v148;
        unint64_t v87 = v153;
        unint64_t v88 = v75;
        BOOL v89 = v153 < v75 || v153 >= a2;
        unint64_t v52 = v74;
        if (!v89)
        {
          unint64_t v92 = v152;
          uint64_t v55 = (uint64_t)v145;
          if (v153 != v88) {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v53 = v151;
          goto LABEL_62;
        }
        swift_arrayInitWithTakeFrontToBack();
      }
      unint64_t v53 = v151;
      unint64_t v92 = v152;
      uint64_t v55 = (uint64_t)v145;
LABEL_62:
      a1 = v87 + v42;
    }
    while (v52 < v53 && a2 < v92);
  }
  a2 = a1;
LABEL_73:
  int64_t v95 = v53 - v52;
  if (v42 != -1 || v95 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v52, v95 / v42, a2);
    return;
  }
LABEL_131:
  __break(1u);
}

uint64_t outlined assign with take of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_11(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantV5StateOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t _s15ConversationKit11ParticipantVWObTm_4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v4();
  return a2;
}

BOOL static ScreenSharingInteractionTransport.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ScreenSharingInteractionTransport.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int ScreenSharingInteractionTransport.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScreenSharingInteractionTransport.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ScreenSharingInteractionTransport.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ScreenSharingInteractionTransport.Errors()
{
  return ScreenSharingInteractionTransport.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ScreenSharingInteractionTransport.Errors(uint64_t a1)
{
  ScreenSharingInteractionTransport.Errors.hash(into:)(a1, *v1);
}

uint64_t key path getter for ScreenSharingInteractionTransport.isSendingInteractionData : ScreenSharingInteractionTransport@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingInteractionTransport.isSendingInteractionData : ScreenSharingInteractionTransport()
{
  return ScreenSharingInteractionTransport.isSendingInteractionData.setter();
}

uint64_t ScreenSharingInteractionTransport.isSendingInteractionData.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 424))();
  swift_release();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_1C339F658@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 184))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C339F6A4()
{
  return ScreenSharingInteractionTransport.isSendingInteractionData.setter();
}

uint64_t ScreenSharingInteractionTransport.isSendingInteractionData.setter()
{
  return ScreenSharingInteractionTransport.isSendingInteractionData.setter();
}

{
  void (*v0)(void);

  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_155_0();
  v0();
  return swift_release();
}

uint64_t key path getter for ScreenSharingInteractionTransport.isReceivingInteractionData : ScreenSharingInteractionTransport@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 232))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingInteractionTransport.isReceivingInteractionData : ScreenSharingInteractionTransport()
{
  return ScreenSharingInteractionTransport.isReceivingInteractionData.setter();
}

uint64_t ScreenSharingInteractionTransport.isReceivingInteractionData.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ScreenSharingInteractionTransport.isReceivingInteractionData.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 424))();
  swift_release();
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_1C339F7CC@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 232))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C339F818()
{
  return ScreenSharingInteractionTransport.isReceivingInteractionData.setter();
}

uint64_t ScreenSharingInteractionTransport.isReceivingInteractionData.setter()
{
  return ScreenSharingInteractionTransport.isSendingInteractionData.setter();
}

uint64_t ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v0 + 424))();
  swift_release();
  return swift_retain();
}

uint64_t key path setter for ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer : ScreenSharingInteractionTransport()
{
  return ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter();
}

uint64_t ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_155_0();
  v0();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = a2;
  swift_retain();
  return swift_release();
}

uint64_t ScreenSharingInteractionTransport.isReceivingInteractionDataDebouncer.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void (*ScreenSharingInteractionTransport._firewall.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  v3[3] = v4;
  v3[4] = v5;
  return ScreenSharingInteractionTransport._firewall.modify;
}

void ScreenSharingInteractionTransport._firewall.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 88) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t key path getter for ScreenSharingInteractionTransport.firewall : ScreenSharingInteractionTransport@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 376))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ScreenSharingInteractionTransport.firewall : ScreenSharingInteractionTransport(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 384);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t ScreenSharingInteractionTransport.firewall.init@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = a1;
  swift_unknownObjectWeakInit();
  return swift_unknownObjectRelease();
}

uint64_t ScreenSharingInteractionTransport.firewall.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 424))();
  swift_release();
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 80);
}

uint64_t sub_1C339FCEC@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 376))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ScreenSharingInteractionTransport.firewall.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_155_0();
  v0();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in ScreenSharingInteractionTransport.firewall.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 88) = a3;
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionTransport.firewall.setter()
{
  return closure #1 in ScreenSharingInteractionTransport.firewall.setter(v0[2], v0[3], v0[4]);
}

void (*ScreenSharingInteractionTransport.firewall.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v4 + 424))();
  swift_release();
  v3[5] = OBJC_IVAR____TtC15ConversationKit33ScreenSharingInteractionTransport___observationRegistrar;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[6] = lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport, (void (*)(uint64_t))type metadata accessor for ScreenSharingInteractionTransport);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v3[7] = ScreenSharingInteractionTransport._firewall.modify(v3);
  return ScreenSharingInteractionTransport.firewall.modify;
}

void ScreenSharingInteractionTransport.firewall.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  *uint64_t v1 = v1[4];
  swift_getKeyPath();
  OUTLINED_FUNCTION_31_12();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

uint64_t type metadata accessor for ScreenSharingInteractionTransport()
{
  uint64_t result = type metadata singleton initialization cache for ScreenSharingInteractionTransport;
  if (!type metadata singleton initialization cache for ScreenSharingInteractionTransport) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ScreenSharingInteractionTransport.__allocating_init(session:unreliableMessenger:reliableMessenger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = OUTLINED_FUNCTION_198();
  ScreenSharingInteractionTransport.init(session:unreliableMessenger:reliableMessenger:)(v6, a2, a3);
  return v3;
}

uint64_t ScreenSharingInteractionTransport.init(session:unreliableMessenger:reliableMessenger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(v3 + 40) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 48) = 2000000000000000000;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  swift_unknownObjectWeakInit();
  ObservationRegistrar.init()();
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  return v3;
}

uint64_t ScreenSharingInteractionTransport.didSendData()()
{
  return ScreenSharingInteractionTransport.didSendData()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_221();
  uint64_t v5 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_25_1(v1, v6, v7, v5);
  uint64_t v8 = type metadata accessor for MainActor();
  swift_retain();
  static MainActor.shared.getter();
  OUTLINED_FUNCTION_198();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_3_0();
  uint64_t v10 = MEMORY[0x1E4FBCFD8];
  void v9[2] = v8;
  v9[3] = v10;
  v9[4] = v2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

uint64_t closure #1 in ScreenSharingInteractionTransport.didSendData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[3] = swift_task_alloc();
  v4[4] = type metadata accessor for MainActor();
  v4[5] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionTransport.didSendData(), v6, v5);
}

uint64_t closure #1 in ScreenSharingInteractionTransport.didSendData()()
{
  OUTLINED_FUNCTION_28_0();
  swift_release();
  OUTLINED_FUNCTION_50();
  if (((*(uint64_t (**)(void))(v1 + 184))() & 1) == 0) {
    ScreenSharingInteractionTransport.isSendingInteractionData.setter();
  }
  uint64_t v2 = ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1C8773690](v3, MEMORY[0x1E4FBC848] + 8, v4, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_174_1(v7);
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_3_0();
  uint64_t v10 = MEMORY[0x1E4FBCFD8];
  void v9[2] = v8;
  v9[3] = v10;
  v9[4] = v6;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData(), (uint64_t)v9);
  ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v11();
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v7;
  v4[8] = v6;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData(), v7, v6);
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData()()
{
  OUTLINED_FUNCTION_28_0();
  ContinuousClock.init()();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_100_2();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData();
  uint64_t v2 = OUTLINED_FUNCTION_83_3();
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  uint64_t v4 = OUTLINED_FUNCTION_39_19();
  v5(v4);
  OUTLINED_FUNCTION_98_4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  ScreenSharingInteractionTransport.isSendingInteractionData.setter();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t ScreenSharingInteractionTransport.didReceiveData()()
{
  return ScreenSharingInteractionTransport.didSendData()();
}

uint64_t closure #1 in ScreenSharingInteractionTransport.didReceiveData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[3] = swift_task_alloc();
  v4[4] = type metadata accessor for MainActor();
  v4[5] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionTransport.didReceiveData(), v6, v5);
}

uint64_t closure #1 in ScreenSharingInteractionTransport.didReceiveData()()
{
  OUTLINED_FUNCTION_28_0();
  swift_release();
  OUTLINED_FUNCTION_50();
  if (((*(uint64_t (**)(void))(v1 + 232))() & 1) == 0) {
    ScreenSharingInteractionTransport.isReceivingInteractionData.setter();
  }
  uint64_t v2 = ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1C8773690](v3, MEMORY[0x1E4FBC848] + 8, v4, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_174_1(v7);
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_3_0();
  uint64_t v10 = MEMORY[0x1E4FBCFD8];
  void v9[2] = v8;
  v9[3] = v10;
  v9[4] = v6;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData(), (uint64_t)v9);
  ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v11();
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v7;
  v4[8] = v6;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData(), v7, v6);
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData()()
{
  OUTLINED_FUNCTION_28_0();
  ContinuousClock.init()();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_100_2();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData();
  uint64_t v2 = OUTLINED_FUNCTION_83_3();
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  uint64_t v4 = OUTLINED_FUNCTION_39_19();
  v5(v4);
  OUTLINED_FUNCTION_98_4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  ScreenSharingInteractionTransport.isReceivingInteractionData.setter();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

uint64_t ScreenSharingInteractionTransport.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ScreenSharingInteractionTransport.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ScreenSharingInteractionTransport.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 80);
  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v1();
  return v0;
}

uint64_t ScreenSharingInteractionTransport.__deallocating_deinit()
{
  ScreenSharingInteractionTransport.deinit();
  OUTLINED_FUNCTION_3_2();
  return swift_deallocClassInstance();
}

void ScreenSharingInteractionTransport.availableDeliveryModes.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ControlMessageReliability>);
  type metadata accessor for ControlMessageReliability();
  OUTLINED_FUNCTION_4();
  uint64_t v1 = v0;
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C37696D0;
  uint64_t v2 = *(void (**)(void))(v1 + 104);
  OUTLINED_FUNCTION_169_1();
  v2();
  OUTLINED_FUNCTION_169_1();
  v2();
  specialized Set.init(_nonEmptyArrayLiteral:)();
}

BOOL ScreenSharingInteractionTransport.isInvalidated.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>.State);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_16_0();
  GroupSession.state.getter();
  uint64_t v1 = OUTLINED_FUNCTION_30_15();
  BOOL v3 = v2(v1) == *MEMORY[0x1E4F29440];
  uint64_t v4 = OUTLINED_FUNCTION_30_15();
  v5(v4);
  return v3;
}

uint64_t ScreenSharingInteractionTransport.activate()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation.BufferingPolicy);
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_3();
  uint64_t v13 = v4;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.screenSharing);
  OUTLINED_FUNCTION_198();
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v14 = v12;
    *(_DWORD *)uint64_t v8 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type GroupSession<ScreenSharingInteractionActivity> and conformance GroupSession<A>, &demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v6, v7, "Activating screen sharing interaction transport for session: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v12, -1, -1);
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  GroupSession.join()();
  type metadata accessor for ControlMessengerState();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v13, *MEMORY[0x1E4FBD028], v0);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in ScreenSharingInteractionTransport.activate()(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v32 = (uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v29 = v8;
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v10 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSession.$activeParticipants.getter();
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v24 = v6;
  v31(v9, a1, v6);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v28 = v13 | 7;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  uint64_t v25 = a2;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v27(v14 + ((v13 + 24) & ~v13), v9, v6);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  swift_retain();
  uint64_t v15 = v26;
  uint64_t v16 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v15);
  uint64_t v17 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v32, 1, 1, v17);
  uint64_t v18 = v24;
  v31(v9, v30, v24);
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  v19[3] = 0;
  v19[4] = v25;
  v27((uint64_t)v19 + ((v13 + 40) & ~v13), v9, v18);
  swift_retain();
  uint64_t v20 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v20;
  return AsyncStream.Continuation.onTermination.setter();
}

void closure #1 in closure #1 in ScreenSharingInteractionTransport.activate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ControlMessengerState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation.YieldResult);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(*(void *)a1 + 16) >= 2uLL)
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.screenSharing);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v27 = v6;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v28 = a3;
      uint64_t v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v7;
      uint64_t v20 = v19;
      uint64_t v30 = v19;
      uint64_t v26 = v10;
      *(_DWORD *)uint64_t v18 = 136315138;
      v24[1] = v18 + 4;
      uint64_t v29 = *(void *)(a2 + 16);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
      uint64_t v21 = String.init<A>(reflecting:)();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
      uint64_t v10 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v6 = v27;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v15, v16, "Activated screen sharing interaction transport for session: %s", v18, 0xCu);
      swift_arrayDestroy();
      uint64_t v23 = v20;
      uint64_t v7 = v25;
      MEMORY[0x1C87760E0](v23, -1, -1);
      MEMORY[0x1C87760E0](v18, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4F99D28], v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t closure #2 in closure #1 in ScreenSharingInteractionTransport.activate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = type metadata accessor for ControlMessengerState();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation.YieldResult);
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>.State);
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>.State?);
  v5[16] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher>);
  v5[17] = v9;
  v5[18] = *(void *)(v9 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher);
  v5[20] = v10;
  v5[21] = *(void *)(v10 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher>.Iterator);
  v5[23] = v11;
  v5[24] = *(void *)(v11 - 8);
  v5[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ScreenSharingInteractionTransport.activate(), 0, 0);
}

uint64_t closure #2 in closure #1 in ScreenSharingInteractionTransport.activate()()
{
  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = *(void *)(v0 + 160);
  *(void *)(v0 + 208) = *(void *)(*(void *)(v0 + 40) + 16);
  GroupSession.$state.getter();
  uint64_t v2 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher);
  MEMORY[0x1C8770AF0](v1, v2);
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_12_1();
  v3();
  AsyncPublisher.makeAsyncIterator()();
  OUTLINED_FUNCTION_10_6();
  v4();
  *(_DWORD *)(v0 + 232) = *MEMORY[0x1E4F29440];
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #2 in closure #1 in ScreenSharingInteractionTransport.activate();
  OUTLINED_FUNCTION_64_6();
  return MEMORY[0x1F4187C78](v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 224) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  char v1;
  int v2;
  void (*v3)(void);
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  int v6;
  id *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(void);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  void (*v21)(void);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  uint64_t v26 = v0;
  OUTLINED_FUNCTION_12_36(*(void *)(v0 + 128));
  if (v1) {
    goto LABEL_12;
  }
  uint64_t v2 = *(_DWORD *)(v0 + 232);
  OUTLINED_FUNCTION_63_0();
  v3();
  uint64_t v4 = OUTLINED_FUNCTION_30_15();
  uint64_t v6 = v5(v4);
  uint64_t v7 = *(id **)(v0 + 120);
  if (v6 == v2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 96))(*(void *)(v0 + 120), *(void *)(v0 + 104));

    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Log.screenSharing);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v11))
    {
      uint64_t v12 = *(void *)(v0 + 208);
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v25 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v0 + 24) = v12;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_190();
      _os_log_impl(&dword_1C2F90000, v10, v9, "Invalidating screen sharing interaction transport due to session invalidation: %s", v13, 0xCu);
      OUTLINED_FUNCTION_78_0();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 104))(*(void *)(v0 + 72), *MEMORY[0x1E4F99D20], *(void *)(v0 + 56));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
    AsyncStream.Continuation.yield(_:)();
    OUTLINED_FUNCTION_336();
    v20();
    AsyncStream.Continuation.finish()();
LABEL_12:
    OUTLINED_FUNCTION_15();
    v21();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_263();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_15();
  v16();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<ScreenSharingInteractionActivity>.State>.Publisher>.Iterator);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #2 in closure #1 in ScreenSharingInteractionTransport.activate();
  OUTLINED_FUNCTION_64_6();
  OUTLINED_FUNCTION_263();
  return MEMORY[0x1F4187C78](v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 16) = *(void *)(v0 + 224);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

void closure #3 in closure #1 in ScreenSharingInteractionTransport.activate()()
{
  AnyCancellable.cancel()();
  JUMPOUT(0x1C8773690);
}

Swift::Void __swiftcall ScreenSharingInteractionTransport.invalidate()()
{
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.screenSharing);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v4 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v7 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type GroupSession<ScreenSharingInteractionActivity> and conformance GroupSession<A>, &demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_33_8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v1, v2, "Invalidating screen sharing interaction session: %s", v3, 0xCu);
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_33_8();
  }
  GroupSession.end()();
}

uint64_t ScreenSharingInteractionTransport.send(_:reliability:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[14] = v2;
  v1[15] = v0;
  v1[12] = v3;
  v1[13] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ControlMessageReliability?);
  OUTLINED_FUNCTION_8(v5);
  v1[16] = OUTLINED_FUNCTION_191();
  uint64_t v6 = type metadata accessor for Participants();
  v1[17] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[18] = v7;
  v1[19] = OUTLINED_FUNCTION_28_2();
  v1[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ControlMessageReliability();
  v1[21] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[22] = v9;
  v1[23] = OUTLINED_FUNCTION_28_2();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RemoteControlMessage(0);
  v1[26] = v10;
  OUTLINED_FUNCTION_8(v10);
  v1[27] = OUTLINED_FUNCTION_191();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  OUTLINED_FUNCTION_8(v11);
  v1[28] = OUTLINED_FUNCTION_191();
  uint64_t v12 = type metadata accessor for Participant();
  v1[29] = v12;
  OUTLINED_FUNCTION_1(v12);
  v1[30] = v13;
  v1[31] = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v14, v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  OUTLINED_FUNCTION_15();
  v4();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 280) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  OUTLINED_FUNCTION_15();
  v4();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t ScreenSharingInteractionTransport.send(_:reliability:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, os_log_t log, void *a16, void *a17, void (*a18)(uint64_t, uint64_t, uint64_t), os_log_type_t type, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_145_2();
  a31 = v33;
  a32 = v34;
  a30 = v32;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v35 = v32[13];
  uint64_t v36 = type metadata accessor for Logger();
  uint64_t v37 = (void (*)(uint64_t, uint64_t, uint64_t))__swift_project_value_buffer(v36, (uint64_t)static Log.screenSharing);
  uint64_t v38 = OUTLINED_FUNCTION_41_0();
  outlined copy of Data._Representation(v38, v39);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  BOOL v42 = OUTLINED_FUNCTION_2_12(v41);
  uint64_t v44 = v32[12];
  unint64_t v43 = v32[13];
  typea = v32 + 11;
  if (v42)
  {
    a18 = v37;
    int64_t v45 = (uint8_t *)OUTLINED_FUNCTION_37();
    *(_DWORD *)int64_t v45 = 134217984;
    v32[11] = Data.count.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(v44, v43);
    _os_log_impl(&dword_1C2F90000, v40, (os_log_type_t)v35, "Sending screen sharing interaction data: (%ld bytes)", v45, 0xCu);
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined consume of Data._Representation(v44, v43);
  }

  uint64_t v46 = *(void *)(v32[15] + 16);
  GroupSession.activeParticipants.getter();
  swift_retain();
  uint64_t v47 = OUTLINED_FUNCTION_41_0();
  uint64_t v49 = specialized _NativeSet.filter(_:)(v47, v48);
  if (*(void *)(v49 + 16) != 1)
  {
    swift_release();
    goto LABEL_10;
  }
  uint64_t v51 = v32[28];
  uint64_t v50 = v32[29];
  specialized Collection.first.getter(v49, v51);
  swift_release();
  if (__swift_getEnumTagSinglePayload(v51, 1, v50) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v32[28], (uint64_t *)&demangling cache variable for type metadata for Participant?);
LABEL_10:
    swift_retain_n();
    unint64_t v52 = (void *)Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_107(v53))
    {
      uint64_t v54 = (_DWORD *)OUTLINED_FUNCTION_37();
      uint64_t v55 = OUTLINED_FUNCTION_9_0();
      *uint64_t v54 = 136315138;
      typea = v54 + 1;
      a20 = v55;
      v32[5] = v46;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
      uint64_t v56 = String.init<A>(reflecting:)();
      v32[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &a20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v58, v59, "Not sending data because we couldn't find participant to communicate to: %s");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors();
    OUTLINED_FUNCTION_29();
    *uint64_t v60 = 0;
    swift_willThrow();
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
LABEL_21:
    OUTLINED_FUNCTION_31_28();
    return v100(v99, v100, v101, v102, v103, v104, v105, v106, a9, a10, a11, a12, a13, a14, log, a16, a17, a18, typea,
             a20,
             a21,
             a22,
             a23,
             a24);
  }
  uint64_t v61 = v32[15];
  OUTLINED_FUNCTION_63_0();
  uint64_t v63 = v62();
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v61 + 376))(v63))
  {
    lazy protocol witness table accessor for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors();
    Class v70 = (void *)OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_141_1((uint64_t)v70, v71);
    unint64_t v72 = v32[13];
    uint64_t v73 = v32[12];
    a18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32[22] + 16);
    a18(v32[23], v32[14], v32[21]);
    outlined copy of Data._Representation(v73, v72);
    id v74 = v70;
    outlined copy of Data._Representation(v73, v72);
    id v75 = v70;
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    LODWORD(typea) = v77;
    if (os_log_type_enabled(v76, v77))
    {
      log = v76;
      a16 = v32 + 10;
      a9 = v32 + 6;
      a17 = v32 + 7;
      uint64_t v78 = v32[16];
      a12 = v32 + 8;
      a13 = v32 + 9;
      a11 = v32[21];
      uint64_t v80 = v32[12];
      unint64_t v79 = v32[13];
      a10 = v32[23];
      uint64_t v81 = OUTLINED_FUNCTION_9_0();
      a14 = swift_slowAlloc();
      a20 = a14;
      *(_DWORD *)uint64_t v81 = 136315650;
      v32[2] = v80;
      v32[3] = v79;
      outlined copy of Data._Representation(v80, v79);
      uint64_t v82 = String.init<A>(reflecting:)();
      v32[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, &a20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v80, v79);
      outlined consume of Data._Representation(v80, v79);
      *(_WORD *)(v81 + 12) = 2080;
      a18(v78, a10, a11);
      OUTLINED_FUNCTION_31_13();
      __swift_storeEnumTagSinglePayload(v84, v85, v86, a11);
      specialized >> prefix<A>(_:)(v78);
      outlined destroy of SystemUpdateNotice?(v78, &demangling cache variable for type metadata for ControlMessageReliability?);
      uint64_t v87 = OUTLINED_FUNCTION_172_2();
      v32[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v89);
      OUTLINED_FUNCTION_195_1();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_12_1();
      v90();
      *(_WORD *)(v81 + 22) = 2080;
      v32[8] = v70;
      id v91 = v70;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v92 = String.init<A>(reflecting:)();
      v32[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, &a20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v76, (os_log_type_t)typea, "Not sending data %s with reliability: %s since the firewall rejected it for reason: %s.", (uint8_t *)v81, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      uint64_t v94 = v32[12];
      unint64_t v95 = v32[13];
      outlined consume of Data._Representation(v94, v95);
      outlined consume of Data._Representation(v94, v95);
      OUTLINED_FUNCTION_12_1();
      v96();
    }
    swift_willThrow();
    uint64_t v97 = OUTLINED_FUNCTION_23_0();
    v98(v97);
    goto LABEL_20;
  }
  uint64_t v65 = v64;
  uint64_t v66 = v32[31];
  uint64_t v67 = v32[27];
  uint64_t ObjectType = swift_getObjectType();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 16))(v67, v66, ObjectType, v65);
  uint64_t v69 = v32[27];
  a16 = v32 + 10;
  uint64_t v108 = v32[25];
  uint64_t v109 = v32[22];
  swift_unknownObjectRelease();
  outlined destroy of RemoteControlMessage(v69, (void (*)(void))type metadata accessor for RemoteControlMessage);
  uint64_t v110 = *(void (**)(void))(v109 + 16);
  OUTLINED_FUNCTION_351();
  OUTLINED_FUNCTION_161_1();
  v110();
  uint64_t v111 = OUTLINED_FUNCTION_69_0();
  int v113 = v112(v111);
  if (v113 == *MEMORY[0x1E4F99D38])
  {
    static Participants.only(_:)();
    uint64_t v114 = (void *)swift_task_alloc();
    v32[32] = v114;
    *uint64_t v114 = v32;
    v114[1] = ScreenSharingInteractionTransport.send(_:reliability:);
  }
  else
  {
    if (v113 != *MEMORY[0x1E4F99D30])
    {
      OUTLINED_FUNCTION_161_1();
      v110();
      id v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.error.getter();
      BOOL v126 = OUTLINED_FUNCTION_2_12(v125);
      uint64_t v128 = v32[21];
      uint64_t v127 = v32[22];
      if (v126)
      {
        uint64_t v129 = v32[16];
        os_log_type_t v141 = v108;
        uint64_t v130 = OUTLINED_FUNCTION_37();
        a20 = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)uint64_t v130 = 136315138;
        log = (os_log_t)(v130 + 4);
        OUTLINED_FUNCTION_161_1();
        v110();
        OUTLINED_FUNCTION_31_13();
        __swift_storeEnumTagSinglePayload(v131, v132, v133, v128);
        uint64_t v134 = specialized >> prefix<A>(_:)(v129);
        unint64_t v136 = v135;
        outlined destroy of SystemUpdateNotice?(v129, &demangling cache variable for type metadata for ControlMessageReliability?);
        v32[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v136, &a20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v137 = *(void (**)(void))(v127 + 8);
        OUTLINED_FUNCTION_4_1();
        v137();
        OUTLINED_FUNCTION_268(&dword_1C2F90000, v124, v141, "Unknown reliability mode for control message: %s");
        OUTLINED_FUNCTION_88_1();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        uint64_t v137 = *(void (**)(void))(v127 + 8);
        ((void (*)(void, void))v137)(v32[24], v32[21]);
      }

      ((void (*)(void, void))v137)(v32[25], v32[21]);
      OUTLINED_FUNCTION_96_3();
      a17 = (void *)v139;
      a18 = v138;
      typea = (void *)v32[16];
      ScreenSharingInteractionTransport.didSendData()();
      OUTLINED_FUNCTION_139();
      v140();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_7_4();
      goto LABEL_21;
    }
    static Participants.only(_:)();
    char v115 = (void *)swift_task_alloc();
    v32[34] = v115;
    *char v115 = v32;
    v115[1] = ScreenSharingInteractionTransport.send(_:reliability:);
  }
  OUTLINED_FUNCTION_78(v32[12]);
  OUTLINED_FUNCTION_31_28();
  return MEMORY[0x1F40E7608](v116, v117, v118, v119, v120, v121, v122, v123, a9, a10, a11, a12, a13, a14, log, a16, a17, a18, typea,
           a20,
           a21,
           a22,
           a23,
           a24);
}

void ScreenSharingInteractionTransport.send(_:reliability:)()
{
  OUTLINED_FUNCTION_96_3();
  ScreenSharingInteractionTransport.didSendData()();
  OUTLINED_FUNCTION_139();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_263();
  __asm { BRAA            X1, X16 }
}

uint64_t ScreenSharingInteractionTransport.send(_:reliability:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_15();
  v12();
  OUTLINED_FUNCTION_118_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_24_5();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  void (*v12)(void);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_15();
  v12();
  OUTLINED_FUNCTION_118_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_24_5();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

void ScreenSharingInteractionTransport.receiveData()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.screenSharing);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v7 = OUTLINED_FUNCTION_9_0();
    *uint64_t v6 = 136315138;
    uint64_t v12 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type GroupSession<ScreenSharingInteractionActivity> and conformance GroupSession<A>, &demangling cache variable for type metadata for GroupSession<ScreenSharingInteractionActivity>);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v3 = v9;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_33_8();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_335(&dword_1C2F90000, v4, v5, "Creating screen sharing interaction transport data stream for session: %s");
    OUTLINED_FUNCTION_12_23();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_33_8();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation.BufferingPolicy);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_60();
  (*(void (**)(uint64_t, void))(v11 + 104))(v3, *MEMORY[0x1E4FBD028]);
  v1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>);
  v1[4] = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncStream<Data> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<Data>);
  __swift_allocate_boxed_opaque_existential_1(v1);
  AsyncStream.init(_:bufferingPolicy:_:)();
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in ScreenSharingInteractionTransport.receiveData()(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v25);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __n128 v10 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  unint64_t v22 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = v11;
  v11((char *)v21 - v22, a1, v7, v10);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 40) & ~v12;
  v21[0] = v12 | 7;
  v21[1] = v13 + v9;
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = a2;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v15(&v14[v13], (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  uint64_t v16 = __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v25);
  __n128 v17 = MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v21 - v22;
  v23((char *)v21 - v22, v24, v7, v17);
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  *((void *)v19 + 4) = a2;
  v15(&v19[v13], v18, v7);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionTransport.receiveData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Participant();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for RemoteControlMessage(0);
  v5[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ScreenSharingInteractionTransport.receiveData(), 0, 0);
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionTransport.receiveData()()
{
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<Data>.Iterator);
  v0[22] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[23] = v2;
  v0[24] = OUTLINED_FUNCTION_191();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<Data>);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_191();
  GroupSessionMessenger.messages(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  OUTLINED_FUNCTION_336();
  v3();
  swift_task_dealloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext)?);
  OUTLINED_FUNCTION_8(v4);
  v0[25] = OUTLINED_FUNCTION_191();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<Data>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<Data>.Iterator);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_105_3(v5);
  *uint64_t v6 = v7;
  v6[1] = closure #1 in closure #1 in ScreenSharingInteractionTransport.receiveData();
  OUTLINED_FUNCTION_64_6();
  OUTLINED_FUNCTION_98_4();
  return MEMORY[0x1F4187C78](v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

#error "1C33A43C4: call analysis failed (funcsize=355)"

uint64_t closure #2 in closure #1 in ScreenSharingInteractionTransport.receiveData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Participant();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for RemoteControlMessage(0);
  v5[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ScreenSharingInteractionTransport.receiveData(), 0, 0);
}

uint64_t closure #2 in closure #1 in ScreenSharingInteractionTransport.receiveData()()
{
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<Data>.Iterator);
  v0[22] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[23] = v2;
  v0[24] = OUTLINED_FUNCTION_191();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<Data>);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_191();
  GroupSessionMessenger.messages(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  OUTLINED_FUNCTION_336();
  v3();
  swift_task_dealloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext)?);
  OUTLINED_FUNCTION_8(v4);
  v0[25] = OUTLINED_FUNCTION_191();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<Data>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<Data>.Iterator);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_105_3(v5);
  *uint64_t v6 = v7;
  v6[1] = closure #2 in closure #1 in ScreenSharingInteractionTransport.receiveData();
  OUTLINED_FUNCTION_64_6();
  OUTLINED_FUNCTION_98_4();
  return MEMORY[0x1F4187C78](v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 32) = *(void *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

#error "1C33A4DB0: call analysis failed (funcsize=355)"

uint64_t protocol witness for ControlTransport.activate() in conformance ScreenSharingInteractionTransport()
{
  return ScreenSharingInteractionTransport.activate()();
}

void protocol witness for ControlTransport.availableDeliveryModes.getter in conformance ScreenSharingInteractionTransport()
{
}

uint64_t protocol witness for ControlTransport.send(_:reliability:) in conformance ScreenSharingInteractionTransport()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return ScreenSharingInteractionTransport.send(_:reliability:)();
}

uint64_t ScreenSharingInteractionSession.groupSession.getter()
{
  return swift_retain();
}

uint64_t key path setter for ScreenSharingInteractionSession.playbackServer : ScreenSharingInteractionSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 64) = v2;
  swift_retain();
  return swift_release();
}

uint64_t ScreenSharingInteractionSession.playbackServer.getter()
{
  return swift_retain();
}

void key path setter for ScreenSharingInteractionSession.captureInteraction : ScreenSharingInteractionSession(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;
  id v5 = v2;
}

void *ScreenSharingInteractionSession.captureInteraction.getter()
{
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

uint64_t ScreenSharingInteractionSession.remoteControlStatus.getter()
{
  OUTLINED_FUNCTION_2();
  unint64_t v1 = *(void *)(v0 + 128);
  id v2 = *(os_unfair_lock_s **)(v0 + 136);
  outlined copy of RemoteControlState(v1);
  swift_retain();
  os_unfair_lock_lock(v2 + 6);
  OUTLINED_FUNCTION_37_16(&v5);
  os_unfair_lock_unlock(v2 + 6);
  outlined consume of RemoteControlState(v1);
  swift_release();
  uint64_t result = 1;
  switch(v5 >> 61)
  {
    case 3uLL:
      outlined consume of RemoteControlState(v5);
      uint64_t result = 2;
      break;
    case 4uLL:
      unint64_t v4 = *(void *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      outlined consume of RemoteControlState(v5);
      if (v4 >> 61 == 3) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
      break;
    case 5uLL:
      return result;
    default:
      outlined consume of RemoteControlState(v5);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t ScreenSharingInteractionSession.__allocating_init(session:controller:serverBag:contactManager:)()
{
  uint64_t v0 = swift_allocObject();
  OUTLINED_FUNCTION_31_12();
  ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)();
  return v0;
}

void ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)()
{
  OUTLINED_FUNCTION_31();
  unint64_t v1 = (void *)v0;
  uint64_t v49 = v2;
  uint64_t v50 = v3;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<RemoteControlMessage>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v46 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_2_3();
  uint64_t v45 = v12;
  uint64_t v48 = type metadata accessor for ControlMessageSession.Role();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_3();
  uint64_t v47 = v16;
  type metadata accessor for GroupSessionMessenger.DeliveryMode();
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_221();
  type metadata accessor for DeviceInactivityObserver();
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 56) = 0;
  OUTLINED_FUNCTION_8_9();
  *(void *)(v0 + 80) = DeviceInactivityObserver.init(inactivityTimeout:)(2);
  type metadata accessor for DisplayLayerVisibilityObserver();
  OUTLINED_FUNCTION_8_9();
  *(void *)(v0 + 88) = DisplayLayerVisibilityObserver.init()();
  *(void *)(v0 + 144) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 168) = v5;
  id v51 = v5;
  if (GroupSession.isLocallyInitiated.getter()) {
    unint64_t v20 = 0xA000000000000008;
  }
  else {
    unint64_t v20 = 0xA000000000000010;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<RemoteControlState, os_unfair_lock_s>);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(void *)(v21 + 16) = v20;
  v1[16] = v20;
  v1[17] = v21;
  unint64_t v22 = *(void (**)(void))(v18 + 104);
  OUTLINED_FUNCTION_169_1();
  v22();
  type metadata accessor for GroupSessionMessenger();
  OUTLINED_FUNCTION_8_9();
  outlined copy of RemoteControlState(v20);
  swift_retain();
  v1[5] = GroupSessionMessenger.init<A>(session:deliveryMode:)();
  OUTLINED_FUNCTION_169_1();
  v22();
  swift_allocObject();
  swift_retain();
  uint64_t v23 = GroupSessionMessenger.init<A>(session:deliveryMode:)();
  v1[6] = v23;
  type metadata accessor for ScreenSharingInteractionTransport();
  uint64_t v24 = OUTLINED_FUNCTION_8_9();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v25 = OUTLINED_FUNCTION_172_2();
  ScreenSharingInteractionTransport.init(session:unreliableMessenger:reliableMessenger:)(v25, v26, v23);
  v1[2] = v24;
  v1[3] = v7;
  swift_retain();
  swift_retain();
  char v27 = GroupSession.isLocallyInitiated.getter();
  uint64_t v28 = (unsigned int *)MEMORY[0x1E4F99D10];
  if ((v27 & 1) == 0) {
    uint64_t v28 = (unsigned int *)MEMORY[0x1E4F99D18];
  }
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v47, *v28, v48);
  type metadata accessor for ControlMessageSession();
  lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport, (void (*)(uint64_t))type metadata accessor for ScreenSharingInteractionTransport);
  uint64_t v29 = (uint8_t *)ControlMessageSession.__allocating_init(transport:role:)();
  v1[4] = v29;
  swift_unknownObjectUnownedInit();
  v1[19] = v50;
  id v30 = v50;
  if (GroupSession.isLocallyInitiated.getter())
  {
    type metadata accessor for PlaybackServer();
    swift_retain();
    uint64_t v29 = (uint8_t *)PlaybackServer.__allocating_init(session:interruptionHandler:)();
    uint64_t v31 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_25_1(v45, v32, v33, v31);
    uint64_t v34 = (void *)OUTLINED_FUNCTION_3_0();
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v29;
    swift_retain();
    v1[7] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
    OUTLINED_FUNCTION_177_0();
    v1[8] = v29;
    swift_retain();
    swift_release();
    ScreenSharingInteractionSession.observeInteractionState()();
    swift_release();
  }
  else
  {
    type metadata accessor for CaptureUIInteraction();
    swift_retain();
    uint64_t v35 = CaptureUIInteraction.__allocating_init(session:interruptionHandler:)();
    OUTLINED_FUNCTION_177_0();
    uint64_t v36 = (void *)v1[9];
    v1[9] = v35;
  }
  if (FTServerBag.remoteControlEnabled.getter())
  {
    type metadata accessor for RemoteControlMessage(0);
    lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
    lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
    swift_retain();
    GroupSessionMessenger.receive<A>(_:)();
    swift_release();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for closure #4 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:);
    *(void *)(v37 + 24) = v1;
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageStream<RemoteControlMessage> and conformance GroupSessionMessenger.MessageStream<A>, &demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<RemoteControlMessage>);
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    OUTLINED_FUNCTION_198();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    v38();
    v1[14] = v46;
    swift_release();
  }
  else
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    uint64_t v40 = OUTLINED_FUNCTION_30(v39, (uint64_t)static Log.screenSharing);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      BOOL v42 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_180(v42);
      _os_log_impl(&dword_1C2F90000, v40, v41, "Not setting up remote control message listener as remote control is disabled by the server bag", v29, 2u);
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_50();
  uint64_t v44 = *(void (**)(void *, _UNKNOWN **))(v43 + 384);
  swift_retain();
  swift_retain();
  v44(v1, &protocol witness table for ScreenSharingInteractionSession);

  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28();
}

void closure #1 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(void *a1)
{
}

uint64_t closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = type metadata accessor for InteractionState();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>);
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  v4[15] = v8;
  v4[16] = *(void *)(v8 - 8);
  v4[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:), 0, 0);
}

uint64_t closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)()
{
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_55();
  uint64_t v1 = *(void *)(v0 + 96);
  PlaybackServer.$isActive.getter();
  uint64_t v2 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
  MEMORY[0x1C8770AF0](v1, v2);
  OUTLINED_FUNCTION_10_6();
  v3();
  AsyncPublisher.makeAsyncIterator()();
  OUTLINED_FUNCTION_139();
  v4();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:);
  OUTLINED_FUNCTION_24_5();
  return MEMORY[0x1F4187C78](v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  unint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 185) = *(unsigned char *)(v0 + 184);
  return OUTLINED_FUNCTION_17_7((uint64_t)closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 16) = *(void *)(v0 + 152);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  uint64_t v7 = OUTLINED_FUNCTION_69_0();
  v8(v7);
  if (v0)
  {
    OUTLINED_FUNCTION_5_8();
    OUTLINED_FUNCTION_97_4();
    return MEMORY[0x1F4188298](v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_97_4();
    return v14(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  os_log_type_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_55();
  uint64_t v17 = v0;
  uint64_t v2 = *(void **)(v0 + 176);
  uint64_t v3 = v2;
  unint64_t v4 = v2;
  uint64_t v5 = (void *)Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v6))
  {
    uint64_t v7 = *(void **)(v0 + 176);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_140_1(4.8149e-34);
    *(void *)(v1 + 24) = v7;
    uint64_t v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    OUTLINED_FUNCTION_27_29();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v11, v12, "Error updating interaction state: %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 176);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v14();
}

uint64_t closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_28_0();
  int v23 = *(unsigned __int8 *)(v22 + 185);
  if (v23 != 2 && (v23 & 1) == 0)
  {
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
    os_log_type_t v41 = (void *)swift_task_alloc();
    *(void *)(v22 + 144) = v41;
    *os_log_type_t v41 = v22;
    v41[1] = closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:);
    OUTLINED_FUNCTION_64_6();
    return MEMORY[0x1F4187C78](v42);
  }
  else
  {
    OUTLINED_FUNCTION_15();
    v25();
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    *(void *)(v22 + 160) = __swift_project_value_buffer(v26, (uint64_t)static Log.screenSharing);
    char v27 = (void *)Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_104(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v29);
      OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v30, v31, "Playback server is now active, changing interaction state to draw");
      OUTLINED_FUNCTION_3();
    }

    static InteractionState.draw.getter();
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v22 + 168) = v32;
    *uint64_t v32 = v22;
    v32[1] = closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:);
    uint64_t v33 = OUTLINED_FUNCTION_78(*(void *)(v22 + 64));
    return MEMORY[0x1F414A710](v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
}

void closure #3 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(void *a1)
{
}

void closure #1 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(void *a1, const char *a2)
{
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.screenSharing);
  id v5 = a1;
  id v6 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v15 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, oslog, v7, a2, v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    OUTLINED_FUNCTION_16();
  }
  else
  {

    OUTLINED_FUNCTION_16();
  }
}

uint64_t closure #4 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlMessage?);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RemoteControlMessage(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.screenSharing);
  outlined init with copy of RemoteControlMessage(a1, (uint64_t)v14, (void (*)(void))type metadata accessor for RemoteControlMessage);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v29 = v5;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v30 = a3;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = a1;
    uint64_t v21 = v20;
    uint64_t v33 = v20;
    uint64_t v27 = v6;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v26 = v19 + 4;
    outlined init with copy of RemoteControlMessage((uint64_t)v14, (uint64_t)v11, (void (*)(void))type metadata accessor for RemoteControlMessage);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v12);
    uint64_t v22 = specialized >> prefix<A>(_:)();
    unint64_t v24 = v23;
    outlined destroy of SystemUpdateNotice?((uint64_t)v11, &demangling cache variable for type metadata for RemoteControlMessage?);
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v33);
    uint64_t v6 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v5 = v29;
    swift_bridgeObjectRelease();
    outlined destroy of RemoteControlMessage((uint64_t)v14, (void (*)(void))type metadata accessor for RemoteControlMessage);
    _os_log_impl(&dword_1C2F90000, v16, v17, "Received remote control message: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v21, -1, -1);
    MEMORY[0x1C87760E0](v19, -1, -1);
  }
  else
  {
    outlined destroy of RemoteControlMessage((uint64_t)v14, (void (*)(void))type metadata accessor for RemoteControlMessage);
  }

  GroupSessionMessenger.MessageContext.source.getter();
  ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed RemoteControlMessage, @in_guaranteed GroupSessionMessenger.MessageContext) -> ()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlMessage, GroupSessionMessenger.MessageContext));
  return a2(a1, a1 + *(int *)(v4 + 48));
}

Swift::Void __swiftcall ScreenSharingInteractionSession.setup()()
{
  uint64_t v2 = v0;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = OUTLINED_FUNCTION_30(v3, (uint64_t)static Log.screenSharing);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v1, "Setting up state machine and triggering state update", v6, 2u);
    OUTLINED_FUNCTION_3();
  }

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  OUTLINED_FUNCTION_2();
  unint64_t v8 = *(void *)(v2 + 128);
  uint64_t v9 = *(os_unfair_lock_s **)(v2 + 136);
  outlined copy of RemoteControlState(v8);
  swift_retain();
  os_unfair_lock_lock(v9 + 6);
  OUTLINED_FUNCTION_37_16(&v12);
  os_unfair_lock_unlock(v9 + 6);
  outlined consume of RemoteControlState(v8);
  swift_release();
  unint64_t v10 = v12;
  unint64_t v11 = v12;
  ScreenSharingInteractionController.session(_:didUpdateState:)(v2, &v11);

  outlined consume of RemoteControlState(v10);
}

Swift::Void __swiftcall ScreenSharingInteractionSession.invalidate()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.screenSharing);
  swift_retain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    GroupSession.isLocallyInitiated.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2F90000, v5, v6, "Invalidating group session (locallyInitiated=%{BOOL}d", v7, 8u);
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_release();
  }

  if (v0[13])
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (v0[12])
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (v0[7])
  {
    uint64_t v8 = swift_retain();
    MEMORY[0x1C8773690](v8, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  if (v0[14])
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v9 + 160))();
  uint64_t v10 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_25_1(v1, v11, v12, v10);
  uint64_t v13 = (void *)OUTLINED_FUNCTION_3_0();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
  swift_release();
  ScreenSharingInteractionTransport.invalidate()();
}

uint64_t closure #1 in ScreenSharingInteractionSession.invalidate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionSession.invalidate(), 0, 0);
}

uint64_t closure #1 in ScreenSharingInteractionSession.invalidate()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 256))();
  *(void *)(v0 + 32) = v2;
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in ScreenSharingInteractionSession.invalidate();
    return MEMORY[0x1F414A6F8](1);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    OUTLINED_FUNCTION_6();
    return v4();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 32) == 0;
  OUTLINED_FUNCTION_6();
  return v1();
}

uint64_t ScreenSharingInteractionSession.presentRemoteControlOnboarding()()
{
  OUTLINED_FUNCTION_17_2();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_8(v2);
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_25_1(v2, v4, v5, v3);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_3_0();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v7();
}

uint64_t closure #1 in ScreenSharingInteractionSession.presentRemoteControlOnboarding()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlRequest?);
  v4[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Participant();
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = type metadata accessor for RemoteControlRequest(0);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionSession.presentRemoteControlOnboarding(), 0, 0);
}

void closure #1 in ScreenSharingInteractionSession.presentRemoteControlOnboarding()()
{
  uint64_t v37 = v1;
  uint64_t v2 = v1[13];
  OUTLINED_FUNCTION_2();
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 136);
  outlined copy of RemoteControlState(v4);
  swift_retain();
  os_unfair_lock_lock(v3 + 6);
  OUTLINED_FUNCTION_37_16(&v34);
  os_unfair_lock_unlock(v3 + 6);
  if (v0) {
    return;
  }
  outlined consume of RemoteControlState(v4);
  swift_release();
  if ((v34 >> 61) - 1 < 4)
  {
    outlined consume of RemoteControlState(v34);
LABEL_4:
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v1[15], (uint64_t)static Log.screenSharing);
    OUTLINED_FUNCTION_3_13();
    v5();
    OUTLINED_FUNCTION_127_2();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_37();
      unint64_t v35 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v8 = 136315138;
      unint64_t v9 = *(void *)(v2 + 128);
      uint64_t v10 = *(os_unfair_lock_s **)(v2 + 136);
      outlined copy of RemoteControlState(v9);
      swift_retain();
      os_unfair_lock_lock(v10 + 6);
      OUTLINED_FUNCTION_47_13(v36);
      uint64_t v19 = v1[16];
      uint64_t v33 = v1[17];
      uint64_t v31 = v1[15];
      os_unfair_lock_unlock(v10 + 6);
      outlined consume of RemoteControlState(v9);
      swift_release();
      v1[9] = v36[0];
      uint64_t v20 = String.init<A>(reflecting:)();
      v1[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1C2F90000, v6, v7, "Missing receivedRequest, state: %s", v8, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v33, v31);
    }
    else
    {
      swift_release_n();

      OUTLINED_FUNCTION_1_19();
      v11();
    }
    goto LABEL_11;
  }
  if (v34 >> 61) {
    goto LABEL_4;
  }
  uint64_t v12 = v1[23];
  uint64_t v13 = v1[19];
  uint64_t v14 = v1[20];
  uint64_t v32 = v1[18];
  unint64_t v15 = v34;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant, Bool));
  unint64_t v30 = v15;
  uint64_t v17 = swift_projectBox();
  uint64_t v18 = v17 + *(int *)(v16 + 48);
  outlined init with copy of RemoteControlMessage(v17, v12, (void (*)(void))type metadata accessor for RemoteControlRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v18, v32);
  OUTLINED_FUNCTION_180_1();
  RemoteControlStateMachine.presentOnboardingForRemoteControlRequest(_:from:)();
  swift_endAccess();
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  unint64_t v24 = *(void *)(v2 + 128);
  unint64_t v23 = *(os_unfair_lock_s **)(v2 + 136);
  outlined copy of RemoteControlState(v24);
  swift_retain();
  os_unfair_lock_lock(v23 + 6);
  OUTLINED_FUNCTION_47_13(&v35);
  uint64_t v25 = v1[23];
  uint64_t v26 = v1[13];
  os_unfair_lock_unlock(v23 + 6);
  outlined consume of RemoteControlState(v24);
  swift_release();
  unint64_t v27 = v35;
  v36[0] = v35;
  ScreenSharingInteractionController.session(_:didUpdateState:)(v26, v36);

  outlined consume of RemoteControlState(v27);
  OUTLINED_FUNCTION_4_1();
  v28();
  outlined destroy of RemoteControlMessage(v25, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v30);
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  v29();
}

uint64_t ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[16] = v2;
  v1[17] = v0;
  v1[15] = v3;
  uint64_t v4 = type metadata accessor for Participants();
  v1[18] = v4;
  OUTLINED_FUNCTION_1(v4);
  v1[19] = v5;
  v1[20] = OUTLINED_FUNCTION_191();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlMessage?);
  OUTLINED_FUNCTION_8(v6);
  v1[21] = OUTLINED_FUNCTION_191();
  uint64_t v7 = type metadata accessor for RemoteControlResponse(0);
  v1[22] = v7;
  OUTLINED_FUNCTION_8(v7);
  v1[23] = OUTLINED_FUNCTION_191();
  uint64_t v8 = type metadata accessor for RemoteControlMessage(0);
  v1[24] = v8;
  OUTLINED_FUNCTION_8(v8);
  v1[25] = OUTLINED_FUNCTION_28_2();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 240) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  void *v10;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_15();
    v5();
    OUTLINED_FUNCTION_5_8();
    return MEMORY[0x1F4188298](v6, v7, v8);
  }
  else
  {
    OUTLINED_FUNCTION_15();
    v9();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v2 + 264) = v10;
    *uint64_t v10 = v4;
    v10[1] = ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:);
    return ScreenSharingInteractionSession.updateInteractionState()();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 272);
  swift_release();
  v1(v0 + 16);
  outlined destroy of SystemUpdateNotice?(v0 + 16, &demangling cache variable for type metadata for ConversationControlsType?);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

uint64_t ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v61 = v16;
  if ((FTServerBag.remoteControlEnabled.getter() & 1) == 0)
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = (void *)OUTLINED_FUNCTION_30(v19, (uint64_t)static Log.screenSharing);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_104(v21))
    {
      uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v22);
      OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v23, v24, "Dropping outgoing message due to server bag disabling the feature");
      OUTLINED_FUNCTION_3();
    }

LABEL_13:
    OUTLINED_FUNCTION_112_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_7_6();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_180_1();
  uint64_t v17 = OUTLINED_FUNCTION_41_0();
  RemoteControlStateMachine.validateOutgoingMessage(_:to:)(v17, v18);
  uint64_t v26 = v16 + 28;
  uint64_t v25 = v16[28];
  uint64_t v27 = v16[15];
  swift_endAccess();
  outlined init with copy of RemoteControlMessage(v27, v25, (void (*)(void))type metadata accessor for RemoteControlMessage);
  OUTLINED_FUNCTION_41_0();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v29 = type metadata accessor for RemoteControlMessage;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v26 = v16 + 23;
      uint64_t v54 = v16[23];
      uint64_t v55 = v16[22];
      outlined init with take of RemoteControlResponse(v16[28], v54, (void (*)(void))type metadata accessor for RemoteControlResponse);
      if (*(unsigned char *)(v54 + *(int *)(v55 + 28)) == 1)
      {
        uint64_t v56 = (void *)swift_task_alloc();
        v16[29] = v56;
        *uint64_t v56 = v16;
        v56[1] = ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:);
        OUTLINED_FUNCTION_7_6();
        __asm { BRAA            X1, X16 }
      }
      uint64_t v29 = type metadata accessor for RemoteControlResponse;
      goto LABEL_8;
    case 6:
      goto LABEL_13;
    default:
LABEL_8:
      outlined destroy of RemoteControlMessage(*v26, (void (*)(void))v29);
      if (one-time initialization token for screenSharing != -1) {
        swift_once();
      }
      uint64_t v30 = v16[27];
      uint64_t v31 = v16[15];
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Log.screenSharing);
      outlined init with copy of RemoteControlMessage(v31, v30, (void (*)(void))type metadata accessor for RemoteControlMessage);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v36 = v16[27];
      if (v35)
      {
        uint64_t v37 = v16[24];
        uint64_t v38 = v16[21];
        uint64_t v39 = (_DWORD *)OUTLINED_FUNCTION_37();
        uint64_t v60 = OUTLINED_FUNCTION_9_0();
        *uint64_t v39 = 136315138;
        outlined init with copy of RemoteControlMessage(v36, v38, (void (*)(void))type metadata accessor for RemoteControlMessage);
        __swift_storeEnumTagSinglePayload(v38, 0, 1, v37);
        uint64_t v40 = specialized >> prefix<A>(_:)();
        unint64_t v42 = v41;
        outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for RemoteControlMessage?);
        v16[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RemoteControlMessage(v36, (void (*)(void))type metadata accessor for RemoteControlMessage);
        OUTLINED_FUNCTION_268(&dword_1C2F90000, v33, v34, "Sending remote control message: %s");
        OUTLINED_FUNCTION_88_1();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        outlined destroy of RemoteControlMessage(v16[27], (void (*)(void))type metadata accessor for RemoteControlMessage);
      }

      static Participants.only(_:)();
      uint64_t v45 = (void *)swift_task_alloc();
      v16[31] = v45;
      lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
      lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
      *uint64_t v45 = v16;
      v45[1] = ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:);
      OUTLINED_FUNCTION_158_2();
      OUTLINED_FUNCTION_7_6();
      return MEMORY[0x1F40E7610](v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_68_7();
  a23 = v25;
  a24 = v26;
  OUTLINED_FUNCTION_191_1();
  a22 = v24;
  outlined destroy of RemoteControlMessage(v24[23], (void (*)(void))type metadata accessor for RemoteControlResponse);
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v27 = v24[15];
  uint64_t v28 = v24[27];
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.screenSharing);
  outlined init with copy of RemoteControlMessage(v27, v28, (void (*)(void))type metadata accessor for RemoteControlMessage);
  uint64_t v30 = (void *)Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = OUTLINED_FUNCTION_2_12(v31);
  uint64_t v33 = v24[27];
  if (v32)
  {
    a11 = v24 + 14;
    uint64_t v34 = v24[24];
    uint64_t v35 = v24[21];
    OUTLINED_FUNCTION_37();
    a12 = OUTLINED_FUNCTION_9_0();
    a13 = a12;
    OUTLINED_FUNCTION_189_0(4.8149e-34);
    outlined init with copy of RemoteControlMessage(v33, v35, (void (*)(void))type metadata accessor for RemoteControlMessage);
    __swift_storeEnumTagSinglePayload(v35, 0, 1, v34);
    uint64_t v36 = specialized >> prefix<A>(_:)();
    unint64_t v38 = v37;
    outlined destroy of SystemUpdateNotice?(v35, &demangling cache variable for type metadata for RemoteControlMessage?);
    v24[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteControlMessage(v33, (void (*)(void))type metadata accessor for RemoteControlMessage);
    OUTLINED_FUNCTION_188_1(&dword_1C2F90000, v39, v40, "Sending remote control message: %s");
    OUTLINED_FUNCTION_88_1();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined destroy of RemoteControlMessage(v24[27], (void (*)(void))type metadata accessor for RemoteControlMessage);
  }

  static Participants.only(_:)();
  unint64_t v41 = (void *)swift_task_alloc();
  v24[31] = v41;
  lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
  lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
  *unint64_t v41 = v24;
  v41[1] = ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:);
  OUTLINED_FUNCTION_158_2();
  OUTLINED_FUNCTION_73();
  return MEMORY[0x1F40E7610](v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16);
}

#error "1C33A8C44: call analysis failed (funcsize=128)"

#error "1C33A8DC4: call analysis failed (funcsize=61)"

uint64_t ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  outlined destroy of RemoteControlMessage(*(void *)(v10 + 184), (void (*)(void))type metadata accessor for RemoteControlResponse);
  OUTLINED_FUNCTION_181_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_85_4();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  OUTLINED_FUNCTION_181_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_85_4();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t ScreenSharingInteractionSession.beginRemoteControlSession()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_17_7((uint64_t)ScreenSharingInteractionSession.beginRemoteControlSession());
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  ScreenSharingInteractionSession.observeDisplayLayerVisibility()();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

uint64_t ScreenSharingInteractionSession.cancelRemoteControlRequest()()
{
  OUTLINED_FUNCTION_17_2();
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[10] = v2;
  OUTLINED_FUNCTION_1(v2);
  v1[11] = v3;
  v1[12] = OUTLINED_FUNCTION_191();
  uint64_t v4 = type metadata accessor for RemoteControlMessage(0);
  v1[13] = v4;
  OUTLINED_FUNCTION_8(v4);
  v1[14] = OUTLINED_FUNCTION_191();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlRequest?);
  OUTLINED_FUNCTION_8(v5);
  v1[15] = OUTLINED_FUNCTION_191();
  uint64_t v6 = type metadata accessor for Participant();
  v1[16] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[17] = v7;
  v1[18] = OUTLINED_FUNCTION_191();
  uint64_t v8 = type metadata accessor for RemoteControlRequest(0);
  v1[19] = v8;
  OUTLINED_FUNCTION_8(v8);
  v1[20] = OUTLINED_FUNCTION_28_2();
  v1[21] = swift_task_alloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  outlined destroy of RemoteControlMessage(*(void *)(v4 + 112), (void (*)(void))type metadata accessor for RemoteControlMessage);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  uint64_t (*v5)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  OUTLINED_FUNCTION_15();
  v3();
  outlined destroy of RemoteControlMessage(v1, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v2);
  OUTLINED_FUNCTION_176_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_97_4();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

void ScreenSharingInteractionSession.cancelRemoteControlRequest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  OUTLINED_FUNCTION_85_6();
  a27 = v30;
  a28 = v31;
  OUTLINED_FUNCTION_162_1();
  a26 = v28;
  uint64_t v32 = v28[9];
  OUTLINED_FUNCTION_2();
  uint64_t v33 = *(void *)(v32 + 136);
  OUTLINED_FUNCTION_34_20();
  os_unfair_lock_lock(v29);
  OUTLINED_FUNCTION_107_4();
  os_unfair_lock_unlock(v29);
  if (v33 == -16)
  {
    OUTLINED_FUNCTION_53_0();
    unint64_t v34 = v28[5];
    v28[22] = v34;
    switch(v34 >> 61)
    {
      case 1uLL:
        uint64_t v44 = v28[21];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant));
        uint64_t v45 = swift_projectBox();
        outlined init with copy of RemoteControlMessage(v45, v44, (void (*)(void))type metadata accessor for RemoteControlRequest);
        OUTLINED_FUNCTION_69_0();
        OUTLINED_FUNCTION_161_1();
        v46();
        if (one-time initialization token for screenSharing != -1) {
          swift_once();
        }
        uint64_t v48 = v28[20];
        uint64_t v47 = v28[21];
        __swift_project_value_buffer(v28[10], (uint64_t)static Log.screenSharing);
        outlined init with copy of RemoteControlMessage(v47, v48, (void (*)(void))type metadata accessor for RemoteControlRequest);
        uint64_t v49 = (void *)Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        BOOL v51 = OUTLINED_FUNCTION_107(v50);
        uint64_t v52 = v28[20];
        if (v51)
        {
          uint64_t v53 = v28[19];
          a12 = v28 + 8;
          uint64_t v54 = v28[15];
          uint64_t v55 = (_DWORD *)OUTLINED_FUNCTION_37();
          a16 = OUTLINED_FUNCTION_9_0();
          *uint64_t v55 = 136315138;
          outlined init with copy of RemoteControlMessage(v52, v54, (void (*)(void))type metadata accessor for RemoteControlRequest);
          __swift_storeEnumTagSinglePayload(v54, 0, 1, v53);
          uint64_t v56 = specialized >> prefix<A>(_:)();
          unint64_t v58 = v57;
          outlined destroy of SystemUpdateNotice?(v54, &demangling cache variable for type metadata for RemoteControlRequest?);
          v28[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &a16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of RemoteControlMessage(v52, (void (*)(void))type metadata accessor for RemoteControlRequest);
          OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v59, v60, "Cancelling remote control request %s");
          OUTLINED_FUNCTION_88_1();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
          outlined destroy of RemoteControlMessage(v28[20], (void (*)(void))type metadata accessor for RemoteControlRequest);
        }

        outlined init with copy of RemoteControlMessage(v28[21], v28[14], (void (*)(void))type metadata accessor for RemoteControlRequest);
        OUTLINED_FUNCTION_23_0();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_3_26();
        uint64_t v82 = *(void *)(v72 + 536) + **(int **)(v72 + 536);
        uint64_t v83 = v72 + 536;
        uint64_t v73 = (void *)swift_task_alloc();
        v28[23] = v73;
        *uint64_t v73 = v28;
        v73[1] = ScreenSharingInteractionSession.cancelRemoteControlRequest();
        OUTLINED_FUNCTION_78(v28[14]);
        OUTLINED_FUNCTION_41_1();
        v77(v74, v75, v76, v77, v78, v79, v80, v81, a9, a10, a11, a12, v82, v83, a15, a16, a17, a18, a19, a20);
        break;
      case 5uLL:
        goto LABEL_5;
      default:
        unint64_t v34 = outlined consume of RemoteControlState(v34);
LABEL_5:
        if (one-time initialization token for screenSharing != -1) {
          unint64_t v34 = swift_once();
        }
        uint64_t v35 = OUTLINED_FUNCTION_24_35(v34, (uint64_t)static Log.screenSharing);
        v36(v35);
        OUTLINED_FUNCTION_127_2();
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (OUTLINED_FUNCTION_168_2(v38))
        {
          a12 = v28 + 8;
          uint64_t v39 = (uint8_t *)OUTLINED_FUNCTION_37();
          a11 = OUTLINED_FUNCTION_9_0();
          a15 = a11;
          *(_DWORD *)uint64_t v39 = 136315138;
          unint64_t v40 = *(void *)(v32 + 128);
          unint64_t v41 = *(os_unfair_lock_s **)(v32 + 136);
          outlined copy of RemoteControlState(v40);
          swift_retain();
          os_unfair_lock_lock(v41 + 6);
          OUTLINED_FUNCTION_47_13((unint64_t *)&a16);
          uint64_t v61 = v28[11];
          a9 = v28[10];
          a10 = v28[12];
          os_unfair_lock_unlock(v41 + 6);
          outlined consume of RemoteControlState(v40);
          swift_release();
          v28[6] = a16;
          uint64_t v62 = String.init<A>(reflecting:)();
          v28[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &a15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1C2F90000, v37, v38, "No remote control request to cancel, current state: %s", v39, 0xCu);
          OUTLINED_FUNCTION_151();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();

          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(a10, a9);
        }
        else
        {
          swift_release_n();

          uint64_t v42 = OUTLINED_FUNCTION_51_12();
          v43(v42);
        }
        OUTLINED_FUNCTION_176_1();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        OUTLINED_FUNCTION_7_4();
        OUTLINED_FUNCTION_41_1();
        v65(v64, v65, v66, v67, v68, v69, v70, v71, a9, a10, a11, a12, v28 + 6, v28 + 7, a15, a16, a17, a18, a19, a20);
        break;
    }
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
  }
}

uint64_t ScreenSharingInteractionSession.cancelRemoteControlRequest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  uint64_t v11 = *(void *)(v10 + 168);
  unint64_t v12 = *(void *)(v10 + 176);
  OUTLINED_FUNCTION_15();
  v13();
  outlined destroy of RemoteControlMessage(v11, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_85_4();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

uint64_t ScreenSharingInteractionSession.endRemoteControlSession()()
{
  OUTLINED_FUNCTION_17_2();
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for RemoteControlMessage(0);
  v1[10] = v2;
  OUTLINED_FUNCTION_8(v2);
  v1[11] = OUTLINED_FUNCTION_191();
  uint64_t v3 = type metadata accessor for Logger();
  v1[12] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[13] = v4;
  v1[14] = OUTLINED_FUNCTION_28_2();
  v1[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Participant();
  v1[16] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[17] = v6;
  v1[18] = OUTLINED_FUNCTION_191();
  uint64_t v7 = type metadata accessor for RemoteControlRequest(0);
  OUTLINED_FUNCTION_8(v7);
  v1[19] = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  outlined destroy of RemoteControlMessage(*(void *)(v1 + 88), (void (*)(void))type metadata accessor for RemoteControlMessage);
  uint64_t v5 = OUTLINED_FUNCTION_39_19();
  v6(v5);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_98_4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_139_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_139_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

void ScreenSharingInteractionSession.endRemoteControlSession()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_144_2();
  a29 = v32;
  a30 = v33;
  a28 = v31;
  unint64_t v34 = v31 + 9;
  uint64_t v35 = v31[9];
  OUTLINED_FUNCTION_2();
  unint64_t v37 = *(void *)(v35 + 128);
  uint64_t v36 = *(os_unfair_lock_s **)(v35 + 136);
  outlined copy of RemoteControlState(v37);
  swift_retain();
  os_unfair_lock_lock(v36 + 6);
  OUTLINED_FUNCTION_37_16(&a18);
  os_unfair_lock_unlock(v36 + 6);
  if (v30)
  {
    OUTLINED_FUNCTION_33_1();
  }
  else
  {
    outlined consume of RemoteControlState(v37);
    uint64_t v38 = swift_release();
    unint64_t v39 = a18;
    switch(a18 >> 61)
    {
      case 2uLL:
      case 3uLL:
        goto LABEL_14;
      case 4uLL:
        if (*(void *)((a18 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) >> 62 != 1) {
          goto LABEL_4;
        }
LABEL_14:
        uint64_t v60 = v31[19];
        uint64_t v89 = v31[18];
        uint64_t v62 = v31[16];
        uint64_t v61 = v31[17];
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant));
        uint64_t v64 = swift_projectBox();
        uint64_t v65 = v64 + *(int *)(v63 + 48);
        outlined init with copy of RemoteControlMessage(v64, v60, (void (*)(void))type metadata accessor for RemoteControlRequest);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v89, v65, v62);
        uint64_t v66 = outlined consume of RemoteControlState(v39);
        if (one-time initialization token for screenSharing != -1) {
          uint64_t v66 = swift_once();
        }
        uint64_t v67 = OUTLINED_FUNCTION_24_35(v66, (uint64_t)static Log.screenSharing);
        v68(v67);
        OUTLINED_FUNCTION_127_2();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_168_2(v70))
        {
          uint64_t v71 = (_DWORD *)OUTLINED_FUNCTION_37();
          a17 = OUTLINED_FUNCTION_9_0();
          *uint64_t v71 = 136315138;
          unint64_t v72 = *(void *)(v35 + 128);
          uint64_t v73 = *(os_unfair_lock_s **)(v35 + 136);
          outlined copy of RemoteControlState(v72);
          swift_retain();
          os_unfair_lock_lock(v73 + 6);
          OUTLINED_FUNCTION_47_13(&a18);
          uint64_t v75 = v31[13];
          a12 = v31[12];
          a13 = (uint8_t *)v31[15];
          a11 = v31[9];
          os_unfair_lock_unlock(v73 + 6);
          outlined consume of RemoteControlState(v72);
          swift_release();
          v31[7] = a18;
          uint64_t v76 = String.init<A>(reflecting:)();
          v31[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &a17);
          OUTLINED_FUNCTION_195_1();
          swift_bridgeObjectRelease();
          swift_release_n();
          OUTLINED_FUNCTION_335(&dword_1C2F90000, v69, v70, "Ending remote control session for state: %s");
          OUTLINED_FUNCTION_151();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();

          (*(void (**)(uint8_t *, uint64_t))(v75 + 8))(a13, a12);
        }
        else
        {
          swift_release_n();

          OUTLINED_FUNCTION_1_19();
          v74();
        }
        uint64_t v78 = *v34;
        if (*(void *)(*v34 + 96))
        {
          swift_retain();
          AnyCancellable.cancel()();
          swift_release();
          uint64_t v78 = *v34;
        }
        if (*(void *)(v78 + 104))
        {
          swift_retain();
          AnyCancellable.cancel()();
          swift_release();
        }
        outlined init with take of RemoteControlResponse(v31[19], v31[11], (void (*)(void))type metadata accessor for RemoteControlRequest);
        OUTLINED_FUNCTION_23_0();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_3_26();
        uint64_t v90 = *(void *)(v79 + 536) + **(int **)(v79 + 536);
        uint64_t v91 = v79 + 536;
        uint64_t v80 = (void *)swift_task_alloc();
        v31[20] = v80;
        *uint64_t v80 = v31;
        v80[1] = ScreenSharingInteractionSession.endRemoteControlSession();
        OUTLINED_FUNCTION_33_1();
        v84(v81, v82, v83, v84, v85, v86, v87, v88, a9, a10, a11, a12, a13, v31 + 8, v90, v91, a17, a18, a19,
          a20,
          a21,
          a22);
        break;
      case 5uLL:
        goto LABEL_5;
      default:
LABEL_4:
        uint64_t v38 = outlined consume of RemoteControlState(a18);
LABEL_5:
        if (one-time initialization token for screenSharing != -1) {
          uint64_t v38 = swift_once();
        }
        uint64_t v40 = OUTLINED_FUNCTION_24_35(v38, (uint64_t)static Log.screenSharing);
        v41(v40);
        OUTLINED_FUNCTION_127_2();
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)OUTLINED_FUNCTION_37();
          a12 = OUTLINED_FUNCTION_9_0();
          a17 = a12;
          a13 = v44;
          *(_DWORD *)uint64_t v44 = 136315138;
          unint64_t v45 = *(void *)(v35 + 128);
          uint64_t v46 = *(os_unfair_lock_s **)(v35 + 136);
          outlined copy of RemoteControlState(v45);
          swift_retain();
          os_unfair_lock_lock(v46 + 6);
          OUTLINED_FUNCTION_47_13(&a18);
          a10 = v31[12];
          a11 = v31[14];
          os_unfair_lock_unlock(v46 + 6);
          outlined consume of RemoteControlState(v45);
          swift_release();
          v31[5] = a18;
          uint64_t v47 = String.init<A>(reflecting:)();
          v31[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &a17);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1C2F90000, v42, v43, "No remote control session to end, current state: %s", v44, 0xCu);
          OUTLINED_FUNCTION_151();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();

          OUTLINED_FUNCTION_139();
          v49();
        }
        else
        {
          swift_release_n();

          uint64_t v50 = OUTLINED_FUNCTION_178_1();
          v51(v50);
        }
        OUTLINED_FUNCTION_139_2();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        OUTLINED_FUNCTION_7_4();
        OUTLINED_FUNCTION_33_1();
        v53(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, v31 + 5, v31 + 6, v31 + 7, a17, a18, a19,
          a20,
          a21,
          a22);
        break;
    }
  }
}

uint64_t ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v3 = v2;
  *(void *)(v1 + 96) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_8(v4);
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_191();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  *(void *)(v1 + 112) = v5;
  OUTLINED_FUNCTION_8(v5);
  *(void *)(v1 + 120) = OUTLINED_FUNCTION_191();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>.Publisher);
  *(void *)(v1 + 128) = v6;
  OUTLINED_FUNCTION_8(v6);
  *(void *)(v1 + 136) = OUTLINED_FUNCTION_191();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>);
  *(void *)(v1 + 144) = v7;
  OUTLINED_FUNCTION_1(v7);
  *(void *)(v1 + 152) = v8;
  *(void *)(v1 + 160) = *(void *)(v9 + 64);
  *(void *)(v1 + 168) = OUTLINED_FUNCTION_28_2();
  *(void *)(v1 + 176) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RemoteControlMessage(0);
  *(void *)(v1 + 184) = v10;
  OUTLINED_FUNCTION_8(v10);
  *(void *)(v1 + 192) = OUTLINED_FUNCTION_191();
  uint64_t v11 = type metadata accessor for RemoteControlSuspendRequest(0);
  *(void *)(v1 + 200) = v11;
  OUTLINED_FUNCTION_8(v11);
  *(void *)(v1 + 208) = OUTLINED_FUNCTION_191();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlRequest?);
  OUTLINED_FUNCTION_8(v12);
  *(void *)(v1 + 216) = OUTLINED_FUNCTION_191();
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v1 + 224) = v13;
  OUTLINED_FUNCTION_1(v13);
  *(void *)(v1 + 232) = v14;
  *(void *)(v1 + 240) = OUTLINED_FUNCTION_28_2();
  *(void *)(v1 + 248) = swift_task_alloc();
  *(void *)(v1 + 256) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Participant();
  *(void *)(v1 + 264) = v15;
  OUTLINED_FUNCTION_1(v15);
  *(void *)(v1 + 272) = v16;
  *(void *)(v1 + 280) = OUTLINED_FUNCTION_28_2();
  *(void *)(v1 + 288) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for RemoteControlRequest(0);
  *(void *)(v1 + 296) = v17;
  OUTLINED_FUNCTION_8(v17);
  *(void *)(v1 + 304) = OUTLINED_FUNCTION_28_2();
  *(void *)(v1 + 312) = swift_task_alloc();
  *(void *)(v1 + 320) = swift_task_alloc();
  *(unsigned char *)(v1 + 352) = *v3;
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 344) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  outlined destroy of RemoteControlMessage(*(void *)(v1 + 192), (void (*)(void))type metadata accessor for RemoteControlMessage);
  uint64_t v5 = OUTLINED_FUNCTION_39_19();
  v6(v5);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_98_4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

void ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_145_2();
  a31 = v34;
  a32 = v35;
  a30 = v33;
  uint64_t v36 = *(void *)(v33 + 96);
  OUTLINED_FUNCTION_2();
  unint64_t v38 = *(void *)(v36 + 128);
  unint64_t v37 = *(os_unfair_lock_s **)(v36 + 136);
  outlined copy of RemoteControlState(v38);
  swift_retain();
  os_unfair_lock_lock(v37 + 6);
  OUTLINED_FUNCTION_37_16(&a18);
  os_unfair_lock_unlock(v37 + 6);
  if (v32)
  {
    OUTLINED_FUNCTION_31_28();
  }
  else
  {
    outlined consume of RemoteControlState(v38);
    swift_release();
    unint64_t v39 = a18;
    switch(a18 >> 61)
    {
      case 3uLL:
        uint64_t v48 = *(void *)(v33 + 320);
        uint64_t v49 = *(void *)(v33 + 288);
        uint64_t v51 = *(void *)(v33 + 264);
        uint64_t v50 = *(void *)(v33 + 272);
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant));
        uint64_t v53 = swift_projectBox();
        uint64_t v54 = v53 + *(int *)(v52 + 48);
        outlined init with copy of RemoteControlMessage(v53, v48, (void (*)(void))type metadata accessor for RemoteControlRequest);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v54, v51);
        char v55 = 0;
        goto LABEL_11;
      case 4uLL:
        if (*(void *)((a18 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) >> 61 == 3
          && *(unsigned char *)((a18 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == 1)
        {
          int v69 = *(unsigned __int8 *)(v33 + 352);
          uint64_t v70 = *(void *)(v33 + 312);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant));
          uint64_t v71 = swift_projectBox();
          outlined init with copy of RemoteControlMessage(v71, v70, (void (*)(void))type metadata accessor for RemoteControlRequest);
          OUTLINED_FUNCTION_94();
          v72();
          if (v69 != 1)
          {
            outlined init with take of RemoteControlResponse(*(void *)(v33 + 312), *(void *)(v33 + 320), (void (*)(void))type metadata accessor for RemoteControlRequest);
            uint64_t v127 = OUTLINED_FUNCTION_41_0();
            v128(v127);
            char v55 = 1;
LABEL_11:
            *(unsigned char *)(v33 + 353) = v55;
            outlined consume of RemoteControlState(v39);
            if (one-time initialization token for screenSharing != -1) {
              swift_once();
            }
            uint64_t v56 = __swift_project_value_buffer(*(void *)(v33 + 224), (uint64_t)static Log.screenSharing);
            *(void *)(v33 + 328) = v56;
            uint64_t v57 = OUTLINED_FUNCTION_23_0();
            outlined init with copy of RemoteControlMessage(v57, v58, v59);
            uint64_t v60 = Logger.logObject.getter();
            os_log_type_t v61 = static os_log_type_t.default.getter();
            BOOL v62 = OUTLINED_FUNCTION_2_12(v61);
            uint64_t v63 = *(void *)(v33 + 304);
            if (v62)
            {
              uint64_t v64 = *(void *)(v33 + 216);
              uint64_t v65 = (_DWORD *)OUTLINED_FUNCTION_37();
              a20 = OUTLINED_FUNCTION_9_0();
              *uint64_t v65 = 136315138;
              a15 = v65 + 1;
              outlined init with copy of RemoteControlMessage(v63, v64, (void (*)(void))type metadata accessor for RemoteControlRequest);
              uint64_t v66 = OUTLINED_FUNCTION_192_0();
              unint64_t v68 = v67;
              outlined destroy of SystemUpdateNotice?(v64, &demangling cache variable for type metadata for RemoteControlRequest?);
              *(void *)(v33 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, &a20);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined destroy of RemoteControlMessage(v63, (void (*)(void))type metadata accessor for RemoteControlRequest);
              OUTLINED_FUNCTION_335(&dword_1C2F90000, v60, (os_log_type_t)v56, "Suspending remote control session: %s");
              OUTLINED_FUNCTION_88_1();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              outlined destroy of RemoteControlMessage(*(void *)(v33 + 304), (void (*)(void))type metadata accessor for RemoteControlRequest);
            }

            char v96 = *(unsigned char *)(v33 + 352);
            uint64_t v97 = *(void *)(v33 + 320);
            uint64_t v99 = *(void *)(v33 + 200);
            uint64_t v98 = *(void *)(v33 + 208);
            uint64_t v100 = *(void *)(v33 + 192);
            uint64_t v101 = *(void *)(v33 + 96);
            type metadata accessor for UUID();
            OUTLINED_FUNCTION_4();
            OUTLINED_FUNCTION_191();
            OUTLINED_FUNCTION_2_1();
            v102();
            outlined destroy of RemoteControlMessage(v97, (void (*)(void))type metadata accessor for RemoteControlRequest);
            Date.init()();
            uint64_t v103 = OUTLINED_FUNCTION_172_2();
            v104(v103);
            *(unsigned char *)(v98 + *(int *)(v99 + 24)) = v96;
            swift_task_dealloc();
            outlined init with copy of RemoteControlMessage(v98, v100, (void (*)(void))type metadata accessor for RemoteControlSuspendRequest);
            swift_storeEnumTagMultiPayload();
            uint64_t v136 = *(void *)(*(void *)v101 + 536) + **(int **)(*(void *)v101 + 536);
            uint64_t v139 = *(void *)v101 + 536;
            uint64_t v105 = (void *)swift_task_alloc();
            *(void *)(v33 + 336) = v105;
            *uint64_t v105 = v33;
            v105[1] = ScreenSharingInteractionSession.suspendRemoteControlSession(reason:);
            OUTLINED_FUNCTION_78(*(void *)(v33 + 192));
            OUTLINED_FUNCTION_31_28();
            v109(v106, v107, v108, v109, v110, v111, v112, v113, a9, a10, a11, a12, a13, a14, a15, v136, v139, a18, a19,
              a20,
              a21,
              a22,
              a23,
              a24);
            return;
          }
          if (one-time initialization token for screenSharing != -1) {
            swift_once();
          }
          uint64_t v73 = (void *)OUTLINED_FUNCTION_30(*(void *)(v33 + 224), (uint64_t)static Log.screenSharing);
          os_log_type_t v74 = static os_log_type_t.default.getter();
          if (OUTLINED_FUNCTION_2_12(v74))
          {
            uint64_t v75 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_180(v75);
            OUTLINED_FUNCTION_69_4(&dword_1C2F90000, v76, v77, "Remote control session is already suspended w/ deviceActivity.");
            OUTLINED_FUNCTION_3();
          }
          uint64_t v78 = *(void *)(v33 + 312);

          uint64_t v79 = OUTLINED_FUNCTION_39_19();
          v80(v79);
          outlined destroy of RemoteControlMessage(v78, (void (*)(void))type metadata accessor for RemoteControlRequest);
        }
        else
        {
          if (one-time initialization token for screenSharing != -1) {
            swift_once();
          }
          uint64_t v84 = *(void *)(v33 + 256);
          uint64_t v86 = *(void *)(v33 + 224);
          uint64_t v85 = *(void *)(v33 + 232);
          uint64_t v87 = __swift_project_value_buffer(v86, (uint64_t)static Log.screenSharing);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v84, v87, v86);
          swift_retain_n();
          uint64_t v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.default.getter();
          if (OUTLINED_FUNCTION_168_2(v89))
          {
            os_log_type_t v133 = v89;
            uint64_t v138 = v88;
            uint64_t v90 = (_DWORD *)OUTLINED_FUNCTION_37();
            a19 = OUTLINED_FUNCTION_9_0();
            *uint64_t v90 = 136315138;
            unint64_t v91 = *(void *)(v36 + 128);
            uint64_t v92 = *(os_unfair_lock_s **)(v36 + 136);
            outlined copy of RemoteControlState(v91);
            swift_retain();
            os_unfair_lock_lock(v92 + 6);
            OUTLINED_FUNCTION_47_13((unint64_t *)&a20);
            a11 = *(void *)(v33 + 224);
            a10 = *(void *)(v33 + 96);
            os_unfair_lock_unlock(v92 + 6);
            outlined consume of RemoteControlState(v91);
            swift_release();
            *(void *)(v33 + 80) = a20;
            uint64_t v93 = String.init<A>(reflecting:)();
            *(void *)(v33 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &a19);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_190();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_268(&dword_1C2F90000, v138, v133, "Remote control session is already suspended: %s");
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();

            OUTLINED_FUNCTION_139();
            v95();
          }
          else
          {
            uint64_t v114 = *(void *)(v33 + 256);
            uint64_t v115 = *(void *)(v33 + 224);
            uint64_t v116 = *(void *)(v33 + 232);

            swift_release_n();
            (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v114, v115);
          }
        }
        outlined consume of RemoteControlState(v39);
LABEL_33:
        OUTLINED_FUNCTION_81_6();
        uint64_t v129 = v118;
        uint64_t v131 = v117;
        uint64_t v134 = *(void *)(v33 + 168);
        uint64_t v135 = *(void *)(v33 + 136);
        uint64_t v137 = *(void *)(v33 + 120);
        uint64_t v140 = *(void *)(v33 + 104);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        OUTLINED_FUNCTION_7_4();
        OUTLINED_FUNCTION_31_28();
        v120(v119, v120, v121, v122, v123, v124, v125, v126, a9, a10, a11, v129, v131, v134, v135, v137, v140, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24);
        break;
      case 5uLL:
        goto LABEL_5;
      default:
        outlined consume of RemoteControlState(a18);
LABEL_5:
        if (one-time initialization token for screenSharing != -1) {
          swift_once();
        }
        __swift_project_value_buffer(*(void *)(v33 + 224), (uint64_t)static Log.screenSharing);
        OUTLINED_FUNCTION_3_13();
        v40();
        swift_retain_n();
        unint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v41, v42))
        {
          os_log_type_t v43 = (_DWORD *)OUTLINED_FUNCTION_37();
          a19 = OUTLINED_FUNCTION_9_0();
          *os_log_type_t v43 = 136315138;
          unint64_t v44 = *(void *)(v36 + 128);
          unint64_t v45 = *(os_unfair_lock_s **)(v36 + 136);
          outlined copy of RemoteControlState(v44);
          swift_retain();
          os_unfair_lock_lock(v45 + 6);
          OUTLINED_FUNCTION_47_13((unint64_t *)&a20);
          uint64_t v81 = *(void *)(v33 + 232);
          uint64_t v130 = *(void *)(v33 + 224);
          uint64_t v132 = *(void *)(v33 + 248);
          os_unfair_lock_unlock(v45 + 6);
          outlined consume of RemoteControlState(v44);
          swift_release();
          *(void *)(v33 + 40) = a20;
          uint64_t v82 = String.init<A>(reflecting:)();
          *(void *)(v33 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, &a19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_335(&dword_1C2F90000, v41, v42, "No active remote control session to suspend: %s");
          OUTLINED_FUNCTION_151();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();

          (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v132, v130);
        }
        else
        {

          swift_release_n();
          uint64_t v46 = OUTLINED_FUNCTION_110_3();
          v47(v46);
        }
        goto LABEL_33;
    }
  }
}

void ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  OUTLINED_FUNCTION_85_6();
  a27 = v29;
  a28 = v30;
  OUTLINED_FUNCTION_162_1();
  a26 = v28;
  uint64_t v31 = *(void *)(v28 + 344);
  uint64_t v32 = *(void *)(v28 + 96);
  outlined destroy of RemoteControlMessage(*(void *)(v28 + 208), (void (*)(void))type metadata accessor for RemoteControlSuspendRequest);
  unint64_t v34 = *(void *)(v32 + 128);
  uint64_t v33 = *(os_unfair_lock_s **)(v32 + 136);
  outlined copy of RemoteControlState(v34);
  swift_retain();
  os_unfair_lock_lock(v33 + 6);
  OUTLINED_FUNCTION_47_13(&a16);
  if (v31)
  {
    os_unfair_lock_unlock(v33 + 6);
    OUTLINED_FUNCTION_41_1();
    return;
  }
  os_unfair_lock_unlock(v33 + 6);
  outlined consume of RemoteControlState(v34);
  swift_release();
  unint64_t v35 = a16;
  outlined consume of RemoteControlState(a16);
  if (v35 >> 61 == 4)
  {
    char v36 = *(unsigned char *)(v28 + 353);
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    if (v36)
    {
      if (v39)
      {
        *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
        OUTLINED_FUNCTION_102_1(&dword_1C2F90000, v37, v38, "Not starting observer to resume remote control, remote control session was already suspended");
        OUTLINED_FUNCTION_3();
      }

      goto LABEL_17;
    }
    if (v39)
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_102_1(&dword_1C2F90000, v37, v38, "Starting observer to resume remote control when suspension conditions end");
      OUTLINED_FUNCTION_3();
    }
    uint64_t v47 = *(void *)(v28 + 152);
    uint64_t v83 = *(void *)(v28 + 160);
    uint64_t v48 = *(void *)(v28 + 104);
    uint64_t v49 = *(void *)(v28 + 96);

    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v50 + 128))();
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v51 + 128))();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<DeviceInactivityObserver.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>.Publisher);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
    Publishers.CombineLatest.init(_:_:)();
    uint64_t v52 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_25_1(v48, v53, v54, v52);
    uint64_t v55 = swift_allocObject();
    swift_weakInit();
    OUTLINED_FUNCTION_2_1();
    v56();
    unint64_t v57 = (v83 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = 0;
    *(void *)(v58 + 24) = 0;
    OUTLINED_FUNCTION_63_0();
    v59();
    *(void *)(v58 + v57) = v55;
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:), v58);
    type metadata accessor for AnyCancellable();
    OUTLINED_FUNCTION_8_9();
    uint64_t v60 = AnyCancellable.init(_:)();
    OUTLINED_FUNCTION_4_1();
    v61();
    *(void *)(v49 + 104) = v60;
  }
  else
  {
    OUTLINED_FUNCTION_2_1();
    v40();
    swift_retain_n();
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = *(void *)(v28 + 96);
      unint64_t v44 = (_DWORD *)OUTLINED_FUNCTION_37();
      a15 = OUTLINED_FUNCTION_9_0();
      _DWORD *v44 = 136315138;
      unint64_t v46 = *(void *)(v43 + 128);
      unint64_t v45 = *(os_unfair_lock_s **)(v43 + 136);
      outlined copy of RemoteControlState(v46);
      swift_retain();
      os_unfair_lock_lock(v45 + 6);
      OUTLINED_FUNCTION_47_13(&a16);
      uint64_t v79 = *(void *)(v28 + 232);
      uint64_t v81 = *(void *)(v28 + 224);
      uint64_t v84 = *(void *)(v28 + 240);
      os_unfair_lock_unlock(v45 + 6);
      outlined consume of RemoteControlState(v46);
      swift_release();
      *(void *)(v28 + 56) = a16;
      uint64_t v64 = String.init<A>(reflecting:)();
      *(void *)(v28 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_190();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_335(&dword_1C2F90000, v41, v42, "Could not suspend remote control from current state: %s");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v84, v81);
    }
    else
    {

      swift_release_n();
      uint64_t v62 = OUTLINED_FUNCTION_110_3();
      v63(v62);
    }
    if (!*(void *)(*(void *)(v28 + 96) + 104)) {
      goto LABEL_17;
    }
    swift_retain();
    AnyCancellable.cancel()();
  }
  swift_release();
LABEL_17:
  OUTLINED_FUNCTION_81_6();
  uint64_t v76 = v67;
  uint64_t v77 = v66;
  uint64_t v78 = *(void *)(v28 + 168);
  uint64_t v80 = *(void *)(v28 + 136);
  uint64_t v82 = *(void *)(v28 + 120);
  uint64_t v85 = *(void *)(v28 + 104);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_41_1();
  v69(v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v80, v82, v85, a15, a16, a17, a18, a19, a20);
}

void ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)()
{
  outlined destroy of RemoteControlMessage(*(void *)(v0 + 208), (void (*)(void))type metadata accessor for RemoteControlSuspendRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_7_6();
  __asm { BRAA            X1, X16 }
}

uint64_t closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>>);
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>>.Iterator);
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:), 0, 0);
}

#error "1C33ABC4C: call analysis failed (funcsize=79)"

uint64_t closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;

  *(_WORD *)(v0 + 154) = *(_WORD *)(v0 + 152);
  return OUTLINED_FUNCTION_17_7((uint64_t)closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:));
}

{
  uint64_t v0;
  os_log_type_t v1;
  __int16 v2;
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD *v7;
  const char *v8;
  void (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  os_log_type_t v25;
  _WORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_49_0();
  uint64_t v2 = *(_WORD *)(v0 + 154);
  if ((v2 & 0xFF00) == 0x200 || (Strong = swift_weakLoadStrong(), (*(void *)(v0 + 128) = Strong) == 0))
  {
    OUTLINED_FUNCTION_15();
    v9();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_167();
    __asm { BRAA            X1, X16 }
  }
  if (!*(unsigned char *)(v0 + 154))
  {
    if ((v2 & 0x100) == 0)
    {
      if (one-time initialization token for screenSharing != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      uint64_t v13 = (void *)OUTLINED_FUNCTION_30(v12, (uint64_t)static Log.screenSharing);
      uint64_t v14 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_12(v14))
      {
        uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_180(v15);
        OUTLINED_FUNCTION_69_4(&dword_1C2F90000, v16, v17, "User is no longer controlling their device and no layers are hidden, resuming remote control");
        OUTLINED_FUNCTION_3();
      }

      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v18;
      *uint64_t v18 = v0;
      v18[1] = closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:);
      OUTLINED_FUNCTION_167();
      __asm { BRAA            X1, X16 }
    }
    goto LABEL_25;
  }
  if (*(unsigned char *)(v0 + 154) == 1)
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v5 = OUTLINED_FUNCTION_30(v4, (uint64_t)static Log.screenSharing);
    uint64_t v6 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v7);
      uint64_t v8 = "User is currently controlling their device, will wait before resuming remote control";
LABEL_29:
      OUTLINED_FUNCTION_102_1(&dword_1C2F90000, v5, v1, v8);
      OUTLINED_FUNCTION_3();
      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if ((v2 & 0x100) != 0)
  {
LABEL_25:
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v5 = OUTLINED_FUNCTION_30(v24, (uint64_t)static Log.screenSharing);
    uint64_t v25 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v25))
    {
      uint64_t v26 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v26);
      uint64_t v8 = "Waiting for user to navigate away from hidden layers before resuming remote control";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v5 = OUTLINED_FUNCTION_30(v21, (uint64_t)static Log.screenSharing);
  uint64_t v22 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v22))
  {
    uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v23);
    uint64_t v8 = "Waiting for device inactivity state to update before resuming remote control";
    goto LABEL_29;
  }
LABEL_30:
  swift_release();

  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>>.Iterator);
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)OUTLINED_FUNCTION_146_1(v27);
  *uint64_t v28 = v29;
  v28[1] = closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:);
  OUTLINED_FUNCTION_48_13();
  OUTLINED_FUNCTION_167();
  return MEMORY[0x1F4187C78](v30);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 40) = *(void *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>>.Iterator);
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_146_1(v0);
  *uint64_t v1 = v2;
  v1[1] = closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:);
  uint64_t v3 = OUTLINED_FUNCTION_48_13();
  return MEMORY[0x1F4187C78](v3);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_1_19();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v1();
}

void closure #2 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  JUMPOUT(0x1C8773690);
}

uint64_t ScreenSharingInteractionSession.resumeRemoteControlSession()()
{
  OUTLINED_FUNCTION_17_2();
  v1[10] = v0;
  uint64_t v2 = type metadata accessor for RemoteControlMessage(0);
  v1[11] = v2;
  OUTLINED_FUNCTION_8(v2);
  v1[12] = OUTLINED_FUNCTION_191();
  uint64_t v3 = type metadata accessor for Logger();
  v1[13] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[14] = v4;
  v1[15] = OUTLINED_FUNCTION_28_2();
  v1[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Participant();
  v1[17] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[18] = v6;
  v1[19] = OUTLINED_FUNCTION_191();
  uint64_t v7 = type metadata accessor for RemoteControlRequest(0);
  OUTLINED_FUNCTION_8(v7);
  v1[20] = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  outlined destroy of RemoteControlMessage(*(void *)(v4 + 96), (void (*)(void))type metadata accessor for RemoteControlMessage);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void (*v3)(void);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  OUTLINED_FUNCTION_15();
  v3();
  outlined destroy of RemoteControlMessage(v1, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  uint64_t (*v5)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  OUTLINED_FUNCTION_15();
  v3();
  outlined destroy of RemoteControlMessage(v1, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_98_4();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

void ScreenSharingInteractionSession.resumeRemoteControlSession()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_144_2();
  a29 = v31;
  a30 = v32;
  a28 = v30;
  uint64_t v33 = v30[10];
  OUTLINED_FUNCTION_2();
  unint64_t v35 = *(void *)(v33 + 128);
  unint64_t v34 = *(os_unfair_lock_s **)(v33 + 136);
  outlined copy of RemoteControlState(v35);
  swift_retain();
  os_unfair_lock_lock(v34 + 6);
  OUTLINED_FUNCTION_107_4();
  os_unfair_lock_unlock(v34 + 6);
  if (v34 != (os_unfair_lock_s *)-16)
  {
    OUTLINED_FUNCTION_33_1();
    return;
  }
  outlined consume of RemoteControlState(v35);
  swift_release();
  unint64_t v36 = v30[5];
  v30[21] = v36;
  if ((v36 >> 61) < 4) {
    goto LABEL_4;
  }
  if (v36 >> 61 != 4) {
    goto LABEL_5;
  }
  if (*(void *)((v36 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) >> 61 != 3)
  {
LABEL_4:
    unint64_t v36 = outlined consume of RemoteControlState(v36);
LABEL_5:
    if (one-time initialization token for screenSharing != -1) {
      unint64_t v36 = swift_once();
    }
    uint64_t v37 = OUTLINED_FUNCTION_24_35(v36, (uint64_t)static Log.screenSharing);
    v38(v37);
    OUTLINED_FUNCTION_127_2();
    BOOL v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v39, v40))
    {
      a16 = v30 + 8;
      unint64_t v41 = (uint8_t *)OUTLINED_FUNCTION_37();
      a15 = OUTLINED_FUNCTION_9_0();
      a17 = a15;
      *(_DWORD *)unint64_t v41 = 136315138;
      unint64_t v43 = *(void *)(v33 + 128);
      os_log_type_t v42 = *(os_unfair_lock_s **)(v33 + 136);
      outlined copy of RemoteControlState(v43);
      swift_retain();
      os_unfair_lock_lock(v42 + 6);
      OUTLINED_FUNCTION_47_13(&a18);
      uint64_t v61 = v30[14];
      a13 = v30[13];
      a14 = v30[15];
      a11 = v30 + 7;
      a12 = v30[10];
      os_unfair_lock_unlock(v42 + 6);
      outlined consume of RemoteControlState(v43);
      swift_release();
      v30[6] = a18;
      uint64_t v62 = String.init<A>(reflecting:)();
      v30[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1C2F90000, v39, v40, "No active remote control session to resume, state: %s", v41, 0xCu);
      OUTLINED_FUNCTION_88_1();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(a14, a13);
    }
    else
    {
      swift_release_n();

      uint64_t v44 = OUTLINED_FUNCTION_51_12();
      v45(v44);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_33_1();
    v65(v64, v65, v66, v67, v68, v69, v70, v71, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    return;
  }
  uint64_t v46 = v30[20];
  uint64_t v84 = v30[19];
  uint64_t v48 = v30[17];
  uint64_t v47 = v30[18];
  uint64_t v85 = v30[10];
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant));
  uint64_t v50 = swift_projectBox();
  uint64_t v51 = v50 + *(int *)(v49 + 48);
  outlined init with copy of RemoteControlMessage(v50, v46, (void (*)(void))type metadata accessor for RemoteControlRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v84, v51, v48);
  if (*(void *)(v85 + 104))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v30[13], (uint64_t)static Log.screenSharing);
  OUTLINED_FUNCTION_161_1();
  v52();
  swift_retain_n();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_168_2(v54))
  {
    uint64_t v55 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v84 = OUTLINED_FUNCTION_9_0();
    a17 = v84;
    *uint64_t v55 = 136315138;
    unint64_t v57 = *(void *)(v33 + 128);
    uint64_t v56 = *(os_unfair_lock_s **)(v33 + 136);
    outlined copy of RemoteControlState(v57);
    swift_retain();
    os_unfair_lock_lock(v56 + 6);
    OUTLINED_FUNCTION_47_13(&a18);
    a12 = v30[13];
    a13 = v30[16];
    a10 = v30[10];
    a11 = (void *)v30[14];
    os_unfair_lock_unlock(v56 + 6);
    outlined consume of RemoteControlState(v57);
    swift_release();
    v30[8] = a18;
    uint64_t v58 = String.init<A>(reflecting:)();
    v30[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &a17);
    OUTLINED_FUNCTION_195_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_190();
    OUTLINED_FUNCTION_268(&dword_1C2F90000, v53, v54, "Resuming remote control session: %s");
    OUTLINED_FUNCTION_151();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    OUTLINED_FUNCTION_26_2();
    v60();
  }
  else
  {
    swift_release_n();

    uint64_t v72 = OUTLINED_FUNCTION_178_1();
    v73(v72);
  }
  outlined init with copy of RemoteControlMessage(v30[20], v30[12], (void (*)(void))type metadata accessor for RemoteControlRequest);
  OUTLINED_FUNCTION_23_0();
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_3_26();
  uint64_t v86 = *(void *)(v74 + 536) + **(int **)(v74 + 536);
  uint64_t v87 = v74 + 536;
  uint64_t v75 = (void *)swift_task_alloc();
  v30[22] = v75;
  *uint64_t v75 = v30;
  v75[1] = ScreenSharingInteractionSession.resumeRemoteControlSession();
  OUTLINED_FUNCTION_33_1();
  v79(v76, v77, v78, v79, v80, v81, v82, v83, a9, a10, a11, a12, a13, v84, v86, v87, a17, a18, a19, a20, a21, a22);
}

void ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_2_3();
  uint64_t v81 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlMessage?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_221();
  type metadata accessor for Participant();
  OUTLINED_FUNCTION_4();
  uint64_t v88 = v16;
  os_log_t v89 = v15;
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = MEMORY[0x1F4188790](v15);
  uint64_t v86 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v83 = (char *)&v74 - v20;
  uint64_t v87 = type metadata accessor for RemoteControlMessage(0);
  OUTLINED_FUNCTION_4();
  uint64_t v84 = v21;
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v85 = (uint64_t)&v74 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v74 - v28;
  if (FTServerBag.remoteControlEnabled.getter())
  {
    uint64_t v80 = v9;
    swift_beginAccess();
    uint64_t v82 = v5;
    RemoteControlStateMachine.validateIncomingMessage(_:from:)(v5, v3);
    uint64_t v35 = v3;
    uint64_t v77 = v0;
    swift_endAccess();
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Log.screenSharing);
    uint64_t v37 = v82;
    uint64_t v38 = OUTLINED_FUNCTION_172_2();
    outlined init with copy of RemoteControlMessage(v38, v39, v40);
    uint64_t v41 = v88;
    uint64_t v78 = *(void *)(v88 + 16);
    uint64_t v79 = v88 + 16;
    OUTLINED_FUNCTION_2_1();
    v42();
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    int v45 = v44;
    uint64_t v76 = v43;
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v46 = OUTLINED_FUNCTION_15_1();
      uint64_t v75 = OUTLINED_FUNCTION_14_3();
      v91[0] = v75;
      *(_DWORD *)uint64_t v46 = 136315394;
      uint64_t v74 = v46 + 4;
      outlined init with copy of RemoteControlMessage((uint64_t)v29, v1, (void (*)(void))type metadata accessor for RemoteControlMessage);
      uint64_t v47 = OUTLINED_FUNCTION_183_0();
      unint64_t v49 = v48;
      outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for RemoteControlMessage?);
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RemoteControlMessage((uint64_t)v29, (void (*)(void))type metadata accessor for RemoteControlMessage);
      *(_WORD *)(v46 + 12) = 2080;
      LODWORD(v74) = v45;
      uint64_t v50 = v81;
      uint64_t v87 = v35;
      os_log_t v51 = v89;
      OUTLINED_FUNCTION_2_1();
      v52();
      OUTLINED_FUNCTION_31_13();
      __swift_storeEnumTagSinglePayload(v53, v54, v55, (uint64_t)v51);
      uint64_t v56 = specialized >> prefix<A>(_:)(v50);
      unint64_t v58 = v57;
      outlined destroy of SystemUpdateNotice?(v50, (uint64_t *)&demangling cache variable for type metadata for Participant?);
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v41 = v88;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_15();
      v59();
      uint64_t v60 = v76;
      _os_log_impl(&dword_1C2F90000, v76, (os_log_type_t)v74, "Handling remote control message: %s from participant: %s", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      uint64_t v37 = v82;
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined destroy of RemoteControlMessage((uint64_t)v29, (void (*)(void))type metadata accessor for RemoteControlMessage);
      OUTLINED_FUNCTION_15();
      v61();
    }
    uint64_t v62 = (uint64_t)v80;
    uint64_t v63 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_25_1(v62, v64, v65, v63);
    uint64_t v66 = v85;
    outlined init with copy of RemoteControlMessage(v37, v85, (void (*)(void))type metadata accessor for RemoteControlMessage);
    uint64_t v67 = v86;
    os_log_t v68 = v89;
    OUTLINED_FUNCTION_2_1();
    v69();
    unint64_t v70 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v71 = (v23 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v72 = (*(unsigned __int8 *)(v41 + 80) + v71 + 8) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = 0;
    *(void *)(v73 + 24) = 0;
    outlined init with take of RemoteControlResponse(v66, v73 + v70, (void (*)(void))type metadata accessor for RemoteControlMessage);
    *(void *)(v73 + v71) = v77;
    (*(void (**)(unint64_t, char *, os_log_t))(v41 + 32))(v73 + v72, v67, v68);
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
    OUTLINED_FUNCTION_28();
  }
  else
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    os_log_t v89 = (os_log_t)OUTLINED_FUNCTION_30(v30, (uint64_t)static Log.screenSharing);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v31))
    {
      uint64_t v32 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1C2F90000, v89, v31, "Dropping incoming message due to server bag disabling the feature", v32, 2u);
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_28();
  }
}

uint64_t closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  type metadata accessor for RemoteControlResponse(0);
  v6[8] = swift_task_alloc();
  type metadata accessor for RemoteControlRequest(0);
  v6[9] = swift_task_alloc();
  v6[10] = type metadata accessor for RemoteControlMessage(0);
  v6[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:), 0, 0);
}

uint64_t closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:)()
{
  OUTLINED_FUNCTION_17_2();
  outlined init with copy of RemoteControlMessage(v0[5], v0[11], (void (*)(void))type metadata accessor for RemoteControlMessage);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of RemoteControlResponse(v0[11], v0[8], (void (*)(void))type metadata accessor for RemoteControlResponse);
      uint64_t v3 = (void *)swift_task_alloc();
      v0[13] = (uint64_t)v3;
      *uint64_t v3 = v0;
      v3[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:);
      OUTLINED_FUNCTION_78(v0[8]);
      uint64_t result = ScreenSharingInteractionSession.handleRemoteControlResponse(_:)();
      break;
    case 2u:
      uint64_t v4 = (void *)swift_task_alloc();
      v0[14] = (uint64_t)v4;
      *uint64_t v4 = v0;
      v4[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:);
      uint64_t result = ScreenSharingInteractionSession.handleRemoteControlCancellation()();
      break;
    case 3u:
      uint64_t v5 = (void *)swift_task_alloc();
      v0[15] = (uint64_t)v5;
      *uint64_t v5 = v0;
      v5[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:);
      uint64_t result = ScreenSharingInteractionSession.handleRemoteControlSessionEnded()();
      break;
    case 4u:
      uint64_t v6 = (void *)swift_task_alloc();
      v0[16] = (uint64_t)v6;
      *uint64_t v6 = v0;
      v6[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:);
      uint64_t result = ScreenSharingInteractionSession.handleRemoteControlSuspended()();
      break;
    case 5u:
      uint64_t v7 = (void *)swift_task_alloc();
      v0[17] = (uint64_t)v7;
      *uint64_t v7 = v0;
      v7[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:);
      uint64_t result = ScreenSharingInteractionSession.handleRemoteControlResumed()();
      break;
    case 6u:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_6();
      uint64_t result = v8();
      break;
    default:
      outlined init with take of RemoteControlResponse(v0[11], v0[9], (void (*)(void))type metadata accessor for RemoteControlRequest);
      uint64_t v1 = (void *)swift_task_alloc();
      v0[12] = (uint64_t)v1;
      *uint64_t v1 = v0;
      v1[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:);
      OUTLINED_FUNCTION_78(v0[9]);
      uint64_t result = ScreenSharingInteractionSession.handleRemoteControlRequest(_:from:)();
      break;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

#error "1C33ADDE4: call analysis failed (funcsize=62)"

#error "1C33ADFA8: call analysis failed (funcsize=62)"

#error "1C33AE2FC: call analysis failed (funcsize=62)"

uint64_t ScreenSharingInteractionSession.handleRemoteControlRequest(_:from:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[17] = v2;
  v1[18] = v0;
  v1[16] = v3;
  uint64_t v4 = type metadata accessor for RemoteControlMessage(0);
  v1[19] = v4;
  OUTLINED_FUNCTION_8(v4);
  v1[20] = OUTLINED_FUNCTION_191();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlResponse?);
  OUTLINED_FUNCTION_8(v5);
  v1[21] = OUTLINED_FUNCTION_191();
  uint64_t v6 = type metadata accessor for RemoteControlResponse(0);
  v1[22] = v6;
  OUTLINED_FUNCTION_8(v6);
  v1[23] = OUTLINED_FUNCTION_28_2();
  v1[24] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlRequest?);
  OUTLINED_FUNCTION_8(v7);
  v1[25] = OUTLINED_FUNCTION_191();
  uint64_t v8 = type metadata accessor for RemoteControlRequest(0);
  v1[26] = v8;
  OUTLINED_FUNCTION_8(v8);
  v1[27] = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 240);
  swift_release();
  v1(v0 + 64);
  outlined destroy of SystemUpdateNotice?(v0 + 64, &demangling cache variable for type metadata for ConversationControlsType?);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 160);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v7 = v6;
  *(void *)(v8 + 280) = v0;
  swift_task_dealloc();
  outlined destroy of RemoteControlMessage(v5, (void (*)(void))type metadata accessor for RemoteControlMessage);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  outlined destroy of RemoteControlMessage(v0[24], (void (*)(void))type metadata accessor for RemoteControlResponse);
  OUTLINED_FUNCTION_55_11();
  v0[36] = *(void *)(v1 + 672);
  v0[37] = (v1 + 672) & 0xFFFFFFFFFFFFLL | 0x31C4000000000000;
  type metadata accessor for MainActor();
  v0[38] = OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 288);
  swift_release();
  v1(v0 + 16);
  outlined destroy of SystemUpdateNotice?(v0 + 16, &demangling cache variable for type metadata for ConversationControlsType?);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t *v0;
  void *v1;
  os_log_type_t v2;
  BOOL v3;
  void *v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_28_0();
  outlined destroy of RemoteControlMessage(v0[24], (void (*)(void))type metadata accessor for RemoteControlResponse);
  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  uint64_t v3 = OUTLINED_FUNCTION_2_12(v2);
  uint64_t v4 = (void *)v0[35];
  if (v3)
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_180(v5);
    OUTLINED_FUNCTION_69_4(&dword_1C2F90000, v6, v7, "Error sending auto-rejection, but we're still not allowing control");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_55_11();
  v0[36] = *(void *)(v8 + 672);
  v0[37] = (v8 + 672) & 0xFFFFFFFFFFFFLL | 0x31C4000000000000;
  type metadata accessor for MainActor();
  v0[38] = OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlRequest(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_68_7();
  a23 = v25;
  a24 = v26;
  OUTLINED_FUNCTION_191_1();
  a22 = v24;
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB00]), sel_initWithContactsDataSource_, *(void *)(*(void *)(v24 + 144) + 152));
  *(void *)(v24 + 224) = v27;
  type metadata accessor for TUHandle();
  uint64_t v28 = Participant.handle.getter();
  id v30 = TUHandle.init(destinationID:)(v28, v29);
  *(void *)(v24 + 232) = v30;
  if (objc_msgSend(v27, sel_isHandleEligibleForScreenSharingRequests_, v30))
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v31 = *(void *)(v24 + 128);
    uint64_t v32 = *(void *)(v24 + 216);
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.screenSharing);
    outlined init with copy of RemoteControlMessage(v31, v32, (void (*)(void))type metadata accessor for RemoteControlRequest);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    BOOL v36 = OUTLINED_FUNCTION_107(v35);
    uint64_t v37 = *(void *)(v24 + 216);
    if (v36)
    {
      uint64_t v38 = *(void *)(v24 + 200);
      uint64_t v39 = (uint8_t *)OUTLINED_FUNCTION_37();
      a13 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v39 = 136315138;
      outlined init with copy of RemoteControlMessage(v37, v38, (void (*)(void))type metadata accessor for RemoteControlRequest);
      uint64_t v40 = OUTLINED_FUNCTION_192_0();
      unint64_t v42 = v41;
      outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for RemoteControlRequest?);
      *(void *)(v24 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RemoteControlMessage(v37, (void (*)(void))type metadata accessor for RemoteControlRequest);
      _os_log_impl(&dword_1C2F90000, v34, (os_log_type_t)v32, "Handling remote control request: %s", v39, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined destroy of RemoteControlMessage(*(void *)(v24 + 216), (void (*)(void))type metadata accessor for RemoteControlRequest);
    }

    *(void *)(v24 + 64) = Participant.displayName.getter();
    *(void *)(v24 + 72) = v62;
    *(unsigned char *)(v24 + 104) = 3;
    OUTLINED_FUNCTION_4_19();
    *(void *)(v24 + 240) = *(void *)(v63 + 672);
    *(void *)(v24 + 248) = (v63 + 672) & 0xFFFFFFFFFFFFLL | 0x31C4000000000000;
    type metadata accessor for MainActor();
    *(void *)(v24 + 256) = OUTLINED_FUNCTION_57();
    OUTLINED_FUNCTION_47_4();
    OUTLINED_FUNCTION_35_0();
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_73();
    return MEMORY[0x1F4188298](v64, v65, v66);
  }
  else
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    *(void *)(v24 + 264) = __swift_project_value_buffer(v43, (uint64_t)static Log.screenSharing);
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1C2F90000, v44, v45, "Received remote control request from ineligble contact: sending auto-rejection", v46, 2u);
      OUTLINED_FUNCTION_3();
    }
    uint64_t v48 = *(void *)(v24 + 184);
    uint64_t v47 = *(void *)(v24 + 192);
    uint64_t v49 = *(void *)(v24 + 176);

    UUID.init()();
    int v50 = v47 + *(_DWORD *)(v49 + 20);
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_351();
    OUTLINED_FUNCTION_124();
    v51();
    Date.init()();
    *(unsigned char *)(v47 + *(int *)(v49 + 28)) = 0;
    outlined init with copy of RemoteControlMessage(v47, v48, (void (*)(void))type metadata accessor for RemoteControlResponse);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    BOOL v54 = OUTLINED_FUNCTION_2_12(v53);
    uint64_t v55 = *(void *)(v24 + 184);
    if (v54)
    {
      uint64_t v57 = *(void *)(v24 + 168);
      uint64_t v56 = *(void *)(v24 + 176);
      unint64_t v58 = (_DWORD *)OUTLINED_FUNCTION_37();
      a13 = OUTLINED_FUNCTION_9_0();
      *unint64_t v58 = 136315138;
      a10 = v58 + 1;
      outlined init with copy of RemoteControlMessage(v55, v57, (void (*)(void))type metadata accessor for RemoteControlResponse);
      __swift_storeEnumTagSinglePayload(v57, 0, 1, v56);
      uint64_t v59 = specialized >> prefix<A>(_:)();
      unint64_t v61 = v60;
      outlined destroy of SystemUpdateNotice?(v57, &demangling cache variable for type metadata for RemoteControlResponse?);
      *(void *)(v24 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RemoteControlMessage(v55, (void (*)(void))type metadata accessor for RemoteControlResponse);
      OUTLINED_FUNCTION_335(&dword_1C2F90000, v52, (os_log_type_t)v50, "Sending rejection: %s");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined destroy of RemoteControlMessage(*(void *)(v24 + 184), (void (*)(void))type metadata accessor for RemoteControlResponse);
    }

    outlined init with copy of RemoteControlMessage(*(void *)(v24 + 192), *(void *)(v24 + 160), (void (*)(void))type metadata accessor for RemoteControlResponse);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_3_26();
    uint64_t v79 = *(void *)(v68 + 536) + **(int **)(v68 + 536);
    uint64_t v80 = v68 + 536;
    uint64_t v69 = (void *)swift_task_alloc();
    *(void *)(v24 + 272) = v69;
    void *v69 = v24;
    v69[1] = ScreenSharingInteractionSession.handleRemoteControlRequest(_:from:);
    OUTLINED_FUNCTION_78(*(void *)(v24 + 160));
    OUTLINED_FUNCTION_73();
    return v73(v70, v71, v72, v73, v74, v75, v76, v77, a9, a10, v79, v80, a13, a14, a15, a16);
  }
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlRequest(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  uint64_t v11 = *(void **)(v10 + 224);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_85_4();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlResponse(_:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlResponse?);
  OUTLINED_FUNCTION_8(v3);
  v1[5] = OUTLINED_FUNCTION_191();
  uint64_t v4 = type metadata accessor for RemoteControlResponse(0);
  v1[6] = v4;
  OUTLINED_FUNCTION_8(v4);
  v1[7] = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  unsigned char *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlResponse(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_68_7();
  a23 = v25;
  a24 = v26;
  OUTLINED_FUNCTION_191_1();
  a22 = v24;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v27 = v24[3];
  uint64_t v28 = v24[7];
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.screenSharing);
  outlined init with copy of RemoteControlMessage(v27, v28, (void (*)(void))type metadata accessor for RemoteControlResponse);
  id v30 = (void *)Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = OUTLINED_FUNCTION_2_12(v31);
  uint64_t v33 = v24[7];
  if (v32)
  {
    uint64_t v35 = v24[5];
    uint64_t v34 = v24[6];
    OUTLINED_FUNCTION_37();
    a13 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_189_0(4.8149e-34);
    outlined init with copy of RemoteControlMessage(v33, v35, (void (*)(void))type metadata accessor for RemoteControlResponse);
    __swift_storeEnumTagSinglePayload(v35, 0, 1, v34);
    uint64_t v36 = specialized >> prefix<A>(_:)();
    unint64_t v38 = v37;
    outlined destroy of SystemUpdateNotice?(v35, &demangling cache variable for type metadata for RemoteControlResponse?);
    void v24[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteControlMessage(v33, (void (*)(void))type metadata accessor for RemoteControlResponse);
    OUTLINED_FUNCTION_188_1(&dword_1C2F90000, v39, v40, "Handling remote control response: %s");
    OUTLINED_FUNCTION_88_1();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined destroy of RemoteControlMessage(v24[7], (void (*)(void))type metadata accessor for RemoteControlResponse);
  }

  unint64_t v41 = (void *)swift_task_alloc();
  v24[8] = v41;
  *unint64_t v41 = v24;
  v41[1] = ScreenSharingInteractionSession.handleRemoteControlResponse(_:);
  OUTLINED_FUNCTION_73();
  return ScreenSharingInteractionSession.updateInteractionState()();
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlCancellation()()
{
  *(void *)(v1 + 64) = v0;
  return OUTLINED_FUNCTION_17_7((uint64_t)ScreenSharingInteractionSession.handleRemoteControlCancellation());
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_30(v1, (uint64_t)static Log.screenSharing);
  uint64_t v3 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_104(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v4);
    OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v5, v6, "Handling remote control cancellation");
    OUTLINED_FUNCTION_3();
  }

  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(unsigned char *)(v0 + 56) = -1;
  OUTLINED_FUNCTION_4_19();
  *(void *)(v0 + 72) = *(void *)(v7 + 672);
  *(void *)(v0 + 80) = (v7 + 672) & 0xFFFFFFFFFFFFLL | 0x31C4000000000000;
  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 72);
  swift_release();
  v1(v0 + 16);
  outlined destroy of SystemUpdateNotice?(v0 + 16, &demangling cache variable for type metadata for ConversationControlsType?);
  OUTLINED_FUNCTION_6();
  return v2();
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlSessionEnded()()
{
  OUTLINED_FUNCTION_17_2();
  *(void *)(v1 + 64) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v2;
  void *v2 = v1;
  v2[1] = ScreenSharingInteractionSession.handleRemoteControlSessionEnded();
  return ScreenSharingInteractionSession.updateInteractionState()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_30(v1, (uint64_t)static Log.screenSharing);
  uint64_t v3 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_104(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v4);
    OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v5, v6, "Handling end remote control session");
    OUTLINED_FUNCTION_3();
  }

  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(unsigned char *)(v0 + 56) = -1;
  OUTLINED_FUNCTION_4_19();
  *(void *)(v0 + 80) = *(void *)(v7 + 672);
  *(void *)(v0 + 88) = (v7 + 672) & 0xFFFFFFFFFFFFLL | 0x31C4000000000000;
  type metadata accessor for MainActor();
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 80);
  swift_release();
  v1(v0 + 16);
  outlined destroy of SystemUpdateNotice?(v0 + 16, &demangling cache variable for type metadata for ConversationControlsType?);
  OUTLINED_FUNCTION_6();
  return v2();
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlSuspended()()
{
  return OUTLINED_FUNCTION_17_7((uint64_t)ScreenSharingInteractionSession.handleRemoteControlSuspended());
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_30(v0, (uint64_t)static Log.screenSharing);
  uint64_t v2 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_104(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v3);
    OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v4, v5, "Handling suspended remote control session");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_6();
  return v6();
}

uint64_t ScreenSharingInteractionSession.handleRemoteControlResumed()()
{
  return OUTLINED_FUNCTION_17_7((uint64_t)ScreenSharingInteractionSession.handleRemoteControlResumed());
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_30(v0, (uint64_t)static Log.screenSharing);
  uint64_t v2 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_104(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v3);
    OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v4, v5, "Handling resumed remote control session");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_6();
  return v6();
}

uint64_t ScreenSharingInteractionSession.observeInteractionState()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<InteractionState>.Publisher);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_3_2();
  uint64_t result = (*(uint64_t (**)(void))(v3 + 256))();
  if (result)
  {
    PlaybackServer.$interactionState.getter();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<InteractionState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<InteractionState>.Publisher);
    uint64_t v5 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_336();
    v6();
    *(void *)(v1 + 120) = v5;
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in ScreenSharingInteractionSession.observeInteractionState()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for InteractionState();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F99CE8], v3);
    char v9 = static InteractionState.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v9)
    {
      if (one-time initialization token for screenSharing != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Log.screenSharing);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1C2F90000, v11, v12, "Suspending remote control due to local device activity", v13, 2u);
        MEMORY[0x1C87760E0](v13, -1, -1);
      }

      uint64_t v14 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v14);
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = v8;
      _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ScreenSharingInteractionSession.observeInteractionState(), (uint64_t)v15);
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionSession.observeInteractionState()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 32) = 1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)a4 + 568) + **(int **)(*(void *)a4 + 568));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in closure #1 in ScreenSharingInteractionSession.observeInteractionState();
  return v7(v4 + 32);
}

uint64_t closure #1 in closure #1 in ScreenSharingInteractionSession.observeInteractionState()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_5_8();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_6();
    return v10();
  }
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_6();
  return v0();
}

void ScreenSharingInteractionSession.observeDisplayLayerVisibility()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v0;
  OUTLINED_FUNCTION_3_2();
  uint64_t v24 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_62();
  uint64_t v23 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v12 + 128))();
  uint64_t v13 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_25_1(v1, v14, v15, v13);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  OUTLINED_FUNCTION_2_1();
  v17();
  unint64_t v18 = (v9 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  OUTLINED_FUNCTION_63_0();
  v20();
  *(void *)(v19 + v18) = v16;
  *(void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v23, (uint64_t)&async function pointer to partial apply for closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility(), v19);
  type metadata accessor for AnyCancellable();
  OUTLINED_FUNCTION_8_9();
  uint64_t v21 = AnyCancellable.init(_:)();
  OUTLINED_FUNCTION_10_6();
  v22();
  *(void *)(v2 + 96) = v21;
  swift_release();
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>);
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v5[14] = v8;
  v5[15] = *(void *)(v8 - 8);
  v5[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility(), 0, 0);
}

uint64_t closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility()()
{
  OUTLINED_FUNCTION_17_2();
  ContinuousClock.init()();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_100_2();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility();
  OUTLINED_FUNCTION_5_8();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_1_19();
  v7();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_28_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 160) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 194) = *(unsigned char *)(v0 + 192);
  return OUTLINED_FUNCTION_17_7((uint64_t)closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility());
}

{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  OUTLINED_FUNCTION_49_0();
  if (*(unsigned char *)(v0 + 194) == 2 || (Strong = swift_weakLoadStrong(), (*(void *)(v0 + 168) = Strong) == 0))
  {
    OUTLINED_FUNCTION_15();
    v7();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_167();
    __asm { BRAA            X1, X16 }
  }
  if (*(unsigned char *)(v0 + 194))
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_30(v10, (uint64_t)static Log.screenSharing);
    uint64_t v12 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v12))
    {
      uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_180(v13);
      OUTLINED_FUNCTION_69_4(&dword_1C2F90000, v14, v15, "Suspending remote control due to layers being hidden from cloned display");
      OUTLINED_FUNCTION_3();
    }

    *(unsigned char *)(v0 + 193) = 2;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v16;
    *uint64_t v16 = v0;
    v16[1] = closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility();
    OUTLINED_FUNCTION_167();
    __asm { BRAA            X2, X16 }
  }
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_147_2(v2);
  *uint64_t v3 = v4;
  v3[1] = closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility();
  OUTLINED_FUNCTION_48_13();
  OUTLINED_FUNCTION_167();
  return MEMORY[0x1F4187C78](v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 40) = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_147_2(v0);
  *uint64_t v1 = v2;
  v1[1] = closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility();
  uint64_t v3 = OUTLINED_FUNCTION_48_13();
  return MEMORY[0x1F4187C78](v3);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_51_12();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v2();
}

#error "1C33B070C: call analysis failed (funcsize=79)"

uint64_t ScreenSharingInteractionSession.updateInteractionState()()
{
  OUTLINED_FUNCTION_17_2();
  v1[9] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionState?);
  OUTLINED_FUNCTION_8(v2);
  v1[10] = OUTLINED_FUNCTION_191();
  uint64_t v3 = type metadata accessor for InteractionState();
  v1[11] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[12] = v4;
  v1[13] = OUTLINED_FUNCTION_28_2();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_50();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 256))();
  *(void *)(v0 + 136) = v2;
  if (v2)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 144) = OUTLINED_FUNCTION_57();
    OUTLINED_FUNCTION_47_4();
    OUTLINED_FUNCTION_35_0();
    OUTLINED_FUNCTION_39_1();
    return MEMORY[0x1F4188298](v3, v4, v5);
  }
  else
  {
    OUTLINED_FUNCTION_134();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  PlaybackServer.interactionState.getter();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  swift_release();
  v1(v2, v3);
  uint64_t v4 = OUTLINED_FUNCTION_110_3();
  ((void (*)(uint64_t))v1)(v4);
  OUTLINED_FUNCTION_134();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_97_4();
  return v6(v5, v6, v7, v8, v9, v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void (*v3)(void);
  id v4;
  id v5;
  void *v6;
  os_log_type_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  void *v18;
  uint64_t v19;

  OUTLINED_FUNCTION_55();
  unint64_t v18 = v0;
  uint64_t v2 = (void *)v0[22];
  uint64_t v3 = (void (*)(void))v0[20];
  swift_release();
  OUTLINED_FUNCTION_12_1();
  v3();
  OUTLINED_FUNCTION_351();
  OUTLINED_FUNCTION_12_1();
  v3();
  uint64_t v4 = v2;
  uint64_t v5 = v2;
  uint64_t v6 = (void *)Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v7))
  {
    uint64_t v8 = (void *)v0[22];
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_140_1(4.8149e-34);
    *(void *)(v1 + 40) = v8;
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    OUTLINED_FUNCTION_27_29();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v12, v13, "Failed to update interaction state %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v14 = (void *)v0[22];
  }
  OUTLINED_FUNCTION_134();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v15();
}

void ScreenSharingInteractionSession.updateInteractionState()(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11, os_log_t log, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_144_2();
  a29 = v33;
  a30 = v34;
  a28 = v31;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_34_20();
  os_unfair_lock_lock(v32);
  OUTLINED_FUNCTION_37_16(&a18);
  os_unfair_lock_unlock(v32);
  if (v30)
  {
    OUTLINED_FUNCTION_33_1();
  }
  else
  {
    uint64_t v71 = (uint64_t)(v31 + 7);
    OUTLINED_FUNCTION_53_0();
    unint64_t v35 = a18;
    OUTLINED_FUNCTION_165_0();
    if (v37)
    {
      if ((v36 & 0xC) != 0)
      {
        unint64_t v38 = (void *)v31[15];
        uint64_t v39 = v31[11];
        uint64_t v40 = v31[12];
        unint64_t v41 = (unsigned int *)MEMORY[0x1E4F99CF0];
      }
      else
      {
        unint64_t v38 = (void *)v31[15];
        uint64_t v39 = v31[11];
        uint64_t v40 = v31[12];
        unint64_t v41 = (unsigned int *)MEMORY[0x1E4F99CE8];
      }
    }
    else
    {
      unint64_t v38 = (void *)v31[15];
      uint64_t v39 = v31[11];
      uint64_t v40 = v31[12];
      void *v38 = 0x3FF0000000000000;
      unint64_t v41 = (unsigned int *)MEMORY[0x1E4F99CE0];
    }
    (*(void (**)(void *, void, uint64_t))(v40 + 104))(v38, *v41, v39);
    outlined consume of RemoteControlState(v35);
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v42 = v31[12];
    uint64_t v43 = type metadata accessor for Logger();
    v31[19] = __swift_project_value_buffer(v43, (uint64_t)static Log.screenSharing);
    os_log_type_t v44 = *(void (**)(void))(v42 + 16);
    OUTLINED_FUNCTION_94();
    v44();
    uint64_t v72 = (uint64_t)v44;
    OUTLINED_FUNCTION_94();
    v44();
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    HIDWORD(a13) = v46;
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = v31[13];
    uint64_t v49 = v31[14];
    uint64_t v50 = v31[12];
    if (v47)
    {
      log = v45;
      uint64_t v51 = v31[10];
      uint64_t v52 = OUTLINED_FUNCTION_15_1();
      a11 = OUTLINED_FUNCTION_14_3();
      a18 = a11;
      *(_DWORD *)uint64_t v52 = 136315394;
      OUTLINED_FUNCTION_94();
      v53();
      a14 = v48;
      uint64_t v54 = OUTLINED_FUNCTION_182_1();
      a10 = v49;
      unint64_t v56 = v55;
      outlined destroy of SystemUpdateNotice?(v51, &demangling cache variable for type metadata for InteractionState?);
      v31[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, (uint64_t *)&a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v57 = *(void (**)(void))(v50 + 8);
      OUTLINED_FUNCTION_101_2();
      v57();
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v71 = v52 + 14;
      OUTLINED_FUNCTION_94();
      v58();
      uint64_t v59 = OUTLINED_FUNCTION_182_1();
      unint64_t v61 = v60;
      outlined destroy of SystemUpdateNotice?(v51, &demangling cache variable for type metadata for InteractionState?);
      v31[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, (uint64_t *)&a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_101_2();
      v57();
      _os_log_impl(&dword_1C2F90000, log, BYTE4(a13), "Updating interaction state from %s to %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      uint64_t v57 = *(void (**)(void))(v50 + 8);
      OUTLINED_FUNCTION_101_2();
      v57();
      OUTLINED_FUNCTION_101_2();
      v57();
    }
    v31[20] = v57;
    uint64_t v62 = (void *)swift_task_alloc();
    v31[21] = v62;
    *uint64_t v62 = v31;
    v62[1] = ScreenSharingInteractionSession.updateInteractionState();
    OUTLINED_FUNCTION_78(v31[15]);
    OUTLINED_FUNCTION_33_1();
    MEMORY[0x1F414A710](v63, v64, v65, v66, v67, v68, v69, v70, a9, a10, a11, log, a13, a14, v71, v72, v31 + 8, a18, a19,
      a20,
      a21,
      a22);
  }
}

uint64_t RemoteControlState.interactionState(displayScale:)@<X0>(double *a1@<X8>)
{
  OUTLINED_FUNCTION_165_0();
  if (v5)
  {
    if ((v4 & 0xC) != 0) {
      uint64_t v7 = (unsigned int *)MEMORY[0x1E4F99CF0];
    }
    else {
      uint64_t v7 = (unsigned int *)MEMORY[0x1E4F99CE8];
    }
  }
  else
  {
    double v6 = v2;
    if (v3) {
      double v6 = 1.0;
    }
    *a1 = v6;
    uint64_t v7 = (unsigned int *)MEMORY[0x1E4F99CE0];
  }
  uint64_t v8 = *v7;
  type metadata accessor for InteractionState();
  OUTLINED_FUNCTION_0();
  uint64_t v11 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v10 + 104);
  return v11(a1, v8, v9);
}

Swift::Void __swiftcall ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)(Swift::Bool allowRemoteControl)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_60();
  uint64_t v5 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = v1;
  *(unsigned char *)(v6 + 40) = allowRemoteControl;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v5);
  swift_retain();
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    OUTLINED_FUNCTION_26_2();
    v8();
    if (*(void *)(v6 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Actor.unownedExecutor.getter();
      swift_unknownObjectRelease();
    }
  }
  swift_task_create();
  swift_release();
}

uint64_t closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 240) = a5;
  *(void *)(v5 + 80) = a4;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 88) = v6;
  *(void *)(v5 + 96) = *(void *)(v6 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  *(void *)(v5 + 112) = type metadata accessor for RemoteControlMessage(0);
  *(void *)(v5 + 120) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  *(void *)(v5 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlResponse?);
  *(void *)(v5 + 136) = swift_task_alloc();
  *(void *)(v5 + 144) = type metadata accessor for RemoteControlResponse(0);
  *(void *)(v5 + 152) = swift_task_alloc();
  *(void *)(v5 + 160) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Participant();
  *(void *)(v5 + 168) = v7;
  *(void *)(v5 + 176) = *(void *)(v7 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  *(void *)(v5 + 192) = swift_task_alloc();
  type metadata accessor for RemoteControlRequest(0);
  *(void *)(v5 + 200) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:), 0, 0);
}

void closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_log_t log, uint64_t type, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_145_2();
  a31 = v34;
  a32 = v35;
  a30 = v32;
  uint64_t v36 = *(void *)(v32 + 80);
  OUTLINED_FUNCTION_2();
  uint64_t v37 = *(void *)(v36 + 136);
  OUTLINED_FUNCTION_34_20();
  os_unfair_lock_lock(v33);
  OUTLINED_FUNCTION_107_4();
  os_unfair_lock_unlock(v33);
  if (v37 != -16)
  {
    OUTLINED_FUNCTION_31_28();
    return;
  }
  uint64_t v38 = OUTLINED_FUNCTION_53_0();
  unint64_t v39 = *(void *)(v32 + 40);
  *(void *)(v32 + 208) = v39;
  if ((v39 >> 61) - 1 < 4)
  {
    uint64_t v38 = outlined consume of RemoteControlState(v39);
LABEL_10:
    if (one-time initialization token for screenSharing != -1) {
      uint64_t v38 = swift_once();
    }
    uint64_t v75 = OUTLINED_FUNCTION_24_35(v38, (uint64_t)static Log.screenSharing);
    v76(v75);
    OUTLINED_FUNCTION_127_2();
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      a18 = v32 + 64;
      uint64_t v79 = (uint8_t *)OUTLINED_FUNCTION_37();
      a17 = OUTLINED_FUNCTION_9_0();
      a19 = a17;
      *(_DWORD *)uint64_t v79 = 136315138;
      unint64_t v80 = *(void *)(v36 + 128);
      uint64_t v81 = *(os_unfair_lock_s **)(v36 + 136);
      outlined copy of RemoteControlState(v80);
      swift_retain();
      os_unfair_lock_lock(v81 + 6);
      OUTLINED_FUNCTION_47_13((unint64_t *)&a20);
      uint64_t v84 = *(void *)(v32 + 96);
      log = *(os_log_t *)(v32 + 88);
      type = *(void *)(v32 + 104);
      a13 = v32 + 56;
      a14 = *(void *)(v32 + 80);
      os_unfair_lock_unlock(v81 + 6);
      outlined consume of RemoteControlState(v80);
      swift_release();
      *(void *)(v32 + 48) = a20;
      uint64_t v85 = String.init<A>(reflecting:)();
      *(void *)(v32 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, &a19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1C2F90000, v77, v78, "Dropping user response due to missing receivedRequest, state: %s", v79, 0xCu);
      OUTLINED_FUNCTION_88_1();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, os_log_t))(v84 + 8))(type, log);
    }
    else
    {
      swift_release_n();

      uint64_t v82 = OUTLINED_FUNCTION_51_12();
      v83(v82);
    }
    OUTLINED_FUNCTION_116_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_31_28();
    v88(v87, v88, v89, v90, v91, v92, v93, v94, a9, a10, a11, a12, a13, a14, log, type, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24);
    return;
  }
  if (v39 >> 61) {
    goto LABEL_10;
  }
  uint64_t v40 = *(void *)(v32 + 200);
  uint64_t v41 = *(void *)(v32 + 176);
  uint64_t v42 = *(void *)(v32 + 160);
  uint64_t v43 = *(void *)(v32 + 144);
  os_log_type_t typea = *(unsigned char *)(v32 + 240);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant, Bool));
  uint64_t v44 = swift_projectBox();
  outlined init with copy of RemoteControlMessage(v44, v40, (void (*)(void))type metadata accessor for RemoteControlRequest);
  os_log_type_t v46 = *(void (**)(void))(v41 + 16);
  uint64_t v45 = v41 + 16;
  uint64_t v106 = v46;
  OUTLINED_FUNCTION_94();
  v47();
  UUID.init()();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_124();
  v48();
  Date.init()();
  *(unsigned char *)(v42 + *(int *)(v43 + 28)) = typea;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v49 = *(void *)(v32 + 160);
  uint64_t v50 = *(void *)(v32 + 152);
  __swift_project_value_buffer(*(void *)(v32 + 88), (uint64_t)static Log.screenSharing);
  outlined init with copy of RemoteControlMessage(v49, v50, (void (*)(void))type metadata accessor for RemoteControlResponse);
  OUTLINED_FUNCTION_94();
  v106();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  LODWORD(type) = v52;
  BOOL v53 = os_log_type_enabled(v51, v52);
  uint64_t v54 = *(void *)(v32 + 176);
  uint64_t v55 = *(void *)(v32 + 152);
  if (v53)
  {
    a12 = *(void *)(v32 + 184);
    a13 = v45;
    a10 = v32 + 72;
    a11 = *(void *)(v32 + 168);
    log = v51;
    uint64_t v56 = *(void *)(v32 + 136);
    uint64_t v57 = *(void *)(v32 + 144);
    uint64_t v58 = *(void *)(v32 + 128);
    uint64_t v59 = *(void *)(v32 + 176);
    uint64_t v60 = OUTLINED_FUNCTION_15_1();
    a14 = OUTLINED_FUNCTION_14_3();
    a20 = a14;
    *(_DWORD *)uint64_t v60 = 136315394;
    a9 = v60 + 4;
    outlined init with copy of RemoteControlMessage(v55, v56, (void (*)(void))type metadata accessor for RemoteControlResponse);
    OUTLINED_FUNCTION_31_13();
    __swift_storeEnumTagSinglePayload(v61, v62, v63, v57);
    uint64_t v64 = specialized >> prefix<A>(_:)();
    unint64_t v66 = v65;
    outlined destroy of SystemUpdateNotice?(v56, &demangling cache variable for type metadata for RemoteControlResponse?);
    *(void *)(v32 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, &a20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteControlMessage(v55, (void (*)(void))type metadata accessor for RemoteControlResponse);
    *(_WORD *)(v60 + 12) = 2080;
    OUTLINED_FUNCTION_2_1();
    v67();
    OUTLINED_FUNCTION_31_13();
    __swift_storeEnumTagSinglePayload(v68, v69, v70, a11);
    specialized >> prefix<A>(_:)(v58);
    outlined destroy of SystemUpdateNotice?(v58, (uint64_t *)&demangling cache variable for type metadata for Participant?);
    uint64_t v71 = OUTLINED_FUNCTION_69_0();
    *(void *)(v32 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v73);
    OUTLINED_FUNCTION_195_1();
    swift_bridgeObjectRelease();
    uint64_t v74 = *(void (**)(void))(v59 + 8);
    OUTLINED_FUNCTION_336();
    v74();
    _os_log_impl(&dword_1C2F90000, log, (os_log_type_t)type, "Sending remote control response %s to %s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined destroy of RemoteControlMessage(*(void *)(v32 + 152), (void (*)(void))type metadata accessor for RemoteControlResponse);
    uint64_t v74 = *(void (**)(void))(v54 + 8);
    OUTLINED_FUNCTION_12_1();
    v74();
  }
  *(void *)(v32 + 216) = v74;
  outlined init with copy of RemoteControlMessage(*(void *)(v32 + 160), *(void *)(v32 + 120), (void (*)(void))type metadata accessor for RemoteControlResponse);
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_3_26();
  uint64_t v107 = *(void *)(v95 + 536) + **(int **)(v95 + 536);
  uint64_t v108 = v95 + 536;
  char v96 = (void *)swift_task_alloc();
  *(void *)(v32 + 224) = v96;
  *char v96 = v32;
  v96[1] = closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:);
  OUTLINED_FUNCTION_78(*(void *)(v32 + 120));
  OUTLINED_FUNCTION_31_28();
  v100(v97, v98, v99, v100, v101, v102, v103, v104, a9, a10, a11, a12, a13, a14, log, type, v107, v108, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

uint64_t closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 232) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  outlined destroy of RemoteControlMessage(*(void *)(v4 + 120), (void (*)(void))type metadata accessor for RemoteControlMessage);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t *v0;
  unint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = v0[26];
  uint64_t v2 = (void (*)(void))v0[27];
  uint64_t v3 = v0[25];
  outlined destroy of RemoteControlMessage(v0[20], (void (*)(void))type metadata accessor for RemoteControlResponse);
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_15();
  v2();
  outlined destroy of RemoteControlMessage(v3, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v1);
  OUTLINED_FUNCTION_116_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v4();
}

uint64_t closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_68_7();
  OUTLINED_FUNCTION_191_1();
  unint64_t v17 = v16[26];
  unint64_t v18 = (void (*)(void))v16[27];
  uint64_t v19 = v16[25];
  uint64_t v29 = v16[17];
  uint64_t v30 = v16[16];
  uint64_t v31 = v16[15];
  uint64_t v32 = v16[13];
  outlined destroy of RemoteControlMessage(v16[20], (void (*)(void))type metadata accessor for RemoteControlResponse);
  OUTLINED_FUNCTION_351();
  OUTLINED_FUNCTION_15();
  v18();
  outlined destroy of RemoteControlMessage(v19, (void (*)(void))type metadata accessor for RemoteControlRequest);
  outlined consume of RemoteControlState(v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_73();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, v29, v30, v31, v32, a14, a15, a16);
}

void ScreenSharingInteractionSession.updateHUDActivity(type:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for HUDActivityManager.BannerUpdate(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v50 = (uint64_t)&v48 - v9;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.screenSharing);
  swift_retain_n();
  uint64_t v51 = v11;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_37();
    *(void *)&v56[0] = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v14 = 136315138;
    if (v1[18])
    {
      *(void *)&v54[0] = v1[18];
      type metadata accessor for HUDActivity(0);
      swift_retain();
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v17 = v16;
    }
    else
    {
      uint64_t v15 = 7104878;
      unint64_t v17 = 0xE300000000000000;
    }
    *(void *)&v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_39_2();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v12, v13, "Ending current HUD activity %s", v14, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_39_2();
  }
  if (v1[18])
  {
    OUTLINED_FUNCTION_50();
    uint64_t v19 = *(void (**)(uint64_t))(v18 + 224);
    uint64_t v20 = swift_retain();
    v19(v20);
    swift_release();
  }
  _s15ConversationKit11ParticipantVSgWOcTm_0(v3, (uint64_t)v54, &demangling cache variable for type metadata for ConversationControlsType?);
  if (v55 == 255)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v54, &demangling cache variable for type metadata for ConversationControlsType?);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v30);
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    outlined init with take of ConversationControlsType(v54, v56);
    outlined init with copy of ConversationControlsType((uint64_t)v56, (uint64_t)v54);
    if (v55 == 4)
    {
      outlined init with copy of ConversationControlsType((uint64_t)v56, (uint64_t)v53);
      type metadata accessor for UUID();
      uint64_t v49 = &v48;
      OUTLINED_FUNCTION_4();
      MEMORY[0x1F4188790](v21);
      OUTLINED_FUNCTION_121_0();
      OUTLINED_FUNCTION_156_2();
      OUTLINED_FUNCTION_194_0();
      OUTLINED_FUNCTION_154_2();
      v7[65] = 1;
      OUTLINED_FUNCTION_2_1();
      v22();
      type metadata accessor for Date();
      OUTLINED_FUNCTION_4();
      MEMORY[0x1F4188790](v23);
      OUTLINED_FUNCTION_120_1();
      OUTLINED_FUNCTION_10_6();
      v24();
      outlined destroy of ConversationControlsType((uint64_t)v53);
      uint64_t v25 = OUTLINED_FUNCTION_111_2();
      v26(v25);
      *(void *)&v7[*(int *)(v4 + 40)] = 0;
      uint64_t v27 = v50;
      outlined init with take of RemoteControlResponse((uint64_t)v7, v50, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
    }
    else
    {
      outlined init with copy of ConversationControlsType((uint64_t)v56, (uint64_t)v53);
      type metadata accessor for UUID();
      uint64_t v49 = &v48;
      OUTLINED_FUNCTION_4();
      MEMORY[0x1F4188790](v31);
      OUTLINED_FUNCTION_121_0();
      OUTLINED_FUNCTION_156_2();
      OUTLINED_FUNCTION_194_0();
      OUTLINED_FUNCTION_154_2();
      v7[65] = 0;
      OUTLINED_FUNCTION_2_1();
      v32();
      type metadata accessor for Date();
      OUTLINED_FUNCTION_4();
      MEMORY[0x1F4188790](v33);
      OUTLINED_FUNCTION_120_1();
      OUTLINED_FUNCTION_10_6();
      v34();
      outlined destroy of ConversationControlsType((uint64_t)v53);
      uint64_t v35 = OUTLINED_FUNCTION_111_2();
      v36(v35);
      *(void *)&v7[*(int *)(v4 + 40)] = 0;
      uint64_t v27 = v50;
      outlined init with take of RemoteControlResponse((uint64_t)v7, v50, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
      outlined destroy of ConversationControlsType((uint64_t)v54);
    }
    v1[18] = (*(uint64_t (**)(uint64_t))(*v1 + 680))(v27);
    swift_release();
    outlined init with copy of ConversationControlsType((uint64_t)v56, (uint64_t)v54);
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = OUTLINED_FUNCTION_15_1();
      uint64_t v52 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v39 = 136315394;
      outlined init with copy of ConversationControlsType((uint64_t)v54, (uint64_t)v53);
      uint64_t v40 = specialized >> prefix<A>(_:)((uint64_t)v53);
      unint64_t v42 = v41;
      outlined destroy of SystemUpdateNotice?((uint64_t)v53, &demangling cache variable for type metadata for ConversationControlsType?);
      v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v54);
      *(_WORD *)(v39 + 12) = 2080;
      if (v1[18])
      {
        v53[0] = v1[18];
        type metadata accessor for HUDActivity(0);
        swift_retain();
        uint64_t v43 = String.init<A>(reflecting:)();
        unint64_t v45 = v44;
      }
      else
      {
        uint64_t v43 = 7104878;
        unint64_t v45 = 0xE300000000000000;
      }
      uint64_t v47 = v50;
      v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_39_2();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v37, v38, "Created new hud activity for control type %s %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v46 = v47;
    }
    else
    {
      OUTLINED_FUNCTION_39_2();

      outlined destroy of ConversationControlsType((uint64_t)v54);
      uint64_t v46 = v27;
    }
    outlined destroy of RemoteControlMessage(v46, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
    outlined destroy of ConversationControlsType((uint64_t)v56);
  }
  OUTLINED_FUNCTION_28();
}

uint64_t ScreenSharingInteractionSession.presentBannerUpdate(_:)(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_5_13();
  if ((*(uint64_t (**)(void))(v2 + 80))())
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_5_13();
    return (*(uint64_t (**)(uint64_t))(v3 + 248))(a1);
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_5_13();
    return (*(uint64_t (**)(uint64_t))(v5 + 264))(a1);
  }
}

uint64_t ScreenSharingInteractionSession.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of RemoteControlState(*(void *)(v0 + 128));
  swift_release();
  swift_release();

  swift_unknownObjectUnownedDestroy();
  return v0;
}

uint64_t ScreenSharingInteractionSession.__deallocating_deinit()
{
  ScreenSharingInteractionSession.deinit();
  return swift_deallocClassInstance();
}

unint64_t ScreenSharingInteractionSession.activeControlParticipant.getter@<X0>(char *a1@<X8>)
{
  OUTLINED_FUNCTION_2();
  unint64_t v3 = *(void *)(v1 + 128);
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 136);
  outlined copy of RemoteControlState(v3);
  swift_retain();
  os_unfair_lock_lock(v4 + 6);
  OUTLINED_FUNCTION_37_16(&v14);
  os_unfair_lock_unlock(v4 + 6);
  outlined consume of RemoteControlState(v3);
  swift_release();
  unint64_t v5 = v14;
  unint64_t v6 = v14 >> 61;
  if (v14 >> 61 == 4)
  {
    int v13 = *(unsigned __int8 *)((v14 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    unint64_t result = outlined consume of RemoteControlState(v14);
    if (v13 == 1)
    {
      char v12 = 1;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v6 != 3)
  {
    if (v6 == 2)
    {
      OUTLINED_FUNCTION_50();
      char v8 = (*(uint64_t (**)(void))(v7 + 184))();
      goto LABEL_6;
    }
    unint64_t result = outlined consume of RemoteControlState(v14);
LABEL_12:
    char v12 = 0;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_50();
  char v8 = (*(uint64_t (**)(void))(v9 + 232))();
LABEL_6:
  char v10 = v8;
  unint64_t result = outlined consume of RemoteControlState(v5);
  if (v10) {
    char v12 = 2;
  }
  else {
    char v12 = 0;
  }
LABEL_13:
  *a1 = v12;
  return result;
}

uint64_t ScreenSharingInteractionSession.validateIncomingMessage(_:from:)(uint64_t a1, uint64_t a2)
{
  return ScreenSharingInteractionSession.validateIncomingMessage(_:from:)(a1, a2, (void (*)(uint64_t, uint64_t))RemoteControlStateMachine.validateIncomingMessage(_:from:));
}

uint64_t ScreenSharingInteractionSession.validateOutgoingMessage(_:to:)(uint64_t a1, uint64_t a2)
{
  return ScreenSharingInteractionSession.validateIncomingMessage(_:from:)(a1, a2, (void (*)(uint64_t, uint64_t))RemoteControlStateMachine.validateOutgoingMessage(_:to:));
}

uint64_t ScreenSharingInteractionSession.validateIncomingMessage(_:from:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  return swift_endAccess();
}

uint64_t protocol witness for ScreenSharingInteractionTransport.MessageFirewall.validateIncomingMessage(_:from:) in conformance ScreenSharingInteractionSession(uint64_t a1, uint64_t a2)
{
  return ScreenSharingInteractionSession.validateIncomingMessage(_:from:)(a1, a2);
}

uint64_t protocol witness for ScreenSharingInteractionTransport.MessageFirewall.validateOutgoingMessage(_:to:) in conformance ScreenSharingInteractionSession(uint64_t a1, uint64_t a2)
{
  return ScreenSharingInteractionSession.validateOutgoingMessage(_:to:)(a1, a2);
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionTransport.activate()(uint64_t a1)
{
  return closure #1 in ScreenSharingInteractionTransport.activate()(a1, v1);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    char v10 = (void *)((char *)v16 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v10);
    swift_retain();
    specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v10, v8, a1, a2);
    uint64_t v12 = v11;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    int v13 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v13);
    swift_retain();
    specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v13, v8, a1, a2);
    uint64_t v12 = v14;
    swift_release();
    MEMORY[0x1C87760E0](v13, -1, -1);
    swift_release_n();
  }
  swift_release();
  return v12;
}

{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t isStackAllocationSafe;
  void *v9;
  uint64_t v10;
  void *v11;
  void v13[2];

  v13[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(unsigned char *)(a1 + 32);
  char v6 = v5 & 0x3F;
  unsigned int v7 = (unint64_t)((1 << v5) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v9 = (void *)((char *)v13 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v9);
    swift_bridgeObjectRetain();
    char v10 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v9, v7, a1, a2);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v11);
    swift_bridgeObjectRetain();
    char v10 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v11, v7, a1, a2);
    swift_release();
    MEMORY[0x1C87760E0](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t isStackAllocationSafe;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  void v15[2];

  v15[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(unsigned char *)(a1 + 32);
  char v6 = v5 & 0x3F;
  unsigned int v7 = (unint64_t)((1 << v5) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v9 = (void *)((char *)v15 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v9);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)(v9, v7, a1, a2);
    uint64_t v11 = v10;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v12 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v12);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)(v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_release();
    MEMORY[0x1C87760E0](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t isStackAllocationSafe;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void v16[2];

  uint64_t v3 = v2;
  v16[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    char v10 = (void *)((char *)v16 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v10);
    swift_retain();
    specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v10, v8, a1, a2);
    uint64_t v12 = v11;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    int v13 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v13);
    swift_retain();
    specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v13, v8, a1, a2);
    uint64_t v12 = v14;
    swift_release();
    MEMORY[0x1C87760E0](v13, -1, -1);
    swift_release_n();
  }
  swift_release();
  return v12;
}

unint64_t lazy protocol witness table accessor for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors;
  if (!lazy protocol witness table cache variable for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors;
  if (!lazy protocol witness table cache variable for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingInteractionTransport.Errors and conformance ScreenSharingInteractionTransport.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionTransport.receiveData()(uint64_t a1)
{
  return closure #1 in ScreenSharingInteractionTransport.receiveData()(a1, v1);
}

uint64_t lazy protocol witness table accessor for type ScreenSharingInteractionTransport and conformance ScreenSharingInteractionTransport(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #4 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(uint64_t a1, uint64_t a2)
{
  return closure #4 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(a1, a2, v2);
}

uint64_t sub_1C33B35A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed RemoteControlMessage, @in_guaranteed GroupSessionMessenger.MessageContext) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed RemoteControlMessage, @in_guaranteed GroupSessionMessenger.MessageContext) -> ()(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t partial apply for closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #2 in ScreenSharingInteractionSession.init(session:controller:serverBag:contactManager:)(v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.invalidate()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in ScreenSharingInteractionSession.invalidate()(v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.presentRemoteControlOnboarding()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in ScreenSharingInteractionSession.presentRemoteControlOnboarding()(v3, v4, v5, v6);
}

uint64_t sub_1C33B37A0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C33B37D8()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_179_1();
  swift_unknownObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_106();
  v1(v0);
  swift_release();
  OUTLINED_FUNCTION_31_12();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)()
{
  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest<Published<DeviceInactivityObserver.State>.Publisher, Published<Bool>.Publisher>);
  OUTLINED_FUNCTION_1(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_34_4();
  OUTLINED_FUNCTION_97_4();
  return closure #1 in ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)(v4, v5, v6, v7, v8);
}

uint64_t sub_1C33B395C()
{
  return objectdestroy_13Tm_0();
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)()
{
  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_97_4();
  return closure #1 in ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)(v3, v4, v5, v6, v7);
}

uint64_t outlined destroy of RemoteControlMessage(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t sub_1C33B3AB8@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 256))();
  *a1 = result;
  return result;
}

uint64_t sub_1C33B3B0C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 280))();
  *a1 = result;
  return result;
}

uint64_t ObjC metadata update function for ScreenSharingInteractionTransport()
{
  return type metadata accessor for ScreenSharingInteractionTransport();
}

uint64_t type metadata completion function for ScreenSharingInteractionTransport()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ScreenSharingInteractionTransport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingInteractionTransport);
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.isSendingInteractionData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.isReceivingInteractionData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.firewall.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.firewall.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.firewall.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.__allocating_init(session:unreliableMessenger:reliableMessenger:)()
{
  return (*(uint64_t (**)(void))(v0 + 400))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.access<A>(keyPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.withMutation<A, B>(keyPath:_:)()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 432))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.MessageFirewall.validateIncomingMessage(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ScreenSharingInteractionTransport.MessageFirewall.validateOutgoingMessage(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

unsigned char *storeEnumTagSinglePayload for ScreenSharingInteractionTransport.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C33B3EB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingInteractionTransport.Errors()
{
  return &type metadata for ScreenSharingInteractionTransport.Errors;
}

uint64_t method lookup function for ScreenSharingInteractionSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingInteractionSession);
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.playbackServer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.captureInteraction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.remoteControlStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.__allocating_init(session:controller:serverBag:contactManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.setup()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.invalidate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.presentRemoteControlOnboarding()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_50();
  uint64_t v15 = (void *)(v0 + 528);
  uint64_t v14 = *v15 + *(int *)*v15;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_157_0((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, (uint64_t)v15);
  return v11();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.sendRemoteControlMessage(_:to:)()
{
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_50();
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 536) + **(int **)(v0 + 536));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v4 = OUTLINED_FUNCTION_30_15();
  return v6(v4);
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.beginRemoteControlSession()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_50();
  uint64_t v15 = (void *)(v0 + 544);
  uint64_t v14 = *v15 + *(int *)*v15;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_157_0((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, (uint64_t)v15);
  return v11();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.cancelRemoteControlRequest()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_50();
  uint64_t v15 = (void *)(v0 + 552);
  uint64_t v14 = *v15 + *(int *)*v15;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_157_0((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, (uint64_t)v15);
  return v11();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.endRemoteControlSession()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_50();
  uint64_t v15 = (void *)(v0 + 560);
  uint64_t v14 = *v15 + *(int *)*v15;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  OUTLINED_FUNCTION_157_0((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, (uint64_t)v15);
  return v11();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.suspendRemoteControlSession(reason:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_50();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 568) + **(int **)(v2 + 568));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_98(v3);
  *uint64_t v4 = v5;
  v4[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return v7(v1);
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.resumeRemoteControlSession()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_50();
  uint64_t v15 = (void *)(v0 + 576);
  uint64_t v14 = *v15 + *(int *)*v15;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_157_0((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, (uint64_t)v15);
  return v11();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.handleRemoteControlUserResponse(allowRemoteControl:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.updateHUDActivity(type:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of ScreenSharingInteractionSession.presentBannerUpdate(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t outlined init with copy of RemoteControlMessage(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_124();
  v4();
  return a2;
}

uint64_t sub_1C33B4774()
{
  uint64_t v1 = *(void *)(type metadata accessor for RemoteControlMessage(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for Participant();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
    case 5u:
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v8();
      uint64_t v9 = type metadata accessor for RemoteControlRequest(0);
      goto LABEL_5;
    case 1u:
      uint64_t v10 = *(void (**)(void))(*(void *)(type metadata accessor for UUID() - 8) + 8);
      OUTLINED_FUNCTION_4_1();
      v10();
      uint64_t v18 = v4;
      uint64_t v11 = type metadata accessor for RemoteControlResponse(0);
      OUTLINED_FUNCTION_4_1();
      v10();
      uint64_t v12 = *(int *)(v11 + 24);
      uint64_t v4 = v18;
      goto LABEL_6;
    case 4u:
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v13();
      uint64_t v9 = type metadata accessor for RemoteControlSuspendRequest(0);
LABEL_5:
      uint64_t v12 = *(int *)(v9 + 20);
LABEL_6:
      uint64_t v14 = v0 + v2 + v12;
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      (*(void (**)(uint64_t))(v15 + 8))(v14);
      break;
    default:
      break;
  }
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7), v4);
  OUTLINED_FUNCTION_31_12();
  OUTLINED_FUNCTION_16();
  return swift_deallocObject();
}

uint64_t outlined init with take of RemoteControlResponse(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:)()
{
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = type metadata accessor for RemoteControlMessage(0);
  OUTLINED_FUNCTION_1(v1);
  uint64_t v2 = type metadata accessor for Participant();
  OUTLINED_FUNCTION_1_1(v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v3;
  *uint64_t v3 = v0;
  v3[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_98_4();
  return closure #1 in ScreenSharingInteractionSession.handleRemoteControlMessage(_:from:)(v4, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionTransport.didReceiveData()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in ScreenSharingInteractionTransport.didReceiveData()(v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #1 in ScreenSharingInteractionTransport.didReceiveData()(v3, v4, v5, v6);
}

uint64_t sub_1C33B4C94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter()
{
  return closure #1 in ScreenSharingInteractionTransport.isSendingInteractionDataDebouncer.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in ScreenSharingInteractionTransport.isReceivingInteractionData.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 41) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ScreenSharingInteractionTransport.isSendingInteractionData.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 40) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_1C33B4D00()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_179_1();
  swift_unknownObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_106();
  v1(v0);
  swift_release();
  OUTLINED_FUNCTION_31_12();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility()()
{
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_1(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_98_4();
  return closure #1 in ScreenSharingInteractionSession.observeDisplayLayerVisibility()(v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionSession.observeInteractionState()()
{
  return closure #1 in ScreenSharingInteractionSession.observeInteractionState()();
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingInteractionSession.observeInteractionState()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #1 in ScreenSharingInteractionSession.observeInteractionState()(v3, v4, v5, v6);
}

uint64_t sub_1C33B4F34()
{
  return objectdestroy_174Tm(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingInteractionTransport.receiveData()()
{
  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_73_6();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_34_4();
  OUTLINED_FUNCTION_97_4();
  return closure #1 in closure #1 in ScreenSharingInteractionTransport.receiveData()(v4, v5, v6, v7, v8);
}

uint64_t sub_1C33B4FE8()
{
  return objectdestroy_174Tm(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
}

uint64_t partial apply for closure #2 in closure #1 in ScreenSharingInteractionTransport.receiveData()()
{
  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_73_6();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_34_4();
  OUTLINED_FUNCTION_97_4();
  return closure #2 in closure #1 in ScreenSharingInteractionTransport.receiveData()(v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ScreenSharingInteractionTransport.didSendData()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in ScreenSharingInteractionTransport.didSendData()(v3, v4, v5, v6);
}

uint64_t objectdestroy_13Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_23_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData()(v3, v4, v5, v6);
}

void specialized closure #1 in _NativeSet.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a2;
  uint64_t v44 = a4;
  uint64_t v33 = a1;
  uint64_t v41 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v41);
  uint64_t v39 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = MEMORY[0x1F4188790](v6);
  uint64_t v49 = (char *)&v32 - v9;
  int64_t v10 = 0;
  uint64_t v43 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v34 = 0;
  uint64_t v35 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v38 = v7 + 16;
  uint64_t v40 = v7;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = v7 + 8;
  uint64_t v15 = v41;
  while (1)
  {
    if (v14)
    {
      uint64_t v47 = (v14 - 1) & v14;
      int64_t v48 = v10;
      unint64_t v16 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_20;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v36) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    int64_t v19 = v10 + 1;
    if (!v18)
    {
      int64_t v19 = v10 + 2;
      if (v10 + 2 >= v36) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v10 + 3;
        if (v10 + 3 >= v36) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_19:
    uint64_t v47 = (v18 - 1) & v18;
    int64_t v48 = v19;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_20:
    uint64_t v21 = v40;
    unint64_t v42 = v16;
    (*(void (**)(__n128))(v40 + 16))(v8);
    uint64_t v22 = type metadata accessor for UUID();
    uint64_t v46 = &v32;
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void *)(v23 + 64);
    MEMORY[0x1F4188790](v22);
    Participant.id.getter();
    uint64_t v25 = v39;
    uint64_t v26 = GroupSession.localParticipant.getter();
    unint64_t v45 = &v32;
    MEMORY[0x1F4188790](v26);
    uint64_t v27 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    Participant.id.getter();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v21 + 8);
    v28(v25, v15);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v30(v27, v22);
    v30(v27, v22);
    v28(v49, v15);
    unint64_t v14 = v47;
    int64_t v10 = v48;
    if ((v29 & 1) == 0)
    {
      *(void *)(v33 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (__OFADD__(v34++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)();
        swift_release();
        return;
      }
    }
  }
  uint64_t v20 = v10 + 4;
  if (v10 + 4 >= v36) {
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v35 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v10 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v36) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int64_t v48;
  char *v49;

  uint64_t v32 = a2;
  uint64_t v44 = a4;
  uint64_t v33 = a1;
  uint64_t v41 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v41);
  uint64_t v39 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = MEMORY[0x1F4188790](v6);
  uint64_t v49 = (char *)&v32 - v9;
  int64_t v10 = 0;
  uint64_t v43 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v34 = 0;
  uint64_t v35 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v38 = v7 + 16;
  uint64_t v40 = v7;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = v7 + 8;
  uint64_t v15 = v41;
  while (1)
  {
    if (v14)
    {
      uint64_t v47 = (v14 - 1) & v14;
      int64_t v48 = v10;
      unint64_t v16 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_20;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v36) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    int64_t v19 = v10 + 1;
    if (!v18)
    {
      int64_t v19 = v10 + 2;
      if (v10 + 2 >= v36) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v10 + 3;
        if (v10 + 3 >= v36) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_19:
    uint64_t v47 = (v18 - 1) & v18;
    int64_t v48 = v19;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_20:
    uint64_t v21 = v40;
    unint64_t v42 = v16;
    (*(void (**)(__n128))(v40 + 16))(v8);
    uint64_t v22 = type metadata accessor for UUID();
    uint64_t v46 = &v32;
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void *)(v23 + 64);
    MEMORY[0x1F4188790](v22);
    Participant.id.getter();
    uint64_t v25 = v39;
    uint64_t v26 = GroupSession.localParticipant.getter();
    unint64_t v45 = &v32;
    MEMORY[0x1F4188790](v26);
    uint64_t v27 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    Participant.id.getter();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v21 + 8);
    v28(v25, v15);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB00]);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v30(v27, v22);
    v30(v27, v22);
    v28(v49, v15);
    unint64_t v14 = v47;
    int64_t v10 = v48;
    if ((v29 & 1) == 0)
    {
      *(void *)(v33 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (__OFADD__(v34++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)();
        swift_release();
        return;
      }
    }
  }
  uint64_t v20 = v10 + 4;
  if (v10 + 4 >= v36) {
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v35 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v10 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v36) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1C33B5638()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
  OUTLINED_FUNCTION_4();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_106();
  v1(v0);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ScreenSharingInteractionTransport.activate()(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
  OUTLINED_FUNCTION_1_1(v3);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  closure #1 in closure #1 in ScreenSharingInteractionTransport.activate()(a1, v5, v6);
}

uint64_t sub_1C33B5728()
{
  return objectdestroy_174Tm(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
}

uint64_t objectdestroy_174Tm(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_4();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_106();
  v2(v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ScreenSharingInteractionTransport.activate()()
{
  OUTLINED_FUNCTION_125_2();
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ControlMessengerState>.Continuation);
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_73_6();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10(v1);
  void *v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_34_4();
  OUTLINED_FUNCTION_97_4();
  return closure #2 in closure #1 in ScreenSharingInteractionTransport.activate()(v4, v5, v6, v7, v8);
}

uint64_t sub_1C33B5874()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #3 in closure #1 in ScreenSharingInteractionTransport.activate()()
{
}

uint64_t OUTLINED_FUNCTION_75_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_81_6()
{
  return *(void *)(v0 + 320);
}

uint64_t OUTLINED_FUNCTION_83_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_100_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_105_3(uint64_t result)
{
  *(void *)(v1 + 208) = result;
  return result;
}

unint64_t OUTLINED_FUNCTION_107_4()
{
  return closure #1 in RemoteControlStateMachine.state.getter(v1, v0);
}

uint64_t OUTLINED_FUNCTION_110_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_112_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_116_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_118_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_119_2()
{
  return swift_getObjectType();
}

uint64_t OUTLINED_FUNCTION_120_1()
{
  return static Date.now.getter();
}

uint64_t OUTLINED_FUNCTION_121_0()
{
  return UUID.init()();
}

void OUTLINED_FUNCTION_129_0()
{
}

uint64_t OUTLINED_FUNCTION_131_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_134()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_139_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_142_2()
{
  outlined consume of RemoteControlState(v0);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_156_2()
{
  *(void *)(v1 + *(int *)(v0 + 44) + 8) = 0;
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_158_2()
{
  return *(void *)(v0 + 120);
}

uint64_t OUTLINED_FUNCTION_160_1()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_163_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_164_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_176_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_177_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_182_1()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return specialized >> prefix<A>(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_184_1()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_187_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, a13);
}

void OUTLINED_FUNCTION_188_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

void OUTLINED_FUNCTION_189_0(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_190()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_195_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_196_1()
{
  return *(void *)(v0 + 80);
}

void *PushToTalkTalkCircularButton.__allocating_init(viewModel:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return PushToTalkTalkCircularButton.init(viewModel:)(a1);
}

void *PushToTalkTalkCircularButton.init(viewModel:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_controller] = 0;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_stateConfiguration;
  uint64_t v4 = one-time initialization token for pttTalkButtonFullScreen;
  os_log_type_t v5 = v1;
  if (v4 != -1) {
    swift_once();
  }
  *(void *)&v5[v3] = static Colors.InCallControls.pttTalkButtonFullScreen;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_viewModel] = a1;
  swift_bridgeObjectRetain();
  swift_retain();

  swift_bridgeObjectRetain();
  uint64_t v6 = CircularButton.init(symbol:stateConfiguration:context:)();
  type metadata accessor for PushToTalkTalkButtonController();
  swift_allocObject();
  uint64_t v7 = v6;
  *(void *)((char *)v7 + OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_controller) = PushToTalkTalkButtonController.init(button:viewModel:)(v7, a1);
  swift_release();
  return v7;
}

id PushToTalkTalkCircularButton.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PushToTalkTalkCircularButton.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_controller] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_stateConfiguration;
  if (one-time initialization token for pttTalkButtonFullScreen != -1) {
    swift_once();
  }
  *(void *)&v0[v1] = static Colors.InCallControls.pttTalkButtonFullScreen;
  swift_bridgeObjectRetain();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PushToTalkTalkCircularButton.computedState.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_controller);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 216);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  return v4;
}

Swift::Void __swiftcall PushToTalkTalkCircularButton.updateConfiguration()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __n128 v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  char v5 = (*(uint64_t (**)(__n128))(**(void **)((char *)v0
                                                       + OBJC_IVAR____TtC15ConversationKit28PushToTalkTalkCircularButton_viewModel)
                                         + 112))(v2);
  if ((v5 & 0xFE) == 2 || (v5 & 1) == 0)
  {
    uint64_t v7 = (objc_class *)type metadata accessor for PushToTalkTalkCircularButton();
    v13.receiver = v0;
    v13.super_class = v7;
    objc_msgSendSuper2(&v13, sel_updateConfiguration);
  }
  else
  {
    uint64_t v11 = &type metadata for SymbolImageDescribers.ConversationControls;
    uint64_t v12 = &protocol witness table for SymbolImageDescribers.ConversationControls;
    v10[0] = 20;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
    specialized Dictionary.subscript.getter();
    static UIButton.Configuration.base(title:symbol:shape:style:context:)(0, 0, (uint64_t)v10, 1, (uint64_t)v14, 2, (uint64_t)v4);
    outlined release of ButtonStyle?((uint64_t)v14);
    outlined destroy of SymbolImageDescribing?((uint64_t)v10);
    uint64_t v8 = type metadata accessor for UIButton.Configuration();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v8);
    UIButton.configuration.setter();
  }
}

uint64_t type metadata accessor for PushToTalkTalkCircularButton()
{
  return self;
}

void PushToTalkTalkCircularButton.__allocating_init(symbol:stateConfiguration:context:)()
{
}

void PushToTalkTalkCircularButton.init(symbol:stateConfiguration:context:)()
{
}

uint64_t PushToTalkTalkCircularButton.__ivar_destroyer()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

id PushToTalkTalkCircularButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkTalkCircularButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PushToTalkTalkCircularButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkTalkCircularButton);
}

uint64_t dispatch thunk of PushToTalkTalkCircularButton.__allocating_init(viewModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t ConversationControlsOpenMessagesButtonProvider.__allocating_init(controlsManager:context:shape:)(uint64_t a1, char a2, char a3)
{
  *(void *)(swift_allocObject() + 136) = a1;
  return ControlsButtonProvider.init(context:shape:)(a2, a3);
}

Swift::Void __swiftcall ConversationControlsOpenMessagesButtonProvider.buttonChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  ControlsButtonProvider.buttonChanged()();
  uint64_t v6 = (void *)(*(uint64_t (**)(void))(*v0 + 168))();
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000012, 0x80000001C37971B0, v6);
    int64_t v10 = (void *)v0[17];
    id v11 = objc_msgSend(v8, sel_addTarget_action_forControlEvents_, v1[17], sel_openMessagesButtonTapped, 64);
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x4F0))(v11);
    *(void *)(swift_allocObject() + 24) = v9;
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher();
    uint64_t v12 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t))(*v1 + 224))(v12);
  }
}

void closure #1 in ConversationControlsOpenMessagesButtonProvider.buttonChanged()(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    char v5 = v4;
    objc_msgSend(v4, sel_setEnabled_, v2);
  }
}

uint64_t ConversationControlsOpenMessagesButtonProvider.init(controlsManager:context:shape:)(uint64_t a1, char a2, char a3)
{
  *(void *)(v3 + 136) = a1;
  return ControlsButtonProvider.init(context:shape:)(a2, a3);
}

uint64_t ConversationControlsOpenMessagesButtonProvider.deinit()
{
  uint64_t v0 = ControlsButtonProvider.deinit();

  return v0;
}

uint64_t ConversationControlsOpenMessagesButtonProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1C33B6780()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsOpenMessagesButtonProvider.buttonChanged()(unsigned __int8 *a1)
{
  closure #1 in ConversationControlsOpenMessagesButtonProvider.buttonChanged()(a1, v1);
}

uint64_t type metadata accessor for ConversationControlsOpenMessagesButtonProvider()
{
  return self;
}

uint64_t NotifyDispatchName.rawValue.getter(uint64_t a1)
{
  return a1;
}

uint64_t NotifyDispatchName.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NotifyDispatchName.rawValue.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance NotifyDispatchName@<X0>(Swift::String *a1@<X0>, ConversationKit::NotifyDispatchName *a2@<X8>)
{
  ConversationKit::NotifyDispatchName v4 = NotifyDispatchName.init(stringLiteral:)(*a1);
  uint64_t result = v4.rawValue._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t notifyRegisterDispatch(name:queue:handler:)(uint64_t a1, unint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v9 = String.utf8CString.getter();
    int out_token = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
      uint64_t v9 = v10;
    }
    if (!*(void *)(v9 + 16)) {
      __break(1u);
    }
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a4;
    *(void *)(v11 + 24) = a5;
    aBlock[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
    aBlock[3] = &block_descriptor_63;
    uint64_t v12 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    notify_register_dispatch((const char *)(v9 + 32), &out_token, a3, v12);
    _Block_release(v12);
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1C33B7B10()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NotifyDispatchName and conformance NotifyDispatchName()
{
  unint64_t result = lazy protocol witness table cache variable for type NotifyDispatchName and conformance NotifyDispatchName;
  if (!lazy protocol witness table cache variable for type NotifyDispatchName and conformance NotifyDispatchName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotifyDispatchName and conformance NotifyDispatchName);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NotifyDispatchName and conformance NotifyDispatchName;
  if (!lazy protocol witness table cache variable for type NotifyDispatchName and conformance NotifyDispatchName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotifyDispatchName and conformance NotifyDispatchName);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in NotifyDispatchName()
{
  return MEMORY[0x1E4FBB220];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in NotifyDispatchName()
{
  return MEMORY[0x1E4FBB230];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in NotifyDispatchName()
{
  return MEMORY[0x1E4FBB228];
}

ValueMetadata *type metadata accessor for NotifyDispatchName()
{
  return &type metadata for NotifyDispatchName;
}

ConversationKit::MaterialView __swiftcall MaterialView.init(blurStyle:)(UIBlurEffectStyle blurStyle)
{
  id v1 = objc_msgSend(self, sel_effectWithStyle_, blurStyle);
  return (ConversationKit::MaterialView)v1;
}

id MaterialView.init(privateBlurStyle:)(uint64_t a1)
{
  id v1 = objc_msgSend(self, sel_effectWithStyle_, a1);
  return v1;
}

id MaterialView.makeUIView(context:)(uint64_t a1, uint64_t a2)
{
  id v3 = objc_allocWithZone(MEMORY[0x1E4FB1F00]);
  return objc_msgSend(v3, sel_initWithEffect_, a2);
}

unint64_t lazy protocol witness table accessor for type MaterialView and conformance MaterialView()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialView and conformance MaterialView;
  if (!lazy protocol witness table cache variable for type MaterialView and conformance MaterialView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialView and conformance MaterialView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialView and conformance MaterialView;
  if (!lazy protocol witness table cache variable for type MaterialView and conformance MaterialView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialView and conformance MaterialView);
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance MaterialView(uint64_t a1)
{
  return MaterialView.makeUIView(context:)(a1, *v1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type MaterialView and conformance MaterialView();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type MaterialView and conformance MaterialView();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance MaterialView()
{
}

ValueMetadata *type metadata accessor for MaterialView()
{
  return &type metadata for MaterialView;
}

uint64_t key path getter for CallAgainHUDView.recipe : CallAgainHUDView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC0))();
}

uint64_t key path setter for CallAgainHUDView.recipe : CallAgainHUDView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC8))(v6);
}

uint64_t CallAgainHUDView.recipe.didset()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_recipe;
  swift_beginAccess();
  outlined init with copy of ConversationControlsRecipe(v4, (uint64_t)v3);
  CallAgainHUDView.updateFromRecipe(_:)((uint64_t)v3);
  return outlined destroy of ConversationControlsRecipe((uint64_t)v3);
}

uint64_t CallAgainHUDView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t CallAgainHUDView.recipe.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_recipe;
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v3);
  swift_endAccess();
  CallAgainHUDView.recipe.didset();
  return outlined destroy of ConversationControlsRecipe(a1);
}

uint64_t (*CallAgainHUDView.recipe.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CallAgainHUDView.recipe.modify;
}

uint64_t CallAgainHUDView.recipe.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return CallAgainHUDView.recipe.didset();
  }
  return result;
}

void *CallAgainHUDView.Constants.buttonCornerRadiusMac.unsafeMutableAddressor()
{
  return &static CallAgainHUDView.Constants.buttonCornerRadiusMac;
}

double static CallAgainHUDView.Constants.buttonCornerRadiusMac.getter()
{
  return 5.0;
}

void one-time initialization function for buttonSpacing()
{
  static CallAgainHUDView.buttonSpacing = 0x402E000000000000;
}

void CallAgainHUDView.bottomButtonConstraint.setter(uint64_t a1)
{
}

void CallAgainHUDView.avatarBottomConstraint.setter(uint64_t a1)
{
}

id closure #1 in variable initialization expression of CallAgainHUDView.primaryLabel()
{
  id result = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB2998], *MEMORY[0x1E4FB09E0]);
  if (result)
  {
    uint64_t v1 = result;
    Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

    Class v3 = UIFont.caseSensitive()().super.isa;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UILabel);
    uint64_t v4 = self;
    uint64_t v5 = v3;
    v9.value.super.Class isa = (Class)objc_msgSend(v4, sel_labelColor);
    UILabel.init(font:textColor:)(v6, (UIFont)v5, v9);
    uint64_t v8 = v7;
    objc_msgSend(v7, sel_setNumberOfLines_, 2);
    objc_msgSend(v8, sel_setTextAlignment_, 1);

    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *closure #1 in variable initialization expression of CallAgainHUDView.callTypeLabel()
{
  id v0 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UILabel);
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v2 = v0;
  v7.value.super.Class isa = (Class)objc_msgSend(v1, sel_initWithWhite_alpha_, 0.6, 1.0);
  UILabel.init(font:textColor:)(v3, (UIFont)v2, v7);
  uint64_t v5 = v4;
  objc_msgSend(v4, sel__setDrawsAsBackdropOverlayWithBlendMode_, 3);

  return v5;
}

id closure #1 in variable initialization expression of CallAgainHUDView.avatarStack(void *a1)
{
  objc_msgSend(a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(a1, sel_setAxis_, 1);
  objc_msgSend(a1, sel_setAlignment_, 3);
  objc_msgSend(a1, sel_setSpacing_, 11.0);
  return a1;
}

id closure #1 in variable initialization expression of CallAgainHUDView.videoMessageStackView(void *a1)
{
  id v1 = objc_msgSend(a1, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter();
  objc_msgSend(a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(a1, sel_setAxis_, v1 & 1);
  objc_msgSend(a1, sel_setDistribution_, 1);
  if (one-time initialization token for buttonSpacing != -1) {
    swift_once();
  }
  objc_msgSend(a1, sel_setSpacing_, *(double *)&static CallAgainHUDView.buttonSpacing);
  return a1;
}

uint64_t closure #1 in variable initialization expression of CallAgainHUDView.callBackButton()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  Class v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v24 - v5;
  static UIButton.Configuration.roundButtonConfiguration(using:)(10);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v7 - 8);
  UIColor_optional v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(self, sel_conversationKit);
  v26._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0x4147415F4C4C4143;
  v11._object = (void *)0xEA00000000004E49;
  v12.value._countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v26);

  uint64_t v14 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v14 - 8);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v15 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v15);
  UIButton.Configuration.attributedTitle.setter();
  uint64_t v16 = self;
  id v17 = objc_msgSend(v16, sel_systemGreenColor);
  UIButton.Configuration.baseBackgroundColor.setter();
  id v18 = objc_msgSend(v16, sel_whiteColor);
  UIButton.Configuration.baseForegroundColor.setter();
  int64_t v19 = (void (*)(unsigned char *, void))UIButton.Configuration.attributedTitle.modify();
  if (!__swift_getEnumTagSinglePayload(v20, 1, v15))
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    v24[1] = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB2950], *MEMORY[0x1E4FB09E0]);
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    AttributedString.subscript.setter();
  }
  v19(v25, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  uint64_t v22 = UIButton.init(configuration:primaryAction:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v22;
}

uint64_t static UIButton.Configuration.roundButtonConfiguration(using:)(char a1)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.filled()();
  SymbolImageDescribers.LocalParticipantView.symbolImageDescription.getter(a1, (uint64_t)v10);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v6 = v10[0];
  uint64_t v7 = v10[1];
  swift_bridgeObjectRetain();
  @nonobjc UIImage.init(_systemName:)(v6, v7);
  UIButton.Configuration.image.setter();
  id v8 = objc_msgSend(self, sel_configurationWithTextStyle_scale_, v10[3], v10[2]);
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FB1218], v2);
  UIButton.Configuration.cornerStyle.setter();
  UIButton.Configuration.imagePadding.setter();
  return outlined release of SymbolImageDescription((uint64_t)v10);
}

id CallAgainHUDView.callBackButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callBackButton);
}

id closure #1 in variable initialization expression of CallAgainHUDView.closeButton()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration();
  MEMORY[0x1F4188790](v0 - 8);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  static UIButton.Configuration.closeButtonConfiguration()();
  id v1 = (id)UIButton.init(configuration:primaryAction:)();
  static Layout.ConversationControls.values.getter((uint64_t)v3);
  objc_msgSend(v1, sel__setTouchInsets_, v3[31], v3[32], v3[33], v3[34]);

  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v1;
}

uint64_t static UIButton.Configuration.closeButtonConfiguration()()
{
  uint64_t v0 = type metadata accessor for UIBackgroundConfiguration();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.filled()();
  UIButton.Configuration.contentInsets.setter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FB1218], v1);
  UIButton.Configuration.cornerStyle.setter();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(self, sel_conversationKit);
  v21._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001C379E530;
  v9._countAndFlagsBits = 0xD000000000000010;
  v10.value._countAndFlagsBits = 0x61737265766E6F43;
  v10.value._object = (void *)0xEF74694B6E6F6974;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v21);

  uint64_t v12 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v12 - 8);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v13 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v13);
  UIButton.Configuration.attributedTitle.setter();
  uint64_t v14 = (void (*)(unsigned char *, void))UIButton.Configuration.attributedTitle.modify();
  if (!__swift_getEnumTagSinglePayload(v15, 1, v13))
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    v19[1] = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB2950], *MEMORY[0x1E4FB09E0]);
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    AttributedString.subscript.setter();
  }
  v14(v20, 0);
  static UIBackgroundConfiguration.listGroupedCell()();
  id v17 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  return UIButton.Configuration.background.setter();
}

id CallAgainHUDView.closeButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton);
}

uint64_t closure #1 in variable initialization expression of CallAgainHUDView.videoMessageButton()
{
  v32[0] = type metadata accessor for UIButton.Configuration();
  uint64_t v0 = *(void *)(v32[0] - 8);
  MEMORY[0x1F4188790](v32[0]);
  uint64_t v2 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v32 - v4;
  static UIButton.Configuration.roundButtonConfiguration(using:)(5);
  static Platform.current.getter();
  UIButton.Configuration.contentInsets.setter();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(self, sel_conversationKit);
  v34._countAndFlagsBits = 0xD00000000000002DLL;
  v34._object = (void *)0x80000001C37ABDF0;
  v10._object = (void *)0x80000001C37ABDD0;
  v10._countAndFlagsBits = 0xD000000000000013;
  v11.value._countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v34);

  uint64_t v13 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v13 - 8);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v14 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v14);
  UIButton.Configuration.attributedTitle.setter();
  uint64_t v15 = UIButton.Configuration.preferredSymbolConfigurationForImage.getter();
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageSymbolConfiguration);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1C3769610;
    id v18 = self;
    *(void *)(v17 + 32) = objc_msgSend(v18, sel_systemRedColor);
    *(void *)(v17 + 40) = objc_msgSend(v18, sel_systemRedColor);
    v33[0] = v17;
    specialized Array._endMutation()();
    id v19 = @nonobjc UIImageSymbolConfiguration.__allocating_init(paletteColors:)();
    id v20 = objc_msgSend(self, sel_configurationWithWeight_, 7);
    id v21 = objc_msgSend(v19, sel_configurationByApplyingConfiguration_, v20);

    id v22 = objc_msgSend(v16, sel_configurationByApplyingConfiguration_, v21);
  }
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  uint64_t v23 = self;
  id v24 = objc_msgSend(v23, sel_whiteColor);
  UIButton.Configuration.baseBackgroundColor.setter();
  id v25 = objc_msgSend(v23, sel_blackColor);
  UIButton.Configuration.baseForegroundColor.setter();
  Swift::String v26 = (void (*)(uint64_t *, void))UIButton.Configuration.attributedTitle.modify();
  if (!__swift_getEnumTagSinglePayload(v27, 1, v14))
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    v32[1] = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB2950], *MEMORY[0x1E4FB09E0]);
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    AttributedString.subscript.setter();
  }
  v26(v33, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  uint64_t v29 = v32[0];
  (*(void (**)(char *, char *, void))(v0 + 16))(v2, v5, v32[0]);
  uint64_t v30 = UIButton.init(configuration:primaryAction:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v5, v29);
  return v30;
}

id @nonobjc UIImageSymbolConfiguration.__allocating_init(paletteColors:)()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_configurationWithPaletteColors_, isa);

  return v1;
}

id CallAgainHUDView.videoMessageButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageButton);
}

double CallAgainHUDView.buttonBottomPaddingDivisor.getter()
{
  return dbl_1C377E640[static Platform.current.getter() == 1];
}

id closure #1 in variable initialization expression of CallAgainHUDView.showCallDetailsButton()
{
  id v0 = objc_msgSend(self, sel_buttonWithType_, 4);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v0, sel_setPointerInteractionEnabled_, 1);
  id v1 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v0, sel_setTintColor_, v1);

  return v0;
}

id CallAgainHUDView.showCallDetailsButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_showCallDetailsButton);
}

char *CallAgainHUDView.__allocating_init(recipe:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return CallAgainHUDView.init(recipe:)(a1);
}

char *CallAgainHUDView.init(recipe:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_bottomButtonConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarBottomConstraint] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_primaryLabel;
  uint64_t v4 = v1;
  *(void *)&v1[v3] = closure #1 in variable initialization expression of CallAgainHUDView.primaryLabel();
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callTypeLabel;
  *(void *)&v4[v5] = closure #1 in variable initialization expression of CallAgainHUDView.callTypeLabel();
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  id v8 = closure #1 in variable initialization expression of CallAgainHUDView.avatarStack(v7);

  *(void *)&v4[v6] = v8;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageStackView;
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  id v11 = closure #1 in variable initialization expression of CallAgainHUDView.videoMessageStackView(v10);

  *(void *)&v4[v9] = v11;
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callBackButton;
  *(void *)&v4[v12] = closure #1 in variable initialization expression of CallAgainHUDView.callBackButton();
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton;
  *(void *)&v4[v13] = closure #1 in variable initialization expression of CallAgainHUDView.closeButton();
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageButton;
  *(void *)&v4[v14] = closure #1 in variable initialization expression of CallAgainHUDView.videoMessageButton();
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_effectsView;
  *(void *)&v4[v15] = closure #1 in LocalParticipantView.overlayBlurView.getter();
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStackVerticalSpacingDivisor] = 0x3FCCAC083126E979;
  uint64_t v16 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_showCallDetailsButton;
  *(void *)&v4[v16] = closure #1 in variable initialization expression of CallAgainHUDView.showCallDetailsButton();
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v4[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_recipe]);

  v33.receiver = v4;
  v33.super_class = (Class)type metadata accessor for CallAgainHUDView();
  uint64_t v17 = (char *)objc_msgSendSuper2(&v33, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v18 = *(void *)&v17[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_effectsView];
  id v19 = v17;
  objc_msgSend(v19, sel_addSubview_, v18);
  CallAgainHUDView.updateFromRecipe(_:)(a1);
  id v20 = *(void **)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageStackView];
  objc_msgSend(v19, sel_addSubview_, v20);
  int v21 = static Platform.current.getter();
  objc_msgSend(v20, sel_addArrangedSubview_, *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callBackButton]);
  id v22 = sel_addArrangedSubview_;
  if (v21 == 3)
  {
    uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton];
    id v24 = (char *)v20;
  }
  else
  {
    objc_msgSend(v20, sel_addArrangedSubview_, *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageButton]);
    objc_msgSend(v19, sel_addSubview_, *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton]);
    uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_showCallDetailsButton];
    id v22 = sel_addSubview_;
    id v24 = v19;
  }
  objc_msgSend(v24, v22, v23);
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack;
  objc_msgSend(v19, sel_addSubview_, *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack]);
  uint64_t v26 = *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_primaryLabel];
  objc_msgSend(*(id *)&v19[v25], sel_addArrangedSubview_, v26);
  objc_msgSend(*(id *)&v19[v25], sel_addArrangedSubview_, *(void *)&v19[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callTypeLabel]);
  id v27 = objc_msgSend(*(id *)&v19[v25], sel_setCustomSpacing_afterView_, v26, 2.0);
  (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *(void *)v19) + 0x170))(v27);
  uint64_t v28 = self;
  uint64_t v29 = v19;
  id v30 = objc_msgSend(v28, sel_clearColor);
  objc_msgSend(v29, sel_setBackgroundColor_, v30);

  id v31 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v31, sel_addObserver_selector_name_object_, v29, sel_handleContentSizeCategoryDidChange_, *MEMORY[0x1E4FB27A8], 0);

  outlined destroy of ConversationControlsRecipe(a1);
  return v29;
}

uint64_t type metadata accessor for CallAgainHUDView()
{
  uint64_t result = type metadata singleton initialization cache for CallAgainHUDView;
  if (!type metadata singleton initialization cache for CallAgainHUDView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void CallAgainHUDView.updateFromRecipe(_:)(uint64_t a1)
{
  CallAgainHUDView.updateAvatar()();
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_primaryLabel);
  unint64_t v4 = *(void *)(a1 + 88);
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(char **)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_7;
    }
LABEL_3:
    BOOL v6 = __OFSUB__(v5, 1);
    id v7 = v5 - 1;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v7, (v4 & 0xC000000000000001) == 0, v4);
      if ((v4 & 0xC000000000000001) == 0)
      {
        id v8 = (char *)*(id *)(v4 + 8 * (void)v7 + 32);
LABEL_6:
        uint64_t v5 = v8;
        goto LABEL_7;
      }
    }
    id v8 = (char *)MEMORY[0x1C87744F0](v7, v4);
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = (char *)_CocoaArrayWrapper.endIndex.getter();
  if (v5) {
    goto LABEL_3;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setAttributedText_, v5);

  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callTypeLabel);
  id v10 = objc_msgSend(self, sel_conversationKit);
  v16._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0x454D495445434146;
  v11._object = (void *)0xEE004F454449565FLL;
  v12.value._countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v16);

  outlined bridged method (mbnn) of @objc UILabel.text.setter(v14._countAndFlagsBits, (uint64_t)v14._object, v9);
}

void CallAgainHUDView.updateAvatar()()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (id *)((char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v5 = MEMORY[0x1F4188790](v4);
  id v7 = (id *)((char *)&v13 - v6);
  id v8 = *(void (**)(__n128))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0);
  v8(v5);
  if (v7[7])
  {
    id v9 = v7[7];
    outlined destroy of ConversationControlsRecipe((uint64_t)v7);
    objc_msgSend(v9, sel_removeFromSuperview);
  }
  else
  {
    uint64_t v10 = outlined destroy of ConversationControlsRecipe((uint64_t)v7);
  }
  ((void (*)(uint64_t))v8)(v10);
  if (v3[7])
  {
    id v11 = v3[7];
    outlined destroy of ConversationControlsRecipe((uint64_t)v3);
    id v12 = objc_msgSend(v11, sel_layer);
    objc_msgSend(v12, sel_setAllowsHitTesting_, 0);

    objc_msgSend(v11, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack), sel_insertArrangedSubview_atIndex_, v11, 0);
    swift_unknownObjectWeakAssign();
  }
  else
  {
    outlined destroy of ConversationControlsRecipe((uint64_t)v3);
  }
}

id CallAgainHUDView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CallAgainHUDView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_bottomButtonConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarBottomConstraint] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_primaryLabel;
  *(void *)&v0[v1] = closure #1 in variable initialization expression of CallAgainHUDView.primaryLabel();
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callTypeLabel;
  *(void *)&v0[v2] = closure #1 in variable initialization expression of CallAgainHUDView.callTypeLabel();
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  id v5 = closure #1 in variable initialization expression of CallAgainHUDView.avatarStack(v4);

  *(void *)&v0[v3] = v5;
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageStackView;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  id v8 = closure #1 in variable initialization expression of CallAgainHUDView.videoMessageStackView(v7);

  *(void *)&v0[v6] = v8;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_callBackButton;
  *(void *)&v0[v9] = closure #1 in variable initialization expression of CallAgainHUDView.callBackButton();
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton;
  *(void *)&v0[v10] = closure #1 in variable initialization expression of CallAgainHUDView.closeButton();
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageButton;
  *(void *)&v0[v11] = closure #1 in variable initialization expression of CallAgainHUDView.videoMessageButton();
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_effectsView;
  *(void *)&v0[v12] = closure #1 in LocalParticipantView.overlayBlurView.getter();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStackVerticalSpacingDivisor] = 0x3FCCAC083126E979;
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_showCallDetailsButton;
  *(void *)&v0[v13] = closure #1 in variable initialization expression of CallAgainHUDView.showCallDetailsButton();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CallAgainHUDView.constrainViews()()
{
  uint64_t v1 = v0;
  Layout.LocalParticipantViewCameraControls.init()((uint64_t)v111);
  double v2 = v112;
  static Platform.current.getter();
  unint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v110 = MEMORY[0x1E4FBC860];
  id v4 = (void *)MEMORY[0x1C8776240](&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarView]);
  if (!v4) {
    goto LABEL_9;
  }
  id v5 = v4;
  id v6 = objc_msgSend(v4, sel_widthAnchor);
  id v7 = objc_msgSend(v6, sel_constraintEqualToConstant_, 160.0);

  id v8 = objc_msgSend(v5, sel_heightAnchor);
  id v9 = objc_msgSend(v5, sel_widthAnchor);
  id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v11, 2))
  {
    __break(1u);
    goto LABEL_73;
  }
  OUTLINED_FUNCTION_10_61(v11 + 2);
  specialized Array._endMutation()();
  id v7 = v7;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_11_48();
  if (v12) {
LABEL_73:
  }
    OUTLINED_FUNCTION_33();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v13 = v10;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_11_48();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

LABEL_9:
  char v14 = static Platform.current.getter();
  uint64_t v15 = &OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton;
  if (v14 == 3) {
    uint64_t v15 = &OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageStackView;
  }
  id v16 = *(id *)&v1[*v15];
  id v17 = objc_msgSend(v1, sel_bottomAnchor);
  id v18 = objc_msgSend(v16, sel_bottomAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  id v108 = *(id *)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageStackView];
  id v20 = objc_msgSend(v108, sel_topAnchor);
  uint64_t v107 = OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack;
  id v21 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStack], sel_bottomAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  id v106 = v19;
  CallAgainHUDView.bottomButtonConstraint.setter((uint64_t)v19);
  id v105 = v22;
  CallAgainHUDView.avatarBottomConstraint.setter((uint64_t)v22);
  uint64_t v23 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_effectsView];
  id v24 = objc_msgSend(v23, sel_topAnchor);
  id v25 = objc_msgSend(v1, sel_topAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  id v27 = objc_msgSend(v23, sel_bottomAnchor);
  id v28 = objc_msgSend(v1, sel_bottomAnchor);
  id v29 = objc_msgSend(v27, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v28);

  id v30 = objc_msgSend(v23, sel_trailingAnchor);
  id v31 = objc_msgSend(v1, sel_trailingAnchor);
  id v32 = objc_msgSend(v30, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v31);

  unint64_t v33 = (unint64_t)objc_msgSend(v23, sel_leadingAnchor);
  id v34 = objc_msgSend(v1, sel_leadingAnchor);
  id v35 = objc_msgSend((id)v33, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v34);

  OUTLINED_FUNCTION_15_56();
  if (v36)
  {
    OUTLINED_FUNCTION_14_4();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v37, 4))
  {
    __break(1u);
  }
  else
  {
    id v104 = v16;
    OUTLINED_FUNCTION_10_61(v37 + 4);
    specialized Array._endMutation()();
    id v38 = v26;
    OUTLINED_FUNCTION_7_83();
    OUTLINED_FUNCTION_5_98();
    if (!v12) {
      goto LABEL_15;
    }
  }
  OUTLINED_FUNCTION_33();
LABEL_15:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v39 = v29;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_5_98();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v40 = v32;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_116();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v41 = v35;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_5_98();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (static Platform.current.getter() != 3)
  {
    unint64_t v42 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_closeButton];
    id v43 = objc_msgSend(v42, sel_topAnchor);
    id v44 = objc_msgSend(v108, sel_bottomAnchor);
    if (one-time initialization token for buttonSpacing != -1) {
      swift_once();
    }
    unint64_t v45 = &selRef_ringButton;
    id v103 = objc_msgSend(v43, sel_constraintEqualToAnchor_constant_, v44, *(double *)&static CallAgainHUDView.buttonSpacing);

    id v46 = objc_msgSend(v42, sel_leadingAnchor);
    id v47 = objc_msgSend(v108, sel_leadingAnchor);
    id v48 = objc_msgSend(v46, sel_constraintEqualToAnchor_, v47);

    id v49 = objc_msgSend(v42, sel_trailingAnchor);
    id v50 = objc_msgSend(v108, sel_trailingAnchor);
    id v51 = objc_msgSend(v49, sel_constraintEqualToAnchor_, v50);

    id v52 = objc_msgSend(v1, sel_safeAreaLayoutGuide);
    id v53 = objc_msgSend(v52, sel_trailingAnchor);

    uint64_t v54 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_showCallDetailsButton];
    id v55 = objc_msgSend(v54, sel_trailingAnchor);
    id v56 = OUTLINED_FUNCTION_16_41(12.0);

    unint64_t v57 = (unint64_t)objc_msgSend(v54, sel_topAnchor);
    id v58 = objc_msgSend(v1, sel_safeAreaLayoutGuide);
    id v59 = objc_msgSend(v58, sel_topAnchor);

    id v60 = OUTLINED_FUNCTION_16_41(-8.0);
    OUTLINED_FUNCTION_15_56();
    if (v61)
    {
      OUTLINED_FUNCTION_14_4();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v62 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (__OFADD__(v62, 5))
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_10_61(v62 + 5);
      specialized Array._endMutation()();
      unint64_t v45 = (char **)v103;
      MEMORY[0x1C87733A0]();
      OUTLINED_FUNCTION_1_116();
      if (!v12)
      {
LABEL_28:
        OUTLINED_FUNCTION_13_57();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v63 = v48;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_116();
        if (v12) {
          OUTLINED_FUNCTION_33();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v64 = v51;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_116();
        if (v12) {
          OUTLINED_FUNCTION_33();
        }
        OUTLINED_FUNCTION_13_57();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v65 = v56;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_116();
        if (v12) {
          OUTLINED_FUNCTION_33();
        }
        OUTLINED_FUNCTION_13_57();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v66 = v60;
        OUTLINED_FUNCTION_7_83();
        OUTLINED_FUNCTION_1_116();
        if (v12) {
          OUTLINED_FUNCTION_33();
        }
        OUTLINED_FUNCTION_13_57();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_37;
      }
    }
    OUTLINED_FUNCTION_33();
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v67 = *(void **)&v1[v107];
  id v68 = v106;
  id v69 = v105;
  id v70 = objc_msgSend(v67, sel_centerXAnchor);
  id v71 = objc_msgSend(v1, sel_centerXAnchor);
  id v72 = objc_msgSend(v70, sel_constraintEqualToAnchor_, v71);

  id v73 = objc_msgSend(*(id *)&v1[v107], sel_leadingAnchor);
  id v74 = objc_msgSend(v1, sel_leadingAnchor);
  double v75 = v2 + -3.0;
  id v76 = objc_msgSend(v73, sel_constraintGreaterThanOrEqualToAnchor_constant_, v74, v75);

  unint64_t v77 = (unint64_t)objc_msgSend(v1, sel_trailingAnchor);
  id v78 = objc_msgSend(*(id *)&v1[v107], sel_trailingAnchor);
  id v79 = objc_msgSend((id)v77, sel_constraintGreaterThanOrEqualToAnchor_constant_, v78, v75);

  OUTLINED_FUNCTION_15_56();
  if (v80)
  {
    swift_bridgeObjectRetain();
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v81 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v81, 5))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_10_61(v81 + 5);
    specialized Array._endMutation()();
    id v68 = v68;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_21_33();
    if (!v12) {
      goto LABEL_41;
    }
  }
  OUTLINED_FUNCTION_33();
LABEL_41:
  OUTLINED_FUNCTION_9_66();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v82 = v69;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_21_33();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  OUTLINED_FUNCTION_9_66();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v83 = v72;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_21_33();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  OUTLINED_FUNCTION_9_66();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v84 = v76;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_21_33();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  OUTLINED_FUNCTION_9_66();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v85 = v79;
  OUTLINED_FUNCTION_7_83();
  OUTLINED_FUNCTION_21_33();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  OUTLINED_FUNCTION_9_66();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (static Platform.current.getter() == 1)
  {
    id v86 = objc_msgSend(v108, sel_centerXAnchor);
    id v87 = objc_msgSend(v1, sel_centerXAnchor);
    id v88 = objc_msgSend(v86, sel_constraintEqualToAnchor_, v87);

    id v89 = v88;
    OUTLINED_FUNCTION_7_83();
    OUTLINED_FUNCTION_6_89();
    if (v12) {
      OUTLINED_FUNCTION_33();
    }
    OUTLINED_FUNCTION_8_61();
    specialized Array._endMutation()();

    id v90 = objc_msgSend(v108, sel_widthAnchor);
    id v91 = objc_msgSend(v90, sel_constraintEqualToConstant_, 360.0);

    id v92 = v91;
    OUTLINED_FUNCTION_7_83();
    OUTLINED_FUNCTION_6_89();
    uint64_t v93 = v104;
    if (v12) {
      OUTLINED_FUNCTION_33();
    }
    OUTLINED_FUNCTION_8_61();
    specialized Array._endMutation()();
    goto LABEL_62;
  }
  id v94 = objc_msgSend(v108, sel_leadingAnchor);
  id v95 = objc_msgSend(v1, sel_leadingAnchor);
  id v90 = objc_msgSend(v94, sel_constraintEqualToAnchor_constant_, v95, v75);

  unint64_t v96 = (unint64_t)objc_msgSend(v1, sel_trailingAnchor);
  id v97 = objc_msgSend(v108, sel_trailingAnchor);
  id v98 = objc_msgSend((id)v96, sel_constraintEqualToAnchor_constant_, v97, v75);

  OUTLINED_FUNCTION_15_56();
  if (v99)
  {
    swift_bridgeObjectRetain();
    id v100 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v100 = *(id *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v93 = v104;
  if (__OFADD__(v100, 2))
  {
    __break(1u);
    goto LABEL_79;
  }
  OUTLINED_FUNCTION_10_61((uint64_t)v100 + 2);
  specialized Array._endMutation()();
  id v100 = v90;
  MEMORY[0x1C87733A0]();
  id v90 = *(id *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v90 >= *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_79:
  }
    OUTLINED_FUNCTION_33();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v101 = v98;
  OUTLINED_FUNCTION_7_83();
  OUTLINED_FUNCTION_6_89();
  if (v12) {
    OUTLINED_FUNCTION_33();
  }
  OUTLINED_FUNCTION_8_61();
  specialized Array._endMutation()();

LABEL_62:
  uint64_t v102 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v102, sel_activateConstraints_, isa);
}

Swift::Void __swiftcall CallAgainHUDView.layoutSubviews()()
{
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for CallAgainHUDView();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_bottomButtonConstraint];
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v0, sel_frame);
    double v4 = v3;
    double v5 = CallAgainHUDView.buttonBottomPaddingDivisor.getter();
    OUTLINED_FUNCTION_12_53(v4 - v4 * (1.0 - v5));
  }
  id v6 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarBottomConstraint];
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v0, sel_frame);
    OUTLINED_FUNCTION_12_53(v8- v8 * (1.0 - *(double *)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_avatarStackVerticalSpacingDivisor]));
  }
}

id CallAgainHUDView.handleContentSizeCategoryDidChange(_:)()
{
  id v1 = objc_msgSend(v0, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  char v3 = UIContentSizeCategory.isAccessibilityCategory.getter();
  double v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit16CallAgainHUDView_videoMessageStackView];
  return objc_msgSend(v4, sel_setAxis_, v3 & 1);
}

id CallAgainHUDView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void CallAgainHUDView.init(frame:)()
{
}

id CallAgainHUDView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallAgainHUDView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CallAgainHUDView()
{
  return type metadata accessor for CallAgainHUDView();
}

uint64_t type metadata completion function for CallAgainHUDView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for CallAgainHUDView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallAgainHUDView);
}

uint64_t dispatch thunk of CallAgainHUDView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CallAgainHUDView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CallAgainHUDView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CallAgainHUDView.__allocating_init(recipe:)()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of CallAgainHUDView.constrainViews()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

ValueMetadata *type metadata accessor for CallAgainHUDView.Constants()
{
  return &type metadata for CallAgainHUDView.Constants;
}

uint64_t sub_1C33BB644()
{
  return 8;
}

uint64_t sub_1C33BB650()
{
  return swift_release();
}

uint64_t sub_1C33BB658(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C33BB66C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed TUFilteredRequest) -> ()(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed TUFilteredRequest) -> (@out ())(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = a1;
  return a2(&v3);
}

uint64_t key path getter for PeoplePickerCallCreator.presentScreenTimeShield : PeoplePickerCallCreator@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    id v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNComposeRecipient) -> ();
  }
  else
  {
    id v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for PeoplePickerCallCreator.presentScreenTimeShield : PeoplePickerCallCreator(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNComposeRecipient) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(void **)a2 + 104);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return v7(v6, v5);
}

uint64_t PeoplePickerCallCreator.presentScreenTimeShield.getter()
{
  swift_beginAccess();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v0);
  return OUTLINED_FUNCTION_35();
}

uint64_t (*PeoplePickerCallCreator.presentScreenTimeShield.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t PeoplePickerCallCreator.init(callCenter:)(long long *a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  outlined init with take of Notice(a1, v1 + 32);
  return v1;
}

void PeoplePickerCallCreator.invitePeople(_:withVideo:senderIdentity:activity:messagesGroup:)(unint64_t a1, int a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v81 = a5;
  id v82 = a3;
  int v83 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessagesGroup?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)&v77 - v12;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 < 1)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    return;
  }
  uint64_t v80 = v10;
  unint64_t v77 = a4;
  id v78 = v5;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  unint64_t v15 = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1C376BA10;
  unint64_t v88 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PickablePerson]);
  uint64_t v17 = String.init<A>(reflecting:)();
  uint64_t v19 = v18;
  uint64_t v20 = MEMORY[0x1E4FBB1A0];
  *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v21 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v16 + 64) = v21;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  LOBYTE(v88) = v83 & 1;
  uint64_t v22 = String.init<A>(reflecting:)();
  *(void *)(v16 + 96) = v20;
  *(void *)(v16 + 104) = v21;
  *(void *)(v16 + 72) = v22;
  *(void *)(v16 + 80) = v23;
  if (v82)
  {
    unint64_t v88 = (unint64_t)v82;
    id v24 = v82;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUSenderIdentity);
    id v25 = v24;
    uint64_t v26 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v27 = 0xE300000000000000;
    uint64_t v26 = 7104878;
  }
  id v79 = v13;
  *(void *)(v16 + 136) = v20;
  *(void *)(v16 + 144) = v21;
  *(void *)(v16 + 112) = v26;
  *(void *)(v16 + 120) = v27;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  unint64_t v88 = v15;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v28 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v28)
    {
LABEL_16:
      id v86 = self;
      if (v28 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v29 = 0;
      unint64_t v30 = a1 & 0xC000000000000001;
      long long v85 = xmmword_1C3769830;
      unint64_t v84 = a1;
      do
      {
        if (v30) {
          id v31 = (char *)MEMORY[0x1C87744F0](v29, a1);
        }
        else {
          id v31 = (char *)*(id *)(a1 + 8 * v29 + 32);
        }
        id v32 = v31;
        unint64_t v33 = (void *)MEMORY[0x1C87730B0](*(void *)&v31[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address], *(void *)&v31[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address + 8]);
        id v34 = objc_msgSend(v86, sel_normalizedHandleWithDestinationID_, v33);

        if (v34)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v85;
          *(void *)(inited + 32) = v34;
          unint64_t v87 = inited;
          specialized Array._endMutation()();
          unint64_t v36 = v87;
          if (v87 >> 62)
          {
            id v43 = v34;
            swift_bridgeObjectRetain();
            uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v37 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
            id v38 = v34;
          }
          if (v37) {
            specialized Set.init(_nonEmptyArrayLiteral:)(v36);
          }
          else {
            swift_bridgeObjectRelease();
          }
          id v39 = objc_allocWithZone(MEMORY[0x1E4FADB80]);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v41 = objc_msgSend(v39, sel_initWithHandles_, isa);

          a1 = v84;
          if (v41)
          {
            MEMORY[0x1C87733A0]();
            OUTLINED_FUNCTION_6_90();
            if (v42) {
              OUTLINED_FUNCTION_0_77();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
        }
        ++v29;
      }
      while (v28 != v29);
      swift_bridgeObjectRelease();
      unint64_t v44 = v88;
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v44 = MEMORY[0x1E4FBC860];
LABEL_37:
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUJoinConversationRequest);
  uint64_t v45 = swift_bridgeObjectRetain();
  specialized Set.init<A>(_:)(v45);
  id v46 = TUJoinConversationRequest.__allocating_init(remoteMembers:)();
  objc_msgSend(v46, sel_setVideoEnabled_, v83 & 1);
  uint64_t v47 = (uint64_t)v79;
  if (v44 >> 62)
  {
    OUTLINED_FUNCTION_32();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v48 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v48 == 1)
  {
    char v49 = v83;
    objc_msgSend(v46, sel_setVideo_, v83 & 1);
    if ((v49 & 1) == 0)
    {
      id v50 = objc_msgSend(self, sel_expanseProvider);
      OUTLINED_FUNCTION_5_99((uint64_t)v50, sel_setProvider_);
    }
  }
  id v51 = objc_msgSend(v82, sel_handle, v77, v78);
  OUTLINED_FUNCTION_5_99((uint64_t)v51, sel_setCallerID_);

  if (one-time initialization token for startMultiwayCall != -1) {
    swift_once();
  }
  uint64_t v52 = swift_bridgeObjectRetain();
  outlined bridged method (mbgnn) of @objc TUJoinConversationRequest.invitationPreferences.setter(v52, v46);
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_setWantsStagingArea_, 0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v53 - 8);
  OUTLINED_FUNCTION_60();
  outlined init with copy of MessagesGroup?(v81, v47);
  uint64_t v54 = type metadata accessor for MessagesGroup();
  if (__swift_getEnumTagSinglePayload(v47, 1, v54) == 1)
  {
    outlined destroy of MessagesGroup?(v47);
    uint64_t v55 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_13_18(v55);
    Class v56 = 0;
  }
  else
  {
    uint64_t v57 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v59 = v58;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v48, v47, v57);
    outlined destroy of MessagesGroup(v47);
    __swift_storeEnumTagSinglePayload(v48, 0, 1, v57);
    Class v56 = 0;
    if (__swift_getEnumTagSinglePayload(v48, 1, v57) != 1)
    {
      Class v56 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v48, v57);
    }
  }
  objc_msgSend(v46, sel_setMessagesGroupUUID_, v56);

  uint64_t v61 = (uint64_t)v80;
  outlined init with copy of MessagesGroup?(v81, (uint64_t)v80);
  if (__swift_getEnumTagSinglePayload(v61, 1, v54) == 1)
  {
    uint64_t v62 = outlined destroy of MessagesGroup?(v61);
    id v63 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of MessagesGroup(v61);
    uint64_t v64 = OUTLINED_FUNCTION_35();
    id v63 = (void *)MEMORY[0x1C87730B0](v64);
    uint64_t v62 = swift_bridgeObjectRelease();
  }
  id v66 = v77;
  id v65 = v78;
  OUTLINED_FUNCTION_5_99(v62, sel_setMessagesGroupName_);

  id v67 = objc_msgSend(v46, sel_setOriginatingUIType_, 21);
  if (v66)
  {
    id v68 = v66;
    OUTLINED_FUNCTION_5_99((uint64_t)v68, sel_setActivity_);
    id v69 = objc_msgSend(self, sel_expanseProvider);
    objc_msgSend(v46, sel_setProvider_, v69);

    objc_msgSend(v46, sel_setShouldLaunchBackgroundInCallUI_, 1);
  }
  uint64_t v70 = (*(uint64_t (**)(id))(*v65 + 96))(v67);
  if (v70)
  {
    id v71 = (void (*)(void))v70;
    id v72 = objc_msgSend(self, sel_sharedInstance);
    id v73 = objc_msgSend(v72, sel_callFilterController);

    LODWORD(v72) = objc_msgSend(v73, sel_shouldRestrictJoinConversationRequest_performSynchronously_, v46, 1);
    if (v72)
    {
      id v74 = v46;
      v71();

      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v71);
      return;
    }
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v71);
  }
  uint64_t v75 = v65[7];
  uint64_t v76 = v65[8];
  __swift_project_boxed_opaque_existential_1(v65 + 4, v75);
  (*(void (**)(id, uint64_t, uint64_t))(v76 + 224))(v46, v75, v76);
}

id TUJoinConversationRequest.__allocating_init(remoteMembers:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithRemoteMembers_, isa);

  return v2;
}

void PeoplePickerCallCreator.dialCall(provider:video:contact:handle:senderIdentity:ttyType:originatingUIType:)(void *a1, char a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  id v15 = PeoplePickerCallCreator.handleForDialRequest(withProvider:handle:contact:)(a1, a4, a3);
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBC0]), sel_initWithProvider_, a1);
    objc_msgSend(v17, sel_setVideo_, a2 & 1);
    if (a3)
    {
      id v18 = objc_msgSend(a3, sel_identifier);
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      uint64_t v22 = (void *)MEMORY[0x1C87730B0](v19, v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
    }
    objc_msgSend(v17, sel_setContactIdentifier_, v22);

    objc_msgSend(v17, sel_setHandle_, v16);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    MEMORY[0x1F4188790](v23 - 8);
    OUTLINED_FUNCTION_60();
    if (a5)
    {
      id v24 = objc_msgSend(a5, sel_UUID);
      uint64_t v25 = type metadata accessor for UUID();
      uint64_t v44 = a6;
      HIDWORD(v43) = a7;
      OUTLINED_FUNCTION_4();
      uint64_t v27 = v26;
      MEMORY[0x1F4188790](v28);
      unint64_t v30 = (char *)&v43 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(void *, char *, uint64_t))(v27 + 32))(v22, v30, v25);
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v25);
      a7 = HIDWORD(v43);
      a6 = v44;
      Class isa = 0;
      if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v25) != 1)
      {
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v25);
      }
    }
    else
    {
      uint64_t v32 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_13_18(v32);
      Class isa = 0;
    }
    objc_msgSend(v17, sel_setLocalSenderIdentityUUID_, isa);

    objc_msgSend(v17, sel_setTtyType_, a6);
    objc_msgSend(v17, sel_setOriginatingUIType_, a7);
    uint64_t v33 = (*(uint64_t (**)(id))(*v8 + 96))(objc_msgSend(v17, sel_setPreferDefaultApp_, 0));
    if (v33)
    {
      id v34 = (void (*)(void))v33;
      id v35 = objc_msgSend(self, sel_sharedInstance);
      id v36 = objc_msgSend(v35, sel_callFilterController);

      LODWORD(v35) = objc_msgSend(v36, sel_shouldRestrictDialRequest_performSynchronously_, v17, 1);
      if (v35)
      {
        id v37 = v17;
        v34();

        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v34);
        return;
      }
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v34);
    }
    id v38 = v8 + 4;
    uint64_t v40 = v8[7];
    uint64_t v39 = v8[8];
    __swift_project_boxed_opaque_existential_1(v38, v40);
    *(void *)(swift_allocObject() + 16) = v17;
    id v41 = *(void (**)(void))(v39 + 232);
    id v42 = v17;
    v41();

    swift_release();
  }
}

id PeoplePickerCallCreator.handleForDialRequest(withProvider:handle:contact:)(void *a1, id a2, void *a3)
{
  if (!objc_msgSend(a1, sel_isTelephonyProvider) || objc_msgSend(a2, sel_type) == (id)2)
  {
    id v5 = a2;
    return a2;
  }
  if (!a3) {
    goto LABEL_18;
  }
  id v6 = objc_msgSend(a3, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_17;
  }
LABEL_7:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v7 & 0xC000000000000001) == 0, v7);
  if ((v7 & 0xC000000000000001) != 0) {
    id v8 = (id)MEMORY[0x1C87744F0](0, v7);
  }
  else {
    id v8 = *(id *)(v7 + 32);
  }
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v9, sel_value);

  if (v10)
  {
    id v11 = objc_msgSend(v10, sel_stringValue);
    if (!v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v11 = (id)MEMORY[0x1C87730B0](v12);
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = outlined bridged method (pb) of @objc CNPhoneNumber.countryCode.getter(v10);
    if (v14)
    {
      id v15 = (void *)MEMORY[0x1C87730B0](v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v15 = 0;
    }
    a2 = objc_msgSend(self, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v11, v15);

    return a2;
  }
LABEL_18:
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C37696D0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  id v18 = a2;
  uint64_t v19 = String.init<A>(reflecting:)();
  uint64_t v21 = v20;
  uint64_t v22 = MEMORY[0x1E4FBB1A0];
  *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v23 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v17 + 64) = v23;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  if (a3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
    id v24 = a3;
    uint64_t v25 = String.init<A>(reflecting:)();
  }
  else
  {
    unint64_t v26 = 0xE300000000000000;
    uint64_t v25 = 7104878;
  }
  *(void *)(v17 + 96) = v22;
  *(void *)(v17 + 104) = v23;
  *(void *)(v17 + 72) = v25;
  *(void *)(v17 + 80) = v26;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t closure #1 in PeoplePickerCallCreator.dialCall(provider:video:contact:handle:senderIdentity:ttyType:originatingUIType:)(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1C37696D0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUDialRequest);
    id v5 = a2;
    uint64_t v6 = String.init<A>(reflecting:)();
    uint64_t v8 = v7;
    uint64_t v9 = MEMORY[0x1E4FBB1A0];
    *(void *)(v4 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v4 + 64) = v10;
    *(void *)(v4 + 32) = v6;
    *(void *)(v4 + 40) = v8;
    id v11 = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    *(void *)(v4 + 96) = v9;
    *(void *)(v4 + 104) = v10;
    *(void *)(v4 + 72) = v12;
    *(void *)(v4 + 80) = v13;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void PeoplePickerCallCreator.createCallWithLink(_:facetimeUnavailablePeople:facetimeAvailablePeople:shouldAddOtherInvitedToRemoteMembers:activity:)(void *a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v66 = MEMORY[0x1E4FBC860];
  if (a2 >> 62)
  {
    OUTLINED_FUNCTION_32();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v63 = a3;
  uint64_t v62 = v4;
  if (v10)
  {
    uint64_t v11 = self;
    if (v10 < 1)
    {
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v12 = (void *)v11;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        uint64_t v14 = (char *)MEMORY[0x1C87744F0](i, a2);
      }
      else {
        uint64_t v14 = (char *)*(id *)(a2 + 8 * i + 32);
      }
      id v15 = v14;
      uint64_t v16 = (void *)MEMORY[0x1C87730B0](*(void *)&v14[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address], *(void *)&v14[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address + 8]);
      id v17 = objc_msgSend(v12, sel_normalizedHandleWithDestinationID_, v16);

      if (v17)
      {
        id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB80]), sel_initWithHandle_, v17);
        id v19 = objc_msgSend(v18, sel_handle);

        if (v19)
        {
          MEMORY[0x1C87733A0]();
          if (*(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            OUTLINED_FUNCTION_0_77();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = v66;
    uint64_t v6 = v62;
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v66 = v9;
  if (!(a3 >> 62))
  {
    uint64_t v20 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_20;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v34 = MEMORY[0x1E4FBC860];
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20) {
    goto LABEL_41;
  }
LABEL_20:
  id v64 = self;
  if (v20 < 1)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_45;
    }
    goto LABEL_53;
  }
  unint64_t v59 = v5;
  uint64_t v21 = 0;
  unint64_t v22 = a3 & 0xC000000000000001;
  do
  {
    if (v22) {
      unint64_t v23 = (char *)MEMORY[0x1C87744F0](v21, a3);
    }
    else {
      unint64_t v23 = (char *)*(id *)(a3 + 8 * v21 + 32);
    }
    id v24 = v23;
    uint64_t v25 = (void *)MEMORY[0x1C87730B0](*(void *)&v23[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address], *(void *)&v23[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address + 8]);
    id v26 = objc_msgSend(v64, sel_normalizedHandleWithDestinationID_, v25);

    if (v26)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C3769830;
      *(void *)(inited + 32) = v26;
      unint64_t v65 = inited;
      specialized Array._endMutation()();
      if (v65 >> 62)
      {
        id v33 = v26;
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v29 = v26;
      }
      if (v28) {
        specialized Set.init(_nonEmptyArrayLiteral:)(v65);
      }
      else {
        swift_bridgeObjectRelease();
      }
      id v30 = objc_allocWithZone(MEMORY[0x1E4FADB80]);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v32 = objc_msgSend(v30, sel_initWithHandles_, isa);

      a3 = v63;
      if (v32)
      {
        MEMORY[0x1C87733A0]();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_0_77();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {
    }
    ++v21;
  }
  while (v20 != v21);
  swift_bridgeObjectRelease();
  uint64_t v34 = v9;
  uint64_t v6 = v62;
  unint64_t v5 = v59;
LABEL_42:
  uint64_t v66 = v34;
  if ((a4 & 1) == 0)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    id v47 = a1;
    specialized Set.init<A>(_:)(v5);
    id v48 = objc_allocWithZone(MEMORY[0x1E4FADBE8]);
    char v49 = (void *)OUTLINED_FUNCTION_35();
    id v46 = @nonobjc TUJoinConversationRequest.init(conversationLink:otherInvitedHandles:sendLetMeInRequest:)(v49, v50, 0);
    goto LABEL_55;
  }
  if (v5 >> 62) {
    goto LABEL_52;
  }
  uint64_t v35 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v35)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
LABEL_45:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v5 & 0xC000000000000001) == 0, v5);
  if ((v5 & 0xC000000000000001) != 0) {
    id v36 = (id)MEMORY[0x1C87744F0](0, v5);
  }
  else {
    id v36 = *(id *)(v5 + 32);
  }
  id v37 = v36;
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB80]), sel_initWithHandle_, v37);
  objc_msgSend(v38, sel_setIsOtherInvitedHandle_, 1);
  id v39 = v38;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_6_90();
  if (v40) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v41 = a1;
  specialized Set.init<A>(_:)(v5);
  uint64_t v42 = specialized Set.init<A>(_:)(v66);
  id v43 = objc_allocWithZone(MEMORY[0x1E4FADBE8]);
  uint64_t v44 = (void *)OUTLINED_FUNCTION_35();
  id v46 = @nonobjc TUJoinConversationRequest.init(conversationLink:otherInvitedHandles:remoteMembers:sendLetMeInRequest:)(v44, v45, v42, 0);

LABEL_55:
  if (one-time initialization token for inviteWithMessages != -1) {
    swift_once();
  }
  uint64_t v51 = swift_bridgeObjectRetain();
  outlined bridged method (mbgnn) of @objc TUJoinConversationRequest.invitationPreferences.setter(v51, v46);
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_setVideoEnabled_, 1);
  uint64_t v52 = (*(uint64_t (**)(id))(*v6 + 96))(objc_msgSend(v46, sel_setWantsStagingArea_, 0));
  if (!v52) {
    goto LABEL_61;
  }
  uint64_t v53 = (void (*)(void))v52;
  id v54 = objc_msgSend(self, sel_sharedInstance);
  id v55 = objc_msgSend(v54, sel_callFilterController);

  LODWORD(v54) = objc_msgSend(v55, sel_shouldRestrictJoinConversationRequest_performSynchronously_, v46, 1);
  if (!v54)
  {
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v53);
LABEL_61:
    uint64_t v57 = v6[7];
    uint64_t v58 = v6[8];
    __swift_project_boxed_opaque_existential_1(v6 + 4, v57);
    (*(void (**)(id, uint64_t, uint64_t))(v58 + 224))(v46, v57, v58);
    goto LABEL_62;
  }
  id v56 = v46;
  v53();

  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v53);
LABEL_62:
}

uint64_t PeoplePickerCallCreator.deinit()
{
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return v0;
}

uint64_t PeoplePickerCallCreator.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocClassInstance();
}

id @nonobjc TUJoinConversationRequest.init(conversationLink:otherInvitedHandles:sendLetMeInRequest:)(void *a1, uint64_t a2, char a3)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v3, sel_initWithConversationLink_otherInvitedHandles_sendLetMeInRequest_, a1, isa, a3 & 1);

  return v7;
}

id @nonobjc TUJoinConversationRequest.init(conversationLink:otherInvitedHandles:remoteMembers:sendLetMeInRequest:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  Class v8 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v4, sel_initWithConversationLink_otherInvitedHandles_remoteMembers_sendLetMeInRequest_, a1, isa, v8, a4 & 1);

  return v9;
}

void outlined bridged method (mbgnn) of @objc TUJoinConversationRequest.invitationPreferences.setter(uint64_t a1, void *a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationInvitationPreference);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUConversationInvitationPreference and conformance NSObject, &lazy cache variable for type metadata for TUConversationInvitationPreference);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_setInvitationPreferences_, isa);
}

uint64_t outlined bridged method (pb) of @objc CNPhoneNumber.countryCode.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_countryCode);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined init with copy of MessagesGroup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessagesGroup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MessagesGroup?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessagesGroup?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of MessagesGroup(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessagesGroup();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C33BD840()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PeoplePickerCallCreator.dialCall(provider:video:contact:handle:senderIdentity:ttyType:originatingUIType:)(uint64_t a1)
{
  return closure #1 in PeoplePickerCallCreator.dialCall(provider:video:contact:handle:senderIdentity:ttyType:originatingUIType:)(a1, *(void **)(v1 + 16));
}

uint64_t method lookup function for PeoplePickerCallCreator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PeoplePickerCallCreator);
}

uint64_t dispatch thunk of PeoplePickerCallCreator.presentScreenTimeShield.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PeoplePickerCallCreator.presentScreenTimeShield.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PeoplePickerCallCreator.presentScreenTimeShield.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PeoplePickerCallCreator.__allocating_init(callCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PeoplePickerCallCreator.invitePeople(_:withVideo:senderIdentity:activity:messagesGroup:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PeoplePickerCallCreator.dialCall(provider:video:contact:handle:senderIdentity:ttyType:originatingUIType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PeoplePickerCallCreator.createCallWithLink(_:facetimeUnavailablePeople:facetimeAvailablePeople:shouldAddOtherInvitedToRemoteMembers:activity:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t sub_1C33BD98C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t SystemBannerDismissalReason.description.getter(uint64_t a1)
{
  uint64_t result = 0xD000000000000020;
  if (!a1) {
    return 0xD000000000000023;
  }
  if (a1 == 2) {
    return 0xD000000000000028;
  }
  if (a1 != 1)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  return result;
}

BOOL static SystemBannerHostError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SystemBannerHostError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SystemBannerHostError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SystemBannerHostError(char *a1, char *a2)
{
  return static SystemBannerHostError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemBannerHostError()
{
  return SystemBannerHostError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SystemBannerHostError(uint64_t a1)
{
  SystemBannerHostError.hash(into:)(a1, *v1);
}

unint64_t SystemBannerDismissalReason.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SystemBannerDismissalReason@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = SystemBannerDismissalReason.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemBannerDismissalReason()
{
  return SystemBannerDismissalReason.description.getter(*v0);
}

uint64_t static SystemBannerHostViewController.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier) == *(void *)(a2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier)
    && *(void *)(a1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8) == *(void *)(a2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8))
  {
    return OUTLINED_FUNCTION_4_3();
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t key path getter for SystemBannerHostViewController.delegate : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.delegate : SystemBannerHostViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t SystemBannerHostViewController.delegate.getter()
{
  return ConversationControlsManager.videoTileConversationController.getter();
}

uint64_t SystemBannerHostViewController.delegate.setter()
{
  return SystemBannerHostViewController.delegate.setter();
}

{
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_23_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*SystemBannerHostViewController.delegate.modify())()
{
  uint64_t v2 = malloc(0x30uLL);
  uint64_t v3 = OUTLINED_FUNCTION_56((uint64_t)v2);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_delegate;
  *(void *)(v3 + 32) = v0;
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = v0 + v4;
  OUTLINED_FUNCTION_6_1();
  *(void *)(v1 + 24) = MEMORY[0x1C8776240](v5);
  return SystemBannerHostViewController.delegate.modify;
}

uint64_t key path getter for SystemBannerHostViewController.controlsManager : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.controlsManager : SystemBannerHostViewController(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1C0))(*a1);
}

void SystemBannerHostViewController.controlsManager.didset()
{
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.banners);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (v5)
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v23 = v8;
    *(_DWORD *)id v7 = 136315138;
    id v9 = (id *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsManager);
    swift_beginAccess();
    uint64_t v10 = *(uint64_t (**)(void))((*v6 & *(void *)*v9) + 0x270);
    id v11 = *v9;
    uint64_t v12 = v10();
    uint64_t v14 = v13;

    uint64_t v24 = v12;
    uint64_t v25 = v14;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Call);
    uint64_t v15 = String.init<A>(reflecting:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "Updating the system HUD controls manager for call %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v8, -1, -1);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v17 = (*(uint64_t (**)(void))((*v6 & *v2) + 0x2D0))();
  if (v17)
  {
    id v19 = (void *)v17;
    uint64_t v20 = v18;
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v22 = (id *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsManager);
    swift_beginAccess();
    (*(void (**)(id, uint64_t, uint64_t))(v20 + 96))(*v22, ObjectType, v20);
  }
}

id SystemBannerHostViewController.controlsManager.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void SystemBannerHostViewController.controlsManager.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsManager);
  OUTLINED_FUNCTION_11_0();
  os_log_type_t v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;

  SystemBannerHostViewController.controlsManager.didset();
}

uint64_t (*SystemBannerHostViewController.controlsManager.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return SystemBannerHostViewController.controlsManager.modify;
}

uint64_t SystemBannerHostViewController.controlsManager.modify(uint64_t a1, char a2)
{
  return SystemBannerHostViewController.controlsManager.modify(a1, a2, (uint64_t (*)(uint64_t))SystemBannerHostViewController.controlsManager.didset);
}

id SystemBannerHostViewController.callCenter.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (char *)(*(uint64_t (**)(void))(v0 + 440))();
  id v2 = *(id *)&v1[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_callCenter];

  return v2;
}

uint64_t SystemBannerHostViewController.bannerIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t key path getter for SystemBannerHostViewController.sizeClass : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1D8))();
  *a2 = result;
  return result;
}

uint64_t SystemBannerHostViewController.sizeClass.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(void *)v0;
}

uint64_t SystemBannerHostViewController.sizeClass.setter(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return result;
}

uint64_t key path getter for SystemBannerHostViewController.controlsType : SystemBannerHostViewController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1F0))();
}

uint64_t key path setter for SystemBannerHostViewController.controlsType : SystemBannerHostViewController(uint64_t a1)
{
  outlined init with copy of ConversationControlsType(a1, (uint64_t)&v2);
  return SystemBannerHostViewController.controlsType.setter();
}

uint64_t SystemBannerHostViewController.controlsType.getter()
{
  OUTLINED_FUNCTION_2();
  uint64_t v0 = OUTLINED_FUNCTION_23_0();
  return outlined init with copy of ConversationControlsType(v0, v1);
}

uint64_t SystemBannerHostViewController.controlsType.setter()
{
  OUTLINED_FUNCTION_6_1();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  outlined assign with take of ConversationControlsType(v0, v1);
  return swift_endAccess();
}

uint64_t key path getter for SystemBannerHostViewController.notice : SystemBannerHostViewController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x208))();
}

uint64_t key path setter for SystemBannerHostViewController.notice : SystemBannerHostViewController(uint64_t a1)
{
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v2, &demangling cache variable for type metadata for Notice?);
  return SystemBannerHostViewController.notice.setter();
}

uint64_t SystemBannerHostViewController.notice.getter()
{
  OUTLINED_FUNCTION_2();
  uint64_t v0 = OUTLINED_FUNCTION_23_0();
  return outlined init with copy of Environment<DynamicTypeSize>.Content(v0, v1, v2);
}

uint64_t SystemBannerHostViewController.notice.setter()
{
  OUTLINED_FUNCTION_6_1();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  outlined assign with take of Notice?(v0, v1);
  return swift_endAccess();
}

id SystemBannerHostViewController.captureOnlyBackdropView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___captureOnlyBackdropView;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___captureOnlyBackdropView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___captureOnlyBackdropView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB23F0]), sel_init);
    objc_msgSend(v4, sel_setRenderMode_, 1);
    objc_msgSend(v4, sel_setUserInteractionEnabled_, 1);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void SystemBannerHostViewController.shadowView.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_shadowView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_shadowView) = a1;
}

uint64_t SystemBannerHostViewController.OverriddenSystemApertureContent.sizeClass.getter()
{
  return *(void *)v0;
}

uint64_t SystemBannerHostViewController.OverriddenSystemApertureContent.controlsType.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ConversationControlsType(v1 + 8, a1);
}

_OWORD *SystemBannerHostViewController.OverriddenSystemApertureContent.init(sizeClass:controlsType:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  return outlined init with take of ConversationControlsType(a2, (_OWORD *)(a3 + 8));
}

uint64_t SystemBannerHostViewController.overriddenSystemApertureContent.didset(uint64_t a1)
{
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)&v21, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v24 == 255)
  {
    uint64_t v14 = &v21;
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  }
  v25[0] = v21;
  v25[1] = v22;
  void v25[2] = v23;
  unsigned __int8 v26 = v24;
  uint64_t v2 = v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v2, (uint64_t)v19, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v20 == 255)
  {
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v25);
    uint64_t v14 = v19;
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  }
  long long v21 = v19[0];
  long long v22 = v19[1];
  long long v23 = v19[2];
  unsigned __int8 v24 = v20;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.banners);
  outlined init with copy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v25, (uint64_t)v19);
  outlined init with copy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)&v21, (uint64_t)v18);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v17 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    outlined init with copy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v19, (uint64_t)v16);
    uint64_t v8 = specialized >> prefix<A>(_:)((uint64_t)v16);
    unint64_t v10 = v9;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v19);
    *(_WORD *)(v6 + 12) = 2080;
    outlined init with copy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v18, (uint64_t)v16);
    uint64_t v11 = specialized >> prefix<A>(_:)((uint64_t)v16);
    unint64_t v13 = v12;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v18);
    _os_log_impl(&dword_1C2F90000, v4, v5, "Updated overridden system aperture content from %s to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v7, -1, -1);
    MEMORY[0x1C87760E0](v6, -1, -1);
  }
  else
  {

    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v18);
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v19);
  }
  outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)&v21);
  return outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v25);
}

uint64_t SystemBannerHostViewController.overriddenSystemApertureContent.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v3, (uint64_t)v7, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  OUTLINED_FUNCTION_6_1();
  uint64_t v4 = OUTLINED_FUNCTION_34_9();
  outlined assign with copy of SystemBannerHostViewController.OverriddenSystemApertureContent?(v4, v5);
  swift_endAccess();
  SystemBannerHostViewController.overriddenSystemApertureContent.didset((uint64_t)v7);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
}

uint64_t SystemBannerHostViewController.needsCustomTimerForEphemeralSystemApertureState.getter()
{
  OUTLINED_FUNCTION_5_13();
  if ((*(uint64_t (**)(void))(v0 + 472))() == 2
    || (OUTLINED_FUNCTION_30_21(), OUTLINED_FUNCTION_83_0(), (v1() & 1) == 0))
  {
    char v5 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_30_21();
    uint64_t v3 = *(void (**)(void))(v2 + 496);
    OUTLINED_FUNCTION_107_5();
    v3();
    ConversationControlsType.associatedNotice.getter((uint64_t)v13);
    outlined destroy of ConversationControlsType((uint64_t)v14);
    uint64_t v4 = v13[3];
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for Notice?);
    if (v4)
    {
      char v5 = 1;
    }
    else
    {
      OUTLINED_FUNCTION_107_5();
      uint64_t v7 = ((uint64_t (*)(void))v3)();
      char v5 = OUTLINED_FUNCTION_22_35(v7, v8, v9, v10, v11, v12);
      outlined destroy of ConversationControlsType((uint64_t)v13);
      outlined destroy of ConversationControlsType((uint64_t)v14);
    }
  }
  return v5 & 1;
}

uint64_t key path getter for SystemBannerHostViewController.systemApertureAlertingManager : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2B8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.systemApertureAlertingManager : SystemBannerHostViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2C0);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t SystemBannerHostViewController.systemApertureAlertingManager.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager;
  if (*(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager];
  }
  else
  {
    type metadata accessor for SystemApertureAlertingManager();
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = v0;
    uint64_t v2 = specialized SystemApertureAlertingManager.init(systemApertureElement:sceneStateDescriber:)(v4, v4, v3);
    *(void *)&v0[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t SystemBannerHostViewController.systemApertureAlertingManager.setter(uint64_t a1)
{
  *(void *)(v1
            + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager) = a1;
  return swift_release();
}

uint64_t (*SystemBannerHostViewController.systemApertureAlertingManager.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = SystemBannerHostViewController.systemApertureAlertingManager.getter();
  return SystemBannerHostViewController.systemApertureAlertingManager.modify;
}

uint64_t SystemBannerHostViewController.systemApertureAlertingManager.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return SystemBannerHostViewController.systemApertureAlertingManager.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  SystemBannerHostViewController.systemApertureAlertingManager.setter(v2);
  return swift_release();
}

uint64_t key path getter for SystemBannerHostViewController.conversationControlsViewController : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2D0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.conversationControlsViewController : SystemBannerHostViewController(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2D8);
  id v5 = *(id *)a1;
  return v4(v2, v3);
}

void SystemBannerHostViewController.conversationControlsViewController.didset(void *a1, uint64_t a2)
{
  void (*v105)(id *__return_ptr);
  id v106;
  id v107;
  double v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  void *v114;
  id v115;
  uint64_t (**v116)(void);
  uint64_t (*v117)(void);
  void *v118;
  void *v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  id v124;
  void *v125;
  id v126;
  id v127;
  id v128;
  void *v129;
  id v130;
  id v131;
  uint64_t v132;
  id v133;
  id v134;
  id v135;
  void *v136;
  Class isa;
  id v138;
  id v139;
  void *v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  void *v145;
  double v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  id v159;
  id v160;
  id v161;
  uint64_t (**v162)(void);
  char *v163;
  id v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  uint64_t v170;
  void *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(uint64_t, uint64_t);
  void *v176;
  id (*v177)(uint64_t);
  void *v178;
  unsigned __int8 v179;
  id v180[5];
  id v181;
  int v182;
  id v183[5];
  id v184[6];

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v168 = (uint64_t)&v157 - v9;
  uint64_t v10 = &v2[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_conversationControlsViewController];
  swift_beginAccess();
  uint64_t v11 = *(void **)v10;
  uint64_t v12 = (SEL *)&selRef_ringButton;
  if (*(void *)v10)
  {
    v171 = a1;
    id v163 = v7;
    uint64_t v167 = a2;
    uint64_t v13 = *((void *)v10 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v13 + 16);
    id v16 = v11;
    uint64_t v17 = v2;
    uint64_t v166 = ObjectType;
    id v170 = v13;
    v15(v2, &protocol witness table for SystemBannerHostViewController, ObjectType, v13);
    uint64_t v18 = v17;
    uint64_t v19 = (uint64_t)&v17[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent];
    swift_beginAccess();
    outlined init with copy of Environment<DynamicTypeSize>.Content(v19, (uint64_t)&v173, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    LODWORD(v19) = v179;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v173, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    if (v19 != 255
      && (v17[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent] & 1) == 0)
    {
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.banners);
      long long v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        long long v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v23 = 0;
        _os_log_impl(&dword_1C2F90000, v21, v22, "[System] Attempting to replace conversationControlsViewController while ephemeralSystemApertureContent is showing which is unsupported and unexpected", v23, 2u);
        MEMORY[0x1C87760E0](v23, -1, -1);
      }
    }
    unsigned __int8 v24 = v171;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.banners);
    id v26 = v24;
    id v27 = v16;
    id v28 = v26;
    id v29 = v27;
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    v164 = v28;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      v184[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v165 = v18;
      if (v24)
      {
        uint64_t v173 = (uint64_t)v28;
        v174 = v167;
        id v35 = v28;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsViewController);
        uint64_t v36 = String.init<A>(reflecting:)();
        unint64_t v38 = v37;
      }
      else
      {
        unint64_t v38 = 0xE300000000000000;
        uint64_t v36 = 7104878;
      }
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, (uint64_t *)v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v173 = (uint64_t)v29;
      v174 = v170;
      id v45 = v29;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsViewController);
      uint64_t v46 = String.init<A>(reflecting:)();
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v30, v31, "[System] Replacing %s with %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v34, -1, -1);
      MEMORY[0x1C87760E0](v33, -1, -1);

      uint64_t v18 = v165;
      uint64_t v12 = (SEL *)&selRef_ringButton;
    }
    else
    {
    }
    objc_msgSend(v18, sel_addChildViewController_, v29);
    id v48 = objc_msgSend(v18, sel_view);
    if (v48)
    {
      char v49 = v48;
      id v50 = objc_msgSend(v29, sel_view);
      if (v50)
      {
        uint64_t v51 = v50;
        objc_msgSend(v49, sel_addSubview_, v50);

        id v52 = objc_msgSend(v29, sel_view);
        if (v52)
        {
          uint64_t v53 = v52;
          objc_msgSend(v52, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v54 = swift_allocObject();
          *(_OWORD *)(v54 + 16) = xmmword_1C3769610;
          id v55 = objc_msgSend(v29, sel_view);
          if (v55)
          {
            id v56 = v55;
            id v57 = objc_msgSend(v55, sel_topAnchor);

            id v58 = objc_msgSend(v18, sel_view);
            if (v58)
            {
              unint64_t v59 = v58;
              id v60 = objc_msgSend(v58, sel_topAnchor);

              uint64_t v61 = (SEL *)&selRef_ringButton;
              id v62 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v60);

              *(void *)(v54 + 32) = v62;
              id v63 = objc_msgSend(v29, sel_view);
              if (v63)
              {
                id v64 = v63;
                id v65 = objc_msgSend(v63, sel_bottomAnchor);

                id v66 = objc_msgSend(v18, sel_view);
                if (v66)
                {
                  id v67 = v66;
                  id v68 = objc_msgSend(v66, sel_bottomAnchor);

                  id v69 = objc_msgSend(v65, sel_constraintEqualToAnchor_, v68);
                  *(void *)(v54 + 40) = v69;
                  uint64_t v173 = v54;
                  specialized Array._endMutation()();
                  unint64_t v70 = v173;
                  id v172 = v173;
                  id v71 = objc_msgSend(self, sel_currentDevice);
                  id v72 = objc_msgSend(v71, sel_userInterfaceIdiom);

                  id v73 = objc_msgSend(v29, sel_view);
                  id v74 = v73;
                  uint64_t v75 = &selRef_ringButton;
                  uint64_t v169 = (id)(v70 >> 62);
                  if (v72 == (id)1)
                  {
                    if (!v73)
                    {
LABEL_91:
                      __break(1u);
                      goto LABEL_92;
                    }
                    id v76 = objc_msgSend(v73, sel_widthAnchor);

                    (*(void (**)(uint64_t))(v170 + 56))(v166);
                    id v74 = objc_msgSend(v76, sel_constraintEqualToConstant_);

                    id v77 = objc_msgSend(v29, sel_view);
                    if (!v77)
                    {
LABEL_92:
                      __break(1u);
                      goto LABEL_93;
                    }
                    id v78 = v77;
                    id v79 = objc_msgSend(v77, sel_centerXAnchor);

                    id v80 = objc_msgSend(v18, sel_view);
                    if (!v80)
                    {
LABEL_93:
                      __break(1u);
                      goto LABEL_94;
                    }
                    uint64_t v81 = v80;
                    uint64_t v12 = (SEL *)objc_msgSend(v80, sel_centerXAnchor);

                    uint64_t v61 = (SEL *)objc_msgSend(v79, sel_constraintEqualToAnchor_, v12);
                    if (v169)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v75 = (char **)(v70 & 0xFFFFFFFFFFFFFF8);
                      uint64_t v82 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    }
                    uint64_t v83 = v82 + 2;
                    unint64_t v84 = v171;
                    if (!__OFADD__(v82, 2))
                    {
LABEL_45:
                      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v83, 1);
                      specialized Array._endMutation()();
                      id v97 = v74;
                      MEMORY[0x1C87733A0]();
                      if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      id v98 = v61;
                      MEMORY[0x1C87733A0]();
                      if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();

                      type metadata accessor for ConversationHUDViewController();
                      uint64_t v99 = swift_dynamicCastClass();
                      if (!v99
                        || (v18[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation] & 1) != 0)
                      {
LABEL_63:
                        uint64_t v136 = self;
                        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
                        swift_bridgeObjectRetain();
                        Class isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease();
                        objc_msgSend(v136, sel_activateConstraints_, isa);

                        SystemBannerHostViewController.installSystemApertureViewsIfNeeded()();
                        if (!v84)
                        {
                          unint64_t v154 = type metadata accessor for ConversationControlsRecipe();
                          uint64_t v155 = v168;
                          __swift_storeEnumTagSinglePayload(v168, 1, 1, v154);
                          uint64_t v156 = (uint64_t)v163;
                          (*(void (**)(uint64_t))(v170 + 32))(v166);
                          SystemBannerHostViewController.alertIfNeededForRecipeTransition(from:to:)(v155, v156);
                          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v156, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
                          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v155, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
                          swift_bridgeObjectRelease();
LABEL_71:
                          objc_msgSend(v29, sel_didMoveToParentViewController_, v18);

                          return;
                        }
                        uint64_t v138 = v164;
                        uint64_t v139 = objc_msgSend(v29, sel_view);
                        if (v139)
                        {
                          uint64_t v140 = v139;
                          objc_msgSend(v139, sel_setAlpha_, 0.0);

                          objc_msgSend(v138, sel_willMoveToParentViewController_, 0);
                          os_log_type_t v141 = objc_msgSend(v138, sel_view);
                          if (v141)
                          {
                            uint64_t v142 = v141;
                            uint64_t v143 = objc_msgSend(v29, sel_view);
                            if (v143)
                            {
                              unint64_t v144 = v143;
                              uint64_t v145 = self;
                              swift_bridgeObjectRelease();
                              if (one-time initialization token for shared != -1) {
                                swift_once();
                              }
                              uint64_t v146 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
                              uint64_t v147 = swift_allocObject();
                              swift_unknownObjectWeakInit();
                              uint64_t v148 = (void *)swift_allocObject();
                              uint64_t v149 = v167;
                              v148[2] = v138;
                              v148[3] = v149;
                              uint64_t v150 = v170;
                              v148[4] = v29;
                              v148[5] = v150;
                              v148[6] = v147;
                              uint64_t v177 = partial apply for closure #1 in SystemBannerHostViewController.conversationControlsViewController.didset;
                              uint64_t v178 = v148;
                              uint64_t v173 = MEMORY[0x1E4F143A8];
                              v174 = 1107296256;
                              uint64_t v175 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
                              v176 = &block_descriptor_108;
                              unint64_t v151 = _Block_copy(&v173);
                              unint64_t v152 = v29;
                              unint64_t v153 = v138;
                              swift_release();
                              objc_msgSend(v145, sel_transitionFromView_toView_duration_options_completion_, v142, v144, 5242880, v151, v146);

                              _Block_release(v151);
                              goto LABEL_71;
                            }
                            goto LABEL_90;
                          }
LABEL_89:
                          __break(1u);
LABEL_90:
                          __break(1u);
                          goto LABEL_91;
                        }
LABEL_88:
                        __break(1u);
                        goto LABEL_89;
                      }
                      id v100 = (void *)v99;
                      id v101 = objc_allocWithZone(MEMORY[0x1E4FB1EB0]);
                      uint64_t v169 = v29;
                      id v161 = v29;
                      id v102 = objc_msgSend(v101, sel_init);
                      objc_msgSend(v102, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
                      id v103 = objc_msgSend(v102, sel_layer);
                      id v104 = (void *)MEMORY[0x1E4FBC8C8];
                      id v105 = *(void (**)(id *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v100) + 0x150);
                      v105(v180);
                      id v106 = objc_msgSend(v180[0], sel_CGColor);
                      outlined release of BackgroundView<A>(v180);
                      objc_msgSend(v103, sel_setShadowColor_, v106);

                      uint64_t v107 = objc_msgSend(v102, sel_layer);
                      v105(&v181);
                      outlined release of BackgroundView<A>(&v181);
                      LODWORD(v108) = v182;
                      objc_msgSend(v107, sel_setShadowOpacity_, v108);

                      uint64_t v109 = objc_msgSend(v102, sel_layer);
                      v105(v183);
                      outlined release of BackgroundView<A>(v183);
                      objc_msgSend(v109, sel_setShadowRadius_, *(double *)&v183[2]);

                      uint64_t v110 = objc_msgSend(v102, sel_layer);
                      v105(v184);
                      outlined release of BackgroundView<A>(v184);
                      objc_msgSend(v110, sel_setShadowOffset_, *(double *)&v184[3], *(double *)&v184[4]);

                      uint64_t v111 = objc_msgSend(v102, sel_layer);
                      objc_msgSend(v111, sel_setShadowPathIsBounds_, 1);

                      double v112 = v102;
                      SystemBannerHostViewController.shadowView.setter((uint64_t)v102);
                      uint64_t v165 = v18;
                      uint64_t v113 = objc_msgSend(v18, sel_view);
                      if (!v113)
                      {
LABEL_99:
                        __break(1u);
                        return;
                      }
                      uint64_t v114 = v113;
                      objc_msgSend(v113, sel_insertSubview_atIndex_, v112, 1);

                      uint64_t v115 = objc_msgSend(v112, sel_topAnchor);
                      uint64_t v116 = (uint64_t (**)(void))((*v104 & *v100) + 440);
                      uint64_t v117 = *v116;
                      uint64_t v118 = (void *)(*v116)();
                      Class v162 = v116;
                      uint64_t v119 = v118;
                      uint64_t v120 = objc_msgSend(v118, sel_topAnchor);

                      uint64_t v159 = objc_msgSend(v115, sel_constraintEqualToAnchor_, v120);
                      uint64_t v121 = objc_msgSend(v112, sel_leadingAnchor);
                      uint64_t v122 = (void *)v117();
                      uint64_t v123 = objc_msgSend(v122, sel_leadingAnchor);

                      uint64_t v158 = objc_msgSend(v121, sel_constraintEqualToAnchor_, v123);
                      uint64_t v124 = objc_msgSend(v112, sel_bottomAnchor);
                      uint64_t v125 = (void *)v117();
                      uint64_t v126 = objc_msgSend(v125, sel_bottomAnchor);

                      uint64_t v127 = objc_msgSend(v124, sel_constraintEqualToAnchor_, v126);
                      uint64_t v160 = v112;
                      uint64_t v128 = objc_msgSend(v112, sel_trailingAnchor);
                      uint64_t v129 = (void *)v117();
                      uint64_t v130 = objc_msgSend(v129, sel_trailingAnchor);

                      uint64_t v131 = objc_msgSend(v128, sel_constraintEqualToAnchor_, v130);
                      if (v172 >> 62)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v132 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        uint64_t v132 = *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      }
                      unint64_t v84 = v171;
                      uint64_t v18 = v165;
                      id v29 = v169;
                      if (__OFADD__(v132, 4))
                      {
                        __break(1u);
                      }
                      else
                      {
                        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v132 + 4, 1);
                        specialized Array._endMutation()();
                        uint64_t v130 = v159;
                        MEMORY[0x1C87733A0]();
                        if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v172 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
                        {
LABEL_56:
                          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                          specialized Array._endMutation()();
                          os_log_type_t v133 = v158;
                          MEMORY[0x1C87733A0]();
                          if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                          specialized Array._endMutation()();
                          uint64_t v134 = v127;
                          MEMORY[0x1C87733A0]();
                          if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                          specialized Array._endMutation()();
                          uint64_t v135 = v131;
                          MEMORY[0x1C87733A0]();
                          if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                          specialized Array._endMutation()();

                          goto LABEL_63;
                        }
                      }
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      goto LABEL_56;
                    }
                    __break(1u);
                  }
                  if (!v74)
                  {
LABEL_94:
                    __break(1u);
                    goto LABEL_95;
                  }
                  long long v85 = v75;
                  id v86 = [v74 v75[182]];

                  id v87 = [v18 v12[178]];
                  if (!v87)
                  {
LABEL_95:
                    __break(1u);
                    goto LABEL_96;
                  }
                  unint64_t v88 = v87;
                  id v89 = [v87 (SEL)v85 + 570];

                  id v74 = objc_msgSend(v86, v61[181], v89);
                  id v90 = [v29 v12[178]];
                  if (!v90)
                  {
LABEL_96:
                    __break(1u);
                    goto LABEL_97;
                  }
                  id v91 = v90;
                  id v92 = objc_msgSend(v90, sel_trailingAnchor);

                  id v93 = [v18 v12[178]];
                  if (!v93)
                  {
LABEL_97:
                    __break(1u);
LABEL_98:
                    __break(1u);
                    goto LABEL_99;
                  }
                  id v94 = v93;
                  id v95 = objc_msgSend(v93, sel_trailingAnchor);

                  uint64_t v61 = (SEL *)objc_msgSend(v92, v61[181], v95);
                  if (v169)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v96 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  }
                  unint64_t v84 = v171;
                  uint64_t v83 = v96 + 2;
                  if (!__OFADD__(v96, 2)) {
                    goto LABEL_45;
                  }
                  __break(1u);
                  goto LABEL_77;
                }
LABEL_87:
                __break(1u);
                goto LABEL_88;
              }
LABEL_86:
              __break(1u);
              goto LABEL_87;
            }
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_83;
  }
  if (!a1) {
    return;
  }
  uint64_t v18 = a1;
  objc_msgSend(v18, sel_willMoveToParentViewController_, 0);
  id v39 = objc_msgSend(v18, sel_view);
  if (!v39) {
    goto LABEL_98;
  }
  char v40 = v39;
  objc_msgSend(v39, sel_removeFromSuperview);

  objc_msgSend(v18, sel_removeFromParentViewController);
  if (one-time initialization token for banners != -1) {
LABEL_77:
  }
    swift_once();
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.banners);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_1C2F90000, v42, v43, "[System] Removed conversationControlsViewController without replacement", v44, 2u);
    MEMORY[0x1C87760E0](v44, -1, -1);
  }
  else
  {
  }
}

id closure #1 in SystemBannerHostViewController.conversationControlsViewController.didset(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)&v22 - v15;
  uint64_t ObjectType = swift_getObjectType();
  objc_msgSend(a2, sel_removeFromParentViewController);
  uint64_t v18 = swift_getObjectType();
  id result = objc_msgSend(a4, sel_view);
  if (result)
  {
    uint64_t v20 = result;
    objc_msgSend(result, sel_setAlpha_, 1.0);

    swift_beginAccess();
    id result = (id)MEMORY[0x1C8776240](a6 + 16);
    if (result)
    {
      long long v21 = result;
      if (*((unsigned char *)result
           + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) == 1)
        SystemBannerHostViewController.updateSystemApertureElement()();
      (*(void (**)(uint64_t, uint64_t))(a3 + 32))(ObjectType, a3);
      (*(void (**)(uint64_t, uint64_t))(a5 + 32))(v18, a5);
      SystemBannerHostViewController.alertIfNeededForRecipeTransition(from:to:)((uint64_t)v16, (uint64_t)v13);

      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return (id)outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SystemBannerHostViewController.conversationControlsViewController.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  return OUTLINED_FUNCTION_23_0();
}

void SystemBannerHostViewController.conversationControlsViewController.setter(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_conversationControlsViewController;
  OUTLINED_FUNCTION_11_0();
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  id v8 = a1;
  SystemBannerHostViewController.conversationControlsViewController.didset(v6, v7);
}

uint64_t SystemBannerHostViewController.conversationControlsViewController.modify()
{
  uint64_t v2 = malloc(0x30uLL);
  *(void *)(OUTLINED_FUNCTION_56((uint64_t)v2) + 40) = v0;
  uint64_t v3 = (long long *)(v0
                  + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_conversationControlsViewController);
  OUTLINED_FUNCTION_2();
  long long v4 = *v3;
  *(_OWORD *)(v1 + 24) = *v3;
  id v5 = (id)v4;
  return OUTLINED_FUNCTION_34_9();
}

void SystemBannerHostViewController.conversationControlsViewController.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  long long v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    id v6 = v3;
    SystemBannerHostViewController.conversationControlsViewController.setter(v3, v5);
  }
  else
  {
    SystemBannerHostViewController.conversationControlsViewController.setter(*(void **)(*(void *)a1 + 24), v5);
  }
  free(v2);
}

BOOL SystemBannerHostViewController.hasRootViewController.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 720))();
  uint64_t v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

uint64_t SystemBannerHostViewController.requesterIdentifier.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t SystemBannerHostViewController.requesterIdentifier.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  void *v2 = a1;
  v2[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for SystemBannerHostViewController.requesterIdentifier : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x308))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.requesterIdentifier : SystemBannerHostViewController(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x310);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*SystemBannerHostViewController.requesterIdentifier.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for SystemBannerHostViewController.layoutDescription : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x320))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.layoutDescription : SystemBannerHostViewController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x328);
  id v4 = *a1;
  return v3(v2);
}

void *SystemBannerHostViewController.layoutDescription.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void SystemBannerHostViewController.layoutDescription.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v1;
  *uint64_t v1 = a1;
}

uint64_t (*SystemBannerHostViewController.layoutDescription.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t SystemBannerHostViewController.panGestureProxy.setter(uint64_t a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_panGestureProxy);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_panGestureProxy) = a1;
  swift_unknownObjectRetain();
  if (v2) {
    objc_msgSend(v2, sel_setActionHandler_, 0);
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t SystemBannerHostViewController.presentableContext.getter()
{
  return ConversationControlsManager.videoTileConversationController.getter();
}

uint64_t SystemBannerHostViewController.presentableContext.setter()
{
  return SystemBannerHostViewController.delegate.setter();
}

uint64_t key path getter for SystemBannerHostViewController.presentableContext : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x350))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.presentableContext : SystemBannerHostViewController(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x358);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t (*SystemBannerHostViewController.presentableContext.modify())()
{
  id v2 = malloc(0x30uLL);
  uint64_t v3 = OUTLINED_FUNCTION_56((uint64_t)v2);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_presentableContext;
  *(void *)(v3 + 32) = v0;
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = v0 + v4;
  OUTLINED_FUNCTION_6_1();
  *(void *)(v1 + 24) = MEMORY[0x1C8776240](v5);
  return SystemBannerHostViewController.delegate.modify;
}

uint64_t SystemBannerHostViewController.dismissalPreventionAssertion.setter(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion);
  if (v4)
  {
    objc_msgSend(v4, sel_invalidate);
    uint64_t v3 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion;
  }
  *(void *)(v1 + v3) = a1;
  return swift_unknownObjectRelease();
}

void SystemBannerHostViewController.gesturePriorityAssertion.willset()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion))
  {
    uint64_t v2 = v0;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.banners);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl(&dword_1C2F90000, v4, v5, "[System] invalidating gesturePriorityAssertion", v6, 2u);
      MEMORY[0x1C87760E0](v6, -1, -1);
    }

    uint64_t v7 = *(void **)(v2 + v1);
    if (v7)
    {
      objc_msgSend(v7, sel_invalidate);
    }
  }
}

uint64_t SystemBannerHostViewController.gesturePriorityAssertion.setter(uint64_t a1)
{
  SystemBannerHostViewController.gesturePriorityAssertion.willset();
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion) = a1;
  return swift_unknownObjectRelease();
}

uint64_t SystemBannerHostViewController.activityUUID.getter()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t SystemBannerHostViewController.isSystemAperturePresentation.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation);
}

id SystemBannerHostViewController.hasPresentedFullScreenCallUI.getter()
{
  return SystemBannerHostViewController.hasPresentedFullScreenCallUI.getter((SEL *)&selRef_hasPresentedFullScreenCallUI);
}

id SystemBannerHostViewController.isPresentingFullScreenCallUI.getter()
{
  return SystemBannerHostViewController.hasPresentedFullScreenCallUI.getter((SEL *)&selRef_isPresentingFullScreenCallUI);
}

id SystemBannerHostViewController.hasPresentedFullScreenCallUI.getter(SEL *a1)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(v2 + 416))();
  if (!v3) {
    return 0;
  }
  id v4 = [v3 *a1];
  swift_unknownObjectRelease();
  return v4;
}

void SystemBannerHostViewController.isMicIndicatorVisible.getter()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_62();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_0_3();
  uint64_t v12 = (*(uint64_t (**)(void))(v11 + 720))();
  if (v12)
  {
    uint64_t v14 = (void *)v12;
    uint64_t v15 = v13;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(ObjectType, v15);

    if (!__swift_getEnumTagSinglePayload(v1, 1, v7))
    {
      outlined init with copy of ConversationControlsRecipe(v1, v0);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      uint64_t v18 = v0 + *(int *)(v7 + 60);
      uint64_t v19 = *(unsigned __int8 *)(v18 + 40);
      if (v19 <= 0xFD)
      {
        uint64_t v20 = *(void *)v18;
        if ((v19 & 0x80) != 0)
        {
          uint64_t v35 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v21 = *(void *)(v18 + 8);
          uint64_t v22 = *(void *)(v18 + 16);
          uint64_t v23 = *(void *)(v18 + 24);
          uint64_t v24 = *(void *)(v18 + 32);
          uint64_t v35 = *(void *)v18;
          outlined copy of ConversationControlsRecipe.Actions(v20, v21, v22, v23, v24, v19);
        }
      }
      else
      {
        uint64_t v35 = MEMORY[0x1E4FBC860];
      }
      specialized Array.append<A>(contentsOf:)();
      uint64_t v25 = v35;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = *(void *)(v25 + 16);
      if (v26)
      {
        uint64_t v27 = v25 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        uint64_t v28 = *(void *)(v3 + 72);
        swift_bridgeObjectRetain();
        uint64_t v29 = v26 - 1;
        do
        {
          uint64_t v30 = v29;
          static ConversationControlsAction.== infix(_:_:)();
          char v17 = v31;
          if (v31) {
            break;
          }
          uint64_t v29 = v30 - 1;
          v27 += v28;
        }
        while (v30);
        swift_bridgeObjectRelease();
      }
      else
      {
        char v17 = 0;
      }
      _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v6, (void (*)(void))type metadata accessor for ConversationControlsAction);
      swift_bridgeObjectRelease();
      _s15ConversationKit0A14ControlsActionOWOhTm_2(v0, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      goto LABEL_17;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  }
  char v17 = 0;
LABEL_17:
  int v32 = SBUIIsSystemApertureEnabled();
  if ((v17 & 1) != 0 && v32)
  {
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_83_0();
    v33();
  }
  OUTLINED_FUNCTION_28();
}

char *SystemBannerHostViewController.__allocating_init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  OUTLINED_FUNCTION_25_37(a1, a2, a3, a4, a5, a6, a7, a8);
  id v9 = objc_allocWithZone(v8);
  uint64_t ObjectType = swift_getObjectType();
  return OUTLINED_FUNCTION_23_35(ObjectType, v11, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29,
           v30,
           v31,
           v32,
           SHIDWORD(v32),
           v33);
}

char *SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  OUTLINED_FUNCTION_25_37(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t ObjectType = swift_getObjectType();
  return OUTLINED_FUNCTION_23_35(ObjectType, v9, v10, v11, v12, v13, v14, v15, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
           v28,
           v29,
           v30,
           SHIDWORD(v30),
           v31);
}

BOOL closure #1 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(unsigned char *a1)
{
  return (*a1 & 1) == 0;
}

uint64_t closure #2 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(void *a1)
{
  if (*a1) {
    char v1 = dispatch thunk of DispatchWorkItem.isCancelled.getter() ^ 1;
  }
  else {
    char v1 = 0;
  }
  return v1 & 1;
}

uint64_t closure #3 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_retain();
}

uint64_t closure #4 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_30(v4, (uint64_t)static Logger.banners);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_180(v7);
    OUTLINED_FUNCTION_35_1(&dword_1C2F90000, v8, v9, "Running queued invalidation task");
    OUTLINED_FUNCTION_3();
  }

  if (v3) {
    dispatch thunk of DispatchWorkItem.perform()();
  }
  return $defer #1 () in closure #4 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(a2);
}

uint64_t $defer #1 () in closure #4 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_retain();

    CurrentValueSubject.send(_:)();
    return swift_release();
  }
  return result;
}

id SystemBannerHostViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemBannerHostViewController.init(coder:)()
{
  uint64_t v1 = v0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notice];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((void *)v2 + 4) = 0;
  id v3 = &v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_captureGroupName];
  *(void *)id v3 = 0xD00000000000001ALL;
  *((void *)v3 + 1) = 0x80000001C37ABFF0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___captureOnlyBackdropView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_shadowView] = 0;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationTaskSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<DispatchWorkItem?, Never>);
  swift_allocObject();
  *(void *)&v0[v4] = CurrentValueSubject.init(_:)();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationCancellable] = 0;
  uint64_t v5 = &v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent];
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  v5[48] = -1;
  v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager] = 0;
  os_log_type_t v6 = &v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_conversationControlsViewController];
  *(void *)os_log_type_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_expandedForMenuPresentation] = 0;
  uint64_t v7 = &v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requesterIdentifier];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_layoutDescription] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_panGestureProxy] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_forceSuppressSystemApertureOverAssociatedScene] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isShowingSystemApertureOverAssociatedScene] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_activeLayoutMode] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_canRequestAlertingAssertion] = 0;
  uint64_t v8 = &v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_contentRole] = 2;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_leadingViewContainer;
  uint64_t v10 = (objc_class *)type metadata accessor for SystemApertureContainerView();
  *(void *)&v1[v9] = objc_msgSend(objc_allocWithZone(v10), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_trailingViewContainer;
  *(void *)&v1[v11] = objc_msgSend(objc_allocWithZone(v10), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_minimalViewContainer;
  *(void *)&v1[v12] = objc_msgSend(objc_allocWithZone(v10), sel_init);
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_detachedMinimalViewContainer;
  *(void *)&v1[v13] = objc_msgSend(objc_allocWithZone(v10), sel_init);
  uint64_t v14 = (void *)*MEMORY[0x1E4FA7EF8];
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_elementIdentifier] = *MEMORY[0x1E4FA7EF8];
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_keyColor;
  id v16 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v17 = v14;
  *(void *)&v1[v15] = objc_msgSend(v16, sel_initWithRed_green_blue_alpha_, 0.192, 0.82, 0.345, 1.0);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id SystemBannerHostViewController.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notificationCenter], sel_removeObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemBannerHostViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void SystemBannerHostViewController.contextMenuWillPresent(_:)(uint64_t a1)
{
}

void SystemBannerHostViewController.contextMenuDidDismiss(_:)(uint64_t a1)
{
}

uint64_t SystemBannerHostViewController.isPresentingMenu.didset(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu;
  if (v1[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu] != (result & 1))
  {
    id v3 = v1;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.banners);
    uint64_t v5 = v1;
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2F90000, v6, v7, "[SystemAperture] isPresentingMenu: %{BOOL}d", v8, 8u);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }
    else
    {
    }
    return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v5) + 0x440))(v3[v2]);
  }
  return result;
}

uint64_t SystemBannerHostViewController.isPresentingMenu.setter(char a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu) = a1;
  return SystemBannerHostViewController.isPresentingMenu.didset(v2);
}

void SystemBannerHostViewController.processContextMenuNotification(_:for:)(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  OUTLINED_FUNCTION_0_20();
  v6 += 170;
  os_log_type_t v7 = *v6;
  if (((uint64_t (*)(void))*v6)() == 4)
  {
    if (a2) {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    else {
      char v3 = 1;
    }
    swift_bridgeObjectRelease();
    SystemBannerHostViewController.isPresentingMenu.setter(v3 & 1);
  }
  OUTLINED_FUNCTION_113_1();
  if ((unint64_t)(((uint64_t (*)(void))v7)() - 2) <= 2)
  {
    uint64_t v8 = Notification.userInfo.getter();
    if (v8)
    {
      uint64_t v9 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v8);
      swift_bridgeObjectRelease();
      if (v9)
      {
        specialized Dictionary.subscript.getter(v9, (uint64_t)v50);
        swift_bridgeObjectRelease();
        if (v50[3])
        {
          type metadata accessor for SBUISystemApertureLayoutMode(0);
          if (swift_dynamicCast())
          {
            uint64_t v10 = v51;
            if ((unint64_t)(v51 - 2) <= 2)
            {
              OUTLINED_FUNCTION_113_1();
              if (((uint64_t (*)(void))v7)() != v10)
              {
                if (one-time initialization token for banners != -1) {
                  swift_once();
                }
                uint64_t v11 = type metadata accessor for Logger();
                __swift_project_value_buffer(v11, (uint64_t)static Logger.banners);
                id v12 = v4;
                uint64_t v13 = Logger.logObject.getter();
                os_log_type_t v14 = static os_log_type_t.error.getter();
                if (OUTLINED_FUNCTION_107(v14))
                {
                  os_log_type_t type = v3;
                  uint64_t v15 = OUTLINED_FUNCTION_9_0();
                  v50[0] = OUTLINED_FUNCTION_83();
                  *(_DWORD *)uint64_t v15 = 136446722;
                  if (a2) {
                    uint64_t v16 = 0x696D736944646964;
                  }
                  else {
                    uint64_t v16 = 0x736572506C6C6977;
                  }
                  log = v13;
                  if (a2) {
                    unint64_t v17 = 0xEA00000000007373;
                  }
                  else {
                    unint64_t v17 = 0xEB00000000746E65;
                  }
                  char v49 = v12;
                  uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v50);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v15 + 12) = 2082;
                  id v18 = (id)SBUISystemApertureLayoutModeDescription();
                  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v21 = v20;

                  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v50);
                  OUTLINED_FUNCTION_109_1();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v15 + 22) = 2082;
                  OUTLINED_FUNCTION_113_1();
                  v7();
                  id v22 = (id)SBUISystemApertureLayoutModeDescription();
                  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v25 = v24;

                  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v50);
                  OUTLINED_FUNCTION_109_1();

                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_1C2F90000, log, type, "[SystemAperture] %{public}s systemApertureLayoutMode %{public}s != activeLayoutMode %{public}s", (uint8_t *)v15, 0x20u);
                  swift_arrayDestroy();
                  OUTLINED_FUNCTION_3();
                  OUTLINED_FUNCTION_3();
                }
                else
                {
                }
              }
              if (one-time initialization token for banners != -1) {
                swift_once();
              }
              uint64_t v33 = type metadata accessor for Logger();
              __swift_project_value_buffer(v33, (uint64_t)static Logger.banners);
              id v34 = v4;
              uint64_t v35 = Logger.logObject.getter();
              os_log_type_t v36 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v35, v36))
              {
                uint64_t v37 = OUTLINED_FUNCTION_15_1();
                uint64_t v51 = OUTLINED_FUNCTION_14_3();
                *(_DWORD *)uint64_t v37 = 136446466;
                if (a2) {
                  uint64_t v38 = 0x696D736944646964;
                }
                else {
                  uint64_t v38 = 0x736572506C6C6977;
                }
                if (a2) {
                  unint64_t v39 = 0xEA00000000007373;
                }
                else {
                  unint64_t v39 = 0xEB00000000746E65;
                }
                os_log_type_t v40 = v36;
                v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v51);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v37 + 12) = 2082;
                OUTLINED_FUNCTION_113_1();
                v7();
                id v41 = (id)SBUISystemApertureLayoutModeDescription();
                uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v44 = v43;

                v50[0] = v42;
                v50[1] = v44;
                uint64_t v45 = String.init<A>(reflecting:)();
                v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v51);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1C2F90000, v35, v40, "[SystemAperture] %{public}s with activeLayoutMode: %{public}s", (uint8_t *)v37, 0x16u);
                swift_arrayDestroy();
                OUTLINED_FUNCTION_3();
                OUTLINED_FUNCTION_3();
              }
              else
              {
              }
              return;
            }
          }
        }
        else
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v50, &demangling cache variable for type metadata for Any?);
        }
      }
    }
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = OUTLINED_FUNCTION_30(v26, (uint64_t)static Logger.banners);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v28))
  {
    uint64_t v29 = (_DWORD *)OUTLINED_FUNCTION_37();
    v50[0] = OUTLINED_FUNCTION_9_0();
    *uint64_t v29 = 136446210;
    if (a2) {
      uint64_t v30 = 0x696D736944646964;
    }
    else {
      uint64_t v30 = 0x736572506C6C6977;
    }
    if (a2) {
      unint64_t v31 = 0xEA00000000007373;
    }
    else {
      unint64_t v31 = 0xEB00000000746E65;
    }
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_103_4(&dword_1C2F90000, v27, v32, "[SystemAperture] %{public}s (not in System Aperture)");
    OUTLINED_FUNCTION_360();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ContextMenuNotificationUserInfoKey, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  specialized _NativeDictionary.makeIterator()(v21, a1);
  uint64_t v3 = v21[0];
  int64_t v4 = v21[3];
  unint64_t v5 = v21[4];
  uint64_t v14 = v21[1];
  int64_t v6 = (unint64_t)(v21[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v8 = (v5 - 1) & v5;
  unint64_t v9 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v9 = __clz(__rbit64(v12)) + (i << 6))
  {
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v9, (uint64_t)__src);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v9, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    outlined init with copy of AnyHashable((uint64_t)__dst, (uint64_t)v15);
    if (!swift_dynamicCast())
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__dst, (uint64_t *)&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_release();
      outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)&__dst[40], (uint64_t)v15);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__dst, (uint64_t *)&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v15, v16);
    outlined init with take of Any(v16, v17);
    outlined init with take of Any(v17, v18);
    outlined init with take of Any(v18, v15);
    uint64_t result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)(v15, v2);
    int64_t v4 = i;
    unint64_t v5 = v8;
    if (v8) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v11 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v14 + 8 * v11);
    int64_t i = v4 + 1;
    if (!v12)
    {
      int64_t i = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v14 + 8 * i);
      if (!v12)
      {
        int64_t i = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_26;
        }
        unint64_t v12 = *(void *)(v14 + 8 * i);
        if (!v12)
        {
          int64_t i = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_26;
          }
          unint64_t v12 = *(void *)(v14 + 8 * i);
          if (!v12)
          {
            int64_t i = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_26;
            }
            unint64_t v12 = *(void *)(v14 + 8 * i);
            if (!v12)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v12 = *(void *)(v14 + 8 * v13++);
                if (v12)
                {
                  int64_t i = v13 - 1;
                  goto LABEL_21;
                }
              }
LABEL_26:
              swift_release();
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v8 = (v12 - 1) & v12;
  }
  __break(1u);
  return result;
}

void SystemBannerHostViewController.handleSceneStateChangeNotification(_:)()
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v53 = v1;
  uint64_t v54 = v2;
  uint64_t v3 = v0;
  Notification.object.getter();
  if (!v42)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIWindowScene);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    OUTLINED_FUNCTION_78_1();
    return;
  }
  id v4 = objc_msgSend(v0, sel_view);
  if (v4)
  {
    unint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_window);

    id v7 = objc_msgSend(v6, sel_windowScene);
    if (v7)
    {
      id v8 = v38;
      char v9 = static NSObject.== infix(_:_:)();

      if (v9)
      {
        OUTLINED_FUNCTION_36_19();
        uint64_t v11 = (*(uint64_t (**)(void))(v10 + 88))();
        if (v11)
        {
          unint64_t v12 = (void *)v11;
          type metadata accessor for SystemApertureInCallWaveformTrailingView();
          uint64_t v13 = swift_dynamicCastClass();

          if (v13)
          {
            if (one-time initialization token for banners != -1) {
              swift_once();
            }
            uint64_t v14 = type metadata accessor for Logger();
            __swift_project_value_buffer(v14, (uint64_t)static Logger.banners);
            id v15 = v3;
            uint64_t v16 = Logger.logObject.getter();
            os_log_type_t v17 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v16, v17))
            {
              id v18 = (uint8_t *)OUTLINED_FUNCTION_37();
              uint64_t v37 = (void *)OUTLINED_FUNCTION_9_0();
              id v38 = v37;
              *(_DWORD *)id v18 = 136446210;
              uint64_t v35 = (uint64_t)(v18 + 4);
              buf = v18;
              OUTLINED_FUNCTION_196_0();
              (*(void (**)(void))(v19 + 1360))();
              id v20 = (id)SBUISystemApertureLayoutModeDescription();
              uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v23 = v22;

              uint64_t v39 = v21;
              uint64_t v40 = v23;
              uint64_t v24 = String.init<A>(reflecting:)();
              uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)&v38);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C2F90000, v16, v17, "Updating waveform for scene state change, layout mode: %{public}s", v18, 0xCu);
              OUTLINED_FUNCTION_110();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
            }
            OUTLINED_FUNCTION_196_0();
            OUTLINED_FUNCTION_102_3();
            int v27 = v26();
            SystemBannerHostViewController.updateWaveformForLayoutMode(_:)(v27, v28, v29, v30, v31, v32, v33, v34, v35, (int)buf, SHIDWORD(buf), (uint64_t)v37, v38, v39, v40, v41, v42, v43, v44,
              v45,
              v46,
              v47,
              v48,
              v49,
              v50,
              v51,
              v52);
          }
        }
      }
    }
    else
    {
    }
    goto LABEL_17;
  }

  __break(1u);
}

void SystemBannerHostViewController.callDisplayContextChanged(_:)()
{
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_30(v0, (uint64_t)static Logger.banners);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_180(v3);
    OUTLINED_FUNCTION_35_1(&dword_1C2F90000, v4, v5, "triggering an update to conversationControlsView because callDisplayContextChanged");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_161();
  if (((*(uint64_t (**)(void))(v6 + 216))() & 1) == 0) {
    goto LABEL_11;
  }
  Notification.object.getter();
  if (!v13)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, &demangling cache variable for type metadata for Any?);
LABEL_11:
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_125_3();
    v8();
    OUTLINED_FUNCTION_1_12();
    (*(void (**)(void))(v9 + 472))();
    OUTLINED_FUNCTION_1_12();
    (*(void (**)(unsigned char *))(v10 + 1048))(v12);
    outlined destroy of ConversationControlsType((uint64_t)v12);
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  unsigned int v7 = objc_msgSend(v11, sel_status);

  if (v7 != 4) {
    goto LABEL_11;
  }
}

uint64_t @objc SystemBannerHostViewController.contextMenuWillPresent(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  type metadata accessor for Notification();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a1;
  a4(v4);

  uint64_t v9 = OUTLINED_FUNCTION_25_22();
  return v10(v9);
}

Swift::Void __swiftcall SystemBannerHostViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v33.receiver = v0;
  v33.super_class = (Class)type metadata accessor for SystemBannerHostViewController();
  objc_msgSendSuper2(&v33, sel_viewDidLoad);
  id v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = v2;
  id v4 = SystemBannerHostViewController.captureOnlyBackdropView.getter();
  objc_msgSend(v3, sel_insertSubview_atIndex_, v4, 0);

  id v5 = SystemBannerHostViewController.captureOnlyBackdropView.getter();
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769580;
  id v7 = SystemBannerHostViewController.captureOnlyBackdropView.getter();
  id v8 = objc_msgSend(v7, sel_topAnchor);

  id v9 = OUTLINED_FUNCTION_123_1();
  if (!v9)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v9, sel_topAnchor);

  id v12 = OUTLINED_FUNCTION_92_3();
  *(void *)(v6 + 32) = v12;
  id v13 = SystemBannerHostViewController.captureOnlyBackdropView.getter();
  id v14 = objc_msgSend(v13, sel_leadingAnchor);

  id v15 = OUTLINED_FUNCTION_123_1();
  if (!v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v16 = v15;
  id v17 = objc_msgSend(v15, sel_leadingAnchor);

  id v18 = OUTLINED_FUNCTION_92_3();
  *(void *)(v6 + 40) = v18;
  id v19 = SystemBannerHostViewController.captureOnlyBackdropView.getter();
  id v20 = objc_msgSend(v19, sel_bottomAnchor);

  id v21 = OUTLINED_FUNCTION_123_1();
  if (!v21)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v22 = v21;
  id v23 = objc_msgSend(v21, sel_bottomAnchor);

  id v24 = OUTLINED_FUNCTION_92_3();
  *(void *)(v6 + 48) = v24;
  id v25 = SystemBannerHostViewController.captureOnlyBackdropView.getter();
  id v26 = objc_msgSend(v25, sel_trailingAnchor);

  id v27 = OUTLINED_FUNCTION_123_1();
  if (!v27)
  {
LABEL_13:
    __break(1u);
    return;
  }
  int v28 = v27;
  int v29 = self;
  id v30 = objc_msgSend(v28, sel_trailingAnchor);

  id v31 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v30);
  *(void *)(v6 + 56) = v31;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_activateConstraints_, isa);

  if (v1[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation] == 1) {
    SystemBannerHostViewController.updateSystemApertureElement()();
  }
}

void SystemBannerHostViewController.viewWillTransition(to:with:)(void *a1)
{
  id v2 = v1;
  swift_getObjectType();
  int v28 = v1;
  uint64_t v29 = type metadata accessor for SystemBannerHostViewController();
  double v4 = OUTLINED_FUNCTION_112();
  objc_msgSendSuper2(v5, v6, a1, v4);
  objc_msgSend(v1, sel_preferredContentSize);
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  id v8 = OUTLINED_FUNCTION_30(v7, (uint64_t)static Logger.banners);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v9))
  {
    uint64_t v10 = OUTLINED_FUNCTION_9_0();
    uint64_t aBlock = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v10 = 136446722;
    uint64_t v11 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &aBlock);
    OUTLINED_FUNCTION_85_7();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    OUTLINED_FUNCTION_112();
    uint64_t v13 = CGSize.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &aBlock);
    OUTLINED_FUNCTION_85_7();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2082;
    uint64_t v15 = CGSize.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &aBlock);
    OUTLINED_FUNCTION_85_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_81_7(&dword_1C2F90000, v8, v17, "[%{public}s] willTransition(to size: %{public}s, with coordinator:) , preffered contentSize %{public}s");
    OUTLINED_FUNCTION_96_4();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v26 = (void (*)(int))TPNumberPadCharacter.rawValue.getter;
  uint64_t v27 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  id v25 = &block_descriptor_64;
  id v18 = _Block_copy(&aBlock);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v2;
  id v26 = partial apply for closure #2 in SystemBannerHostViewController.viewWillTransition(to:with:);
  uint64_t v27 = v19;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  id v25 = &block_descriptor_3;
  id v20 = _Block_copy(&aBlock);
  id v21 = v2;
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v18, v20);
  _Block_release(v20);
  _Block_release(v18);
}

void closure #2 in SystemBannerHostViewController.viewWillTransition(to:with:)(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v4 = v3;
  objc_msgSend(v3, sel_setNeedsLayout);

  id v5 = objc_msgSend(a2, sel_view);
  if (!v5)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v6 = v5;
  objc_msgSend(v5, sel_layoutIfNeeded);
}

Swift::Void __swiftcall SystemBannerHostViewController.viewWillLayoutSubviews()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemBannerHostViewController();
  objc_msgSendSuper2(&v2, sel_viewWillLayoutSubviews);
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v1 + 1024))();
}

Swift::Void __swiftcall SystemBannerHostViewController.didMove(toParent:)(UIViewController_optional *toParent)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for SystemBannerHostViewController();
  [(UIViewController_optional *)&v4 didMoveToParentViewController:toParent];
  if (toParent)
  {
    OUTLINED_FUNCTION_49_11();
    if (v3) {
      SystemBannerHostViewController.updateSystemApertureElement()();
    }
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.updatePreferredContentSize()()
{
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) == 1)
  {
    uint64_t v1 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5E0);
    v1();
  }
  else
  {
    objc_super v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
    if (v2)
    {
      id v3 = v2;
      objc_msgSend(v2, sel_preferredContentSize);
      objc_msgSend(v0, sel_setPreferredContentSize_);
    }
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.updateControlsPresentationSize(_:)(CGSize a1)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 720))();
  if (v2)
  {
    id v5 = (id)v2;
    swift_getObjectType();
    double v3 = OUTLINED_FUNCTION_112();
    v4(v3);
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.updateControlsCornerRadius()()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 720))();
  if (v1)
  {
    uint64_t v3 = v2;
    id v5 = (id)v1;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 136))(ObjectType, v3);
  }
}

uint64_t SystemBannerHostViewController.updateConversationControlsViewController(type:sizeClass:fromActivityManager:)()
{
  OUTLINED_FUNCTION_0_20();
  (*(void (**)(void))(v0 + 1056))();
  return 1;
}

uint64_t SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(void *a1, uint8_t *a2, int a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v233 = a2;
  id v6 = v5;
  uint64_t v248 = a4;
  v249 = a1;
  LODWORD(v238) = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  uint64_t v240 = &v224[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v239 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_5_3();
  uint64_t v230 = v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v237 = &v224[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v231 = v16;
  uint64_t v232 = &v224[-v15];
  MEMORY[0x1F4188790](v17);
  uint64_t v244 = &v224[-v18];
  uint64_t v19 = (int *)type metadata accessor for HUDActivityManager.BannerUpdate(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = &v224[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v23);
  id v25 = &v224[-v24];
  id v26 = *(void **)((char *)v5 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_features);
  uint64_t v27 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_0_58();
  uint64_t v29 = *(uint64_t (**)(void))(v28 + 224);
  BOOL v229 = v26;
  char v30 = v29();
  uint64_t v245 = v6;
  if ((v30 & 1) == 0
    || (*((unsigned char *)v6 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) & 1) != 0
    || (a5 & 1) != 0)
  {
    goto LABEL_25;
  }
  outlined init with copy of ConversationControlsType((uint64_t)v249, (uint64_t)&aBlock);
  uint64_t v247 = v25;
  switch(v262)
  {
    case 3u:
      swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v34 = 0x4089000000000000;
      goto LABEL_20;
    case 4u:
      uint64_t v34 = 0x4085E00000000000;
      goto LABEL_20;
    case 6u:
      BOOL v31 = (aBlock & 0xFFFFFFFFFFFFFFFELL) == 0x18 || aBlock == 21;
      if (v31 || aBlock == 6)
      {
        OUTLINED_FUNCTION_36_1(v261, v260);
        if (!v33) {
          goto LABEL_18;
        }
      }
      break;
  }
  outlined destroy of ConversationControlsType((uint64_t)&aBlock);
  uint64_t v34 = 0x4082C00000000000;
LABEL_20:
  outlined init with copy of ConversationControlsType((uint64_t)v249, (uint64_t)&aBlock);
  LODWORD(v243) = ConversationControlsType.isTemporary.getter();
  uint64_t v35 = (char *)v6 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_activityUUID;
  uint64_t v36 = type metadata accessor for UUID();
  BOOL v246 = (uint64_t (*)(void))v224;
  OUTLINED_FUNCTION_5_3();
  uint64_t v38 = v37;
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_5_1();
  uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 16);
  v40(a5, v35, v36);
  uint64_t v41 = &v22[v19[11]];
  *((void *)v41 + 1) = 0;
  swift_unknownObjectWeakInit();
  *(void *)uint64_t v22 = v34;
  outlined init with copy of ConversationControlsType((uint64_t)&aBlock, (uint64_t)(v22 + 8));
  *((void *)v22 + 7) = 0;
  v22[64] = 1;
  *((void *)v41 + 1) = 0;
  swift_unknownObjectWeakAssign();
  v22[65] = v243 & 1;
  v40((uint64_t)&v22[v19[8]], (char *)a5, v36);
  uint64_t v42 = type metadata accessor for Date();
  uint64_t v243 = (uint64_t)v224;
  OUTLINED_FUNCTION_5_3();
  uint64_t v44 = v43;
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_61();
  static Date.now.getter();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(a5, v36);
  outlined destroy of ConversationControlsType((uint64_t)&aBlock);
  (*(void (**)(unsigned char *, void, uint64_t))(v44 + 32))(&v22[v19[9]], v40, v42);
  *(void *)&v22[v19[10]] = 0;
  uint64_t v46 = (uint64_t)v247;
  outlined init with take of ConversationControlsRecipe((uint64_t)v22, (uint64_t)v247, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)static BannerActivityManager.shared) + 0x138))(v46);
  uint64_t v48 = v47;
  swift_release();
  if (v48)
  {
    swift_willThrow();
    return _s15ConversationKit0A14ControlsActionOWOhTm_2(v46, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
  }
  _s15ConversationKit0A14ControlsActionOWOhTm_2(v46, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
  id v6 = v245;
LABEL_25:
  uint64_t v247 = (unsigned char *)swift_allocObject();
  uint64_t v50 = *v27 & *v6;
  uint64_t v51 = (uint64_t)(v247 + 16);
  uint64_t v241 = *(void *)(v50 + 0x1F0);
  uint64_t v242 = v50 + 496;
  OUTLINED_FUNCTION_76_5();
  v52();
  uint64_t v53 = (uint64_t)v249;
  outlined init with copy of ConversationControlsType((uint64_t)v249, (uint64_t)&aBlock);
  uint64_t v54 = (uint64_t)v6 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsType;
  OUTLINED_FUNCTION_5_11();
  uint64_t v234 = v54;
  outlined assign with take of ConversationControlsType((uint64_t)&aBlock, v54);
  swift_endAccess();
  uint64_t v55 = v53;
  ConversationControlsType.associatedNotice.getter((uint64_t)&aBlock);
  uint64_t v56 = (uint64_t)v6 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notice;
  OUTLINED_FUNCTION_5_11();
  outlined assign with take of Notice?((uint64_t)&aBlock, v56);
  swift_endAccess();
  uint64_t v57 = swift_allocObject();
  uint64_t v58 = *v27 & *v6;
  BOOL v246 = *(uint64_t (**)(void))(v58 + 0x1D8);
  uint64_t v59 = v58 + 472;
  uint64_t v60 = v57;
  *(void *)(v57 + 16) = v246();
  uint64_t v235 = (void *)(v57 + 16);
  uint64_t v61 = v248;
  if (v248)
  {
    id v62 = v248;
  }
  else
  {
    OUTLINED_FUNCTION_56_10();
    id v62 = (unsigned char *)(*(uint64_t (**)(void))(v63 + 440))();
  }
  OUTLINED_FUNCTION_129_1();
  OUTLINED_FUNCTION_95_4();
  int v64 = v258;
  id v65 = v61;
  outlined destroy of ConversationControlsType((uint64_t)&v255);
  outlined destroy of ConversationControlsType((uint64_t)&aBlock);
  uint64_t v243 = v51;
  uint64_t v248 = v62;
  uint64_t v66 = (uint64_t)v247;
  uint64_t v236 = v59;
  if (!v64)
  {
    outlined init with copy of ConversationControlsType(v55, (uint64_t)&aBlock);
    int v67 = v262;
    outlined destroy of ConversationControlsType((uint64_t)&aBlock);
    if (!v67)
    {
      OUTLINED_FUNCTION_56_10();
      (*(void (**)(void))(v68 + 624))();
      ConversationControlsManager.controlsHUDUpdate(for:)(v69, (uint64_t)&aBlock);
      swift_unknownObjectRelease();
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.banners);
      outlined init with copy of ControlsHUDUpdate((uint64_t)&aBlock, (uint64_t)&v255);
      outlined init with copy of ControlsHUDUpdate((uint64_t)&aBlock, (uint64_t)&v250);
      swift_retain_n();
      id v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      int v73 = v72;
      uint64_t v227 = v71;
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v74 = OUTLINED_FUNCTION_9_0();
        int v225 = v73;
        uint64_t v75 = v74;
        uint64_t v226 = swift_slowAlloc();
        v268[0] = v226;
        *(_DWORD *)uint64_t v75 = 136315650;
        outlined init with copy of ConversationControlsType((uint64_t)&v255, (uint64_t)&v264);
        uint64_t v76 = specialized >> prefix<A>(_:)((uint64_t)&v264);
        uint64_t v77 = v60;
        unint64_t v79 = v78;
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v264, &demangling cache variable for type metadata for ConversationControlsType?);
        uint64_t v264 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v79, v268);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ControlsHUDUpdate((uint64_t)&v255);
        *(_WORD *)(v75 + 12) = 2080;
        id v80 = v235;
        OUTLINED_FUNCTION_2();
        uint64_t v264 = *(void *)(v77 + 16);
        uint64_t v81 = String.init<A>(reflecting:)();
        uint64_t v264 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v268);
        id v62 = v248;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v75 + 22) = 2080;
        uint64_t v264 = v254;
        uint64_t v83 = String.init<A>(reflecting:)();
        uint64_t v264 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v268);
        uint64_t v60 = v77;
        uint64_t v66 = (uint64_t)v247;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ControlsHUDUpdate((uint64_t)&v250);
        long long v85 = v227;
        _os_log_impl(&dword_1C2F90000, v227, (os_log_type_t)v225, "Notice being overridden by new notice. Updated oldControlsType to %s, oldSizeClass from %s to %s", (uint8_t *)v75, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        uint64_t v51 = v243;
        uint64_t v55 = (uint64_t)v249;
      }
      else
      {
        outlined destroy of ControlsHUDUpdate((uint64_t)&v255);
        swift_release_n();
        outlined destroy of ControlsHUDUpdate((uint64_t)&v250);

        uint64_t v55 = (uint64_t)v249;
        id v80 = v235;
      }
      outlined assign with copy of ConversationControlsType((uint64_t)&aBlock, v51);
      uint64_t v86 = v263;
      outlined destroy of ControlsHUDUpdate((uint64_t)&aBlock);
      swift_beginAccess();
      *id v80 = v86;
    }
  }
  OUTLINED_FUNCTION_56_10();
  unint64_t v88 = (void *)(*(uint64_t (**)(void))(v87 + 656))();
  if (v88)
  {
    uint64_t v96 = v88;
    if (objc_msgSend(v88, sel_isContinuitySession))
    {
      OUTLINED_FUNCTION_129_1();
      OUTLINED_FUNCTION_95_4();
      if (v258 == 2)
      {
        outlined destroy of ConversationControlsType((uint64_t)&v255);
      }
      else if (v258 != 6 || v255 != 5 || (OUTLINED_FUNCTION_36_1(v257, v256), v97))
      {
        outlined destroy of ConversationControlsType((uint64_t)&v255);
        outlined destroy of ConversationControlsType((uint64_t)&aBlock);
        outlined init with copy of ConversationControlsType(v55, (uint64_t)&v255);

        unint64_t v88 = (void *)outlined destroy of ConversationControlsType((uint64_t)&v255);
        goto LABEL_55;
      }
      outlined destroy of ConversationControlsType((uint64_t)&aBlock);
      outlined init with copy of ConversationControlsType(v55, (uint64_t)&v255);
      outlined init with copy of ConversationControlsType((uint64_t)&v255, (uint64_t)&v250);
      if (v253 == 2)
      {
        outlined destroy of ConversationControlsType((uint64_t)&v250);
      }
      else if (v253 != 6 || v250 != 5 || (OUTLINED_FUNCTION_36_1(v252, v251), v98))
      {
        outlined destroy of ConversationControlsType((uint64_t)&v250);
        outlined destroy of ConversationControlsType((uint64_t)&v255);
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v99 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_82_4(v99, (uint64_t)static Logger.banners);
        swift_retain_n();
        id v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v102 = swift_slowAlloc();
          uint64_t v250 = swift_slowAlloc();
          *(_DWORD *)uint64_t v102 = 136315394;
          OUTLINED_FUNCTION_2();
          outlined init with copy of ConversationControlsType(v243, (uint64_t)&v255);
          uint64_t v103 = specialized >> prefix<A>(_:)((uint64_t)&v255);
          uint64_t v228 = v60;
          uint64_t v104 = v103;
          unint64_t v106 = v105;
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v255, &demangling cache variable for type metadata for ConversationControlsType?);
          uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, &v250);
          OUTLINED_FUNCTION_104_4(v107);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v102 + 12) = 2080;
          OUTLINED_FUNCTION_95_4();
          uint64_t v108 = specialized >> prefix<A>(_:)((uint64_t)&v255);
          unint64_t v110 = v109;
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v255, &demangling cache variable for type metadata for ConversationControlsType?);
          uint64_t v111 = v108;
          uint64_t v60 = v228;
          uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v110, &v250);
          OUTLINED_FUNCTION_104_4(v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v62 = v248;
          swift_bridgeObjectRelease();
          outlined destroy of ConversationControlsType((uint64_t)&aBlock);
          _os_log_impl(&dword_1C2F90000, v100, v101, "Ignoring HUD update (%s -> %s) because update is disallowed during continuity sessions", (uint8_t *)v102, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
          swift_release_n();
          outlined destroy of ConversationControlsType((uint64_t)&aBlock);
        }

        OUTLINED_FUNCTION_2();
        uint64_t v220 = *(void *)(v60 + 16);
        uint64_t v221 = (void *)((char *)v245 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_sizeClass);
        OUTLINED_FUNCTION_1_21();
        *uint64_t v221 = v220;
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_129_1();
        uint64_t v222 = v234;
        OUTLINED_FUNCTION_5_11();
        outlined assign with take of ConversationControlsType((uint64_t)&aBlock, v222);
        swift_endAccess();
        lazy protocol witness table accessor for type SystemBannerHostError and conformance SystemBannerHostError();
        swift_allocError();
        unsigned char *v223 = 3;
        swift_willThrow();

        goto LABEL_93;
      }
      outlined destroy of ConversationControlsType((uint64_t)&v255);
    }
  }
LABEL_55:
  if (v238)
  {
    uint64_t v115 = ConversationControlsType.exclusiveSizeClass.getter((uint64_t)v88, v89, v90, v91, v92, v93, v94, v95);
    uint64_t v113 = v245;
    if ((v116 & 1) == 0)
    {
      uint64_t v123 = v115;
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v124 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_82_4(v124, (uint64_t)static Logger.banners);
      uint64_t v125 = Logger.logObject.getter();
      os_log_type_t v126 = static os_log_type_t.default.getter();
      BOOL v127 = os_log_type_enabled(v125, v126);
      uint64_t v228 = v60;
      if (v127)
      {
        uint64_t v128 = (uint8_t *)swift_slowAlloc();
        uint64_t v129 = OUTLINED_FUNCTION_9_0();
        uint64_t v238 = v123;
        uint64_t v250 = v129;
        *(_DWORD *)uint64_t v128 = 136315138;
        uint64_t v233 = v128 + 4;
        OUTLINED_FUNCTION_95_4();
        uint64_t v130 = specialized >> prefix<A>(_:)((uint64_t)&v255);
        unint64_t v132 = v131;
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v255, &demangling cache variable for type metadata for ConversationControlsType?);
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v132, &v250);
        OUTLINED_FUNCTION_139_3(v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ConversationControlsType((uint64_t)&aBlock);
        _os_log_impl(&dword_1C2F90000, v125, v126, "No size specified for controls update with type %s...", v128, 0xCu);
        swift_arrayDestroy();
        uint64_t v123 = v238;
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        outlined destroy of ConversationControlsType((uint64_t)&aBlock);
      }

      uint64_t v134 = Logger.logObject.getter();
      os_log_type_t v135 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v134, v135))
      {
        uint64_t v136 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)uint64_t v136 = 136315138;
        uint64_t v255 = v123;
        uint64_t v137 = String.init<A>(reflecting:)();
        uint64_t v139 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, &aBlock);
        OUTLINED_FUNCTION_139_3(v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v134, v135, "... so falling back to expected size %s", v136, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }

      uint64_t v66 = (uint64_t)v247;
      uint64_t v60 = v228;
      uint64_t v113 = v245;
      uint64_t v140 = (void *)((char *)v245 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_sizeClass);
      uint64_t v115 = OUTLINED_FUNCTION_1_21();
      *uint64_t v140 = v123;
    }
  }
  else
  {
    uint64_t v113 = v245;
    uint64_t v114 = (uint8_t **)((char *)v245 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_sizeClass);
    uint64_t v115 = OUTLINED_FUNCTION_1_21();
    *uint64_t v114 = v233;
  }
  uint64_t v141 = ConversationControlsType.exclusiveSizeClass.getter(v115, v116, v117, v118, v119, v120, v121, v122);
  if ((v142 & 1) == 0)
  {
    uint64_t v143 = v141;
    OUTLINED_FUNCTION_134_0();
    if (v143 != v144())
    {
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v145 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_82_4(v145, (uint64_t)static Logger.banners);
      uint64_t v146 = v113;
      uint64_t v147 = Logger.logObject.getter();
      os_log_type_t v148 = static os_log_type_t.fault.getter();
      int v149 = v148;
      if (os_log_type_enabled(v147, v148))
      {
        uint64_t v150 = OUTLINED_FUNCTION_9_0();
        uint64_t v238 = swift_slowAlloc();
        uint64_t v250 = v238;
        *(_DWORD *)uint64_t v150 = 136315650;
        LODWORD(v233) = v149;
        uint64_t v228 = v60;
        OUTLINED_FUNCTION_95_4();
        uint64_t v151 = specialized >> prefix<A>(_:)((uint64_t)&v255);
        unint64_t v153 = v152;
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v255, &demangling cache variable for type metadata for ConversationControlsType?);
        uint64_t v255 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v153, &v250);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ConversationControlsType((uint64_t)&aBlock);
        *(_WORD *)(v150 + 12) = 2080;
        uint64_t v255 = v143;
        uint64_t v154 = String.init<A>(reflecting:)();
        uint64_t v255 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, &v250);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v156 = swift_bridgeObjectRelease();
        *(_WORD *)(v150 + 22) = 2080;
        uint64_t v255 = ((uint64_t (*)(uint64_t))v246)(v156);
        uint64_t v66 = (uint64_t)v247;
        uint64_t v157 = String.init<A>(reflecting:)();
        uint64_t v255 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v158, &v250);
        uint64_t v60 = v228;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2F90000, v147, (os_log_type_t)v233, "New controls type %s is only valid with size %s, but it's using %s instead.", (uint8_t *)v150, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        uint64_t v113 = v245;
        OUTLINED_FUNCTION_3();
      }
      else
      {
        outlined destroy of ConversationControlsType((uint64_t)&aBlock);
      }
    }
  }
  uint64_t v159 = v60;
  uint64_t v160 = (uint8_t *)v66;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v161 = static ConversationControlsRecipeGenerator.shared;
  OUTLINED_FUNCTION_134_0();
  id v163 = (uint8_t *)v162();
  OUTLINED_FUNCTION_76_5();
  v164();
  uint64_t v165 = (uint64_t)v240;
  (*(void (**)(uint8_t *, uint64_t *, unsigned char *))(*(void *)v161 + 96))(v163, &aBlock, v248);
  outlined destroy of ConversationControlsType((uint64_t)&aBlock);
  uint64_t v166 = v239;
  if (__swift_getEnumTagSinglePayload(v165, 1, v239) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v165, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v167 = type metadata accessor for Logger();
    __swift_project_value_buffer(v167, (uint64_t)static Logger.banners);
    uint64_t v168 = v113;
    uint64_t v169 = Logger.logObject.getter();
    os_log_type_t v170 = static os_log_type_t.error.getter();
    uint64_t v171 = v159;
    if (os_log_type_enabled(v169, v170))
    {
      uint64_t v172 = swift_slowAlloc();
      uint64_t v173 = swift_slowAlloc();
      uint64_t v228 = v159;
      uint64_t v255 = v173;
      *(_DWORD *)uint64_t v172 = 136315394;
      uint64_t aBlock = v246();
      uint64_t v174 = String.init<A>(reflecting:)();
      uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v174, v175, &v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v172 + 12) = 2080;
      OUTLINED_FUNCTION_76_5();
      v176();
      uint64_t v177 = specialized >> prefix<A>(_:)((uint64_t)&aBlock);
      unint64_t v179 = v178;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&aBlock, &demangling cache variable for type metadata for ConversationControlsType?);
      uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v177, v179, &v255);
      id v62 = v248;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v169, v170, "[SystemControls] Unable to acquire desired recipe, sizeClass:%s type:%s", (uint8_t *)v172, 0x16u);
      swift_arrayDestroy();
      uint64_t v171 = v228;
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      id v180 = &lazy protocol witness table cache variable for type CHHandle and conformance NSObject;
    }
    else
    {

      id v180 = &lazy protocol witness table cache variable for type CHHandle and conformance NSObject;
      id v62 = v248;
    }
    OUTLINED_FUNCTION_2();
    uint64_t v202 = *(void *)(v171 + 16);
    uint64_t v203 = (void *)((char *)v168 + v180[217]);
    OUTLINED_FUNCTION_1_21();
    *uint64_t v203 = v202;
    outlined init with copy of ConversationControlsType(v243, (uint64_t)&aBlock);
    uint64_t v204 = v234;
    OUTLINED_FUNCTION_5_11();
    outlined assign with take of ConversationControlsType((uint64_t)&aBlock, v204);
    swift_endAccess();
    lazy protocol witness table accessor for type SystemBannerHostError and conformance SystemBannerHostError();
    swift_allocError();
    *uint64_t v205 = 1;
    swift_willThrow();
LABEL_93:

LABEL_94:
    swift_release();
    return swift_release();
  }
  Class v181 = v244;
  outlined init with take of ConversationControlsRecipe(v165, (uint64_t)v244, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  id v182 = v160;
  if (*(void *)&v181[*(int *)(v166 + 72)] == 1
    && *((unsigned char *)v113 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) == 1)
  {
    uint64_t v183 = v159;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v184 = type metadata accessor for Logger();
    __swift_project_value_buffer(v184, (uint64_t)static Logger.banners);
    uint64_t v185 = Logger.logObject.getter();
    os_log_type_t v186 = static os_log_type_t.error.getter();
    BOOL v187 = os_log_type_enabled(v185, v186);
    uint64_t v188 = v248;
    if (v187)
    {
      id v189 = (_WORD *)swift_slowAlloc();
      OUTLINED_FUNCTION_180(v189);
      _os_log_impl(&dword_1C2F90000, v185, v186, "systemApertureNotSupported", v163, 2u);
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_2();
    uint64_t v190 = *(void *)(v183 + 16);
    uint64_t v191 = (void *)((char *)v113 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_sizeClass);
    OUTLINED_FUNCTION_1_21();
    *uint64_t v191 = v190;
    OUTLINED_FUNCTION_129_1();
    uint64_t v192 = v234;
    OUTLINED_FUNCTION_5_11();
    outlined assign with take of ConversationControlsType((uint64_t)&aBlock, v192);
    swift_endAccess();
    lazy protocol witness table accessor for type SystemBannerHostError and conformance SystemBannerHostError();
    swift_allocError();
    *uint64_t v193 = 2;
    swift_willThrow();

    _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v244, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    goto LABEL_94;
  }
  uint64_t aBlock = 3;
  int8x16_t v260 = 0u;
  int8x16_t v261 = 0u;
  LOBYTE(v262) = 6;
  uint64_t v194 = (uint64_t)v249;
  char v195 = static ConversationControlsType.== infix(_:_:)((uint64_t)v249);
  outlined destroy of ConversationControlsType((uint64_t)&aBlock);
  uint64_t v196 = v159;
  v197 = v248;
  if (v195)
  {
    id v198 = objc_msgSend(v113, sel_presentableGestureRecognizerPriorityContext);
    if (v198)
    {
      uint64_t v199 = v198;
      uint64_t v200 = (void *)MEMORY[0x1C87730B0](0xD000000000000012, 0x80000001C37AC050);
      id v201 = objc_msgSend(v199, sel_acquireGestureRecognizerDefaultPriorityAssertionForReason_, v200);

      uint64_t v194 = (uint64_t)v249;
      swift_unknownObjectRelease();
    }
    else
    {
      id v201 = 0;
    }
    SystemBannerHostViewController.gesturePriorityAssertion.setter((uint64_t)v201);
  }
  uint64_t v206 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of ConversationControlsType(v194, (uint64_t)&v255);
  uint64_t v207 = v232;
  outlined init with copy of ConversationControlsRecipe((uint64_t)v244, (uint64_t)v232);
  outlined init with copy of ConversationControlsType((uint64_t)&v255, (uint64_t)&v250);
  outlined init with copy of ConversationControlsRecipe((uint64_t)v207, (uint64_t)v237);
  unint64_t v208 = (*(unsigned __int8 *)(v230 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v230 + 80);
  uint64_t v209 = swift_allocObject();
  *(void *)(v209 + 16) = v206;
  *(void *)(v209 + 24) = v196;
  *(void *)(v209 + 32) = v182;
  outlined init with take of ConversationControlsType((long long *)&v255, (_OWORD *)(v209 + 40));
  *(void *)(v209 + 88) = v197;
  outlined init with take of ConversationControlsRecipe((uint64_t)v207, v209 + v208, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v210 = v197;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  if (aBlock)
  {
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v211 = v243;
  OUTLINED_FUNCTION_2();
  outlined init with copy of ConversationControlsType(v211, (uint64_t)&aBlock);
  uint64_t v264 = 6;
  long long v265 = 0u;
  long long v266 = 0u;
  char v267 = 6;
  LOBYTE(v211) = static ConversationControlsType.== infix(_:_:)((uint64_t)&aBlock);
  outlined destroy of ConversationControlsType((uint64_t)&v264);
  uint64_t v212 = outlined destroy of ConversationControlsType((uint64_t)&aBlock);
  if ((v211 & 1) != 0
    && ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v229) + 0xD8))(v212) & 1) != 0
    && ((*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v113) + 0x2B8))(),
        swift_retain(),
        swift_release(),
        CurrentValueSubject.value.getter(),
        swift_release(),
        aBlock == 1))
  {
    swift_release();
    _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v237, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    outlined destroy of ConversationControlsType((uint64_t)&v250);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v228 = v196;
    uint64_t v213 = type metadata accessor for Logger();
    __swift_project_value_buffer(v213, (uint64_t)static Logger.banners);
    unint64_t v214 = Logger.logObject.getter();
    os_log_type_t v215 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v214, v215))
    {
      v216 = (_WORD *)swift_slowAlloc();
      OUTLINED_FUNCTION_363(v216);
      _os_log_impl(&dword_1C2F90000, v214, v215, "Queuing an task for run after invalidation", v182, 2u);
      OUTLINED_FUNCTION_3();
    }

    v261.i64[1] = (uint64_t)partial apply for closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:);
    uint64_t v262 = v209;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    v260.i64[0] = 1107296256;
    v260.i64[1] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    v261.i64[0] = (uint64_t)&block_descriptor_18_0;
    v249 = _Block_copy(&aBlock);
    type metadata accessor for DispatchWorkItemFlags();
    uint64_t v248 = v224;
    OUTLINED_FUNCTION_0();
    MEMORY[0x1F4188790](v217);
    OUTLINED_FUNCTION_61();
    uint64_t v264 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEF0]);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v218 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    uint64_t aBlock = v218;
    swift_retain();
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release_n();
    swift_release();

    _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v244, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    swift_release();
  }
  else
  {
    uint64_t aBlock = 0;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    uint64_t v219 = v237;
    closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(v206, v196, v182, &v250, v210, (uint64_t)v237);
    swift_release();

    swift_release();
    _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v219, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    outlined destroy of ConversationControlsType((uint64_t)&v250);
    _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v244, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    swift_release();
  }
  return swift_release();
}

void closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(uint64_t a1, uint64_t a2, NSObject *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v143 = a6;
  unint64_t v144 = a5;
  id v142 = a4;
  uint64_t v140 = a2;
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v136 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v136 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v137 = (uint64_t)&v132 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v134 = (uint64_t)&v132 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v132 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  os_log_type_t v135 = (char *)&v132 - v22;
  MEMORY[0x1F4188790](v23);
  id v25 = (char *)&v132 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v132 - v27;
  swift_beginAccess();
  uint64_t v29 = MEMORY[0x1C8776240](a1 + 16);
  if (!v29) {
    return;
  }
  char v30 = (void *)v29;
  os_log_t v138 = a3;
  uint64_t v133 = v25;
  uint64_t v141 = v8;
  uint64_t v139 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation;
  BOOL v31 = (void *)MEMORY[0x1E4FBC8C8];
  if (*(unsigned char *)(v29 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) == 1)
  {
    os_log_t v32 = v138 + 2;
    swift_beginAccess();
    outlined init with copy of ConversationControlsType((uint64_t)v32, (uint64_t)&v153);
    outlined init with copy of ConversationControlsType((uint64_t)&v153, (uint64_t)&v149);
    if (v152 == 2)
    {
      outlined destroy of ConversationControlsType((uint64_t)&v149);
    }
    else if (v152 != 6 {
           || v149 != 5
    }
           || (int8x16_t v33 = vorrq_s8(v150, v151),
               *(void *)&vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))))
    {
      outlined destroy of ConversationControlsType((uint64_t)&v149);
      outlined destroy of ConversationControlsType((uint64_t)&v153);
      outlined init with copy of ConversationControlsType((uint64_t)v142, (uint64_t)&v149);
      HIDWORD(v132) = 0;
      goto LABEL_17;
    }
    outlined destroy of ConversationControlsType((uint64_t)&v153);
    outlined init with copy of ConversationControlsType((uint64_t)v142, (uint64_t)&v149);
    outlined init with copy of ConversationControlsType((uint64_t)&v149, (uint64_t)&v145);
    if (v148 == 2)
    {
      HIDWORD(v132) = 1;
    }
    else
    {
      if (v148 == 6 && v145 == 5)
      {
        int8x16_t v34 = vorrq_s8(v146, v147);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))
        {
          HIDWORD(v132) = 1;
          goto LABEL_17;
        }
      }
      HIDWORD(v132) = 0;
    }
    outlined destroy of ConversationControlsType((uint64_t)&v145);
LABEL_17:
    outlined destroy of ConversationControlsType((uint64_t)&v149);
    uint64_t v35 = *(void **)((char *)v30 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_features);
    uint64_t v36 = *(uint64_t (**)(void))((*v31 & *v35) + 0xD8);
    uint64_t v37 = v35;
    char v38 = v36();

    if (v38) {
      char v39 = (*(uint64_t (**)(void))((*v31 & *v144) + 0x280))();
    }
    else {
      char v39 = 0;
    }
    id v40 = objc_msgSend(v30, sel_view);
    if (!v40)
    {
      __break(1u);
      goto LABEL_74;
    }
    uint64_t v41 = v40;
    uint64_t v42 = (char *)objc_msgSend(v40, sel_SBUISA_layoutMode);

    if ((unint64_t)(v42 - 2) >= 3)
    {
      if (!(v39 & 1 | ((v132 & 0x100000000) == 0)))
      {
LABEL_23:
        uint64_t v29 = (*(uint64_t (**)(void))((*v31 & *v30) + 0x2D0))();
        if (v29)
        {
          uint64_t v44 = (void *)v29;
          uint64_t v45 = v43;
          uint64_t v145 = 7;
          int8x16_t v146 = 0u;
          int8x16_t v147 = 0u;
          char v148 = 6;
          char v46 = static ConversationControlsType.== infix(_:_:)((uint64_t)v142);
          outlined destroy of ConversationControlsType((uint64_t)&v145);
          if (v46)
          {
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t))(v45 + 32))(ObjectType, v45);

            BOOL v48 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v141) != 1;
            uint64_t v29 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
            goto LABEL_30;
          }
        }
        goto LABEL_29;
      }
    }
    else if ((v39 & 1) == 0)
    {
      goto LABEL_23;
    }
    BOOL v48 = 0;
    goto LABEL_30;
  }
LABEL_29:
  BOOL v48 = 1;
LABEL_30:
  uint64_t v49 = (*(uint64_t (**)(uint64_t))((*v31 & *v30) + 0x2D0))(v29);
  if (v49)
  {
    uint64_t v50 = (void *)v49;
    HIDWORD(v132) = v48;
    type metadata accessor for ConversationHUDViewController();
    uint64_t v51 = swift_dynamicCastClass();
    if (v51)
    {
      uint64_t v52 = (void *)v51;
      uint64_t v53 = (uint64_t *)(v140 + 16);
      uint64_t v54 = (*(uint64_t (**)(void))((*v31 & *v30) + 0x1D8))();
      swift_beginAccess();
      uint64_t v55 = *v53;
      outlined init with copy of ConversationControlsRecipe(v143, (uint64_t)v17);
      if (v54 == v55)
      {
        uint64_t v56 = _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v17, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        goto LABEL_35;
      }
      uint64_t v153 = 25;
      int8x16_t v154 = 0u;
      int8x16_t v155 = 0u;
      unsigned __int8 v156 = 6;
      char v57 = static ConversationControlsType.== infix(_:_:)((uint64_t)v17);
      outlined destroy of ConversationControlsType((uint64_t)&v153);
      uint64_t v56 = _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v17, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      if (v57)
      {
LABEL_35:
        uint64_t v58 = (void *)(*(uint64_t (**)(uint64_t))((*v31 & *v52) + 0xF0))(v56);
        uint64_t v59 = (*(uint64_t (**)(void))((*v31 & *v58) + 0x270))();
        uint64_t v61 = v60;

        uint64_t v62 = (*(uint64_t (**)(void))((*v31 & *v144) + 0x270))();
        swift_getObjectType();
        BOOL v31 = (void *)MEMORY[0x1E4FBC8C8];
        LODWORD(v61) = specialized == infix(_:_:)(v59, v61, v62);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if ((v61 & HIDWORD(v132)) == 1)
        {
          if (one-time initialization token for banners != -1) {
            swift_once();
          }
          uint64_t v63 = type metadata accessor for Logger();
          __swift_project_value_buffer(v63, (uint64_t)static Logger.banners);
          uint64_t v64 = v134;
          outlined init with copy of ConversationControlsRecipe(v143, v134);
          id v65 = v50;
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          int v68 = v67;
          BOOL v69 = os_log_type_enabled(v66, v67);
          id v142 = v65;
          if (v69)
          {
            uint64_t v70 = swift_slowAlloc();
            uint64_t v140 = swift_slowAlloc();
            uint64_t v153 = v140;
            *(_DWORD *)uint64_t v70 = 136315394;
            os_log_t v138 = v66;
            id v71 = *(void (**)(void))((*v31 & *v52) + 0x378);
            uint64_t v72 = (uint64_t)v133;
            HIDWORD(v132) = v68;
            v71();
            uint64_t v73 = specialized >> prefix<A>(_:)();
            unint64_t v75 = v74;
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v72, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
            uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, &v153);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            *(_WORD *)(v70 + 12) = 2080;
            outlined init with copy of ConversationControlsRecipe(v64, v72);
            __swift_storeEnumTagSinglePayload(v72, 0, 1, v141);
            uint64_t v76 = specialized >> prefix<A>(_:)();
            uint64_t v77 = v64;
            unint64_t v79 = v78;
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v72, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
            uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v79, &v153);
            BOOL v31 = (void *)MEMORY[0x1E4FBC8C8];
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _s15ConversationKit0A14ControlsActionOWOhTm_2(v77, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            os_log_t v80 = v138;
            _os_log_impl(&dword_1C2F90000, v138, BYTE4(v132), "[System] Updating controlsView recipe: %s to recipe:%s", (uint8_t *)v70, 0x16u);
            uint64_t v81 = v140;
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v81, -1, -1);
            MEMORY[0x1C87760E0](v70, -1, -1);
          }
          else
          {

            _s15ConversationKit0A14ControlsActionOWOhTm_2(v64, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            uint64_t v72 = (uint64_t)v133;
          }
          uint64_t v121 = v136;
          uint64_t v122 = (uint64_t)v135;
          (*(void (**)(void))((*v31 & *v52) + 0x378))();
          uint64_t v123 = v143;
          outlined init with copy of ConversationControlsRecipe(v143, v122);
          uint64_t v124 = v31;
          char v117 = 1;
          __swift_storeEnumTagSinglePayload(v122, 0, 1, v141);
          LODWORD(v141) = SystemBannerHostViewController.alertIfNeededForRecipeTransition(from:to:)(v72, v122);
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v122, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          uint64_t v125 = v137;
          outlined init with copy of ConversationControlsRecipe(v123, v137);
          unint64_t v126 = (*(unsigned __int8 *)(v121 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
          uint64_t v127 = v9 + v126;
          uint64_t v85 = v123;
          unint64_t v128 = (v127 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v129 = swift_allocObject();
          outlined init with take of ConversationControlsRecipe(v125, v129 + v126, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          *(void *)(v129 + v128) = v52;
          uint64_t v130 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))((*v124 & *v30) + 0x618);
          id v131 = v142;
          v130(v72, v85, partial apply for closure #1 in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:), v129);
          swift_release();

          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v72, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          char v118 = v141 ^ 1;
          unint64_t v84 = v144;
          goto LABEL_65;
        }
      }
    }
  }
  unint64_t v82 = (void *)(*(uint64_t (**)(void))((*v31 & *v30) + 0x320))();
  if (v82)
  {
    uint64_t v83 = v82;
    objc_msgSend(v82, sel_presentationSize);
  }
  unint64_t v84 = v144;
  uint64_t v85 = v143;
  id v40 = (id)(*(uint64_t (**)(void))((*v31 & *v30) + 0x1D8))();
  if ((unint64_t)v40 >= 2)
  {
    if (v40 == (id)2)
    {
      uint64_t v86 = (uint64_t)v133;
      outlined init with copy of ConversationControlsRecipe(v85, (uint64_t)v133);
      __swift_storeEnumTagSinglePayload(v86, 0, 1, v141);
      char v87 = *((unsigned char *)v30 + v139);
      id v88 = objc_allocWithZone((Class)type metadata accessor for ConversationNoticeViewController());
      id v89 = ConversationNoticeViewController.init(recipe:presentationSize:controlsManager:isSystemAperturePresentation:)(v86, v84, v87);
      outlined init with copy of ConversationControlsType((uint64_t)v142, (uint64_t)&v153);
      LODWORD(v86) = v156;
      outlined destroy of ConversationControlsType((uint64_t)&v153);
      id v90 = v89;
      uint64_t v91 = v90;
      if (v86) {
        specialized showContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(v90, v30);
      }
      else {
        specialized showEphemeralContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)((uint64_t)v90, (uint64_t)v30, v140, (uint64_t)v138, (void (*)(uint64_t, uint64_t, unsigned char *, uint64_t))specialized SystemBannerHostViewController.showEphemeralSystemApertureContent(_:overridingSizeClass:overridingControlsType:), (uint64_t (*)(void))specialized showContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:));
      }

      goto LABEL_64;
    }
    if (v40 != (id)3)
    {
LABEL_74:
      uint64_t v153 = (uint64_t)v40;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }
  }
  outlined init with copy of ConversationControlsRecipe(v85, (uint64_t)v10);
  uint64_t v92 = &v10[*(int *)(v141 + 72)];
  uint64_t v93 = *((void *)v92 + 1);
  uint64_t v94 = (void *)*((void *)v92 + 2);
  uint64_t v95 = *((void *)v92 + 3);
  uint64_t v96 = (void *)*((void *)v92 + 4);
  uint64_t v97 = *((void *)v92 + 5);
  uint64_t v98 = (void *)*((void *)v92 + 6);
  uint64_t v99 = *((void *)v92 + 7);
  uint64_t v100 = *((void *)v92 + 8);
  char v101 = v92[72];
  if (*(void *)v92 == 1)
  {
    uint64_t v102 = 1;
  }
  else
  {
    outlined consume of SystemApertureElement?(*(void **)v92, v93, v94, v95, v96, v97, v98);
    uint64_t v102 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
  }
  *(void *)uint64_t v92 = v102;
  *((void *)v92 + 1) = v93;
  *((void *)v92 + 2) = v94;
  *((void *)v92 + 3) = v95;
  *((void *)v92 + 4) = v96;
  *((void *)v92 + 5) = v97;
  *((void *)v92 + 6) = v98;
  *((void *)v92 + 7) = v99;
  *((void *)v92 + 8) = v100;
  v92[72] = v101;
  ConversationControlsRecipe.copyWithoutSystemApertureViews()((uint64_t)v20);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v141);
  char v103 = *((unsigned char *)v30 + v139);
  id v104 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDViewController());
  unint64_t v105 = ConversationHUDViewController.init(recipe:presentationSize:controlsManager:context:)((uint64_t)v20, v84, (v103 & 1) == 0);
  outlined init with copy of ConversationControlsType((uint64_t)v142, (uint64_t)&v153);
  if (v156 == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  if (v156 != 6) {
    goto LABEL_58;
  }
  int8x16_t v106 = vorrq_s8(v154, v155);
  int8x8_t v107 = vorr_s8(*(int8x8_t *)v106.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
  if (v153 == 2 && !*(void *)&v107)
  {
LABEL_60:
    unint64_t v109 = v105;
    specialized showEphemeralContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)((uint64_t)v109, (uint64_t)v30, v140, (uint64_t)v138, (void (*)(uint64_t, uint64_t, unsigned char *, uint64_t))specialized SystemBannerHostViewController.showEphemeralSystemApertureContent(_:overridingSizeClass:overridingControlsType:), (uint64_t (*)(void))specialized showContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:));

    goto LABEL_61;
  }
  if (v153 == 5 && !*(void *)&v107)
  {
    uint64_t v108 = *(void (**)(void *, _UNKNOWN **))((*v31 & *v30) + 0x2D8);
    unint64_t v109 = v105;
    v108(v105, &protocol witness table for ConversationHUDViewController);
LABEL_61:

    _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v10, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    goto LABEL_64;
  }
LABEL_58:
  specialized showContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(v105, v30);

  _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v10, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  outlined destroy of ConversationControlsType((uint64_t)&v153);
LABEL_64:
  char v117 = 0;
  char v118 = 1;
LABEL_65:
  SystemBannerHostViewController.updateSystemApertureAccessoryViews(recipe:)(v85, v110, v111, v112, v113, v114, v115, v116, v132, (uint64_t)v133, v134, v135, v136, v137, (uint64_t)v138, v139, v140, v141, (uint64_t)v142,
    v143,
    (uint64_t)v144,
    v145,
    v146.i64[0],
    v146.i64[1]);
  uint64_t v119 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v120 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v84) + 0xA10))(v118 & 1);
  if ((v117 & 1) == 0
    && (*(uint64_t (**)(uint64_t))((*v119 & *v30) + 0x1D8))(v120) != 2
    && *((unsigned char *)v30 + v139) == 1)
  {
    SystemBannerHostViewController.updateSystemApertureElement()();
  }
}

uint64_t closure #1 in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v9);
  uint64_t v10 = &v9[*(int *)(v7 + 72)];
  uint64_t v11 = *((void *)v10 + 1);
  uint64_t v12 = (void *)*((void *)v10 + 2);
  uint64_t v13 = *((void *)v10 + 3);
  uint64_t v14 = (void *)*((void *)v10 + 4);
  uint64_t v15 = *((void *)v10 + 5);
  uint64_t v16 = (void *)*((void *)v10 + 6);
  uint64_t v17 = *((void *)v10 + 7);
  uint64_t v18 = *((void *)v10 + 8);
  char v19 = v10[72];
  if (*(void *)v10 == 1)
  {
    uint64_t v20 = 1;
  }
  else
  {
    outlined consume of SystemApertureElement?(*(void **)v10, v11, v12, v13, v14, v15, v16);
    uint64_t v20 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  *(void *)uint64_t v10 = v20;
  *((void *)v10 + 1) = v11;
  *((void *)v10 + 2) = v12;
  *((void *)v10 + 3) = v13;
  *((void *)v10 + 4) = v14;
  *((void *)v10 + 5) = v15;
  *((void *)v10 + 6) = v16;
  *((void *)v10 + 7) = v17;
  *((void *)v10 + 8) = v18;
  v10[72] = v19;
  ConversationControlsRecipe.copyWithoutSystemApertureViews()((uint64_t)v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  (*(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x380))(v6);
  return _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t SystemBannerHostViewController.updateOverriddenSystemApertureTypeIfNeeded(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v3, (uint64_t)v6, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v7 == 255) {
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  }
  v8[0] = v6[0];
  v8[1] = v6[1];
  v8[2] = v6[2];
  unsigned __int8 v9 = v7;
  uint64_t v4 = *(void *)&v6[0];
  outlined init with copy of ConversationControlsType(a1, (uint64_t)v6 + 8);
  *(void *)&v6[0] = v4;
  SystemBannerHostViewController.overriddenSystemApertureContent.setter((uint64_t)v6);
  return outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v8);
}

void SystemBannerHostViewController.updateSystemApertureElement()()
{
  OUTLINED_FUNCTION_49_11();
  if (!v1)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v52 = OUTLINED_FUNCTION_30(v21, (uint64_t)static Logger.banners);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_4_14(v22, v23, v24, v25, v26, v27, v28, v29, v48, v52)) {
      goto LABEL_26;
    }
    char v30 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_24(v30);
    uint64_t v20 = "Unable to updateSystemApertureElement since we are not in SystemAperture";
LABEL_25:
    OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v14, v15, v20, v16, v17, v18, v19, v49, v51);
    OUTLINED_FUNCTION_3();
LABEL_26:

    return;
  }
  uint64_t v2 = v0;
  unsigned int v3 = objc_msgSend(objc_msgSend(v0, sel_systemApertureElementContext), sel_isFallbackContext);
  swift_unknownObjectRelease();
  if (v3)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v50 = OUTLINED_FUNCTION_30(v4, (uint64_t)static Logger.banners);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_4_14(v5, v6, v7, v8, v9, v10, v11, v12, v48, v50)) {
      goto LABEL_26;
    }
    uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_24(v13);
    uint64_t v20 = "Unable to updateSystemApertureElement without valid context";
    goto LABEL_25;
  }
  if (!objc_msgSend(v0, sel_isViewLoaded)
    || (id v31 = objc_msgSend(v0, sel_parentViewController), v31, !v31))
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v53 = OUTLINED_FUNCTION_30(v38, (uint64_t)static Logger.banners);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_4_14(v39, v40, v41, v42, v43, v44, v45, v46, v48, v53)) {
      goto LABEL_26;
    }
    uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_24(v47);
    uint64_t v20 = "[SystemAperture] systemApertureElementContext.setElementNeedsUpdate() requires isViewLoaded and parent != nil";
    goto LABEL_25;
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  int8x16_t v33 = (void *)OUTLINED_FUNCTION_30(v32, (uint64_t)static Logger.banners);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v34))
  {
    uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v35);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v36, v37, "[SystemAperture] systemApertureElementContext.setElementNeedsUpdate()");
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(objc_msgSend(v2, sel_systemApertureElementContext), sel_setElementNeedsUpdate);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall SystemBannerHostViewController.requestPreferredLayoutMode()()
{
  char v1 = v0;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  unsigned int v3 = (void *)OUTLINED_FUNCTION_30(v2, (uint64_t)static Logger.banners);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v5);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "[SystemAperture] systemApertureElementContext.requestTransitionToPreferredLayoutMode()");
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(objc_msgSend(v1, sel_systemApertureElementContext), sel_requestTransitionToPreferredLayoutMode);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall SystemBannerHostViewController.updateSystemApertureElementIsPresentingMenu(_:)(Swift::Bool a1)
{
  OUTLINED_FUNCTION_0_20();
  (*(uint64_t (**)(void))(v3 + 696))();
  unint64_t v4 = OUTLINED_FUNCTION_106_3();
  v5(v4);
  if (a1) {
    uint64_t v6 = &selRef_elementWillPresentMenu;
  }
  else {
    uint64_t v6 = &selRef_elementDidDismissMenu;
  }
  swift_release();
  objc_msgSend(objc_msgSend(v1, sel_systemApertureElementContext), *v6);
  swift_unknownObjectRelease();
}

uint64_t key path getter for SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene : SystemBannerHostViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x448))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene : SystemBannerHostViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x450))(*a1);
}

void SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = (unsigned char *)(v0
               + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_forceSuppressSystemApertureOverAssociatedScene);
  swift_beginAccess();
  if (*v2 == 1)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.banners);
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1C2F90000, v4, v5, "[SystemAperture] Forcing aperture suppression", v6, 2u);
      MEMORY[0x1C87760E0](v6, -1, -1);
    }

    uint64_t v7 = v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode;
    *(void *)uint64_t v7 = 3;
    *(unsigned char *)(v7 + 8) = 0;
    SystemBannerHostViewController.nextSystemApertureLayoutMode.didset();
  }
  SystemBannerHostViewController.updateSystemApertureElement()();
}

uint64_t SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1
               + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_forceSuppressSystemApertureOverAssociatedScene);
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = a1;
  SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.didset();
}

uint64_t (*SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.modify;
}

uint64_t SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.modify(uint64_t a1, char a2)
{
  return SystemBannerHostViewController.controlsManager.modify(a1, a2, (uint64_t (*)(uint64_t))SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.didset);
}

uint64_t SystemBannerHostViewController.controlsManager.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

void *SystemBannerHostViewController.shouldShowSystemApertureOverAssociatedScene.getter()
{
  OUTLINED_FUNCTION_161();
  if ((*(uint64_t (**)(void))(v0 + 1096))()) {
    return 0;
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_24_36();
  uint64_t v2 = (void *)v1();
  ConversationControlsManager.wantsCallWaitingInSystemAperture.getter();
  char v4 = v3;

  if ((v4 & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_53_9();
  uint64_t result = (void *)v5();
  if (result)
  {
    unsigned int v7 = objc_msgSend(result, sel_isAmbient);
    swift_unknownObjectRelease();
    return (void *)(v7 ^ 1);
  }
  return result;
}

void SystemBannerHostViewController.handleWantsCallWaitingChanged()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.banners);
  char v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_180(v5);
    OUTLINED_FUNCTION_35_1(&dword_1C2F90000, v6, v7, "[SystemAperture] Handle wants call waiting change event");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_83_0();
  char v9 = v8();
  if ((v9 & 1) == *(unsigned char *)(v1
                            + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isShowingSystemApertureOverAssociatedScene))
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int v11 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int v12 = "[SystemAperture] isShowingSystemApertureOverAssociatedScene is %{BOOL}d (unchanged)";
      goto LABEL_10;
    }
  }
  else
  {
    *(unsigned char *)(v1
             + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isShowingSystemApertureOverAssociatedScene) = v9 & 1;
    SystemBannerHostViewController.updateSystemApertureElement()();
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int v11 = 67109120;
      OUTLINED_FUNCTION_101_3();
      int v12 = "[SystemAperture] isShowingSystemApertureOverAssociatedScene updated to %{BOOL}d (changed)";
LABEL_10:
      _os_log_impl(&dword_1C2F90000, oslog, v10, v12, v11, 8u);
      OUTLINED_FUNCTION_3();

      return;
    }
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.handleLockScreenStatusChanged()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  char v3 = (void *)OUTLINED_FUNCTION_30(v2, (uint64_t)static Logger.banners);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v5);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "[SystemAperture] Handle lock screen status changed event");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_24_36();
  v8();
  OUTLINED_FUNCTION_98_5();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v9 + 624))();
  uint64_t v11 = v10;

  uint64_t ObjectType = swift_getObjectType();
  char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 216))(ObjectType, v11);
  swift_unknownObjectRelease();
  if (v13)
  {
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_53_9();
    int v15 = (void *)v14();
    if (v15)
    {
      if (objc_msgSend(v15, sel_isSpringBoardLocked))
      {
        OUTLINED_FUNCTION_30_21();
        OUTLINED_FUNCTION_83_0();
        v16();
        OUTLINED_FUNCTION_17_8();
        (*(void (**)(unint64_t, unint64_t))(v17 + 184))(0xD000000000000012, 0x80000001C37AC0B0);
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) == 1)
    {
      SystemBannerHostViewController.updateSystemApertureElement()();
    }
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.invalidateAlertingAssertonIfFullScreen()()
{
  OUTLINED_FUNCTION_0_20();
  (*(void (**)(void))(v0 + 696))();
  OUTLINED_FUNCTION_17_8();
  (*(void (**)(void))(v1 + 200))();
  swift_release();
}

void SystemBannerHostViewController.dismissBanner(for:animated:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_3_15();
  a25 = v29;
  a26 = v33;
  uint64_t v35 = v34;
  a14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v26 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_destination + 8)) {
    goto LABEL_8;
  }
  uint64_t v36 = v26;
  os_log_type_t v27 = v32;
  uint64_t v37 = v31;
  uint64_t v38 = v30;
  int v28 = *(uint8_t **)(v26 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_destination);
  OUTLINED_FUNCTION_0_20();
  uint64_t v40 = (*(uint64_t (**)(void))(v39 + 776))();
  if (!v41) {
    goto LABEL_8;
  }
  uint64_t v42 = v40;
  uint64_t v43 = v41;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BNBannerSource);
  id v44 = @nonobjc BNBannerSource.__allocating_init(for:forRequesterIdentifier:)((uint64_t)v28, v42, v43);
  if (v44)
  {
    int v45 = v44;
    int v46 = (void *)MEMORY[0x1C87730B0](v38, v37);
    uint64_t v47 = *(void *)(v36 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requestIdentifier);
    uint64_t v48 = *(void *)(v36 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requestIdentifier + 8);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
    uint64_t v49 = Dictionary.init(dictionaryLiteral:)();
    a13 = 0;
    id v50 = outlined bridged method (mbgnnbnnn) of @objc BNBannerSource.revokePresentable(withRequestIdentifier:reason:animated:userInfo:)(v47, v48, (uint64_t)v46, v27 & 1, v49, (uint64_t)&a13, v45);
    swift_bridgeObjectRelease();
    id v51 = a13;
    if (v50)
    {

      if (v35) {
        v35(1);
      }
    }
    else
    {
      uint64_t v56 = v51;
      char v57 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.banners);
      id v59 = v57;
      id v60 = v57;
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_37();
        a13 = (id)OUTLINED_FUNCTION_9_0();
        *(_DWORD *)uint64_t v63 = 136315138;
        id v64 = v57;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v65 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)&a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2F90000, v61, v62, "Unable to revoke presentable, error: %s", v63, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
      }
      if (v35) {
        v35(0);
      }
    }
  }
  else
  {
LABEL_8:
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    uint64_t v53 = OUTLINED_FUNCTION_30(v52, (uint64_t)static Logger.banners);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_12(v54))
    {
      uint64_t v55 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_180(v55);
      _os_log_impl(&dword_1C2F90000, v53, v27, "Unable to get Banner Source for banner dismissal, likely because the HUD wasn't presented by BannerKit", v28, 2u);
      OUTLINED_FUNCTION_3();
    }

    if (v35) {
      v35(0);
    }
  }
  OUTLINED_FUNCTION_2_22();
}

Swift::Void __swiftcall SystemBannerHostViewController.systemApertureTouchInsetsUpdated(to:)(UIEdgeInsets to)
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v48 = v3;
  uint64_t v49 = v4;
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_5_3();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_49_11();
  if (v9)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_project_value_buffer(v5, (uint64_t)static Logger.banners);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v10, v5);
    id v11 = v1;
    int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    int v14 = &selRef_ringButton;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = OUTLINED_FUNCTION_15_1();
      uint64_t v42 = OUTLINED_FUNCTION_14_3();
      uint64_t v47 = v42;
      *(_DWORD *)uint64_t v15 = 136315394;
      type metadata accessor for UIEdgeInsets(0);
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v47);
      OUTLINED_FUNCTION_117_1(v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      id v19 = objc_msgSend(v11, sel_view);
      if (!v19)
      {
LABEL_16:

        __break(1u);
        return;
      }
      uint64_t v20 = v19;
      objc_msgSend(v19, sel__touchInsets);
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      uint64_t v28 = v27;

      uint64_t v43 = v22;
      uint64_t v44 = v24;
      uint64_t v45 = v26;
      uint64_t v46 = v28;
      uint64_t v29 = String.init<A>(reflecting:)();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v47);
      OUTLINED_FUNCTION_117_1(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v12, v13, "[SystemAperture] touchInsets updated to %s from %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v32 = OUTLINED_FUNCTION_116_2();
      v33(v32);
      int v14 = &selRef_ringButton;
    }
    else
    {

      uint64_t v34 = OUTLINED_FUNCTION_116_2();
      v35(v34);
    }
    OUTLINED_FUNCTION_102_3();
    uint64_t v37 = (void *)v36();
    if (v37)
    {
      uint64_t v38 = v37;
      id v39 = [v37 v14[178]];

      if (!v39)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      OUTLINED_FUNCTION_31_19(v39, sel__setTouchInsets_);
    }
    id v40 = objc_msgSend(v11, v14[178], v42, v43, v44, v45, v46, v47);
    if (v40)
    {
      uint64_t v41 = v40;
      OUTLINED_FUNCTION_31_19(v40, sel__setTouchInsets_);

      return;
    }
    __break(1u);
    goto LABEL_15;
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.deepLinkToFullScreenCallUI()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_30(v2, (uint64_t)static Logger.banners);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v5);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "[SystemAperture] deepLinkToFullScreenCallUI");
    OUTLINED_FUNCTION_3();
  }

  uint64_t v8 = v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode;
  *(void *)uint64_t v8 = 3;
  *(unsigned char *)(v8 + 8) = 0;
  SystemBannerHostViewController.nextSystemApertureLayoutMode.didset();
  OUTLINED_FUNCTION_1_12();
  uint64_t v10 = (void *)(*(uint64_t (**)(void))(v9 + 416))();
  if (v10)
  {
    objc_msgSend(v10, sel_deepLinkToFullScreenCallUI);
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall SystemBannerHostViewController.deepLinkToFullScreenCallDetailsView()()
{
}

Swift::Void __swiftcall SystemBannerHostViewController.deepLinkToFullScreenPTTCallDetailsView()()
{
}

Swift::Void __swiftcall SystemBannerHostViewController.showDefaultSystemHUD()()
{
}

void *SystemBannerHostViewController.deepLinkToFullScreenCallDetailsView()(SEL *a1)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (void *)(*(uint64_t (**)(void))(v2 + 416))();
  if (result)
  {
    [result *a1];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall SystemBannerHostViewController.controlsPreferredContentSizeChanged(presentingMenu:)(Swift::Bool presentingMenu)
{
  OUTLINED_FUNCTION_26_3();
  uint64_t v46 = v3;
  uint64_t v47 = v4;
  uint64_t v5 = v1;
  char v7 = v6;
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x400))();
  uint64_t v8 = &unk_1C3768000;
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion;
    if (!*(void *)&v1[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion])
    {
      id v10 = objc_msgSend(v1, sel_presentableGestureRecognizerPriorityContext);
      if (v10)
      {
        id v11 = v10;
        uint64_t v2 = (_DWORD *)MEMORY[0x1C87730B0](0xD000000000000023, 0x80000001C37AC0D0);
        id v12 = objc_msgSend(v11, sel_acquireGestureRecognizerDefaultPriorityAssertionForReason_, v2);
        swift_unknownObjectRelease();
      }
      else
      {
        id v12 = 0;
      }
      SystemBannerHostViewController.gesturePriorityAssertion.setter((uint64_t)v12);
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.banners);
      uint64_t v35 = v5;
      uint64_t v36 = (void *)Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_107(v37))
      {
        uint64_t v2 = (_DWORD *)OUTLINED_FUNCTION_37();
        uint64_t v38 = OUTLINED_FUNCTION_9_0();
        _DWORD *v2 = 136315138;
        uint64_t v43 = v38;
        v45[0] = *(void *)&v5[v9];
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SBUIPresentableGestureRecognizerPriorityAssertion?);
        uint64_t v39 = String.init<A>(describing:)();
        v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v41, v42, "[System] gesturePriorityAssertion: %s");
        OUTLINED_FUNCTION_110();
        uint64_t v8 = (void *)&unk_1C3768000;
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
      }
    }
  }
  else
  {
    SystemBannerHostViewController.gesturePriorityAssertion.setter(0);
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_83_0();
  uint64_t v14 = v13();
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.banners);
    unint64_t v17 = v5;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_37();
      v45[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v20 = v8[454];
      objc_msgSend(v17, sel_preferredContentSize);
      uint64_t v43 = v21;
      uint64_t v44 = v22;
      type metadata accessor for CGSize(0);
      uint64_t v23 = String.init<A>(reflecting:)();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v18, v19, "[System] Asking presentableContext for update with size %s", v20, 0xCu);
      OUTLINED_FUNCTION_110();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    objc_msgSend(v15, sel_setHostNeedsUpdate);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.banners);
    uint64_t v26 = v5;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_73_7(v28))
    {
      uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_37();
      v45[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v29 = v8[454];
      objc_msgSend(v26, sel_preferredContentSize);
      uint64_t v43 = v30;
      uint64_t v44 = v31;
      type metadata accessor for CGSize(0);
      uint64_t v32 = String.init<A>(reflecting:)();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v27, (os_log_type_t)v2, "[System] Asking presentableContext for update with size %s failed because presentableContext is null", v29, 0xCu);
      OUTLINED_FUNCTION_360();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
  }
  OUTLINED_FUNCTION_16();
}

uint64_t SystemBannerHostViewController.menuPresented.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (*(uint64_t (**)(void))(v0 + 720))();
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = v2;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);

    return v4 & 1;
  }
  return result;
}

uint64_t SystemBannerHostViewController.isPresentingStickyNotice.getter()
{
  OUTLINED_FUNCTION_0_20();
  (*(void (**)(void *__return_ptr))(v1 + 520))(v10);
  uint64_t v2 = v11;
  if (v11)
  {
    __swift_project_boxed_opaque_existential_1(v10, v11);
    OUTLINED_FUNCTION_5_3();
    uint64_t v4 = v3;
    MEMORY[0x1F4188790](v5);
    OUTLINED_FUNCTION_62();
    (*(void (**)(uint64_t))(v4 + 16))(v0);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, &demangling cache variable for type metadata for Notice?);
    uint64_t v6 = OUTLINED_FUNCTION_34_9();
    char v8 = v7(v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, &demangling cache variable for type metadata for Notice?);
    char v8 = 0;
  }
  return v8 & 1;
}

BOOL SystemBannerHostViewController.needsBackgroundBlur.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 1360))() == 0;
}

uint64_t SystemBannerHostViewController.captureGroup.getter()
{
  return OUTLINED_FUNCTION_34_9();
}

void SystemBannerHostViewController.userInteractionWillBeginForBanner(for:)()
{
  OUTLINED_FUNCTION_4_13();
  id v2 = (id)(*(uint64_t (**)(void))(v0 + 440))();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v1 + 2568))();
}

void SystemBannerHostViewController.userInteractionDidEndForBanner(for:)()
{
  OUTLINED_FUNCTION_4_13();
  id v2 = (id)(*(uint64_t (**)(void))(v0 + 440))();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v1 + 2560))();
}

void SystemBannerHostViewController.presentableWillAppear(asBanner:)()
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v28 = v1;
  uint64_t v29 = v2;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.banners);
  uint64_t v5 = v0;
  uint64_t v6 = (uint64_t *)v4;
  char v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_84_4(v8))
  {
    uint64_t v9 = OUTLINED_FUNCTION_9_0();
    v27[0] = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v9 = 136315650;
    uint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
    unint64_t v11 = *(void *)&v5[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v27);
    OUTLINED_FUNCTION_70_5();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_105_4();
    OUTLINED_FUNCTION_1_12();
    OUTLINED_FUNCTION_76_5();
    v12();
    uint64_t v13 = ConversationControlsType.debugDescription.getter();
    unint64_t v15 = v14;
    outlined destroy of ConversationControlsType((uint64_t)&v25);
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v27);
    uint64_t v6 = &v26;
    OUTLINED_FUNCTION_55_12();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2080;
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v25 = OUTLINED_FUNCTION_86_5(v16, v17, v27);
    OUTLINED_FUNCTION_55_12();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_81_7(&dword_1C2F90000, v7, v18, "Banner presenting for identifier: %s, type: %s, requestID: %s");
    OUTLINED_FUNCTION_96_4();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  if (!*(void *)&v5[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion])
  {
    id v19 = objc_msgSend(v5, sel_presentableDismissalPreventionContext);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = (void *)MEMORY[0x1C87730B0](0x4320657669746341, 0xEB000000006C6C61);
      id v22 = objc_msgSend(v20, sel_acquireTransitionDismissalPreventionAssertionForReason_, v21);
      swift_unknownObjectRelease();
    }
    else
    {
      id v22 = 0;
    }
    uint64_t v6 = (uint64_t *)v5;
    SystemBannerHostViewController.dismissalPreventionAssertion.setter((uint64_t)v22);
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_24_36();
  v23();
  OUTLINED_FUNCTION_98_5();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v24 + 2560))();

  MSNMonitorBeginException();
  OUTLINED_FUNCTION_78_1();
}

void SystemBannerHostViewController.presentableDidAppear(asBanner:)()
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v23 = v1;
  uint64_t v24 = v2;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.banners);
  uint64_t v4 = v0;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_84_4(v6))
  {
    uint64_t v7 = OUTLINED_FUNCTION_9_0();
    v22[0] = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v8 = *(void *)&v4[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
    unint64_t v9 = *(void *)&v4[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v22);
    OUTLINED_FUNCTION_70_5();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_105_4();
    OUTLINED_FUNCTION_196_0();
    OUTLINED_FUNCTION_76_5();
    v10();
    uint64_t v11 = ConversationControlsType.debugDescription.getter();
    unint64_t v13 = v12;
    outlined destroy of ConversationControlsType((uint64_t)v21);
    v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v22);
    OUTLINED_FUNCTION_55_12();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    uint64_t v14 = swift_bridgeObjectRetain();
    v21[0] = OUTLINED_FUNCTION_86_5(v14, v15, v22);
    OUTLINED_FUNCTION_55_12();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_81_7(&dword_1C2F90000, v5, v16, "Banner presented for identifier: %s, type: %s, requestID: %s");
    OUTLINED_FUNCTION_96_4();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_52_11();
  uint64_t v18 = v17();
  if (v18)
  {
    id v19 = (void *)v18;
    type metadata accessor for ConversationHUDViewController();
    if (swift_dynamicCastClass())
    {
      OUTLINED_FUNCTION_196_0();
      (*(void (**)(void))(v20 + 368))(0);
    }
  }
  OUTLINED_FUNCTION_78_1();
}

void @objc SystemBannerHostViewController.userInteractionWillBeginForBanner(for:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_unknownObjectRetain();
  id v6 = a1;
  a4();
  swift_unknownObjectRelease();
}

void SystemBannerHostViewController.presentableDidDisappear(asBanner:withReason:)()
{
  void (**v6)(long long *__return_ptr);
  void (*v7)(long long *__return_ptr);
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t (*v54)(void);
  void *v55;
  void (*v56)(void);
  int8x16_t v57;
  int8x8_t v58;
  uint64_t (*v59)(void);
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void);
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  id v78;
  void v79[3];
  int v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(long long *__return_ptr);
  void (**v84)(long long *__return_ptr);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  char v90;
  long long v91;
  uint64_t v92;
  uint64_t v93;

  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_3_16();
  v6 += 65;
  uint64_t v7 = *v6;
  unint64_t v84 = v6;
  v7(&v91);
  if (v92)
  {
    outlined init with take of Notice(&v91, (uint64_t)&v87);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.banners);
    outlined init with copy of IDSLookupManager((uint64_t)&v87, (uint64_t)&v91);
    unint64_t v9 = v5;
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.default.getter();
    unint64_t v12 = v11;
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v1 = OUTLINED_FUNCTION_15_1();
      uint64_t v81 = OUTLINED_FUNCTION_14_3();
      uint64_t v86 = v81;
      *(_DWORD *)uint64_t v1 = 136315394;
      v79[2] = v1 + 4;
      unint64_t v82 = (uint64_t)v5;
      unint64_t v13 = type metadata accessor for UUID();
      v79[1] = v79;
      OUTLINED_FUNCTION_5_3();
      uint64_t v15 = v14;
      MEMORY[0x1F4188790](v16);
      OUTLINED_FUNCTION_118();
      uint64_t v83 = v7;
      uint64_t v18 = v92;
      uint64_t v17 = v93;
      __swift_project_boxed_opaque_existential_1(&v91, v92);
      id v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      os_log_t v80 = v12;
      v19(v18, v17);
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      id v22 = v21;
      uint64_t v23 = v13;
      uint64_t v5 = (void *)v82;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v23);
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
      *(_WORD *)(v1 + 12) = 2080;
      uint64_t v85 = (uint64_t)v5;
      uint64_t v24 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNBannerRevocationReason?);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v7 = v83;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v10, (os_log_type_t)v80, "presentableDidDisappear for noticeUUID: %s, reason: %s", (uint8_t *)v1, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
  }
  else
  {
    uint64_t v83 = v7;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v91, &demangling cache variable for type metadata for Notice?);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.banners);
    uint64_t v28 = v5;
    uint64_t v29 = v0;
    uint64_t v30 = Logger.logObject.getter();
    uint64_t v31 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v31))
    {
      uint64_t v32 = OUTLINED_FUNCTION_15_1();
      unint64_t v82 = OUTLINED_FUNCTION_14_3();
      char v87 = v82;
      *(_DWORD *)uint64_t v32 = 136315394;
      unint64_t v33 = v5;
      uint64_t v34 = *(void *)&v29[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
      uint64_t v35 = *(void *)&v29[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8];
      swift_bridgeObjectRetain();
      *(void *)&uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v5 = v33;
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      *(void *)&uint64_t v91 = v33;
      uint64_t v36 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNBannerRevocationReason?);
      os_log_type_t v37 = String.init<A>(describing:)();
      *(void *)&uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_80_4(&dword_1C2F90000, v30, v39, "presentableDidDisappear for identifier: %s, reason: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    uint64_t v7 = v83;
  }
  SystemBannerHostViewController.panGestureProxy.setter(0);
  unint64_t v40 = *(void **)&v3[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion];
  if (v40) {
    objc_msgSend(v40, sel_invalidate);
  }
  if (!v5)
  {
LABEL_30:
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    goto LABEL_31;
  }
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v42 == v43)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v47 = 1;
    uint64_t v46 = 1;
    goto LABEL_31;
  }
  uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v45)
  {
    uint64_t v46 = 1;
    uint64_t v47 = 1;
    goto LABEL_31;
  }
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v50 = v49;
  if (v48 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v50 != v51)
  {
    uint64_t v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v53)
    {
      uint64_t v46 = 0;
      uint64_t v47 = 2;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v47 = 2;
  swift_bridgeObjectRelease_n();
  uint64_t v46 = 0;
LABEL_31:
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_53_9();
  uint64_t v55 = (void *)v54();
  if (v55)
  {
    objc_msgSend(v55, sel_didDismiss_reason_, v3, v47);
    swift_unknownObjectRelease();
  }
  if (v46)
  {
    OUTLINED_FUNCTION_23_8();
    OUTLINED_FUNCTION_125_3();
    v56();
    if (v90 == 6)
    {
      char v57 = vorrq_s8(v88, v89);
      uint64_t v58 = vorr_s8(*(int8x8_t *)v57.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
      if ((unint64_t)(v87 - 13) <= 1 && !*(void *)&v58)
      {
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_23_8();
        OUTLINED_FUNCTION_24_36();
        id v60 = (void *)v59();
        OUTLINED_FUNCTION_0_91();
        uint64_t v46 = (*(uint64_t (**)(void))(v61 + 624))();
        uint64_t v1 = v62;

        swift_getObjectType();
        uint64_t v63 = OUTLINED_FUNCTION_135_0();
        specialized NameAndPhotoUtilities.denySendingNameAndPhoto(using:)(v63);
LABEL_45:
        swift_unknownObjectRelease();
        goto LABEL_47;
      }
      if (v87 == 20 && !*(void *)&v58)
      {
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_23_8();
        OUTLINED_FUNCTION_24_36();
        uint64_t v65 = (void *)v64();
        OUTLINED_FUNCTION_0_91();
        uint64_t v46 = (*(uint64_t (**)(void))(v66 + 624))();
        uint64_t v1 = v67;

        swift_getObjectType();
        OUTLINED_FUNCTION_135_0();
        specialized NameAndPhotoUtilities.denyIncomingName(from:)();
        goto LABEL_45;
      }
    }
    outlined destroy of ConversationControlsType((uint64_t)&v87);
  }
LABEL_47:
  int v68 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  uint64_t v70 = v69;
  MEMORY[0x1F4188790](v71);
  OUTLINED_FUNCTION_62();
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v73 = OUTLINED_FUNCTION_8(v72);
  MEMORY[0x1F4188790](v73);
  OUTLINED_FUNCTION_63();
  v7((long long *)&v87);
  unint64_t v74 = v89.i64[0];
  if (!v89.i64[0])
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v87, &demangling cache variable for type metadata for Notice?);
    __swift_storeEnumTagSinglePayload(v1, 1, 1, v68);
    goto LABEL_51;
  }
  unint64_t v75 = v89.i64[1];
  __swift_project_boxed_opaque_existential_1(&v87, v89.i64[0]);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v75);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v87, &demangling cache variable for type metadata for Notice?);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v68);
  if (__swift_getEnumTagSinglePayload(v1, 1, v68) == 1)
  {
LABEL_51:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v46, v1, v68);
  OUTLINED_FUNCTION_1_12();
  uint64_t v77 = (char *)(*(uint64_t (**)(void))(v76 + 440))();
  unint64_t v78 = *(id *)&v77[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_noticeCoordinator];

  ConversationControlsNoticeCoordinator.noticeDismissed(noticeUUID:dismissContext:)();
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v46, v68);
LABEL_52:
  MSNMonitorEndException();
  OUTLINED_FUNCTION_28();
}

id SystemBannerHostViewController.viewController.getter()
{
  return v0;
}

uint64_t SystemBannerHostViewController.requestIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

double SystemBannerHostViewController.bannerContentOutsets.getter()
{
  OUTLINED_FUNCTION_49_11();
  if (v0) {
    return *MEMORY[0x1E4FB2848];
  }
  static Layout.ConversationControls.iOS.getter((uint64_t)v2);
  return v3;
}

BOOL SystemBannerHostViewController.isTouchOutsideDismissalEnabled.getter()
{
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_125_3();
  uint64_t v1 = v0();
  uint64_t v7 = OUTLINED_FUNCTION_22_35(v1, v2, v3, v4, v5, v6);
  outlined destroy of ConversationControlsType((uint64_t)&v15);
  outlined destroy of ConversationControlsType((uint64_t)v16);
  if (v7)
  {
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_24_36();
    v8();
    OUTLINED_FUNCTION_98_5();
    OUTLINED_FUNCTION_0_91();
    char v10 = (*(uint64_t (**)(void))(v9 + 1904))();

    if (v10) {
      return 0;
    }
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_83_0();
  if (v11()) {
    return 0;
  }
  OUTLINED_FUNCTION_30_21();
  (*(void (**)(void *__return_ptr))(v13 + 520))(v16);
  BOOL v12 = v16[3] == 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for Notice?);
  return v12;
}

BOOL SystemBannerHostViewController.eligibleForDismissal.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((*(uint64_t (**)(void))(v0 + 1232))() & 1) == 0;
}

uint64_t SystemBannerHostViewController.isDraggingInteractionEnabled.getter()
{
  OUTLINED_FUNCTION_4_13();
  if ((*(uint64_t (**)(void))(v0 + 1232))())
  {
    char v1 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_4_13();
    OUTLINED_FUNCTION_125_3();
    uint64_t v3 = v2();
    char v1 = OUTLINED_FUNCTION_22_35(v3, v4, v5, v6, v7, v8) ^ 1;
    outlined destroy of ConversationControlsType((uint64_t)&v10);
    outlined destroy of ConversationControlsType((uint64_t)v11);
  }
  return v1 & 1;
}

id SystemBannerHostViewController.bannerSizeTransitionAnimationSettings.getter()
{
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v1 + 1232))())
  {
    v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_expandedForMenuPresentation] = 1;
    id v2 = objc_msgSend(self, sel_settingsWithDuration_, 0.0);
  }
  else if (v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_expandedForMenuPresentation])
  {
    v0[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_expandedForMenuPresentation] = 0;
    id v2 = objc_msgSend(self, sel_settingsWithDuration_, 0.0);
  }
  else
  {
    v4.receiver = v0;
    v4.super_class = (Class)type metadata accessor for SystemBannerHostViewController();
    id v2 = objc_msgSendSuper2(&v4, sel_bannerSizeTransitionAnimationSettings);
  }
  return v2;
}

CGSize __swiftcall SystemBannerHostViewController.preferredContentSize(withPresentationSize:containerSize:)(CGSize withPresentationSize, CGSize containerSize)
{
  OUTLINED_FUNCTION_4_13();
  (*(void (**)(void))(v2 + 1032))();
  OUTLINED_FUNCTION_0_3();
  objc_super v4 = (void *)(*(uint64_t (**)(void))(v3 + 720))();
  if (v4)
  {
    uint64_t v5 = v4;
    objc_msgSend(v4, sel_preferredContentSize);
  }
  double v6 = OUTLINED_FUNCTION_112();
  result.height = v7;
  result.width = v6;
  return result;
}

id SystemBannerHostViewController.systemApertureElementViewController.getter()
{
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_30(v0, (uint64_t)static Logger.banners);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_12(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v3);
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v4, v5, "[SystemAperture] systemApertureElementViewController accessed");
    OUTLINED_FUNCTION_3();
  }

  return v7;
}

uint64_t SystemBannerHostViewController.activeLayoutMode.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(void *)v0;
}

uint64_t SystemBannerHostViewController.activeLayoutMode.setter(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return result;
}

uint64_t key path getter for SystemBannerHostViewController.activeLayoutMode : SystemBannerHostViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x550))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.activeLayoutMode : SystemBannerHostViewController(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x558))(*a1);
}

uint64_t (*SystemBannerHostViewController.activeLayoutMode.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t SystemBannerHostViewController.canRequestAlertingAssertion.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t SystemBannerHostViewController.canRequestAlertingAssertion.setter(char a1)
{
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_canRequestAlertingAssertion);
  OUTLINED_FUNCTION_11_0();
  char v4 = *v3;
  *uint64_t v3 = a1;
  return SystemBannerHostViewController.canRequestAlertingAssertion.didset(v4);
}

uint64_t key path getter for SystemBannerHostViewController.canRequestAlertingAssertion : SystemBannerHostViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x568))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for SystemBannerHostViewController.canRequestAlertingAssertion : SystemBannerHostViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x570))(*a1);
}

uint64_t SystemBannerHostViewController.canRequestAlertingAssertion.didset(char a1)
{
  os_log_type_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  double v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v24 - v8;
  MEMORY[0x1F4188790](v10);
  BOOL v12 = (char *)&v24 - v11;
  uint64_t v13 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (unsigned __int8 *)v1
      + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_canRequestAlertingAssertion;
  uint64_t result = swift_beginAccess();
  if (*v16 == v3) {
    return result;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x2D0))(result);
  if (!v18)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v13);
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  }
  uint64_t v20 = (void *)v18;
  uint64_t v21 = v19;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(ObjectType, v21);

  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1) {
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  }
  outlined init with take of ConversationControlsRecipe((uint64_t)v12, (uint64_t)v15, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  outlined init with copy of ConversationControlsType((uint64_t)v15, (uint64_t)&v25);
  if (v28 == 2)
  {
    outlined destroy of ConversationControlsType((uint64_t)&v25);
  }
  else if (v28 != 6 {
         || v25 != 5
  }
         || (int8x16_t v23 = vorrq_s8(v26, v27),
             *(void *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL))))
  {
    outlined destroy of ConversationControlsType((uint64_t)&v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v13);
    outlined init with copy of ConversationControlsRecipe((uint64_t)v15, (uint64_t)v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v13);
    SystemBannerHostViewController.alertIfNeededForRecipeTransition(from:to:)((uint64_t)v9, (uint64_t)v6);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  }
  return _s15ConversationKit0A14ControlsActionOWOhTm_2((uint64_t)v15, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

void (*SystemBannerHostViewController.canRequestAlertingAssertion.modify())(uint64_t a1)
{
  os_log_type_t v2 = malloc(0x28uLL);
  *(void *)(OUTLINED_FUNCTION_56((uint64_t)v2) + 24) = v0;
  int v3 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_canRequestAlertingAssertion);
  OUTLINED_FUNCTION_2();
  *(unsigned char *)(v1 + 32) = *v3;
  return SystemBannerHostViewController.canRequestAlertingAssertion.modify;
}

void SystemBannerHostViewController.canRequestAlertingAssertion.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  SystemBannerHostViewController.canRequestAlertingAssertion.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

void SystemBannerHostViewController.nextSystemApertureLayoutMode.didset()
{
  if ((*((unsigned char *)v0
        + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode
        + 8) & 1) == 0)
  {
    objc_msgSend(objc_msgSend(v0, sel_systemApertureElementContext), sel_setElementNeedsUpdate);
    swift_unknownObjectRelease();
    uint64_t v1 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x438);
    v1();
  }
}

uint64_t SystemBannerHostViewController.contentRole.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_contentRole);
}

void SystemBannerHostViewController.preferredLayoutMode.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_62();
  uint64_t v4 = v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode;
  if ((*(unsigned char *)(v0
                 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode
                 + 8) & 1) == 0)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    int8x16_t v23 = (void *)OUTLINED_FUNCTION_30(v22, (uint64_t)static Logger.banners);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v24))
    {
      uint64_t v25 = (_DWORD *)OUTLINED_FUNCTION_37();
      uint64_t v51 = OUTLINED_FUNCTION_9_0();
      *uint64_t v25 = 136315138;
      type metadata accessor for SBUISystemApertureLayoutMode(0);
      uint64_t v26 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v28, v29, "[SystemAperture] returning a forced SBUISystemApertureLayoutMode - preferredLayoutMode is %s");
      OUTLINED_FUNCTION_110();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 8) = 1;
    SystemBannerHostViewController.nextSystemApertureLayoutMode.didset();
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_83_0();
  if (v5() != 4)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v19 = OUTLINED_FUNCTION_30(v30, (uint64_t)static Logger.banners);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12(v31))
    {
      uint64_t v32 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v32);
      OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v33, v34, "[SystemAperture] preferredLayoutMode is .compact (by default) because the maximum layout mode is .compact");
      OUTLINED_FUNCTION_3();
    }
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_83_0();
  uint64_t v7 = (void *)v6();

  if (!v7) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_83_0();
  uint64_t v9 = (void *)v8();

  if (!v9 || (OUTLINED_FUNCTION_23_8(), OUTLINED_FUNCTION_83_0(), uint64_t v11 = (void *)v10(), v11, !v11))
  {
LABEL_22:
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    uint64_t v19 = OUTLINED_FUNCTION_30(v35, (uint64_t)static Logger.banners);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (!OUTLINED_FUNCTION_12(v36)) {
      goto LABEL_27;
    }
    os_log_type_t v37 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v37);
    unint64_t v40 = "[SystemAperture] preferredLayoutMode is .custom (by default) since we are missing a leading/trailing or minimal";
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_52_11();
  uint64_t v13 = v12();
  if (!v13)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v19 = OUTLINED_FUNCTION_30(v41, (uint64_t)static Logger.banners);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v42)) {
      goto LABEL_27;
    }
    uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v43);
    unint64_t v40 = "[SystemAperture] preferredLayoutMode is .custom (by default) since no conversationControlsViewController available";
LABEL_26:
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v38, v39, v40);
    OUTLINED_FUNCTION_3();
LABEL_27:

    goto LABEL_28;
  }
  uint64_t v14 = (void *)v13;
  swift_getObjectType();
  OUTLINED_FUNCTION_120_2();
  v15();
  uint64_t v16 = type metadata accessor for ConversationControlsRecipe();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v1, 1, v16);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v1, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  if (EnumTagSinglePayload == 1)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = OUTLINED_FUNCTION_30(v18, (uint64_t)static Logger.banners);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v20))
    {

      goto LABEL_28;
    }
    uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v21);
    _os_log_impl(&dword_1C2F90000, v19, OS_LOG_TYPE_INFO, "[SystemAperture] preferredLayoutMode is .custom (by default) since no recipe available", v1, 2u);
    OUTLINED_FUNCTION_3();

    goto LABEL_27;
  }
  OUTLINED_FUNCTION_3_16();
  if (((*(uint64_t (**)(void))(v44 + 216))() & 1) == 0) {
    goto LABEL_37;
  }
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_24_36();
  uint64_t v46 = (void *)v45();
  OUTLINED_FUNCTION_0_91();
  char v48 = (*(uint64_t (**)(void))(v47 + 640))();

  if ((v48 & 1) == 0) {
    goto LABEL_37;
  }
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_53_9();
  id v50 = (void *)v49();
  if (v50)
  {
    objc_msgSend(v50, sel_isAmbient);

    swift_unknownObjectRelease();
  }
  else
  {
LABEL_37:
  }
LABEL_28:
  OUTLINED_FUNCTION_28();
}

uint64_t SystemBannerHostViewController.maximumLayoutMode.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 720))();
  if (!v1) {
    return 4;
  }
  uint64_t v3 = (void *)v1;
  uint64_t v4 = v2;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 72))(v18, ObjectType, v4);

  outlined init with take of Any?((uint64_t)v18, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for SystemApertureElement?);
  if (__src[0] == 1) {
    return 4;
  }
  memcpy(__dst, __src, 0x49uLL);
  uint64_t v6 = __dst[8];
  outlined init with take of Any?((uint64_t)__dst, (uint64_t)v21, &demangling cache variable for type metadata for SystemApertureAccessoryView?);
  outlined release of BackgroundView<A>(v21);
  outlined init with take of Any?((uint64_t)&__dst[2], (uint64_t)v22, &demangling cache variable for type metadata for SystemApertureAccessoryView?);
  outlined release of BackgroundView<A>(v22);
  outlined init with take of Any?((uint64_t)&__dst[4], (uint64_t)v23, &demangling cache variable for type metadata for SystemApertureAccessoryView?);
  outlined release of BackgroundView<A>(v23);
  outlined init with take of Any?((uint64_t)&__dst[6], (uint64_t)v24, &demangling cache variable for type metadata for SystemApertureAccessoryView?);
  outlined release of BackgroundView<A>(v24);
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = OUTLINED_FUNCTION_30(v7, (uint64_t)static Logger.banners);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v9))
  {
    uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v17 = OUTLINED_FUNCTION_9_0();
    *uint64_t v10 = 136315138;
    id v11 = (id)SBUISystemApertureLayoutModeDescription();
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_103_4(&dword_1C2F90000, v8, v15, "Overridding the default maximum layout mode with %s");
    OUTLINED_FUNCTION_360();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  return v6;
}

void *SystemBannerHostViewController.leadingView.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_leadingViewContainer);
  id v2 = v1;
  return v1;
}

void *SystemBannerHostViewController.trailingView.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_trailingViewContainer);
  id v2 = v1;
  return v1;
}

void *SystemBannerHostViewController.minimalView.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_minimalViewContainer);
  id v2 = v1;
  return v1;
}

void *SystemBannerHostViewController.detachedMinimalView.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_detachedMinimalViewContainer);
  id v2 = v1;
  return v1;
}

void *SystemBannerHostViewController.elementIdentifier.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_elementIdentifier);
  id v2 = v1;
  return v1;
}

uint64_t SystemBannerHostViewController.associatedAppBundleIdentifier.getter()
{
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_4_13();
  v2 += 55;
  uint64_t v3 = *v2;
  (*v2)();
  OUTLINED_FUNCTION_98_5();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v4 + 624))();
  uint64_t v6 = v5;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(void))(v6 + 160);
  OUTLINED_FUNCTION_75_4();
  os_log_type_t v9 = (void *)v8();
  unsigned __int8 v10 = objc_msgSend(v9, sel_isSystemProvider);

  if (v10) {
    goto LABEL_14;
  }
  id v11 = (void *)v3();
  Swift::Bool v12 = ConversationControlsManager.isActiveCallGreenTea3P()();

  if (!v12)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 184))(ObjectType, v6) != 4)
    {
      uint64_t v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A0))();
      if (v16)
      {
        unsigned __int8 v17 = objc_msgSend(v16, sel_isSpringBoardLocked);
        swift_unknownObjectRelease();
        char v18 = v17 ^ 1;
      }
      else
      {
        char v18 = 1;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 216))(ObjectType, v6) & 1) == 0 || (v18)
      {
        OUTLINED_FUNCTION_75_4();
        uint64_t v19 = (void *)v8();
        id v15 = objc_msgSend(v19, sel_bundleIdentifier);

        if (v15) {
          goto LABEL_13;
        }
      }
    }
LABEL_14:
    swift_unknownObjectRelease();
    return 0;
  }
  OUTLINED_FUNCTION_75_4();
  unint64_t v14 = (void *)v13();
  id v15 = objc_msgSend(v14, sel_bundleIdentifier);

  if (!v15) {
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRelease();
  return v20;
}

uint64_t SystemBannerHostViewController.backgroundActivitiesToSuppress.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 416))();
  if (!v1) {
    return MEMORY[0x1E4FBC870];
  }
  id v2 = objc_msgSend(v1, sel_backgroundActivitiesToSuppress);
  swift_unknownObjectRelease();
  type metadata accessor for STBackgroundActivityIdentifier(0);
  lazy protocol witness table accessor for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier();
  OUTLINED_FUNCTION_23_0();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t SystemBannerHostViewController.presentationBehaviors.getter()
{
  os_log_type_t v1 = v0;
  OUTLINED_FUNCTION_36_19();
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(v2 + 416))();
  if (v3)
  {
    unsigned __int8 v4 = objc_msgSend(v3, sel_isSpringBoardLocked);
    swift_unknownObjectRelease();
    char v5 = v4 ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  OUTLINED_FUNCTION_128_2();
  v6 += 55;
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)(*v6)();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v9 + 624))();
  uint64_t v11 = v10;

  OUTLINED_FUNCTION_34_21();
  if (((*(uint64_t (**)(void))(v12 + 1120))() & 1) == 0)
  {
    uint64_t v21 = (void *)v7();
    OUTLINED_FUNCTION_0_91();
    char v23 = (*(uint64_t (**)(void))(v22 + 640))();

    if ((v23 & 1) == 0)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 216);
      if (!(v5 & 1 | ((v25(ObjectType, v11) & 1) == 0))
        || (uint64_t v26 = OUTLINED_FUNCTION_54_10(),
            uint64_t v28 = (void *)v27(v26),
            unsigned __int8 v29 = objc_msgSend(v28, sel_isFaceTimeProvider),
            v28,
            (v29 & 1) == 0)
        && (v25(ObjectType, v11) & 1) == 0
        || (uint64_t v30 = OUTLINED_FUNCTION_54_10(), (v31(v30) & 1) != 0))
      {
        uint64_t v14 = 8;
        goto LABEL_22;
      }
      uint64_t v37 = OUTLINED_FUNCTION_54_10();
      if (v38(v37) != 6)
      {
        OUTLINED_FUNCTION_128_2();
        if ((*(uint64_t (**)(void))(v39 + 1440))() != 3)
        {
          uint64_t v14 = 24;
          goto LABEL_22;
        }
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        uint64_t v41 = (void *)OUTLINED_FUNCTION_30(v40, (uint64_t)static Logger.banners);
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_105(v42))
        {
          uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_8_0();
          OUTLINED_FUNCTION_180(v43);
          OUTLINED_FUNCTION_35_1(&dword_1C2F90000, v44, v45, "[SystemAperture] Ignoring call to add .disablesTapToApp in behaviors because we're maximumLayoutMode == .compact");
          OUTLINED_FUNCTION_3();
        }
      }
    }
    uint64_t v14 = 8;
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_36_19();
  if ((*(uint64_t (**)(void))(v13 + 216))()) {
    uint64_t v14 = 14;
  }
  else {
    uint64_t v14 = 12;
  }
  OUTLINED_FUNCTION_34_21();
  if ((*(uint64_t (**)(void))(v15 + 1440))() == 3)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    unsigned __int8 v17 = OUTLINED_FUNCTION_30(v16, (uint64_t)static Logger.banners);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v18))
    {
      uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_363(v19);
      OUTLINED_FUNCTION_79_5(&dword_1C2F90000, v17, v20, "[SystemAperture] Ignoring call to add .disablesTapToApp in behaviors because we're maximumLayoutMode == .compact");
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    v14 |= 0x10uLL;
  }
LABEL_22:
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = OUTLINED_FUNCTION_30(v32, (uint64_t)static Logger.banners);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 67109120;
    OUTLINED_FUNCTION_101_3();
    _os_log_impl(&dword_1C2F90000, v33, v1, "[SystemAperture] presentationBehaviors showsOverAssociatedScene = %{BOOL}d", v35, 8u);
    OUTLINED_FUNCTION_3();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }
  return v14;
}

void *SystemBannerHostViewController.keyColor.getter()
{
  os_log_type_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_keyColor);
  id v2 = v1;
  return v1;
}

Swift::Void __swiftcall SystemBannerHostViewController.updateSystemAperturePreferredContentSize()()
{
  os_log_type_t v1 = v0;
  OUTLINED_FUNCTION_5_13();
  if ((*(uint64_t (**)(void))(v2 + 1360))() == 4)
  {
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_52_11();
    uint64_t v4 = v3();
    if (v4)
    {
      uint64_t v6 = v5;
      id v19 = (id)v4;
      uint64_t ObjectType = swift_getObjectType();
      *(double *)&uint64_t v8 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(ObjectType, v6));
      if (v10)
      {
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        uint64_t v14 = (void *)OUTLINED_FUNCTION_30(v13, (uint64_t)static Logger.banners);
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_2_12(v15))
        {
          uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_8_0();
          OUTLINED_FUNCTION_22_1(v16);
          OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v17, v18, "Using preferredContentSize fallback in system aperture view because it didn't specify a size");
          OUTLINED_FUNCTION_3();
        }

        objc_msgSend(v19, sel_preferredContentSize);
      }
      else
      {
        double v11 = *(double *)&v8;
        double v12 = v9;
      }
      objc_msgSend(v1, sel_setPreferredContentSize_, v11, v12);
    }
  }
}

void SystemBannerHostViewController.handleLayoutModeTransition(from:to:isUserInitiated:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, os_log_type_t type, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  OUTLINED_FUNCTION_3_15();
  a27 = v29;
  a28 = v33;
  if (v31 != v30)
  {
    os_log_type_t v34 = v28;
    char v35 = v32;
    uint64_t v36 = v31;
    uint64_t v37 = v30;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v39 = OUTLINED_FUNCTION_30(v38, (uint64_t)static Logger.banners);
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      os_log_type_t typea = v40;
      uint64_t v41 = swift_slowAlloc();
      a16 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v41 = 136315650;
      id v42 = (id)SBUISystemApertureLayoutModeDescription();
      char v62 = v35;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      id v46 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, &a16);
      char v35 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 22) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v39, typea, "[SystemAperture] handling transition from layout mode changed %s to %s, isUserInitiated %{BOOL}d", (uint8_t *)v41, 0x1Cu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_52_11();
    uint64_t v51 = v50();
    if (v51)
    {
      uint64_t v39 = v51;
      uint64_t v53 = v52;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v53 + 128))(ObjectType, v53);
    }
    if (v37 == 4)
    {
      if (v36 == 3 && (v35 & 1) != 0)
      {
        OUTLINED_FUNCTION_30_21();
        OUTLINED_FUNCTION_24_36();
        v55();
        OUTLINED_FUNCTION_98_5();
        OUTLINED_FUNCTION_0_91();
        (*(void (**)(void))(v56 + 624))();
        uint64_t v58 = v57;

        uint64_t v59 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 416))(1, v59, v58);
        swift_unknownObjectRelease();
      }
      SystemBannerHostViewController.dismissEphemeralSystemApertureContent()();
      objc_msgSend(objc_msgSend(v34, sel_systemApertureElementContext), sel_elementDidDismissMenu);
      swift_unknownObjectRelease();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_99();
      (*(void (**)(void))(v60 + 272))();
    }
  }
  OUTLINED_FUNCTION_2_22();
}

id SystemBannerHostViewController.positionSystemApertureAccessoryView(_:aligningWithEdge:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = objc_msgSend(v3, sel_view);
  if (!v7)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_effectiveUserInterfaceLayoutDirection);

  if (v9) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = 2;
  }
  swift_getObjectType();
  OUTLINED_FUNCTION_120_2();
  v11();
  outlined init with take of SystemApertureLayoutMargins((uint64_t)v65, (uint64_t)&v66);
  if (!v69)
  {
    char v23 = &v67;
    if (a3 != 2) {
      char v23 = (double *)&v68;
    }
    double MinX = *v23;
    if (v10 == a3) {
      goto LABEL_20;
    }
    id v25 = OUTLINED_FUNCTION_8_6();
    if (v25)
    {
      uint64_t v26 = v25;
      objc_msgSend(v25, sel_bounds);
      CGFloat v28 = v27;
      CGFloat v30 = v29;
      CGFloat v32 = v31;
      CGFloat v34 = v33;

      v71.origin.x = v28;
      v71.origin.double y = v30;
      v71.size.width = v32;
      v71.size.height = v34;
      CGFloat v35 = CGRectGetMaxX(v71) - MinX;
      objc_msgSend(a1, sel_frame);
      double MinX = v35 - CGRectGetWidth(v72);
      goto LABEL_20;
    }
    goto LABEL_41;
  }
  if (v69 != 1)
  {
    id v36 = OUTLINED_FUNCTION_8_6();
    uint64_t v37 = v36;
    if (v10 != a3)
    {
      if (v36)
      {
        id v39 = objc_msgSend(v36, sel_SBUISA_systemApertureLegibleContentLayoutMarginsGuide);

        objc_msgSend(v39, sel_layoutFrame);
        OUTLINED_FUNCTION_126();
        v74.origin.x = OUTLINED_FUNCTION_41();
        double MaxX = CGRectGetMaxX(v74);
        objc_msgSend(a1, sel_frame);
        double MinX = MaxX - CGRectGetWidth(v75);
        goto LABEL_20;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v36)
    {
      id v38 = objc_msgSend(v36, sel_SBUISA_systemApertureLegibleContentLayoutMarginsGuide);

      objc_msgSend(v38, sel_layoutFrame);
      OUTLINED_FUNCTION_126();
      v73.origin.x = OUTLINED_FUNCTION_41();
      double MinX = CGRectGetMinX(v73);
LABEL_20:
      objc_msgSend(a1, sel_frame);
      return objc_msgSend(a1, sel_setFrame_, MinX);
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  id v12 = v66;
  double v13 = v67;
  uint64_t v14 = &selRef_ringButton;
  if (v66)
  {
    objc_msgSend(v66, sel_center);
    double v16 = v15;
    double v18 = v17;
    id v19 = objc_msgSend(v12, sel_superview);
    objc_msgSend(a1, sel_convertPoint_fromView_, v19, v16, v18);
    double v21 = v20;

    objc_msgSend(a1, sel_bounds);
    double v22 = CGRectGetMidX(v70) - v21;
  }
  else
  {
    double v22 = 0.0;
  }
  if (a3 == 2)
  {
    id v42 = OUTLINED_FUNCTION_8_6();
    if (v42)
    {
      uint64_t v43 = v42;
      unint64_t v44 = &selRef_SBUISA_systemApertureLeadingConcentricContentLayoutGuide;
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  id v45 = OUTLINED_FUNCTION_8_6();
  if (!v45)
  {
LABEL_45:
    __break(1u);
    JUMPOUT(0x1C33CD164);
  }
  uint64_t v43 = v45;
  unint64_t v44 = &selRef_SBUISA_systemApertureTrailingConcentricContentLayoutGuide;
LABEL_27:
  id v46 = [v43 *v44];

  objc_msgSend(v46, sel_layoutFrame);
  v76.origin.x = OUTLINED_FUNCTION_41();
  double MidX = CGRectGetMidX(v76);
  unint64_t v48 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x550);
  switch(((uint64_t (*)(void))v48)())
  {
    case -1:
    case 0:
    case 1:
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.banners);
      id v50 = v4;
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v51, v52)) {
        goto LABEL_37;
      }
      uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v64 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_65_7(4.8149e-34);
      v48();
      id v54 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v64);
      OUTLINED_FUNCTION_69_5();

      swift_bridgeObjectRelease();
      uint64_t v58 = "[System Aperture] Unexpected positioning of accessoryView for layoutMode: %s";
      goto LABEL_36;
    case 2:
    case 4:
      goto LABEL_38;
    case 3:
      goto LABEL_39;
    default:
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.banners);
      id v50 = v4;
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_37();
        uint64_t v64 = OUTLINED_FUNCTION_9_0();
        OUTLINED_FUNCTION_65_7(4.8149e-34);
        v48();
        id v60 = (id)SBUISystemApertureLayoutModeDescription();
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, &v64);
        OUTLINED_FUNCTION_69_5();

        swift_bridgeObjectRelease();
        uint64_t v58 = "[System Aperture] Unknown default for layoutMode during accessory positioning: %s";
LABEL_36:
        _os_log_impl(&dword_1C2F90000, v51, v52, v58, v53, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        uint64_t v14 = &selRef_ringButton;
        OUTLINED_FUNCTION_3();
      }
      else
      {
LABEL_37:
      }
LABEL_38:
      double v13 = 0.0;
LABEL_39:
      [a1 v14[275]];
      objc_msgSend(a1, sel_setCenter_, MidX + v22 + v13);
      id result = (id)outlined release of SystemApertureLayoutMargins((uint64_t)v65);
      break;
  }
  return result;
}

Swift::Void __swiftcall SystemBannerHostViewController.positionSystemApertureAccessoryViews()()
{
  OUTLINED_FUNCTION_99();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 1448))();
  if (v1)
  {
    uint64_t v14 = v1;
    swift_getObjectType();
    if (dynamic_cast_existential_1_conditional(v14))
    {
      OUTLINED_FUNCTION_99();
      uint64_t v3 = (*(uint64_t (**)(void))(v2 + 1456))();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        swift_getObjectType();
        uint64_t v5 = dynamic_cast_existential_1_conditional((uint64_t)v4);
        if (v5)
        {
          uint64_t v7 = v5;
          uint64_t v8 = v6;
          OUTLINED_FUNCTION_99();
          uint64_t v10 = *(void (**)(uint64_t))(v9 + 1520);
          uint64_t v11 = OUTLINED_FUNCTION_34_9();
          v10(v11);
          ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v7, v8, 8);
          uint64_t v4 = (void *)v14;
        }
      }
    }
    OUTLINED_FUNCTION_1_0();
  }
  else
  {
    OUTLINED_FUNCTION_1_0();
  }
}

void SystemBannerHostViewController.viewWillLayoutSubviews(with:)()
{
  OUTLINED_FUNCTION_49_11();
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v13 = partial apply for closure #1 in SystemBannerHostViewController.viewWillLayoutSubviews(with:);
    uint64_t v14 = v4;
    uint64_t v9 = MEMORY[0x1E4F143A8];
    uint64_t v10 = 1107296256;
    uint64_t v11 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    id v12 = &block_descriptor_25_4;
    uint64_t v5 = _Block_copy(&v9);
    id v6 = v0;
    swift_release();
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v13 = partial apply for closure #2 in SystemBannerHostViewController.viewWillLayoutSubviews(with:);
    uint64_t v14 = v7;
    uint64_t v9 = MEMORY[0x1E4F143A8];
    uint64_t v10 = 1107296256;
    uint64_t v11 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    id v12 = &block_descriptor_29_3;
    uint64_t v8 = _Block_copy(&v9);
    swift_release();
    objc_msgSend(v3, sel_animateAlongsideTransition_completion_, v5, v8);
    _Block_release(v8);
    _Block_release(v5);
  }
}

#error "1C33CD7EC: call analysis failed (funcsize=237)"

void closure #2 in SystemBannerHostViewController.viewWillLayoutSubviews(with:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  if (v4)
  {
    id v6 = v4;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x2B8))();

    swift_retain();
    swift_release();
    char v22 = 0;
    CurrentValueSubject.send(_:)();
    swift_release();
  }
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](v3);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.banners);
    id v10 = v8;
    swift_unknownObjectRetain_n();
    uint64_t v11 = v10;
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v21 = v15;
      *(_DWORD *)uint64_t v14 = 136446466;
      (*(void (**)(void))((*v5 & *v11) + 0x550))();
      id v16 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 1024;
      objc_msgSend(a1, sel_isCancelled);
      swift_unknownObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl(&dword_1C2F90000, v12, v13, "[SystemAperture] viewWillLayoutSubviews completed with activeLayoutMode=%{public}s canceled=%{BOOL}d", (uint8_t *)v14, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v15, -1, -1);
      MEMORY[0x1C87760E0](v14, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    double v20 = (void *)(*(uint64_t (**)(void))((*v5 & *v11) + 0x1B8))();
    ConversationControlsManager.updateGreenTea3PCallStateIfNeeded()();
  }
}

void SystemBannerHostViewController.updateWaveformForLayoutMode(_:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  OUTLINED_FUNCTION_3_15();
  a26 = v28;
  a27 = v29;
  CGFloat v30 = v27;
  uint64_t v32 = v31;
  OUTLINED_FUNCTION_36_19();
  uint64_t v34 = (*(uint64_t (**)(void))(v33 + 88))();
  if (!v34)
  {
LABEL_21:
    OUTLINED_FUNCTION_2_22();
    return;
  }
  id v68 = (id)v34;
  type metadata accessor for SystemApertureInCallWaveformTrailingView();
  if (!swift_dynamicCastClass()) {
    goto LABEL_28;
  }
  id v35 = objc_msgSend(v27, sel_view);
  if (!v35)
  {
    __break(1u);
    return;
  }
  id v36 = v35;
  id v37 = objc_msgSend(v35, sel_window);

  if (!v37) {
    goto LABEL_13;
  }
  id v38 = objc_msgSend(v37, sel_windowScene);

  if (!v38) {
    goto LABEL_13;
  }
  id v39 = objc_msgSend(v38, sel_activationState);

  if (v39)
  {
    if (v32 != 3 || v39 != (id)1) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  if (v32 != 3)
  {
LABEL_13:
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    id v42 = OUTLINED_FUNCTION_30(v41, (uint64_t)static Logger.banners);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_363(v44);
      OUTLINED_FUNCTION_79_5(&dword_1C2F90000, v42, v45, "Stopping the audio waveform");
      OUTLINED_FUNCTION_3();
    }

    id v46 = v30;
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_84_4(v48))
    {
      uint64_t v49 = OUTLINED_FUNCTION_15_1();
      a15 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v49 = 136446466;
      OUTLINED_FUNCTION_196_0();
      (*(void (**)(void))(v50 + 1360))();
      id v51 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2082;
      uint64_t v55 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_80_4(&dword_1C2F90000, v47, v57, "layoutMode=%{public}s, sceneIsForeground=%{public}s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_83_0();
    v58();

    goto LABEL_21;
  }
LABEL_23:
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  id v60 = (void *)OUTLINED_FUNCTION_30(v59, (uint64_t)static Logger.banners);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v61))
  {
    unint64_t v62 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v62);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v63, v64, "Starting the audio waveform because the layout mode is compact and scene is foreground");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_83_0();
  v65();
LABEL_28:
  OUTLINED_FUNCTION_2_22();
}

uint64_t SystemBannerHostViewController.alertIfNeededForRecipeTransition(from:to:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_161();
  if (((*(uint64_t (**)(void))(v4 + 1384))() & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_161();
  (*(void (**)(void))(v5 + 696))();
  OUTLINED_FUNCTION_17_8();
  char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 192))(a1, a2);
  swift_release();
  return v7 & 1;
}

void SystemBannerHostViewController.performUpdateForRecipeTransition(from:to:coordinatedAnimations:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  uint64_t v11 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_49_11();
  if (v14)
  {
    uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x550))();
    if (v13 == 4)
    {
      outlined init with copy of Environment<DynamicTypeSize>.Content(v8, v2, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      if (__swift_getEnumTagSinglePayload(v2, 1, v11) == 1)
      {
        uint64_t v13 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      }
      else
      {
        uint64_t v15 = outlined init with take of ConversationControlsRecipe(v2, v1, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        ConversationControlsType.wantsUpdateAnimationAfter.getter(v15, v16, v17, v18, v19, v20, v21, v22);
        if (v23)
        {
          ConversationControlsType.wantsUpdateAnimationBefore.getter(v23, v24, v25, v26, v27, v28, v29, v30);
          if ((v31 & 1) != 0 && (static ConversationControlsType.== infix(_:_:)(v1) & 1) == 0)
          {
            id v32 = objc_msgSend(v0, sel_systemApertureElementContext);
            v34[4] = v6;
            v34[5] = v4;
            v34[0] = MEMORY[0x1E4F143A8];
            v34[1] = 1107296256;
            v34[2] = thunk for @escaping @callee_guaranteed () -> ();
            v34[3] = &block_descriptor_32_1;
            uint64_t v33 = _Block_copy(v34);
            swift_retain();
            swift_release();
            objc_msgSend(v32, sel_setElementNeedsLayoutUpdateWithOptions_coordinatedAnimations_, 1, v33);
            _Block_release(v33);
            swift_unknownObjectRelease();
            _s15ConversationKit0A14ControlsActionOWOhTm_2(v1, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            goto LABEL_11;
          }
        }
        uint64_t v13 = _s15ConversationKit0A14ControlsActionOWOhTm_2(v1, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      }
    }
  }
  v6(v13);
LABEL_11:
  OUTLINED_FUNCTION_28();
}

#error "1C33CE55C: call analysis failed (funcsize=158)"

#error "1C33CE7E4: call analysis failed (funcsize=161)"

#error "1C33CEE68: call analysis failed (funcsize=391)"

void SystemBannerHostViewController.updateSystemApertureCustomContentVisibility(hidden:shouldLog:)(char a1, char a2)
{
  OUTLINED_FUNCTION_161();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 720))();
  if (!v5) {
    return;
  }
  uint64_t v19 = v5;
  if ([v5 isViewLoaded])
  {
    if (a1 == 2)
    {
      OUTLINED_FUNCTION_161();
      int v7 = (*(uint64_t (**)(void))(v6 + 1360))() != 4;
    }
    else
    {
      int v7 = a1 & 1;
    }
    id v8 = [v19 view];
    if (!v8)
    {
      __break(1u);
      return;
    }
    uint64_t v9 = v8;
    double v10 = 1.0;
    if (v7) {
      double v10 = 0.0;
    }
    objc_msgSend(v8, sel_setAlpha_, v10);

    if (a2)
    {
      if (v7)
      {
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        uint64_t v12 = OUTLINED_FUNCTION_30(v11, (uint64_t)static Logger.banners);
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v12, v13)) {
          goto LABEL_21;
        }
        char v14 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_23_24(v14);
        uint64_t v15 = "[SystemAperture] hiding custom content";
      }
      else
      {
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        uint64_t v12 = OUTLINED_FUNCTION_30(v16, (uint64_t)static Logger.banners);
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v12, v13)) {
          goto LABEL_21;
        }
        uint64_t v17 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_23_24(v17);
        uint64_t v15 = "[SystemAperture] showing custom content";
      }
      _os_log_impl(&dword_1C2F90000, v12, v13, v15, (uint8_t *)v9, 2u);
      uint64_t v18 = v12;
      OUTLINED_FUNCTION_3();
      uint64_t v12 = v19;
      uint64_t v19 = v18;
LABEL_21:
    }
  }
}

void SystemBannerHostViewController.dismissEphemeralSystemApertureContent()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v1 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v1, *MEMORY[0x1E4FBCBE8], v4);
  char v8 = _dispatchPreconditionTest(_:)();
  uint64_t v9 = OUTLINED_FUNCTION_25_22();
  v10(v9);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v11 = v3 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v11, (uint64_t)v29, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v30 == 255)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v29, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    goto LABEL_11;
  }
  uint64_t v2 = v29;
  v31[0] = v29[0];
  v31[1] = v29[1];
  v31[2] = v29[2];
  unsigned __int8 v32 = v30;
  if (one-time initialization token for banners != -1) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.banners);
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v14))
  {
    uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_363(v15);
    OUTLINED_FUNCTION_79_5(&dword_1C2F90000, v13, v16, "[SystemAperture] Dismissing ephemeral system aperture content");
    OUTLINED_FUNCTION_3();
  }

  v2[1] = 0u;
  v2[2] = 0u;
  _OWORD *v2 = 0u;
  unsigned __int8 v30 = -1;
  SystemBannerHostViewController.overriddenSystemApertureContent.setter((uint64_t)v29);
  outlined init with copy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v31, (uint64_t)v29);
  outlined init with copy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v31, (uint64_t)v28);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v18))
  {
    uint64_t v19 = OUTLINED_FUNCTION_15_1();
    uint64_t v27 = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v19 = 136315394;
    outlined init with copy of ConversationControlsType((uint64_t)v29 + 8, (uint64_t)v26);
    specialized >> prefix<A>(_:)((uint64_t)v26);
    uint64_t v20 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v26, &demangling cache variable for type metadata for ConversationControlsType?);
    v26[0] = OUTLINED_FUNCTION_86_5(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v29);
    *(_WORD *)(v19 + 12) = 2080;
    v26[0] = v28[0];
    uint64_t v22 = String.init<A>(reflecting:)();
    v26[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v28);
    OUTLINED_FUNCTION_80_4(&dword_1C2F90000, v17, v24, "[SystemAperture] Updating ConversationControls to type: %s sizeClass: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v29);
    outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v28);
  }

  OUTLINED_FUNCTION_102_3();
  v25();
  outlined destroy of SystemBannerHostViewController.OverriddenSystemApertureContent((uint64_t)v31);
LABEL_11:
  OUTLINED_FUNCTION_28();
}

id SystemBannerHostViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void SystemBannerHostViewController.init(nibName:bundle:)()
{
}

uint64_t protocol witness for SystemConversationControlsViewControllerDelegate.deepLinkToFullScreenCallUI() in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A8))();
}

uint64_t protocol witness for SystemConversationControlsViewControllerDelegate.deepLinkToFullScreenCallDetailsView() in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B0))();
}

uint64_t protocol witness for SystemConversationControlsViewControllerDelegate.showDefaultSystemHUD() in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C0))();
}

uint64_t protocol witness for SystemConversationControlsViewControllerDelegate.deepLinkToFullScreenPTTCallDetailsView() in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B8))();
}

uint64_t protocol witness for SystemConversationControlsViewControllerDelegate.systemApertureTouchInsetsUpdated(to:) in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A0))();
}

uint64_t protocol witness for SceneStateDescribing.hasPresentedFullScreenCallUI.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t protocol witness for SceneStateDescribing.isPresentingFullScreenCallUI.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A0))();
}

uint64_t protocol witness for ConversationControlsViewControllerDelegate.controlsPreferredContentSizeChanged(presentingMenu:) in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C8))();
}

uint64_t protocol witness for ConversationControlsViewControllerDelegate.menuPresented.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D0))();
}

uint64_t protocol witness for ConversationControlsViewControllerDelegate.needsMenuContainerView.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D8))();
}

uint64_t protocol witness for ConversationControlsViewControllerDelegate.captureGroup.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4F8))();
}

uint64_t protocol witness for ConversationControlsViewControllerDelegate.needsBackgroundBlur.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4F0))();
}

uint64_t protocol witness for ConversationControlsViewControllerDelegate.eligibleForDismissal.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4E0))();
}

uint64_t protocol witness for ActivityBanner.sizeClass.getter in conformance SystemBannerHostViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t protocol witness for ActivityBanner.updateContent(for:using:controllingWith:fromActivityManager:) in conformance SystemBannerHostViewController()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 1056))();
}

_OWORD *specialized _NativeDictionary._unsafeInsertNew(key:value:)(_OWORD *a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._finalize()();
  unint64_t v4 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 64 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  id result = outlined init with take of Any(a1, (_OWORD *)(*(void *)(a2 + 56) + 32 * v4));
  ++*(void *)(a2 + 16);
  return result;
}

id outlined bridged method (mbgnnbnnn) of @objc BNBannerSource.revokePresentable(withRequestIdentifier:reason:animated:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11 = (void *)MEMORY[0x1C87730B0]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(a7, sel_revokePresentableWithRequestIdentifier_reason_animated_userInfo_error_, v11, a3, a4 & 1, isa, a6);

  return v13;
}

uint64_t specialized SystemApertureAlertingManager.init(systemApertureElement:sceneStateDescriber:)(void *a1, void *a2, uint64_t a3)
{
  *(void *)(a3 + 40) = 0;
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_logger;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationControls);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3 + v6, v8, v7);
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_invalidationInProgressSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  *(void *)(a3 + v9) = CurrentValueSubject.init(_:)();
  swift_unknownObjectUnownedInit();
  *(void *)(a3 + 32) = &protocol witness table for SystemBannerHostViewController;
  swift_unknownObjectUnownedInit();
  CurrentValueSubject.send(_:)();

  return a3;
}

uint64_t specialized showEphemeralContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, unsigned char *, uint64_t), uint64_t (*a6)(void))
{
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation) == 1)
  {
    uint64_t v10 = a4 + 16;
    OUTLINED_FUNCTION_2();
    uint64_t v11 = *(void *)(a3 + 16);
    OUTLINED_FUNCTION_2();
    outlined init with copy of ConversationControlsType(v10, (uint64_t)v13);
    a5(a1, v11, v13, a2);
    return outlined destroy of ConversationControlsType((uint64_t)v13);
  }
  else
  {
    return a6();
  }
}

uint64_t specialized showContent #1 (_:) in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(void *a1, void *a2)
{
  unint64_t v4 = *(void (**)(void *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x2D8);
  id v5 = a1;
  v4(a1, &protocol witness table for ConversationHUDViewController);
  uint64_t v6 = (uint64_t)a2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v6, (uint64_t)v18, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  LODWORD(v6) = v19;
  uint64_t result = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v6 != 255)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.banners);
    id v9 = v5;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v17 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)&v18[0] = v9;
      *((void *)&v18[0] + 1) = &protocol witness table for ConversationHUDViewController;
      id v14 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsViewController);
      uint64_t v15 = String.init<A>(reflecting:)();
      *(void *)&v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v10, v11, "Removing ephemeral content since we're showing new content %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v13, -1, -1);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }
    else
    {
    }
    memset(v18, 0, sizeof(v18));
    unsigned __int8 v19 = -1;
    return SystemBannerHostViewController.overriddenSystemApertureContent.setter((uint64_t)v18);
  }
  return result;
}

{
  void (*v4)(void *, _UNKNOWN **);
  id v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  unsigned __int8 v19;

  unint64_t v4 = *(void (**)(void *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x2D8);
  id v5 = a1;
  v4(a1, &protocol witness table for ConversationNoticeViewController);
  uint64_t v6 = (uint64_t)a2 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v6, (uint64_t)v18, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  LODWORD(v6) = v19;
  uint64_t result = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v6 != 255)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.banners);
    id v9 = v5;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v17 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)&v18[0] = v9;
      *((void *)&v18[0] + 1) = &protocol witness table for ConversationNoticeViewController;
      id v14 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsViewController);
      uint64_t v15 = String.init<A>(reflecting:)();
      *(void *)&v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v10, v11, "Removing ephemeral content since we're showing new content %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v13, -1, -1);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }
    else
    {
    }
    memset(v18, 0, sizeof(v18));
    unsigned __int8 v19 = -1;
    return SystemBannerHostViewController.overriddenSystemApertureContent.setter((uint64_t)v18);
  }
  return result;
}

uint64_t specialized SystemBannerHostViewController.showEphemeralSystemApertureContent(_:overridingSizeClass:overridingControlsType:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  os_log_type_t v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *os_log_type_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBE8], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v13 = (uint64_t)a4 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v13, (uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  int v14 = v35[40];
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v14 == 255)
  {
    outlined init with copy of ConversationControlsType(a3, (uint64_t)v35);
    uint64_t v34 = a2;
    SystemBannerHostViewController.overriddenSystemApertureContent.setter((uint64_t)&v34);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.banners);
    uint64_t v21 = a4;
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v22))
    {

      goto LABEL_12;
    }
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)unint64_t v23 = 136315138;
    unsigned __int8 v32 = v23 + 4;
    uint64_t v33 = v24;
    outlined init with copy of Environment<DynamicTypeSize>.Content(v13, (uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    uint64_t v25 = specialized >> prefix<A>(_:)((uint64_t)&v34);
    unint64_t v27 = v26;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v16, v22, "[SystemAperture] Set overriddenSystemApertureContent to: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v24, -1, -1);
    unsigned __int8 v19 = v23;
    goto LABEL_10;
  }
  if (one-time initialization token for banners != -1) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.banners);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl(&dword_1C2F90000, v16, v17, "[SystemAperture] Not setting overriddenSystemApertureContent since it is already set", v18, 2u);
    unsigned __int8 v19 = v18;
LABEL_10:
    MEMORY[0x1C87760E0](v19, -1, -1);
  }
LABEL_12:

  uint64_t v28 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent;
  *((unsigned char *)a4
  + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent) = 1;
  uint64_t v29 = *(uint64_t (**)(void *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *a4) + 0x2D8);
  id v30 = a1;
  uint64_t result = v29(a1, &protocol witness table for ConversationNoticeViewController);
  *((unsigned char *)a4 + v28) = 0;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, _UNKNOWN **);
  id v30;
  uint64_t result;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned char v35[48];

  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  os_log_type_t v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *os_log_type_t v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBE8], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v13 = (uint64_t)a4 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v13, (uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  int v14 = v35[40];
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  if (v14 == 255)
  {
    outlined init with copy of ConversationControlsType(a3, (uint64_t)v35);
    uint64_t v34 = a2;
    SystemBannerHostViewController.overriddenSystemApertureContent.setter((uint64_t)&v34);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.banners);
    uint64_t v21 = a4;
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v22))
    {

      goto LABEL_12;
    }
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)unint64_t v23 = 136315138;
    unsigned __int8 v32 = v23 + 4;
    uint64_t v33 = v24;
    outlined init with copy of Environment<DynamicTypeSize>.Content(v13, (uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    uint64_t v25 = specialized >> prefix<A>(_:)((uint64_t)&v34);
    unint64_t v27 = v26;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v34, &demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v16, v22, "[SystemAperture] Set overriddenSystemApertureContent to: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v24, -1, -1);
    unsigned __int8 v19 = v23;
    goto LABEL_10;
  }
  if (one-time initialization token for banners != -1) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.banners);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl(&dword_1C2F90000, v16, v17, "[SystemAperture] Not setting overriddenSystemApertureContent since it is already set", v18, 2u);
    unsigned __int8 v19 = v18;
LABEL_10:
    MEMORY[0x1C87760E0](v19, -1, -1);
  }
LABEL_12:

  uint64_t v28 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent;
  *((unsigned char *)a4
  + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent) = 1;
  uint64_t v29 = *(uint64_t (**)(void *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *a4) + 0x2D8);
  id v30 = a1;
  uint64_t result = v29(a1, &protocol witness table for ConversationHUDViewController);
  *((unsigned char *)a4 + v28) = 0;
  return result;
}

char *specialized SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(void *a1, char *a2, uint64_t a3, uint64_t a4, int a5, void *a6, uint64_t a7, char *a8, unsigned __int8 a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, unsigned __int8 a15, char *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v141 = a8;
  uint64_t v130 = a7;
  id v129 = a6;
  LODWORD(v140) = a5;
  uint64_t v143 = a4;
  uint64_t v145 = a3;
  unint64_t v128 = a2;
  uint64_t v144 = a14;
  LODWORD(v142) = a15;
  LODWORD(v131) = a9;
  id v135 = a10;
  uint64_t v137 = a13;
  id v138 = a12;
  uint64_t v136 = a18;
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Filter<CurrentValueSubject<Bool, Never>>);
  uint64_t v134 = *(void **)(v146 - 8);
  MEMORY[0x1F4188790](v146);
  uint64_t v133 = (void (**)(char *, uint64_t))((char *)v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_unknownObjectWeakInit();
  uint64_t v20 = (uint64_t)&a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notice];
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(void *)(v20 + 32) = 0;
  uint64_t v21 = &a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_captureGroupName];
  *(void *)uint64_t v21 = 0xD00000000000001ALL;
  *((void *)v21 + 1) = 0x80000001C37ABFF0;
  *(void *)&a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___captureOnlyBackdropView] = 0;
  *(void *)&a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_shadowView] = 0;
  uint64_t v22 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationTaskSubject;
  uint64_t v151 = 0;
  uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<DispatchWorkItem?, Never>);
  swift_allocObject();
  unint64_t v23 = a16;
  *(void *)&a16[v22] = CurrentValueSubject.init(_:)();
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationCancellable] = 0;
  uint64_t v24 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent];
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((_OWORD *)v24 + 2) = 0u;
  v24[48] = -1;
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent] = 0;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager] = 0;
  uint64_t v25 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_conversationControlsViewController];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_expandedForMenuPresentation] = 0;
  unint64_t v26 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requesterIdentifier];
  *(void *)unint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  unint64_t v27 = (void **)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_layoutDescription];
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_layoutDescription] = 0;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_panGestureProxy] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion] = 0;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion] = 0;
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu] = 0;
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_forceSuppressSystemApertureOverAssociatedScene] = 0;
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isShowingSystemApertureOverAssociatedScene] = 0;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_activeLayoutMode] = 0;
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_canRequestAlertingAssertion] = 0;
  uint64_t v28 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode];
  *(void *)uint64_t v28 = 0;
  v28[8] = 1;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_contentRole] = 2;
  uint64_t v29 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_leadingViewContainer;
  id v30 = (objc_class *)type metadata accessor for SystemApertureContainerView();
  *(void *)&v23[v29] = objc_msgSend(objc_allocWithZone(v30), sel_init);
  uint64_t v31 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_trailingViewContainer;
  *(void *)&v23[v31] = objc_msgSend(objc_allocWithZone(v30), sel_init);
  uint64_t v32 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_minimalViewContainer;
  *(void *)&v23[v32] = objc_msgSend(objc_allocWithZone(v30), sel_init);
  uint64_t v33 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_detachedMinimalViewContainer;
  *(void *)&v23[v33] = objc_msgSend(objc_allocWithZone(v30), sel_init);
  uint64_t v34 = (void *)*MEMORY[0x1E4FA7EF8];
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_elementIdentifier] = *MEMORY[0x1E4FA7EF8];
  uint64_t v35 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_keyColor;
  id v36 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v37 = v34;
  *(void *)&v23[v35] = objc_msgSend(v36, sel_initWithRed_green_blue_alpha_, 0.192, 0.82, 0.345, 1.0);
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsManager] = a1;
  id v38 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x288);
  uint64_t v139 = a1;
  uint64_t v39 = v38();
  os_log_type_t v40 = (uint64_t *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
  *os_log_type_t v40 = v39;
  v40[1] = v41;
  uint64_t v42 = (uint64_t)v128;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_sizeClass] = v128;
  uint64_t v43 = v145;
  outlined init with copy of ConversationControlsType(v145, (uint64_t)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsType]);
  ConversationControlsType.associatedNotice.getter((uint64_t)&v151);
  swift_beginAccess();
  outlined assign with take of Notice?((uint64_t)&v151, v20);
  swift_endAccess();
  unint64_t v44 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_defaults];
  uint64_t v45 = v136;
  *(void *)unint64_t v44 = a11;
  *((void *)v44 + 1) = v45;
  id v46 = v138;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_features] = v138;
  uint64_t v47 = v137;
  *(void *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notificationCenter] = v137;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation] = v140;
  unint64_t v149 = 0;
  unint64_t v150 = 0xE000000000000000;
  uint64_t v140 = a11;
  swift_unknownObjectRetain();
  id v138 = v46;
  id v48 = v47;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v149 = 0xD000000000000021;
  unint64_t v150 = 0x80000001C37AC880;
  v49._countAndFlagsBits = ConversationControlsSizeClass.description.getter(v42);
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 46;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  uint64_t v51 = *v40;
  uint64_t v52 = (void *)v40[1];
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = v51;
  v53._object = v52;
  String.append(_:)(v53);
  unint64_t v54 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  unint64_t v55 = v150;
  unint64_t v56 = (unint64_t *)&v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requestIdentifier];
  *unint64_t v56 = v149;
  v56[1] = v55;
  uint64_t v57 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_activityUUID];
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v58 - 8);
  uint64_t v59 = *(void (**)(char *, uint64_t))(v136 + 16);
  uint64_t v137 = (void *)v58;
  v59(v57, v144);
  swift_beginAccess();
  uint64_t v60 = v130;
  *(void *)unint64_t v26 = v129;
  *((void *)v26 + 1) = v60;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  os_log_type_t v61 = *v27;
  id v62 = v135;
  *unint64_t v27 = v135;
  id v135 = v62;

  uint64_t v63 = &v23[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_destination];
  *(void *)uint64_t v63 = v141;
  v63[8] = v131 & 1;

  uint64_t v64 = (objc_class *)type metadata accessor for SystemBannerHostViewController();
  v148.receiver = v23;
  v148.super_class = v64;
  uint64_t v65 = objc_msgSendSuper2(&v148, sel_initWithNibName_bundle_, 0, 0);
  id v66 = *(void (**)(uint64_t, void, uint64_t, void))((*v54 & *v65) + 0x418);
  uint64_t v67 = v65;
  v66(v43, 0, 1, v142);
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v67, sel_callStatusChanged_, *MEMORY[0x1E4FADD90], 0);
  uint64_t v68 = one-time initialization token for contextMenuWillPresent;
  char v69 = v67;
  if (v68 != -1) {
    swift_once();
  }
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v69, sel_contextMenuWillPresent_, static NSNotificationName.contextMenuWillPresent, 0);

  uint64_t v70 = one-time initialization token for contextMenuDidDismiss;
  CGRect v71 = v69;
  if (v70 != -1) {
    swift_once();
  }
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v71, sel_contextMenuDidDismiss_, static NSNotificationName.contextMenuDidDismiss, 0);

  objc_msgSend(v48, sel_addObserver_selector_name_object_, v71, sel_callDisplayContextChanged_, *MEMORY[0x1E4FADDE8], 0);
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v71, sel_handleSceneStateChangeNotification_, *MEMORY[0x1E4FB2E90], 0);
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v71, sel_handleSceneStateChangeNotification_, *MEMORY[0x1E4FB2E80], 0);
  uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>);
  id v131 = v116;
  uint64_t v130 = *(void *)(v142 - 8);
  MEMORY[0x1F4188790](v142);
  uint64_t v141 = (char *)v116 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>);
  uint64_t v127 = v116;
  uint64_t v126 = *((void *)v125 - 1);
  __n128 v73 = MEMORY[0x1F4188790](v125);
  uint64_t v124 = (char *)v116 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v75 = *(uint64_t (**)(__n128))((*v54 & *v71) + 0x2B8);
  unint64_t v128 = (char *)v71;
  CGRect v76 = *(void **)(v75(v73)
                 + OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_invalidationInProgressSubject);
  swift_retain();
  swift_release();
  id v147 = v76;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  uint64_t v77 = v133;
  Publisher.filter(_:)();
  swift_release();
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>);
  uint64_t v79 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  id v129 = v48;
  uint64_t v81 = (char *)v116 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v147 = *(id *)((char *)v71 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationTaskSubject);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<DispatchWorkItem?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<DispatchWorkItem?, Never>);
  swift_retain();
  Publisher.filter(_:)();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Filter<CurrentValueSubject<Bool, Never>> and conformance Publishers.Filter<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Filter<CurrentValueSubject<Bool, Never>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>> and conformance Publishers.Filter<A>, &demangling cache variable for type metadata for Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>);
  uint64_t v82 = v146;
  Publisher.zip<A>(_:)();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v78);
  ((void (*)(void, uint64_t))v134[1])(v77, v82);
  uint64_t v83 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  uint64_t v134 = v116;
  uint64_t v146 = *(void *)(v83 - 8);
  uint64_t v118 = *(void *)(v146 + 64);
  MEMORY[0x1F4188790](v83);
  uint64_t v119 = (char *)((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = (char *)((char *)v116 - v119);
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)();
  id v123 = self;
  id v147 = objc_msgSend(v123, sel_mainRunLoop);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v121 = *(void *)(*(void *)(v86 - 8) + 64);
  MEMORY[0x1F4188790](v86 - 8);
  unint64_t v122 = (v87 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v88 = (char *)v116 - v122;
  uint64_t v120 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v88, 1, 1, v120);
  v116[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>> and conformance Publishers.Zip<A, B>, &demangling cache variable for type metadata for Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>);
  v116[4] = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  id v89 = v125;
  id v90 = v124;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  uint64_t v91 = *(void (**)(char *, uint64_t))(v146 + 8);
  v146 += 8;
  char v117 = v91;
  v91(v85, v83);
  (*(void (**)(char *, char *))(v126 + 8))(v90, v89);
  uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>, OS_dispatch_queue>);
  uint64_t v134 = v116;
  uint64_t v133 = *(void (***)(char *, uint64_t))(v132 - 8);
  MEMORY[0x1F4188790](v132);
  uint64_t v125 = (char *)v116 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>);
  uint64_t v127 = v116;
  uint64_t v126 = *((void *)v124 - 1);
  MEMORY[0x1F4188790](v124);
  uint64_t v94 = (char *)v116 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>);
  v116[2] = v116;
  uint64_t v96 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v98 = (char *)v116 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchWorkItem?);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop> and conformance Publishers.Debounce<A, B>, &demangling cache variable for type metadata for Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>);
  uint64_t v99 = Publisher.map<A>(_:)();
  v116[1] = v116;
  MEMORY[0x1F4188790](v99);
  uint64_t v100 = (char *)((char *)v116 - v119);
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)();
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerTimeType.Stride?);
  uint64_t v119 = (char *)v116;
  MEMORY[0x1F4188790](v101 - 8);
  char v103 = (char *)v116 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = v83;
  __swift_storeEnumTagSinglePayload((uint64_t)v103, 1, 1, v83);
  id v147 = objc_msgSend(v123, sel_mainRunLoop);
  MEMORY[0x1F4188790](v147);
  unint64_t v105 = (char *)v116 - v122;
  __swift_storeEnumTagSinglePayload((uint64_t)v116 - v122, 1, 1, v120);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>);
  Publisher.delay<A>(for:tolerance:scheduler:options:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v103, &demangling cache variable for type metadata for NSRunLoop.SchedulerTimeType.Stride?);
  v117(v100, v104);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v95);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v147 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v106 - 8);
  uint64_t v108 = (char *)v116 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v108, 1, 1, v109);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop> and conformance Publishers.Delay<A, B>, &demangling cache variable for type metadata for Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  int v110 = v125;
  int v111 = v124;
  Publisher.receive<A>(on:options:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, char *))(v126 + 8))(v94, v111);
  swift_allocObject();
  int v112 = v128;
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>, OS_dispatch_queue>);
  uint64_t v113 = v132;
  uint64_t v114 = Publisher<>.sink(receiveValue:)();

  swift_release();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, void *))(v136 + 8))(v144, v137);
  outlined destroy of ConversationControlsType(v145);
  v133[1](v110, v113);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v141, v142);
  *(void *)&v112[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationCancellable] = v114;
  swift_release();
  return v112;
}

uint64_t type metadata accessor for SystemBannerHostViewController()
{
  uint64_t result = type metadata singleton initialization cache for SystemBannerHostViewController;
  if (!type metadata singleton initialization cache for SystemBannerHostViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C33D216C()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in SystemBannerHostViewController.viewWillTransition(to:with:)(int a1)
{
  closure #2 in SystemBannerHostViewController.viewWillTransition(to:with:)(a1, *(id *)(v1 + 16));
}

uint64_t sub_1C33D21AC()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  return swift_deallocObject();
}

uint64_t outlined assign with take of ConversationControlsType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of Notice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C33D2310()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type SystemBannerHostError and conformance SystemBannerHostError()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemBannerHostError and conformance SystemBannerHostError;
  if (!lazy protocol witness table cache variable for type SystemBannerHostError and conformance SystemBannerHostError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemBannerHostError and conformance SystemBannerHostError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemBannerHostError and conformance SystemBannerHostError;
  if (!lazy protocol witness table cache variable for type SystemBannerHostError and conformance SystemBannerHostError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemBannerHostError and conformance SystemBannerHostError);
  }
  return result;
}

uint64_t sub_1C33D236C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C33D23A4()
{
  type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_19_4();
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = (id *)(v1 + 40);
  switch(*(unsigned char *)(v1 + 80))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v5 = v1 + v3;
  switch(*(unsigned char *)(v1 + v3 + 40))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(v1 + v3);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v6 = *(void **)(v5 + 56);
  if (v6)
  {
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for AttributedString();
  if (!OUTLINED_FUNCTION_63_1(v7))
  {
    OUTLINED_FUNCTION_120_2();
    v8();
  }
  uint64_t v9 = (id *)(v5 + *(int *)(v0 + 40));
  if (*v9)
  {
  }
  OUTLINED_FUNCTION_133_2();
  if (!(!v13 & v12)) {
    outlined consume of ConversationControlsRecipe.Actions(*v11, v11[1], v11[2], v11[3], v11[4], v10);
  }
  OUTLINED_FUNCTION_130_2();
  if (!v13) {
    outlined consume of PreCallControlsContext(*v14);
  }
  OUTLINED_FUNCTION_127_3();
  if (!v13)
  {
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for ConversationControlsRecipe() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[11];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(v2, v3, v4, v0 + 5, v5, v6);
}

uint64_t outlined init with copy of ControlsHUDUpdate(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with copy of ConversationControlsType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of ConversationControlsRecipe(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier;
  if (!lazy protocol witness table cache variable for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier)
  {
    type metadata accessor for STBackgroundActivityIdentifier(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier);
  }
  return result;
}

uint64_t outlined release of SystemApertureLayoutMargins(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in SystemBannerHostViewController.viewWillLayoutSubviews(with:)(uint64_t a1)
{
  return closure #1 in SystemBannerHostViewController.viewWillLayoutSubviews(with:)(a1, *(void *)(v1 + 16));
}

void partial apply for closure #2 in SystemBannerHostViewController.viewWillLayoutSubviews(with:)(void *a1)
{
  closure #2 in SystemBannerHostViewController.viewWillLayoutSubviews(with:)(a1, v1);
}

unint64_t lazy protocol witness table accessor for type SystemBannerDismissalReason and conformance SystemBannerDismissalReason()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemBannerDismissalReason and conformance SystemBannerDismissalReason;
  if (!lazy protocol witness table cache variable for type SystemBannerDismissalReason and conformance SystemBannerDismissalReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemBannerDismissalReason and conformance SystemBannerDismissalReason);
  }
  return result;
}

uint64_t sub_1C33D28CC(uint64_t *a1)
{
  return SystemBannerHostViewController.sizeClass.setter(*a1);
}

unsigned char *storeEnumTagSinglePayload for SystemBannerHostError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C33D2A10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for SystemBannerHostError()
{
}

void type metadata accessor for SystemBannerDismissalReason()
{
}

uint64_t dispatch thunk of SceneStateDescribing.hasPresentedFullScreenCallUI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SceneStateDescribing.isPresentingFullScreenCallUI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t ObjC metadata update function for SystemBannerHostViewController()
{
  return type metadata accessor for SystemBannerHostViewController();
}

uint64_t type metadata completion function for SystemBannerHostViewController()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for SystemBannerHostViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemBannerHostViewController);
}

uint64_t dispatch thunk of SystemBannerHostViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.controlsManager.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.controlsManager.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.controlsManager.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.callCenter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.sizeClass.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.controlsType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.notice.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.needsCustomTimerForEphemeralSystemApertureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.systemApertureAlertingManager.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.systemApertureAlertingManager.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.systemApertureAlertingManager.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.conversationControlsViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.conversationControlsViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.conversationControlsViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.hasRootViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.requesterIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.requesterIdentifier.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.requesterIdentifier.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.layoutDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.layoutDescription.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.layoutDescription.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentableContext.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentableContext.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentableContext.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.hasPresentedFullScreenCallUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.isPresentingFullScreenCallUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.isMicIndicatorVisible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.__allocating_init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 944))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updatePreferredContentSize()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateControlsPresentationSize(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateControlsCornerRadius()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateConversationControlsViewController(type:sizeClass:fromActivityManager:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x418))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 1056))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateOverriddenSystemApertureTypeIfNeeded(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.requestPreferredLayoutMode()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateSystemApertureElementIsPresentingMenu(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.forceSuppressSystemApertureOverAssociatedScene.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.shouldShowSystemApertureOverAssociatedScene.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.handleLockScreenStatusChanged()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.invalidateAlertingAssertonIfFullScreen()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.dismissBanner(for:animated:completion:)()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 1176))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.systemApertureTouchInsetsUpdated(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.deepLinkToFullScreenCallUI()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.deepLinkToFullScreenCallDetailsView()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.deepLinkToFullScreenPTTCallDetailsView()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.showDefaultSystemHUD()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.controlsPreferredContentSizeChanged(presentingMenu:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.menuPresented.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.needsMenuContainerView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.eligibleForDismissal.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.isPresentingStickyNotice.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.needsBackgroundBlur.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.captureGroup.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.userInteractionWillBeginForBanner(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x500))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.userInteractionDidEndForBanner(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x508))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentableWillAppear(asBanner:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x510))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentableDidAppear(asBanner:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x518))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentableDidDisappear(asBanner:withReason:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x520))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.viewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x528))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.isTouchOutsideDismissalEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.isDraggingDismissalEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.isDraggingInteractionEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x540))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.systemApertureElementViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x548))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.activeLayoutMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x550))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.activeLayoutMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x558))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.activeLayoutMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x560))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.canRequestAlertingAssertion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x568))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.canRequestAlertingAssertion.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x570))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.canRequestAlertingAssertion.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x578))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.preferredLayoutMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x598))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.maximumLayoutMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5A0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.leadingView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.trailingView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5B0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.minimalView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5B8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.detachedMinimalView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.associatedAppBundleIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5C8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.backgroundActivitiesToSuppress.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5D0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.presentationBehaviors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.updateSystemAperturePreferredContentSize()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5E0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.handleLayoutModeTransition(from:to:isUserInitiated:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5E8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.positionSystemApertureAccessoryView(_:aligningWithEdge:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5F0))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.positionSystemApertureAccessoryViews()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x5F8))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.viewWillLayoutSubviews(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x600))();
}

uint64_t dispatch thunk of SystemBannerHostViewController.performUpdateForRecipeTransition(from:to:coordinatedAnimations:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x618))();
}

void destroy for SystemBannerHostViewController.OverriddenSystemApertureContent(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 48))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(a1 + 8);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for SystemBannerHostViewController.OverriddenSystemApertureContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  unsigned int v4 = a2 + 1;
  *(void *)a1 = v5;
  unsigned int v6 = (_OWORD *)(a1 + 8);
  switch(*((unsigned char *)a2 + 48))
  {
    case 0:
      long long v7 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(_OWORD *, uint64_t))(v7 - 8))(v6, (uint64_t)v4);
      *(unsigned char *)(a1 + 48) = 0;
      break;
    case 1:
      uint64_t v8 = a2[2];
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = v8;
      char v9 = 1;
      goto LABEL_6;
    case 2:
      uint64_t v10 = (void *)*v4;
      *(void *)(a1 + 8) = *v4;
      *(unsigned char *)(a1 + 48) = 2;
      id v11 = v10;
      break;
    case 3:
      uint64_t v12 = a2[2];
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = v12;
      char v9 = 3;
LABEL_6:
      *(unsigned char *)(a1 + 48) = v9;
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
      *(unsigned char *)(a1 + 48) = 5;
      swift_unknownObjectRetain();
      break;
    default:
      long long v13 = *((_OWORD *)v4 + 1);
      *unsigned int v6 = *(_OWORD *)v4;
      v6[1] = v13;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SystemBannerHostViewController.OverriddenSystemApertureContent(uint64_t a1, uint64_t a2)
{
  int v3 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unsigned int v4 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of ConversationControlsType(a1 + 8);
    switch(*(unsigned char *)(a2 + 48))
    {
      case 0:
        uint64_t v6 = *(void *)(a2 + 32);
        *(void *)(a1 + 32) = v6;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        (**(void (***)(_OWORD *, long long *))(v6 - 8))(v4, v3);
        *(unsigned char *)(a1 + 48) = 0;
        break;
      case 1:
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        char v7 = 1;
        goto LABEL_7;
      case 2:
        uint64_t v8 = *(void **)v3;
        *(void *)(a1 + 8) = *(void *)v3;
        *(unsigned char *)(a1 + 48) = 2;
        id v9 = v8;
        break;
      case 3:
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        char v7 = 3;
LABEL_7:
        *(unsigned char *)(a1 + 48) = v7;
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(_OWORD *)(a1 + 8) = *v3;
        *(unsigned char *)(a1 + 48) = 5;
        swift_unknownObjectRetain();
        break;
      default:
        long long v10 = *v3;
        long long v11 = v3[1];
        *(_OWORD *)((char *)v4 + 25) = *(long long *)((char *)v3 + 25);
        *unsigned int v4 = v10;
        v4[1] = v11;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for SystemBannerHostViewController.OverriddenSystemApertureContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2)
  {
    outlined destroy of ConversationControlsType(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemBannerHostViewController.OverriddenSystemApertureContent(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 49))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemBannerHostViewController.OverriddenSystemApertureContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

void type metadata accessor for SystemBannerHostViewController.OverriddenSystemApertureContent()
{
}

uint64_t outlined assign with copy of SystemBannerHostViewController.OverriddenSystemApertureContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemBannerHostViewController.OverriddenSystemApertureContent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C33D4540()
{
  type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_19_4();
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = v1 + v3;
  switch(*(unsigned char *)(v1 + v3 + 40))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(v1 + v3);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  char v7 = *(void **)(v6 + 56);
  if (v7)
  {
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for AttributedString();
  if (!OUTLINED_FUNCTION_63_1(v8))
  {
    OUTLINED_FUNCTION_120_2();
    v9();
  }
  long long v10 = (id *)(v6 + *(int *)(v0 + 40));
  if (*v10)
  {
  }
  OUTLINED_FUNCTION_133_2();
  if (!(!v14 & v13)) {
    outlined consume of ConversationControlsRecipe.Actions(*v12, v12[1], v12[2], v12[3], v12[4], v11);
  }
  OUTLINED_FUNCTION_130_2();
  if (!v14) {
    outlined consume of PreCallControlsContext(*v15);
  }
  OUTLINED_FUNCTION_127_3();
  if (!v14)
  {
  }
  OUTLINED_FUNCTION_23_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for ConversationControlsRecipe() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in SystemBannerHostViewController.updateContent(for:using:controllingWith:fromActivityManager:)(v0 + v2, v3);
}

uint64_t partial apply for closure #4 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(uint64_t *a1)
{
  return closure #4 in SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(a1, v1);
}

uint64_t sub_1C33D47BC()
{
  swift_release();
  return swift_deallocObject();
}

id partial apply for closure #1 in SystemBannerHostViewController.conversationControlsViewController.didset(uint64_t a1)
{
  return closure #1 in SystemBannerHostViewController.conversationControlsViewController.didset(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void OUTLINED_FUNCTION_80_4(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

void OUTLINED_FUNCTION_81_7(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0x20u);
}

uint64_t OUTLINED_FUNCTION_82_4(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return outlined init with copy of ConversationControlsType(v2, v3 - 240);
}

uint64_t OUTLINED_FUNCTION_86_5(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

id OUTLINED_FUNCTION_93_1(void *a1)
{
  uint64_t v3 = *(const char **)(v1 + 1648);
  return objc_msgSend(a1, v3, 0.0);
}

uint64_t OUTLINED_FUNCTION_95_4()
{
  return outlined init with copy of ConversationControlsType(v1 - 240, v0 + 312);
}

uint64_t OUTLINED_FUNCTION_96_4()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_105_4()
{
  *(_WORD *)(v0 + 12) = 2080;
}

unint64_t OUTLINED_FUNCTION_106_3()
{
  return 0xD000000000000017;
}

uint64_t OUTLINED_FUNCTION_109_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_116_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_129_1()
{
  return outlined init with copy of ConversationControlsType(v0, v1 - 240);
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_139_3(uint64_t a1)
{
  *(void *)(v1 + 312) = a1;
  return v1 + 312;
}

CNKCoreAnalyticsReporter __swiftcall CNKCoreAnalyticsReporter.init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CNKCoreAnalyticsReporter)objc_msgSend(v0, sel_init);
}

uint64_t CNKCoreAnalyticsReporter.reportAVLessLeaveConfirmation(presentedAt:action:)(uint64_t a1, char a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  *(void *)(inited + 32) = 0x6E6F697461727564;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Date.now.getter();
  Date.timeIntervalSince(_:)();
  double v9 = v8;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithDouble_, v9);
  *(void *)(inited + 56) = 0x6E6F69746361;
  *(void *)(inited + 64) = 0xE600000000000000;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v10 = 0x736553657661656CLL;
    }
    else {
      uint64_t v10 = 0x6E6F697463416F6ELL;
    }
    if (a2 == 1) {
      unint64_t v11 = 0xEC0000006E6F6973;
    }
    else {
      unint64_t v11 = 0xE800000000000000;
    }
  }
  else
  {
    unint64_t v11 = 0xEF6E6F6973736553;
    uint64_t v10 = 0x65756E69746E6F63;
  }
  uint64_t v12 = MEMORY[0x1C87730B0](v10, v11);
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v12;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_47();
  CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(0xD00000000000002BLL, v14, v13);
  return swift_bridgeObjectRelease();
}

uint64_t CNKCoreAnalyticsReporter.reportStartedNoticeLaunch(_:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_activity);
  id v2 = objc_msgSend(v1, sel_metadata);

  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_context);

    id v4 = objc_msgSend(v3, sel_analyticsIdentifier);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v7 = v6;
  }
  else
  {
    char v7 = (void *)0xE700000000000000;
    uint64_t v5 = 0x6E776F6E6B6E55;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  strcpy((char *)(inited + 32), "activity_type");
  *(_WORD *)(inited + 46) = -4864;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  *(void *)(inited + 48) = NSString.__allocating_init(string:)(v9);
  *(void *)(inited + 56) = 0x745F6E6F69746361;
  *(void *)(inited + 64) = 0xEB00000000657079;
  OUTLINED_FUNCTION_47();
  v10._countAndFlagsBits = 0xD000000000000024;
  *(void *)(inited + 72) = NSString.__allocating_init(string:)(v10);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_47();
  CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(v12, v13, v11);
  return swift_bridgeObjectRelease();
}

uint64_t CNKCoreAnalyticsReporterIncompatibilityReason.stringValue.getter(uint64_t a1)
{
  unint64_t v1 = 0x6163207472617453;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      return 0x706F657020646441;
    case 2:
    case 6:
      OUTLINED_FUNCTION_47();
      return 0xD000000000000014;
    case 3:
      unint64_t v1 = 0xD000000000000022;
      goto LABEL_11;
    case 4:
      unint64_t v1 = 0xD000000000000019;
      goto LABEL_11;
    case 5:
      unint64_t v1 = 0xD000000000000016;
LABEL_11:
      OUTLINED_FUNCTION_47();
      break;
    default:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      unint64_t v1 = 0x6E776F6E6B6E55;
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Log.default);
      id v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_1C2F90000, v3, v4, "Unknown enum case", v5, 2u);
        MEMORY[0x1C87760E0](v5, -1, -1);
      }

      break;
  }
  return v1;
}

ConversationKit::AVLessLeaveConfirmationAction_optional __swiftcall AVLessLeaveConfirmationAction.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AVLessLeaveConfirmationAction.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (ConversationKit::AVLessLeaveConfirmationAction_optional)3;
  }
  else {
    return (ConversationKit::AVLessLeaveConfirmationAction_optional)v3;
  }
}

uint64_t AVLessLeaveConfirmationAction.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x65756E69746E6F63;
  }
  if (a1 == 1) {
    return 0x736553657661656CLL;
  }
  return 0x6E6F697463416F6ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AVLessLeaveConfirmationAction(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AVLessLeaveConfirmationAction()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AVLessLeaveConfirmationAction()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AVLessLeaveConfirmationAction()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::AVLessLeaveConfirmationAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AVLessLeaveConfirmationAction@<W0>(Swift::String *a1@<X0>, ConversationKit::AVLessLeaveConfirmationAction_optional *a2@<X8>)
{
  result.value = AVLessLeaveConfirmationAction.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AVLessLeaveConfirmationAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AVLessLeaveConfirmationAction.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall CNKCoreAnalyticsReporter.reportCanceledSOSCountdown(toCall:)(Swift::Double toCall)
{
}

uint64_t CNKCoreAnalyticsReporter.logSOSCancelCountdownEvent(type:duration:)(uint64_t a1, void *a2, double a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  *(void *)(inited + 48) = NSString.__allocating_init(string:)(v7);
  *(void *)(inited + 56) = 0xD000000000000012;
  *(void *)(inited + 64) = 0x80000001C37ACAD0;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithDouble_, a3 * 1000.0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
  CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(0xD00000000000002ALL, 0x80000001C37ACAA0, v8);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CNKCoreAnalyticsReporter.reportCanceledSOSCountdown(toNotify:)(Swift::Double toNotify)
{
}

uint64_t CNKCoreAnalyticsReporter.report(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769620;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x80000001C37ACA20;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithInteger_, a1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_47();
  CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(v4, v5, v3);
  return swift_bridgeObjectRelease();
}

void CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C37696D0;
  *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
  *(void *)(v6 + 104) = lazy protocol witness table accessor for type [String : NSObject] and conformance [A : B]();
  *(void *)(v6 + 72) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  Swift::String v7 = (void *)MEMORY[0x1C87730B0](a1, a2);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  void v10[4] = partial apply for closure #1 in CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  void v10[3] = &block_descriptor_65;
  Swift::String v9 = _Block_copy(v10);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v9);
}

uint64_t CNKCoreAnalyticsReporter.reportIncompatibilityTypeNone(recipientCount:reason:)(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_1_117(a1, a2, 0x65766974614ELL);
}

uint64_t CNKCoreAnalyticsReporter.logIncompatibilityEvent(type:reason:recipientCount:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C376BA10;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  *(void *)(inited + 48) = NSString.__allocating_init(string:)(v11);
  *(void *)(inited + 56) = 0x6E6F73616572;
  *(void *)(inited + 64) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  *(void *)(inited + 72) = NSString.__allocating_init(string:)(v12);
  strcpy((char *)(inited + 80), "recipientCount");
  *(unsigned char *)(inited + 95) = -18;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithInteger_, a5);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)(0xD000000000000022, 0x80000001C37ACA70, v13);
  return swift_bridgeObjectRelease();
}

uint64_t CNKCoreAnalyticsReporter.reportIncompatibilityTypeLegacy(recipientCount:reason:)(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_1_117(a1, a2, 0x79636167654CLL);
}

uint64_t CNKCoreAnalyticsReporter.reportIncompatibilityTypeWeb(recipientCount:reason:)(uint64_t a1, uint64_t a2)
{
  return CNKCoreAnalyticsReporter.reportIncompatibilityTypeNone(recipientCount:reason:)(a1, a2, 6448471, (void *)0xE300000000000000);
}

uint64_t CNKCoreAnalyticsReporter.reportIncompatibilityTypeInvalid(recipientCount:reason:)(uint64_t a1, uint64_t a2)
{
  return CNKCoreAnalyticsReporter.reportIncompatibilityTypeNone(recipientCount:reason:)(a1, a2, 0x64696C61766E49, (void *)0xE700000000000000);
}

uint64_t CNKCoreAnalyticsReporter.reportIncompatibilityTypeNone(recipientCount:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = CNKCoreAnalyticsReporterIncompatibilityReason.stringValue.getter(a2);
  CNKCoreAnalyticsReporter.logIncompatibilityEvent(type:reason:recipientCount:)(a3, a4, v7, v8, a1);
  return swift_bridgeObjectRelease();
}

id CNKCoreAnalyticsReporter.init()()
{
  v1.super_class = (Class)CNKCoreAnalyticsReporter;
  return objc_msgSendSuper2(&v1, sel_init);
}

NSString __swiftcall NSString.__allocating_init(string:)(Swift::String string)
{
  object = string._object;
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithString_, v4);

  return v5;
}

unint64_t lazy protocol witness table accessor for type AVLessLeaveConfirmationAction and conformance AVLessLeaveConfirmationAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AVLessLeaveConfirmationAction and conformance AVLessLeaveConfirmationAction;
  if (!lazy protocol witness table cache variable for type AVLessLeaveConfirmationAction and conformance AVLessLeaveConfirmationAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVLessLeaveConfirmationAction and conformance AVLessLeaveConfirmationAction);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AVLessLeaveConfirmationAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C33D5D54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AVLessLeaveConfirmationAction()
{
  return &type metadata for AVLessLeaveConfirmationAction;
}

uint64_t type metadata accessor for CNKCoreAnalyticsReporter(uint64_t a1)
{
  return type metadata accessor for NSObject(a1, &lazy cache variable for type metadata for CNKCoreAnalyticsReporter);
}

uint64_t sub_1C33D5DE8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CNKCoreAnalyticsReporter.logEvent(viewName:coreAnalyticsDictionary:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t CircularBuffer.init(count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v3);
  __swift_storeEnumTagSinglePayload((uint64_t)&v6 - v4, 1, 1, a2);
  return Array.init(repeating:count:)();
}

void CircularBuffer.push(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = MEMORY[0x1F4188790](v5);
  Swift::String v9 = (char *)&v17 - v8;
  uint64_t v10 = v2[1];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v13 = v2[2];
  if (!v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v12 != 0x8000000000000000 || v13 != -1)
  {
    Swift::Int v15 = v12 % v13;
    v2[1] = v12 % v13;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(v4 - 8) + 16))(v9, a1, v4, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v4);
    type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    uint64_t v16 = *v2;
    Array._checkSubscript_mutating(_:)(v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 40))(v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, v9, v5);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t CircularBuffer.count.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CircularBuffer.read(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = a3 + result;
  if (__OFADD__(a3, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v8 = __OFADD__(v7, a4);
  uint64_t v9 = v7 + a4;
  if (v8)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (a4 == -1 && v9 == 0x8000000000000000) {
    goto LABEL_19;
  }
  uint64_t v12 = v9 % a4;
  if (v9 % a4 < 1 || (uint64_t v14 = type metadata accessor for Optional(), v12 >= MEMORY[0x1C8773490](a2, v14)))
  {
    return __swift_storeEnumTagSinglePayload(a6, 1, 1, a5);
  }
  else
  {
    return Array.subscript.getter();
  }
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a1) {
    goto LABEL_7;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for CircularBuffer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CircularBuffer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for CircularBuffer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t type metadata accessor for CircularBuffer()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall MultiwayViewController.tipKitStartObservation()()
{
}

uint64_t sub_1C33D62E8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in MultiwayViewController.tipKitStartObservation()(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for FaceInFrameTip();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  type metadata accessor for TPTipsHelper();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[9] = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MultiwayViewController.tipKitStartObservation();
  return MEMORY[0x1F41638B0]();
}

uint64_t closure #1 in MultiwayViewController.tipKitStartObservation()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 80) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void **)(v0 + 80);
  swift_release();
  dispatch thunk of TPTipsHelper.setup()();

  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_6_91();
  uint64_t v2 = MEMORY[0x1C8776240](v0);
  v1[12] = v2;
  if (v2)
  {
    FaceInFrameTip.init()();
    uint64_t v3 = (void *)swift_task_alloc();
    v1[13] = v3;
    *uint64_t v3 = v1;
    v3[1] = closure #1 in MultiwayViewController.tipKitStartObservation();
    uint64_t v4 = v1[8];
    return specialized MultiwayViewController.observeTip<A>(_:)(v4);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v6();
  }
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[6];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();

  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v1();
}

uint64_t partial apply for closure #1 in MultiwayViewController.tipKitStartObservation()()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = partial apply for closure #1 in CallRecordingService.startRecording(call:completion:);
  return closure #1 in MultiwayViewController.tipKitStartObservation()(v0);
}

uint64_t specialized MultiwayViewController.observeTip<A>(_:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FaceInFrameTip();
  v2[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[16] = v6;
  v2[17] = *(void *)(v6 + 64);
  v2[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[19] = swift_task_alloc();
  v2[20] = type metadata accessor for MainActor();
  v2[21] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[22] = v8;
  v2[23] = v7;
  return MEMORY[0x1F4188298](specialized MultiwayViewController.observeTip<A>(_:), v8, v7);
}

uint64_t specialized MultiwayViewController.observeTip<A>(_:)()
{
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[7];
  uint64_t v7 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[24] = v9;
  v0[25] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBCFD8];
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v11, v2, v4);
  *(void *)(v12 + ((v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
  swift_release();
  v0[26] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  type metadata accessor for TPTipsHelper();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[27] = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized MultiwayViewController.observeTip<A>(_:);
  return MEMORY[0x1F41638B0]();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v5 = v4;
  *(void *)(v7 + 224) = v6;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 176);
  return MEMORY[0x1F4188298](specialized MultiwayViewController.observeTip<A>(_:), v9, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v12 = (void *)v0[28];
  unint64_t v11 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[24];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v13 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[7];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, *MEMORY[0x1E4FAD988], v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type FaceInFrameTip and conformance FaceInFrameTip();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v11(boxed_opaque_existential_1, v7, v2);
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v9();
}

Swift::Void __swiftcall MultiwayViewController.tipKitStopObservation()()
{
}

uint64_t MultiwayViewController.tipKitStartObservation()()
{
  return swift_release_n();
}

uint64_t closure #1 in MultiwayViewController.tipKitStopObservation()(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in MultiwayViewController.tipKitStopObservation(), 0, 0);
}

uint64_t closure #1 in MultiwayViewController.tipKitStopObservation()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_6_91();
  uint64_t v2 = MEMORY[0x1C8776240](v0);
  *(void *)(v1 + 72) = v2;
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v1 + 80) = v3;
    *uint64_t v3 = v1;
    v3[1] = closure #1 in MultiwayViewController.tipKitStopObservation();
    return MultiwayViewController.dismissPopover()();
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v5();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v8;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  type metadata accessor for TPTipsHelper();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v6;
  *uint64_t v6 = v4;
  v6[1] = closure #1 in MultiwayViewController.tipKitStopObservation();
  return MEMORY[0x1F41638B0]();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 96) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], *MEMORY[0x1E4FAD988], v0[6]);
  v0[13] = type metadata accessor for MainActor();
  v0[14] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = (void *)v0[12];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  swift_release();
  dispatch thunk of TPTipsHelper.removeEntries(_:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 120) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  type metadata accessor for MultiwayViewController.FaceTimeLinkTipUserInfo();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  static MultiwayViewController.tipUserInfo = (_UNKNOWN *)v0;
  swift_release();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();

  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v1();
}

uint64_t partial apply for closure #1 in MultiwayViewController.tipKitStopObservation()()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = partial apply for closure #1 in CallRecordingService.stopRecording(call:completion:);
  return closure #1 in MultiwayViewController.tipKitStopObservation()(v0);
}

uint64_t MultiwayViewController.dismissPopover()()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = MultiwayViewController.dismissPopover();
  return MultiwayViewController.tipPopoverController.getter();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  void *v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *(void *)(v6 + 40) = v5;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 40);
    objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, 0);
    if (one-time initialization token for tipUserInfo != -1) {
      swift_once();
    }
    uint64_t v3 = static MultiwayViewController.tipUserInfo;
    swift_retain();

    uint64_t v4 = (void *)v3[2];
    v3[2] = 0;
    swift_release();
  }
  OUTLINED_FUNCTION_6();
  return v5();
}

uint64_t specialized closure #1 in MultiwayViewController.observeTip<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[75] = a5;
  v5[74] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  v5[76] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Tips.Status();
  v5[77] = v6;
  v5[78] = *(void *)(v6 - 8);
  v5[79] = swift_task_alloc();
  v5[80] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v5[81] = swift_task_alloc();
  v5[82] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v5[83] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v5[84] = v7;
  v5[85] = *(void *)(v7 - 8);
  v5[86] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v5[87] = v8;
  v5[88] = *(void *)(v8 - 8);
  v5[89] = swift_task_alloc();
  v5[90] = swift_task_alloc();
  v5[91] = type metadata accessor for MainActor();
  v5[92] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[93] = v10;
  v5[94] = v9;
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v10, v9);
}

uint64_t specialized closure #1 in MultiwayViewController.observeTip<A>(_:)()
{
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[84];
  v0[95] = type metadata accessor for FaceInFrameTip();
  v0[96] = lazy protocol witness table accessor for type FaceInFrameTip and conformance FaceInFrameTip();
  Tip.shouldDisplayUpdates.getter();
  MEMORY[0x1C8774690](v3);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.Iterator.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  v0[97] = *(void *)(MEMORY[0x1E4FB2C68] + 8);
  uint64_t v4 = static MainActor.shared.getter();
  v0[98] = v4;
  if (v4)
  {
    swift_getObjectType();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  v0[100] = v7;
  v0[99] = v5;
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v5, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  v0[101] = AsyncMapSequence.Iterator.baseIterator.modify();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status>.Iterator and conformance AsyncStream<A>.Iterator, &demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[102] = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
  uint64_t v2 = v0[76];
  return MEMORY[0x1F4187C80](v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 800);
    uint64_t v8 = *(void *)(v3 + 792);
    uint64_t v9 = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
  }
  else
  {
    (*(void (**)(void))(v3 + 808))();
    uint64_t v7 = *(void *)(v3 + 800);
    uint64_t v8 = *(void *)(v3 + 792);
    uint64_t v9 = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
  }
  return MEMORY[0x1F4188298](v9, v8, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  int *v15;
  uint64_t v16;

  uint64_t v1 = v0[77];
  uint64_t v2 = v0[76];
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of Tips.Status?(v2);
    swift_release();
    uint64_t v3 = v0[94];
    uint64_t v4 = v0[93];
    return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v4, v3);
  }
  else
  {
    uint64_t v5 = v0[90];
    uint64_t v6 = v0[89];
    uint64_t v7 = v0[88];
    uint64_t v8 = v0[87];
    (*(void (**)(void, uint64_t, uint64_t))(v0[78] + 32))(v0[79], v2, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    uint64_t v9 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[103] = v10;
    unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v0[104] = v11;
    v0[105] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v11(v6, v8);
    Swift::Int v15 = (int *)((char *)v9 + *v9);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[106] = v12;
    *uint64_t v12 = v0;
    v12[1] = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
    uint64_t v13 = v0[79];
    return ((uint64_t (*)(void *, uint64_t))v15)(v0 + 112, v13);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 808))();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = v0[79];
  uint64_t v6 = v0[78];
  uint64_t v7 = v0[77];
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_release();
  *(unsigned char *)(v3 + 897) = *(unsigned char *)(v3 + 896);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = v0[100];
  uint64_t v9 = v0[99];
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v9, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 744);
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(void);
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;

  uint64_t v1 = MEMORY[0x1C8776240](*(void *)(v0 + 600) + 16);
  *(void *)(v0 + 856) = v1;
  if (!v1)
  {
    uint64_t v7 = OUTLINED_FUNCTION_8_62();
    v8(v7);
    swift_release();
    goto LABEL_6;
  }
  uint64_t v2 = (void *)v1;
  if (*(unsigned char *)(v0 + 897))
  {
    uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_viewContent;
    swift_beginAccess();
    outlined init with take of MultiwayViewController.ViewContent?(v3, v0 + 16);
    outlined init with take of MultiwayViewController.ViewContent?(v0 + 16, v0 + 232);
    if (getEnumTag for TapInteraction.EventType((uint64_t *)(v0 + 232)) == 1)
    {
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
      uint64_t v5 = *(void *)(v0 + 720);
      uint64_t v6 = *(void *)(v0 + 696);
      swift_release();

      v4(v5, v6);
LABEL_6:
      OUTLINED_FUNCTION_4_94();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_6();
      return v9();
    }
    uint64_t v12 = *(void **)(v3 + 56);
    *(void *)(v0 + 872) = v12;
    uint64_t v13 = v12;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v14;
    *uint64_t v14 = v0;
    v14[1] = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
    return MultiwayViewController.tipPopoverController.getter();
  }
  else
  {
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 864) = v11;
    *unint64_t v11 = v0;
    v11[1] = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
    return MultiwayViewController.dismissPopover()();
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[88] + 8))(v0[90], v0[87]);
  swift_release();
  OUTLINED_FUNCTION_4_94();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_2_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v0 + 752);
  uint64_t v5 = *(void *)(v0 + 744);
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();

  uint64_t v1 = static MainActor.shared.getter();
  *(void *)(v0 + 784) = v1;
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  *(void *)(v0 + 800) = v4;
  *(void *)(v0 + 792) = v2;
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v5 = v4;
  *(void *)(v7 + 888) = v6;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v0 + 752);
  uint64_t v9 = *(void *)(v0 + 744);
  return MEMORY[0x1F4188298](specialized closure #1 in MultiwayViewController.observeTip<A>(_:), v9, v8);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void *v7;
  unsigned char *v8;
  void *v9;
  void *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  Class isa;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CGRect v55;

  uint64_t v1 = (void *)v0[111];

  if (!v1)
  {
    uint64_t v6 = MultiwayViewController.constraintController.getter();
    if (!v6
      || (uint64_t v7 = (void *)v6,
          uint64_t v8 = (unsigned char *)(v6 + OBJC_IVAR___CNKFaceTimeConstraintsController_localParticipantState),
          swift_beginAccess(),
          LOBYTE(v8) = *v8,
          v7,
          (v8 & 0xFE) == 0x80))
    {
      uint64_t v9 = (void *)v0[109];
      uint64_t v10 = (void *)v0[107];
      unint64_t v11 = (void (*)(uint64_t, uint64_t))v0[104];
      uint64_t v12 = v0[90];
      uint64_t v13 = v0[87];
      swift_release();

      v11(v12, v13);
      goto LABEL_6;
    }
    uint64_t v16 = (void *)v0[109];
    uint64_t v17 = v0[96];
    os_log_type_t v18 = v0[95];
    uint64_t v19 = v0[74];
    type metadata accessor for TipUIPopoverViewController();
    v0[59] = v18;
    v0[60] = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 56);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
    uint64_t v21 = v16;
    uint64_t v22 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
    unint64_t v23 = (void *)TipUIPopoverViewController.popoverPresentationController.getter();
    if (v23)
    {
      uint64_t v24 = v23;
      objc_msgSend(v23, sel_setSourceItem_, v0[109]);
    }
    uint64_t v25 = (void *)v0[107];
    unint64_t v26 = v22;
    unint64_t v27 = (uint64_t (*)())objc_msgSend(v25, sel_view);
    if (v27)
    {
      id v30 = v27;
      uint64_t v31 = *((double *)v0 + 97);
      objc_msgSend(v27, sel_bounds);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      id v37 = v36;
      uint64_t v39 = v38;

      v55.origin.x = v33;
      v55.origin.double y = v35;
      v55.size.width = v37;
      v55.size.height = v39;
      objc_msgSend(v26, sel_setPreferredContentSize_, CGRectGetWidth(v55), v31);

      os_log_type_t v40 = TipUIPopoverViewController.popoverPresentationController.getter();
      if (!v40)
      {
LABEL_15:
        uint64_t v45 = (void *)TipUIPopoverViewController.popoverPresentationController.getter();
        if (v45)
        {
          id v46 = v45;
          objc_msgSend(v45, sel_setPermittedArrowDirections_, 2);
        }
        if (one-time initialization token for tipUserInfo != -1) {
          swift_once();
        }
        uint64_t v47 = (void *)v0[109];
        id v48 = (void *)v0[107];
        Swift::String v49 = (void *)*((void *)static MultiwayViewController.tipUserInfo + 2);
        *((void *)static MultiwayViewController.tipUserInfo + 2) = v26;
        Swift::String v50 = v26;

        objc_msgSend(v48, sel_presentViewController_animated_completion_, v50, 1, 0);
        uint64_t v51 = static MainActor.shared.getter();
        v0[98] = v51;
        if (v51)
        {
          swift_getObjectType();
          uint64_t v52 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v29 = v53;
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v29 = 0;
        }
        v0[100] = v29;
        v0[99] = v52;
        unint64_t v27 = specialized closure #1 in MultiwayViewController.observeTip<A>(_:);
        uint64_t v28 = v52;
        return MEMORY[0x1F4188298](v27, v28, v29);
      }
      uint64_t v41 = (void *)v40;
      uint64_t v42 = (void *)v0[107];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_1C3769830;
      unint64_t v27 = (uint64_t (*)())objc_msgSend(v42, sel_view);
      if (v27)
      {
        *(void *)(v43 + 32) = v27;
        specialized Array._endMutation()();
        type metadata accessor for UIView();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v41, sel_setPassthroughViews_, isa);

        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x1F4188298](v27, v28, v29);
  }
  uint64_t v2 = (void *)v0[109];
  uint64_t v3 = (void *)v0[107];
  uint64_t v4 = OUTLINED_FUNCTION_8_62();
  v5(v4);

  swift_release();
LABEL_6:
  OUTLINED_FUNCTION_4_94();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v14();
}

uint64_t MultiwayViewController.tipPopoverController.getter()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](MultiwayViewController.tipPopoverController.getter, v2, v1);
}

{
  void *v0;
  uint64_t (*v1)(void *);
  id v2;
  uint64_t (*v4)(void *);
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)*((void *)static MultiwayViewController.tipUserInfo + 2);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = v1;
  uint64_t v2 = v0;
  return v4(v0);
}

uint64_t MultiwayViewController.FaceTimeLinkTipUserInfo.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MultiwayViewController.FaceTimeLinkTipUserInfo()
{
  return self;
}

uint64_t sub_1C33D8E9C()
{
  uint64_t v1 = type metadata accessor for FaceInFrameTip();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in MultiwayViewController.observeTip<A>(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FaceInFrameTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in CallRecordingService.startRecording(call:completion:);
  return specialized closure #1 in MultiwayViewController.observeTip<A>(_:)(a1, v6, v7, v8, v9);
}

unint64_t lazy protocol witness table accessor for type FaceInFrameTip and conformance FaceInFrameTip()
{
  unint64_t result = lazy protocol witness table cache variable for type FaceInFrameTip and conformance FaceInFrameTip;
  if (!lazy protocol witness table cache variable for type FaceInFrameTip and conformance FaceInFrameTip)
  {
    type metadata accessor for FaceInFrameTip();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FaceInFrameTip and conformance FaceInFrameTip);
  }
  return result;
}

uint64_t outlined destroy of Tips.Status?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MultiwayViewController.ViewContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MultiwayViewController.ViewContent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall CallControlsStatusViewModel.startStatusObservation()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationState, Never>, AnyPublisher<Bool, Never>>);
  OUTLINED_FUNCTION_4();
  uint64_t v32 = v2;
  uint64_t v33 = v3;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_2_3();
  uint64_t v30 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationState, Never>, AnyPublisher<Bool, Never>>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  uint64_t v34 = v5;
  uint64_t v35 = v6;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_2_3();
  uint64_t v31 = v7;
  OUTLINED_FUNCTION_3_22();
  uint64_t v8 = OUTLINED_FUNCTION_1_11();
  uint64_t v29 = (void *)v9(v8);
  id v39 = v29;
  OUTLINED_FUNCTION_3_22();
  uint64_t v10 = OUTLINED_FUNCTION_1_11();
  uint64_t v28 = v11(v10);
  uint64_t v38 = v28;
  OUTLINED_FUNCTION_3_22();
  uint64_t v12 = OUTLINED_FUNCTION_1_11();
  uint64_t v14 = v13(v12);
  uint64_t v36 = *(void *)(v0 + 72);
  uint64_t v37 = v14;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUCallStatus, Never>);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<InCallControlsMode, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationState, Never>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<TUCallStatus, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUCallStatus, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<InCallControlsMode, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<InCallControlsMode, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<TUConversationState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  uint64_t v15 = v30;
  Publisher.combineLatest<A, B, C>(_:_:_:)();
  swift_release();
  swift_release();
  swift_release();
  id v39 = objc_msgSend(self, sel_mainRunLoop, v26, v27, v28, v29);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v16 - 8);
  os_log_type_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v19);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationState, Never>, AnyPublisher<Bool, Never>> and conformance Publishers.CombineLatest4<A, B, C, D>, &demangling cache variable for type metadata for Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationState, Never>, AnyPublisher<Bool, Never>>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  uint64_t v21 = v31;
  uint64_t v20 = v32;
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v18);

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v15, v20);
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for closure #1 in CallControlsStatusViewModel.startStatusObservation();
  *(void *)(v23 + 24) = v22;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationState, Never>, AnyPublisher<Bool, Never>>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationState, Never>, AnyPublisher<Bool, Never>>, NSRunLoop>);
  uint64_t v24 = v34;
  uint64_t v25 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v21, v24);
  *(void *)(v1 + 80) = v25;
  swift_release();
}

uint64_t sub_1C33D9630()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t CallControlsStatusViewModel.__allocating_init(service:isScreenLocked:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  CallControlsStatusViewModel.init(service:isScreenLocked:)(a1, a2);
  return v4;
}

uint64_t CallControlsStatusViewModel.statusView.getter()
{
  swift_beginAccess();
  return MEMORY[0x1C8776240](v0 + 16);
}

uint64_t CallControlsStatusViewModel.statusView.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CallControlsStatusViewModel.statusView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return CancelConfirmationViewModel.delegate.modify;
}

void *CallControlsStatusViewModel.init(service:isScreenLocked:)(long long *a1, uint64_t a2)
{
  v2[3] = 0;
  swift_unknownObjectWeakInit();
  v2[10] = 0;
  outlined init with take of Notice(a1, (uint64_t)(v2 + 4));
  v2[9] = a2;
  return v2;
}

uint64_t closure #1 in CallControlsStatusViewModel.startStatusObservation()(unint64_t a1, char a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.sidebar);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = v13;
      *(_DWORD *)uint64_t v12 = 136315906;
      type metadata accessor for TUCallStatus(0);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v16 = InCallControlsMode.debugDescription.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2080;
      type metadata accessor for TUConversationState(0);
      uint64_t v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 32) = 1024;
      a1 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v10, v11, "CallControlsStatusViewModel: callStatus: %s controlMode: %s conversationState: %s isScreenLocked: %{BOOL}d", (uint8_t *)v12, 0x26u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v13, -1, -1);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }

    CallControlsStatusViewModel.updateStatus(callStatus:mode:conversationState:isScreenLocked:)(a1, a2, a3, a4 & 1);
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in CallControlsStatusViewModel.startStatusObservation()(unint64_t a1, char a2, uint64_t a3, char a4)
{
  return closure #1 in CallControlsStatusViewModel.startStatusObservation()(a1, a2, a3, a4);
}

void CallControlsStatusViewModel.updateStatus(callStatus:mode:conversationState:isScreenLocked:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  if (a1 == 1 && a3 == 3)
  {
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.sidebar);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26)) {
      goto LABEL_25;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "CallControlsStatusViewModel: hide status after joined";
    goto LABEL_24;
  }
  unint64_t v10 = a1;
  __swift_project_boxed_opaque_existential_1(v4 + 4, v4[7]);
  uint64_t v11 = OUTLINED_FUNCTION_5_100();
  uint64_t v13 = v12(v11);
  if (!v13)
  {
LABEL_20:
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.sidebar);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26)) {
      goto LABEL_25;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "CallControlsStatusViewModel: hide status because there is no conversation";
LABEL_24:
    _os_log_impl(&dword_1C2F90000, v25, v26, v28, v27, 2u);
    MEMORY[0x1C87760E0](v27, -1, -1);
LABEL_25:

    OUTLINED_FUNCTION_4_95();
    if (MEMORY[0x1C8776240](v25))
    {
      swift_getObjectType();
      uint64_t v30 = OUTLINED_FUNCTION_3_108();
      v31(v30);
      swift_unknownObjectRelease();
    }
    return;
  }
  id v129 = (id)v13;
  __swift_project_boxed_opaque_existential_1(v4 + 4, v4[7]);
  uint64_t v14 = OUTLINED_FUNCTION_5_100();
  uint64_t v16 = v15(v14);
  if (!v16)
  {

    goto LABEL_20;
  }
  unint64_t v17 = (void *)v16;
  if ((v10 - 5) < 2)
  {
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.sidebar);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1C2F90000, v19, v20, "CallControlsStatusViewModel: hide status when call is disconnected", v21, 2u);
      MEMORY[0x1C87760E0](v21, -1, -1);
    }

    OUTLINED_FUNCTION_4_95();
    if (MEMORY[0x1C8776240](v19))
    {
      swift_getObjectType();
      uint64_t v22 = OUTLINED_FUNCTION_3_108();
      v23(v22);
      swift_unknownObjectRelease();
    }

    return;
  }
  if ((a2 & 0xE0) == 0x40)
  {
    type metadata accessor for ConversationControlsRecipeGenerator();
    Class v32 = static ConversationControlsRecipeGenerator.unauthorizedParticipantAssets(controlsMode:conversation:)(a2, (uint64_t)v17);
    if (!v32)
    {
      OUTLINED_FUNCTION_2_107();
      uint64_t v123 = 0;
      Class isa = 0;
LABEL_78:
      char v92 = 2;
      goto LABEL_79;
    }
    Class v35 = v32;
    unint64_t v10 = v33;
    a4 = v34;
    uint64_t v36 = v32;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v37 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v37)
      {
LABEL_32:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v10 & 0xC000000000000001) == 0, v10);
        if ((v10 & 0xC000000000000001) != 0) {
          id v38 = (id)MEMORY[0x1C87744F0](0, v10);
        }
        else {
          id v38 = *(id *)(v10 + 32);
        }
        uint64_t v123 = (uint64_t)v38;
        swift_bridgeObjectRelease();
LABEL_75:
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        SymbolImageDescribers.ConversationControls.symbolImageDescription.getter(a4, (uint64_t)v132);
        id v93 = static UIImage.symbolImage(for:)((uint64_t)v132);
        outlined release of SymbolImageDescription((uint64_t)v132);
        outlined consume of (title: NSAttributedString, subtitles: [NSAttributedString], symbol: SymbolImageDescribers.ConversationControls)?(v35);
        id v128 = v93;
        Class isa = v35;
        if (v93)
        {
          a4 = 1;
          uint64_t v5 = 0x403A000000000000;
          unint64_t v10 = 0x403A000000000000;
          char v92 = 1;
          goto LABEL_79;
        }
LABEL_77:
        OUTLINED_FUNCTION_2_107();
        goto LABEL_78;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v123 = 0;
    goto LABEL_75;
  }
  uint64_t v39 = TUConversation.participantListDisplayName.getter();
  uint64_t v41 = v40;
  id v42 = objc_msgSend(v17, sel_remoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v121 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection.first.getter();
  unint64_t v44 = v43;
  swift_bridgeObjectRelease();
  id v128 = v41;
  uint64_t v120 = (void (*)(Class, uint64_t, uint64_t, uint64_t))v39;
  if (!v44) {
    goto LABEL_43;
  }
  id v45 = objc_msgSend(v44, sel_handle);

  if (!v45) {
    goto LABEL_43;
  }
  uint64_t v46 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v45);
  if (!v47)
  {

LABEL_43:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v52._uint64_t countAndFlagsBits = TUConversation.participantListDisplayName.getter();
    v51.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v52).super.super.isa;
    goto LABEL_44;
  }
  uint64_t v48 = v46;
  Swift::String v49 = v47;
  if ((objc_msgSend(v45, sel_shouldHideContactWithLockState_, a4 & 1) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v50._uint64_t countAndFlagsBits = v48;
  v50._object = v49;
  v51.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v50).super.super.isa;

LABEL_44:
  __swift_project_boxed_opaque_existential_1(v6 + 4, v6[7]);
  uint64_t v53 = OUTLINED_FUNCTION_6_92();
  uint64_t v55 = v54(v53);
  if (v55)
  {
    unint64_t v56 = (void *)v55;
    __swift_project_boxed_opaque_existential_1(v6 + 4, v6[7]);
    uint64_t v57 = OUTLINED_FUNCTION_6_92();
    uint64_t v59 = v58(v57);
    if (v59)
    {
      uint64_t v60 = v59;
      type metadata accessor for ConversationControlsRecipeGenerator();
      uint64_t v117 = v60;
      static ConversationControlsRecipeGenerator.assetsForDefaultHUD(controlsManager:conversation:)();
      id v62 = v61;
      id v118 = v63;
      Class isa = v51.super.super.isa;
      if (v51.super.super.isa)
      {
        Class v64 = v51.super.super.isa;
        uint64_t v65 = v17;
        id v66 = [(objc_class *)v64 string];
        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v69 = v68;
      }
      else
      {
        uint64_t v65 = v17;
        uint64_t v67 = 0;
        uint64_t v69 = 0;
      }
      uint64_t v119 = v62;
      id v70 = objc_msgSend(v62, sel_string, v117);
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v72 = v71;

      if (v69)
      {
        BOOL v73 = v67 == v5 && v69 == v72;
        unint64_t v17 = v65;
        if (v73)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v123 = 0;
          CGRect v75 = &selRef_trailingBarAlpha;
LABEL_64:
          unint64_t v10 = v121;
          id v77 = [v56 v75[224]];
          static Set._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Collection.first.getter();
          uint64_t v79 = v78;
          swift_bridgeObjectRelease();
          if (!v79
            || (id v80 = objc_msgSend(v79, sel_handle), v79, !v80)
            || (unsigned int v81 = objc_msgSend(v80, sel_shouldHideContactWithLockState_, a4 & 1),
                v80,
                !v81))
          {
            id v82 = [v56 v75[224]];
            uint64_t v83 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v84 = specialized Set.count.getter(v83);
            swift_bridgeObjectRelease();
            if (v84)
            {
              type metadata accessor for ConversationControlsBadgingAvatarViewController();
              id v85 = objc_msgSend(v118, sel_image);
              id v86 = objc_msgSend(self, sel_clearColor);
              id v87 = v56;
              id v88 = (id)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v87, v85, (uint64_t)v120, (uint64_t)v128, v86);
              id v128 = objc_msgSend(v88, sel_view);

              unint64_t v10 = 0;
              unsigned __int8 v127 = 0;
              a4 = 0x4052000000000000;
              uint64_t v5 = 0x4052000000000000;
            }
            else
            {
              swift_bridgeObjectRelease();
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
              id v89 = (void *)*MEMORY[0x1E4FB2998];
              v132[0] = 0x69662E6F65646976;
              v132[1] = 0xEA00000000006C6CLL;
              unsigned __int8 v127 = 2;
              v132[2] = 2;
              v132[3] = v89;
              __int16 v133 = 0;
              uint64_t v134 = 4;
              char v135 = 0;
              uint64_t v136 = 0;
              id v90 = v89;
              id v91 = static UIImage.symbolImage(for:)((uint64_t)v132);

              swift_bridgeObjectRelease();
              id v128 = v91;
              if (v91)
              {
                a4 = 1;
                uint64_t v5 = 0x403A000000000000;
                unint64_t v10 = 0x403A000000000000;
                char v92 = 1;
LABEL_79:
                unsigned __int8 v127 = v92;
                goto LABEL_80;
              }
              OUTLINED_FUNCTION_2_107();
            }
LABEL_80:
            swift_beginAccess();
            if (MEMORY[0x1C8776240](v6 + 2))
            {
              uint64_t v94 = v6[3];
              uint64_t ObjectType = swift_getObjectType();
              v130[0] = v128;
              v130[1] = a4;
              v130[2] = v5;
              v130[3] = v10;
              unsigned __int8 v131 = v127;
              uint64_t v120 = *(void (**)(Class, uint64_t, uint64_t, uint64_t))(v94 + 40);
              uint64_t v121 = ObjectType;
              outlined copy of CallControlsStatusView.LeadingView(v128, a4, v5, v10, v127);
              ((void (*)(void *, uint64_t, uint64_t))v120)(v130, v121, v94);
              swift_unknownObjectRelease();
              outlined consume of CallControlsStatusView.LeadingView(v128, a4, v5, v10, v127);
            }
            if (MEMORY[0x1C8776240](v6 + 2))
            {
              uint64_t v96 = v6[3];
              uint64_t v97 = swift_getObjectType();
              uint64_t v120 = *(void (**)(Class, uint64_t, uint64_t, uint64_t))(v96 + 32);
              uint64_t v121 = v97;
              uint64_t v98 = isa;
              v120(isa, v123, v121, v96);

              swift_unknownObjectRelease();
            }
            if (MEMORY[0x1C8776240](v6 + 2))
            {
              uint64_t v106 = v6[3];
              uint64_t v107 = swift_getObjectType();
              uint64_t v108 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v106 + 16))(0, v107, v106);
              OUTLINED_FUNCTION_9_67(v108, v109, v110, v111, v112, v113, v114, v115, (uint64_t)v116, (uint64_t)v118, (uint64_t)v119, (uint64_t)v120, v121, (uint64_t)v17, v123, (uint64_t)isa, v127, v128);
              swift_unknownObjectRelease();
            }
            else
            {
              OUTLINED_FUNCTION_9_67(0, v99, v100, v101, v102, v103, v104, v105, (uint64_t)v116, (uint64_t)v118, (uint64_t)v119, (uint64_t)v120, v121, (uint64_t)v17, v123, (uint64_t)isa, v127, v128);
            }

            return;
          }
          swift_bridgeObjectRelease();

          goto LABEL_77;
        }
        char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        CGRect v75 = &selRef_trailingBarAlpha;
        if (v74)
        {
          uint64_t v123 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v17 = v65;
        CGRect v75 = &selRef_trailingBarAlpha;
      }
      uint64_t v5 = (uint64_t)v119;
      id v76 = v119;
      uint64_t v123 = (uint64_t)v119;
      goto LABEL_64;
    }
  }
  else
  {
  }
  swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned TUCallStatus, @unowned InCallControlsMode, @unowned TUConversationState, @unowned Bool) -> ()(unsigned int *a1, uint64_t (*a2)(void, void, void, void))
{
  return a2(*a1, *((unsigned __int8 *)a1 + 4), *((void *)a1 + 1), *((unsigned __int8 *)a1 + 16));
}

uint64_t sub_1C33DA708()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned TUCallStatus, @unowned InCallControlsMode, @unowned TUConversationState, @unowned Bool) -> ()(unsigned int *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned TUCallStatus, @unowned InCallControlsMode, @unowned TUConversationState, @unowned Bool) -> ()(a1, *(uint64_t (**)(void, void, void, void))(v1 + 16));
}

uint64_t CallControlsStatusViewModel.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  return v0;
}

uint64_t CallControlsStatusViewModel.__deallocating_deinit()
{
  CallControlsStatusViewModel.deinit();
  return swift_deallocClassInstance();
}

void *outlined consume of (title: NSAttributedString, subtitles: [NSAttributedString], symbol: SymbolImageDescribers.ConversationControls)?(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t dispatch thunk of CallControlsStatusViewing.isHidden.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallControlsStatusViewing.isHidden.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CallControlsStatusViewing.isHidden.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CallControlsStatusViewing.set(title:subtitle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of CallControlsStatusViewing.set(leadingView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata accessor for CallControlsStatusViewModel()
{
  return self;
}

uint64_t method lookup function for CallControlsStatusViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallControlsStatusViewModel);
}

uint64_t dispatch thunk of CallControlsStatusViewModel.__allocating_init(service:isScreenLocked:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

id LinkDetailViewController.__allocating_init(viewModel:linkController:detailControllerFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return LinkDetailViewController.init(viewModel:linkController:detailControllerFactory:)(a1, a2, a3);
}

void LinkDetailViewController.Item.hash(into:)()
{
  unint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 64))
  {
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v0 + 56);
    if (*(unsigned char *)(v0 + 64) == 1)
    {
      Hasher._combine(_:)(2uLL);
      id v6 = (id)v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v7 = (id)v2;
      NSObject.hash(into:)();
      if (v1)
      {
        Hasher._combine(_:)(1u);
        id v8 = v6;
        NSObject.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 32) | *(void *)(v0 + 40) | *(void *)(v0 + 48);
      if (v4 | v1 | v2 | v3 | v9 | v5)
      {
        if (v2 != 1 || v4 | v1 | v3 | v9 | v5) {
          Swift::UInt v10 = 4;
        }
        else {
          Swift::UInt v10 = 3;
        }
      }
      else
      {
        Swift::UInt v10 = 0;
      }
      Hasher._combine(_:)(v10);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
}

uint64_t static LinkDetailViewController.Item.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  int v10 = *(unsigned __int8 *)(a1 + 64);
  unint64_t v12 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  int v19 = *(unsigned __int8 *)(a2 + 64);
  v74[0] = *(void *)a1;
  v74[1] = v3;
  v74[2] = v5;
  v74[3] = v4;
  v74[4] = v7;
  v74[5] = v6;
  v74[6] = v8;
  v74[7] = v9;
  char v75 = v10;
  unint64_t v76 = v12;
  unint64_t v77 = v11;
  uint64_t v78 = v14;
  uint64_t v79 = v13;
  uint64_t v80 = v16;
  uint64_t v81 = v15;
  uint64_t v82 = v18;
  uint64_t v83 = v17;
  char v84 = v19;
  if (v10)
  {
    if (v10 == 1)
    {
      if (v19 == 1)
      {
        uint64_t v68 = v6;
        uint64_t v70 = v4;
        uint64_t v63 = v9;
        uint64_t v64 = v7;
        uint64_t v20 = v13;
        uint64_t v21 = v15;
        uint64_t v62 = v5;
        uint64_t v22 = v17;
        uint64_t v66 = v8;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        OUTLINED_FUNCTION_3_109();
        uint64_t v23 = (void *)OUTLINED_FUNCTION_1_118();
        outlined copy of LinkDetailViewController.Item(v23, v24, v25, v20, v16, v21, v18, v22, v56);
        OUTLINED_FUNCTION_3_109();
        outlined copy of LinkDetailViewController.Item((id)v2, (void *)v3, v62, v70, v64, v68, v66, v63, v57);
        id v60 = (id)v11;
        swift_bridgeObjectRetain();
        uint64_t v61 = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v26 = (id)v2;
        id v27 = (id)v12;
        id v59 = (id)v3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v28 = static NSObject.== infix(_:_:)();

        if (v28)
        {
          v73[0] = v3;
          v73[1] = v62;
          void v73[2] = v70;
          v73[3] = v64;
          v73[4] = v68;
          v73[5] = v66;
          v73[6] = v63;
          v72[0] = v11;
          v72[1] = v14;
          v72[2] = v20;
          v72[3] = v16;
          v72[4] = v61;
          v72[5] = v18;
          v72[6] = v22;
          char v29 = static ParticipantContactDetails.== infix(_:_:)((uint64_t)v73, (uint64_t)v72);
          outlined release of (LinkDetailViewController.Item, LinkDetailViewController.Item)((uint64_t)v74);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return v29 & 1;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_32:
        outlined release of (LinkDetailViewController.Item, LinkDetailViewController.Item)((uint64_t)v74);
        char v29 = 0;
        return v29 & 1;
      }
      goto LABEL_31;
    }
    uint64_t v31 = v7 | v6 | v8;
    if (v5 | v3 | v2 | v4 | v31 | v9)
    {
      if (v2 != 1 || v5 | v3 | v4 | v31 | v9)
      {
        if (v19 != 2 || v12 != 2) {
          goto LABEL_31;
        }
      }
      else if (v19 != 2 || v12 != 1)
      {
        goto LABEL_31;
      }
      if (v14 | v11 | v13 | v16 | v15 | v18 | v17)
      {
LABEL_31:
        char v58 = v19;
        uint64_t v34 = (void *)OUTLINED_FUNCTION_1_118();
        uint64_t v36 = v35;
        uint64_t v38 = v37;
        uint64_t v39 = v16;
        uint64_t v41 = v40;
        uint64_t v43 = v42;
        outlined copy of LinkDetailViewController.Item(v34, v44, v45, v46, v39, v47, v18, v48, v58);
        outlined copy of LinkDetailViewController.Item((id)v2, (void *)v3, v5, v36, v38, v41, v43, v9, v10);
        goto LABEL_32;
      }
    }
    else if (v19 != 2 || v14 | v11 | v12 | v13 | v16 | v15 | v18 | v17)
    {
      goto LABEL_31;
    }
    outlined release of (LinkDetailViewController.Item, LinkDetailViewController.Item)((uint64_t)v74);
    char v29 = 1;
    return v29 & 1;
  }
  if (v19) {
    goto LABEL_31;
  }
  uint64_t v65 = v7;
  uint64_t v67 = v8;
  uint64_t v69 = v6;
  uint64_t v71 = v4;
  if (v2 == v12 && v3 == v11) {
    char v29 = 1;
  }
  else {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  Swift::String v50 = (void *)OUTLINED_FUNCTION_1_118();
  outlined copy of LinkDetailViewController.Item(v50, v51, v52, v53, v16, v54, v18, v55, 0);
  outlined copy of LinkDetailViewController.Item((id)v2, (void *)v3, v5, v71, v65, v69, v67, v9, 0);
  outlined release of (LinkDetailViewController.Item, LinkDetailViewController.Item)((uint64_t)v74);
  return v29 & 1;
}

Swift::Int LinkDetailViewController.Item.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t LinkDetailViewController.Section.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

void *static LinkDetailViewController.Section.allCases.getter()
{
  return &outlined read-only object #0 of static LinkDetailViewController.Section.allCases.getter;
}

uint64_t LinkDetailViewController.Section.rawValue.getter(uint64_t result)
{
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkDetailViewController.Item()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LinkDetailViewController.Section@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = LinkDetailViewController.Section.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LinkDetailViewController.Section@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LinkDetailViewController.Section.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void *protocol witness for static CaseIterable.allCases.getter in conformance LinkDetailViewController.Section@<X0>(void *a1@<X8>)
{
  uint64_t result = static LinkDetailViewController.Section.allCases.getter();
  *a1 = result;
  return result;
}

void one-time initialization function for groupSpacing()
{
  static LinkDetailViewController.Layout.groupSpacing = 0xC033000000000000;
}

id LinkDetailViewController.collectionView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___collectionView;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___collectionView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___collectionView);
  }
  else
  {
    id v4 = closure #1 in LinkDetailViewController.collectionView.getter(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in LinkDetailViewController.collectionView.getter(uint64_t a1)
{
  id v2 = LinkDetailViewController.collectionViewLayout()();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1568]), sel_initWithFrame_collectionViewLayout_, v2, 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v4 = self;
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_clearColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v6);

  objc_msgSend(v5, sel_setDelegate_, a1);
  return v5;
}

id LinkDetailViewController.collectionViewLayout()()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1588]), sel_init);
  if (one-time initialization token for groupSpacing != -1) {
    swift_once();
  }
  objc_msgSend(v0, sel_setInterSectionSpacing_, *(double *)&static LinkDetailViewController.Layout.groupSpacing);
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1580]);
  return @nonobjc UICollectionViewCompositionalLayout.init(sectionProvider:configuration:)((uint64_t)closure #1 in LinkDetailViewController.collectionViewLayout(), 0, v0);
}

void *closure #1 in LinkDetailViewController.collectionViewLayout()(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v2 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v35 - v16;
  if (v41)
  {
    (*(void (**)(char *, void, uint64_t, __n128))(v7 + 104))(v9, *MEMORY[0x1E4FB10C0], v6, v15);
    UICollectionLayoutListConfiguration.init(appearance:)();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FB1118], v2);
    UICollectionLayoutListConfiguration.headerMode.setter();
    id v18 = objc_msgSend(self, sel_clearColor);
    UICollectionLayoutListConfiguration.backgroundColor.setter();
    id v19 = objc_msgSend(self, sel_effectWithStyle_, 18);
    id v20 = objc_msgSend(self, sel_effectForBlurEffect_style_, v19, 7);

    uint64_t v21 = (void (*)(uint64_t *, void))UICollectionLayoutListConfiguration.separatorConfiguration.modify();
    MEMORY[0x1C8770460](v20);
    v21(v43, 0);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutSection);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v17, v10);
    uint64_t v22 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
    v23(v13, v10);
    v23(v17, v10);
  }
  else
  {
    uint64_t v36 = v7;
    uint64_t v37 = v3;
    uint64_t v38 = v6;
    uint64_t v39 = v2;
    uint64_t v40 = v11;
    uint64_t v41 = v10;
    uint64_t v24 = self;
    id v25 = objc_msgSend(v24, sel_fractionalWidthDimension_, 1.0);
    if (one-time initialization token for estimatedHeight != -1) {
      swift_once();
    }
    id v26 = objc_msgSend(v24, sel_estimatedDimension_, *(double *)&static LinkDetailHeaderView.Layout.estimatedHeight);
    id v27 = objc_msgSend(self, sel_sizeWithWidthDimension_heightDimension_, v25, v26);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutBoundarySupplementaryItem);
    id v28 = v27;
    id v29 = @nonobjc NSCollectionLayoutBoundarySupplementaryItem.__allocating_init(layoutSize:elementKind:alignment:)(v28, 0xD00000000000001FLL, 0x80000001C379A640, 1);
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v9, *MEMORY[0x1E4FB10C0], v38);
    UICollectionLayoutListConfiguration.init(appearance:)();
    (*(void (**)(char *, void, uint64_t))(v37 + 104))(v5, *MEMORY[0x1E4FB1108], v39);
    UICollectionLayoutListConfiguration.headerMode.setter();
    id v30 = objc_msgSend(self, sel_clearColor);
    UICollectionLayoutListConfiguration.backgroundColor.setter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutSection);
    uint64_t v22 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1C3769830;
    *(void *)(v31 + 32) = v29;
    v43[0] = v31;
    specialized Array._endMutation()();
    id v32 = v29;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v22, sel_setBoundarySupplementaryItems_, isa);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
  }
  return v22;
}

id LinkDetailViewController.dataSource.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___dataSource;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___dataSource);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___dataSource);
  }
  else
  {
    uint64_t v4 = v0;
    LinkDetailViewController.collectionView.getter();
    LinkDetailViewController.cellProvider.getter();
    id v5 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionViewDiffableDataSource<LinkDetailViewController.Section, LinkDetailViewController.Item>));
    uint64_t v6 = (void *)UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)();
    LinkDetailViewController.supplementaryViewProvider.getter();
    dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter();
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t (*LinkDetailViewController.supplementaryViewProvider.getter())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___supplementaryViewProvider);
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___supplementaryViewProvider);
  if (v2)
  {
    id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0
                                                             + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___supplementaryViewProvider);
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectUnownedInit();
    uint64_t v5 = *v1;
    id v3 = partial apply for closure #1 in closure #1 in LinkDetailViewController.supplementaryViewProvider.getter;
    *uint64_t v1 = (uint64_t)partial apply for closure #1 in closure #1 in LinkDetailViewController.supplementaryViewProvider.getter;
    v1[1] = v4;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
  }
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  return v3;
}

uint64_t closure #1 in closure #1 in LinkDetailViewController.supplementaryViewProvider.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 != 0xD00000000000001FLL || a3 != 0x80000001C379A640)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v9 = (uint64_t)Strong
     + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkDetailHeaderSupplementaryViewRegistration;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v9, (uint64_t)v7, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>?);

  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>);
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v10);
  if (result != 1)
  {
    type metadata accessor for LinkDetailHeaderView();
    uint64_t v12 = (void *)UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
    uint64_t v13 = (char *)swift_unknownObjectUnownedLoadStrong();
    uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel];
    swift_retain();

    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v14 + 240))();
    swift_release();
    uint64_t v16 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v12) + 0x90))(v15);
    uint64_t v17 = (char *)swift_unknownObjectUnownedLoadStrong();
    uint64_t v18 = *(void *)&v17[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel];
    swift_retain();

    uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v18 + 288))();
    uint64_t v21 = v20;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))((*v16 & *v12) + 0xC0))(v19, v21);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

uint64_t (*LinkDetailViewController.cellProvider.getter())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___cellProvider);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___cellProvider);
  if (v2)
  {
    id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0
                                                             + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___cellProvider);
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v5 = *v1;
    id v3 = partial apply for closure #1 in closure #1 in LinkDetailViewController.cellProvider.getter;
    *uint64_t v1 = (uint64_t)partial apply for closure #1 in closure #1 in LinkDetailViewController.cellProvider.getter;
    v1[1] = v4;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
  }
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  return v3;
}

uint64_t closure #1 in closure #1 in LinkDetailViewController.cellProvider.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v17 = *(void **)a3;
  uint64_t v16 = *(void **)(a3 + 8);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v20 = *(void *)(a3 + 40);
  uint64_t v55 = *(void *)(a3 + 32);
  uint64_t v56 = v20;
  uint64_t v21 = *(void *)(a3 + 48);
  uint64_t v58 = *(void *)(a3 + 56);
  uint64_t v59 = v21;
  int v54 = *(unsigned __int8 *)(a3 + 64);
  swift_beginAccess();
  uint64_t v22 = MEMORY[0x1C8776240](a4 + 16);
  if (!v22) {
    return 0;
  }
  uint64_t v23 = (void *)v22;
  uint64_t v53 = a2;
  unint64_t v24 = IndexPath.section.getter();
  int v25 = LinkDetailViewController.Section.init(rawValue:)(v24);
  id v52 = v23;
  if (v25 == 2)
  {
    uint64_t v35 = (uint64_t)v23 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_shareCellRegistration;
    swift_beginAccess();
    outlined init with copy of Environment<DynamicTypeSize>.Content(v35, (uint64_t)v12, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v51);
    if (result != 1)
    {
      uint64_t v36 = v17;
      id v60 = v17;
      uint64_t v61 = v16;
      uint64_t v62 = v19;
      uint64_t v63 = v18;
      uint64_t v37 = v18;
      int v39 = v55;
      int v38 = v56;
      uint64_t v64 = v55;
      uint64_t v65 = v56;
      int v40 = v58;
      uint64_t v66 = v59;
      uint64_t v67 = v58;
      char v41 = v54;
      char v68 = v54;
      outlined copy of LinkDetailViewController.Item(v36, v16, v19, v37, v55, v56, v59, v58, v54);
      type metadata accessor for LinkDetailActionCollectionViewCell();
      uint64_t v34 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

      outlined consume of LinkDetailViewController.Item(v36, v16, v19, v37, v39, v38, v59, v40, v41);
      (*(void (**)(char *))(*(void *)(v51 - 8) + 8))(v12);
      return v34;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v25 == 3)
  {
    uint64_t v26 = (uint64_t)v23 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_deleteCellRegistration;
    swift_beginAccess();
    outlined init with copy of Environment<DynamicTypeSize>.Content(v26, (uint64_t)v15, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v51);
    if (result != 1)
    {
      id v28 = v17;
      id v60 = v17;
      uint64_t v61 = v16;
      uint64_t v62 = v19;
      uint64_t v63 = v18;
      uint64_t v29 = v18;
      int v31 = v55;
      int v30 = v56;
      uint64_t v64 = v55;
      uint64_t v65 = v56;
      int v32 = v58;
      uint64_t v66 = v59;
      uint64_t v67 = v58;
      char v33 = v54;
      char v68 = v54;
      outlined copy of LinkDetailViewController.Item(v28, v16, v19, v29, v55, v56, v59, v58, v54);
      type metadata accessor for LinkDetailActionCollectionViewCell();
      uint64_t v34 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

      outlined consume of LinkDetailViewController.Item(v28, v16, v19, v29, v31, v30, v59, v32, v33);
      (*(void (**)(char *))(*(void *)(v51 - 8) + 8))(v15);
      return v34;
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v42 = (uint64_t)v23 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cellRegistration;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v42, (uint64_t)v9, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>?);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>);
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v51);
  if (result != 1)
  {
    id v60 = v17;
    uint64_t v61 = v16;
    uint64_t v43 = v17;
    Swift::String v50 = v17;
    uint64_t v62 = v19;
    uint64_t v63 = v18;
    uint64_t v44 = v18;
    int v46 = v55;
    int v45 = v56;
    uint64_t v64 = v55;
    uint64_t v65 = v56;
    int v48 = v58;
    int v47 = v59;
    uint64_t v66 = v59;
    uint64_t v67 = v58;
    char v49 = v54;
    char v68 = v54;
    outlined copy of LinkDetailViewController.Item(v43, v16, v19, v44, v55, v56, v59, v58, v54);
    type metadata accessor for LinkDetailParticipantCollectionViewCell();
    uint64_t v34 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

    outlined consume of LinkDetailViewController.Item(v50, v16, v19, v44, v46, v45, v47, v48, v49);
    (*(void (**)(char *))(*(void *)(v51 - 8) + 8))(v9);
    return v34;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #1 in variable initialization expression of LinkDetailViewController.cellBackgroundConfiguration()
{
  static UIBackgroundConfiguration.listGroupedCell()();
  id v0 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  id v1 = objc_msgSend(self, sel_effectWithStyle_, 8);
  id v2 = objc_msgSend(self, sel_effectForBlurEffect_style_, v1, 6);

  return UIBackgroundConfiguration.visualEffect.setter();
}

void LinkDetailViewController.linkShareCoordinator.setter(uint64_t a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkShareCoordinator);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkShareCoordinator) = a1;
}

id LinkDetailViewController.init(viewModel:linkController:detailControllerFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___collectionView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___dataSource] = 0;
  uint64_t v7 = &v3[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___supplementaryViewProvider];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  uint64_t v8 = &v3[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___cellProvider];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>);
  OUTLINED_FUNCTION_68_0(v9);
  uint64_t v10 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_deleteCellRegistration];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_shareCellRegistration], 1, 1, v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>);
  OUTLINED_FUNCTION_68_0(v12);
  uint64_t v13 = v3;
  closure #1 in variable initialization expression of LinkDetailViewController.cellBackgroundConfiguration();
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkShareCoordinator] = 0;
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel] = a1;
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkController] = a2;
  outlined init with copy of IDSLookupManager(a3, (uint64_t)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory]);
  id v14 = objc_allocWithZone(MEMORY[0x1E4F1B980]);
  swift_retain();
  swift_retain();
  id v15 = objc_msgSend(v14, sel_init);
  id v16 = objc_msgSend(self, sel_settingsWithContactStore_, v15);

  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB40]), sel_initWithSettings_, v16);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_avatarController] = v17;

  v20.receiver = v13;
  v20.super_class = (Class)type metadata accessor for LinkDetailViewController();
  id v18 = objc_msgSendSuper2(&v20, sel_initWithNibName_bundle_, 0, 0);
  LinkDetailViewController.configureReusableViewsRegistrations()();

  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(a3);
  return v18;
}

id outlined copy of LinkDetailViewController.Item(id result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 1)
  {
    id v10 = result;
    id v9 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v10;
  }
  else if (!a9)
  {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of (LinkDetailViewController.Item, LinkDetailViewController.Item)(uint64_t a1)
{
  id v2 = *(void **)(a1 + 72);
  id v3 = *(void **)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  char v10 = *(unsigned char *)(a1 + 136);
  outlined consume of LinkDetailViewController.Item(*(void **)a1, *(id *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of LinkDetailViewController.Item(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void outlined consume of LinkDetailViewController.Item(void *a1, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (!a9)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for LinkDetailViewController()
{
  uint64_t result = type metadata singleton initialization cache for LinkDetailViewController;
  if (!type metadata singleton initialization cache for LinkDetailViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LinkDetailViewController.configureReusableViewsRegistrations()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LinkDetailViewController.createCellRegistration()((void (*)(void))type metadata accessor for LinkDetailParticipantCollectionViewCell);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v9, v11, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>?);
  swift_endAccess();
  LinkDetailViewController.createCellRegistration()((void (*)(void))type metadata accessor for LinkDetailActionCollectionViewCell);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_deleteCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v6, v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?);
  swift_endAccess();
  LinkDetailViewController.createCellRegistration()((void (*)(void))type metadata accessor for LinkDetailActionCollectionViewCell);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v12);
  uint64_t v14 = v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_shareCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v6, v14, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?);
  swift_endAccess();
  type metadata accessor for LinkDetailHeaderView();
  UICollectionView.SupplementaryRegistration.init(elementKind:handler:)();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v15);
  uint64_t v16 = v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkDetailHeaderSupplementaryViewRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v3, v16, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>?);
  return swift_endAccess();
}

id LinkDetailViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void LinkDetailViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___collectionView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___dataSource] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___supplementaryViewProvider];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController____lazy_storage___cellProvider];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>);
  OUTLINED_FUNCTION_0_53(v3);
  uint64_t v4 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_deleteCellRegistration];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>);
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  __swift_storeEnumTagSinglePayload((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_shareCellRegistration], 1, 1, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>);
  OUTLINED_FUNCTION_0_53(v6);
  closure #1 in variable initialization expression of LinkDetailViewController.cellBackgroundConfiguration();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_linkShareCoordinator] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cancellables] = MEMORY[0x1E4FBC860];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall LinkDetailViewController.viewDidLoad()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkDetailViewController();
  objc_msgSendSuper2(&v2, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_navigationItem);
  objc_msgSend(v1, sel_setLargeTitleDisplayMode_, 2);

  LinkDetailViewController.configureViewHierarchy()();
  LinkDetailViewController.initializeDataSource()();
}

void LinkDetailViewController.configureViewHierarchy()()
{
  id v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_10;
  }
  objc_super v2 = v1;
  id v3 = LinkDetailViewController.collectionView.getter();
  objc_msgSend(v2, sel_addSubview_, v3);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769580;
  id v5 = LinkDetailViewController.collectionView.getter();
  id v6 = objc_msgSend(v5, sel_topAnchor);

  id v7 = objc_msgSend(v0, sel_view);
  if (!v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  id v10 = objc_msgSend(v9, sel_topAnchor);
  id v11 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v10);

  *(void *)(v4 + 32) = v11;
  id v12 = LinkDetailViewController.collectionView.getter();
  id v13 = objc_msgSend(v12, sel_leadingAnchor);

  id v14 = objc_msgSend(v0, sel_view);
  if (!v14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v15 = v14;
  id v16 = objc_msgSend(v14, sel_leadingAnchor);

  id v17 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v16);
  *(void *)(v4 + 40) = v17;
  id v18 = LinkDetailViewController.collectionView.getter();
  id v19 = objc_msgSend(v18, sel_trailingAnchor);

  id v20 = objc_msgSend(v0, sel_view);
  if (!v20)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v21 = v20;
  id v22 = objc_msgSend(v20, sel_trailingAnchor);

  id v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);
  *(void *)(v4 + 48) = v23;
  id v24 = LinkDetailViewController.collectionView.getter();
  id v25 = objc_msgSend(v24, sel_bottomAnchor);

  id v26 = objc_msgSend(v0, sel_view);
  if (!v26)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v27 = v26;
  id v28 = self;
  id v29 = objc_msgSend(v27, sel_bottomAnchor);

  id v30 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v29);
  *(void *)(v4 + 56) = v30;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v28, sel_activateConstraints_, isa);
}

uint64_t LinkDetailViewController.initializeDataSource()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  uint64_t v38 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v35 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  uint64_t v32 = v6;
  MEMORY[0x1F4188790](v5);
  id v30 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<LinkDetailViewController.Section, LinkDetailViewController.Item>);
  uint64_t v36 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  char v33 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section();
  lazy protocol witness table accessor for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item();
  NSDiffableDataSourceSnapshot.init()();
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&outlined read-only object #0 of LinkDetailViewController.initializeDataSource());
  id v13 = LinkDetailViewController.dataSource.getter();
  dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();

  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel);
  (*(void (**)(void))(*(void *)v14 + 168))();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v25[1] = MEMORY[0x1E4F1AC68];
  uint64_t v29 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v26 = v8;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v27 = v9 + 8;
  id v28 = v15;
  v15(v11, v8);
  swift_beginAccess();
  v25[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  uint64_t v16 = swift_release();
  id v17 = v30;
  (*(void (**)(uint64_t))(*(void *)v14 + 264))(v16);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Set<TUHandle>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher);
  uint64_t v18 = v31;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v18);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  uint64_t v19 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v14 + 216))(v19);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v20 = v26;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v28(v11, v20);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  uint64_t v21 = swift_release();
  id v22 = v35;
  (*(void (**)(uint64_t))(*(void *)v14 + 312))(v21);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String?>.Publisher);
  uint64_t v23 = v37;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v23);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v33, v34);
}

id LinkDetailViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void LinkDetailViewController.init(nibName:bundle:)()
{
}

id LinkDetailViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkDetailViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LinkDetailViewController.createCellRegistration()(void (*a1)(void))
{
  swift_allocObject();
  swift_unknownObjectWeakInit();
  a1(0);
  return UICollectionView.CellRegistration.init(handler:)();
}

void closure #1 in LinkDetailViewController.createCellRegistration()(char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v10 = a3[2];
  unint64_t v11 = a3[3];
  uint64_t v13 = a3[4];
  uint64_t v12 = a3[5];
  uint64_t v14 = a3[6];
  uint64_t v36 = a3[7];
  int v15 = *((unsigned __int8 *)a3 + 64);
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x1C8776240](a4 + 16);
  if (v16)
  {
    id v17 = (char *)v16;
    unint64_t v18 = IndexPath.section.getter();
    if (LinkDetailViewController.Section.init(rawValue:)(v18) == 1)
    {
      if (v15 == 1)
      {
        id v24 = objc_allocWithZone(MEMORY[0x1E4F1B980]);
        id v25 = (id)v8;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v33 = v25;
        id v26 = objc_msgSend(v24, sel_init);
        id v27 = objc_msgSend(self, sel_settingsWithContactStore_, v26);

        id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB40]), sel_initWithSettings_, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v29 = (void **)&v34[OBJC_IVAR____TtC15ConversationKit39LinkDetailParticipantCollectionViewCell_avatarController];
        swift_beginAccess();
        id v30 = *v29;
        *uint64_t v29 = v28;

        uint64_t v19 = v36;
        goto LABEL_7;
      }
      if (v15 == 2 && !(v8 | v9 | v10 | v11 | v13 | v12 | v14 | v36))
      {
        uint64_t v31 = (id *)&v34[OBJC_IVAR____TtC15ConversationKit39LinkDetailParticipantCollectionViewCell_joinButton];
        swift_beginAccess();
        objc_msgSend(*v31, sel_addTarget_action_forControlEvents_, v17, sel_didTapJoin, 64);
        uint64_t v8 = 0;
        uint64_t v10 = 0;
        uint64_t v13 = 0;
        uint64_t v12 = 0;
        uint64_t v14 = 0;
        uint64_t v19 = 0;
        unint64_t v11 = 1;
        goto LABEL_7;
      }
    }
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v19 = 0;
LABEL_7:
    v37[0] = v8;
    v37[1] = v10;
    v37[2] = v11;
    v37[3] = v13;
    v37[4] = v12;
    v37[5] = v14;
    v37[6] = v19;
    uint64_t v36 = v19;
    outlined copy of LinkDetailParticipantCollectionViewCell.Style((void *)v8, v10, v11);
    LinkDetailParticipantCollectionViewCell.style.setter(v37);
    uint64_t v20 = &v17[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cellBackgroundConfiguration];
    uint64_t v21 = type metadata accessor for UIBackgroundConfiguration();
    id v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    uint64_t v34 = v17;
    uint64_t v23 = (uint64_t)v35;
    v22(v35, v20, v21);
    __swift_storeEnumTagSinglePayload(v23, 0, 1, v21);
    MEMORY[0x1C8773CE0](v23);
    outlined consume of LinkDetailParticipantCollectionViewCell.Style((void *)v8, v10, v11);
  }
}

uint64_t closure #1 in LinkDetailViewController.createDeleteCellRegistration()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UIListContentConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a4 + 16);
  if (result)
  {
    uint64_t v14 = (char *)result;
    MEMORY[0x1C8773D30]();
    id v15 = objc_msgSend(self, sel_conversationKit);
    v27._object = (void *)0xE000000000000000;
    v16._object = (void *)0x80000001C37ACD90;
    v16._uint64_t countAndFlagsBits = 0xD000000000000012;
    v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v17.value._object = (void *)0xEF74694B6E6F6974;
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    v27._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v27);

    UIListContentConfiguration.text.setter();
    id v19 = objc_msgSend(self, sel_systemRedColor);
    uint64_t v20 = (void (*)(uint64_t *, void))UIListContentConfiguration.textProperties.modify();
    UIListContentConfiguration.TextProperties.color.setter();
    v20(v26, 0);
    v26[3] = v9;
    v26[4] = MEMORY[0x1E4FB0F88];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, v9);
    MEMORY[0x1C8773CD0](v26);
    id v22 = &v14[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cellBackgroundConfiguration];
    uint64_t v23 = type metadata accessor for UIBackgroundConfiguration();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v8, v22, v23);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v23);
    MEMORY[0x1C8773CE0](v8);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    id v24 = objc_msgSend(self, sel_configurationWithTextStyle_, *MEMORY[0x1E4FB28C8]);
    id v25 = @nonobjc UIImage.__allocating_init(systemName:withConfiguration:)(0x6873617274, 0xE500000000000000, v24);
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x80))(v25);

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t closure #1 in LinkDetailViewController.createShareCellRegistration()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UIListContentConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a4 + 16);
  if (result)
  {
    uint64_t v14 = (char *)result;
    MEMORY[0x1C8773D30]();
    id v15 = objc_msgSend(self, sel_conversationKit);
    v26._object = (void *)0xE000000000000000;
    v16._object = (void *)0x80000001C37ACD70;
    v16._uint64_t countAndFlagsBits = 0xD000000000000011;
    v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v17.value._object = (void *)0xEF74694B6E6F6974;
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    v26._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v26);

    UIListContentConfiguration.text.setter();
    _OWORD v25[3] = v9;
    v25[4] = MEMORY[0x1E4FB0F88];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, v9);
    MEMORY[0x1C8773CD0](v25);
    uint64_t v20 = &v14[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_cellBackgroundConfiguration];
    uint64_t v21 = type metadata accessor for UIBackgroundConfiguration();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v8, v20, v21);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v21);
    MEMORY[0x1C8773CE0](v8);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    id v22 = objc_msgSend(self, sel_configurationWithTextStyle_, *MEMORY[0x1E4FB28C8]);
    id v23 = @nonobjc UIImage.__allocating_init(systemName:withConfiguration:)(0xD000000000000013, 0x80000001C379BD40, v22);
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x80))(v23);
    id v24 = objc_msgSend(self, sel_whiteColor);
    objc_msgSend(a1, sel_setTintColor_, v24);

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t LinkDetailViewController.showUserNotificationForDeleteInvite()()
{
  uint64_t v1 = type metadata accessor for RecentsCallItem(0);
  __n128 v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(__n128))(**(void **)&v0[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel]
                                 + 432))(v2);
  *(void *)(swift_allocObject() + 16) = v0;
  uint64_t v5 = v0;
  RecentsLinkController.delete(callItem:from:completionHandler:)();
  swift_release();
  return outlined destroy of RecentsCallItem((uint64_t)v4);
}

uint64_t LinkDetailViewController.didTapJoin()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel)
                              + 464))();
}

void closure #1 in LinkDetailViewController.showUserNotificationForDeleteInvite()(char a1, id a2)
{
  if (a1)
  {
    id v2 = objc_msgSend(a2, sel_navigationController);
    if (v2)
    {
      id v3 = v2;
    }
  }
}

void LinkDetailViewController.showShareLink(from:)(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)&v1[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel]
                                                + 336))(&v7);
  swift_release();
  swift_bridgeObjectRelease();
  id v3 = objc_allocWithZone((Class)type metadata accessor for LinkShareCoordinator());
  id v4 = a1;
  v1;
  id v5 = LinkShareCoordinator.init(type:hostViewController:originatingView:)();
  LinkShareCoordinator.start(with:)((uint64_t)TPNumberPadCharacter.rawValue.getter, 0);
  id v6 = v5;
  LinkDetailViewController.linkShareCoordinator.setter((uint64_t)v5);
}

void LinkDetailViewController.showContactDetails(for:with:sourceRect:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *(void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)&v6[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_viewModel];
  if ((*(uint64_t (**)(void))(*(void *)v20 + 384))())
  {
    if ((*(uint64_t (**)(void))(*(void *)v20 + 408))())
    {
      uint64_t v22 = v21;
      uint64_t ObjectType = swift_getObjectType();
      v34[0] = v14;
      v34[1] = v13;
      v34[2] = v15;
      v34[3] = v16;
      v34[4] = v17;
      v34[5] = v18;
      void v34[6] = v19;
      (*(void (**)(void *, void *, uint64_t, uint64_t, double, double, double, double))(v22 + 16))(a1, v34, ObjectType, v22, a3, a4, a5, a6);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (v14)
    {
      uint64_t v24 = *(void *)&v7[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory + 32];
      __swift_project_boxed_opaque_existential_1(&v7[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory], *(void *)&v7[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory + 24]);
      id v25 = *(uint64_t (**)(void))(v24 + 16);
      id v26 = v14;
      id v33 = (id)v25();
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      swift_bridgeObjectRetain();
      uint64_t v27 = outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(a1);
      id v26 = @nonobjc CNContact.init(displayName:emailOrPhoneNumber:)(v13, v15, v27, v28);
      uint64_t v29 = *(void *)&v7[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory + 24];
      uint64_t v30 = *(void *)&v7[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory + 32];
      __swift_project_boxed_opaque_existential_1(&v7[OBJC_IVAR____TtC15ConversationKit24LinkDetailViewController_detailControllerFactory], v29);
      id v33 = (id)(*(uint64_t (**)(id, uint64_t, uint64_t))(v30 + 24))(v26, v29, v30);
    }
    id v31 = objc_msgSend(v7, sel_navigationController);
    if (v31)
    {
      uint64_t v32 = v31;
      objc_msgSend(v31, sel_pushViewController_animated_, v33, 1);
    }
  }
}

void closure #2 in LinkDetailViewController.initializeDataSource()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<LinkDetailViewController.Section, LinkDetailViewController.Item>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSectionSnapshot<LinkDetailViewController.Item>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  swift_beginAccess();
  uint64_t v13 = (void *)MEMORY[0x1C8776240](a2 + 16);
  if (v13)
  {
    uint64_t v14 = v13;
    if (v12)
    {
      specialized Sequence.compactMap<A>(_:)(v12);
      uint64_t v20 = &outlined read-only object #0 of closure #2 in LinkDetailViewController.initializeDataSource();
      specialized Array.append<A>(contentsOf:)();
      lazy protocol witness table accessor for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item();
      NSDiffableDataSourceSectionSnapshot.init()();
      memset(v18, 0, sizeof(v18));
      char v19 = -1;
      NSDiffableDataSourceSectionSnapshot.append(_:to:)();
      swift_bridgeObjectRelease();
      id v15 = LinkDetailViewController.dataSource.getter();
      LOBYTE(v18[0]) = 1;
      UICollectionViewDiffableDataSource.apply(_:to:animatingDifferences:completion:)();

      id v16 = LinkDetailViewController.dataSource.getter();
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

      NSDiffableDataSourceSnapshot.reloadSections(_:)((Swift::OpaquePointer)&outlined read-only object #1 of closure #2 in LinkDetailViewController.initializeDataSource());
      id v17 = LinkDetailViewController.dataSource.getter();
      dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
    }
  }
}

uint64_t closure #1 in LinkDetailViewController.initializeDataSource()(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSectionSnapshot<LinkDetailViewController.Item>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = *a1;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a2 + 16);
  if (result)
  {
    uint64_t v13 = (void *)result;
    lazy protocol witness table accessor for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item();
    NSDiffableDataSourceSectionSnapshot.init()();
    if (v11)
    {
      memset(v15, 0, sizeof(v15));
      char v16 = -1;
      NSDiffableDataSourceSectionSnapshot.append(_:to:)();
    }
    id v14 = LinkDetailViewController.dataSource.getter();
    LOBYTE(v15[0]) = a4;
    UICollectionViewDiffableDataSource.apply(_:to:animatingDifferences:completion:)();

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t closure #4 in LinkDetailViewController.initializeDataSource()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<LinkDetailViewController.Section, LinkDetailViewController.Item>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a2 + 16);
  if (result)
  {
    uint64_t v8 = (void *)result;
    id v9 = LinkDetailViewController.dataSource.getter();
    dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

    NSDiffableDataSourceSnapshot.reloadSections(_:)((Swift::OpaquePointer)&outlined read-only object #0 of closure #4 in LinkDetailViewController.initializeDataSource());
    id v10 = LinkDetailViewController.dataSource.getter();
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void LinkDetailViewController.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2)
{
  id v4 = LinkDetailViewController.collectionView.getter();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v6 = objc_msgSend(v4, sel_cellForItemAtIndexPath_, isa);

  if (!v6) {
    id v6 = LinkDetailViewController.collectionView.getter();
  }
  unint64_t v7 = IndexPath.section.getter();
  switch(LinkDetailViewController.Section.init(rawValue:)(v7))
  {
    case 1u:
      id v8 = LinkDetailViewController.dataSource.getter();
      dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();

      if (v40 == 255) {
        goto LABEL_9;
      }
      id v10 = v32;
      id v9 = v33;
      uint64_t v12 = (uint64_t)v34;
      uint64_t v11 = (uint64_t)v35;
      uint64_t v13 = v36;
      uint64_t v14 = v37;
      uint64_t v15 = v38;
      int v31 = v38;
      if (v40 == 1)
      {
        uint64_t v32 = v33;
        id v33 = v34;
        uint64_t v34 = v35;
        uint64_t v35 = (void *)v36;
        uint64_t v36 = v37;
        uint64_t v37 = v38;
        uint64_t v38 = v39;
        uint64_t v29 = v9;
        int v30 = v12;
        uint64_t v16 = v15;
        uint64_t v17 = v14;
        uint64_t v18 = v11;
        type metadata accessor for LinkDetailViewController();
        OUTLINED_FUNCTION_3_109();
        uint64_t v19 = v12;
        int v20 = v39;
        outlined copy of LinkDetailViewController.Item(v10, v29, v19, v18, v13, v17, v16, v39, v27);
        static LinkDetailViewController.fetchFrame(of:in:)(a2, a1);
        LinkDetailViewController.showContactDetails(for:with:sourceRect:)(v10, (uint64_t)&v32, v21, v22, v23, v24);
        OUTLINED_FUNCTION_3_109();
        outlined consume of LinkDetailViewController.Item?(v10, v29, v30, v18, v13, v17, v31, v20, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

        outlined consume of LinkDetailViewController.Item?(v32, v33, (int)v34, (int)v35, v36, v37, v38, v39, v40);
      }
      goto LABEL_10;
    case 2u:
      LinkDetailViewController.showShareLink(from:)(v6);
      goto LABEL_9;
    case 3u:
      LinkDetailViewController.showUserNotificationForDeleteInvite()();
      goto LABEL_9;
    default:
LABEL_9:

LABEL_10:
      id v25 = LinkDetailViewController.collectionView.getter();
      Class v26 = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v25, sel_deselectItemAtIndexPath_animated_, v26, 1);

      return;
  }
}

void outlined consume of LinkDetailViewController.Item?(void *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    outlined consume of LinkDetailViewController.Item(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void static LinkDetailViewController.fetchFrame(of:in:)(uint64_t a1, void *a2)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(a2, sel_layoutAttributesForItemAtIndexPath_, isa);

  if (v4)
  {
    objc_msgSend(v4, sel_frame);
    double v6 = v5;
    double v8 = v7;

    objc_msgSend(a2, sel_convertPoint_toView_, 0, v6, v8);
  }
}

unint64_t lazy protocol witness table accessor for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item;
  if (!lazy protocol witness table cache variable for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item;
  if (!lazy protocol witness table cache variable for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDetailViewController.Item and conformance LinkDetailViewController.Item);
  }
  return result;
}

uint64_t ObjC metadata update function for LinkDetailViewController()
{
  return type metadata accessor for LinkDetailViewController();
}

void type metadata completion function for LinkDetailViewController()
{
  type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailParticipantCollectionViewCell, LinkDetailViewController.Item>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<LinkDetailActionCollectionViewCell, LinkDetailViewController.Item>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>?, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<LinkDetailHeaderView>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for UIBackgroundConfiguration();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for LinkDetailViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkDetailViewController);
}

uint64_t dispatch thunk of LinkDetailViewController.__allocating_init(viewModel:linkController:detailControllerFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 472))();
}

uint64_t destroy for LinkDetailViewController.Item(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 64);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (v2 == 1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (v2)
  {
    return result;
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LinkDetailViewController.Item(void *__dst, void *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 64);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    double v5 = (void *)*a2;
    double v6 = (void *)a2[1];
    *__dst = *a2;
    __dst[1] = v6;
    uint64_t v7 = a2[3];
    __dst[2] = a2[2];
    __dst[3] = v7;
    uint64_t v8 = a2[5];
    __dst[4] = a2[4];
    __dst[5] = v8;
    uint64_t v9 = a2[7];
    __dst[6] = a2[6];
    __dst[7] = v9;
    *((unsigned char *)__dst + 64) = 1;
    id v10 = v5;
    id v11 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v3)
    {
      memcpy(__dst, a2, 0x41uLL);
      return __dst;
    }
    uint64_t v4 = a2[1];
    *__dst = *a2;
    __dst[1] = v4;
    *((unsigned char *)__dst + 64) = 0;
  }
  swift_bridgeObjectRetain();
  return __dst;
}

id *assignWithCopy for LinkDetailViewController.Item(id *__dst, id *__src)
{
  if (__dst == __src) {
    return __dst;
  }
  unsigned int v4 = *((unsigned __int8 *)__dst + 64);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)__dst + 2;
  }
  if (v4 == 1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (!v4) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v5 = *((unsigned __int8 *)__src + 64);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)__src + 2;
  }
  if (v5 == 1)
  {
    id v6 = *__src;
    *__dst = *__src;
    id v7 = __src[1];
    __dst[1] = v7;
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    __dst[4] = __src[4];
    __dst[5] = __src[5];
    __dst[6] = __src[6];
    __dst[7] = __src[7];
    *((unsigned char *)__dst + 64) = 1;
    id v8 = v6;
    id v9 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v5)
    {
      memcpy(__dst, __src, 0x41uLL);
      return __dst;
    }
    *__dst = *__src;
    __dst[1] = __src[1];
    *((unsigned char *)__dst + 64) = 0;
  }
  swift_bridgeObjectRetain();
  return __dst;
}

id *assignWithTake for LinkDetailViewController.Item(id *__dst, id *__src)
{
  if (__dst == __src) {
    return __dst;
  }
  unsigned int v4 = *((unsigned __int8 *)__dst + 64);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)__dst + 2;
  }
  if (v4 == 1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (!v4) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v5 = *((unsigned __int8 *)__src + 64);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)__src + 2;
  }
  if (v5 == 1)
  {
    long long v6 = *((_OWORD *)__src + 1);
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_OWORD *)__dst + 1) = v6;
    long long v7 = *((_OWORD *)__src + 3);
    *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
    *((_OWORD *)__dst + 3) = v7;
    *((unsigned char *)__dst + 64) = 1;
  }
  else if (v5)
  {
    memcpy(__dst, __src, 0x41uLL);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((unsigned char *)__dst + 64) = 0;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for LinkDetailViewController.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LinkDetailViewController.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LinkDetailViewController.Item(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for LinkDetailViewController.Item(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LinkDetailViewController.Item()
{
  return &type metadata for LinkDetailViewController.Item;
}

unsigned char *storeEnumTagSinglePayload for LinkDetailViewController.Section(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C33E03ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LinkDetailViewController.Section()
{
  return &unk_1F1EAAB10;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LinkDetailViewController.Section()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [LinkDetailViewController.Section] and conformance [A], &demangling cache variable for type metadata for [LinkDetailViewController.Section]);
}

unint64_t lazy protocol witness table accessor for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section;
  if (!lazy protocol witness table cache variable for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section;
  if (!lazy protocol witness table cache variable for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDetailViewController.Section and conformance LinkDetailViewController.Section);
  }
  return result;
}

uint64_t sub_1C33E04B0()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LinkDetailViewController.cellProvider.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in closure #1 in LinkDetailViewController.cellProvider.getter(a1, a2, a3, v3);
}

uint64_t sub_1C33E04E8()
{
  swift_unknownObjectUnownedDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LinkDetailViewController.supplementaryViewProvider.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in closure #1 in LinkDetailViewController.supplementaryViewProvider.getter(a1, a2, a3);
}

id @nonobjc UICollectionViewCompositionalLayout.init(sectionProvider:configuration:)(uint64_t a1, uint64_t a2, void *a3)
{
  v8[4] = a1;
  v8[5] = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?);
  _OWORD v8[3] = &block_descriptor_66;
  uint64_t v5 = _Block_copy(v8);
  id v6 = objc_msgSend(v3, sel_initWithSectionProvider_configuration_, v5, a3);

  _Block_release(v5);
  swift_release();
  return v6;
}

uint64_t sub_1C33E05D8()
{
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in LinkDetailViewController.showUserNotificationForDeleteInvite()(char a1)
{
  closure #1 in LinkDetailViewController.showUserNotificationForDeleteInvite()(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in LinkDetailViewController.initializeDataSource()(unsigned __int8 *a1)
{
  return closure #1 in LinkDetailViewController.initializeDataSource()(a1, v1, (uint64_t)&outlined read-only object #0 of closure #1 in LinkDetailViewController.initializeDataSource(), 3);
}

void partial apply for closure #2 in LinkDetailViewController.initializeDataSource()(uint64_t *a1)
{
  closure #2 in LinkDetailViewController.initializeDataSource()(a1, v1);
}

uint64_t partial apply for closure #3 in LinkDetailViewController.initializeDataSource()(unsigned __int8 *a1)
{
  return closure #1 in LinkDetailViewController.initializeDataSource()(a1, v1, (uint64_t)&outlined read-only object #0 of closure #3 in LinkDetailViewController.initializeDataSource(), 2);
}

uint64_t partial apply for closure #4 in LinkDetailViewController.initializeDataSource()(uint64_t a1)
{
  return closure #4 in LinkDetailViewController.initializeDataSource()(a1, v1);
}

uint64_t partial apply for closure #1 in LinkDetailViewController.createShareCellRegistration()(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in LinkDetailViewController.createShareCellRegistration()(a1, a2, a3, v3);
}

uint64_t partial apply for closure #1 in LinkDetailViewController.createDeleteCellRegistration()(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in LinkDetailViewController.createDeleteCellRegistration()(a1, a2, a3, v3);
}

void partial apply for closure #1 in LinkDetailViewController.createCellRegistration()(char *a1, uint64_t a2, uint64_t *a3)
{
  closure #1 in LinkDetailViewController.createCellRegistration()(a1, a2, a3, v3);
}

void *outlined copy of LinkDetailParticipantCollectionViewCell.Style(void *result, uint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    id v4 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

void outlined consume of LinkDetailParticipantCollectionViewCell.Style(void *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void *PushToTalkTalkPillButton.__allocating_init(viewModel:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return PushToTalkTalkPillButton.init(viewModel:)(a1);
}

id PushToTalkTalkPillButton.pillButtonMinimumWidthConstraint.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton____lazy_storage___pillButtonMinimumWidthConstraint;
  unsigned int v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton____lazy_storage___pillButtonMinimumWidthConstraint];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton____lazy_storage___pillButtonMinimumWidthConstraint];
  }
  else
  {
    id v4 = objc_msgSend(v0, sel_widthAnchor);
    id v5 = objc_msgSend(v4, sel_constraintGreaterThanOrEqualToConstant_, 77.0);

    LODWORD(v6) = 1148846080;
    objc_msgSend(v5, sel_setPriority_, v6);
    long long v7 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v5;
    id v3 = v5;

    unsigned int v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void *PushToTalkTalkPillButton.init(viewModel:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_controller] = 0;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_stateConfiguration;
  uint64_t v4 = one-time initialization token for pttTalkButtonBanner;
  id v5 = v1;
  if (v4 != -1) {
    swift_once();
  }
  *(void *)&v5[v3] = static Colors.InCallControls.pttTalkButtonBanner;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton____lazy_storage___pillButtonMinimumWidthConstraint] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_viewModel] = a1;
  swift_bridgeObjectRetain();
  swift_retain();

  id v6 = objc_msgSend(self, sel_conversationKit);
  v18._object = (void *)0xE000000000000000;
  OUTLINED_FUNCTION_3_4();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v6, v7, v18);

  uint64_t v16 = &type metadata for SymbolImageDescribers.ConversationControls;
  uint64_t v17 = &protocol witness table for SymbolImageDescribers.ConversationControls;
  v15[0] = 15;
  uint64_t v11 = *(void *)&v5[v3];
  swift_bridgeObjectRetain();
  uint64_t v12 = PillButton.init(title:symbol:stateConfiguration:context:)(v10._countAndFlagsBits, (uint64_t)v10._object, (uint64_t)v15, v11, 0);
  id v13 = PushToTalkTalkPillButton.pillButtonMinimumWidthConstraint.getter();
  objc_msgSend(v13, sel_setActive_, 1);

  type metadata accessor for PushToTalkTalkButtonController();
  swift_allocObject();
  *(void *)((char *)v12 + OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_controller) = PushToTalkTalkButtonController.init(button:viewModel:)(v12, a1);
  swift_release();
  return v12;
}

id PushToTalkTalkPillButton.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PushToTalkTalkPillButton.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_controller] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_stateConfiguration;
  if (one-time initialization token for pttTalkButtonBanner != -1) {
    swift_once();
  }
  *(void *)&v0[v1] = static Colors.InCallControls.pttTalkButtonBanner;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton____lazy_storage___pillButtonMinimumWidthConstraint] = 0;
  swift_bridgeObjectRetain();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PushToTalkTalkPillButton.computedState.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_controller);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 216);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  return v4;
}

Swift::Void __swiftcall PushToTalkTalkPillButton.updateConfiguration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  __n128 v3 = MEMORY[0x1F4188790](v2 - 8);
  id v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  char v6 = (*(uint64_t (**)(__n128))(**(void **)((char *)v0
                                                       + OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton_viewModel)
                                         + 112))(v3);
  if ((v6 & 0xFE) == 2 || (v6 & 1) == 0)
  {
    Swift::String v8 = (objc_class *)type metadata accessor for PushToTalkTalkPillButton();
    v19.receiver = v0;
    v19.super_class = v8;
    objc_msgSendSuper2(&v19, sel_updateConfiguration);
  }
  else
  {
    id v9 = objc_msgSend(self, sel_conversationKit);
    v21._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_3_4();
    v10._uint64_t countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v21._uint64_t countAndFlagsBits = 0;
    Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v9, v10, v21);

    uint64_t v17 = &type metadata for SymbolImageDescribers.ConversationControls;
    Swift::String v18 = &protocol witness table for SymbolImageDescribers.ConversationControls;
    v16[0] = 16;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC8))();
    specialized Dictionary.subscript.getter();
    static UIButton.Configuration.base(title:symbol:shape:style:context:)(v13._countAndFlagsBits, (uint64_t)v13._object, (uint64_t)v16, 2, (uint64_t)v20, 0, (uint64_t)v5);
    swift_bridgeObjectRelease();
    outlined release of ButtonStyle?((uint64_t)v20);
    outlined destroy of SymbolImageDescribing?((uint64_t)v16);
    uint64_t v14 = type metadata accessor for UIButton.Configuration();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v14);
    UIButton.configuration.setter();
  }
}

uint64_t type metadata accessor for PushToTalkTalkPillButton()
{
  return self;
}

void PushToTalkTalkPillButton.__allocating_init(title:symbol:stateConfiguration:context:)()
{
}

void PushToTalkTalkPillButton.init(title:symbol:stateConfiguration:context:)()
{
}

void PushToTalkTalkPillButton.__ivar_destroyer()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit24PushToTalkTalkPillButton____lazy_storage___pillButtonMinimumWidthConstraint);
}

id PushToTalkTalkPillButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkTalkPillButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PushToTalkTalkPillButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkTalkPillButton);
}

uint64_t dispatch thunk of PushToTalkTalkPillButton.__allocating_init(viewModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t AnsweringMachineTrackingServiceAdapter.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t AnsweringMachineTrackingServiceAdapter.answeringMachine.getter()
{
  return swift_retain();
}

uint64_t key path getter for AnsweringMachineTrackingServiceAdapter.onResult : <A>AnsweringMachineTrackingServiceAdapter<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  char v6 = (uint64_t *)(*a1 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7)
  {
    id v9 = (void *)swift_allocObject();
    void v9[2] = v5;
    v9[3] = v7;
    v9[4] = v8;
    Swift::String v10 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @unowned CallScreeningTrackingStateResult) -> ();
  }
  else
  {
    Swift::String v10 = 0;
    id v9 = 0;
  }
  *a4 = v10;
  a4[1] = v9;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v7);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @unowned CallScreeningTrackingStateResult) -> ()(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int *a4)
{
  uint64_t v6 = *a3;
  id v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return v9(a2, v6);
}

uint64_t key path setter for AnsweringMachineTrackingServiceAdapter.onResult : <A>AnsweringMachineTrackingServiceAdapter<A>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = *(void *)(a4 + a3 - 8);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = v7;
    _OWORD v8[3] = v5;
    v8[4] = v6;
    id v9 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @in_guaranteed CallScreeningTrackingStateResult) -> (@out ());
  }
  else
  {
    id v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = (uint64_t *)(*a2 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  swift_beginAccess();
  uint64_t v11 = *v10;
  *uint64_t v10 = (uint64_t)v9;
  v10[1] = (uint64_t)v8;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v5);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v11);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @in_guaranteed CallScreeningTrackingStateResult) -> (@out ())(uint64_t a1, char a2, int *a3)
{
  *(unsigned char *)(v3 + 24) = a2 & 1;
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return v6();
}

uint64_t AnsweringMachineTrackingServiceAdapter.onResult.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v1);
  return v2;
}

uint64_t AnsweringMachineTrackingServiceAdapter.onResult.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  OUTLINED_FUNCTION_11_0();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  v3[1] = v0;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v4);
}

uint64_t (*AnsweringMachineTrackingServiceAdapter.onResult.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t AnsweringMachineTrackingServiceAdapter.__allocating_init(logger:answeringMachine:)()
{
  return AnsweringMachineTrackingServiceAdapter.init(logger:answeringMachine:)();
}

uint64_t AnsweringMachineTrackingServiceAdapter.init(logger:answeringMachine:)()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t v3 = (void *)(v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)(v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = 0;
  uint64_t v5 = v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v2);
  *(void *)(v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.answeringMachine) = v0;
  return CallScreeningTrackingService.init()();
}

uint64_t AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v6 = *(void *)(*(void *)v3 + 112);
  OUTLINED_FUNCTION_5_3();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v15 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v15);
  uint64_t v16 = swift_allocObject();
  uint64_t v32 = v3;
  swift_weakInit();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  int v31 = v11;
  v17(v11, a1, v6);
  uint64_t v18 = one-time initialization token for shared;
  swift_retain();
  uint64_t v19 = a3;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = static CKStateMachineActor.shared;
  uint64_t v21 = lazy protocol witness table accessor for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType((unint64_t *)&lazy protocol witness table cache variable for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType, (void (*)(uint64_t))type metadata accessor for CKStateMachineActor.ActorType);
  unint64_t v22 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  double v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = v20;
  *((void *)v23 + 3) = v21;
  *((void *)v23 + 4) = v6;
  *((void *)v23 + 5) = v16;
  uint64_t v24 = v33;
  *((void *)v23 + 6) = v33;
  *((void *)v23 + 7) = v19;
  uint64_t v25 = v19;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v23[v22], v31, v6);
  swift_retain();
  swift_release();
  uint64_t v26 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  char v27 = (uint64_t *)(v32 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask);
  OUTLINED_FUNCTION_11_0();
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  *char v27 = v24;
  v27[1] = v25;
  v27[2] = v26;
  swift_bridgeObjectRetain();
  return outlined consume of (callUUID: String, Task<(), Never>)?(v28, v29);
}

uint64_t sub_1C33E18A4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static CKStateMachineActor.shared;
  v7[13] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:), v8, 0);
}

uint64_t closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_118_0();
  a20 = v22;
  OUTLINED_FUNCTION_2();
  uint64_t Strong = swift_weakLoadStrong();
  v22[14] = Strong;
  if (Strong)
  {
    uint64_t v26 = (uint64_t *)(Strong + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
    OUTLINED_FUNCTION_2();
    uint64_t v27 = *v26;
    v22[15] = *v26;
    v22[16] = v26[1];
    if (v27)
    {
      id v52 = (char *)&async function pointer to specialized AnsweringMachineService.handleNewIncomingCall(_:)
          + async function pointer to specialized AnsweringMachineService.handleNewIncomingCall(_:);
      swift_retain();
      uint64_t v28 = (void *)swift_task_alloc();
      v22[17] = v28;
      *uint64_t v28 = v22;
      v28[1] = closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:);
      OUTLINED_FUNCTION_263();
      return v31(v29, v30, v31, v32, v33, v34, v35, v36, a9, v52, a11, a12, a13, a14);
    }
    uint64_t v38 = AnsweringMachineTrackingServiceAdapter.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRetain();
    char v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      a10 = v22 + 8;
      uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_37();
      a11 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v43 = 136446210;
      a9 = v43 + 4;
      swift_bridgeObjectRetain();
      v22[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v41, v42, "%{public}s Unable to update with onResult as its nil", v43, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      swift_release();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
  }
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_263();
  return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
}

uint64_t closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:)()
{
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_66();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *(int **)(v1 + 120);
  uint64_t v7 = *v2;
  *uint64_t v5 = *v2;
  v4[18] = v0;
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v8 = (void *)swift_task_alloc();
  v4[19] = v8;
  *uint64_t v8 = v7;
  if (v0)
  {
    v8[1] = closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:);
    uint64_t v9 = v4[12];
    uint64_t v10 = 1;
  }
  else
  {
    v8[1] = closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:);
    uint64_t v9 = v4[12];
    uint64_t v10 = 0;
  }
  return v12(v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:), v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 120));
  swift_release();
  OUTLINED_FUNCTION_6();
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:), v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void **)(v0 + 144);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 120));
  swift_release();

  OUTLINED_FUNCTION_6();
  return v2();
}

uint64_t AnsweringMachineTrackingServiceAdapter.description.getter()
{
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x80000001C37ACE80;
  v1._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v1);
  uint64_t v2 = v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask;
  swift_beginAccess();
  if (*(void *)(v2 + 8)) {
    swift_bridgeObjectRetain();
  }
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CallScreeningActor.shared;
  v3[12] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](specialized AnsweringMachineService.handleNewIncomingCall(_:), v4, 0);
}

uint64_t specialized AnsweringMachineService.handleNewIncomingCall(_:)()
{
  int v45 = v0;
  swift_bridgeObjectRetain();
  Swift::String v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = v0[9];
    uint64_t v42 = v0[8];
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v44 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v3, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v1, v2, "New incoming call: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v5 = (uint64_t *)(v0[10] + *(void *)(*(void *)v0[10] + 144));
  OUTLINED_FUNCTION_11_0();
  uint64_t v6 = *v5;
  uint64_t v7 = MEMORY[0x1E4FBC848];
  if (!*v5)
  {
    uint64_t v13 = v0[9];
    uint64_t v12 = v13;
    goto LABEL_22;
  }
  uint64_t v9 = v5[1];
  uint64_t v8 = v5[2];
  swift_bridgeObjectRetain();
  if (!v8)
  {
    uint64_t v43 = v0[9];
    goto LABEL_15;
  }
  if (v9 == v0[8] && v8 == v0[9])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v6 = *v5;
      uint64_t v12 = v0[9];
      if (*v5)
      {
        uint64_t v43 = v0[9];
        uint64_t v9 = v5[1];
LABEL_15:
        unint64_t v14 = v5[2];
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        outlined copy of (task: Task<(), Error>, call: String)?(v6);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_37();
          uint64_t v44 = OUTLINED_FUNCTION_9_0();
          *(_DWORD *)uint64_t v17 = 136446210;
          swift_release();
          v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v14, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_release();
          _os_log_impl(&dword_1C2F90000, v15, v16, "Removing call: %{public}s", v17, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          uint64_t v7 = MEMORY[0x1E4FBC848];
          OUTLINED_FUNCTION_3();
        }
        else
        {
          swift_release_n();
          swift_bridgeObjectRelease_n();
        }

        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        MEMORY[0x1C8773690](v6, v7 + 8, v26, MEMORY[0x1E4FBC0F0]);
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v13 = v0[9];
        uint64_t v12 = v43;
        goto LABEL_22;
      }
      uint64_t v13 = v0[9];
LABEL_22:
      uint64_t v28 = v0[10];
      uint64_t v27 = v0[11];
      uint64_t v29 = v0[8];
      static TaskPriority.userInitiated.getter();
      uint64_t v30 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload(v27, 0, 1, v30);
      uint64_t v31 = static CallScreeningActor.shared;
      uint64_t v32 = lazy protocol witness table accessor for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType((unint64_t *)&lazy protocol witness table cache variable for type CallScreeningActor.ActorType and conformance CallScreeningActor.ActorType, (void (*)(uint64_t))type metadata accessor for CallScreeningActor.ActorType);
      uint64_t v33 = (void *)swift_allocObject();
      void v33[2] = v31;
      v33[3] = v32;
      uint64_t v33[4] = v28;
      v33[5] = v29;
      v33[6] = v13;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v34 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:), (uint64_t)v33);
      v0[13] = v34;
      uint64_t v35 = *v5;
      *uint64_t v5 = v34;
      v5[1] = v29;
      v5[2] = v12;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined consume of (task: Task<(), Error>, call: String)?(v35);
      uint64_t v36 = (void *)swift_task_alloc();
      v0[14] = v36;
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *uint64_t v36 = v0;
      v36[1] = specialized AnsweringMachineService.handleNewIncomingCall(_:);
      uint64_t v38 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v39 = MEMORY[0x1E4FBC0F0];
      return MEMORY[0x1F4187D90](v37, v34, v38, v37, v39);
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = OUTLINED_FUNCTION_2_12(v19);
  unint64_t v21 = v0[9];
  if (v20)
  {
    uint64_t v22 = v0[8];
    uint64_t v23 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v44 = OUTLINED_FUNCTION_9_0();
    *uint64_t v23 = 136446210;
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v44);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_27(&dword_1C2F90000, v24, v25, "New incoming call already being handled: %{public}s");
    OUTLINED_FUNCTION_119();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v40();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  OUTLINED_FUNCTION_0_66();
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  unint64_t v3 = *(void *)(v1 + 96);
  if (v0) {
    uint64_t v4 = specialized AnsweringMachineService.handleNewIncomingCall(_:);
  }
  else {
    uint64_t v4 = specialized AnsweringMachineService.handleNewIncomingCall(_:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

Swift::Void __swiftcall AnsweringMachineTrackingServiceAdapter.stopTrackingCall(callUUID:)(Swift::String callUUID)
{
  OUTLINED_FUNCTION_4_15();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v2 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask);
  OUTLINED_FUNCTION_2();
  uint64_t v8 = v7[1];
  if (v8
    && ((uint64_t v9 = *v7, v10 = v7[2], v9 == v3) ? (v11 = v8 == v1) : (v11 = 0),
        v11 || (OUTLINED_FUNCTION_30_15(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    static TaskPriority.userInitiated.getter();
    uint64_t v12 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v12);
    uint64_t v13 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v14 = static CKStateMachineActor.shared;
    uint64_t v15 = lazy protocol witness table accessor for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType((unint64_t *)&lazy protocol witness table cache variable for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType, (void (*)(uint64_t))type metadata accessor for CKStateMachineActor.ActorType);
    os_log_type_t v16 = (void *)swift_allocObject();
    _OWORD v16[2] = v14;
    v16[3] = v15;
    v16[4] = v9;
    v16[5] = v8;
    void v16[6] = v10;
    void v16[7] = v2;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v17 = AnsweringMachineTrackingServiceAdapter.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    BOOL v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_107(v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v23 = OUTLINED_FUNCTION_30_15();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v20, (os_log_type_t)v8, "%{public}s Unable to stop tracking call %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in AnsweringMachineTrackingServiceAdapter.stopTrackingCall(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = a7;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineTrackingServiceAdapter.stopTrackingCall(callUUID:), v8, 0);
}

uint64_t closure #1 in AnsweringMachineTrackingServiceAdapter.stopTrackingCall(callUUID:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void *)(v0 + 48);
  MEMORY[0x1C8773690](*(void *)(v0 + 40), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
  uint64_t v2 = (uint64_t *)(v1 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask);
  OUTLINED_FUNCTION_11_0();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  v2[1] = 0;
  v2[2] = 0;
  uint64_t *v2 = 0;
  outlined consume of (callUUID: String, Task<(), Never>)?(v3, v4);
  OUTLINED_FUNCTION_6();
  return v5();
}

void AnsweringMachineTrackingServiceAdapter.__allocating_init()()
{
}

void AnsweringMachineTrackingServiceAdapter.init()()
{
}

uint64_t AnsweringMachineTrackingServiceAdapter.__ivar_destroyer()
{
  uint64_t v1 = v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult));
  uint64_t v3 = *(void *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask);
  uint64_t v4 = *(void *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask + 8);
  return outlined consume of (callUUID: String, Task<(), Never>)?(v3, v4);
}

uint64_t AnsweringMachineTrackingServiceAdapter.deinit()
{
  uint64_t v0 = CallScreeningTrackingService.deinit();
  uint64_t v1 = v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult));
  outlined consume of (callUUID: String, Task<(), Never>)?(*(void *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask), *(void *)(v0 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask + 8));
  return v0;
}

uint64_t AnsweringMachineTrackingServiceAdapter.__deallocating_deinit()
{
  AnsweringMachineTrackingServiceAdapter.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnsweringMachineTrackingServiceAdapter<A>()
{
  return AnsweringMachineTrackingServiceAdapter.description.getter();
}

uint64_t sub_1C33E3090()
{
  uint64_t v1 = *(void *)(v0 + 32);
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = (uint64_t)v1
     + ((*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80));
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_10(v9);
  *uint64_t v10 = v11;
  v10[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return closure #1 in AnsweringMachineTrackingServiceAdapter.startTrackingCall(requester:callUUID:)(a1, v4, v3, v5, v6, v7, v8);
}

uint64_t outlined consume of (callUUID: String, Task<(), Never>)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized AnsweringMachineService.requestToScreen(call:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[2] = a1;
  v3[3] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CallScreeningActor.shared;
  v3[8] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](specialized AnsweringMachineService.requestToScreen(call:), v4, 0);
}

uint64_t specialized AnsweringMachineService.requestToScreen(call:)()
{
  OUTLINED_FUNCTION_55();
  uint64_t v13 = v0;
  v0[9] = direct field offset for AnsweringMachineService.logger;
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v2))
  {
    unint64_t v3 = v0[6];
    uint64_t v4 = v0[5];
    uint64_t v5 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v12 = OUTLINED_FUNCTION_9_0();
    *uint64_t v5 = 136446210;
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v12);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_27(&dword_1C2F90000, v6, v7, "Requesting to screen call: %{public}s");
    OUTLINED_FUNCTION_119();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v0[7];
  v0[10] = *(void *)(v8 + 32);
  v0[11] = *(void *)(v8 + 40);
  type metadata accessor for MainActor();
  v0[12] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](specialized AnsweringMachineService.requestToScreen(call:), v10, v9);
}

{
  void *v0;
  void (*v1)(void *, void);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = (void (*)(void *, void))v0[10];
  swift_release();
  v1(v0 + 2, 0);
  v0[13] = 0;
  os_log_type_t v2 = v0[8];
  return MEMORY[0x1F4188298](specialized AnsweringMachineService.requestToScreen(call:), v2, 0);
}

uint64_t specialized AnsweringMachineService.requestToScreen(call:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_38_15();
  a19 = v21;
  a20 = v22;
  OUTLINED_FUNCTION_55();
  a18 = v20;
  uint64_t v23 = v20[2];
  unint64_t v24 = v20[3];
  swift_bridgeObjectRetain();
  uint64_t v25 = (void *)Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v26))
  {
    uint64_t v27 = (_DWORD *)OUTLINED_FUNCTION_37();
    a10 = OUTLINED_FUNCTION_9_0();
    *uint64_t v27 = 136446210;
    v20[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v28, v29, "Screening call: %{public}s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_40();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t specialized AnsweringMachineService.requestToScreen(call:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v24;
  a22 = v25;
  OUTLINED_FUNCTION_118_0();
  a20 = v23;
  uint64_t v26 = v23[2];
  uint64_t v27 = (void *)v23[13];
  unint64_t v28 = v23[3];
  swift_bridgeObjectRetain();
  id v29 = v27;
  swift_bridgeObjectRetain();
  id v30 = v27;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_2_12(v32))
  {
    uint64_t v33 = (void *)v23[13];
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    a9 = OUTLINED_FUNCTION_9_0();
    a10 = a9;
    *(_DWORD *)uint64_t v34 = 136446466;
    v23[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2112;
    id v36 = v33;
    uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
    v23[4] = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v35 = v37;

    _os_log_impl(&dword_1C2F90000, v31, v22, "Failed to screen call: %{public}s with error %@", (uint8_t *)v34, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v38 = (void *)v23[13];
    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_263();
  return v40(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14);
}

uint64_t specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  v6[2] = a5;
  _OWORD v6[3] = a6;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static CallScreeningActor.shared;
  v6[10] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:), v7, 0);
}

uint64_t specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_290();
  OUTLINED_FUNCTION_118_0();
  v14[11] = direct field offset for AnsweringMachineService.logger;
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v16))
  {
    uint64_t v18 = v14[8];
    unint64_t v17 = v14[9];
    OUTLINED_FUNCTION_37();
    a11 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_29_28(4.8751e-34);
    v14[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v19);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v20, v21, "Waiting to screen call: %{public}s");
    OUTLINED_FUNCTION_119();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v32 = *(void *)(v14[7] + 16) + **(int **)(v14[7] + 16);
  os_log_type_t v22 = (void *)swift_task_alloc();
  v14[12] = v22;
  void *v22 = v14;
  v22[1] = specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  OUTLINED_FUNCTION_263();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, v32, a11, a12, a13, a14);
}

{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  os_log_type_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  OUTLINED_FUNCTION_290();
  OUTLINED_FUNCTION_118_0();
  if (*(unsigned char *)(v14 + 128) == 1 && (static Task<>.isCancelled.getter() & 1) == 0)
  {
    unint64_t v40 = (char *)&async function pointer to specialized AnsweringMachineService.requestToScreen(call:)
        + async function pointer to specialized AnsweringMachineService.requestToScreen(call:);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v14 + 112) = v31;
    *uint64_t v31 = v14;
    v31[1] = specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
    OUTLINED_FUNCTION_30_15();
    OUTLINED_FUNCTION_263();
    return v34(v32, v33, v34, v35, v36, v37, v38, v39, a9, v40, a11, a12, a13, a14);
  }
  else
  {
    os_log_type_t v16 = *(void *)(v14 + 16);
    uint64_t v15 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
    unint64_t v17 = (void *)Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v18))
    {
      OUTLINED_FUNCTION_37();
      a11 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_29_28(4.8751e-34);
      *(void *)(v14 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v19);
      OUTLINED_FUNCTION_60_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v20, v21, "Will not screen call: %{public}s");
      OUTLINED_FUNCTION_119();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_263();
    return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)()
{
  OUTLINED_FUNCTION_49_0();
  char v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 104) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 80);
  if (v0)
  {
    uint64_t v8 = specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  }
  else
  {
    *(unsigned char *)(v5 + 128) = v3 & 1;
    uint64_t v8 = specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_0_66();
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  char v3 = *(void *)(v1 + 80);
  if (v0) {
    uint64_t v4 = specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  }
  else {
    uint64_t v4 = specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_7_4();
  return v0();
}

uint64_t specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_38_15();
  OUTLINED_FUNCTION_55();
  uint64_t v14 = *(void **)(v12 + 104);
  OUTLINED_FUNCTION_26_32();
  id v15 = v14;
  os_log_type_t v16 = (void *)Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v17))
  {
    OUTLINED_FUNCTION_37();
    uint64_t v18 = (void *)swift_slowAlloc();
    OUTLINED_FUNCTION_24_3(5.7779e-34);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_17_41(v19);
    *uint64_t v18 = v13;

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v20, v21, "Failed to handle new incoming call with error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  swift_willThrow();
  OUTLINED_FUNCTION_40();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_38_15();
  OUTLINED_FUNCTION_55();
  uint64_t v14 = *(void **)(v12 + 120);
  OUTLINED_FUNCTION_26_32();
  id v15 = v14;
  os_log_type_t v16 = (void *)Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v17))
  {
    OUTLINED_FUNCTION_37();
    uint64_t v18 = (void *)swift_slowAlloc();
    OUTLINED_FUNCTION_24_3(5.7779e-34);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_17_41(v19);
    *uint64_t v18 = v13;

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v20, v21, "Failed to handle new incoming call with error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  swift_willThrow();
  OUTLINED_FUNCTION_40();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t sub_1C33E4178()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnsweringMachineTrackingServiceAdapter.stopTrackingCall(callUUID:)()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_10(v4);
  *uint64_t v5 = v6;
  v5[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v7 = OUTLINED_FUNCTION_275();
  return closure #1 in AnsweringMachineTrackingServiceAdapter.stopTrackingCall(callUUID:)(v7, v8, v9, v10, v1, v3, v2);
}

uint64_t sub_1C33E428C()
{
  return 8;
}

void *sub_1C33E4298(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for AnsweringMachineTrackingServiceAdapter()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AnsweringMachineTrackingServiceAdapter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AnsweringMachineTrackingServiceAdapter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnsweringMachineTrackingServiceAdapter);
}

uint64_t dispatch thunk of AnsweringMachineTrackingServiceAdapter.__allocating_init(logger:answeringMachine:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t sub_1C33E4398()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @in_guaranteed CallScreeningTrackingStateResult) -> (@out ())()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v3 = v2;
  char v5 = v4 & 1;
  uint64_t v6 = *(int **)(v0 + 24);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v8 = (uint64_t (*)(uint64_t, char, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @in_guaranteed CallScreeningTrackingStateResult) -> (@out ())
                                                    + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @in_guaranteed CallScreeningTrackingStateResult) -> (@out ()));
  return v8(v3, v5, v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @unowned CallScreeningTrackingStateResult) -> ()(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = *(int **)(v3 + 24);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_10(v8);
  *uint64_t v9 = v10;
  v9[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @unowned CallScreeningTrackingStateResult) -> ()
                                                                           + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A, @unowned CallScreeningTrackingStateResult) -> ());
  return v11(a1, a2, a3, v7);
}

uint64_t specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  *uint64_t v12 = v5;
  v12[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(a1, a2, a3, a4, v10, v11);
}

uint64_t sub_1C33E463C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v3 = OUTLINED_FUNCTION_275();
  return v4(v3);
}

uint64_t outlined consume of (task: Task<(), Error>, call: String)?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of (task: Task<(), Error>, call: String)?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t static UIImage.image(named:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  char v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized static UIImage.image(named:)((uint64_t)v4, v1, v2, v3);
}

id static UIImage.symbolImage(for:)(uint64_t a1)
{
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(a1 + 40, (uint64_t)v17, &demangling cache variable for type metadata for UIImageSymbolWeight?);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for UIImageSymbolWeight?);
  if (v19)
  {
    Class isa = (Class)objc_msgSend(self, sel_configurationWithTextStyle_scale_, *(void *)(a1 + 24), *(void *)(a1 + 16));
  }
  else
  {
    UIImageSymbolWeight v3 = v18;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageSymbolConfiguration);
    Class isa = UIImageSymbolConfiguration.init(staticTextStyle:scale:weight:)((UIFontTextStyle)*(id *)(a1 + 24), *(UIImageSymbolScale *)(a1 + 16), v3).super.super.isa;
  }
  Class v4 = isa;
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(a1 + 56, (uint64_t)&v16, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v16, (uint64_t)&v20, &demangling cache variable for type metadata for UIColor?);
  uint64_t v5 = v20;
  if (v20)
  {
    uint64_t v6 = self;
    outlined retain of UIColor?(&v16);
    uint64_t v7 = v4;
    id v8 = objc_msgSend(v6, sel_configurationWithHierarchicalColor_, v5);
    Class v4 = (Class)[(objc_class *)v7 configurationByApplyingConfiguration:v8];

    outlined release of BackgroundView<A>(&v16);
  }
  char v9 = *(unsigned char *)(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v11 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    id v12 = @nonobjc UIImage.__allocating_init(systemName:)();
    if (v12) {
      goto LABEL_10;
    }
LABEL_11:

    return 0;
  }
  swift_bridgeObjectRetain();
  id v12 = @nonobjc UIImage.init(_systemName:)(v11, v10);
  if (!v12) {
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v12, sel_imageWithSymbolConfiguration_, v4);

  return v14;
}

id @nonobjc UIImage.init(_systemName:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__systemImageNamed_, v2);

  return v3;
}

uint64_t protocol witness for static NamedImageProviding.image(named:) in conformance UIImage(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  Class v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized static UIImage.image(named:)((uint64_t)v4, v1, v2, v3);
}

UIImageSymbolConfiguration __swiftcall UIImageSymbolConfiguration.init(staticTextStyle:scale:weight:)(UIFontTextStyle staticTextStyle, UIImageSymbolScale scale, UIImageSymbolWeight weight)
{
  id v6 = objc_msgSend(self, sel_traitCollectionWithPreferredContentSizeCategory_, *MEMORY[0x1E4FB27D8]);
  id v7 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_, staticTextStyle, v6);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  objc_msgSend(v7, sel_pointSize);
  id v9 = objc_msgSend(ObjCClassFromMetadata, sel_configurationWithPointSize_weight_scale_, weight, scale);

  return (UIImageSymbolConfiguration)v9;
}

id protocol witness for static SymbolImageProviding.symbolImage(for:) in conformance UIImage(uint64_t a1)
{
  return static UIImage.symbolImage(for:)(a1);
}

unint64_t static UIImage.radialGradient(withColors:size:)(unint64_t result, double a2, double a3)
{
  unint64_t v5 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 < 2)
  {
    __break(1u);
  }
  else
  {
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17D8]), sel_initWithSize_, a2, a3);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v5;
    *(double *)(v8 + 24) = a2;
    *(double *)(v8 + 32) = a3;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for closure #1 in static UIImage.radialGradient(withColors:size:);
    *(void *)(v9 + 24) = v8;
    v12[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RecentLinkCallItems) -> ();
    v12[5] = v9;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1107296256;
    v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v12[3] = &block_descriptor_67;
    uint64_t v10 = _Block_copy(v12);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    id v11 = objc_msgSend(v7, sel_imageWithActions_, v10);

    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((v7 & 1) == 0) {
      return (unint64_t)v11;
    }
  }
  __break(1u);
  return result;
}

void closure #1 in static UIImage.radialGradient(withColors:size:)(void *a1, unint64_t a2, double a3, double a4)
{
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    uint64_t v10 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x1C87744F0](v10, a2);
      }
      else {
        id v11 = *(id *)(a2 + 8 * v10 + 32);
      }
      id v12 = v11;
      ++v10;
      id v13 = objc_msgSend(v11, sel_CGColor);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v9 != v10);
  }
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v9 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v24 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v15 = 0;
    uint64_t v14 = v24;
    unint64_t v16 = *(void *)(v24 + 16);
    do
    {
      if (v16 >= *(void *)(v24 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v24 + 16) = v16 + 1;
      *(double *)(v24 + 8 * v16++ + 32) = 1.0 / (double)(v9 - 1) * (double)v15++;
    }
    while (v9 != v15);
  }
  type metadata accessor for CGColorRef(0);
  space = DeviceRGB;
  CFArrayRef isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  UIImageSymbolWeight v18 = CGGradientCreateWithColors(space, isa, (const CGFloat *)(v14 + 32));

  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_28;
  }
  double v19 = a4 * 0.5;
  if (a4 >= a3) {
    double v20 = a3;
  }
  else {
    double v20 = a4;
  }
  CGFloat v21 = v20 * 0.5;
  uint64_t v22 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v26.x = a3 * 0.5;
  v26.double y = v19;
  v27.x = a3 * 0.5;
  v27.double y = v19;
  CGContextDrawRadialGradient(v22, v18, v26, 0.0, v27, v21, 2u);
}

uint64_t thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t specialized static UIImage.image(named:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v27[3] = a3;
  v27[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v10 = v9;
  id v11 = self;
  id v12 = objc_msgSend(v11, sel_conversationKit);
  id v13 = objc_msgSend(self, sel_mainScreen);
  id v14 = objc_msgSend(v13, sel_traitCollection);

  id v15 = @nonobjc UIImage.__allocating_init(named:in:compatibleWith:)(v8, v10, v12, v14);
  if (v15)
  {
    id v16 = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    return (uint64_t)v16;
  }
  else
  {
    outlined init with copy of IDSLookupManager((uint64_t)v27, (uint64_t)v26);
    _StringGuts.grow(_:)(38);
    v18._object = (void *)0x80000001C37950C0;
    v18._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageName);
    _print_unlocked<A, B>(_:_:)();
    v19._uint64_t countAndFlagsBits = 0x7562206D6F726620;
    v19._object = (void *)0xED000020656C646ELL;
    String.append(_:)(v19);
    id v20 = objc_msgSend(v11, sel_conversationKit);
    id v21 = objc_msgSend(v20, sel_description);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);

    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id *outlined retain of UIColor?(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1C33E5420()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in static UIImage.radialGradient(withColors:size:)(void *a1)
{
  closure #1 in static UIImage.radialGradient(withColors:size:)(a1, *(void *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1C33E5464()
{
  return swift_deallocObject();
}

__n128 ClarityUIOutgoingCallActionsNavigationDestination.init(contact:actions:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[1].n128_u64[1];
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = v3;
  a3[1].n128_u64[1] = v4;
  a3[2].n128_u64[0] = a2;
  return result;
}

void ClarityUIOutgoingCallActionsView.navigationPath.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  JUMPOUT(0x1C87728E0);
}

uint64_t key path setter for ClarityUIOutgoingCallActionsView.navigationPath : ClarityUIOutgoingCallActionsView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigationPath();
  __n128 v3 = MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return ClarityUIOutgoingCallActionsView.navigationPath.setter((uint64_t)v5);
}

uint64_t ClarityUIOutgoingCallActionsView.navigationPath.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigationPath();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 - v6, a1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

void (*ClarityUIOutgoingCallActionsView.navigationPath.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = type metadata accessor for NavigationPath();
  *uint64_t v3 = v4;
  OUTLINED_FUNCTION_1(v4);
  v3[1] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[2] = malloc(v7);
  v3[3] = malloc(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  v3[4] = v8;
  OUTLINED_FUNCTION_0();
  uint64_t v10 = malloc(*(void *)(v9 + 64));
  v3[5] = v10;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v1, (uint64_t)v10, &demangling cache variable for type metadata for Binding<NavigationPath>);
  MEMORY[0x1C87728E0](v8);
  return ClarityUIOutgoingCallActionsView.navigationPath.modify;
}

void ClarityUIOutgoingCallActionsView.navigationPath.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 16);
  uint64_t v5 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v6 = *v2;
    uint64_t v7 = v2[1];
    (*(void (**)(void, void *, void))(v7 + 16))(*(void *)(*(void *)a1 + 16), v5, *v2);
    Binding.wrappedValue.setter();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v3, &demangling cache variable for type metadata for Binding<NavigationPath>);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    Binding.wrappedValue.setter();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v3, &demangling cache variable for type metadata for Binding<NavigationPath>);
  }
  free(v3);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t ClarityUIOutgoingCallActionsView.$navigationPath.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  return Binding.projectedValue.getter();
}

uint64_t ClarityUIOutgoingCallActionsView.contact.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClarityUIOutgoingCallActionsView() + 20);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  *a1 = *(void *)v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  id v8 = v4;
  id v9 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ClarityUIOutgoingCallActionsView()
{
  uint64_t result = type metadata singleton initialization cache for ClarityUIOutgoingCallActionsView;
  if (!type metadata singleton initialization cache for ClarityUIOutgoingCallActionsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 ClarityUIOutgoingCallActionsView.contact.setter(__n128 *a1)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[1].n128_u64[1];
  uint64_t v5 = v1 + *(int *)(type metadata accessor for ClarityUIOutgoingCallActionsView() + 20);
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  swift_bridgeObjectRelease();

  __n128 result = *a1;
  *(__n128 *)uint64_t v5 = *a1;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  return result;
}

uint64_t (*ClarityUIOutgoingCallActionsView.contact.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ClarityUIOutgoingCallActionsView.actions.getter()
{
  type metadata accessor for ClarityUIOutgoingCallActionsView();
  return swift_bridgeObjectRetain();
}

uint64_t ClarityUIOutgoingCallActionsView.actions.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ClarityUIOutgoingCallActionsView() + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ClarityUIOutgoingCallActionsView.actions.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ClarityUIOutgoingCallActionsView.effectiveActions.getter()
{
  uint64_t v1 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  uint64_t v2 = *(int *)(v1 + 24);
  if (*(void *)(v0 + v2))
  {
    uint64_t v3 = *(void *)(v0 + v2);
  }
  else
  {
    uint64_t v4 = v0 + *(int *)(v1 + 20);
    uint64_t v5 = *(void **)(v4 + 8);
    uint64_t v6 = *(void **)(v4 + 16);
    uint64_t v7 = *(void **)(v4 + 24);
    v11[0] = *(id *)v4;
    v11[1] = v5;
    v11[2] = v6;
    v11[3] = v7;
    id v8 = v11[0];
    id v9 = v5;
    swift_bridgeObjectRetain();
    uint64_t v3 = ClarityUIOutgoingCallActionProvider.outgoingCallActions(for:)((uint64_t)v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t ClarityUIOutgoingCallActionsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v2 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  uint64_t v3 = OUTLINED_FUNCTION_1(v2);
  uint64_t v53 = v4;
  uint64_t v54 = v3;
  uint64_t v52 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v51 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>);
  MEMORY[0x1F4188790](v19 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v22 = v21 - v20;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  uint64_t v49 = v25 - v24;
  *(void *)uint64_t v22 = static HorizontalAlignment.center.getter();
  *(void *)(v22 + 8) = 0;
  *(unsigned char *)(v22 + 16) = 1;
  uint64_t v26 = v22
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>)
               + 44);
  uint64_t v56 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>);
  lazy protocol witness table accessor for type ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?> and conformance <> ForEach<A, B, C>(&lazy protocol witness table cache variable for type ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?> and conformance <> ForEach<A, B, C>, &demangling cache variable for type metadata for ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>, (void (*)(void))lazy protocol witness table accessor for type ActionNavigationLink? and conformance <A> A?);
  List<>.init(content:)();
  uint64_t v27 = static Animation.default.getter();
  uint64_t v28 = ClarityUIOutgoingCallActionsView.effectiveActions.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v18, v13, v7);
  uint64_t v29 = (uint64_t *)(v18 + *(int *)(v15 + 44));
  *uint64_t v29 = v27;
  v29[1] = v28;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
  uint64_t v30 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v18, v26, &demangling cache variable for type metadata for ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>);
  uint64_t v32 = (uint64_t *)(v26
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>)
                           + 36));
  *uint64_t v32 = KeyPath;
  v32[1] = v30;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v18, &demangling cache variable for type metadata for ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>);
  uint64_t v33 = v51;
  outlined init with copy of ClarityUIOutgoingCallActionsView(v1, v51);
  unint64_t v34 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v35 = swift_allocObject();
  outlined init with take of ClarityUIOutgoingCallActionsView(v33, v35 + v34);
  uint64_t v36 = v49;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v22, v49, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>);
  uint64_t v37 = (void (**)())(v36 + *(int *)(v50 + 36));
  void *v37 = partial apply for closure #2 in ClarityUIOutgoingCallActionsView.body.getter;
  v37[1] = (void (*)())v35;
  v37[2] = 0;
  v37[3] = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v22, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>);
  uint64_t v38 = v1 + *(int *)(v54 + 28);
  uint64_t v39 = *(void **)(v38 + 8);
  id v40 = *(id *)v38;
  id v41 = v39;
  swift_bridgeObjectRetain();
  uint64_t v42 = CNContact.clarityUIDisplayName.getter();
  uint64_t v44 = v43;
  swift_bridgeObjectRelease();

  uint64_t v59 = v42;
  uint64_t v60 = v44;
  id v57 = v40;
  id v58 = v41;
  lazy protocol witness table accessor for type ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar();
  id v45 = v40;
  id v46 = v41;
  View.navigationTitle<A, B>(_:icon:)();
  swift_bridgeObjectRelease();

  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v36, &demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier>);
}

uint64_t closure #1 in closure #1 in ClarityUIOutgoingCallActionsView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  v8[1] = ClarityUIOutgoingCallActionsView.effectiveActions.getter();
  swift_getKeyPath();
  outlined init with copy of ClarityUIOutgoingCallActionsView(a1, (uint64_t)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  outlined init with take of ClarityUIOutgoingCallActionsView((uint64_t)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClarityUIOutgoingCallAction]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionNavigationLink?);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [ClarityUIOutgoingCallAction] and conformance [A], &demangling cache variable for type metadata for [ClarityUIOutgoingCallAction]);
  lazy protocol witness table accessor for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction();
  lazy protocol witness table accessor for type ActionNavigationLink? and conformance <A> A?();
  return ForEach<>.init(_:id:content:)();
}

uint64_t partial apply for closure #1 in closure #1 in ClarityUIOutgoingCallActionsView.body.getter()
{
  return closure #1 in closure #1 in ClarityUIOutgoingCallActionsView.body.getter(*(void *)(v0 + 16));
}

uint64_t lazy protocol witness table accessor for type ActionNavigationLink? and conformance <A> A?()
{
  return lazy protocol witness table accessor for type ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?> and conformance <> ForEach<A, B, C>(&lazy protocol witness table cache variable for type ActionNavigationLink? and conformance <A> A?, &demangling cache variable for type metadata for ActionNavigationLink?, (void (*)(void))lazy protocol witness table accessor for type ActionNavigationLink and conformance ActionNavigationLink);
}

uint64_t lazy protocol witness table accessor for type ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?> and conformance <> ForEach<A, B, C>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionNavigationLink and conformance ActionNavigationLink()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionNavigationLink and conformance ActionNavigationLink;
  if (!lazy protocol witness table cache variable for type ActionNavigationLink and conformance ActionNavigationLink)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionNavigationLink and conformance ActionNavigationLink);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in ClarityUIOutgoingCallActionsView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4)
  {
    uint64_t v6 = *((unsigned __int8 *)a1 + 16);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    uint64_t v9 = a2 + *(int *)(type metadata accessor for ClarityUIOutgoingCallActionsView() + 20);
    id v10 = *(id *)v9;
    uint64_t v11 = *(void **)(v9 + 8);
    uint64_t v13 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 24);
    id v14 = *(id *)v9;
    id v15 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v5;
  }
  else
  {
    id v10 = 0;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v16 = 0;
  }
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v12;
  a3[4] = v8;
  a3[5] = v7;
  a3[6] = v6;
  a3[7] = v4;
  a3[8] = v16;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

void closure #2 in ClarityUIOutgoingCallActionsView.body.getter(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for ClarityUIOutgoingCallActionsView() + 20);
  uint64_t v2 = *(void **)(v1 + 8);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  v7[0] = *(id *)v1;
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  id v6 = v7[0];
  id v5 = v2;
  swift_bridgeObjectRetain();
  v9.cnContact.super.CFArrayRef isa = (Class)v7;
  ClarityUICallHistory.markRecentCallsAsRead(for:)(v9);
  swift_bridgeObjectRelease();
}

uint64_t ClarityUIOutgoingCallActionsView.init(navigationPath:contact:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a1, a4, &demangling cache variable for type metadata for Binding<NavigationPath>);
  ConversationKit::ClarityUIContact v9 = (int *)type metadata accessor for ClarityUIOutgoingCallActionsView();
  uint64_t v10 = a4 + v9[5];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  *(void *)(a4 + v9[6]) = a3;
  uint64_t v11 = v9[7];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(a4 + v11) = static ClarityUIOutgoingCallActionProvider.shared;
  uint64_t v12 = v9[8];
  uint64_t v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  *(void *)(a4 + v12) = static ClarityUICallHistory.shared;
  return swift_retain();
}

uint64_t ActionNavigationLink.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>>);
  MEMORY[0x1F4188790](v22);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(__dst, v2, 0x48uLL);
  ConversationKit::ClarityUIContact v9 = (void *)__dst[0];
  uint64_t v10 = (void *)__dst[1];
  uint64_t v11 = __dst[7];
  uint64_t v12 = __dst[8];
  uint64_t v25 = __dst[0];
  uint64_t v26 = __dst[1];
  uint64_t v27 = __dst[2];
  uint64_t v28 = __dst[3];
  uint64_t v29 = __dst[4];
  uint64_t v30 = __dst[5];
  uint64_t v31 = LOBYTE(__dst[6]);
  uint64_t v32 = __dst[7];
  uint64_t v33 = __dst[8];
  uint64_t v24 = __dst;
  swift_bridgeObjectRetain();
  id v13 = v9;
  id v14 = v10;
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  lazy protocol witness table accessor for type ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination();
  NavigationLink<>.init<A>(value:label:)();
  if (v11)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v11;
    *(void *)(v15 + 24) = v12;
    uint64_t v16 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v16 = 0;
  }
  BOOL v17 = v11 == 0;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v11);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = v17;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  uint64_t v20 = (uint64_t *)&v8[*(int *)(v22 + 36)];
  *uint64_t v20 = KeyPath;
  v20[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v20[2] = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v8, v23, &demangling cache variable for type metadata for ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>>);
}

uint64_t closure #1 in ActionNavigationLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = a1;
  uint64_t v18 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  Label.init(title:icon:)();
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v11 = static Color.green.getter();
  }
  else {
    uint64_t v11 = static Color.orange.getter();
  }
  uint64_t v12 = v11;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = v12;
  swift_retain();
  uint64_t v14 = AnyShapeStyle.init<A>(_:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v10, v7, v4);
  swift_release();
  uint64_t v15 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *uint64_t v15 = KeyPath;
  v15[1] = v14;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v10, a2, &demangling cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
}

uint64_t closure #1 in closure #1 in ActionNavigationLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v3 = (void *)0x80000001C37ACF80;
  }
  else {
    uint64_t v3 = (void *)0x80000001C37ACFA0;
  }
  id v4 = objc_msgSend(self, sel_conversationKit);
  v12._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v5._object = v3;
  v6.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v6.value._object = (void *)0xEF74694B6E6F6974;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v12._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v12);
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v10 & 1;
  *(void *)(a2 + 24) = v11;
  return result;
}

uint64_t closure #2 in closure #1 in ActionNavigationLink.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.TemplateRenderingMode?);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  uint64_t v5 = *MEMORY[0x1E4F3EC20];
  uint64_t v6 = type metadata accessor for Image.TemplateRenderingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v6);
  uint64_t v7 = Image.renderingMode(_:)();
  swift_release();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, &demangling cache variable for type metadata for Image.TemplateRenderingMode?);
  uint64_t v8 = static Color.white.getter();
  uint64_t result = swift_getKeyPath();
  *a1 = v7;
  a1[1] = result;
  a1[2] = v8;
  return result;
}

uint64_t ClarityUIOutgoingCallActionsNavigationDestination.contact.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *a1 = *(void *)v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  id v6 = v2;
  id v7 = v3;
  return swift_bridgeObjectRetain();
}

__n128 ClarityUIOutgoingCallActionsNavigationDestination.contact.setter(__n128 *a1)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[1].n128_u64[1];
  uint64_t v5 = *(void **)v1;
  id v6 = *(void **)(v1 + 8);
  swift_bridgeObjectRelease();

  __n128 result = *a1;
  *(__n128 *)uint64_t v1 = *a1;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  return result;
}

uint64_t (*ClarityUIOutgoingCallActionsNavigationDestination.contact.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ClarityUIOutgoingCallActionsNavigationDestination.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ClarityUIOutgoingCallActionsNavigationDestination.actions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ClarityUIOutgoingCallActionsNavigationDestination.actions.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ClarityUIOutgoingCallActionsNavigationDestination.hash(into:)(uint64_t a1)
{
  unint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void **)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain_n();
  id v6 = v3;
  id v7 = v4;
  String.hash(into:)();

  swift_bridgeObjectRelease_n();
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static ClarityUIOutgoingCallActionsNavigationDestination.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a2[4];
  BOOL v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (v2)
    {
      if (v3)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized static Array<A>.== infix(_:_:)();
        char v8 = v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8) {
          return 1;
        }
      }
    }
    else if (!v3)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int ClarityUIOutgoingCallActionsNavigationDestination.hashValue.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain_n();
  id v4 = v1;
  id v5 = v2;
  String.hash(into:)();

  swift_bridgeObjectRelease_n();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClarityUIOutgoingCallActionsNavigationDestination()
{
  Hasher.init(_seed:)();
  ClarityUIOutgoingCallActionsNavigationDestination.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t key path getter for EnvironmentValues.tintColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C33E7024@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t outlined init with copy of ClarityUIOutgoingCallActionsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ClarityUIOutgoingCallActionsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in ClarityUIOutgoingCallActionsView.body.getter()
{
  uint64_t v1 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  closure #2 in ClarityUIOutgoingCallActionsView.body.getter(v3);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<ModifiedContent<ModifiedContent<List<Never, ForEach<[ClarityUIOutgoingCallAction], ClarityUIOutgoingCallAction, ActionNavigationLink?>>, _AnimationModifier<[ClarityUIOutgoingCallAction]>>, _EnvironmentKeyWritingModifier<Color?>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIOutgoingCallActionsView()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1C33E7298()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ClarityUIOutgoingCallActionsView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    char v7 = a1;
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
                + 32);
    uint64_t v9 = (char *)v7 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NavigationPath();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[5];
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v7 + v12);
    uint64_t v15 = (char *)a2 + v12;
    uint64_t v16 = *(void **)v15;
    BOOL v17 = (void *)*((void *)v15 + 1);
    *uint64_t v14 = *(void *)v15;
    v14[1] = v17;
    uint64_t v18 = *((void *)v15 + 3);
    v14[2] = *((void *)v15 + 2);
    v14[3] = v18;
    *(uint64_t *)((char *)v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v19 = a3[8];
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v7 + v19) = *(uint64_t *)((char *)a2 + v19);
    id v20 = v16;
    id v21 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for ClarityUIOutgoingCallActionsView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v5 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  id v6 = (id *)(a1 + *(int *)(a2 + 20));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for ClarityUIOutgoingCallActionsView(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_retain();
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (char *)a2 + v11;
  uint64_t v15 = *(void **)v14;
  uint64_t v16 = (void *)*((void *)v14 + 1);
  *uint64_t v13 = *(void *)v14;
  v13[1] = v16;
  uint64_t v17 = *((void *)v14 + 3);
  v13[2] = *((void *)v14 + 2);
  v13[3] = v17;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v18 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  id v19 = v15;
  id v20 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ClarityUIOutgoingCallActionsView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *(void **)((char *)a2 + v10);
  uint64_t v14 = *(void **)v11;
  *(void *)uint64_t v11 = v13;
  id v15 = v13;

  uint64_t v16 = (void *)v12[1];
  uint64_t v17 = (void *)*((void *)v11 + 1);
  *((void *)v11 + 1) = v16;
  id v18 = v16;

  *((void *)v11 + 2) = v12[2];
  *((void *)v11 + 3) = v12[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ClarityUIOutgoingCallActionsView(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  long long v13 = *(_OWORD *)((char *)a2 + v11);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 16);
  id v15 = (_OWORD *)((char *)a1 + v11);
  *id v15 = v13;
  v15[1] = v14;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v16 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  return a1;
}

void *assignWithTake for ClarityUIOutgoingCallActionsView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  long long v13 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);

  long long v14 = (void *)v11[1];
  v11[1] = v12[1];

  uint64_t v15 = v12[3];
  v11[2] = v12[2];
  v11[3] = v15;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClarityUIOutgoingCallActionsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C33E7964);
}

uint64_t sub_1C33E7964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ClarityUIOutgoingCallActionsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C33E7A08);
}

void sub_1C33E7A08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void type metadata completion function for ClarityUIOutgoingCallActionsView()
{
  type metadata accessor for Binding<NavigationPath>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for ClarityUIOutgoingCallActionsNavigationDestination(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ClarityUIOutgoingCallActionsNavigationDestination(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(void *)(a2 + 32);
  id v6 = v3;
  id v7 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClarityUIOutgoingCallActionsNavigationDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClarityUIOutgoingCallActionsNavigationDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClarityUIOutgoingCallActionsNavigationDestination()
{
  return &type metadata for ClarityUIOutgoingCallActionsNavigationDestination;
}

uint64_t sub_1C33E7CEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ActionNavigationLink(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ActionNavigationLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  id v9 = (_OWORD *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 56);
  id v10 = v4;
  id v11 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v12 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v9;
  }
  return a1;
}

uint64_t assignWithCopy for ActionNavigationLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v10)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v13;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for ActionNavigationLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (!v8)
  {
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v7;
      *(void *)(a1 + 64) = v10;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v9;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionNavigationLink(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionNavigationLink(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ActionNavigationLink()
{
  return &unk_1F1EAAF10;
}

uint64_t associated type witness table accessor for View.Body : View in ActionNavigationLink()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in ActionNavigationLink.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ActionNavigationLink.body.getter(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C33E81CC()
{
  return swift_deallocObject();
}

uint64_t sub_1C33E81DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ActionNavigationLink.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in ActionNavigationLink.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in closure #1 in ActionNavigationLink.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in ActionNavigationLink.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroyTm_10()
{
  uint64_t v1 = (int *)(type metadata accessor for ClarityUIOutgoingCallActionsView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  uint64_t v3 = v2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  type metadata accessor for NavigationPath();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v4 + 8))(v3);
  uint64_t v5 = (id *)(v2 + v1[7]);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ClarityUIOutgoingCallActionsView.body.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  OUTLINED_FUNCTION_1_1(v5);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return closure #1 in closure #1 in closure #1 in ClarityUIOutgoingCallActionsView.body.getter(a1, v7, a2);
}

unint64_t lazy protocol witness table accessor for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction;
  if (!lazy protocol witness table cache variable for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction;
  if (!lazy protocol witness table cache variable for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIOutgoingCallAction and conformance ClarityUIOutgoingCallAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<NavigationLink<ModifiedContent<Label<Text, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, Never>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t LiveVoicemailIntroView.init(_:)()
{
  type metadata accessor for TranscriptionViewModel(0);
  lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel();
  return ObservedObject.init(wrappedValue:)();
}

unint64_t lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel;
  if (!lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel)
  {
    type metadata accessor for TranscriptionViewModel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel);
  }
  return result;
}

uint64_t LiveVoicemailIntroView.viewModel.getter()
{
  return swift_retain();
}

uint64_t key path getter for LiveVoicemailIntroView.viewModel : LiveVoicemailIntroView@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = LiveVoicemailIntroView.viewModel.getter();
  *a2 = v3;
  return result;
}

uint64_t key path setter for LiveVoicemailIntroView.viewModel : LiveVoicemailIntroView()
{
  uint64_t v0 = swift_retain();
  return LiveVoicemailIntroView.viewModel.setter(v0);
}

uint64_t LiveVoicemailIntroView.viewModel.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LiveVoicemailIntroView.viewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t LiveVoicemailIntroView.$viewModel.getter()
{
  type metadata accessor for TranscriptionViewModel(0);
  lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel();
  return ObservedObject.projectedValue.getter();
}

BOOL LiveVoicemailIntroView.showDivider.getter()
{
  swift_retain();
  uint64_t v0 = TranscriptionViewModel.captions.getter();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRelease();
  return v1 != 0;
}

uint64_t LiveVoicemailIntroView.body.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?)>>);
  return closure #1 in LiveVoicemailIntroView.body.getter(a1 + *(int *)(v2 + 44));
}

uint64_t closure #1 in LiveVoicemailIntroView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v80 = a1;
  uint64_t v74 = type metadata accessor for Divider();
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v2 = &v67[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Divider, _BackgroundStyleModifier<Color>>);
  MEMORY[0x1F4188790](v69);
  uint64_t v4 = &v67[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>);
  MEMORY[0x1F4188790](v70);
  uint64_t v71 = &v67[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x1F4188790](v77);
  BOOL v73 = &v67[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v79 = &v67[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v67[-v10];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v78 = &v67[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v67[-v15];
  *(void *)uint64_t v16 = static VerticalAlignment.center.getter();
  *((void *)v16 + 1) = 0;
  unsigned char v16[16] = 1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>);
  closure #1 in closure #1 in LiveVoicemailIntroView.body.getter((uint64_t)&v16[*(int *)(v17 + 44)]);
  v26.super.int isa = (Class)objc_msgSend(self, sel_conversationKit);
  v82._object = (void *)0xE000000000000000;
  v18._object = (void *)0x80000001C37ACFC0;
  v18._uint64_t countAndFlagsBits = 0xD000000000000014;
  v19.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v19.value._object = (void *)0xEF74694B6E6F6974;
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v82._uint64_t countAndFlagsBits = 0;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, v26, v20, v82);

  Swift::String v81 = v21;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v22 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  LODWORD(v26.super.isa) = v25;
  uint64_t v76 = v27;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v28 = TranscriptionViewModel.captions.getter();
  swift_release();
  uint64_t v29 = *(void *)(v28 + 16);
  swift_bridgeObjectRelease();
  if (v29)
  {
    Divider.init()();
    uint64_t v30 = static Color.white.getter();
    char v31 = static Edge.Set.all.getter();
    uint64_t v32 = v72;
    uint64_t v33 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v72 + 16);
    int isa = (int)v26.super.isa;
    uint64_t v34 = v74;
    v33(v4, v2, v74);
    uint64_t v35 = &v4[*(int *)(v69 + 36)];
    *(void *)uint64_t v35 = v30;
    v35[8] = v31;
    (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v2, v34);
    LOBYTE(v30) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v44 = v71;
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v4, (uint64_t)v71, &demangling cache variable for type metadata for ModifiedContent<Divider, _BackgroundStyleModifier<Color>>);
    id v45 = &v44[*(int *)(v70 + 36)];
    *id v45 = v30;
    *((void *)v45 + 1) = v37;
    *((void *)v45 + 2) = v39;
    *((void *)v45 + 3) = v41;
    *((void *)v45 + 4) = v43;
    v45[40] = 0;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, &demangling cache variable for type metadata for ModifiedContent<Divider, _BackgroundStyleModifier<Color>>);
    LOBYTE(v30) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v54 = v73;
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v44, (uint64_t)v73, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>);
    v26.super.int isa = (Class)v77;
    uint64_t v55 = &v54[*(int *)(v77 + 36)];
    *uint64_t v55 = v30;
    *((void *)v55 + 1) = v47;
    *((void *)v55 + 2) = v49;
    *((void *)v55 + 3) = v51;
    *((void *)v55 + 4) = v53;
    v55[40] = 0;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v44, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v54, (uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>);
    uint64_t v56 = 0;
    uint64_t v57 = (uint64_t)v26.super.isa;
    LOBYTE(v26.super.isa) = isa;
  }
  else
  {
    uint64_t v56 = 1;
    uint64_t v57 = v77;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v11, v56, 1, v57);
  char v58 = (uint64_t)v26.super.isa & 1;
  uint64_t v59 = v78;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v16, (uint64_t)v78, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>);
  uint64_t v60 = v79;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, (uint64_t)v79, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?);
  uint64_t v61 = v80;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v59, v80, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?));
  uint64_t v63 = v61 + *(int *)(v62 + 48);
  *(void *)uint64_t v63 = v22;
  *(void *)(v63 + 8) = v24;
  *(unsigned char *)(v63 + 16) = v58;
  uint64_t v64 = (uint64_t)v16;
  uint64_t v65 = KeyPath;
  *(void *)(v63 + 24) = v76;
  *(void *)(v63 + 32) = v65;
  *(_WORD *)(v63 + 40) = 1;
  *(unsigned char *)(v63 + 42) = 1;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v60, v61 + *(int *)(v62 + 64), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?);
  outlined copy of Text.Storage(v22, v24, v58);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v64, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v60, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?);
  outlined consume of Text.Storage(v22, v24, v58);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v59, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>);
}

uint64_t associated type witness table accessor for View.Body : View in LiveVoicemailIntroView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in LiveVoicemailIntroView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.fontWeight(_:)>>.0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t)&v35 - v10;
  uint64_t v35 = (uint64_t)&v35 - v10;
  v37._uint64_t countAndFlagsBits = Image.init(systemName:)();
  static Font.Weight.semibold.getter();
  View.fontWeight(_:)();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v4, v1);
  *(_WORD *)&v8[*(int *)(v6 + 44)] = 257;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v8, v11, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>);
  id v12 = objc_msgSend(self, sel_conversationKit);
  v38._object = (void *)0xE000000000000000;
  v13._object = (void *)0x80000001C37ACFE0;
  v13._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v14.value._object = (void *)0xEF74694B6E6F6974;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v38._uint64_t countAndFlagsBits = 0;
  Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v38);

  Swift::String v37 = v16;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  LOBYTE(v6) = v20 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v21 = Text.fontWeight(_:)();
  uint64_t v23 = v22;
  LOBYTE(v2) = v24 & 1;
  outlined consume of Text.Storage(v17, v19, v6);
  swift_bridgeObjectRelease();
  static Font.title.getter();
  uint64_t v25 = Text.font(_:)();
  uint64_t v27 = v26;
  LOBYTE(v11) = v28;
  uint64_t v30 = v29;
  swift_release();
  LOBYTE(v11) = v11 & 1;
  outlined consume of Text.Storage(v21, v23, v2);
  swift_bridgeObjectRelease();
  uint64_t v31 = v35;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v35, (uint64_t)v8, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>);
  uint64_t v32 = v36;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v8, v36, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>);
  uint64_t v33 = v32
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>))
               + 48);
  *(void *)uint64_t v33 = v25;
  *(void *)(v33 + 8) = v27;
  *(unsigned char *)(v33 + 16) = v11;
  *(void *)(v33 + 24) = v30;
  *(_WORD *)(v33 + 32) = 257;
  outlined copy of Text.Storage(v25, v27, v11);
  swift_bridgeObjectRetain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v31, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>);
  outlined consume of Text.Storage(v25, v27, v11);
  swift_bridgeObjectRelease();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>);
}

uint64_t protocol witness for View.body.getter in conformance LiveVoicemailIntroView@<X0>(uint64_t a1@<X8>)
{
  return LiveVoicemailIntroView.body.getter(a1);
}

void *assignWithCopy for LiveVoicemailIntroView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for LiveVoicemailIntroView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LiveVoicemailIntroView()
{
  return &type metadata for LiveVoicemailIntroView;
}

unint64_t lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?)>> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?)>> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?)>> and conformance VStack<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _FixedSizeLayout>, ModifiedContent<Text, _FixedSizeLayout>)>>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Divider, _BackgroundStyleModifier<Color>>, _PaddingLayout>, _PaddingLayout>?)>> and conformance VStack<A>);
  }
  return result;
}

id static UIVibrancyEffect.inCallControlsEffect.getter()
{
  uint64_t v0 = self;
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id v1 = objc_msgSend(v0, sel__effectForBlurEffect_vibrancyStyle_, static Colors.InCallControls.backgroundBlurEffect, 112);
  return v1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v36 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for RecentsCallItem(0);
  uint64_t v35 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v42 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v34 = (uint64_t)&v32 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v32 = a1;
  uint64_t v33 = v2;
  if (v13)
  {
    uint64_t v14 = type metadata accessor for IndexPath();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = v15;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v39 = *(void *)(v15 + 72);
    uint64_t v19 = v15 + 16;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v40 = v19;
    uint64_t v41 = v18;
    uint64_t v37 = v16 + 8;
    uint64_t v38 = v16 + 32;
    swift_bridgeObjectRetain();
    uint64_t v44 = MEMORY[0x1E4FBC860];
    uint64_t v20 = (uint64_t)v36;
    while (1)
    {
      v41(v12, v17, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
      uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
      if (EnumTagSinglePayload == 1) {
        break;
      }
      __n128 v22 = MEMORY[0x1F4188790](EnumTagSinglePayload);
      char v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v16 + 32))(v24, v12, v14, v22);
      (*(void (**)(char *))(*(void *)a2 + 264))(v24);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v14);
      if (__swift_getEnumTagSinglePayload(v20, 1, v43) == 1)
      {
        outlined destroy of RecentsCallItem?(v20);
      }
      else
      {
        uint64_t v25 = v20;
        uint64_t v26 = v34;
        outlined init with take of RecentsCallItem(v25, v34);
        outlined init with take of RecentsCallItem(v26, v42);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
        }
        unint64_t v28 = *(void *)(v44 + 16);
        unint64_t v27 = *(void *)(v44 + 24);
        if (v28 >= v27 >> 1) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v44);
        }
        uint64_t v29 = v44;
        *(void *)(v44 + 16) = v28 + 1;
        outlined init with take of RecentsCallItem(v42, v29+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v28);
        uint64_t v20 = (uint64_t)v36;
      }
      v17 += v39;
      if (!--v13) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = MEMORY[0x1E4FBC860];
LABEL_14:
    uint64_t v30 = type metadata accessor for IndexPath();
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v30);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v44;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void v23[3];
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  char v24 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v24);
  unint64_t v28 = (uint64_t)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = *(void *)(a1 + 16);
  if (v27)
  {
    v23[1] = a1;
    id v23[2] = v2;
    uint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v26 = a1 + v25;
    uint64_t v30 = *(void *)(v6 + 72);
    uint64_t v35 = a2 + 56;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    uint64_t v37 = a2;
    do
    {
      uint64_t v31 = v8;
      uint64_t v32 = v26 + v30 * v8;
      if (*(void *)(a2 + 16)
        && (uint64_t v9 = v32 + *(int *)(v24 + 20),
            uint64_t v10 = type metadata accessor for UUID(),
            _s10Foundation4UUIDVACSHAAWlTm_6((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID),
            uint64_t v36 = v9,
            uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            id v12 = -1 << *(unsigned char *)(v37 + 32),
            uint64_t v13 = v11 & ~v12,
            ((*(void *)(v35 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0))
      {
        uint64_t v33 = ~v12;
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
        uint64_t v15 = *(void *)(v14 + 72);
        while (1)
        {
          MEMORY[0x1F4188790](v11);
          OUTLINED_FUNCTION_193_2();
          v34(v3, *(void *)(v16 + 48) + v15 * v13, v10);
          _s10Foundation4UUIDVACSHAAWlTm_6((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
          uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
          OUTLINED_FUNCTION_139();
          uint64_t v11 = v18();
          if (v17) {
            break;
          }
          uint64_t v13 = (v13 + 1) & v33;
          if (((*(void *)(v35 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        _s15ConversationKit11ParticipantVWOcTm_18(v32, v28);
        uint64_t v19 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
        }
        uint64_t v21 = *(void *)(v19 + 16);
        uint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v19);
        }
        *(void *)(v19 + 16) = v21 + 1;
        uint64_t v29 = v19;
        outlined init with take of Participant(v28, v19 + v25 + v21 * v30);
      }
      uint64_t v8 = v31 + 1;
      a2 = v37;
    }
    while (v31 + 1 != v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v29;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
}

uint64_t RecentsCollectionViewDataSource.__allocating_init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return RecentsCollectionViewDataSource.__allocating_init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized RecentsCollectionViewDataSource.__allocating_init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:));
}

id RecentsCollectionViewDataSource.collectionView.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t RecentsCollectionViewDataSource.recentsController.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IDSLookupManager(v1 + 24, a1);
}

id RecentsCollectionViewDataSource.conversationManager.getter()
{
  return *(id *)(v0 + 64);
}

uint64_t RecentsCollectionViewDataSource.linkController.getter()
{
  return swift_retain();
}

uint64_t RecentsCollectionViewDataSource.isActive.getter()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 168))();
  OUTLINED_FUNCTION_0_91();
  char v3 = (*(uint64_t (**)(void))(v2 + 456))();

  return v3 & 1;
}

uint64_t RecentsCollectionViewDataSource.videoMessages.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<[RecentsCallItem], Never>);
  OUTLINED_FUNCTION_5_3();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  OUTLINED_FUNCTION_50();
  uint64_t v8 = (*(uint64_t (**)(void))(v7 + 192))();
  if (v8)
  {
    (*(void (**)(void))(*(void *)v8 + 104))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[RecentsCallItem], Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<[RecentsCallItem], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[RecentsCallItem], Never>);
    uint64_t v9 = Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RecentsCallItem]);
    Empty.init(completeImmediately:)();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Empty<[RecentsCallItem], Never> and conformance Empty<A, B>, &demangling cache variable for type metadata for Empty<[RecentsCallItem], Never>);
    uint64_t v9 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  }
  return v9;
}

uint64_t key path setter for RecentsCollectionViewDataSource.collator : RecentsCollectionViewDataSource(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 176))(*a1);
}

void RecentsCollectionViewDataSource.collator.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = a1;
}

void (*RecentsCollectionViewDataSource.collator.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = RecentsCollectionViewDataSource.collator.getter();
  return RecentsCollectionViewDataSource.collator.modify;
}

void RecentsCollectionViewDataSource.collator.modify(void **a1, char a2)
{
}

uint64_t key path setter for RecentsCollectionViewDataSource.messageInboxController : RecentsCollectionViewDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 200);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t RecentsCollectionViewDataSource.messageInboxController.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = a1;
  return outlined consume of VideoMessageInboxController??(v2);
}

uint64_t (*RecentsCollectionViewDataSource.messageInboxController.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = RecentsCollectionViewDataSource.messageInboxController.getter();
  return RecentsCollectionViewDataSource.messageInboxController.modify;
}

uint64_t RecentsCollectionViewDataSource.messageInboxController.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RecentsCollectionViewDataSource.messageInboxController.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  RecentsCollectionViewDataSource.messageInboxController.setter(v2);
  return swift_release();
}

uint64_t RecentsCollectionViewDataSource.cellProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_retain();
  return v1;
}

uint64_t RecentsCollectionViewDataSource.supplementaryViewProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_retain();
  return v1;
}

uint64_t RecentsCollectionViewDataSource.init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return RecentsCollectionViewDataSource.__allocating_init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized RecentsCollectionViewDataSource.init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:));
}

uint64_t RecentsCollectionViewDataSource.__allocating_init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  uint64_t v22 = a9(a1, v20, a3, a4, a5, a6, a7, a8, v9, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v22;
}

uint64_t key path setter for RecentsCollectionViewDataSource.dataSource : RecentsCollectionViewDataSource(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 232))(*a1);
}

void RecentsCollectionViewDataSource.dataSource.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 128);
  *(void *)(v1 + 128) = a1;
}

void (*RecentsCollectionViewDataSource.dataSource.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = RecentsCollectionViewDataSource.dataSource.getter();
  return RecentsCollectionViewDataSource.dataSource.modify;
}

void RecentsCollectionViewDataSource.dataSource.modify(void **a1, char a2)
{
}

void RecentsCollectionViewDataSource.collator.modify(void **a1, char a2, void (*a3)(void))
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

void RecentsCollectionViewDataSource.callItem(for:)(uint64_t a1)
{
}

void RecentsCollectionViewDataSource.indexPath(for:)(uint64_t a1)
{
}

void RecentsCollectionViewDataSource.callItem(for:)(uint64_t a1, void (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_50();
  id v5 = (id)(*(uint64_t (**)(void))(v4 + 224))();
  a2(a1);
}

uint64_t RecentsCollectionViewDataSource.callItems(for:)(uint64_t a1)
{
  swift_retain();
  return specialized Sequence.compactMap<A>(_:)(a1, v1);
}

void RecentsCollectionViewDataSource.deleteCallItems(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_50();
  id v8 = (id)(*(uint64_t (**)(void))(v6 + 168))();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 576))(a1, a2, a3);
}

Swift::Void __swiftcall RecentsCollectionViewDataSource.suspend()()
{
  OUTLINED_FUNCTION_50();
  id v2 = (id)(*(uint64_t (**)(void))(v0 + 168))();
  OUTLINED_FUNCTION_0_91();
  (*(void (**)(void))(v1 + 472))();
}

uint64_t RecentsCollectionViewDataSource.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();

  outlined consume of VideoMessageInboxController??(*(void *)(v0 + 88));
  swift_release();
  swift_release();

  return v0;
}

uint64_t RecentsCollectionViewDataSource.__deallocating_deinit()
{
  RecentsCollectionViewDataSource.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1C33EA1F4@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 168))();
  *a1 = result;
  return result;
}

uint64_t sub_1C33EA240@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 192))();
  *a1 = result;
  return result;
}

uint64_t sub_1C33EA28C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 224))();
  *a1 = result;
  return result;
}

uint64_t method lookup function for RecentsCollectionViewDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsCollectionViewDataSource);
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.isActive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.videoMessages.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.collator.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.collator.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.collator.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.messageInboxController.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.messageInboxController.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.messageInboxController.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.__allocating_init(collectionView:recentsController:conversationManager:linkController:cellProvider:supplementaryViewProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.dataSource.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.dataSource.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.dataSource.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.section(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.callItem(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.indexPath(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.callItems(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.deleteCallItems(_:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.resume()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of RecentsCollectionViewDataSource.suspend()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t outlined destroy of RecentsCallItem?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 IconButtonStyle.init(spacing:width:iconPadding:labelColor:labelFont:symbol:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a7;
  *(void *)(a4 + 24) = a1;
  *(void *)(a4 + 32) = a2;
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 40) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 56) = v7;
  long long v8 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 72) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 88) = v8;
  __n128 result = *(__n128 *)(a3 + 64);
  long long v10 = *(_OWORD *)(a3 + 80);
  *(__n128 *)(a4 + 104) = result;
  *(_OWORD *)(a4 + 120) = v10;
  return result;
}

uint64_t IconButtonConfig<A>.init(buttonStyle:title:accessibilityLabel:accessibilityIdentifier:enabled:didTap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(a1, a2, a3, 0, a4, a5, a6, a7, a8);
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)()
{
  OUTLINED_FUNCTION_12_54();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_50_0();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))((char *)&v5 - v3, v1, v0);
  swift_storeEnumTagMultiPayload();
  return OUTLINED_FUNCTION_13_58();
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)()
{
  OUTLINED_FUNCTION_12_54();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_50_0();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))((char *)&v5 - v3, v1, v0);
  swift_storeEnumTagMultiPayload();
  return OUTLINED_FUNCTION_13_58();
}

double static IconButtonStyle.Defaults.size.getter()
{
  return 36.0;
}

uint64_t IconButtonConfig.state.getter@<X0>(uint64_t a1@<X8>)
{
  return StateHolder.state.getter(a1);
}

uint64_t IconButtonConfig.state.setter()
{
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_50_0();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v6 - v1;
  OUTLINED_FUNCTION_2_1();
  v3();
  StateHolder.state.setter((uint64_t)v2);
  OUTLINED_FUNCTION_15_5();
  return v4();
}

uint64_t IconButtonConfig.enabled.getter()
{
  OUTLINED_FUNCTION_50();
  swift_getKeyPath();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t IconButtonConfig.enabled.setter()
{
  return swift_release();
}

uint64_t IconButtonConfig.__allocating_init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = swift_allocObject();
  IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v17;
}

uint64_t IconButtonConfig.accessibilityLabel.setter()
{
  return IconButtonConfig.accessibilityLabel.setter();
}

{
  OUTLINED_FUNCTION_50();
  swift_getKeyPath();
  IconButtonConfig.withMutation<A, B>(keyPath:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t IconButtonConfig.accessibilityLabel.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t IconButtonConfig.accessibilityIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t StateIconButtonStyle.image()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>.Storage);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v51 = (uint64_t *)(v5 - v4);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = (uint64_t *)(v8 - v7);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_36();
  id v45 = (uint64_t *)(v11 - v12);
  MEMORY[0x1F4188790](v13);
  uint64_t v47 = (uint64_t)&v44 - v14;
  uint64_t v48 = *(void *)(a1 + 16);
  OUTLINED_FUNCTION_5_3();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  uint64_t v54 = type metadata accessor for Image.Scale();
  OUTLINED_FUNCTION_5_3();
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_36();
  uint64_t v26 = v24 - v25;
  MEMORY[0x1F4188790](v27);
  uint64_t v53 = (char *)&v44 - v28;
  StateIconButtonStyle.symbol.getter((uint64_t)v55);
  uint64_t v30 = v56;
  uint64_t v29 = v57;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v56);
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v30, v29);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v58, v59);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v60, v61);
  if (v30)
  {
    StateHolder.state.getter(v20);
    v30(v20);
    _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v30, v29);
    uint64_t v31 = *(void (**)(void))(v16 + 8);
    OUTLINED_FUNCTION_3_8();
    v31();
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v53, v26, v54);
    StateIconButtonStyle.symbol.getter((uint64_t)&v62);
    uint64_t v32 = v62;
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_14_53();
    v32(v20);
    swift_release();
    OUTLINED_FUNCTION_3_8();
    v31();
    uint64_t v33 = Image.init(systemName:)();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v35 = v53;
    uint64_t v36 = v54;
    OUTLINED_FUNCTION_2_1();
    v37();
    *uint64_t v9 = KeyPath;
    uint64_t v38 = v45;
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v9, (uint64_t)v45 + *(int *)(v49 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    uint64_t *v38 = v33;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v9, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    uint64_t v39 = (uint64_t)v38;
    uint64_t v40 = v47;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v39, v47, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
    outlined init with copy of Environment<DynamicTypeSize>.Content(v40, (uint64_t)v51, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v40, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v35, v36);
  }
  else
  {
    StateIconButtonStyle.symbol.getter((uint64_t)&v62);
    uint64_t v42 = v62;
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_14_53();
    v42(v20);
    swift_release();
    OUTLINED_FUNCTION_3_8();
    v43();
    *uint64_t v51 = Image.init(systemName:)();
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t IconButtonConfig.title.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t IconButton.action.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IconButton.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v7 = type metadata accessor for StateIconButtonStyle();
  uint64_t v32 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  type metadata accessor for ModifiedContent();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v29 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<EmptyView> and conformance Button<A>, &demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v54 = v30;
  uint64_t v55 = v7;
  uint64_t v56 = v29;
  uint64_t v57 = WitnessTable;
  swift_getOpaqueTypeMetadata2();
  v28[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v31 = type metadata accessor for _ConditionalContent();
  uint64_t v34 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for _ConditionalContent();
  OUTLINED_FUNCTION_5_3();
  uint64_t v35 = v10;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_36();
  uint64_t v14 = v12 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v28 - v16;
  IconButton.buttonWithAccessbilityLabel()(v37, v38, v36, a4, v14);
  uint64_t v54 = v6;
  uint64_t v55 = v7;
  uint64_t v18 = OUTLINED_FUNCTION_21_38((uint64_t)&v59);
  uint64_t v19 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v52 = v18;
  uint64_t v53 = v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v54 = v30;
  uint64_t v55 = v7;
  uint64_t v50 = OUTLINED_FUNCTION_21_38((uint64_t)&v58);
  uint64_t v51 = v19;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v48 = v20;
  uint64_t v49 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  uint64_t v46 = v22;
  uint64_t v47 = v23;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = v22;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v42 = v24;
  uint64_t v43 = v23;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = v24;
  uint64_t v25 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14, v9, v25);
  uint64_t v26 = *(void (**)(void))(v35 + 8);
  OUTLINED_FUNCTION_15_5();
  v26();
  static ViewBuilder.buildExpression<A>(_:)(v17, v9, v25);
  OUTLINED_FUNCTION_15_5();
  return ((uint64_t (*)(void))v26)();
}

uint64_t IconButton.buttonWithAccessbilityLabel()@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v74 = a3;
  uint64_t v72 = a1;
  uint64_t v81 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
  char v75 = (char *)a4;
  uint64_t v7 = type metadata accessor for StateIconButtonStyle();
  uint64_t v8 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v89 = v8;
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v132 = v87;
  uint64_t v133 = v7;
  uint64_t v90 = WitnessTable;
  uint64_t v91 = v7;
  uint64_t v85 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<EmptyView> and conformance Button<A>, &demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v134 = v85;
  uint64_t v135 = WitnessTable;
  swift_getOpaqueTypeMetadata2();
  uint64_t v88 = v10;
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for _ConditionalContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v79 = type metadata accessor for ModifiedContent();
  uint64_t v86 = v11;
  uint64_t v12 = type metadata accessor for _ConditionalContent();
  uint64_t v76 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v69 - v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v71 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v70 = (char *)&v69 - v22;
  uint64_t v83 = v23;
  uint64_t v24 = type metadata accessor for _ConditionalContent();
  uint64_t v77 = *(void *)(v24 - 8);
  uint64_t v78 = v24;
  MEMORY[0x1F4188790](v24);
  Swift::String v82 = (char *)&v69 - v25;
  uint64_t v26 = v72;
  uint64_t v27 = IconButtonConfig.accessibilityLabel.getter();
  uint64_t v80 = v6;
  if (v28)
  {
    uint64_t v29 = v27;
    uint64_t v30 = v28;
    IconButton.buttonWithAccessbilityIdentifier()(v26, v73, v74, (uint64_t)v75, (uint64_t)v17);
    uint64_t v104 = v29;
    uint64_t v105 = v30;
    char v75 = v17;
    uint64_t v31 = v91;
    uint64_t v132 = v6;
    uint64_t v133 = v91;
    uint64_t v32 = v90;
    uint64_t v134 = v89;
    uint64_t v135 = v90;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v34 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    uint64_t v102 = OpaqueTypeConformance2;
    uint64_t v103 = v34;
    uint64_t v35 = swift_getWitnessTable();
    uint64_t v132 = v87;
    uint64_t v133 = v31;
    uint64_t v134 = v85;
    uint64_t v135 = v32;
    uint64_t v100 = swift_getOpaqueTypeConformance2();
    uint64_t v101 = v34;
    uint64_t v36 = swift_getWitnessTable();
    uint64_t v98 = v35;
    uint64_t v99 = v36;
    uint64_t v37 = swift_getWitnessTable();
    uint64_t v38 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    uint64_t v96 = v37;
    uint64_t v97 = v38;
    uint64_t v94 = swift_getWitnessTable();
    uint64_t v95 = v37;
    uint64_t v39 = swift_getWitnessTable();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v40 = (uint64_t)v75;
    View.accessibilityLabel<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v40, v12);
    swift_bridgeObjectRelease();
    uint64_t v92 = v39;
    uint64_t v93 = v38;
    uint64_t v41 = v83;
    uint64_t v42 = swift_getWitnessTable();
    uint64_t v43 = v70;
    static ViewBuilder.buildExpression<A>(_:)(v20, v41, v42);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v71 + 8);
    v44(v20, v41);
    static ViewBuilder.buildExpression<A>(_:)(v43, v41, v42);
    static ViewBuilder.buildEither<A, B>(first:)();
    v44(v20, v41);
    v44(v43, v41);
  }
  else
  {
    IconButton.buttonWithAccessbilityIdentifier()(v26, v73, v74, (uint64_t)v75, (uint64_t)v14);
    uint64_t v45 = v17;
    uint64_t v46 = v91;
    uint64_t v132 = v6;
    uint64_t v133 = v91;
    uint64_t v47 = v90;
    uint64_t v134 = v89;
    uint64_t v135 = v90;
    uint64_t v48 = swift_getOpaqueTypeConformance2();
    uint64_t v49 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    uint64_t v130 = v48;
    uint64_t v131 = v49;
    uint64_t v50 = swift_getWitnessTable();
    uint64_t v132 = v87;
    uint64_t v133 = v46;
    uint64_t v134 = v85;
    uint64_t v135 = v47;
    uint64_t v128 = swift_getOpaqueTypeConformance2();
    uint64_t v129 = v49;
    uint64_t v51 = swift_getWitnessTable();
    uint64_t v126 = v50;
    uint64_t v127 = v51;
    uint64_t v52 = swift_getWitnessTable();
    uint64_t v53 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    uint64_t v124 = v52;
    uint64_t v125 = v53;
    uint64_t v122 = swift_getWitnessTable();
    uint64_t v123 = v52;
    uint64_t v54 = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v14, v12, v54);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v76 + 8);
    v55(v14, v12);
    static ViewBuilder.buildExpression<A>(_:)(v45, v12, v54);
    uint64_t v120 = v54;
    uint64_t v121 = v53;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)();
    v55(v14, v12);
    v55(v45, v12);
  }
  uint64_t v57 = v90;
  uint64_t v56 = v91;
  uint64_t v132 = v80;
  uint64_t v133 = v91;
  uint64_t v134 = v89;
  uint64_t v135 = v90;
  uint64_t v58 = swift_getOpaqueTypeConformance2();
  uint64_t v59 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v118 = v58;
  uint64_t v119 = v59;
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v132 = v87;
  uint64_t v133 = v56;
  uint64_t v134 = v85;
  uint64_t v135 = v57;
  uint64_t v116 = swift_getOpaqueTypeConformance2();
  uint64_t v117 = v59;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v114 = v60;
  uint64_t v115 = v61;
  uint64_t v62 = swift_getWitnessTable();
  uint64_t v63 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  uint64_t v112 = v62;
  uint64_t v113 = v63;
  uint64_t v110 = swift_getWitnessTable();
  uint64_t v111 = v62;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v108 = v64;
  uint64_t v109 = v63;
  uint64_t v106 = swift_getWitnessTable();
  uint64_t v107 = v64;
  uint64_t v65 = v78;
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v67 = v82;
  static ViewBuilder.buildExpression<A>(_:)(v82, v65, v66);
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v67, v65);
}

uint64_t IconButton.buttonWithAccessbilityIdentifier()@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v68 = a2;
  uint64_t v76 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v70 = a4;
  uint64_t v8 = type metadata accessor for StateIconButtonStyle();
  uint64_t v9 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v82 = v9;
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v110 = v80;
  uint64_t v111 = v8;
  uint64_t v83 = v8;
  uint64_t v77 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<EmptyView> and conformance Button<A>, &demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v112 = v77;
  uint64_t v113 = WitnessTable;
  swift_getOpaqueTypeMetadata2();
  uint64_t v81 = v11;
  uint64_t v79 = type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for _ConditionalContent();
  uint64_t v71 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v66 - v16;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v67 = (char *)v66 - v23;
  uint64_t v78 = v12;
  uint64_t v74 = type metadata accessor for _ConditionalContent();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v72 = (char *)v66 - v24;
  uint64_t v25 = IconButtonConfig.accessibilityIdentifier.getter();
  uint64_t v75 = v7;
  if (v26)
  {
    v66[1] = v25;
    IconButton.button()(a1, v68, v69, (uint64_t)v17);
    uint64_t v110 = v7;
    uint64_t v27 = WitnessTable;
    uint64_t v28 = v83;
    uint64_t v111 = v83;
    uint64_t v112 = v82;
    uint64_t v113 = v27;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v30 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    uint64_t v90 = OpaqueTypeConformance2;
    uint64_t v91 = v30;
    uint64_t v31 = swift_getWitnessTable();
    uint64_t v70 = v18;
    uint64_t v32 = v17;
    uint64_t v33 = v31;
    uint64_t v110 = v80;
    uint64_t v111 = v28;
    uint64_t WitnessTable = v27;
    uint64_t v112 = v77;
    uint64_t v113 = v27;
    uint64_t v88 = swift_getOpaqueTypeConformance2();
    uint64_t v89 = v30;
    uint64_t v34 = swift_getWitnessTable();
    uint64_t v86 = v33;
    uint64_t v87 = v34;
    uint64_t v35 = v78;
    uint64_t v36 = swift_getWitnessTable();
    View.accessibilityIdentifier(_:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = v32;
    uint64_t v38 = v70;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v37, v35);
    uint64_t v39 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    uint64_t v84 = v36;
    uint64_t v85 = v39;
    uint64_t v40 = swift_getWitnessTable();
    uint64_t v41 = v67;
    static ViewBuilder.buildExpression<A>(_:)(v21, v38, v40);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v19 + 8);
    v42(v21, v38);
    static ViewBuilder.buildExpression<A>(_:)(v41, v38, v40);
    uint64_t v43 = v72;
    static ViewBuilder.buildEither<A, B>(first:)();
    v42(v21, v38);
    uint64_t v44 = v41;
    uint64_t v45 = v77;
    v42(v44, v38);
  }
  else
  {
    IconButton.button()(a1, v68, v69, (uint64_t)v14);
    uint64_t v110 = v7;
    uint64_t v46 = v83;
    uint64_t v111 = v83;
    uint64_t v112 = v82;
    uint64_t v113 = WitnessTable;
    uint64_t v47 = v17;
    uint64_t v48 = swift_getOpaqueTypeConformance2();
    uint64_t v49 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    uint64_t v108 = v48;
    uint64_t v109 = v49;
    uint64_t v50 = swift_getWitnessTable();
    uint64_t v110 = v80;
    uint64_t v111 = v46;
    uint64_t v45 = v77;
    uint64_t v112 = v77;
    uint64_t v113 = WitnessTable;
    uint64_t v106 = swift_getOpaqueTypeConformance2();
    uint64_t v107 = v49;
    uint64_t v51 = swift_getWitnessTable();
    uint64_t v104 = v50;
    uint64_t v105 = v51;
    uint64_t v52 = v78;
    uint64_t v53 = swift_getWitnessTable();
    v66[0] = v47;
    static ViewBuilder.buildExpression<A>(_:)(v14, v52, v53);
    uint64_t v54 = *(void (**)(char *, uint64_t))(v71 + 8);
    v54(v14, v52);
    static ViewBuilder.buildExpression<A>(_:)(v47, v52, v53);
    uint64_t v55 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    uint64_t v102 = v53;
    uint64_t v103 = v55;
    swift_getWitnessTable();
    uint64_t v43 = v72;
    static ViewBuilder.buildEither<A, B>(second:)();
    v54(v14, v52);
    v54((char *)v66[0], v52);
  }
  uint64_t v56 = v83;
  uint64_t v110 = v75;
  uint64_t v111 = v83;
  uint64_t v112 = v82;
  uint64_t v113 = WitnessTable;
  uint64_t v57 = swift_getOpaqueTypeConformance2();
  uint64_t v58 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v100 = v57;
  uint64_t v101 = v58;
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v110 = v80;
  uint64_t v111 = v56;
  uint64_t v112 = v45;
  uint64_t v113 = WitnessTable;
  uint64_t v98 = swift_getOpaqueTypeConformance2();
  uint64_t v99 = v58;
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v96 = v59;
  uint64_t v97 = v60;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  uint64_t v94 = v61;
  uint64_t v95 = v62;
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v93 = v61;
  uint64_t v63 = v74;
  uint64_t v64 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v43, v63, v64);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v43, v63);
}

uint64_t IconButton.button()@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v107 = a2;
  uint64_t v108 = a3;
  uint64_t v121 = a1;
  uint64_t v114 = a4;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t v99 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v95 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StateIconButtonStyle();
  uint64_t v7 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<EmptyView> and conformance Button<A>, &demangling cache variable for type metadata for Button<EmptyView>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v120 = v4;
  __dst[0] = v4;
  __dst[1] = v6;
  uint64_t v115 = v7;
  __dst[2] = v7;
  __dst[3] = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v98 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v97 = (char *)&v94 - v10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v94 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v101 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v96 = (char *)&v94 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v100 = (char *)&v94 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v105 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v102 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  uint64_t v118 = v17;
  uint64_t v119 = v6;
  __dst[0] = v17;
  __dst[1] = v6;
  uint64_t v117 = v19;
  __dst[2] = v19;
  __dst[3] = WitnessTable;
  uint64_t v20 = swift_getOpaqueTypeMetadata2();
  uint64_t v104 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v94 - v21;
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(char **)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v103 = (char *)&v94 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v106 = (char *)&v94 - v30;
  uint64_t v110 = v31;
  uint64_t v113 = v11;
  uint64_t v32 = type metadata accessor for _ConditionalContent();
  uint64_t v111 = *(void *)(v32 - 8);
  uint64_t v112 = v32;
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)&v94 - v33;
  uint64_t v35 = IconButtonConfig.title.getter();
  uint64_t v109 = v34;
  uint64_t v116 = WitnessTable;
  if (v36)
  {
    uint64_t v100 = v26;
    uint64_t v101 = v24;
    uint64_t v126 = v35;
    uint64_t v127 = v36;
    uint64_t v37 = v107;
    if (v107)
    {
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = v108;
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = v39;
    }
    else
    {
      uint64_t v50 = v121[28];
      uint64_t v49 = v121[29];
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v50;
      *(void *)(v38 + 24) = v49;
      swift_retain();
    }
    uint64_t v40 = v118;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    *(void *)(v51 + 24) = v38;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v37);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v52 = v102;
    Button<>.init<A>(_:action:)();
    memcpy(__dst, v121 + 2, sizeof(__dst));
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v55 = v116;
    uint64_t v54 = v117;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v52, v40);
    IconButtonConfig.enabled.getter();
    __dst[0] = v40;
    __dst[1] = v53;
    uint64_t v56 = v53;
    __dst[2] = v54;
    __dst[3] = v55;
    uint64_t v121 = (void *)MEMORY[0x1E4F3E3C8];
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v58 = v103;
    View.disabled(_:)();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v22, v20);
    uint64_t v59 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    uint64_t v124 = OpaqueTypeConformance2;
    uint64_t v125 = v59;
    uint64_t v108 = MEMORY[0x1E4F3CC28];
    uint64_t v60 = v110;
    uint64_t v61 = swift_getWitnessTable();
    uint64_t v62 = v106;
    static ViewBuilder.buildExpression<A>(_:)(v58, v60, v61);
    uint64_t v63 = (void (*)(char *, uint64_t))*((void *)v101 + 1);
    v63(v58, v60);
    uint64_t v64 = v100;
    static ViewBuilder.buildExpression<A>(_:)(v62, v60, v61);
    __dst[0] = v120;
    __dst[1] = v56;
    uint64_t v65 = v115;
    __dst[2] = v115;
    __dst[3] = v55;
    uint64_t v122 = swift_getOpaqueTypeConformance2();
    uint64_t v123 = v59;
    swift_getWitnessTable();
    uint64_t v66 = v109;
    static ViewBuilder.buildEither<A, B>(first:)();
    v63(v64, v60);
    v63(v62, v60);
  }
  else
  {
    uint64_t v106 = (char *)OpaqueTypeMetadata2;
    uint64_t v42 = v94;
    uint64_t v41 = v95;
    uint64_t v43 = v107;
    if (v107)
    {
      uint64_t v44 = swift_allocObject();
      uint64_t v45 = v108;
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = v45;
      uint64_t v46 = v43;
      uint64_t v47 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v68 = v121[28];
      uint64_t v67 = v121[29];
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = v68;
      *(void *)(v44 + 24) = v67;
      swift_retain();
      uint64_t v47 = partial apply for thunk for @callee_guaranteed () -> ();
    }
    uint64_t v48 = v120;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = v47;
    *(void *)(v69 + 24) = v44;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v46);
    Button.init(action:label:)();
    memcpy(__dst, v121 + 2, sizeof(__dst));
    uint64_t v70 = swift_checkMetadataState();
    uint64_t v71 = v41;
    uint64_t v72 = v97;
    uint64_t v73 = v70;
    uint64_t v108 = v70;
    uint64_t v74 = v116;
    uint64_t v75 = v115;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v71, v48);
    IconButtonConfig.enabled.getter();
    __dst[0] = v48;
    __dst[1] = v73;
    __dst[2] = v75;
    __dst[3] = v74;
    uint64_t v121 = (void *)MEMORY[0x1E4F3E3C8];
    uint64_t v76 = swift_getOpaqueTypeConformance2();
    uint64_t v77 = v96;
    uint64_t v78 = v106;
    View.disabled(_:)();
    (*(void (**)(char *, char *))(v98 + 8))(v72, v78);
    uint64_t v79 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    uint64_t v136 = v76;
    uint64_t v137 = v79;
    uint64_t v80 = v113;
    uint64_t v81 = swift_getWitnessTable();
    uint64_t v82 = v100;
    static ViewBuilder.buildExpression<A>(_:)(v77, v80, v81);
    uint64_t v83 = *(void (**)(char *, uint64_t))(v42 + 8);
    v83(v77, v80);
    uint64_t v84 = v101;
    static ViewBuilder.buildExpression<A>(_:)(v82, v80, v81);
    __dst[0] = v118;
    __dst[1] = v108;
    __dst[2] = v117;
    __dst[3] = v74;
    uint64_t v134 = swift_getOpaqueTypeConformance2();
    uint64_t v135 = v79;
    swift_getWitnessTable();
    uint64_t v66 = v109;
    static ViewBuilder.buildEither<A, B>(second:)();
    v83(v84, v80);
    v83(v82, v80);
    uint64_t v65 = v115;
  }
  uint64_t v85 = v119;
  __dst[0] = v118;
  __dst[1] = v119;
  uint64_t v86 = v116;
  __dst[2] = v117;
  __dst[3] = v116;
  uint64_t v87 = swift_getOpaqueTypeConformance2();
  uint64_t v88 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v132 = v87;
  uint64_t v133 = v88;
  uint64_t v89 = swift_getWitnessTable();
  __dst[0] = v120;
  __dst[1] = v85;
  __dst[2] = v65;
  __dst[3] = v86;
  uint64_t v130 = swift_getOpaqueTypeConformance2();
  uint64_t v131 = v88;
  uint64_t v90 = swift_getWitnessTable();
  uint64_t v128 = v89;
  uint64_t v129 = v90;
  uint64_t v91 = v112;
  uint64_t v92 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v66, v91, v92);
  return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v66, v91);
}

uint64_t protocol witness for View.body.getter in conformance IconButton<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IconButton.body.getter(*(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a1 + 16), a2);
}

uint64_t IconButtonConfig.buttonStyle.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for StateIconButtonStyle();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1 + 16, v3);
}

uint64_t key path setter for IconButtonConfig.state : <A>IconButtonConfig<A>(uint64_t a1)
{
  __n128 v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, __n128))(v3 + 16))((char *)&v5 - v2, v1);
  return IconButtonConfig.state.setter();
}

void (*IconButtonConfig.state.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  OUTLINED_FUNCTION_50();
  *(void *)(v5 + 8) = *(void *)(v4 + 80);
  OUTLINED_FUNCTION_5_3();
  *(void *)(v6 + 16) = v7;
  size_t v9 = *(void *)(v8 + 64);
  v3[3] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[4] = v10;
  IconButtonConfig.state.getter((uint64_t)v10);
  return IconButtonConfig.state.modify;
}

void IconButtonConfig.state.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    OUTLINED_FUNCTION_2_1();
    v7();
    IconButtonConfig.state.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    IconButtonConfig.state.setter();
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for IconButtonConfig.enabled : <A>IconButtonConfig<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IconButtonConfig.enabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for IconButtonConfig.enabled : <A>IconButtonConfig<A>()
{
  return IconButtonConfig.enabled.setter();
}

uint64_t IconButtonConfig.enabled.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t IconButtonConfig.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t closure #1 in IconButtonConfig.enabled.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 168) = a2;
  return result;
}

uint64_t IconButtonConfig.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

void IconButtonConfig.enabled.modify()
{
  OUTLINED_FUNCTION_11_49();
  OUTLINED_FUNCTION_1_119(v0);
  OUTLINED_FUNCTION_20_41();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_4_96();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_7_84();
  swift_release();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_27();
}

uint64_t IconButtonConfig.enabled.modify()
{
  return $defer #1 <A>() in IconButtonConfig.enabled.modify();
}

uint64_t key path getter for IconButtonConfig.title : <A>IconButtonConfig<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IconButtonConfig.title.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for IconButtonConfig.title : <A>IconButtonConfig<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IconButtonConfig.title : <A>IconButtonConfig<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))IconButtonConfig.title.setter);
}

uint64_t IconButtonConfig.title.setter()
{
  return IconButtonConfig.accessibilityLabel.setter();
}

uint64_t closure #1 in IconButtonConfig.title.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 176) = a2;
  *(void *)(a1 + 184) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void IconButtonConfig.title.modify()
{
  OUTLINED_FUNCTION_11_49();
  OUTLINED_FUNCTION_1_119(v0);
  OUTLINED_FUNCTION_20_41();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_4_96();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_7_84();
  swift_release();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_27();
}

uint64_t IconButtonConfig.title.modify()
{
  return $defer #1 <A>() in IconButtonConfig.enabled.modify();
}

uint64_t IconButtonConfig.hasBadge.getter()
{
  return specialized StateHolder.state.getter() & 1;
}

uint64_t IconButtonConfig.hasBadge.setter(char a1)
{
  return specialized StateHolder.state.setter(a1);
}

uint64_t (*IconButtonConfig.hasBadge.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = IconButtonConfig.hasBadge.getter() & 1;
  return IconButtonConfig.hasBadge.modify;
}

uint64_t IconButtonConfig.hasBadge.modify(uint64_t a1)
{
  return IconButtonConfig.hasBadge.setter(*(unsigned char *)(a1 + 8));
}

uint64_t key path getter for IconButtonConfig.accessibilityLabel : <A>IconButtonConfig<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IconButtonConfig.accessibilityLabel.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for IconButtonConfig.accessibilityLabel : <A>IconButtonConfig<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IconButtonConfig.title : <A>IconButtonConfig<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))IconButtonConfig.accessibilityLabel.setter);
}

uint64_t key path setter for IconButtonConfig.title : <A>IconButtonConfig<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t IconButtonConfig.accessibilityLabel.init@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t closure #1 in IconButtonConfig.accessibilityLabel.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 200) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void IconButtonConfig.accessibilityLabel.modify()
{
  OUTLINED_FUNCTION_11_49();
  OUTLINED_FUNCTION_1_119(v0);
  OUTLINED_FUNCTION_20_41();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_4_96();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_7_84();
  swift_release();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_27();
}

uint64_t IconButtonConfig.accessibilityLabel.modify()
{
  return $defer #1 <A>() in IconButtonConfig.enabled.modify();
}

uint64_t key path getter for IconButtonConfig.accessibilityIdentifier : <A>IconButtonConfig<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IconButtonConfig.accessibilityIdentifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for IconButtonConfig.accessibilityIdentifier : <A>IconButtonConfig<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IconButtonConfig.title : <A>IconButtonConfig<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))IconButtonConfig.accessibilityIdentifier.setter);
}

uint64_t IconButtonConfig.accessibilityIdentifier.setter()
{
  return IconButtonConfig.accessibilityLabel.setter();
}

uint64_t closure #1 in IconButtonConfig.accessibilityIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 208) = a2;
  *(void *)(a1 + 216) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void IconButtonConfig.accessibilityIdentifier.modify()
{
  OUTLINED_FUNCTION_11_49();
  OUTLINED_FUNCTION_1_119(v0);
  OUTLINED_FUNCTION_20_41();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_4_96();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_7_84();
  swift_release();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_27();
}

uint64_t IconButtonConfig.accessibilityIdentifier.modify()
{
  return $defer #1 <A>() in IconButtonConfig.enabled.modify();
}

uint64_t IconButtonConfig.didTap.getter()
{
  return OUTLINED_FUNCTION_35();
}

void IconButtonConfig.symbol.getter(void *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  swift_getKeyPath();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v20 = *(void *)(v1 + 240);
  uint64_t v3 = *(void *)(v1 + 280);
  uint64_t v4 = *(void *)(v1 + 288);
  uint64_t v5 = *(void *)(v1 + 296);
  uint64_t v6 = *(void *)(v1 + 304);
  uint64_t v7 = *(void *)(v1 + 312);
  uint64_t v8 = *(void *)(v1 + 320);
  uint64_t v9 = *(void *)(v1 + 328);
  swift_retain();
  long long v19 = *(_OWORD *)(v1 + 264);
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v6);
  uint64_t v10 = _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v8);
  *a1 = v20;
  OUTLINED_FUNCTION_24_37(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  a1[5] = v3;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  a1[9] = v7;
  a1[10] = v8;
  a1[11] = v9;
}

void *key path getter for IconButtonConfig.symbol : <A>IconButtonConfig<A>@<X0>(void *a1@<X8>)
{
  IconButtonConfig.symbol.getter(v3);
  return memcpy(a1, v3, 0x60uLL);
}

uint64_t key path setter for IconButtonConfig.symbol : <A>IconButtonConfig<A>(void *__src)
{
  memcpy(v5, __src, sizeof(v5));
  uint64_t v1 = v5[6];
  uint64_t v2 = v5[8];
  uint64_t v3 = v5[10];
  swift_retain();
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return IconButtonConfig.symbol.setter(v5);
}

uint64_t IconButtonConfig.symbol.setter(void *a1)
{
  return swift_release();
}

void *IconButtonConfig.symbol.init@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0x60uLL);
}

uint64_t closure #1 in IconButtonConfig.symbol.setter(void *a1, void *a2)
{
  uint64_t v4 = a1 + 30;
  swift_beginAccess();
  uint64_t v9 = a1[37];
  uint64_t v10 = a1[36];
  uint64_t v11 = a1[39];
  uint64_t v14 = a1[40];
  uint64_t v12 = a1[38];
  uint64_t v13 = a1[41];
  memcpy(v4, a2, 0x60uLL);
  uint64_t v5 = a2[6];
  uint64_t v6 = a2[8];
  uint64_t v7 = a2[10];
  swift_retain();
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v5);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v6);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v7);
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v10, v9);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v12, v11);
  return _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v14, v13);
}

void IconButtonConfig.symbol.modify()
{
  OUTLINED_FUNCTION_11_49();
  OUTLINED_FUNCTION_1_119(v0);
  OUTLINED_FUNCTION_20_41();
  IconButtonConfig.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_4_96();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_7_84();
  swift_release();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_27();
}

uint64_t IconButtonConfig.symbol.modify()
{
  return $defer #1 <A>() in IconButtonConfig.enabled.modify();
}

uint64_t $defer #1 <A>() in IconButtonConfig.enabled.modify()
{
  return swift_release();
}

uint64_t sub_1C33EE938@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IconButtonConfig.enabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C33EE968()
{
  return IconButtonConfig.enabled.setter();
}

void *sub_1C33EE994(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t partial apply for closure #1 in IconButtonConfig.enabled.setter()
{
  return closure #1 in IconButtonConfig.enabled.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v44 = a8;
  uint64_t v43 = a7;
  uint64_t v42 = a6;
  uint64_t v41 = a5;
  *(void *)&long long v47 = a12;
  uint64_t v46 = a11;
  int v45 = a10;
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_50_0();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v41 - v19;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  ObservationRegistrar.init()();
  uint64_t v48 = (const void *)(v13 + 352);
  memcpy((void *)(v13 + 352), (const void *)a1, 0x88uLL);
  outlined retain of IconButtonStyle<A>((void *)a1);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 176) = a2;
  *(void *)(v13 + 184) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateHolder<Bool>);
  uint64_t v21 = swift_allocObject();
  ObservationRegistrar.init()();
  *(unsigned char *)(v21 + 16) = a4;
  *(void *)(v13 + 344) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = v42;
  *(void *)(v13 + 192) = v41;
  *(void *)(v13 + 200) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = v44;
  *(void *)(v13 + 208) = v43;
  *(void *)(v13 + 216) = v23;
  type metadata accessor for StateHolder();
  OUTLINED_FUNCTION_2_1();
  v24();
  uint64_t v25 = StateHolder.__allocating_init(state:)((uint64_t)v20);
  OUTLINED_FUNCTION_3_8();
  v26();
  *(unsigned char *)(v13 + 168) = v45;
  uint64_t v27 = v47;
  *(void *)(v13 + 224) = v46;
  *(void *)(v13 + 232) = v27;
  uint64_t v28 = *(void *)(a1 + 80);
  uint64_t v29 = *(void *)(a1 + 88);
  uint64_t v30 = *(void *)(a1 + 96);
  uint64_t v31 = *(void *)(a1 + 104);
  uint64_t v32 = *(void *)(a1 + 112);
  uint64_t v33 = *(void *)(a1 + 120);
  *(void *)(v13 + 240) = *(void *)(a1 + 40);
  uint64_t v34 = *(void *)(a1 + 128);
  long long v35 = *(_OWORD *)(a1 + 48);
  long long v47 = *(_OWORD *)(a1 + 64);
  long long v36 = v47;
  *(_OWORD *)(v13 + 248) = v35;
  *(_OWORD *)(v13 + 264) = v36;
  *(void *)(v13 + 280) = v28;
  *(void *)(v13 + 288) = v29;
  *(void *)(v13 + 296) = v30;
  *(void *)(v13 + 304) = v31;
  *(void *)(v13 + 312) = v32;
  *(void *)(v13 + 320) = v33;
  *(void *)(v13 + 328) = v34;
  *(void *)(v13 + 336) = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v29);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v31);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v33);
  outlined release of IconButtonStyle<A>((void *)a1);
  uint64_t v37 = *(void *)(v13 + 336);
  uint64_t v38 = *(void *)(v13 + 344);
  uint64_t v39 = v48;
  memcpy(__dst, v48, 0x88uLL);
  *(void *)(v13 + 16) = v37;
  *(void *)(v13 + 24) = v38;
  memcpy((void *)(v13 + 32), v39, 0x88uLL);
  swift_retain();
  swift_retain();
  outlined retain of IconButtonStyle<A>(__dst);
  return v13;
}

uint64_t sub_1C33EECA4@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_1Tm(IconButtonConfig.accessibilityLabel.getter, a1);
}

uint64_t partial apply for closure #1 in IconButtonConfig.accessibilityLabel.setter()
{
  return closure #1 in IconButtonConfig.accessibilityLabel.setter(v0[2], v0[3], v0[4]);
}

uint64_t sub_1C33EECE4@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_1Tm(IconButtonConfig.accessibilityIdentifier.getter, a1);
}

void *StateIconButtonStyle.init(stateHolder:hasBadgeHolder:style:)@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, void *a4@<X8>)
{
  uint64_t result = memcpy(a4 + 2, __src, 0x88uLL);
  *a4 = a2;
  a4[1] = a3;
  return result;
}

void *IconButtonConfig.deinit()
{
  memcpy(v10, v0 + 2, sizeof(v10));
  outlined release of StateIconButtonStyle<A>(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[38];
  uint64_t v4 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v6 = v0[41];
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v1, v2);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v3, v4);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v5, v6);
  swift_release();
  swift_release();
  memcpy(__dst, v0 + 44, sizeof(__dst));
  outlined release of IconButtonStyle<A>(__dst);
  uint64_t v7 = (char *)v0 + direct field offset for IconButtonConfig._$observationRegistrar;
  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  (*(void (**)(char *))(v8 + 8))(v7);
  return v0;
}

uint64_t IconButtonConfig.__deallocating_deinit()
{
  IconButtonConfig.deinit();
  OUTLINED_FUNCTION_3_2();
  return swift_deallocClassInstance();
}

double static IconButtonStyle.Defaults.iconPadding.getter()
{
  return 7.0;
}

double IconButtonStyle.spacing.getter()
{
  return *(double *)v0;
}

double IconButtonStyle.width.getter()
{
  return *(double *)(v0 + 8);
}

double IconButtonStyle.iconPadding.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t IconButtonStyle.labelColor.getter()
{
  return swift_retain();
}

uint64_t IconButtonStyle.labelFont.getter()
{
  return swift_retain();
}

void IconButtonStyle.symbol.getter(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  uint64_t v8 = *(void *)(v1 + 112);
  uint64_t v9 = *(void *)(v1 + 120);
  uint64_t v10 = *(void *)(v1 + 128);
  swift_retain();
  long long v20 = *(_OWORD *)(v1 + 64);
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v5);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v7);
  uint64_t v11 = _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v9);
  *a1 = v3;
  OUTLINED_FUNCTION_24_37(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  a1[8] = v7;
  a1[9] = v8;
  a1[10] = v9;
  a1[11] = v10;
}

uint64_t StateIconButtonStyle.stateHolder.getter()
{
  return swift_retain();
}

uint64_t StateIconButtonStyle.hasBadgeHolder.getter()
{
  return swift_retain();
}

uint64_t StateIconButtonStyle.style.getter()
{
  type metadata accessor for IconButtonStyle();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

double StateIconButtonStyle.radius.getter()
{
  return OUTLINED_FUNCTION_23_36(*(double *)(v0 + 24), 0.5);
}

double StateIconButtonStyle.offsetX.getter()
{
  return OUTLINED_FUNCTION_23_36(*(double *)(v0 + 24) * 0.5, 0.5);
}

double StateIconButtonStyle.offsetY.getter()
{
  return OUTLINED_FUNCTION_23_36(*(double *)(v0 + 24) * 0.5, -0.866025404);
}

uint64_t StateIconButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>);
  MEMORY[0x1F4188790](v6 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v7 = *(void *)(v2 + 16);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>);
  *(void *)uint64_t v3 = static HorizontalAlignment.center.getter();
  *(void *)(v3 + 8) = v7;
  *(unsigned char *)(v3 + 16) = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>);
  closure #1 in StateIconButtonStyle.makeBody(configuration:)(a1, v2, *(void *)(a2 + 16), v3 + *(int *)(v8 + 44));
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>);
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v3, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>);
}

uint64_t closure #1 in StateIconButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v88 = a3;
  uint64_t v85 = a1;
  uint64_t v103 = a4;
  uint64_t v99 = type metadata accessor for PrimitiveButtonStyleConfiguration.Label();
  uint64_t v95 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  uint64_t v90 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>)
      - 8;
  MEMORY[0x1F4188790](v92);
  uint64_t v89 = &v73[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>)
      - 8;
  MEMORY[0x1F4188790](v94);
  uint64_t v91 = &v73[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
      - 8;
  MEMORY[0x1F4188790](v96);
  uint64_t v93 = &v73[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>)
       - 8;
  MEMORY[0x1F4188790](v102);
  uint64_t v97 = &v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)
       - 8;
  MEMORY[0x1F4188790](v101);
  uint64_t v98 = &v73[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v100 = &v73[-v13];
  uint64_t v83 = type metadata accessor for PlainButtonStyle();
  uint64_t v86 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v15 = &v73[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for PrimitiveButtonStyleConfiguration();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<<<opaque return type of View.acceptsFirstMouse()>>.0>);
  uint64_t v79 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = &v73[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v87 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v77 = &v73[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>)
      - 8;
  MEMORY[0x1F4188790](v82);
  uint64_t v80 = &v73[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __n128 v25 = MEMORY[0x1F4188790](v24);
  uint64_t v84 = &v73[-v26];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v17 + 16))(&v73[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v16, v25);
  unint64_t v27 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v28 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v17 + 32))(v28 + v27, &v73[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)], v16);
  uint64_t v104 = v88;
  uint64_t v105 = a2;
  uint64_t v78 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.acceptsFirstMouse()>>.0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
  unint64_t v30 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>();
  *(void *)&long long v106 = v29;
  *((void *)&v106 + 1) = v30;
  swift_getOpaqueTypeConformance2();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v31 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<<<opaque return type of View.acceptsFirstMouse()>>.0> and conformance Button<A>, &demangling cache variable for type metadata for Button<<<opaque return type of View.acceptsFirstMouse()>>.0>);
  uint64_t v32 = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x1E4F3CD40]);
  uint64_t v33 = v83;
  View.buttonStyle<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v15, v33);
  (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v21, v19);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>);
  *(void *)&long long v106 = v19;
  *((void *)&v106 + 1) = v33;
  *(void *)&long long v107 = v31;
  *((void *)&v107 + 1) = v32;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v36 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>();
  uint64_t v37 = v81;
  uint64_t v86 = default argument 6 of View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v81, v34, OpaqueTypeConformance2, v36);
  uint64_t v83 = v38;
  closure #2 in closure #1 in StateIconButtonStyle.makeBody(configuration:)(a2, (uint64_t)&v106);
  uint64_t v39 = v106;
  LOBYTE(v32) = BYTE8(v106);
  LOBYTE(v27) = BYTE9(v106);
  uint64_t v40 = v107;
  LOBYTE(v17) = BYTE8(v107);
  uint64_t v41 = v108;
  LODWORD(v88) = BYTE8(v108);
  uint64_t v79 = v109;
  uint64_t v76 = v110;
  long long v75 = v111;
  uint64_t v42 = v112;
  int v74 = v113;
  uint64_t v43 = v87;
  uint64_t v44 = (uint64_t)v80;
  int v45 = v77;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v87 + 16))(v80, v77, v37);
  uint64_t v46 = v44 + *(int *)(v82 + 44);
  *(void *)uint64_t v46 = v39;
  *(unsigned char *)(v46 + 8) = v32;
  *(unsigned char *)(v46 + 9) = v27;
  *(void *)(v46 + 16) = v40;
  *(unsigned char *)(v46 + 24) = v17;
  *(void *)(v46 + 32) = v41;
  *(unsigned char *)(v46 + 40) = v88;
  uint64_t v47 = v76;
  *(void *)(v46 + 48) = v79;
  *(void *)(v46 + 56) = v47;
  *(_OWORD *)(v46 + 64) = v75;
  *(void *)(v46 + 80) = v42;
  *(unsigned char *)(v46 + 88) = v74;
  uint64_t v48 = v83;
  *(void *)(v46 + 96) = v86;
  *(void *)(v46 + 104) = v48;
  (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v45, v37);
  uint64_t v49 = v44;
  uint64_t v50 = v84;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v44, (uint64_t)v84, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>);
  uint64_t v51 = v90;
  PrimitiveButtonStyleConfiguration.label.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v53 = v95;
  uint64_t v54 = (uint64_t)v89;
  uint64_t v55 = v99;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v95 + 16))(v89, v51, v99);
  uint64_t v56 = v54 + *(int *)(v92 + 44);
  *(void *)uint64_t v56 = KeyPath;
  *(unsigned char *)(v56 + 8) = 1;
  (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v51, v55);
  uint64_t v57 = *(void *)(v78 + 40);
  uint64_t v58 = *(void *)(v78 + 48);
  uint64_t v59 = swift_getKeyPath();
  uint64_t v60 = v91;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v54, (uint64_t)v91, &demangling cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>);
  uint64_t v61 = (uint64_t *)&v60[*(int *)(v94 + 44)];
  *uint64_t v61 = v59;
  v61[1] = v58;
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v54, &demangling cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>);
  uint64_t v62 = swift_getKeyPath();
  uint64_t v63 = v93;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v60, (uint64_t)v93, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v64 = (uint64_t *)&v63[*(int *)(v96 + 44)];
  *uint64_t v64 = v62;
  v64[1] = v57;
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v60, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v65 = v97;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v63, (uint64_t)v97, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v66 = &v65[*(int *)(v102 + 44)];
  long long v67 = v107;
  *uint64_t v66 = v106;
  v66[1] = v67;
  void v66[2] = v108;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v63, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v68 = v98;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v65, (uint64_t)v98, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  *(_WORD *)&v68[*(int *)(v101 + 44)] = 1;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v65, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
  uint64_t v69 = v100;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v68, (uint64_t)v100, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v50, v49, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v69, (uint64_t)v68, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>);
  uint64_t v70 = v103;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v49, v103, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>));
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v68, v70 + *(int *)(v71 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v69, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v50, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v68, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v49, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>);
}

uint64_t closure #1 in closure #1 in StateIconButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v3 = type metadata accessor for Material();
  uint64_t v78 = *(void *)(v3 - 8);
  uint64_t v79 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v77 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>>);
  MEMORY[0x1F4188790](v60);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.fontWeight(_:)>>.0);
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v65 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v61 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
  MEMORY[0x1F4188790](v62);
  uint64_t v66 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
  MEMORY[0x1F4188790](v63);
  uint64_t v68 = (uint64_t)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x1F4188790](v67);
  uint64_t v70 = (uint64_t)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  MEMORY[0x1F4188790](v71);
  long long v75 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
  MEMORY[0x1F4188790](v76);
  uint64_t v73 = (uint64_t)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.acceptsFirstMouse()>>.0);
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v69 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for StateIconButtonStyle();
  StateIconButtonStyle.image()(v22, (uint64_t)v11);
  uint64_t v83 = v22;
  StateIconButtonStyle.symbol.getter((uint64_t)v84);
  uint64_t v24 = v85;
  uint64_t v23 = v86;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v85);
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v84[6], v84[7]);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v24, v23);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v87, v88);
  uint64_t v81 = v5;
  uint64_t v82 = a1;
  if (v24)
  {
    StateHolder.state.getter((uint64_t)v8);
    uint64_t v25 = v24(v8);
    _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v24, v23);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  uint64_t v27 = *(int *)(v60 + 36);
  uint64_t v59 = v13;
  uint64_t v28 = (uint64_t *)&v13[v27];
  *uint64_t v28 = KeyPath;
  v28[1] = v25;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  StateIconButtonStyle.symbol.getter((uint64_t)v89);
  unint64_t v30 = v90;
  uint64_t v29 = v91;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v90);
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v89[6], v89[7]);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v89[8], v89[9]);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v30, v29);
  if (v30)
  {
    StateHolder.state.getter((uint64_t)v8);
    v30(v8);
    _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v30, v29);
    uint64_t v31 = v82;
    (*(void (**)(char *))(v81 + 8))(v8);
  }
  else
  {
    uint64_t v31 = v82;
  }
  lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  uint64_t v32 = v61;
  uint64_t v33 = (uint64_t)v59;
  View.fontWeight(_:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v33, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>>);
  StateIconButtonStyle.symbol.getter((uint64_t)v92);
  uint64_t v34 = (uint64_t (*)(char *))v92[2];
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v92[6], v92[7]);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v92[8], v92[9]);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v92[10], v92[11]);
  StateHolder.state.getter((uint64_t)v8);
  uint64_t v35 = v34(v8);
  swift_release();
  uint64_t v81 = *(void *)(v81 + 8);
  ((void (*)(char *, uint64_t))v81)(v8, v31);
  uint64_t v37 = v64;
  uint64_t v36 = v65;
  uint64_t v38 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v66, v32, v65);
  uint64_t v39 = v62;
  *(void *)(v38 + *(int *)(v62 + 36)) = v35;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v36);
  unint64_t v40 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
  default argument 6 of View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v39, v40, v41, v42);
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v43 = v68;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v38, v68, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
  uint64_t v44 = (_OWORD *)(v43 + *(int *)(v63 + 36));
  long long v45 = v94;
  _OWORD *v44 = v93;
  v44[1] = v45;
  v44[2] = v95;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
  StateIconButtonStyle.symbol.getter((uint64_t)v96);
  uint64_t v46 = v97;
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v98, v99);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v100, v101);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v102, v103);
  StateHolder.state.getter((uint64_t)v8);
  uint64_t v47 = v46(v8);
  swift_release();
  ((void (*)(char *, uint64_t))v81)(v8, v82);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  LOBYTE(v39) = static Edge.Set.all.getter();
  uint64_t v48 = v70;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v43, v70, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
  uint64_t v49 = v48 + *(int *)(v67 + 36);
  *(void *)uint64_t v49 = v47;
  *(unsigned char *)(v49 + 8) = v39;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v43, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
  uint64_t v50 = v77;
  static Material.ultraThin.getter();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
  LOBYTE(v47) = static Edge.Set.all.getter();
  uint64_t v51 = (uint64_t)v75;
  uint64_t v52 = &v75[*(int *)(v71 + 36)];
  uint64_t v54 = v78;
  uint64_t v53 = v79;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v52, v50, v79);
  v52[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundStyleModifier<Material>)
             + 36)] = v47;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v48, v51, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v53);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Circle and conformance Circle();
  LOWORD(v47) = default argument 1 of View.clipShape<A>(_:style:)();
  uint64_t v55 = v73;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v51, v73, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  uint64_t v56 = (unsigned char *)(v55 + *(int *)(v76 + 36));
  *uint64_t v56 = v47 & 1;
  v56[1] = BYTE1(v47) & 1;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v51, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>();
  uint64_t v57 = v69;
  View.acceptsFirstMouse()();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v55, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v72 + 32))(v80, v57, v74);
}

__n128 StateIconButtonStyle.symbol.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  uint64_t v6 = *(void *)(v1 + 112);
  uint64_t v7 = *(void *)(v1 + 120);
  uint64_t v8 = *(void *)(v1 + 128);
  uint64_t v9 = *(void *)(v1 + 136);
  uint64_t v10 = *(void *)(v1 + 144);
  long long v13 = *(_OWORD *)(v1 + 64);
  swift_retain();
  __n128 v12 = *(__n128 *)(v1 + 80);
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v5);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v7);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v9);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v13;
  __n128 result = v12;
  *(__n128 *)(a1 + 24) = v12;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  return result;
}

uint64_t closure #2 in closure #1 in StateIconButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static Color.red.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  double v5 = *(double *)(a1 + 24) * 0.5;
  double v6 = v5 * 0.5;
  double v7 = v5 * -0.866025404;
  uint64_t result = specialized StateHolder.state.getter();
  double v9 = 0.85;
  *(void *)a2 = v4;
  *(_WORD *)(a2 + 8) = 256;
  if ((result & 1) == 0) {
    double v9 = 0.0;
  }
  *(void *)(a2 + 16) = v10;
  *(unsigned char *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  *(double *)(a2 + 64) = v6;
  *(double *)(a2 + 72) = v7;
  *(double *)(a2 + 80) = v9;
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance StateIconButtonStyle<A>(uint64_t a1, uint64_t a2)
{
  memcpy(__dst, v2, sizeof(__dst));
  return StateIconButtonStyle.makeBody(configuration:)(a1, a2);
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues, serialized()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1C33F0984()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t key path setter for EnvironmentValues.imageScale : EnvironmentValues, serialized(uint64_t a1)
{
  type metadata accessor for Image.Scale();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, a1);
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_1C33F0A40@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_1Tm(IconButtonConfig.title.getter, a1);
}

uint64_t keypath_get_1Tm@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t type metadata accessor for StateIconButtonStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in IconButtonConfig.title.setter()
{
  return closure #1 in IconButtonConfig.title.setter(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in IconButtonConfig.accessibilityIdentifier.setter()
{
  return closure #1 in IconButtonConfig.accessibilityIdentifier.setter(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in IconButtonConfig.symbol.setter()
{
  return closure #1 in IconButtonConfig.symbol.setter(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void *outlined retain of IconButtonStyle<A>(void *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[13];
  uint64_t v4 = a1[15];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
  return a1;
}

void *outlined release of IconButtonStyle<A>(void *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[15];
  uint64_t v8 = a1[16];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v2, v3);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v4, v5);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v6, v8);
  return a1;
}

void *outlined release of StateIconButtonStyle<A>(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[14];
  uint64_t v4 = a1[15];
  uint64_t v8 = a1[17];
  uint64_t v6 = a1[16];
  uint64_t v7 = a1[18];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v2, v3);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v4, v6);
  _sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe(v8, v7);
  return a1;
}

uint64_t type metadata accessor for IconButtonStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in IconButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in StateIconButtonStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C33F0DE8@<X0>(uint64_t a1@<X8>)
{
  return IconButtonConfig.state.getter(a1);
}

uint64_t sub_1C33F0E1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IconButtonConfig.hasBadge.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C33F0E4C(char *a1)
{
  return IconButtonConfig.hasBadge.setter(*a1);
}

uint64_t destroy for IconButton(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 8))
  {
    return swift_release();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for IconButton(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v4 = a2[1];
  swift_retain();
  if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  return a1;
}

void *assignWithCopy for IconButton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      uint64_t v6 = a2[2];
      a1[1] = v4;
      a1[2] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for IconButton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      uint64_t v6 = a2[2];
      a1[1] = v4;
      a1[2] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for IconButton()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for IconButtonConfig()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for IconButtonConfig()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for IconButtonConfig(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IconButtonConfig);
}

uint64_t dispatch thunk of IconButtonConfig.__allocating_init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(long long *a1)
{
  uint64_t v2 = *(uint64_t (**)(long long *))(v1 + 176);
  uint64_t v3 = *((void *)a1 + 2);
  long long v5 = *a1;
  uint64_t v6 = v3;
  long long v7 = *(long long *)((char *)a1 + 24);
  long long v8 = *(long long *)((char *)a1 + 40);
  long long v9 = *(long long *)((char *)a1 + 56);
  long long v10 = *(long long *)((char *)a1 + 72);
  long long v11 = *(long long *)((char *)a1 + 88);
  long long v12 = *(long long *)((char *)a1 + 104);
  long long v13 = *(long long *)((char *)a1 + 120);
  return v2(&v5);
}

uint64_t destroy for IconButtonStyle(void *a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (a1[11]) {
    uint64_t result = swift_release();
  }
  if (a1[13]) {
    uint64_t result = swift_release();
  }
  if (a1[15])
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for IconButtonStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  uint64_t v5 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v5;
  long long v7 = (_OWORD *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v6;
    *(void *)(a1 + 96) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *v7;
  }
  uint64_t v9 = *(void *)(a2 + 104);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v9;
    *(void *)(a1 + 112) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  uint64_t v11 = *(void *)(a2 + 120);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v11;
    *(void *)(a1 + 128) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  }
  return a1;
}

void *assignWithCopy for IconButtonStyle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[10];
  a1[9] = a2[9];
  a1[10] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[11];
  if (a1[11])
  {
    if (v7)
    {
      uint64_t v8 = a2[12];
      a1[11] = v7;
      a1[12] = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[12];
    a1[11] = v7;
    a1[12] = v9;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
LABEL_8:
  uint64_t v10 = a2[13];
  if (a1[13])
  {
    if (v10)
    {
      uint64_t v11 = a2[14];
      a1[13] = v10;
      a1[14] = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[14];
    a1[13] = v10;
    a1[14] = v12;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
LABEL_15:
  uint64_t v13 = a2[15];
  if (!a1[15])
  {
    if (v13)
    {
      uint64_t v15 = a2[16];
      a1[15] = v13;
      a1[16] = v15;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 15);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v14 = a2[16];
  a1[15] = v13;
  a1[16] = v14;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy136_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t assignWithTake for IconButtonStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = v4;
      *(void *)(a1 + 96) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v4;
    *(void *)(a1 + 96) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v7;
      *(void *)(a1 + 112) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v7;
    *(void *)(a1 + 112) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_15:
  uint64_t v10 = *(void *)(a2 + 120);
  if (!*(void *)(a1 + 120))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = v10;
      *(void *)(a1 + 128) = v12;
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 128) = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IconButtonStyle(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 136))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IconButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for IconButtonStyle.Defaults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t type metadata accessor for IconButtonStyle.Defaults()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for StateIconButtonStyle(void *a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (a1[13]) {
    uint64_t result = swift_release();
  }
  if (a1[15]) {
    uint64_t result = swift_release();
  }
  if (a1[17])
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for StateIconButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  long long v15 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  uint64_t v6 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v6;
  uint64_t v8 = (_OWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v7;
    *(void *)(a1 + 112) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *v8;
  }
  uint64_t v10 = *(void *)(a2 + 120);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 128) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  }
  uint64_t v12 = *(void *)(a2 + 136);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = v12;
    *(void *)(a1 + 144) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  }
  return a1;
}

void *assignWithCopy for StateIconButtonStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[8];
  a1[7] = a2[7];
  a1[8] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[10];
  a1[9] = a2[9];
  a1[10] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[12];
  a1[11] = a2[11];
  a1[12] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[13];
  if (a1[13])
  {
    if (v7)
    {
      uint64_t v8 = a2[14];
      a1[13] = v7;
      a1[14] = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[14];
    a1[13] = v7;
    a1[14] = v9;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
LABEL_8:
  uint64_t v10 = a2[15];
  if (a1[15])
  {
    if (v10)
    {
      uint64_t v11 = a2[16];
      a1[15] = v10;
      a1[16] = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[16];
    a1[15] = v10;
    a1[16] = v12;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 15);
LABEL_15:
  uint64_t v13 = a2[17];
  if (!a1[17])
  {
    if (v13)
    {
      uint64_t v15 = a2[18];
      a1[17] = v13;
      a1[18] = v15;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v14 = a2[18];
  a1[17] = v13;
  a1[18] = v14;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy152_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t assignWithTake for StateIconButtonStyle(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v4;
      *(void *)(a1 + 112) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v4;
    *(void *)(a1 + 112) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = v7;
      *(void *)(a1 + 128) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v7;
    *(void *)(a1 + 128) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
LABEL_15:
  uint64_t v10 = *(void *)(a2 + 136);
  if (!*(void *)(a1 + 136))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = v10;
      *(void *)(a1 + 144) = v12;
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 144) = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StateIconButtonStyle(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 152))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateIconButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C33F1DD4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C33F21A8()
{
  type metadata accessor for PrimitiveButtonStyleConfiguration();
  OUTLINED_FUNCTION_0();
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in closure #1 in StateIconButtonStyle.makeBody(configuration:)()
{
}

uint64_t partial apply for closure #1 in closure #1 in StateIconButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in StateIconButtonStyle.makeBody(configuration:)(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Circle, Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

uint64_t sub_1C33F2970()
{
  swift_release();
  return swift_deallocObject();
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v61 = a2;
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v73;
    uint64_t v66 = v74;
    uint64_t v2 = v75;
    int64_t v5 = v76;
    unint64_t v6 = v77;
  }
  else
  {
    OUTLINED_FUNCTION_153_0();
    uint64_t v66 = v4 + 56;
    OUTLINED_FUNCTION_152_0();
    unint64_t v6 = v7 & v8;
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v64 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v60 = v2;
  int64_t v65 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v62 = MEMORY[0x1E4FBC860];
  uint64_t v9 = &selRef_ringButton;
  uint64_t v63 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    int64_t v10 = v5;
    if ((v4 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v13 = __CocoaSet.Iterator.next()();
    if (!v13) {
      goto LABEL_42;
    }
    uint64_t v78 = v13;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v67;
    swift_unknownObjectRelease();
    uint64_t v9 = &selRef_ringButton;
    if (!v14) {
      goto LABEL_42;
    }
LABEL_28:
    id v19 = [v14 v9[218]];
    if (!v19)
    {
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v19 = (id)MEMORY[0x1C87730B0](v20);
      swift_bridgeObjectRelease();
    }
    unsigned __int8 v21 = objc_msgSend(v19, sel_destinationIdIsTemporary);

    if (v21)
    {
    }
    else
    {
      uint64_t v57 = v3;
      id v22 = v14;
      swift_retain();
      id v53 = v22;
      OUTLINED_FUNCTION_5_8();
      ParticipantContactDetailsCache.contactDetails(for:nickname:)();
      uint64_t v23 = v67;
      uint64_t v55 = v68;
      uint64_t v24 = v69;
      uint64_t v54 = v70;
      uint64_t v25 = v71;
      uint64_t v52 = v72;
      uint64_t v26 = type metadata accessor for PersonNameComponents();
      v50[3] = v50;
      v50[2] = v26;
      OUTLINED_FUNCTION_5_3();
      v50[1] = v27;
      MEMORY[0x1F4188790](v28);
      OUTLINED_FUNCTION_60();
      id v29 = v23;
      uint64_t v59 = v24;
      swift_bridgeObjectRetain();
      uint64_t v58 = v25;
      swift_bridgeObjectRetain();
      PersonNameComponents.init()();
      uint64_t v56 = v23;
      id v51 = v29;
      if (v23)
      {
        id v30 = objc_msgSend(v29, sel_givenName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        PersonNameComponents.givenName.setter();
        id v31 = objc_msgSend(v29, sel_familyName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        PersonNameComponents.givenName.setter();
      }
      PersonNameComponents.familyName.setter();
      if (one-time initialization token for initials != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v32 = (id)static NSPersonNameComponentsFormatter.initials;
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v34 = objc_msgSend(v32, sel_stringFromPersonNameComponents_, isa);

      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      OUTLINED_FUNCTION_26_2();
      v38();
      uint64_t v67 = (void *)v35;
      uint64_t v68 = v37;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v39 = StringProtocol.localizedUppercase.getter();
      uint64_t v41 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      id v42 = v53;
      swift_release();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_193_1();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v62 = v48;
      }
      uint64_t v3 = v57;
      unint64_t v43 = *(void *)(v62 + 16);
      if (v43 >= *(void *)(v62 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v62 = v49;
      }
      uint64_t v44 = v62;
      *(void *)(v62 + 16) = v43 + 1;
      long long v45 = (void *)(v44 + 56 * v43);
      uint64_t v46 = v55;
      v45[4] = v56;
      v45[5] = v46;
      uint64_t v47 = v54;
      v45[6] = v59;
      v45[7] = v47;
      v45[8] = v58;
      v45[9] = v39;
      v45[10] = v41;
      uint64_t v9 = &selRef_ringButton;
    }
  }
  if (v6)
  {
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_27:
    id v14 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
    if (!v14) {
      goto LABEL_42;
    }
    goto LABEL_28;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v65) {
      goto LABEL_42;
    }
    ++v5;
    if (!*(void *)(v66 + 8 * v15))
    {
      int64_t v5 = v10 + 2;
      if (v10 + 2 >= v65) {
        goto LABEL_42;
      }
      if (!*(void *)(v66 + 8 * v5))
      {
        int64_t v5 = v10 + 3;
        if (v10 + 3 >= v65) {
          goto LABEL_42;
        }
        if (!*(void *)(v66 + 8 * v5))
        {
          int64_t v5 = v10 + 4;
          if (v10 + 4 >= v65) {
            goto LABEL_42;
          }
          if (!*(void *)(v66 + 8 * v5))
          {
            int64_t v5 = v10 + 5;
            if (v10 + 5 >= v65) {
              goto LABEL_42;
            }
            if (!*(void *)(v66 + 8 * v5))
            {
              int64_t v16 = v10 + 6;
              while (v16 < v65)
              {
                if (*(void *)(v66 + 8 * v16++))
                {
                  int64_t v5 = v16 - 1;
                  goto LABEL_26;
                }
              }
LABEL_42:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_26:
    OUTLINED_FUNCTION_320();
    unint64_t v12 = v18 + (v5 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v17 = v20;
    uint64_t v3 = v21;
    int64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      int64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_34;
    }
    unint64_t v15 = *(void *)(v17 + 8 * v14);
    int64_t v12 = v4 + 1;
    if (!v15)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        goto LABEL_34;
      }
      unint64_t v15 = *(void *)(v17 + 8 * v12);
      if (!v15)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          goto LABEL_34;
        }
        unint64_t v15 = *(void *)(v17 + 8 * v12);
        if (!v15)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            goto LABEL_34;
          }
          unint64_t v15 = *(void *)(v17 + 8 * v12);
          if (!v15)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              goto LABEL_34;
            }
            unint64_t v15 = *(void *)(v17 + 8 * v12);
            if (!v15)
            {
              int64_t v16 = v4 + 6;
              while (v16 < v9)
              {
                unint64_t v15 = *(void *)(v17 + 8 * v16++);
                if (v15)
                {
                  int64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return v24;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_34;
    }
    while (1)
    {
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v13);

      MEMORY[0x1C87733A0]();
      if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      int64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v18;
        swift_unknownObjectRelease();
        int64_t v12 = v4;
        uint64_t v10 = v5;
        if (v18) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  uint64_t v1 = a1;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v17 = v20;
    uint64_t v3 = v21;
    int64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      int64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_34;
    }
    unint64_t v15 = *(void *)(v17 + 8 * v14);
    int64_t v12 = v4 + 1;
    if (!v15)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        goto LABEL_34;
      }
      unint64_t v15 = *(void *)(v17 + 8 * v12);
      if (!v15)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          goto LABEL_34;
        }
        unint64_t v15 = *(void *)(v17 + 8 * v12);
        if (!v15)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            goto LABEL_34;
          }
          unint64_t v15 = *(void *)(v17 + 8 * v12);
          if (!v15)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              goto LABEL_34;
            }
            unint64_t v15 = *(void *)(v17 + 8 * v12);
            if (!v15)
            {
              int64_t v16 = v4 + 6;
              while (v16 < v9)
              {
                unint64_t v15 = *(void *)(v17 + 8 * v16++);
                if (v15)
                {
                  int64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return v24;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_34;
    }
    while (1)
    {
      CHHandle.tuHandle.getter();

      MEMORY[0x1C87733A0]();
      if (*(void *)(v24 + 16) >= *(void *)(v24 + 24) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      int64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v18;
        swift_unknownObjectRelease();
        int64_t v12 = v4;
        uint64_t v10 = v5;
        if (v18) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

void specialized Sequence.flatMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v2 = v22;
    int64_t v3 = v23;
    unint64_t v4 = v24;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v17 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v8 = (v4 - 1) & v4;
      unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
      int64_t v10 = v3;
      goto LABEL_29;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v17) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v18 + 8 * v12);
    int64_t v10 = v3 + 1;
    if (!v13)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v10);
      if (!v13)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v18 + 8 * v10);
        if (!v13)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v18 + 8 * v10);
          if (!v13)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v18 + 8 * v10);
            if (!v13)
            {
              int64_t v14 = v3 + 6;
              while (v14 < v17)
              {
                unint64_t v13 = *(void *)(v18 + 8 * v14++);
                if (v13)
                {
                  int64_t v10 = v14 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_29:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v11) {
      goto LABEL_32;
    }
    while (1)
    {
      id v15 = objc_msgSend(v11, sel_handles);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Array.append<A>(contentsOf:)(v16);
      int64_t v3 = v10;
      unint64_t v4 = v8;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v11 = v19;
        swift_unknownObjectRelease();
        int64_t v10 = v3;
        uint64_t v8 = v4;
        if (v19) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t specialized static MainActor.run<A>(resultType:body:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](specialized static MainActor.run<A>(resultType:body:), 0, 0);
}

{
  uint64_t v2;

  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return MEMORY[0x1F4188298](specialized static MainActor.run<A>(resultType:body:), 0, 0);
}

uint64_t specialized static MainActor.run<A>(resultType:body:)()
{
  OUTLINED_FUNCTION_17_2();
  type metadata accessor for MainActor();
  *(void *)(v0 + 32) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](specialized static MainActor.run<A>(resultType:body:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void, void);
  uint64_t (*v3)(BOOL);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void (**)(void, void))(v0 + 16);
    v2(0, 0);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v2);
  }
  int64_t v3 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v3(v1 == 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  type metadata accessor for MainActor();
  *(void *)(v0 + 40) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](specialized static MainActor.run<A>(resultType:body:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void, uint64_t);
  uint64_t (*v3)(BOOL);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 16);
    v2(*(void *)(v0 + 32), 1);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v2);
  }

  int64_t v3 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v3(v1 == 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  type metadata accessor for MainActor();
  *(void *)(v0 + 40) = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 24);
  uint64_t v2 = swift_release();
  v1(v2);
  OUTLINED_FUNCTION_4_21();
  return v3();
}

uint64_t specialized static MainActor.run<A>(resultType:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](specialized static MainActor.run<A>(resultType:body:), 0, 0);
}

uint64_t RecentsCallItem.init(message:title:contact:messageType:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v107 = a5;
  uint64_t v105 = a4;
  uint64_t v100 = a2;
  uint64_t v101 = a3;
  uint64_t v108 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_10_5();
  uint64_t v98 = v9;
  OUTLINED_FUNCTION_8_1();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  unint64_t v13 = (uint64_t *)((char *)&v92 - v12);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_42();
  uint64_t v104 = v14;
  uint64_t v15 = OUTLINED_FUNCTION_30_9();
  uint64_t v103 = type metadata accessor for RecentsCallItem(v15);
  uint64_t v16 = *(int *)(v103 + 56);
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v106 = a6;
  *(void *)(a6 + v16) = v17;
  dispatch thunk of Message.duration.getter();
  double v19 = v18;
  uint64_t v110 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  uint64_t v21 = v20;
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x1F4188790](v24);
  unint64_t v99 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  dispatch thunk of Message.recordUUID.getter();
  uint64_t v102 = UUID.uuidString.getter();
  id v97 = v25;
  uint64_t v109 = *(void *)(v21 + 8);
  OUTLINED_FUNCTION_10_6();
  v26();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v28 = OUTLINED_FUNCTION_8(v27);
  uint64_t v30 = *(void *)(v29 + 64);
  MEMORY[0x1F4188790](v28);
  id v31 = (unsigned char *)((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v32 = (char *)((char *)&v92 - v31);
  dispatch thunk of Message.messageFile.getter();
  uint64_t v33 = type metadata accessor for URL();
  uint64_t v34 = OUTLINED_FUNCTION_93_2(v33);
  MEMORY[0x1F4188790](v34);
  dispatch thunk of Message.messageThumbnail.getter();
  LODWORD(v96) = dispatch thunk of Message.isRead.getter();
  LODWORD(v95) = dispatch thunk of Message.isSensitive.getter();
  LODWORD(v30) = (unsigned __int16)MessageType.rawValue.getter();
  LOBYTE(v30) = v30 == (unsigned __int16)MessageType.rawValue.getter();
  uint64_t v35 = self;
  id v93 = v35;
  uint64_t v36 = dispatch thunk of Message.from.getter();
  MEMORY[0x1C87730B0](v36);
  OUTLINED_FUNCTION_23_32();
  id v37 = objc_msgSend(v35, sel_normalizedHandleWithDestinationID_, v31);

  id v38 = objc_allocWithZone(MEMORY[0x1E4FADA40]);
  id v97 = @nonobjc TPMessageIndicatorViewModel.init(duration:identifier:mediaURL:thumbnailURL:isRead:isSensitive:isVideo:from:)(v19, v102, (uint64_t)v97, (char *)&v92 - v31, (char *)&v92 - v31, v96 & 1, v95 & 1, v30, v37);
  uint64_t v102 = v23;
  MEMORY[0x1F4188790](v97);
  dispatch thunk of Message.conversationID.getter();
  uint64_t v96 = UUID.uuidString.getter();
  uint64_t v95 = v39;
  unint64_t v99 = v21 + 8;
  OUTLINED_FUNCTION_10_6();
  v40();
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v42 = OUTLINED_FUNCTION_8(v41);
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_5_1();
  id v43 = a1;
  dispatch thunk of Message.dateCreated.getter();
  uint64_t v44 = type metadata accessor for Date();
  OUTLINED_FUNCTION_93_2(v44);
  unsigned __int16 v45 = v107;
  uint64_t v94 = MessageType.mediaType.getter(v107);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RecentsCallHandle>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769620;
  dispatch thunk of Message.from.getter();
  OUTLINED_FUNCTION_173_1();
  swift_bridgeObjectRetain();
  uint64_t v47 = OUTLINED_FUNCTION_362();
  MEMORY[0x1C87730B0](v47);
  OUTLINED_FUNCTION_23_32();
  id v48 = objc_msgSend(v93, sel_normalizedHandleWithDestinationID_, v31);

  if (v48)
  {
    swift_bridgeObjectRelease();
    id v43 = v48;
    TUHandle.recentsCallHandleType.getter(&v111);
    char v49 = v111;
    id v50 = objc_msgSend(v48, sel_value);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_173_1();
  }
  else
  {
    char v49 = 1;
  }
  *(unsigned char *)(inited + 32) = v49;
  *(void *)(inited + 40) = v35;
  *(void *)(inited + 48) = v43;
  uint64_t v51 = specialized Set.init<A>(_:)(inited);
  uint64_t v52 = (int *)v108;
  OUTLINED_FUNCTION_218();
  __swift_storeEnumTagSinglePayload(v53, v54, v55, v110);
  uint64_t v56 = (uint64_t)v13 + v52[12];
  dispatch thunk of Message.conversationID.getter();
  OUTLINED_FUNCTION_82_2(v56, 0);
  uint64_t v57 = v52[6];
  uint64_t v58 = (uint64_t *)((char *)v13 + v52[11]);
  uint64_t v59 = v52[13];
  *(uint64_t *)((char *)v13 + v59) = 0;
  uint64_t v60 = v95;
  *unint64_t v13 = v96;
  v13[1] = v60;
  outlined init with take of RecentsCollectionViewSectionable?((uint64_t)v32, (uint64_t)v13 + v52[5], (uint64_t *)&demangling cache variable for type metadata for Date?);
  *(uint64_t *)((char *)v13 + v57) = 0;
  uint64_t v61 = (char *)v13 + v52[7];
  *(void *)uint64_t v61 = v94;
  v61[8] = 0;
  *(uint64_t *)((char *)v13 + v52[8]) = v51;
  *(uint64_t *)((char *)v13 + v52[9]) = 0;
  *uint64_t v58 = 0;
  v58[1] = 0;
  v58[2] = 0;
  uint64_t v62 = v98;
  *(void *)(v98 + v52[6]) = 0;
  uint64_t v63 = (void *)(v62 + v52[11]);
  *uint64_t v63 = 0;
  v63[1] = 0;
  v63[2] = 0;
  *(void *)(v62 + v52[13]) = 0;
  id v64 = v97;
  *(uint64_t *)((char *)v13 + v59) = (uint64_t)v97;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0((uint64_t)v13, v62);
  id v97 = v64;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v13, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v65 = v104;
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v62, v104);
  if (v45 >= 2u)
  {
    uint64_t v66 = v106;
    uint64_t v72 = (int *)v103;
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v65, v106);
    OUTLINED_FUNCTION_211_1();
    swift_storeEnumTagMultiPayload();
    id v73 = objc_msgSend(self, sel_conversationKit);
    if (v45 == 2)
    {
      OUTLINED_FUNCTION_35_15();
      OUTLINED_FUNCTION_190_0();
    }
    else
    {
      uint64_t v74 = OUTLINED_FUNCTION_35_15();
      uint64_t v75 = 0xE800000000000000;
    }
    uint64_t v69 = OUTLINED_FUNCTION_0_23(v74, v75);
    uint64_t v71 = v76;
  }
  else
  {
    uint64_t v66 = v106;
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v65, v106);
    OUTLINED_FUNCTION_211_1();
    swift_storeEnumTagMultiPayload();
    id v67 = objc_msgSend(self, sel_conversationKit);
    uint64_t v68 = OUTLINED_FUNCTION_35_15();
    uint64_t v69 = OUTLINED_FUNCTION_0_23(v68, 0xEE004F494455415FLL);
    uint64_t v71 = v70;

    uint64_t v72 = (int *)v103;
  }
  unint64_t v77 = (uint64_t *)(v66 + v72[6]);
  *unint64_t v77 = v69;
  v77[1] = v71;
  uint64_t v78 = (void *)(v66 + v72[5]);
  uint64_t v79 = v101;
  void *v78 = v100;
  v78[1] = v79;
  _s15ConversationKit11ParticipantVSgWOcTm_0(v65 + *(int *)(v108 + 20), v66 + v72[9], (uint64_t *)&demangling cache variable for type metadata for Date?);
  *(void *)(v66 + v72[10]) = objc_msgSend(self, sel_systemRedColor);
  uint64_t v80 = (void *)(v66 + v72[7]);
  *uint64_t v80 = 0;
  v80[1] = 0;
  uint64_t v81 = (void *)(v66 + v72[8]);
  *uint64_t v81 = 0;
  v81[1] = 0;
  *(void *)(v66 + v72[11]) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_1C3769830;
  uint64_t v83 = v105;
  *(void *)(v82 + 32) = v105;
  uint64_t v111 = v82;
  uint64_t v84 = specialized Array._endMutation()();
  *(void *)(v66 + v72[12]) = v111;
  MEMORY[0x1F4188790](v84);
  id v85 = v83;
  dispatch thunk of Message.recordUUID.getter();
  uint64_t v86 = UUID.uuidString.getter();
  uint64_t v88 = v87;

  OUTLINED_FUNCTION_26_2();
  v89();
  uint64_t result = _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v65, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v91 = (uint64_t *)(v66 + v72[13]);
  *uint64_t v91 = v86;
  v91[1] = v88;
  return result;
}

void static RecentsCallItem.contactDetails(from:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_175();
  id v17 = v16;
  double v19 = v18;
  id v20 = objc_msgSend(v16, sel_value);
  if (!v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = (id)MEMORY[0x1C87730B0](v21);
    swift_bridgeObjectRelease();
  }
  unsigned int v22 = objc_msgSend(v20, sel_destinationIdIsTemporary);

  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *double v19 = 0;
    v19[1] = 0;
    void v19[2] = 0;
  }
  else
  {
    id v29 = v17;
    swift_retain();
    OUTLINED_FUNCTION_5_8();
    ParticipantContactDetailsCache.contactDetails(for:nickname:)();
    uint64_t v23 = a15;
    uint64_t v24 = a16;
    id v28 = a12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ParticipantContactDetails.initialsFor(_:)(a12);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v25 = StringProtocol.localizedUppercase.getter();
    uint64_t v26 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    *double v19 = a12;
    v19[1] = a13;
    void v19[2] = a14;
  }
  _OWORD v19[3] = v23;
  v19[4] = v24;
  v19[5] = v25;
  v19[6] = v26;
  OUTLINED_FUNCTION_183();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  return specialized Set.init<A>(_:)(a1, (uint64_t)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (uint64_t)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char v8[8];
  uint64_t v9;

  uint64_t v9 = Set.init(minimumCapacity:)();
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v8, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    OUTLINED_FUNCTION_11();
  }
  return v1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  lazy protocol witness table accessor for type RecentsCallHandle and conformance RecentsCallHandle();
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v11 = v2;
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v7 = *((unsigned char *)v4 - 16);
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((uint64_t)&v10, v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 3;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    uint64_t v8 = v2;
    swift_bridgeObjectRelease();
  }
  return v8;
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t)&lazy cache variable for type metadata for TUConversationInvitationPreference, 0x1E4FADB68, (uint64_t)&lazy protocol witness table cache variable for type TUConversationInvitationPreference and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t)&lazy cache variable for type metadata for TUConversationMember, 0x1E4FADB80, (uint64_t)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
}

{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  Set.init(minimumCapacity:)();
  if (*(void *)(a1 + 16))
  {
    while (1)
    {
      OUTLINED_FUNCTION_121_1();
      specialized Set._Variant.insert(_:)(v3, v4);
    }
  }
  OUTLINED_FUNCTION_11();
  return v1;
}

void specialized Set.init<A>(_:)()
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_40_0();
  uint64_t v2 = type metadata accessor for UUID();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
  OUTLINED_FUNCTION_41_0();
  Set.init(minimumCapacity:)();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  uint64_t v5 = *(void *)(v0 + 16);
  if (v5)
  {
    OUTLINED_FUNCTION_5_3();
    uint64_t v7 = v0 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v22 = *(void *)(v8 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_217_0();
      OUTLINED_FUNCTION_124();
      v9();
      OUTLINED_FUNCTION_124_2();
      __swift_storeEnumTagSinglePayload(v10, v11, v12, v13);
      uint64_t v14 = OUTLINED_FUNCTION_33_0(v1, 1, v2);
      if (v15) {
        break;
      }
      uint64_t v16 = MEMORY[0x1F4188790](v14);
      MEMORY[0x1F4188790](v16);
      OUTLINED_FUNCTION_139_4();
      OUTLINED_FUNCTION_46();
      v17();
      specialized Set._Variant.insert(_:)();
      OUTLINED_FUNCTION_26_2();
      v18();
      v7 += v22;
      if (!--v5) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    OUTLINED_FUNCTION_218();
    __swift_storeEnumTagSinglePayload(v19, v20, v21, v2);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  void (*v12)(void);
  uint64_t v13;
  char v14;
  uint64_t v15;
  void (*v16)(void);
  void (*v17)(void);
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  void v21[5];

  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for UUID();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
  OUTLINED_FUNCTION_30_15();
  Set.init(minimumCapacity:)();
  specialized _NativeDictionary.makeIterator()(v21, v2);
  uint64_t v4 = v21[2];
  double v18 = v21[1];
  uint64_t v5 = v21[4];
  uint64_t v20 = v21[3];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  uint64_t v19 = (unint64_t)(v4 + 64) >> 6;
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  OUTLINED_FUNCTION_307();
  while (1)
  {
    OUTLINED_FUNCTION_124();
    v12();
    OUTLINED_FUNCTION_91_2(v0, 0);
    uint64_t v13 = OUTLINED_FUNCTION_33_0(v0, 1, v3);
    if (v14) {
      goto LABEL_23;
    }
    MEMORY[0x1F4188790](v13);
    OUTLINED_FUNCTION_132_2();
    MEMORY[0x1F4188790](v15);
    OUTLINED_FUNCTION_63_0();
    v16();
    specialized Set._Variant.insert(_:)();
    OUTLINED_FUNCTION_12_1();
    v17();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v19) {
      goto LABEL_22;
    }
    uint64_t v9 = *(void *)(v18 + 8 * v8);
    uint64_t v10 = v20 + 1;
    if (!v9)
    {
      uint64_t v10 = v20 + 2;
      if (v20 + 2 >= v19) {
        goto LABEL_22;
      }
      uint64_t v9 = *(void *)(v18 + 8 * v10);
      if (!v9)
      {
        uint64_t v10 = v20 + 3;
        if (v20 + 3 >= v19) {
          goto LABEL_22;
        }
        uint64_t v9 = *(void *)(v18 + 8 * v10);
        if (!v9)
        {
          uint64_t v10 = v20 + 4;
          if (v20 + 4 >= v19) {
            goto LABEL_22;
          }
          uint64_t v9 = *(void *)(v18 + 8 * v10);
          if (!v9)
          {
            uint64_t v10 = v20 + 5;
            if (v20 + 5 >= v19) {
              goto LABEL_22;
            }
            uint64_t v9 = *(void *)(v18 + 8 * v10);
            if (!v9)
            {
              uint64_t v11 = v20 + 6;
              while (v11 < v19)
              {
                uint64_t v9 = *(void *)(v18 + 8 * v11++);
                if (v9)
                {
                  uint64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_22:
              OUTLINED_FUNCTION_91_2(v0, 1);
LABEL_23:
              swift_release();
              OUTLINED_FUNCTION_28();
              return;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v5 = (v9 - 1) & v9;
    uint64_t v20 = v10;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_14();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_183_1();
  lazy protocol witness table accessor for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata(&lazy protocol witness table cache variable for type ConversationControlsAction and conformance ConversationControlsAction, (void (*)(uint64_t))type metadata accessor for ConversationControlsAction);
  Set.init(minimumCapacity:)();
  uint64_t v8 = *(void *)(v4 + 16);
  if (v8)
  {
    OUTLINED_FUNCTION_125_4();
    do
    {
      _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v5, v0);
      uint64_t v9 = OUTLINED_FUNCTION_39();
      specialized Set._Variant.insert(_:)(v9, v10);
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for ConversationControlsAction);
      v5 += v2;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_15_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_14();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_183_1();
  lazy protocol witness table accessor for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata((unint64_t *)&lazy protocol witness table cache variable for type RecentsCallItem and conformance RecentsCallItem, (void (*)(uint64_t))type metadata accessor for RecentsCallItem);
  Set.init(minimumCapacity:)();
  uint64_t v8 = *(void *)(v4 + 16);
  if (v8)
  {
    OUTLINED_FUNCTION_125_4();
    do
    {
      _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v5, v0);
      OUTLINED_FUNCTION_39();
      specialized Set._Variant.insert(_:)();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentsCallItem);
      v5 += v2;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_15_0();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id *, id))
{
  OUTLINED_FUNCTION_186_1();
  unint64_t v9 = v8 >> 62;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, v6);
  uint64_t v10 = (unint64_t *)OUTLINED_FUNCTION_163();
  lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject(v10, v11);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v13 = result;
  uint64_t v18 = result;
  if (!v9)
  {
    uint64_t v14 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return v13;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_13;
  }
LABEL_5:
  if (v14 >= 1)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x1C87744F0](i, v5);
      }
      else {
        id v16 = *(id *)(v5 + 8 * i + 32);
      }
      a5(&v17, v16);
    }
    swift_bridgeObjectRelease();
    return v18;
  }
  __break(1u);
  return result;
}

#error "1C33F572C: call analysis failed (funcsize=43)"

#error "1C33F57EC: call analysis failed (funcsize=43)"

uint64_t specialized Set.init<A>(_:)()
{
  OUTLINED_FUNCTION_40_0();
  lazy protocol witness table accessor for type InCallControlsState and conformance InCallControlsState();
  Set.init(minimumCapacity:)();
  if (*(void *)(v0 + 16))
  {
    while (1)
    {
      OUTLINED_FUNCTION_121_1();
      specialized Set._Variant.insert(_:)(v2, v3);
    }
  }
  OUTLINED_FUNCTION_11();
  return v1;
}

BOOL RecentsCallItem.isRecentCall.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_110_4();
  BOOL v2 = OUTLINED_FUNCTION_161_2() - 3 < 0xFFFFFFFE;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
  return v2;
}

void RecentsCallItemType.conversationUUID()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_14();
  a17 = v19;
  a18 = v20;
  uint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v24 = OUTLINED_FUNCTION_8(v23);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_216_1();
  OUTLINED_FUNCTION_163();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v18, (uint64_t)v26);
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_124();
      v33();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v26, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      OUTLINED_FUNCTION_124_2();
      goto LABEL_4;
    case 2u:
      id v34 = *v18;
      swift_bridgeObjectRetain();
      swift_retain();
      id v35 = objc_msgSend(v34, sel_groupUUID);
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v37 = OUTLINED_FUNCTION_8(v36);
      MEMORY[0x1F4188790](v37);
      OUTLINED_FUNCTION_63();
      if (v35)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v38 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_207_1(v38);
      outlined init with take of RecentsCollectionViewSectionable?(v27, v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_120_3();
      OUTLINED_FUNCTION_32_1();

      break;
    default:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v18, (void (*)(void))type metadata accessor for RecentsCallItemType);
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_218();
LABEL_4:
      __swift_storeEnumTagSinglePayload(v29, v30, v31, v32);
      break;
  }
  OUTLINED_FUNCTION_15_0();
}

void RecentsCallItem.hasURL.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  RecentsCallItem.conversationLink.getter();
  if (v12)
  {
    id v5 = objc_msgSend(v12, sel_URL);
    if (MEMORY[0x1F4188790](v5))
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = (char *)&v11 - v4;
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = (char *)&v11 - v4;
      uint64_t v8 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v7, v8, 1, v6);
    outlined init with take of RecentsCollectionViewSectionable?((uint64_t)&v11 - v4, (uint64_t)&v11 - v4, &demangling cache variable for type metadata for URL?);
    uint64_t v10 = (void *)OUTLINED_FUNCTION_41_0();
    outlined consume of ConversationLink?(v10);
    type metadata accessor for URL();
    OUTLINED_FUNCTION_33_0((uint64_t)&v11 - v4, 1, v6);
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    OUTLINED_FUNCTION_0_53(v9);
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)&v11 - v4, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15_0();
}

void RecentsCallItem.conversationLink.getter()
{
  OUTLINED_FUNCTION_14();
  unint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_104_5();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = OUTLINED_FUNCTION_80();
  type metadata accessor for RecentsCallItemType(v9);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v16 = OUTLINED_FUNCTION_205_0();
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v16, v17);
      uint64_t v18 = (uint64_t *)(v0 + *(int *)(v5 + 28));
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      uint64_t v14 = v18[2];
      uint64_t v21 = (void *)OUTLINED_FUNCTION_24_2();
      outlined copy of ConversationLink?(v21);
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      *unint64_t v4 = v19;
      v4[1] = v20;
      goto LABEL_5;
    case 2u:
      uint64_t v22 = *(void *)(v2 + 16);
      *(_OWORD *)unint64_t v4 = *(_OWORD *)v2;
      v4[2] = v22;
      break;
    case 3u:
    case 4u:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItemType);
      v4[1] = 0;
      v4[2] = 0;
      *unint64_t v4 = 0;
      break;
    default:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v2, v1);
      uint64_t v11 = (uint64_t *)(v1 + *(int *)(v7 + 44));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = v11[2];
      char v15 = (void *)OUTLINED_FUNCTION_41_0();
      outlined copy of ConversationLink?(v15);
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      *unint64_t v4 = v12;
      v4[1] = v13;
LABEL_5:
      v4[2] = v14;
      break;
  }
  OUTLINED_FUNCTION_15_0();
}

void RecentsCallItem.isInContacts.getter()
{
  OUTLINED_FUNCTION_13_26();
  RecentsCallItem.tuHandles.getter();
  uint64_t v1 = v0;
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v2 = static ParticipantContactDetailsCache.faceTime;
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v1, (uint64_t)v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  unint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 32;
    do
    {
      uint64_t v8 = *(void **)(v4 + v7);
      if (v8)
      {
        v8;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_174_2();
        }
        OUTLINED_FUNCTION_39();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += 56;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    unint64_t v5 = v9;
  }
  swift_bridgeObjectRelease();
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_2();
}

BOOL RecentsCallItem.isOrphanedVideoMessage.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_110_4();
  BOOL v2 = OUTLINED_FUNCTION_161_2() == 3;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
  return v2;
}

void RecentsCallItem.tuHandles.getter()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = OUTLINED_FUNCTION_80();
  uint64_t v7 = type metadata accessor for RecentCallRecentItemMetadata(v6);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_216_1();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v0, (uint64_t)v4);
      swift_bridgeObjectRetain();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v4, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      goto LABEL_28;
    case 2u:
      uint64_t v32 = *v0;
      outlined bridged method (pb) of @objc TUConversationLink.invitedMemberHandles.getter(*v0);
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_28;
    default:
      uint64_t v9 = OUTLINED_FUNCTION_217_0();
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v9, v10);
      v33[1] = (id)MEMORY[0x1E4FBC870];
      uint64_t v11 = *(void *)(v1 + *(int *)(v7 + 32));
      swift_bridgeObjectRetain();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      if (!v11) {
        goto LABEL_28;
      }
      int64_t v12 = 0;
      uint64_t v13 = v11 + 56;
      OUTLINED_FUNCTION_17_19();
      unint64_t v16 = v15 & v14;
      int64_t v18 = (unint64_t)(v17 + 63) >> 6;
      break;
  }
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v12 << 6);
LABEL_20:
    uint64_t v26 = *(void *)(v11 + 48);
    uint64_t v27 = v26 + 24 * v20;
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v29 = *(void *)(v27 + 8);
      uint64_t v30 = qword_1C377FEB8[*(char *)(v26 + 24 * v20)];
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      swift_bridgeObjectRetain();
      id v31 = TUHandle.__allocating_init(type:value:)(v30, v29, v28);
      if (v31)
      {
        specialized Set._Variant.insert(_:)(v33, v31);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  int64_t v21 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v21 >= v18) {
    goto LABEL_24;
  }
  ++v12;
  if (*(void *)(v13 + 8 * v21)) {
    goto LABEL_19;
  }
  int64_t v12 = v21 + 1;
  if (v21 + 1 >= v18) {
    goto LABEL_24;
  }
  if (*(void *)(v13 + 8 * v12)) {
    goto LABEL_19;
  }
  int64_t v12 = v21 + 2;
  if (v21 + 2 >= v18) {
    goto LABEL_24;
  }
  if (*(void *)(v13 + 8 * v12))
  {
LABEL_19:
    OUTLINED_FUNCTION_25_12();
    unint64_t v16 = v24 & v23;
    unint64_t v20 = v25 + (v12 << 6);
    goto LABEL_20;
  }
  int64_t v22 = v21 + 3;
  if (v22 < v18)
  {
    if (!*(void *)(v13 + 8 * v22))
    {
      while (1)
      {
        int64_t v12 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          break;
        }
        if (v12 >= v18) {
          goto LABEL_24;
        }
        ++v22;
        if (*(void *)(v13 + 8 * v12)) {
          goto LABEL_19;
        }
      }
LABEL_30:
      __break(1u);
      JUMPOUT(0x1C33F6510);
    }
    int64_t v12 = v22;
    goto LABEL_19;
  }
LABEL_24:
  swift_release();
LABEL_28:
  OUTLINED_FUNCTION_28();
}

uint64_t RecentsCallItem.contact.getter()
{
  unint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RecentsCallItem(0) + 48));
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_6;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    id v3 = (id)MEMORY[0x1C87744F0](0, v1);
  }
  else {
    id v3 = *(id *)(v1 + 32);
  }
  uint64_t v2 = (uint64_t)v3;
LABEL_6:
  swift_bridgeObjectRelease();
  return v2;
}

BOOL RecentsCallItem.wantsStagingArea.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  RecentsCallItem.conversationLink.getter();
  outlined consume of ConversationLink?(v5);
  if (v5)
  {
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_110_4();
    int v3 = OUTLINED_FUNCTION_161_2();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
    return v3 == 1 && RecentsCallItem.shouldDisplayStagingAreaForOngoingCall()();
  }
}

void RecentsCallItem.saveVideoMessage(_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = OUTLINED_FUNCTION_21_1();
  uint64_t v13 = type metadata accessor for RecentCallRecentItemMetadata(v12);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_62();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v2);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItemType);
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v66 = v6;
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v2, v1);
  uint64_t v15 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  uint64_t v62 = v16;
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_134_1();
  uint64_t v64 = v20 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v23 = OUTLINED_FUNCTION_8(v22);
  uint64_t v25 = *(void *)(v24 + 64);
  MEMORY[0x1F4188790](v23);
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = *(void **)(v1 + *(int *)(v13 + 52));
  uint64_t v65 = v28;
  if (!v27)
  {
    OUTLINED_FUNCTION_218();
    __swift_storeEnumTagSinglePayload(v31, v32, v33, v15);
    goto LABEL_11;
  }
  uint64_t v63 = v60;
  uint64_t v61 = v4;
  id v29 = objc_msgSend(v27, sel_messageUUID);
  if (MEMORY[0x1F4188790](v29))
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v60 - v26, v30, 1, v15);
  outlined init with take of RecentsCollectionViewSectionable?((uint64_t)v60 - v26, (uint64_t)v60 - v26, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v34 = OUTLINED_FUNCTION_287();
  OUTLINED_FUNCTION_33_0(v34, v35, v15);
  uint64_t v36 = v61;
  if (v37)
  {
LABEL_11:
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    outlined destroy of SystemUpdateNotice?((uint64_t)v60 - v26, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v6 = v66;
    if (!v66) {
      goto LABEL_13;
    }
LABEL_12:
    lazy protocol witness table accessor for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError();
    uint64_t v38 = (void *)swift_allocError();
    v6(v38, 1);

    goto LABEL_13;
  }
  uint64_t v39 = v62;
  uint64_t v40 = *(void *)(v62 + 32);
  v60[0] = v62 + 32;
  v60[1] = v40;
  OUTLINED_FUNCTION_46();
  v41();
  OUTLINED_FUNCTION_30_9();
  type metadata accessor for MessageStoreController();
  uint64_t v42 = static MessageStoreController.shared.getter();
  static TaskPriority.userInitiated.getter();
  uint64_t v43 = type metadata accessor for TaskPriority();
  uint64_t v44 = __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v43);
  OUTLINED_FUNCTION_137(v44, v45, v46, v47, v48, v49, v50, v51, v60[0]);
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_144_3();
  OUTLINED_FUNCTION_2_1();
  v53();
  unint64_t v54 = (v18 + ((*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v55 = (void *)swift_allocObject();
  id v55[2] = 0;
  v55[3] = 0;
  v55[4] = v42;
  OUTLINED_FUNCTION_46();
  v56();
  uint64_t v57 = (void *)((char *)v55 + v54);
  uint64_t v58 = (uint64_t)v66;
  *uint64_t v57 = v66;
  v57[1] = v36;
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v58);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_10_6();
  v59();
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  OUTLINED_FUNCTION_31_10();
LABEL_13:
  OUTLINED_FUNCTION_28();
}

uint64_t RecentOngoingConversationMetadata.isRestricted.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RecentOngoingConversationMetadata(0) + 24));
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)static RestrictedConversationChecker.shared)
                                            + 0x80))(v1) & 1;
}

id RecentOngoingConversationMetadata.isEligibleForHandoff.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for RecentOngoingConversationMetadata(0) + 24)), sel_handoffEligibility);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_isEligible);

  return v3;
}

void RecentsCallItem.init(link:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v94 = v3;
  uint64_t v4 = (int *)type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_63();
  uint64_t v7 = *(void **)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v10 = *(int *)(v9 + 56);
  *(void *)((char *)v0 + v10) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v16 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  id v17 = objc_msgSend(v16, sel_URL);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_135_1();
  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = v14;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = v14;
    uint64_t v21 = 1;
  }
  __swift_storeEnumTagSinglePayload(v20, v21, 1, v19);
  outlined init with take of RecentsCollectionViewSectionable?(v14, (uint64_t)v92 - v15, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_bridgeObjectRelease();

  type metadata accessor for URL();
  uint64_t v22 = OUTLINED_FUNCTION_70_3();
  OUTLINED_FUNCTION_33_0(v22, v23, v19);
  if (v24)
  {
    swift_release();
    swift_bridgeObjectRelease();

    outlined destroy of SystemUpdateNotice?((uint64_t)v92 - v15, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_91_2(v94, 1);
    goto LABEL_42;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v92 - v15, &demangling cache variable for type metadata for URL?);
  *uint64_t v0 = v16;
  v0[1] = v6;
  v0[2] = v8;
  type metadata accessor for RecentsCallItemType(0);
  swift_storeEnumTagMultiPayload();
  id v25 = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v26 = outlined bridged method (pb) of @objc TUConversationLink.invitedMemberHandles.getter(v25);
  unint64_t v27 = MEMORY[0x1E4FBC860];
  if (v26)
  {
    uint64_t v28 = v26;
    swift_retain();
    uint64_t v29 = 0;
    specialized Sequence.compactMap<A>(_:)(v28, v8);
    OUTLINED_FUNCTION_23_32();
  }
  else
  {
    uint64_t v29 = MEMORY[0x1E4FBC860];
  }
  unint64_t v96 = v27;
  unint64_t v30 = v27;
  uint64_t v31 = *(void *)(v29 + 16);
  id v93 = v25;
  if (v31)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = 32;
    do
    {
      uint64_t v33 = *(void **)(v29 + v32);
      if (v33)
      {
        id v34 = v33;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v32 += 56;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    unint64_t v35 = v96;
    id v25 = v93;
    unint64_t v36 = MEMORY[0x1E4FBC860];
  }
  else
  {
    unint64_t v35 = v30;
    unint64_t v36 = v30;
  }
  swift_bridgeObjectRelease();
  *(void *)((char *)v0 + v4[12]) = v35;
  unint64_t v96 = (unint64_t)v25;
  uint64_t v97 = v6;
  uint64_t v98 = v8;
  uint64_t v37 = ConversationLink.displayName.getter();
  uint64_t v39 = v38;
  uint64_t v40 = outlined bridged method (pb) of @objc TUConversationLink.invitedMemberHandles.getter(v25);
  if (v40) {
    goto LABEL_20;
  }
  if ((v36 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
LABEL_20:
    uint64_t v41 = v40;
    goto LABEL_23;
  }
  uint64_t v41 = MEMORY[0x1E4FBC870];
LABEL_23:
  unint64_t v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
  swift_bridgeObjectRelease();
  uint64_t v43 = static RecentsCallItem.genericStringForFaceTimeLink(_:)(v42);
  uint64_t v45 = v44;
  swift_release();
  unint64_t v96 = (unint64_t)v25;
  uint64_t v97 = v6;
  uint64_t v98 = v8;
  static RecentsCallItem.formattedOriginatorTitleFromLink(_:in:)((uint64_t)&v96, 0);
  if (v47)
  {
    uint64_t v48 = (void *)((char *)v0 + v4[5]);
    *uint64_t v48 = v46;
    v48[1] = v47;
    if (v39)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = v37;
      uint64_t v45 = v39;
    }
  }
  else if (v39)
  {
    uint64_t v49 = (void *)((char *)v0 + v4[5]);
    *uint64_t v49 = v37;
    v49[1] = (uint64_t)v39;
  }
  else
  {
    uint64_t v50 = self;
    uint64_t v51 = (objc_class *)objc_msgSend(v50, sel_conversationKit);
    OUTLINED_FUNCTION_130_3();
    OUTLINED_FUNCTION_4_6();
    v52.super.Class isa = v51;
    uint64_t v57 = OUTLINED_FUNCTION_2_29(v53, v54, v55, v56, v52);
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();

    uint64_t v60 = (void *)((char *)v0 + v4[5]);
    *uint64_t v60 = v57;
    v60[1] = v59;
    uint64_t v39 = (objc_class *)objc_msgSend(v50, sel_conversationKit);
    OUTLINED_FUNCTION_130_3();
    OUTLINED_FUNCTION_4_6();
    v61.super.Class isa = v39;
    uint64_t v43 = OUTLINED_FUNCTION_2_29(v62, v63, v64, v65, v61);
    uint64_t v45 = v66;
  }
  id v67 = (void *)((char *)v0 + v4[6]);
  *id v67 = v43;
  v67[1] = (uint64_t)v45;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v92[1] = &v95;
  uint64_t v69 = OUTLINED_FUNCTION_8(v68);
  uint64_t v71 = *(void *)(v70 + 64);
  MEMORY[0x1F4188790](v69);
  unint64_t v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  OUTLINED_FUNCTION_219_0();
  v92[0] = &v95;
  MEMORY[0x1F4188790](v73);
  uint64_t v74 = v93;
  unint64_t v96 = (unint64_t)v93;
  uint64_t v97 = v6;
  uint64_t v98 = v8;
  ConversationLink.prevailingSuggestion.getter();
  if (v75)
  {
    uint64_t v76 = v75;
    SGURL.recentsDate.getter();

    uint64_t v77 = type metadata accessor for Date();
    OUTLINED_FUNCTION_192_1((uint64_t)&v95 - v72, 0);
    OUTLINED_FUNCTION_69((uint64_t)&v95 - v72);
    if (!v24)
    {
LABEL_37:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_48();
      (*(void (**)(objc_class *, char *, uint64_t))(v81 + 32))(v39, (char *)&v95 - v72, v77);
      goto LABEL_38;
    }
  }
  else
  {
    id v78 = objc_msgSend(v74, sel_creationDate);
    if (MEMORY[0x1F4188790](v78))
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v77 = type metadata accessor for Date();
      uint64_t v79 = (char *)&v95 - v72;
      uint64_t v80 = 0;
    }
    else
    {
      uint64_t v77 = type metadata accessor for Date();
      uint64_t v79 = (char *)&v95 - v72;
      uint64_t v80 = 1;
    }
    OUTLINED_FUNCTION_192_1((uint64_t)v79, v80);
    outlined init with take of RecentsCollectionViewSectionable?((uint64_t)&v95 - v72, (uint64_t)&v95 - v72, (uint64_t *)&demangling cache variable for type metadata for Date?);
    type metadata accessor for Date();
    OUTLINED_FUNCTION_69((uint64_t)&v95 - v72);
    uint64_t v74 = v93;
    if (!v24) {
      goto LABEL_37;
    }
  }
  Date.init()();
  outlined destroy of SystemUpdateNotice?((uint64_t)&v95 - v72, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_38:
  OUTLINED_FUNCTION_30_9();
  uint64_t v82 = type metadata accessor for Date();
  __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v82);
  outlined init with take of RecentsCollectionViewSectionable?((uint64_t)v39, (uint64_t)v0 + v4[9], (uint64_t *)&demangling cache variable for type metadata for Date?);
  *(void *)((char *)v0 + v4[10]) = objc_msgSend(self, sel_whiteColor);
  unint64_t v96 = (unint64_t)v74;
  uint64_t v97 = v6;
  uint64_t v98 = v8;
  ConversationLink.uniqueId.getter();
  uint64_t v83 = (void *)((char *)v0 + v4[13]);
  void *v83 = v84;
  v83[1] = v85;
  uint64_t v86 = (void *)((char *)v0 + v4[7]);
  *uint64_t v86 = 0;
  v86[1] = 0;
  uint64_t v87 = (void *)((char *)v0 + v4[8]);
  *uint64_t v87 = 0;
  v87[1] = 0;
  unint64_t v96 = (unint64_t)v74;
  uint64_t v97 = v6;
  uint64_t v98 = v8;
  ConversationLink.prevailingSuggestion.getter();
  uint64_t v89 = v88;
  swift_release();
  swift_bridgeObjectRelease();

  if (v89)
  {
    id v90 = SGURL.applicationIcon.getter();
  }
  else
  {
    id v90 = 0;
  }
  *(void *)((char *)v0 + v4[11]) = v90;
  uint64_t v91 = v94;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0((uint64_t)v0, v94);
  OUTLINED_FUNCTION_91_2(v91, 0);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v0, (void (*)(void))type metadata accessor for RecentsCallItem);
LABEL_42:
  OUTLINED_FUNCTION_28();
}

id RecentsCallItem.shouldConfirmDelete.getter()
{
  RecentsCallItem.conversationLink.getter();
  id v0 = v3;
  if (v3)
  {
    id v1 = v3;
    outlined consume of ConversationLink?(v3);
    id v0 = objc_msgSend(v1, sel_isLocallyCreated);
  }
  return v0;
}

void static RecentsCallItem.contactDetails(from:cache:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_retain();
    specialized Sequence.compactMap<A>(_:)(a1, a2);
  }
}

void RecentsCallItem.allowsFaceTimeSpamReporting.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v6 = v0;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentsCallItemType?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = OUTLINED_FUNCTION_21_1();
  uint64_t v10 = type metadata accessor for RecentsCallItem(v9);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_58();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_36_7();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_54_2();
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)v51 - v15;
  uint64_t v17 = type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v51 - v20;
  if (RecentsCallItem.isTelephony.getter())
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_98_0(v22, (uint64_t)static ReportSpamManager.logger);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v5);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)OUTLINED_FUNCTION_127_4();
      *(_DWORD *)id v25 = 67109120;
      RecentsCallItem.isTelephony.getter();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v5, (void (*)(void))type metadata accessor for RecentsCallItem);
      OUTLINED_FUNCTION_97_5();
      uint64_t v26 = "allowsFaceTimeSpamReporting is false, because isTelephony: %{BOOL}d";
LABEL_17:
      _os_log_impl(&dword_1C2F90000, v23, v24, v26, v25, 8u);
LABEL_18:
      OUTLINED_FUNCTION_3();
LABEL_25:

      goto LABEL_26;
    }
    uint64_t v32 = v5;
    goto LABEL_24;
  }
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, (uint64_t)v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v21, (void (*)(void))type metadata accessor for RecentsCallItemType);
  if (EnumCaseMultiPayload == 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static ReportSpamManager.logger);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (!OUTLINED_FUNCTION_12(v29)) {
      goto LABEL_25;
    }
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v30, v31, "allowsFaceTimeSpamReporting is false because its ongoing call");
    goto LABEL_18;
  }
  RecentsCallItem.isInContacts.getter();
  if (v33)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_98_0(v34, (uint64_t)static ReportSpamManager.logger);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v6, v4);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)OUTLINED_FUNCTION_127_4();
      *(_DWORD *)id v25 = 67109120;
      RecentsCallItem.isInContacts.getter();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v4, (void (*)(void))type metadata accessor for RecentsCallItem);
      OUTLINED_FUNCTION_97_5();
      uint64_t v26 = "allowsFaceTimeSpamReporting is false, isInContacts: %{BOOL}d";
      goto LABEL_17;
    }
    uint64_t v32 = v4;
LABEL_24:
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v32, (void (*)(void))type metadata accessor for RecentsCallItem);
    goto LABEL_25;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_98_0(v35, (uint64_t)static ReportSpamManager.logger);
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v6, (uint64_t)v16);
  unint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  int v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v39 = OUTLINED_FUNCTION_37();
    int v54 = v38;
    uint64_t v40 = (uint8_t *)v39;
    uint64_t v53 = OUTLINED_FUNCTION_9_0();
    uint64_t v56 = v53;
    uint64_t v55 = v6;
    NSBundle v52 = v40;
    *(_DWORD *)uint64_t v40 = 136315138;
    v51[1] = v40 + 4;
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0((uint64_t)v16, v3);
    __swift_storeEnumTagSinglePayload(v3, 0, 1, v17);
    uint64_t v41 = specialized >> prefix<A>(_:)();
    unint64_t v43 = v42;
    outlined destroy of SystemUpdateNotice?(v3, &demangling cache variable for type metadata for RecentsCallItemType?);
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v56);
    OUTLINED_FUNCTION_32_4(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v16, (void (*)(void))type metadata accessor for RecentsCallItem);
    _os_log_impl(&dword_1C2F90000, v36, (os_log_type_t)v54, "RecentsCallItem type: %s", v52, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v16, (void (*)(void))type metadata accessor for RecentsCallItem);
  }

  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v6, (uint64_t)v1);
  switch(OUTLINED_FUNCTION_59_1())
  {
    case 1u:
    case 3u:
    case 4u:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
      break;
    case 2u:
      uint64_t v50 = *v1;
      swift_release();
      swift_bridgeObjectRelease();

      break;
    default:
      _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v6, v2);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_127_4();
        *(_DWORD *)uint64_t v47 = 67109120;
        RecentsCallItem.isIncomingCall.getter();
        int v49 = v48 & 1;
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
        LODWORD(v56) = v49;
        OUTLINED_FUNCTION_181_1();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2F90000, v45, v46, "isIncomingCall: %{BOOL}d", v47, 8u);
        OUTLINED_FUNCTION_3();
      }
      else
      {
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
      }

      RecentsCallItem.isIncomingCall.getter();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
      break;
  }
LABEL_26:
  OUTLINED_FUNCTION_28();
}

id RecentsCallItem.isRead.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_164_2();
  if (OUTLINED_FUNCTION_155_1() - 3 > 1)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v3, (void (*)(void))type metadata accessor for RecentsCallItemType);
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_114_0();
    id v6 = *(id *)(v0 + *(int *)(v4 + 52));
    id v7 = v6;
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    if (v6)
    {
      id v6 = objc_msgSend(v7, sel_isRead);
    }
  }
  return v6;
}

ConversationKit::RecentsCallHandleType_optional __swiftcall RecentsCallHandleType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (ConversationKit::RecentsCallHandleType_optional)rawValue;
}

uint64_t RecentsCallHandleType.rawValue.getter()
{
  return *v0;
}

ConversationKit::RecentsCallHandleType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RecentsCallHandleType(Swift::Int *a1)
{
  return RecentsCallHandleType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RecentsCallHandleType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RecentsCallHandleType.rawValue.getter();
  *a1 = result;
  return result;
}

void RecentsCallHandle.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t RecentsCallHandle.value.getter()
{
  return OUTLINED_FUNCTION_35();
}

id RecentsCallHandle.tuHandle()()
{
  uint64_t v1 = *((void *)v0 + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = qword_1C377FEB8[*v0];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  swift_bridgeObjectRetain();
  return TUHandle.__allocating_init(type:value:)(v3, v2, v1);
}

ConversationKit::RecentsCallHandle __swiftcall RecentsCallHandle.init(value:)(Swift::String_optional value)
{
  OUTLINED_FUNCTION_13_26();
  uint64_t v19 = v1;
  uint64_t v20 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  if (v3
    && (uint64_t v9 = self,
        swift_bridgeObjectRetain(),
        uint64_t v10 = (void *)MEMORY[0x1C87730B0](v6, v4),
        swift_bridgeObjectRelease(),
        id v11 = objc_msgSend(v9, sel_normalizedHandleWithDestinationID_, v10),
        v10,
        v11))
  {
    swift_bridgeObjectRelease();
    TUHandle.recentsCallHandleType.getter(v18);
    char v12 = v18[0];
    id v13 = objc_msgSend(v11, sel_value);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v14;
  }
  else
  {
    char v12 = 1;
  }
  *(unsigned char *)uint64_t v8 = v12;
  *(void *)(v8 + 8) = v6;
  *(void *)(v8 + 16) = v4;
  OUTLINED_FUNCTION_12_2();
  result.value.value._object = v17;
  result.value.value._uint64_t countAndFlagsBits = v16;
  result.os_log_type_t type = v15;
  return result;
}

unint64_t TUHandle.recentsCallHandleType.getter@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (unint64_t)objc_msgSend(v1, sel_type);
  unsigned int v4 = 0x3020101u >> (8 * result);
  if (result >= 4) {
    LOBYTE(v4) = 1;
  }
  *a1 = v4;
  return result;
}

void RecentsCallHandle.hash(into:)()
{
  uint64_t v1 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static RecentsCallHandle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v3 = *((void *)a1 + 2);
    uint64_t v4 = *((void *)a2 + 2);
    if (v3)
    {
      if (v4)
      {
        BOOL v5 = *((void *)a1 + 1) == *((void *)a2 + 1) && v3 == v4;
        if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v4)
    {
      return 1;
    }
  }
  return 0;
}

Swift::Int RecentsCallHandle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  OUTLINED_FUNCTION_7_1();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t RecentCallRecentItemMetadata.uniqueId.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t RecentCallRecentItemMetadata.date.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_198_1();
  return _s15ConversationKit11ParticipantVSgWOcTm_0(v1 + *(int *)(v2 + 20), v0, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

void *RecentCallRecentItemMetadata.recentCall.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for RecentCallRecentItemMetadata(0) + 24));
  id v2 = v1;
  return v1;
}

void RecentCallRecentItemMetadata.recentCall.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_160_2() + 24);

  *(void *)(v1 + v2) = v0;
}

uint64_t (*RecentCallRecentItemMetadata.recentCall.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RecentCallRecentItemMetadata.mediaType.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for RecentCallRecentItemMetadata(0) + 28));
}

uint64_t RecentCallRecentItemMetadata.remoteParticipantHandles.getter()
{
  type metadata accessor for RecentCallRecentItemMetadata(0);
  return swift_bridgeObjectRetain();
}

uint64_t RecentCallRecentItemMetadata.countOfExcludedHandles.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for RecentCallRecentItemMetadata(0) + 36));
}

uint64_t RecentCallRecentItemMetadata.groupUUID.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_198_1();
  return _s15ConversationKit11ParticipantVSgWOcTm_0(v1 + *(int *)(v2 + 40), v0, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

void *RecentCallRecentItemMetadata.conversationLink.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_198_1();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_151_3(*(int *)(v0 + 44));
  return outlined copy of ConversationLink?(v1);
}

__n128 RecentCallRecentItemMetadata.conversationLink.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RecentCallRecentItemMetadata(0) + 44);
  outlined consume of ConversationLink?(*(void **)v3);
  __n128 result = v5;
  *(__n128 *)uint64_t v3 = v5;
  *(void *)(v3 + 16) = v2;
  return result;
}

uint64_t (*RecentCallRecentItemMetadata.conversationLink.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RecentCallRecentItemMetadata.conversationID.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_198_1();
  return _s15ConversationKit11ParticipantVSgWOcTm_0(v1 + *(int *)(v2 + 48), v0, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

void *RecentCallRecentItemMetadata.messageIndicatorViewModel.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for RecentCallRecentItemMetadata(0) + 52));
  id v2 = v1;
  return v1;
}

void RecentCallRecentItemMetadata.messageIndicatorViewModel.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_160_2() + 52);

  *(void *)(v1 + v2) = v0;
}

uint64_t (*RecentCallRecentItemMetadata.messageIndicatorViewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RecentCallRecentItemMetadata.init(metadata:conversationLink:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v10 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
  *(void *)(a3 + v6[6]) = 0;
  uint64_t v7 = (void *)(a3 + v6[11]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(void *)(a3 + v6[13]) = 0;
  uint64_t v8 = a1 + v6[11];
  outlined consume of ConversationLink?(*(void **)v8);
  *(_OWORD *)uint64_t v8 = v10;
  *(void *)(v8 + 16) = v5;
  return _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(a1, a3);
}

void RecentCallRecentItemMetadata.init(updateCallMetadata:from:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v7 = *(void **)(v0 + OUTLINED_FUNCTION_42_18(v6)[13]);
  id v8 = v7;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v9 = *(int *)(v3 + 52);

  *(void *)(v1 + v9) = v7;
  outlined consume of ConversationLink?(*v5);
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v1, v2);
  OUTLINED_FUNCTION_15_0();
}

void RecentCallRecentItemMetadata.init(updateMessageMetadata:from:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v7 = *(void **)(v0 + OUTLINED_FUNCTION_42_18(v6)[6]);
  id v8 = v7;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v9 = *(int *)(v3 + 24);

  *(void *)(v1 + v9) = v7;
  outlined consume of ConversationLink?(*v5);
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v1, v2);
  OUTLINED_FUNCTION_15_0();
}

uint64_t RecentCallRecentItemMetadata.init(metadata:messageIndicatorViewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
  *(void *)(a3 + v6[6]) = 0;
  uint64_t v7 = (void *)(a3 + v6[11]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(void *)(a3 + v6[13]) = 0;
  uint64_t v8 = v6[13];

  *(void *)(a1 + v8) = a2;
  return _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(a1, a3);
}

void RecentCallRecentItemMetadata.hash(into:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_35();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_60();
  uint64_t v8 = OUTLINED_FUNCTION_45_9();
  _s15ConversationKit11ParticipantVSgWOcTm_0(v8, v9, (uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v10 = type metadata accessor for Date();
  OUTLINED_FUNCTION_33_0((uint64_t)v4, 1, v10);
  if (v11)
  {
    OUTLINED_FUNCTION_53_10();
  }
  else
  {
    OUTLINED_FUNCTION_5_3();
    MEMORY[0x1F4188790](v12);
    OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_63_0();
    v13();
    OUTLINED_FUNCTION_52_12();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418BA20]);
    OUTLINED_FUNCTION_210_1();
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_12_1();
    v14();
  }
  ConversationKit::RecentsCallHandleType v15 = *(void **)((char *)v1 + v5[6]);
  if (v15)
  {
    OUTLINED_FUNCTION_52_12();
    id v16 = v15;
    OUTLINED_FUNCTION_75_5();
  }
  else
  {
    OUTLINED_FUNCTION_53_10();
  }
  uint64_t v17 = (char *)v1 + v5[7];
  if (v17[8] == 1)
  {
    OUTLINED_FUNCTION_53_10();
  }
  else
  {
    Swift::UInt v18 = *(void *)v17;
    OUTLINED_FUNCTION_52_12();
    Hasher._combine(_:)(v18);
  }
  uint64_t v19 = *(uint64_t *)((char *)v1 + v5[8]);
  if (v19)
  {
    OUTLINED_FUNCTION_52_12();
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v3, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_53_10();
  }
  uint64_t v20 = (void *)v3;
  Hasher._combine(_:)(*(Swift::UInt *)((char *)v1 + v5[9]));
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v22 = OUTLINED_FUNCTION_8(v21);
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_138_2();
  uint64_t v23 = OUTLINED_FUNCTION_45_9();
  _s15ConversationKit11ParticipantVSgWOcTm_0(v23, v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v25 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_33_0(v3, 1, v25);
  if (v11)
  {
    OUTLINED_FUNCTION_53_10();
  }
  else
  {
    OUTLINED_FUNCTION_5_3();
    uint64_t v27 = v26;
    MEMORY[0x1F4188790](v28);
    OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_205_0();
    OUTLINED_FUNCTION_63_0();
    v29();
    OUTLINED_FUNCTION_52_12();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
    OUTLINED_FUNCTION_157();
    uint64_t v20 = &demangling cache variable for type metadata for UUID?;
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(void *, uint64_t))(v27 + 8))(&demangling cache variable for type metadata for UUID?, v25);
  }
  uint64_t v30 = *(void **)((char *)v1 + v5[11]);
  if (v30)
  {
    OUTLINED_FUNCTION_52_12();
    outlined copy of ConversationLink?(v30);
    id v31 = v30;
    OUTLINED_FUNCTION_75_5();

    outlined consume of ConversationLink?(v30);
  }
  else
  {
    OUTLINED_FUNCTION_53_10();
  }
  MEMORY[0x1F4188790]((char *)v1 + v5[12]);
  OUTLINED_FUNCTION_138_2();
  _s15ConversationKit11ParticipantVSgWOcTm_0(v32, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_33_0((uint64_t)v20, 1, v25);
  if (v11)
  {
    OUTLINED_FUNCTION_53_10();
  }
  else
  {
    OUTLINED_FUNCTION_5_3();
    MEMORY[0x1F4188790](v33);
    OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_63_0();
    v34();
    OUTLINED_FUNCTION_52_12();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
    OUTLINED_FUNCTION_210_1();
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_10_6();
    v35();
  }
  unint64_t v36 = *(void **)((char *)v1 + v5[13]);
  if (v36)
  {
    OUTLINED_FUNCTION_52_12();
    id v37 = v36;
    OUTLINED_FUNCTION_75_5();
  }
  else
  {
    OUTLINED_FUNCTION_53_10();
  }
  OUTLINED_FUNCTION_28();
}

Swift::Int RecentCallRecentItemMetadata.hashValue.getter()
{
  return RecentCallRecentItemMetadata.hashValue.getter((void (*)(unsigned char *))RecentCallRecentItemMetadata.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RecentCallRecentItemMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RecentCallRecentItemMetadata(a1, a2, a3, (void (*)(unsigned char *))RecentCallRecentItemMetadata.hash(into:));
}

uint64_t RecentOngoingConversationMetadata.uuid.getter()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t RecentOngoingConversationMetadata.remoteParticipantHandles.getter()
{
  type metadata accessor for RecentOngoingConversationMetadata(0);
  return swift_bridgeObjectRetain();
}

id RecentOngoingConversationMetadata.conversation.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for RecentOngoingConversationMetadata(0) + 24));
  return v1;
}

void *RecentOngoingConversationMetadata.conversationLink.getter()
{
  uint64_t v0 = type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_151_3(*(int *)(v0 + 28));
  return outlined copy of ConversationLink?(v1);
}

void RecentOngoingConversationMetadata.hash(into:)()
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_212_1();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
  OUTLINED_FUNCTION_157();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v4 = *(void **)(v1 + v3[5]);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v0, (uint64_t)v4);
  swift_bridgeObjectRelease();
  id v5 = *(id *)(v2 + v3[6]);
  OUTLINED_FUNCTION_75_5();

  uint64_t v6 = *(void **)(v2 + v3[7]);
  if (v6)
  {
    OUTLINED_FUNCTION_52_12();
    outlined copy of ConversationLink?(v6);
    id v7 = v6;
    OUTLINED_FUNCTION_75_5();

    outlined consume of ConversationLink?(v6);
  }
  else
  {
    OUTLINED_FUNCTION_53_10();
  }
}

void static RecentOngoingConversationMetadata.== infix(_:_:)()
{
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_186_1();
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v2 = type metadata accessor for RecentOngoingConversationMetadata(0);
    if (specialized static Set.== infix(_:_:)(*(void *)(v0 + *(int *)(v2 + 20)), *(void *)(v1 + *(int *)(v2 + 20))))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      if (static NSObject.== infix(_:_:)())
      {
        uint64_t v3 = *(int *)(v2 + 28);
        uint64_t v4 = *(void **)(v0 + v3);
        id v5 = *(void **)(v1 + v3);
        if (v4)
        {
          if (v5)
          {
            outlined copy of ConversationLink?(v4);
            outlined copy of ConversationLink?(v4);
            outlined copy of ConversationLink?(v5);
            static NSObject.== infix(_:_:)();
            outlined consume of ConversationLink?(v5);

            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of ConversationLink?(v4);
            goto LABEL_11;
          }
          id v6 = v4;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else if (!v5)
        {
          goto LABEL_11;
        }
        outlined copy of ConversationLink?(v5);
        outlined consume of ConversationLink?(v4);
        outlined consume of ConversationLink?(v5);
      }
    }
  }
LABEL_11:
  OUTLINED_FUNCTION_15_0();
}

Swift::Int RecentOngoingConversationMetadata.hashValue.getter()
{
  return RecentCallRecentItemMetadata.hashValue.getter((void (*)(unsigned char *))RecentOngoingConversationMetadata.hash(into:));
}

__n128 RecentOngoingConversationMetadata.init(uuid:remoteParticipantHandles:conversation:conversationLink:)()
{
  OUTLINED_FUNCTION_13_26();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  long long v12 = *v6;
  uint64_t v7 = *((void *)v6 + 2);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_46();
  v8();
  uint64_t v9 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
  *(void *)(v5 + v9[5]) = v3;
  *(void *)(v5 + v9[6]) = v1;
  uint64_t v10 = v5 + v9[7];
  *(_OWORD *)uint64_t v10 = v12;
  *(void *)(v10 + 16) = v7;
  OUTLINED_FUNCTION_12_2();
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RecentCallRecentItemMetadata(a1, a2, a3, (void (*)(unsigned char *))RecentOngoingConversationMetadata.hash(into:));
}

void RecentsCallItemType.recentCallRecentItemMetadata.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  id v6 = (id *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_132_2();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_65_3();
  uint64_t v10 = OUTLINED_FUNCTION_362();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v10, v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v6, (void (*)(void))type metadata accessor for RecentsCallItemType);
      goto LABEL_10;
    case 2u:
      uint64_t v20 = *v6;
      swift_release();
      swift_bridgeObjectRelease();

LABEL_10:
      uint64_t v21 = 1;
      break;
    default:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v6, v0);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_98_0(v12, (uint64_t)static Logger.conversationKit);
      _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v1);
      id v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        ConversationKit::RecentsCallHandleType v15 = (uint8_t *)OUTLINED_FUNCTION_37();
        uint64_t v26 = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)ConversationKit::RecentsCallHandleType v15 = 136315138;
        id v16 = *(void **)(v1 + *(int *)(v7 + 24));
        if (v16)
        {
          id v25 = objc_msgSend(v16, sel_numberOfOccurrences);
          uint64_t v17 = String.init<A>(reflecting:)();
          unint64_t v19 = v18;
        }
        else
        {
          unint64_t v19 = 0xE300000000000000;
          uint64_t v17 = 7104878;
        }
        uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v26);
        OUTLINED_FUNCTION_32_4(v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
        _os_log_impl(&dword_1C2F90000, v13, v14, "[SpamReporting] metadata.recentcall.numberOfOccurrences: %s", v15, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      }

      uint64_t v23 = OUTLINED_FUNCTION_74();
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v23, v24);
      uint64_t v21 = 0;
      break;
  }
  __swift_storeEnumTagSinglePayload(v3, v21, 1, v7);
  OUTLINED_FUNCTION_28();
}

void key path setter for RecentsCallItemType.recentCallRecentItemMetadata : RecentsCallItemType(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  MEMORY[0x1F4188790](v2 - 8);
  _s15ConversationKit11ParticipantVSgWOcTm_0(a1, (uint64_t)&v4 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  RecentsCallItemType.recentCallRecentItemMetadata.setter();
}

void RecentsCallItemType.recentCallRecentItemMetadata.setter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v12);
  os_log_type_t v14 = (char *)&v50 - v13;
  uint64_t v15 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_55_0();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_83_4();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_139_4();
  uint64_t v57 = v7;
  uint64_t v19 = OUTLINED_FUNCTION_45_9();
  _s15ConversationKit11ParticipantVSgWOcTm_0(v19, v20, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  uint64_t v21 = OUTLINED_FUNCTION_287();
  OUTLINED_FUNCTION_33_0(v21, v22, v15);
  if (v23)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationKit);
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1C2F90000, v25, v26, "[SpamReporting] Unable to update recentCallRecentItemMetadata", v27, 2u);
      OUTLINED_FUNCTION_3();
    }

    outlined destroy of SystemUpdateNotice?(v57, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  }
  else
  {
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v14, v3);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v5, (uint64_t)v1);
    int v28 = OUTLINED_FUNCTION_113_2();
    uint64_t v29 = v5;
    switch(v28)
    {
      case 1:
        outlined destroy of SystemUpdateNotice?(v57, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v3, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
        goto LABEL_26;
      case 2:
        outlined destroy of SystemUpdateNotice?(v57, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v3, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
        uint64_t v40 = *v1;
        swift_release();
        swift_bridgeObjectRelease();

        break;
      case 3:
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v5, (void (*)(void))type metadata accessor for RecentsCallItemType);
        outlined destroy of SystemUpdateNotice?(v57, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
        goto LABEL_25;
      case 4:
        int v54 = v28;
        uint64_t v55 = v3;
        uint64_t v53 = v1;
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v5, (void (*)(void))type metadata accessor for RecentsCallItemType);
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_98_0(v41, (uint64_t)static Logger.conversationKit);
        _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v55, v2);
        id v31 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_21_0(v42))
        {
          uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_37();
          uint64_t v58 = OUTLINED_FUNCTION_9_0();
          int v52 = (int)v1;
          *(_DWORD *)uint64_t v33 = 136315138;
          uint64_t v29 = (uint64_t)(v33 + 12);
          uint64_t v51 = v33 + 4;
          uint64_t v43 = v56;
          _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v2, v56);
          uint64_t v44 = OUTLINED_FUNCTION_195_2();
          unint64_t v46 = v45;
          outlined destroy of SystemUpdateNotice?(v43, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
          uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v58);
          OUTLINED_FUNCTION_81_8(v47);
          swift_bridgeObjectRelease();
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
          uint64_t v39 = "[SpamReporting] updated audioMessage metadata: %s";
          goto LABEL_20;
        }

        uint64_t v49 = v2;
        goto LABEL_23;
      default:
        int v54 = v28;
        uint64_t v55 = v3;
        uint64_t v53 = v1;
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v5, (void (*)(void))type metadata accessor for RecentsCallItemType);
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_98_0(v30, (uint64_t)static Logger.conversationKit);
        _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v55, v4);
        id v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_21_0(v32))
        {
          uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_37();
          uint64_t v58 = OUTLINED_FUNCTION_9_0();
          int v52 = (int)v1;
          *(_DWORD *)uint64_t v33 = 136315138;
          uint64_t v29 = (uint64_t)(v33 + 12);
          uint64_t v51 = v33 + 4;
          uint64_t v34 = v56;
          _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v4, v56);
          uint64_t v35 = OUTLINED_FUNCTION_195_2();
          unint64_t v37 = v36;
          outlined destroy of SystemUpdateNotice?(v34, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
          uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v58);
          OUTLINED_FUNCTION_81_8(v38);
          swift_bridgeObjectRelease();
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v4, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
          uint64_t v39 = "[SpamReporting] updated recent metadata: %s";
LABEL_20:
          _os_log_impl(&dword_1C2F90000, v31, (os_log_type_t)v52, v39, v33, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();

          uint64_t v48 = v57;
        }
        else
        {

          uint64_t v49 = v4;
LABEL_23:
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v49, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
          uint64_t v48 = v57;
        }
        outlined destroy of SystemUpdateNotice?(v48, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
        uint64_t v1 = v53;
        uint64_t v3 = v55;
LABEL_25:
        _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v3, v29);
        OUTLINED_FUNCTION_163();
        swift_storeEnumTagMultiPayload();
LABEL_26:
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
        break;
    }
  }
  OUTLINED_FUNCTION_28();
}

void (*RecentsCallItemType.recentCallRecentItemMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  OUTLINED_FUNCTION_8(v3);
  size_t v5 = *(void *)(v4 + 64);
  a1[1] = malloc(v5);
  a1[2] = malloc(v5);
  RecentsCallItemType.recentCallRecentItemMetadata.getter();
  return RecentsCallItemType.recentCallRecentItemMetadata.modify;
}

void RecentsCallItemType.recentCallRecentItemMetadata.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    uint64_t v4 = OUTLINED_FUNCTION_30_15();
    _s15ConversationKit11ParticipantVSgWOcTm_0(v4, v5, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
    RecentsCallItemType.recentCallRecentItemMetadata.setter();
    uint64_t v6 = OUTLINED_FUNCTION_24_2();
    outlined destroy of SystemUpdateNotice?(v6, v7);
  }
  else
  {
    RecentsCallItemType.recentCallRecentItemMetadata.setter();
  }
  free(v3);
  free(v2);
}

void RecentsCallItemType.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_14();
  a17 = v21;
  a18 = v22;
  uint64_t v24 = v23;
  id v25 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v26);
  uint64_t v27 = OUTLINED_FUNCTION_108_1();
  uint64_t v28 = OUTLINED_FUNCTION_8(v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_64();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v18, (uint64_t)v20);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v20, v19);
      Hasher._combine(_:)(1uLL);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
      OUTLINED_FUNCTION_157();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v33 = *(void **)(v19 + v25[5]);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)((uint64_t)v24, (uint64_t)v33);
      swift_bridgeObjectRelease();
      id v34 = *(id *)(v19 + v25[6]);
      OUTLINED_FUNCTION_75_5();

      uint64_t v35 = *(void **)(v19 + v25[7]);
      if (v35)
      {
        OUTLINED_FUNCTION_52_12();
        outlined copy of ConversationLink?(v35);
        id v36 = v35;
        OUTLINED_FUNCTION_75_5();

        outlined consume of ConversationLink?(v35);
      }
      else
      {
        OUTLINED_FUNCTION_53_10();
      }
      uint64_t v39 = type metadata accessor for RecentOngoingConversationMetadata;
      uint64_t v40 = v19;
      goto LABEL_11;
    case 2u:
      unint64_t v37 = *v20;
      Hasher._combine(_:)(2uLL);
      id v38 = v37;
      OUTLINED_FUNCTION_75_5();
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_12;
    case 3u:
      OUTLINED_FUNCTION_203_0();
      Swift::UInt v32 = 3;
      goto LABEL_8;
    case 4u:
      OUTLINED_FUNCTION_203_0();
      Swift::UInt v32 = 4;
      goto LABEL_8;
    default:
      OUTLINED_FUNCTION_203_0();
      Swift::UInt v32 = 0;
LABEL_8:
      Hasher._combine(_:)(v32);
      RecentCallRecentItemMetadata.hash(into:)();
      uint64_t v39 = type metadata accessor for RecentCallRecentItemMetadata;
      uint64_t v40 = (uint64_t)v30;
LABEL_11:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v40, (void (*)(void))v39);
LABEL_12:
      OUTLINED_FUNCTION_15_0();
      return;
  }
}

Swift::Int RecentsCallItemType.hashValue.getter()
{
  return RecentCallRecentItemMetadata.hashValue.getter((void (*)(unsigned char *))RecentsCallItemType.hash(into:));
}

Swift::Int RecentCallRecentItemMetadata.hashValue.getter(void (*a1)(unsigned char *))
{
  OUTLINED_FUNCTION_7_1();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RecentsCallItemType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance RecentCallRecentItemMetadata(a1, a2, a3, (void (*)(unsigned char *))RecentsCallItemType.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RecentCallRecentItemMetadata(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t RecentsCallItem.type.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, a1);
}

uint64_t RecentsCallItem.type.setter(uint64_t a1)
{
  return outlined assign with take of RecentsCallItemType(a1, v1);
}

uint64_t (*RecentsCallItem.type.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RecentsCallItem.contacts.getter()
{
  type metadata accessor for RecentsCallItem(0);
  return swift_bridgeObjectRetain();
}

uint64_t RecentsCallItem.destination.getter()
{
  uint64_t v1 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_218_1();
  if (OUTLINED_FUNCTION_59_1())
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
    return OUTLINED_FUNCTION_41_0();
  }
  OUTLINED_FUNCTION_162_2();
  uint64_t v6 = *(int *)(v1 + 32);
  uint64_t v7 = *(void *)&v4[v6];
  if (!v7)
  {
LABEL_9:
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v4, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    return OUTLINED_FUNCTION_41_0();
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(*(void *)&v4[v6]);
  if ((v10 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 36) == v9)
    {
      if (result != 1 << *(unsigned char *)(v7 + 32)) {
        specialized Set.subscript.getter(result, v9, v7, (uint64_t)v12);
      }
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t RecentsCallItem.formattedTUHandles.getter()
{
  RecentsCallItem.tuHandles.getter();
  specialized Sequence.compactMap<A>(_:)(v1);
  OUTLINED_FUNCTION_11();
  return v0;
}

uint64_t RecentsCallItem.handleForMailCallback.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_164_2();
  unsigned int v6 = OUTLINED_FUNCTION_155_1();
  if (v6 > 4 || ((1 << v6) & 0x19) == 0)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v3, (void (*)(void))type metadata accessor for RecentsCallItemType);
  }
  else
  {
    OUTLINED_FUNCTION_114_0();
    id v8 = *(id *)(v0 + *(int *)(v4 + 52));
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    id v9 = objc_msgSend(v8, sel_fromHandle);
  }
  return OUTLINED_FUNCTION_209_1();
}

uint64_t RecentsCallItem.idsCanonicalDestinations.getter()
{
  uint64_t v1 = (void *)RecentsCallItem.contact.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_allIDSDestinations);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = specialized Set.init<A>(_:)(v4);
  }
  else
  {
    RecentsCallItem.tuHandles.getter();
    specialized Sequence.compactMap<A>(_:)(v6);
    OUTLINED_FUNCTION_11();
    return specialized Set.init<A>(_:)(v0);
  }
  return v5;
}

void RecentsCallItem.groupUUID.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_14();
  a17 = v20;
  a18 = v21;
  uint64_t v23 = v22;
  uint64_t v24 = type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v25 = OUTLINED_FUNCTION_8(v24);
  MEMORY[0x1F4188790](v25);
  uint64_t v26 = OUTLINED_FUNCTION_104_5();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_64();
  uint64_t v31 = OUTLINED_FUNCTION_351();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v31, v32);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v19, v18);
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_124();
      v37();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v18, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      OUTLINED_FUNCTION_124_2();
      goto LABEL_5;
    case 2u:
      id v38 = *v19;
      swift_bridgeObjectRetain();
      swift_retain();
      id v39 = objc_msgSend(v38, sel_groupUUID);
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v41 = OUTLINED_FUNCTION_8(v40);
      MEMORY[0x1F4188790](v41);
      OUTLINED_FUNCTION_63();
      if (v39)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v42 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_207_1(v42);
      outlined init with take of RecentsCollectionViewSectionable?((uint64_t)v29, v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_120_3();
      OUTLINED_FUNCTION_32_1();

      break;
    case 3u:
    case 4u:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v19, (void (*)(void))type metadata accessor for RecentsCallItemType);
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_218();
LABEL_5:
      __swift_storeEnumTagSinglePayload(v33, v34, v35, v36);
      break;
    default:
      OUTLINED_FUNCTION_203_0();
      _s15ConversationKit11ParticipantVSgWOcTm_0((uint64_t)&v29[*(int *)(v26 + 40)], v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v29, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      break;
  }
  OUTLINED_FUNCTION_15_0();
}

uint64_t RecentsCallItem.callUniqueId.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = OUTLINED_FUNCTION_103_5();
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_101_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_141_2();
  OUTLINED_FUNCTION_164_2();
  int v7 = OUTLINED_FUNCTION_155_1();
  if ((v7 - 3) >= 2)
  {
    if (v7)
    {
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
      return 0;
    }
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v0, (uint64_t)v1);
    uint64_t v8 = *v1;
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)v1;
  }
  else
  {
    OUTLINED_FUNCTION_114_0();
    uint64_t v8 = *v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)v2;
  }
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v9, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  return v8;
}

void static RecentsCallItem.shouldTargetUpcoming(for:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Date();
  OUTLINED_FUNCTION_5_3();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_219_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_62();
  _s15ConversationKit11ParticipantVSgWOcTm_0(v2, v0, (uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_33_0(v0, 1, v3);
  if (v9)
  {
    outlined destroy of SystemUpdateNotice?(v0, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
  else
  {
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_63_0();
    v10();
    uint64_t v11 = type metadata accessor for RecentsLinkController();
    MEMORY[0x1F4188790](v11);
    static RecentsLinkController.shouldTargetUpcomingSectionDate.getter();
    OUTLINED_FUNCTION_24_2();
    static Date.> infix(_:_:)();
    uint64_t v12 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_74();
    OUTLINED_FUNCTION_336();
    v12();
    OUTLINED_FUNCTION_30_15();
    OUTLINED_FUNCTION_336();
    v12();
  }
  OUTLINED_FUNCTION_15_0();
}

uint64_t RecentsCallItem.isTelephony.getter()
{
  uint64_t v1 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_218_1();
  if (OUTLINED_FUNCTION_59_1())
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
    char v6 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_162_2();
    uint64_t v7 = *(void **)&v4[*(int *)(v1 + 24)];
    if (v7 && (id v8 = objc_msgSend(v7, sel_serviceProvider)) != 0)
    {
      char v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v12)
    {
      if (v10 == v13 && v12 == v14) {
        char v6 = 1;
      }
      else {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = 0;
    }
    swift_bridgeObjectRelease();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v4, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  }
  return v6 & 1;
}

BOOL RecentsCallItem.atLeastOneUnknownCaller.getter()
{
  uint64_t v1 = v0;
  RecentsCallItem.tuHandles.getter();
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v2 = OUTLINED_FUNCTION_41_0();
  specialized Sequence.compactMap<A>(_:)(v2, v3);
  OUTLINED_FUNCTION_23_32();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v5 = MEMORY[0x10];
  if (MEMORY[0x10])
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 32;
    do
    {
      if (*(void *)v6)
      {
        id v7 = *(id *)v6;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_174_2();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v6 += 56;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = v11;
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_23_32();
  }
  else
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  RecentsCallItem.tuHandles.getter();
  specialized Set.count.getter(v9);
  OUTLINED_FUNCTION_11();
  return v8 < v1;
}

void RecentsCallItem.isOneToOne.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v37 = v1;
  uint64_t v35 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_83_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_42();
  uint64_t v36 = v8;
  uint64_t v9 = OUTLINED_FUNCTION_30_9();
  uint64_t v10 = type metadata accessor for RecentsCallItemType(v9);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_17_0();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentsCallItemType?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_36_4();
  uint64_t v14 = type metadata accessor for RecentsCallItem(0);
  uint64_t v15 = OUTLINED_FUNCTION_8(v14);
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_61();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_98_0(v16, (uint64_t)static Logger.conversationKit);
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, v4);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_21_0(v18))
  {
    uint64_t v34 = v17;
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v38 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v19 = 136315138;
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v4, v5);
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v10);
    uint64_t v20 = v3;
    uint64_t v21 = specialized >> prefix<A>(_:)();
    unint64_t v23 = v22;
    outlined destroy of SystemUpdateNotice?(v5, &demangling cache variable for type metadata for RecentsCallItemType?);
    uint64_t v24 = v21;
    uint64_t v3 = v20;
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v38);
    OUTLINED_FUNCTION_32_4(v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v4, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v17 = v34;
    _os_log_impl(&dword_1C2F90000, v34, v2, "[SpamReporting] RecentsCallItem: type: %s", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v4, (void (*)(void))type metadata accessor for RecentsCallItem);
  }

  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v37, v0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 3) < 2 || EnumCaseMultiPayload)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
  }
  else
  {
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v0, v36);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v36, v3);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v38 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v29 = 136315138;
      if (*(void *)(v3 + *(int *)(v35 + 32)))
      {
        uint64_t v30 = String.init<A>(reflecting:)();
        unint64_t v32 = v31;
      }
      else
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v30 = 7104878;
      }
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v38);
      OUTLINED_FUNCTION_32_4(v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v3, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      _os_log_impl(&dword_1C2F90000, v27, v28, "[SpamReporting] RecentsCallItem: recentCallRecentItemMetadata.remoteHandles.count = %s", v29, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v3, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    }

    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v36, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  }
  OUTLINED_FUNCTION_28();
}

void RecentsCallItem.isIncomingCall.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v2 = type metadata accessor for RecentsCallItem(0);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_98_0(v4, (uint64_t)static ReportSpamManager.logger);
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v1);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v12 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v7 = 136315138;
    unint64_t v8 = RecentsCallItem.callStatus.getter();
    if ((v8 & 0x100000000) != 0)
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    else
    {
      UInt32.stringValue.getter(v8);
      uint64_t v9 = String.init<A>(reflecting:)();
      unint64_t v11 = v10;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentsCallItem);
    _os_log_impl(&dword_1C2F90000, v5, v6, "Callstatus: %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentsCallItem);
  }

  RecentsCallItem.callStatus.getter();
  OUTLINED_FUNCTION_15_0();
}

uint64_t RecentsCallItem.initiator.getter()
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_164_2();
  switch(OUTLINED_FUNCTION_155_1())
  {
    case 1u:
    case 2u:
    case 3u:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v3, (void (*)(void))type metadata accessor for RecentsCallItemType);
      break;
    default:
      OUTLINED_FUNCTION_114_0();
      uint64_t v7 = *(void **)(v0 + *(int *)(v4 + 24));
      id v8 = v7;
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      if (v7)
      {
        id v9 = objc_msgSend(v8, sel_initiator);

        if (v9)
        {
          CHHandle.tuHandle.getter();
        }
      }
      break;
  }
  return OUTLINED_FUNCTION_209_1();
}

void RecentsCallItem.isGroupFaceTimeCall.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = type metadata accessor for RecentsCallItem(0);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_54_2();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = OUTLINED_FUNCTION_185_1();
  type metadata accessor for RecentsCallItemType(v9);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_60();
  OUTLINED_FUNCTION_214_0();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    unint64_t v11 = *v0;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_98_0(v12, (uint64_t)static Logger.conversationKit);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0((uint64_t)v0, v2);
    uint64_t v13 = OUTLINED_FUNCTION_24_2();
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v13, v14);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 67109376;
      uint64_t v18 = RecentsCallItem.isTelephony.getter() & 1;
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
      v26[3] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 8) = 1024;
      RecentsCallItem.isOneToOne.getter();
      int v20 = v19 & 1;
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentsCallItem);
      v26[2] = v20;
      OUTLINED_FUNCTION_181_1();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v15, v16, "[SpamReporting] isTelephony: %{BOOL}d, isOneToOne: %{BOOL}d", (uint8_t *)v17, 0xEu);
      OUTLINED_FUNCTION_3();
    }
    else
    {
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentsCallItem);
      uint64_t v21 = OUTLINED_FUNCTION_45_9();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v21, v22);
    }

    char v23 = RecentsCallItem.isTelephony.getter();
    uint64_t v24 = OUTLINED_FUNCTION_30_15();
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v24, v25);
    if ((v23 & 1) == 0) {
      RecentsCallItem.isOneToOne.getter();
    }
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
  }
  OUTLINED_FUNCTION_28();
}

unint64_t RecentsCallItem.faceTimeSpamCallType.getter()
{
  uint64_t v3 = v0;
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_106_4();
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  RecentsCallItem.isOneToOne.getter();
  char v8 = v7;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v3, v2);
  if (v8)
  {
    char v9 = RecentsCallItem.isTelephony.getter();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
    if ((v9 & 1) == 0) {
      return 0xD000000000000013;
    }
  }
  else
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
  }
  uint64_t v10 = 0x656D697465636166;
  RecentsCallItem.isGroupFaceTimeCall.getter();
  if ((v11 & 1) == 0)
  {
    OUTLINED_FUNCTION_216_1();
    OUTLINED_FUNCTION_74();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
    if (EnumCaseMultiPayload != 2) {
      return 0;
    }
  }
  return v10;
}

uint64_t RecentsCallItem.duration.getter()
{
  type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_218_1();
  if (OUTLINED_FUNCTION_59_1())
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_162_2();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_170_1();
    if (v6)
    {
      objc_msgSend(v6, sel_duration);
      uint64_t v5 = v7;
    }
    else
    {
      uint64_t v5 = 0;
    }
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v3, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  }
  return v5;
}

void RecentsCallItem.linkName.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_14();
  a17 = v20;
  a18 = v21;
  uint64_t v22 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v23);
  uint64_t v24 = OUTLINED_FUNCTION_103_5();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_64();
  uint64_t v29 = OUTLINED_FUNCTION_217_0();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v29, v30);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v19, v18);
      uint64_t v34 = *(void **)(v18 + *(int *)(v22 + 28));
      if (v34)
      {
        id v35 = objc_msgSend(v34, sel_linkName);
        if (v35)
        {
          uint64_t v36 = v35;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_42_1();
        }
      }
      uint64_t v38 = type metadata accessor for RecentOngoingConversationMetadata;
      uint64_t v39 = v18;
      goto LABEL_12;
    case 2u:
      uint64_t v37 = *v19;
      outlined bridged method (pb) of @objc TUConversationLink.linkName.getter(*v19);
      OUTLINED_FUNCTION_42_1();
      swift_release();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v19, (void (*)(void))type metadata accessor for RecentsCallItemType);
      break;
    default:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v19, (uint64_t)v27);
      unint64_t v31 = *(void **)&v27[*(int *)(v24 + 44)];
      if (v31)
      {
        id v32 = objc_msgSend(v31, sel_linkName);
        if (v32)
        {
          uint64_t v33 = v32;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_42_1();
        }
      }
      uint64_t v38 = type metadata accessor for RecentCallRecentItemMetadata;
      uint64_t v39 = (uint64_t)v27;
LABEL_12:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v39, (void (*)(void))v38);
      break;
  }
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_15_0();
}

void RecentsCallItem.extraSubtitle.getter()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_17_0();
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, (uint64_t)v0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    id v4 = *v0;
    swift_bridgeObjectRetain();
    swift_retain();
    ConversationLink.prevailingSuggestion.getter();
    if (v5)
    {
      uint64_t v6 = v5;
      v7.super.Class isa = (Class)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_19_41(v7);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
      SGURL.applicationLocalizedName.getter();
      *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v9 = lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_146_2(v9);
      OUTLINED_FUNCTION_120_3();
      OUTLINED_FUNCTION_32_1();

      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_120_3();
      OUTLINED_FUNCTION_32_1();
    }
  }
  else
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
  }
  OUTLINED_FUNCTION_28();
}

id RecentsCallItem.featureFlags.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for RecentsCallItem(0) + 56));
  return v1;
}

uint64_t static RecentsCallItem.titleUsingLink(_:in:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v30 = *a1;
  uint64_t v31 = v4;
  uint64_t v32 = v5;
  uint64_t v6 = ConversationLink.displayName.getter();
  if (v7) {
    return v6;
  }
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  uint64_t v32 = v5;
  static RecentsCallItem.formattedOriginatorTitleFromLink(_:in:)((uint64_t)&v30, a2);
  if (v8) {
    return v6;
  }
  if (!a2)
  {
LABEL_20:
    uint64_t v9 = static RecentsCallItem.genericStringForFaceTimeLink(_:)((unint64_t)a2);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v9;
  }
  id v11 = objc_msgSend(a2, sel_remoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = specialized Set.count.getter(v12);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    a2 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_20;
  }
  uint64_t v14 = v13;
  uint64_t v36 = (void *)MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v16 = 1;
  }
  else
  {
    uint64_t result = specialized _NativeSet.startIndex.getter(v12);
    unsigned __int8 v16 = v17 & 1;
  }
  uint64_t v33 = result;
  uint64_t v34 = v15;
  unsigned __int8 v35 = v16;
  if ((v14 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v18 = v33;
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      specialized Set.subscript.getter(v33, v34, v35, v12);
      uint64_t v22 = v21;
      id v23 = objc_msgSend(v21, sel_handle);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v12 & 0xC000000000000001) != 0)
      {
        if ((v20 & 1) == 0) {
          goto LABEL_22;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationMember>.Index);
        uint64_t v29 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v29(&v30, 0);
      }
      else
      {
        uint64_t v24 = specialized _NativeSet.index(after:)(v18, v19, v20, v12);
        uint64_t v26 = v25;
        char v28 = v27;
        outlined consume of Set<TUHandle>.Index._Variant(v18, v19, v20);
        uint64_t v33 = v24;
        uint64_t v34 = v26;
        unsigned __int8 v35 = v28 & 1;
      }
      --v14;
    }
    while (v14);
    outlined consume of Set<TUHandle>.Index._Variant(v33, v34, v35);
    a2 = v36;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void RecentsCallItem.init(conversation:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = (int *)type metadata accessor for RecentsCallItem(0);
  uint64_t v5 = v4[14];
  *(void *)(v3 + v5) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v6 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  id v8 = objc_msgSend(v1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v9 = objc_msgSend(v1, sel_remoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.flatMap<A>(_:)(v10);
  uint64_t v12 = v11;
  uint64_t v13 = v1;
  swift_bridgeObjectRelease();
  uint64_t v14 = specialized Set.init<A>(_:)(v12, (uint64_t)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (uint64_t)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
  id v15 = objc_msgSend(v1, sel_link);
  uint64_t v47 = v1;
  if (!v15)
  {
    OUTLINED_FUNCTION_144_3();
    OUTLINED_FUNCTION_2_1();
    v27();
    uint64_t v28 = type metadata accessor for RecentOngoingConversationMetadata(0);
    OUTLINED_FUNCTION_156_3(v28);
    char v17 = (void *)(v3 + v29);
    type metadata accessor for RecentsCallItemType(0);
    v17[1] = 0;
    _OWORD v17[2] = 0;
    *char v17 = 0;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    id v30 = objc_msgSend(v1, sel_displayName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_173_1();

    uint64_t v48 = 0;
    uint64_t v26 = v14;
    goto LABEL_9;
  }
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    char v17 = (void *)v6;
    unsigned __int8 v16 = v15;
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
      uint64_t v18 = v46;
      goto LABEL_5;
    }
  }
  else
  {
    unsigned __int8 v16 = v15;
    char v17 = (void *)v6;
  }
  uint64_t v18 = MEMORY[0x1E4FBC870];
LABEL_5:
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v19 = static ParticipantContactDetailsCache.faceTime;
  OUTLINED_FUNCTION_144_3();
  OUTLINED_FUNCTION_2_1();
  v20();
  uint64_t v21 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_156_3(v21);
  id v23 = (void *)(v3 + v22);
  *id v23 = v16;
  v23[1] = v18;
  id v23[2] = v19;
  type metadata accessor for RecentsCallItemType(0);
  swift_storeEnumTagMultiPayload();
  v49[0] = (uint64_t)v16;
  v49[1] = v18;
  v49[2] = (uint64_t)v19;
  swift_bridgeObjectRetain();
  id v24 = v13;
  swift_retain_n();
  uint64_t v48 = v16;
  id v25 = v16;
  swift_bridgeObjectRetain();
  static RecentsCallItem.titleUsingLink(_:in:)(v49, v13);
  OUTLINED_FUNCTION_173_1();
  uint64_t v26 = v14;
LABEL_9:
  uint64_t v31 = (void *)(v3 + v4[5]);
  *uint64_t v31 = v13;
  v31[1] = v17;
  id v32 = objc_msgSend(self, sel_conversationKit);
  uint64_t v33 = OUTLINED_FUNCTION_0_23(0x4A5F4F545F504154, 0xEB000000004E494FLL);
  uint64_t v35 = v34;

  uint64_t v36 = (uint64_t *)(v3 + v4[6]);
  *uint64_t v36 = v33;
  v36[1] = v35;
  uint64_t v37 = type metadata accessor for Date();
  OUTLINED_FUNCTION_13_18(v37);
  *(void *)(v3 + v4[10]) = objc_msgSend(self, sel_whiteColor);
  uint64_t v38 = (void *)(v3 + v4[7]);
  void *v38 = 0;
  v38[1] = 0;
  uint64_t v39 = (void *)(v3 + v4[8]);
  *uint64_t v39 = 0;
  v39[1] = 0;
  *(void *)(v3 + v4[11]) = 0;
  uint64_t v40 = specialized Sequence.compactMap<A>(_:)(v26);
  swift_bridgeObjectRelease();
  *(void *)(v3 + v4[12]) = v40;
  uint64_t v41 = UUID.uuidString.getter();
  uint64_t v43 = v42;

  outlined consume of ConversationLink?(v48);
  OUTLINED_FUNCTION_10_6();
  v44();
  unint64_t v45 = (uint64_t *)(v3 + v4[13]);
  *unint64_t v45 = v41;
  v45[1] = v43;
  OUTLINED_FUNCTION_28();
}

uint64_t MessageType.mediaType.getter(unsigned __int16 a1)
{
  if (a1 < 3u) {
    return qword_1C377FED8[(__int16)a1];
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  MessageType.rawValue.getter();
  v2._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static RecentsCallItem.genericStringForFaceTimeLink(_:)(unint64_t a1)
{
  if (a1)
  {
    if (a1 >> 62) {
      goto LABEL_16;
    }
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v3 = 4;
      while (1)
      {
        id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
        uint64_t v5 = v4;
        uint64_t v6 = v3 - 3;
        if (__OFADD__(v3 - 4, 1)) {
          break;
        }
        id v7 = objc_msgSend(v4, sel_value);
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v9;

        uint64_t v11 = (void *)MEMORY[0x1C87730B0](v8, v10);
        swift_bridgeObjectRelease();
        LOBYTE(v8) = objc_msgSend(v11, sel_destinationIdIsTemporary);

        if (v8)
        {
          swift_bridgeObjectRelease_n();
          id v12 = objc_msgSend(self, sel_conversationKit);
          unint64_t v20 = 0xE000000000000000;
          uint64_t v13 = 0x454D495445434146;
          unint64_t v14 = 0xED00004B4E494C5FLL;
          goto LABEL_13;
        }
        ++v3;
        if (v6 == v2) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain_n();
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
  }
  id v12 = objc_msgSend(self, sel_conversationKit);
  unint64_t v20 = 0xE000000000000000;
  uint64_t v13 = 0x454D495445434146;
  unint64_t v14 = 0xEE004F454449565FLL;
LABEL_13:
  v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  uint64_t v17 = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v13, v15, (NSBundle)v12, v16, *(Swift::String *)(&v20 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

void static RecentsCallItem.formattedOriginatorTitleFromLink(_:in:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v65 = *(void *)(a1 + 16);
  uint64_t v4 = outlined bridged method (pb) of @objc TUConversationLink.invitedMemberHandles.getter(*(void **)a1);
  uint64_t v71 = v4;
  if ((objc_msgSend(v3, sel_isLocallyCreated) & 1) != 0
    || (id v5 = objc_msgSend(v3, sel_originatorHandle)) == 0)
  {
LABEL_5:
    if (a2) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v7 = MEMORY[0x1E4FBC860];
    goto LABEL_27;
  }
  if (v4)
  {
    specialized Set._Variant.insert(_:)(v66, v5);

    goto LABEL_5;
  }

  if (!a2) {
    goto LABEL_12;
  }
LABEL_6:
  id v6 = objc_msgSend(a2, sel_localMember);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v8 = v6;
    id v9 = objc_msgSend(v6, sel_handles);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = specialized Set.count.getter(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v70 = v7;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = __CocoaSet.startIndex.getter();
        unsigned __int8 v15 = 1;
      }
      else
      {
        uint64_t v13 = specialized _NativeSet.startIndex.getter(v10);
        unsigned __int8 v15 = v16 & 1;
      }
      uint64_t v67 = v13;
      uint64_t v68 = v14;
      unsigned __int8 v69 = v15;
      if (v12 < 0)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      do
      {
        uint64_t v18 = v67;
        uint64_t v17 = v68;
        uint64_t v19 = v69;
        specialized Set.subscript.getter(v67, v68, v69, v10);
        uint64_t v21 = v20;
        id v22 = objc_msgSend(v20, sel_value);
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        uint64_t v26 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v26 = v70;
        }
        unint64_t v27 = *(void *)(v26 + 16);
        if (v27 >= *(void *)(v26 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v26 = v70;
        }
        *(void *)(v26 + 16) = v27 + 1;
        uint64_t v28 = v26 + 16 * v27;
        *(void *)(v28 + 32) = v23;
        *(void *)(v28 + 40) = v25;
        if ((v10 & 0xC000000000000001) != 0)
        {
          if ((v19 & 1) == 0) {
            goto LABEL_46;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
          uint64_t v34 = (void (*)(id *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v34(v66, 0);
        }
        else
        {
          uint64_t v29 = specialized _NativeSet.index(after:)(v18, v17, v19, v10);
          uint64_t v31 = v30;
          char v33 = v32;
          outlined consume of Set<TUHandle>.Index._Variant(v18, v17, v19);
          uint64_t v67 = v29;
          uint64_t v68 = v31;
          unsigned __int8 v69 = v33 & 1;
        }
        --v12;
      }
      while (v12);
      outlined consume of Set<TUHandle>.Index._Variant(v67, v68, v69);
      swift_bridgeObjectRelease();
      uint64_t v7 = v70;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
LABEL_27:
  v66[0] = (id)specialized Set.init<A>(_:)(v7);
  id v35 = objc_msgSend(self, sel_sharedInstance);
  if (!v35)
  {
LABEL_47:
    __break(1u);
    return;
  }
  uint64_t v36 = v35;
  objc_msgSend(v35, sel_blockUntilConnected);

  id v37 = objc_msgSend(self, sel_sharedInstance);
  if (!v37) {
    goto LABEL_32;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for IMServiceImpl);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v39 = v37;
  id v40 = objc_msgSend(ObjCClassFromMetadata, sel_facetimeService);
  id v41 = objc_msgSend(v39, sel_bestAccountForService_, v40);

  if (!v41
    || (uint64_t v42 = outlined bridged method (ob) of @objc IMAccount.aliases.getter(v41)) == 0
    || (uint64_t v43 = specialized _arrayConditionalCast<A, B>(_:)(v42), swift_bridgeObjectRelease(), !v43))
  {
LABEL_32:
    swift_bridgeObjectRelease();
    uint64_t v43 = MEMORY[0x1E4FBC860];
  }
  specialized Set.formUnion<A>(_:)(v43);
  if (v71)
  {
    uint64_t v44 = swift_bridgeObjectRetain();
    Swift::Int v45 = specialized Set._Variant.filter(_:)(v44, (uint64_t *)v66);
    swift_retain();
    specialized Sequence.compactMap<A>(_:)(v45, v65);
    uint64_t v47 = v46;
    swift_release();
  }
  else
  {
    uint64_t v47 = MEMORY[0x1E4FBC860];
  }
  uint64_t v48 = *(void *)(v47 + 16);
  if (v48)
  {
    uint64_t v49 = *(void *)(v47 + 40);
    uint64_t v50 = *(void *)(v47 + 48);
    id v51 = *(id *)(v47 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v52 = v48 - 1;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v48 == 2)
      {
        id v53 = objc_msgSend(self, sel_conversationKit);
        v72._object = (void *)0xE000000000000000;
        v54._object = (void *)0x80000001C37AD230;
        v54._uint64_t countAndFlagsBits = 0xD000000000000030;
        v55.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v55.value._object = (void *)0xEF74694B6E6F6974;
        v56._uint64_t countAndFlagsBits = 0;
        v56._object = (void *)0xE000000000000000;
        v72._uint64_t countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, (NSBundle)v53, v56, v72);

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v57 = swift_allocObject();
        *(_OWORD *)(v57 + 16) = xmmword_1C3769620;
        *(void *)(v57 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v57 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v57 + 32) = v49;
        *(void *)(v57 + 40) = v50;
      }
      else
      {
        id v58 = objc_msgSend(self, sel_conversationKit);
        v59._uint64_t countAndFlagsBits = 0xD000000000000036;
        v73._object = (void *)0xE000000000000000;
        v59._object = (void *)0x80000001C37AD1F0;
        v60.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v60.value._object = (void *)0xEF74694B6E6F6974;
        v61._uint64_t countAndFlagsBits = 0;
        v61._object = (void *)0xE000000000000000;
        v73._uint64_t countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v59, v60, (NSBundle)v58, v61, v73);

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_1C37696D0;
        *(void *)(v62 + 56) = MEMORY[0x1E4FBB1A0];
        unint64_t v63 = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v62 + 32) = v49;
        *(void *)(v62 + 40) = v50;
        uint64_t v64 = MEMORY[0x1E4FBB5C8];
        *(void *)(v62 + 96) = MEMORY[0x1E4FBB550];
        *(void *)(v62 + 104) = v64;
        *(void *)(v62 + 64) = v63;
        *(void *)(v62 + 72) = v52;
      }
      swift_bridgeObjectRetain();
      String.init(format:_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void RecentsCallItem.init(recentItem:linkItem:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v120 = v4;
  uint64_t v6 = v5;
  uint64_t v118 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentsCallItemType?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_3();
  uint64_t v117 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = (int *)type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_61();
  uint64_t v16 = type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_101_4();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_141_2();
  uint64_t v19 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_58();
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v99 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v99 - v25;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v6, v1);
  if (OUTLINED_FUNCTION_59_1())
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v120, (void (*)(void))type metadata accessor for RecentsCallItem);
    OUTLINED_FUNCTION_200_0();
    unint64_t v27 = type metadata accessor for RecentsCallItemType;
    uint64_t v28 = v1;
LABEL_21:
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v28, (void (*)(void))v27);
    uint64_t v78 = 1;
    uint64_t v79 = v118;
    uint64_t v80 = (uint64_t)v119;
    goto LABEL_22;
  }
  uint64_t v115 = v19;
  uint64_t v116 = v6;
  uint64_t v109 = v2;
  uint64_t v110 = v14;
  uint64_t v112 = v3;
  unsigned __int8 v113 = v24;
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v1, (uint64_t)v26);
  uint64_t v29 = v120;
  OUTLINED_FUNCTION_214_0();
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v29, (void (*)(void))type metadata accessor for RecentsCallItem);
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v116, (void (*)(void))type metadata accessor for RecentsCallItem);
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v26, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    unint64_t v27 = type metadata accessor for RecentsCallItemType;
    uint64_t v28 = v0;
    goto LABEL_21;
  }
  uint64_t v104 = v16;
  uint64_t v31 = *(void **)v0;
  uint64_t v30 = *(void *)(v0 + 8);
  uint64_t v32 = *(void *)(v0 + 16);
  uint64_t v33 = (uint64_t)&v26[v115[10]];
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  int v107 = &v99;
  uint64_t v35 = OUTLINED_FUNCTION_8(v34);
  uint64_t v37 = *(void *)(v36 + 64);
  MEMORY[0x1F4188790](v35);
  unint64_t v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v111 = (uint64_t)&v99 - v38;
  uint64_t v39 = _s15ConversationKit11ParticipantVSgWOcTm_0(v33, (uint64_t)&v99 - v38, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v106 = &v99;
  MEMORY[0x1F4188790](v39);
  id v40 = (char *)&v99 - v38;
  id v41 = v31;
  swift_bridgeObjectRetain();
  swift_retain();
  id v114 = v41;
  id v42 = objc_msgSend(v41, sel_groupUUID);
  uint64_t v43 = (char *)&v99 - v38;
  if (MEMORY[0x1F4188790](v42))
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for UUID();
    uint64_t v44 = (char *)&v99 - v38;
    uint64_t v45 = 0;
  }
  else
  {
    type metadata accessor for UUID();
    uint64_t v44 = (char *)OUTLINED_FUNCTION_70_3();
  }
  OUTLINED_FUNCTION_192_1((uint64_t)v44, v45);
  uint64_t v108 = v26;
  outlined init with take of RecentsCollectionViewSectionable?((uint64_t)v43, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v105 = &v99;
  uint64_t v47 = OUTLINED_FUNCTION_8(v46);
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_16_0();
  uint64_t v49 = (uint64_t)&v43[*(int *)(v48 + 56)];
  uint64_t v50 = v111;
  _s15ConversationKit11ParticipantVSgWOcTm_0(v111, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v51 = OUTLINED_FUNCTION_163();
  _s15ConversationKit11ParticipantVSgWOcTm_0(v51, v52, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  type metadata accessor for UUID();
  uint64_t v53 = OUTLINED_FUNCTION_69((uint64_t)v43);
  if (v57)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?(v50, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_69(v49);
    uint64_t v54 = v120;
    if (v57)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_40_18();
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  MEMORY[0x1F4188790](v53);
  OUTLINED_FUNCTION_134_1();
  _s15ConversationKit11ParticipantVSgWOcTm_0((uint64_t)v43, v55 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_69(v49);
  if (v57)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?(v111, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_26_2();
    v58();
    uint64_t v54 = v120;
LABEL_16:
    outlined destroy of SystemUpdateNotice?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    OUTLINED_FUNCTION_40_18();
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();

    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v54, (void (*)(void))type metadata accessor for RecentsCallItem);
    OUTLINED_FUNCTION_200_0();
    unint64_t v27 = type metadata accessor for RecentCallRecentItemMetadata;
    uint64_t v28 = (uint64_t)v108;
    goto LABEL_21;
  }
  uint64_t v102 = &v99;
  OUTLINED_FUNCTION_5_3();
  uint64_t v101 = &v99;
  uint64_t v60 = v59;
  MEMORY[0x1F4188790](v61);
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_63_0();
  v62();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
  HIDWORD(v100) = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v63 = *(void (**)(void))(v60 + 8);
  OUTLINED_FUNCTION_336();
  v63();
  outlined destroy of SystemUpdateNotice?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of SystemUpdateNotice?(v111, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_336();
  v63();
  outlined destroy of SystemUpdateNotice?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_40_18();
  uint64_t v54 = v120;
  if ((v100 & 0x100000000) == 0) {
    goto LABEL_20;
  }
LABEL_18:
  uint64_t v64 = v112;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0((uint64_t)v108, v112);
  uint64_t v65 = v115;
  uint64_t v66 = (uint64_t)v113;
  *(void *)&v113[v115[6]] = 0;
  uint64_t v67 = (void *)(v66 + v65[11]);
  *uint64_t v67 = 0;
  v67[1] = 0;
  v67[2] = 0;
  *(void *)(v66 + v65[13]) = 0;
  uint64_t v68 = v64 + v65[11];
  unsigned __int8 v69 = *(void **)v68;
  id v70 = v114;
  uint64_t v71 = (int *)v114;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of ConversationLink?(v69);
  *(void *)uint64_t v68 = v70;
  *(void *)(v68 + 8) = v30;
  *(void *)(v68 + 16) = v32;
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v64, v66);
  uint64_t v121 = v71;
  uint64_t v122 = v30;
  uint64_t v72 = v30;
  uint64_t v123 = v32;
  Swift::String v73 = (void *)ConversationLink.displayName.getter();
  uint64_t v75 = v74;
  uint64_t v76 = v116;
  uint64_t v77 = v109;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v116, (uint64_t)v109);
  if (v75)
  {
    id v114 = v73;
  }
  else
  {
    uint64_t v81 = &v77[v119[6]];
    uint64_t v75 = *((void *)v81 + 1);
    id v114 = *(id *)v81;
    swift_bridgeObjectRetain();
  }
  uint64_t v82 = v117;
  uint64_t v83 = v112;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v77, (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v121 = v71;
  uint64_t v122 = v72;
  uint64_t v123 = v32;
  ConversationLink.prevailingSuggestion.getter();
  uint64_t v103 = v72;
  uint64_t v115 = v71;
  if (v84)
  {
    uint64_t v85 = v84;
    id v86 = SGURL.applicationIcon.getter();
  }
  else
  {
    id v86 = 0;
  }
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v66, v83);
  uint64_t v80 = (uint64_t)v119;
  uint64_t v87 = v76;
  uint64_t v88 = *(void *)(v76 + v119[12]);
  uint64_t v89 = (uint64_t *)(v76 + v119[5]);
  uint64_t v90 = *v89;
  uint64_t v91 = v89[1];
  OUTLINED_FUNCTION_218();
  __swift_storeEnumTagSinglePayload(v92, v93, v94, v104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v98 = (uint64_t)v86;
  uint64_t v95 = (uint64_t)v110;
  RecentsCallItem.init(recentsCallMetadata:contacts:title:subtitle:forcedSubtitle:senderIdentity:occurrenceCount:applicationIcon:type:)(v83, v88, v90, v91, (uint64_t)v114, v75, (uint64_t)v114, v75, 0, 0, 0, 0, v98, v82, v99, v100, (uint64_t)v101, (uint64_t)v102, v103,
    v104,
    (uint64_t)v105,
    (uint64_t)v106,
    (uint64_t)v107,
    (uint64_t)v108,
    v109,
    (uint64_t)v110);
  swift_release();
  swift_bridgeObjectRelease();

  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v120, (void (*)(void))type metadata accessor for RecentsCallItem);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v87, (void (*)(void))type metadata accessor for RecentsCallItem);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v113, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v108, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v96 = OUTLINED_FUNCTION_287();
  if (__swift_getEnumTagSinglePayload(v96, v97, v80))
  {
    outlined destroy of SystemUpdateNotice?(v95, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    uint64_t v78 = 1;
    uint64_t v79 = v118;
  }
  else
  {
    uint64_t v79 = v118;
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v95, v118);
    uint64_t v78 = 0;
  }
LABEL_22:
  __swift_storeEnumTagSinglePayload(v79, v78, 1, v80);
  OUTLINED_FUNCTION_28();
}

void RecentsCallItem.init(recentItem:messageItem:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v136 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentsCallItemType?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v126 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_10_5();
  uint64_t v127 = v14;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_42();
  uint64_t v122 = v16;
  uint64_t v17 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_10_5();
  uint64_t v129 = v19;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_8_4();
  uint64_t v125 = v21;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_8_4();
  uint64_t v123 = v23;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_8_4();
  uint64_t v128 = v25;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_8_4();
  uint64_t v130 = v27;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_8_4();
  uint64_t v131 = v29;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_141_2();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  uint64_t v32 = OUTLINED_FUNCTION_8(v31);
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_10_5();
  uint64_t v124 = v33;
  OUTLINED_FUNCTION_8_1();
  uint64_t v35 = MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v117 - v36;
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_58();
  MEMORY[0x1F4188790](v38);
  OUTLINED_FUNCTION_83_4();
  MEMORY[0x1F4188790](v39);
  uint64_t v40 = OUTLINED_FUNCTION_185_1();
  uint64_t v135 = type metadata accessor for RecentsCallItem(v40);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v41);
  uint64_t v133 = (uint64_t)&v117 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v5, v133);
  RecentsCallItemType.recentCallRecentItemMetadata.getter();
  uint64_t v134 = v5;
  RecentsCallItemType.recentCallRecentItemMetadata.getter();
  uint64_t v132 = v1;
  _s15ConversationKit11ParticipantVSgWOcTm_0(v1, v3, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  OUTLINED_FUNCTION_33_0(v3, 1, (uint64_t)v17);
  if (v43)
  {
    uint64_t v37 = (char *)v3;
LABEL_7:
    uint64_t v44 = v133;
    uint64_t v45 = v136;
    outlined destroy of SystemUpdateNotice?((uint64_t)v37, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.conversationKit);
    uint64_t v47 = (void *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12(v48))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v49, v50, "Unable to coalesce recentsCallItem w/ messageItem because metadata is nil)");
      OUTLINED_FUNCTION_3();
    }

    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v134, (void (*)(void))type metadata accessor for RecentsCallItem);
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v7, (void (*)(void))type metadata accessor for RecentsCallItem);
    outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
    outlined destroy of SystemUpdateNotice?(v132, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
    uint64_t v51 = 1;
    uint64_t v52 = v135;
    goto LABEL_12;
  }
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v3, v0);
  _s15ConversationKit11ParticipantVSgWOcTm_0(v2, (uint64_t)v37, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  OUTLINED_FUNCTION_33_0((uint64_t)v37, 1, (uint64_t)v17);
  if (v43)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v0, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
    goto LABEL_7;
  }
  uint64_t v119 = v2;
  uint64_t v121 = v7;
  uint64_t v53 = v131;
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v37, v131);
  uint64_t v54 = v17[12];
  uint64_t v120 = v0;
  uint64_t v55 = v0 + v54;
  uint64_t v56 = v53 + v54;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v58 = OUTLINED_FUNCTION_8(v57);
  MEMORY[0x1F4188790](v58);
  OUTLINED_FUNCTION_118();
  uint64_t v60 = v3 + *(int *)(v59 + 56);
  _s15ConversationKit11ParticipantVSgWOcTm_0(v55, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  _s15ConversationKit11ParticipantVSgWOcTm_0(v56, v60, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v61 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_69(v3);
  uint64_t v45 = v136;
  if (v62)
  {
    OUTLINED_FUNCTION_69(v60);
    if (!v43) {
      goto LABEL_20;
    }
    outlined destroy of SystemUpdateNotice?(v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v64 = OUTLINED_FUNCTION_8(v63);
    MEMORY[0x1F4188790](v64);
    OUTLINED_FUNCTION_64();
    _s15ConversationKit11ParticipantVSgWOcTm_0(v3, v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    __swift_getEnumTagSinglePayload(v60, 1, v61);
    OUTLINED_FUNCTION_10_0();
    uint64_t v67 = v66;
    if (v65 == 1)
    {
      OUTLINED_FUNCTION_159_0();
      v68();
      uint64_t v45 = v136;
LABEL_20:
      outlined destroy of SystemUpdateNotice?(v3, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_28:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v109 = type metadata accessor for Logger();
      __swift_project_value_buffer(v109, (uint64_t)static Logger.conversationKit);
      uint64_t v110 = (void *)Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.default.getter();
      BOOL v112 = OUTLINED_FUNCTION_12(v111);
      uint64_t v52 = v135;
      uint64_t v44 = v133;
      uint64_t v113 = v119;
      if (v112)
      {
        *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
        OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v114, v115, "Unable to create RecentsCallItem since the recent call conversationID and the message conversationID aren't the same");
        OUTLINED_FUNCTION_3();
      }

      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v134, (void (*)(void))type metadata accessor for RecentsCallItem);
      OUTLINED_FUNCTION_200_0();
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v131, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v120, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      outlined destroy of SystemUpdateNotice?(v113, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
      outlined destroy of SystemUpdateNotice?(v132, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
      uint64_t v51 = 1;
      goto LABEL_12;
    }
    MEMORY[0x1F4188790](v65);
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_63_0();
    v69();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
    LODWORD(v118) = dispatch thunk of static Equatable.== infix(_:_:)();
    id v70 = *(void (**)(void))(v67 + 8);
    OUTLINED_FUNCTION_159_0();
    v70();
    OUTLINED_FUNCTION_159_0();
    v70();
    outlined destroy of SystemUpdateNotice?(v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v45 = v136;
    if ((v118 & 1) == 0) {
      goto LABEL_28;
    }
  }
  uint64_t v71 = v128;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v131, v128);
  uint64_t v72 = v120;
  uint64_t v73 = v123;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v120, v123);
  uint64_t v74 = v17[6];
  uint64_t v75 = v125;
  *(void *)(v125 + v74) = 0;
  uint64_t v76 = v75 + v17[11];
  *(void *)uint64_t v76 = 0;
  *(void *)(v76 + 8) = 0;
  *(void *)(v76 + 16) = 0;
  *(void *)(v75 + v17[13]) = 0;
  uint64_t v77 = *(void **)(v73 + v17[6]);
  id v78 = v77;
  uint64_t v118 = type metadata accessor for RecentCallRecentItemMetadata;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v73, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v79 = v17[6];

  *(void *)(v71 + v79) = v77;
  outlined consume of ConversationLink?(*(void **)v76);
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v71, v75);
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v75, v130);
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v72, v71);
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v131, v73);
  uint64_t v80 = v17[6];
  *(void *)(v75 + v80) = 0;
  uint64_t v81 = v75 + v17[11];
  *(void *)uint64_t v81 = 0;
  *(void *)(v81 + 8) = 0;
  *(void *)(v81 + 16) = 0;
  uint64_t v82 = v17[13];
  *(void *)(v75 + v82) = 0;
  uint64_t v83 = *(void **)(v73 + v17[13]);
  id v84 = v83;
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v73, (void (*)(void))v118);
  uint64_t v85 = v17[13];

  *(void *)(v71 + v85) = v83;
  outlined consume of ConversationLink?(*(void **)v81);

  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v71, v75);
  _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v75, v129);
  uint64_t v86 = v124;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v130, v124);
  OUTLINED_FUNCTION_82_2(v86, 0);
  uint64_t v44 = v133;
  RecentsCallItemType.recentCallRecentItemMetadata.setter();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v87 = type metadata accessor for Logger();
  __swift_project_value_buffer(v87, (uint64_t)static Logger.conversationKit);
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.default.getter();
  BOOL v90 = os_log_type_enabled(v88, v89);
  uint64_t v52 = v135;
  if (v90)
  {
    uint64_t v91 = (uint8_t *)OUTLINED_FUNCTION_37();
    v138[0] = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v91 = 136315138;
    swift_beginAccess();
    uint64_t v92 = v122;
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v44, v122);
    __swift_storeEnumTagSinglePayload(v92, 0, 1, v52);
    uint64_t v93 = specialized >> prefix<A>(_:)();
    unint64_t v95 = v94;
    outlined destroy of SystemUpdateNotice?(v92, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    uint64_t v96 = v93;
    uint64_t v52 = v135;
    uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v95, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v88, v89, "messageItemCopy: %s", v91, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v97 = v121;
  uint64_t v98 = v129;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v129, v128);
  uint64_t v99 = (uint64_t *)(v97 + *(int *)(v52 + 20));
  uint64_t v100 = *v99;
  uint64_t v101 = v99[1];
  uint64_t v102 = (uint64_t *)(v97 + *(int *)(v52 + 24));
  uint64_t v103 = v102[1];
  uint64_t v135 = *v102;
  swift_beginAccess();
  uint64_t v104 = v126;
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v44, v126);
  uint64_t v105 = type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_93_2(v105);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v116 = v104;
  uint64_t v106 = (uint64_t)v127;
  uint64_t v107 = OUTLINED_FUNCTION_74();
  RecentsCallItem.init(recentsCallMetadata:contacts:title:subtitle:forcedSubtitle:senderIdentity:occurrenceCount:applicationIcon:type:)(v107, v108, v100, v101, v135, v103, 0, 0, 0, 0, 0, 0, 0, v116, v117, (uint64_t)v118, v119, v120, v121,
    v122,
    v123,
    v124,
    v125,
    v126,
    v127,
    v128);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v134, (void (*)(void))type metadata accessor for RecentsCallItem);
  OUTLINED_FUNCTION_200_0();
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v98, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v130, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v131, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v120, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  outlined destroy of SystemUpdateNotice?(v119, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  outlined destroy of SystemUpdateNotice?(v132, &demangling cache variable for type metadata for RecentCallRecentItemMetadata?);
  if (__swift_getEnumTagSinglePayload(v106, 1, v52))
  {
    outlined destroy of SystemUpdateNotice?(v106, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    uint64_t v51 = 1;
    uint64_t v45 = v136;
  }
  else
  {
    uint64_t v45 = v136;
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v106, v136);
    uint64_t v51 = 0;
  }
LABEL_12:
  _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v44, (void (*)(void))type metadata accessor for RecentsCallItem);
  __swift_storeEnumTagSinglePayload(v45, v51, 1, v52);
  OUTLINED_FUNCTION_28();
}

uint64_t RecentsCallItem.hash(into:)()
{
  type metadata accessor for RecentsCallItem(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RecentsCallItem()
{
  return Hasher._finalize()();
}

uint64_t static RecentsCallItem.VideoMessageError.== infix(_:_:)()
{
  return 1;
}

void RecentsCallItem.VideoMessageError.hash(into:)()
{
  Swift::UInt v0 = OUTLINED_FUNCTION_89();
  Hasher._combine(_:)(v0);
}

Swift::Int RecentsCallItem.VideoMessageError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t closure #1 in RecentsCallItem.saveVideoMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return MEMORY[0x1F4188298](closure #1 in RecentsCallItem.saveVideoMessage(_:), 0, 0);
}

uint64_t closure #1 in RecentsCallItem.saveVideoMessage(_:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  uint64_t v2 = OUTLINED_FUNCTION_212_1();
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[6] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v6 + v5, v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in RecentsCallItem.saveVideoMessage(_:);
  return MEMORY[0x1F41190F0](v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *unint64_t v5 = v4;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v0[4]);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_100_2();
  v0[9] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in RecentsCallItem.saveVideoMessage(_:);
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  return v5(v3, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  char *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = (void *)v0[8];
  swift_bridgeObjectRelease();
  uint64_t v2 = OUTLINED_FUNCTION_30_15();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  uint64_t v3 = v1;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_100_2();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in RecentsCallItem.saveVideoMessage(_:);
  unint64_t v5 = v0[8];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  return v9(v7, v6, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  char *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RecentsCallItem.includeOriginalIfCombined(after:)()
{
  uint64_t v1 = type metadata accessor for Date();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_62();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_63();
  RecentsCallItem.sectionDate.getter();
  OUTLINED_FUNCTION_33_0(v0, 1, v1);
  if (v5)
  {
    outlined destroy of SystemUpdateNotice?(v0, (uint64_t *)&demangling cache variable for type metadata for Date?);
    char v7 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_163();
    OUTLINED_FUNCTION_63_0();
    v6();
    OUTLINED_FUNCTION_39();
    char v7 = static Date.> infix(_:_:)();
    uint64_t v8 = OUTLINED_FUNCTION_74();
    v9(v8);
  }
  return v7 & 1;
}

BOOL RecentsCallItem.shouldDisplayStagingAreaForOngoingCall()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RecentOngoingConversationMetadata(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RecentsCallItemType(0);
  MEMORY[0x1F4188790](v5);
  char v7 = (void **)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, (uint64_t)v7);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v7, (uint64_t)v4);
      BOOL v9 = objc_msgSend(*(id *)&v4[*(int *)(v2 + 24)], sel_resolvedAudioVideoMode) == (id)2;
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v4, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      break;
    case 2u:
      uint64_t v8 = *v7;
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_4;
    default:
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItemType);
LABEL_4:
      BOOL v9 = 0;
      break;
  }
  return v9;
}

id @nonobjc TPMessageIndicatorViewModel.init(duration:identifier:mediaURL:thumbnailURL:isRead:isSensitive:isVideo:from:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, void *a9)
{
  uint64_t v10 = v9;
  if (a3)
  {
    uint64_t v18 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v21 = 0;
  if (__swift_getEnumTagSinglePayload(a4, 1, v19) != 1)
  {
    URL._bridgeToObjectiveC()(v20);
    uint64_t v21 = v22;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a4, v19);
  }
  if (__swift_getEnumTagSinglePayload(a5, 1, v19) == 1)
  {
    uint64_t v24 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v23);
    uint64_t v24 = v25;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a5, v19);
  }
  id v26 = objc_msgSend(v10, sel_initWithDuration_identifier_mediaURL_thumbnailURL_isRead_isSensitive_isVideo_fromHandle_, v18, v21, v24, a6 & 1, a7 & 1, a8 & 1, a1, a9);

  return v26;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, uint64_t *a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return specialized _NativeSet.filter(_:)(a1, a2);
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v29 = MEMORY[0x1E4FBC870];
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_24:
    swift_release();
    return v3;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v4 = *a2;
    swift_bridgeObjectRetain();
    id v5 = objc_msgSend(v28, sel_value);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    specialized Set.contains(_:)(v6, v8, v4);
    LOBYTE(v5) = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      uint64_t v10 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v11 = outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(v28);
      if (v12)
      {
        uint64_t v13 = v12;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v13 = 0xE000000000000000;
      }
      specialized Set.contains(_:)(v11, v13, v10);
      char v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0) {
        break;
      }
    }

LABEL_22:
    if (!__CocoaSet.Iterator.next()())
    {
      uint64_t v3 = v29;
      goto LABEL_24;
    }
  }
  uint64_t v16 = v29;
  unint64_t v17 = *(void *)(v29 + 16);
  if (*(void *)(v29 + 24) <= v17)
  {
    specialized _NativeSet.resize(capacity:)(v17 + 1);
    uint64_t v16 = v29;
  }
  Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v16 + 40));
  uint64_t v19 = v16 + 56;
  uint64_t v20 = -1 << *(unsigned char *)(v16 + 32);
  unint64_t v21 = result & ~v20;
  unint64_t v22 = v21 >> 6;
  if (((-1 << v21) & ~*(void *)(v16 + 56 + 8 * (v21 >> 6))) != 0)
  {
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v16 + 56 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_21:
    *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v16 + 48) + 8 * v23) = v28;
    ++*(void *)(v16 + 16);
    goto LABEL_22;
  }
  char v24 = 0;
  unint64_t v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    BOOL v26 = v22 == v25;
    if (v22 == v25) {
      unint64_t v22 = 0;
    }
    v24 |= v26;
    uint64_t v27 = *(void *)(v19 + 8 * v22);
    if (v27 != -1)
    {
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v4 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v7 = (void *)((char *)v13 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v7);
    specialized closure #1 in _NativeSet.filter(_:)(v7, v6, v4, a2);
    uint64_t v9 = v8;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v10);
    specialized closure #1 in _NativeSet.filter(_:)(v10, v6, v4, a2);
    uint64_t v9 = v11;
    swift_release();
    MEMORY[0x1C87760E0](v10, -1, -1);
  }
  return v9;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v9 = *(void *)(a3 + 56);
  uint64_t v7 = a3 + 56;
  uint64_t v8 = v9;
  uint64_t v10 = 1 << *(unsigned char *)(v7 - 24);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v8;
  uint64_t v34 = v7;
  int64_t v35 = (unint64_t)(v10 + 63) >> 6;
LABEL_4:
  uint64_t v33 = v5;
  while (v12)
  {
    unint64_t v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v14 = v13 | (v6 << 6);
LABEL_18:
    uint64_t v18 = *a4;
    id v19 = *(id *)(*(void *)(a3 + 48) + 8 * v14);
    swift_bridgeObjectRetain();
    id v20 = objc_msgSend(v19, sel_value);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    specialized Set.contains(_:)(v21, v23, v18);
    LOBYTE(v21) = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21)
    {
    }
    else
    {
      uint64_t v25 = *a4;
      swift_bridgeObjectRetain();
      uint64_t v26 = outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(v19);
      if (v27)
      {
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v28 = 0xE000000000000000;
      }
      specialized Set.contains(_:)(v26, v28, v25);
      char v30 = v29;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
        *(unint64_t *)((char *)a1 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        uint64_t v5 = v33 + 1;
        if (!__OFADD__(v33, 1)) {
          goto LABEL_4;
        }
        __break(1u);
LABEL_32:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(a1, a2, v33, a3);
        return;
      }
    }
  }
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v6 >= v35) {
    goto LABEL_32;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v6);
  if (v16)
  {
LABEL_17:
    unint64_t v12 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
    goto LABEL_18;
  }
  int64_t v17 = v6 + 1;
  if (v6 + 1 >= v35) {
    goto LABEL_32;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v6 + 2;
  if (v6 + 2 >= v35) {
    goto LABEL_32;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v6 + 3;
  if (v6 + 3 >= v35) {
    goto LABEL_32;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v6 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v35) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v34 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_34:
  __break(1u);
}

#error "1C33FFF1C: call analysis failed (funcsize=104)"

#error "1C34003DC: call analysis failed (funcsize=104)"

#error "1C3400574: call analysis failed (funcsize=93)"

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ConversationControlsAction();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ConversationControlsAction.hash(into:)();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v20 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      static ConversationControlsAction.== infix(_:_:)();
      char v17 = v16;
      _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsAction);
      if (v17) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(a2, (void (*)(void))type metadata accessor for ConversationControlsAction);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(*(void *)(*v3 + 48) + v15 * v13, v20);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(a2, (uint64_t)v9);
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v21;
    swift_bridgeObjectRelease();
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(a2, a1);
    return 1;
  }
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, specialized _NativeSet.resize(capacity:), &type metadata for TranscriptionViewModel.CaptionID, &demangling cache variable for type metadata for _SetStorage<TranscriptionViewModel.CaptionID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, specialized _NativeSet.resize(capacity:), &type metadata for CaptionSectioner.CaptionID, &demangling cache variable for type metadata for _SetStorage<CaptionSectioner.CaptionID>);
}

#error "1C3400988: call analysis failed (funcsize=104)"

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v23;
    swift_bridgeObjectRelease();
    *(unsigned char *)a1 = a2;
    uint64_t result = 1;
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = a4;
    return result;
  }
  uint64_t v13 = ~v11;
  uint64_t v14 = *(void *)(v9 + 48);
  while (1)
  {
    uint64_t v15 = (unsigned __int8 *)(v14 + 24 * v12);
    if (*v15 != a2) {
      goto LABEL_16;
    }
    uint64_t v16 = *((void *)v15 + 2);
    if (v16) {
      break;
    }
    if (!a4) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (!a4) {
    goto LABEL_16;
  }
  BOOL v17 = *((void *)v15 + 1) == a3 && v16 == a4;
  if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_16;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(*v4 + 48) + 24 * v12;
  uint64_t v22 = *(void *)(v20 + 8);
  uint64_t v21 = *(void *)(v20 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v20;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = v21;
  swift_bridgeObjectRetain();
  return 0;
}

#error "1C340142C: call analysis failed (funcsize=104)"

#error "1C34015E0: call analysis failed (funcsize=104)"

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationInvitationPreference);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<TUConversationInvitationPreference>, &lazy cache variable for type metadata for TUConversationInvitationPreference, 0x1E4FADB68, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)(v8, v24);
    *uint64_t v3 = v24;
  }
  else
  {
    Swift::Int v10 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationInvitationPreference);
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = static NSObject.== infix(_:_:)();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v19 = *(void **)(*(void *)(*v3 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._finalize()();
  OUTLINED_FUNCTION_64_7();
  if ((v7 & 1) == 0)
  {
LABEL_6:
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_41_18();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v3, v12, v13, v14, v15, v16, v17);
    OUTLINED_FUNCTION_131_2(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
    uint64_t result = 1;
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(*(void *)(v6 + 48) + v3) != a2)
  {
    do
    {
      OUTLINED_FUNCTION_43_15();
      if ((v9 & 1) == 0) {
        goto LABEL_6;
      }
    }
    while (*(unsigned __int8 *)(v8 + v3) != a2);
  }
  uint64_t result = OUTLINED_FUNCTION_145_3();
  a2 = *(unsigned char *)(v11 + v3);
LABEL_7:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native, v14, v15, v16, v17, v18);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(char *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  Swift::Int v7 = specialized RawRepresentable<>._rawHashValue(seed:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v21 = a1;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
        break;
      }
      OUTLINED_FUNCTION_194_1();
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_11;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t result = OUTLINED_FUNCTION_145_3();
    char v18 = *(unsigned char *)(v20 + v9);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    char v18 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v22;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *uint64_t v21 = v18;
  return result;
}

#error "1C3401FB4: call analysis failed (funcsize=46)"

#error "1C34020FC: call analysis failed (funcsize=67)"

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native, v13, v14, v15, v16, v17);
    uint64_t *v2 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v8 = static _SetStorage.convert(_:capacity:)();
  uint64_t v22 = v8;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v8;
  }
  uint64_t v9 = OUTLINED_FUNCTION_89();
  type metadata accessor for NSObject(v9, a4);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v8 = v22;
    unint64_t v10 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v10)
    {
      a6(v10 + 1);
      uint64_t v8 = v22;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v12 = v8 + 56;
    uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v8 + 56 + 8 * (v14 >> 6))) == 0) {
      break;
    }
    unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v8 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(void *)(*(void *)(v8 + 48) + 8 * v16) = v21;
    ++*(void *)(v8 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v17 = 0;
  unint64_t v18 = (unint64_t)(63 - v13) >> 6;
  while (++v15 != v18 || (v17 & 1) == 0)
  {
    BOOL v19 = v15 == v18;
    if (v15 == v18) {
      unint64_t v15 = 0;
    }
    v17 |= v19;
    uint64_t v20 = *(void *)(v12 + 8 * v15);
    if (v20 != -1)
    {
      unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<CNComposeRecipient>, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient, 0x1E4F5A138, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for SGURL);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationInvitationPreference);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  void *v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  Swift::UInt v10 = a1;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 <= v11 || (a5 & 1) == 0)
  {
    if (a5)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v12 > v11)
      {
        specialized _NativeSet.copy()();
        goto LABEL_24;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v13 = *v5;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v10);
    if (a3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    swift_bridgeObjectRelease();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
    a4 = v14 & ~v15;
    uint64_t v16 = v13 + 56;
    if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
    {
      uint64_t v17 = ~v15;
      uint64_t v18 = *(void *)(v13 + 48);
      do
      {
        uint64_t v19 = (unsigned __int8 *)(v18 + 24 * a4);
        if (*v19 == v10)
        {
          uint64_t v20 = *((void *)v19 + 2);
          if (v20)
          {
            if (a3)
            {
              BOOL v21 = *((void *)v19 + 1) == a2 && v20 == a3;
              if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_27;
              }
            }
          }
          else if (!a3)
          {
            goto LABEL_27;
          }
        }
        a4 = (a4 + 1) & v17;
      }
      while (((*(void *)(v16 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
    }
  }
LABEL_24:
  uint64_t v22 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v23 = *(void *)(v22 + 48) + 24 * a4;
  *(unsigned char *)uint64_t v23 = v10;
  *(void *)(v23 + 8) = a2;
  *(void *)(v23 + 16) = a3;
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
LABEL_27:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v22 + 16) = v26;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = a2;
  Swift::UInt v10 = a1;
  unint64_t v11 = *(void *)(*v8 + 16);
  unint64_t v12 = *(void *)(*v8 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11 + 1, a2, a3, a4, a5, a6, a7, a8, v22);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v8;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v10);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  unint64_t v9 = v14 & ~v15;
  if ((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v16 = *(void *)(v13 + 48);
    if (*(unsigned __int8 *)(v16 + v9) == v10)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v15;
      while (1)
      {
        unint64_t v9 = (v9 + 1) & v17;
        if (((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v16 + v9) == v10) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v18 = *v8;
  *(void *)(*v8 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(unsigned char *)(*(void *)(v18 + 48) + v9) = v10;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = a2;
  unint64_t v11 = *(void *)(*v8 + 16);
  unint64_t v12 = *(void *)(*v8 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11 + 1, a2, a3, a4, a5, a6, a7, a8, v22, v23, v24, v25);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v8;
  uint64_t v14 = static Hasher._hash(seed:_:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  unint64_t v9 = v14 & ~v15;
  if ((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v16 = *(void *)(v13 + 48);
    if (*(void *)(v16 + 8 * v9) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v15;
      while (1)
      {
        unint64_t v9 = (v9 + 1) & v17;
        if (((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          break;
        }
        if (*(void *)(v16 + 8 * v9) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v18 = *v8;
  *(void *)(*v8 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(void *)(*(void *)(v18 + 48) + 8 * v9) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

{
  uint64_t *v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  unint64_t v9 = a2;
  unint64_t v11 = *(void *)(*v8 + 16);
  unint64_t v12 = *(void *)(*v8 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11 + 1, a2, a3, a4, a5, a6, a7, a8, v22, v23, v24, v25);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v8;
  uint64_t v14 = static Hasher._hash(seed:_:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  unint64_t v9 = v14 & ~v15;
  if ((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v16 = *(void *)(v13 + 48);
    if (*(void *)(v16 + 8 * v9) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v15;
      while (1)
      {
        unint64_t v9 = (v9 + 1) & v17;
        if (((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          break;
        }
        if (*(void *)(v16 + 8 * v9) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v18 = *v8;
  *(void *)(*v8 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(void *)(*(void *)(v18 + 48) + 8 * v9) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(char a1, unint64_t a2, char a3)
{
  unint64_t v5 = *(void *)(*v3 + 16);
  unint64_t v6 = *(void *)(*v3 + 24);
  if (v6 > v5 && (a3 & 1) != 0) {
    goto LABEL_16;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v6 > v5)
    {
      specialized _NativeSet.copy()();
      goto LABEL_16;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v7 = *v3;
  Swift::Int v8 = specialized RawRepresentable<>._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  a2 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    do
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
        goto LABEL_19;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_20;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v7 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_16:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return;
  }
  __break(1u);
LABEL_19:
  swift_bridgeObjectRelease_n();
LABEL_20:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void specialized _NativeSet.insertNew(_:at:isUnique:)()
{
  OUTLINED_FUNCTION_186_1();
  unint64_t v6 = *(void *)(*v1 + 16);
  unint64_t v7 = *(void *)(*v1 + 24);
  if (v7 > v6 && (v3 & 1) != 0) {
    goto LABEL_14;
  }
  unint64_t v8 = v6 + 1;
  if (v3)
  {
    v4(v8);
  }
  else
  {
    if (v7 > v6)
    {
      v5(v8);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  Hasher._finalize()();
  OUTLINED_FUNCTION_64_7();
  if (v9)
  {
    OUTLINED_FUNCTION_176_2();
    if (v10)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        OUTLINED_FUNCTION_43_15();
        if ((v11 & 1) == 0) {
          break;
        }
        OUTLINED_FUNCTION_176_2();
        if (v10) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v1;
  *(void *)(*v1 + 8 * (v2 >> 6) + 56) |= 1 << v2;
  *(void *)(*(void *)(v12 + 48) + 8 * v2) = v0;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = a2;
  unint64_t v11 = *(void *)(*v8 + 16);
  unint64_t v12 = *(void *)(*v8 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11 + 1, a2, a3, a4, a5, a6, a7, a8, v22);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v8;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  unint64_t v9 = v14 & ~v15;
  if ((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v16 = *(void *)(v13 + 48);
    if (*(void *)(v16 + 8 * v9) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v15;
      while (1)
      {
        unint64_t v9 = (v9 + 1) & v17;
        if (((*(void *)(v13 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          break;
        }
        if (*(void *)(v16 + 8 * v9) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v18 = *v8;
  *(void *)(*v8 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(void *)(*(void *)(v18 + 48) + 8 * v9) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

void specialized _NativeSet.copyAndResize(capacity:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v3 = OUTLINED_FUNCTION_65_8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    OUTLINED_FUNCTION_28();
    return;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 56);
  uint64_t v29 = v0;
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & v6;
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  swift_retain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  for (v8 &= v8 - 1; ; uint64_t v8 = v14 & v13)
  {
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v32 = &v29;
    uint64_t v16 = *(void *)(v15 - 8);
    MEMORY[0x1F4188790](v15);
    uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v19 = v2;
    uint64_t v21 = *(void *)(v20 + 72);
    OUTLINED_FUNCTION_2_1();
    v22();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
    unint64_t v23 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v4 + 32));
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_36_15();
      while (1)
      {
        OUTLINED_FUNCTION_111();
        if (v28)
        {
          if (v25) {
            break;
          }
        }
        if (v26 == v27) {
          uint64_t v26 = 0;
        }
        if (*(void *)(v9 + 8 * v26) != -1)
        {
          OUTLINED_FUNCTION_37_1();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_38_0();
LABEL_31:
    *(void *)(v9 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v4 + 48) + v24 * v21, v18, v15);
    OUTLINED_FUNCTION_95();
    uint64_t v2 = v19;
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_37;
    }
    if (v11 >= v31) {
      goto LABEL_33;
    }
    ++v10;
    if (!*(void *)(v30 + 8 * v11))
    {
      int64_t v10 = v11 + 1;
      if (v11 + 1 >= v31) {
        goto LABEL_33;
      }
      if (!*(void *)(v30 + 8 * v10))
      {
        int64_t v10 = v11 + 2;
        if (v11 + 2 >= v31) {
          goto LABEL_33;
        }
        if (!*(void *)(v30 + 8 * v10)) {
          break;
        }
      }
    }
LABEL_20:
    OUTLINED_FUNCTION_25_12();
  }
  int64_t v12 = v11 + 3;
  if (v12 >= v31)
  {
LABEL_33:
    OUTLINED_FUNCTION_120_3();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  if (*(void *)(v30 + 8 * v12))
  {
    int64_t v10 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_33;
    }
    ++v12;
    if (*(void *)(v30 + 8 * v10)) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_31();
  uint64_t v38 = v1;
  uint64_t v41 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v6 = OUTLINED_FUNCTION_89();
  v7(v6);
  OUTLINED_FUNCTION_5_3();
  uint64_t v39 = v9;
  uint64_t v40 = v8;
  MEMORY[0x1F4188790](v8);
  int64_t v11 = (char *)&v35 - v10;
  int64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(v4);
  OUTLINED_FUNCTION_362();
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16))
  {
    swift_release();
LABEL_35:
    *uint64_t v5 = v14;
    OUTLINED_FUNCTION_28();
    return;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 56);
  int64_t v35 = v0;
  uint64_t v36 = v12 + 56;
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = v17 & v16;
  uint64_t v37 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 56;
  swift_retain();
  uint64_t v20 = 0;
  if (!v18) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (uint64_t i = v21 | (v20 << 6); ; uint64_t i = v27 + (v20 << 6))
  {
    char v28 = *(void *)(v39 + 72);
    _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(*(void *)(v12 + 48) + v28 * i, (uint64_t)v11);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BAF0]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v29 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v14 + 32));
    if (((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_36_15();
      while (1)
      {
        OUTLINED_FUNCTION_111();
        if (v34)
        {
          if (v31) {
            break;
          }
        }
        if (v32 == v33) {
          uint64_t v32 = 0;
        }
        if (*(void *)(v19 + 8 * v32) != -1)
        {
          OUTLINED_FUNCTION_37_1();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_38_0();
LABEL_31:
    *(void *)(v19 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0((uint64_t)v11, *(void *)(v14 + 48) + v30 * v28);
    OUTLINED_FUNCTION_95();
    if (v18) {
      goto LABEL_6;
    }
LABEL_7:
    unint64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_37;
    }
    if (v23 >= v37) {
      goto LABEL_33;
    }
    ++v20;
    if (!*(void *)(v36 + 8 * v23))
    {
      uint64_t v20 = v23 + 1;
      if (v23 + 1 >= v37) {
        goto LABEL_33;
      }
      if (!*(void *)(v36 + 8 * v20))
      {
        uint64_t v20 = v23 + 2;
        if (v23 + 2 >= v37) {
          goto LABEL_33;
        }
        if (!*(void *)(v36 + 8 * v20)) {
          break;
        }
      }
    }
LABEL_20:
    OUTLINED_FUNCTION_25_12();
    uint64_t v18 = v26 & v25;
  }
  unint64_t v24 = v23 + 3;
  if (v24 >= v37)
  {
LABEL_33:
    swift_release_n();
    uint64_t v5 = v35;
    goto LABEL_35;
  }
  if (*(void *)(v36 + 8 * v24))
  {
    uint64_t v20 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v20 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v20 >= v37) {
      goto LABEL_33;
    }
    ++v24;
    if (*(void *)(v36 + 8 * v20)) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RecentsCallHandle>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    swift_release();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v19 = v1;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  uint64_t v9 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  int64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (uint64_t i = v10 | (v9 << 6); ; uint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = *(void *)(v2 + 48) + 24 * i;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
    uint64_t v18 = *(unsigned char *)v15;
    swift_bridgeObjectRetain();
    specialized _NativeSet._unsafeInsertNew(_:)(v18, v16, v17, v3);
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v8) {
      goto LABEL_22;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      uint64_t v9 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_22;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v9);
      if (!v13)
      {
        uint64_t v9 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_22;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    uint64_t v7 = (v13 - 1) & v13;
  }
  uint64_t v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_22:
    swift_release();
    uint64_t v1 = v19;
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_22;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  id v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_99_4(v2, v3);
  uint64_t v4 = OUTLINED_FUNCTION_65_8();
  uint64_t v5 = v4;
  if (!*(void *)(v1 + 16))
  {
    swift_release();
LABEL_35:
    *Swift::UInt v0 = v5;
    OUTLINED_FUNCTION_22();
    return;
  }
  uint64_t v29 = v0;
  uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v7 = v1 + 56;
  if (v6 < 64) {
    uint64_t v8 = ~(-1 << v6);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v1 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  int64_t v11 = v4 + 56;
  swift_retain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (uint64_t i = v13 | (v12 << 6); ; uint64_t i = v19 + (v12 << 6))
  {
    uint64_t v20 = *(void *)(v5 + 40);
    uint64_t v21 = *(id *)(*(void *)(v1 + 48) + 8 * i);
    NSObject._rawHashValue(seed:)(v20);
    OUTLINED_FUNCTION_96_5();
    if (v22)
    {
      OUTLINED_FUNCTION_36_15();
      while (1)
      {
        OUTLINED_FUNCTION_111();
        if (v22)
        {
          if (v24) {
            break;
          }
        }
        if (v25 == v26) {
          char v25 = 0;
        }
        if (*(void *)(v11 + 8 * v25) != -1)
        {
          OUTLINED_FUNCTION_37_1();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_38_0();
LABEL_31:
    OUTLINED_FUNCTION_78_4(v23);
    *(void *)(v28 + 8 * v27) = v21;
    OUTLINED_FUNCTION_95();
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    ++v12;
    if (!*(void *)(v7 + 8 * v15))
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      if (!*(void *)(v7 + 8 * v12))
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        if (!*(void *)(v7 + 8 * v12)) {
          break;
        }
      }
    }
LABEL_20:
    OUTLINED_FUNCTION_25_12();
    uint64_t v9 = v18 & v17;
  }
  uint64_t v16 = v15 + 3;
  if (v16 >= v10)
  {
LABEL_33:
    OUTLINED_FUNCTION_120_3();
    Swift::UInt v0 = v29;
    goto LABEL_35;
  }
  if (*(void *)(v7 + 8 * v16))
  {
    int64_t v12 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_33;
    }
    ++v16;
    if (*(void *)(v7 + 8 * v12)) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t i;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  OUTLINED_FUNCTION_175();
  OUTLINED_FUNCTION_99_4(v2, v3);
  uint64_t v4 = OUTLINED_FUNCTION_65_8();
  uint64_t v5 = v4;
  if (!*(void *)(v1 + 16))
  {
    swift_release();
LABEL_35:
    *Swift::UInt v0 = v5;
    OUTLINED_FUNCTION_183();
    return;
  }
  uint64_t v26 = v0;
  uint64_t v6 = 0;
  uint64_t v7 = v1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  int64_t v10 = v9 & *(void *)(v1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v4 + 56;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  OUTLINED_FUNCTION_307();
  for (uint64_t i = v13 | (v6 << 6); ; uint64_t i = v17 + (v6 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(v1 + 48) + 8 * i);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    Hasher._finalize()();
    OUTLINED_FUNCTION_96_5();
    if (v19)
    {
      OUTLINED_FUNCTION_36_15();
      while (1)
      {
        OUTLINED_FUNCTION_111();
        if (v19)
        {
          if (v21) {
            break;
          }
        }
        if (v22 == v23) {
          uint64_t v22 = 0;
        }
        if (*(void *)(v12 + 8 * v22) != -1)
        {
          OUTLINED_FUNCTION_37_1();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_38_0();
LABEL_31:
    OUTLINED_FUNCTION_78_4(v20);
    *(void *)(v25 + 8 * v24) = v18;
    OUTLINED_FUNCTION_95();
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_37;
    }
    if (v15 >= v11) {
      goto LABEL_33;
    }
    ++v6;
    if (!*(void *)(v7 + 8 * v15))
    {
      uint64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_33;
      }
      if (!*(void *)(v7 + 8 * v6))
      {
        uint64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          goto LABEL_33;
        }
        if (!*(void *)(v7 + 8 * v6)) {
          break;
        }
      }
    }
LABEL_20:
    OUTLINED_FUNCTION_320();
  }
  uint64_t v16 = v15 + 3;
  if (v16 >= v11)
  {
LABEL_33:
    swift_release();
    Swift::UInt v0 = v26;
    goto LABEL_35;
  }
  if (*(void *)(v7 + 8 * v16))
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_33;
    }
    ++v16;
    if (*(void *)(v7 + 8 * v6)) {
      goto LABEL_20;
    }
  }
LABEL_38:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError;
  if (!lazy protocol witness table cache variable for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError;
  if (!lazy protocol witness table cache variable for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsCallItem.VideoMessageError and conformance RecentsCallItem.VideoMessageError);
  }
  return result;
}

uint64_t sub_1C34065F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v6 = (*(void *)(v5 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v6)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RecentsCallItem.saveVideoMessage(_:)()
{
  uint64_t v3 = *(void *)(OUTLINED_FUNCTION_212_1() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = (void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  int64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *int64_t v12 = v2;
  v12[1] = partial apply for closure #1 in AsyncCancellableTimer.wait(with:);
  return closure #1 in RecentsCallItem.saveVideoMessage(_:)(v0, v5, v6, v7, v8, v10, v11);
}

uint64_t outlined bridged method (pb) of @objc TUConversationLink.linkName.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_linkName);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc IMAccount.aliases.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_aliases);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    a2 = v22;
    uint64_t v4 = v23;
    uint64_t v5 = v24;
    int64_t v6 = v25;
    unint64_t v7 = v26;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v4 = a2 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    int64_t v6 = 0;
  }
  Swift::UInt v11 = 0;
  int64_t v12 = (unint64_t)(v5 + 64) >> 6;
  if (a2 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v13 = (v7 - 1) & v7;
      unint64_t v14 = __clz(__rbit64(v7)) | (v6 << 6);
      int64_t v15 = v6;
      goto LABEL_23;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v15);
    if (!v17)
    {
      int64_t v15 = v6 + 2;
      if (v6 + 2 >= v12) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v4 + 8 * v15);
      if (!v17)
      {
        int64_t v18 = v6 + 3;
        while (v18 < v12)
        {
          unint64_t v17 = *(void *)(v4 + 8 * v18++);
          if (v17)
          {
            int64_t v15 = v18 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
        Hasher._combine(_:)(v11);
        return;
      }
    }
LABEL_22:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
LABEL_23:
    uint64_t v16 = *(void **)(*(void *)(a2 + 48) + 8 * v14);
    uint64_t v21 = v16;
    id v19 = v16;
    if (!v16) {
      goto LABEL_26;
    }
    while (1)
    {
      Swift::Int v20 = NSObject._rawHashValue(seed:)(v3);

      v11 ^= v20;
      int64_t v6 = v15;
      unint64_t v7 = v13;
      if ((a2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_26;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      swift_dynamicCast();
      uint64_t v16 = v21;
      if (!v21) {
        goto LABEL_26;
      }
      int64_t v15 = v6;
      uint64_t v13 = v7;
    }
  }
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  unsigned __int8 *v15;
  Swift::UInt v16;
  uint64_t v17;
  Swift::Int v18;

  Hasher._finalize()();
  Swift::Int v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  int64_t v6 = v5 & *(void *)(a2 + 56);
  unint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (uint64_t i = v10 | (v9 << 6); ; uint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    int64_t v15 = (unsigned __int8 *)(*(void *)(a2 + 48) + 24 * i);
    uint64_t v16 = *v15;
    unint64_t v17 = *((void *)v15 + 2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    if (v17)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRelease();
    }
    int64_t v18 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v18;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v9++, 1)) {
      goto LABEL_22;
    }
    if (v9 >= v7)
    {
LABEL_20:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    uint64_t v13 = *(void *)(v3 + 8 * v9);
    if (!v13) {
      break;
    }
LABEL_14:
    int64_t v6 = (v13 - 1) & v13;
  }
  unint64_t v14 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    ++v9;
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_20;
    }
    uint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
}

void specialized Set.hash(into:)()
{
  OUTLINED_FUNCTION_143_0();
  Hasher._finalize()();
  Swift::UInt v1 = 0;
  int64_t v2 = 0;
  uint64_t v3 = v0 + 56;
  OUTLINED_FUNCTION_17_19();
  unint64_t v6 = v5 & v4;
  int64_t v8 = (unint64_t)(v7 + 63) >> 6;
  if ((v5 & v4) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v2 << 6); ; unint64_t i = v13 + (v2 << 6))
  {
    Swift::UInt v14 = *(unsigned __int8 *)(*(void *)(v0 + 48) + i);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v14);
    v1 ^= Hasher._finalize()();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    if (__OFADD__(v2++, 1)) {
      goto LABEL_17;
    }
    if (v2 >= v8)
    {
LABEL_15:
      Hasher._combine(_:)(v1);
      return;
    }
    if (!*(void *)(v3 + 8 * v2)) {
      break;
    }
LABEL_12:
    OUTLINED_FUNCTION_196_2();
  }
  int64_t v12 = v2 + 1;
  if (v2 + 1 >= v8) {
    goto LABEL_15;
  }
  if (*(void *)(v3 + 8 * v12))
  {
    ++v2;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v8) {
      goto LABEL_15;
    }
    ++v12;
    if (*(void *)(v3 + 8 * v2)) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

uint64_t outlined assign with take of RecentsCallItemType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentsCallItemType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized Set.endIndex.getter(uint64_t a1)
{
  return 1 << *(unsigned char *)(a1 + 32);
}

{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.endIndex.getter();
  }
  else {
    return 1 << *(unsigned char *)(a1 + 32);
  }
}

uint64_t lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RecentsCallHandleType and conformance RecentsCallHandleType()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentsCallHandleType and conformance RecentsCallHandleType;
  if (!lazy protocol witness table cache variable for type RecentsCallHandleType and conformance RecentsCallHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsCallHandleType and conformance RecentsCallHandleType);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in RecentCallRecentItemMetadata()
{
  return lazy protocol witness table accessor for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata(&lazy protocol witness table cache variable for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata, (void (*)(uint64_t))type metadata accessor for RecentCallRecentItemMetadata);
}

uint64_t base witness table accessor for Equatable in RecentOngoingConversationMetadata()
{
  return lazy protocol witness table accessor for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata(&lazy protocol witness table cache variable for type RecentOngoingConversationMetadata and conformance RecentOngoingConversationMetadata, (void (*)(uint64_t))type metadata accessor for RecentOngoingConversationMetadata);
}

uint64_t lazy protocol witness table accessor for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in RecentsCallItemType()
{
  return lazy protocol witness table accessor for type RecentCallRecentItemMetadata and conformance RecentCallRecentItemMetadata(&lazy protocol witness table cache variable for type RecentsCallItemType and conformance RecentsCallItemType, (void (*)(uint64_t))type metadata accessor for RecentsCallItemType);
}

void sub_1C3407144()
{
}

unsigned char *storeEnumTagSinglePayload for RecentsCallHandleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3407238);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RecentCallRecentItemMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    unint64_t v17 = (char *)v4 + v15;
    int64_t v18 = (char *)a2 + v15;
    *(void *)unint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v20 = a3[10];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for UUID();
    id v24 = v16;
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
    }
    uint64_t v26 = a3[11];
    uint64_t v27 = (uint64_t *)((char *)v4 + v26);
    char v28 = (char *)a2 + v26;
    uint64_t v29 = *(void **)v28;
    if (*(void *)v28)
    {
      uint64_t v30 = *((void *)v28 + 1);
      uint64_t v31 = *((void *)v28 + 2);
      *uint64_t v27 = v29;
      v27[1] = v30;
      v27[2] = v31;
      id v32 = v29;
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[2] = *((void *)v28 + 2);
    }
    uint64_t v33 = a3[12];
    uint64_t v34 = (char *)v4 + v33;
    int64_t v35 = (char *)a2 + v33;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v33, 1, v23))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v34, v35, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v23);
    }
    uint64_t v37 = a3[13];
    uint64_t v38 = *(void **)((char *)a2 + v37);
    *(uint64_t *)((char *)v4 + v37) = (uint64_t)v38;
    id v39 = v38;
  }
  return v4;
}

void *assignWithCopy for RecentCallRecentItemMetadata(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = *(void **)((char *)a1 + v14);
  uint64_t v16 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v16;
  id v17 = v16;

  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  uint64_t v22 = a3[10];
  uint64_t v23 = (char *)a1 + v22;
  id v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UUID();
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v25);
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v28 = *(void *)(v25 - 8);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v25);
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v23, v24, v25);
LABEL_13:
  uint64_t v30 = a3[11];
  uint64_t v31 = (void *)((char *)a1 + v30);
  id v32 = (char *)a2 + v30;
  uint64_t v33 = *(void **)((char *)a1 + v30);
  uint64_t v34 = *(void **)((char *)a2 + v30);
  if (v33)
  {
    if (v34)
    {
      *uint64_t v31 = v34;
      id v35 = v34;

      v31[1] = *((void *)v32 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v31[2] = *((void *)v32 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of ConversationLink((uint64_t)v31);
      uint64_t v37 = *((void *)v32 + 2);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[2] = v37;
    }
  }
  else if (v34)
  {
    *uint64_t v31 = v34;
    v31[1] = *((void *)v32 + 1);
    v31[2] = *((void *)v32 + 2);
    id v36 = v34;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v38 = *(_OWORD *)v32;
    v31[2] = *((void *)v32 + 2);
    *(_OWORD *)uint64_t v31 = v38;
  }
  uint64_t v39 = a3[12];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  int v42 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v39, 1, v25);
  int v43 = __swift_getEnumTagSinglePayload((uint64_t)v41, 1, v25);
  if (!v42)
  {
    uint64_t v44 = *(void *)(v25 - 8);
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 24))(v40, v41, v25);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v25);
    goto LABEL_27;
  }
  if (v43)
  {
LABEL_27:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v40, v41, v25);
  __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v25);
LABEL_28:
  uint64_t v46 = a3[13];
  uint64_t v47 = *(void **)((char *)a1 + v46);
  os_log_type_t v48 = *(void **)((char *)a2 + v46);
  *(void *)((char *)a1 + v46) = v48;
  id v49 = v48;

  return a1;
}

uint64_t outlined destroy of ConversationLink(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for RecentCallRecentItemMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  unsigned char v12[8] = v13[8];
  uint64_t v14 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[10];
  uint64_t v16 = (char *)a1 + v15;
  id v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  uint64_t v20 = a3[11];
  uint64_t v21 = a3[12];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *((void *)v22 + 2) = *((void *)v23 + 2);
  id v24 = (char *)a1 + v21;
  uint64_t v25 = (char *)a2 + v21;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v21, 1, v18))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v24, v25, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v18);
  }
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  return a1;
}

void *assignWithTake for RecentCallRecentItemMetadata(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);

  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID();
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v24);
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v27 = *(void *)(v24 - 8);
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v24);
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v22, v23, v24);
LABEL_13:
  uint64_t v29 = a3[11];
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  id v32 = *(void **)((char *)a1 + v29);
  if (v32)
  {
    if (*v31)
    {
      *uint64_t v30 = *v31;

      v30[1] = v31[1];
      swift_bridgeObjectRelease();
      v30[2] = v31[2];
      swift_release();
      goto LABEL_18;
    }
    outlined destroy of ConversationLink((uint64_t)v30);
  }
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  v30[2] = v31[2];
LABEL_18:
  uint64_t v33 = a3[12];
  uint64_t v34 = (char *)a1 + v33;
  id v35 = (char *)a2 + v33;
  int v36 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v33, 1, v24);
  int v37 = __swift_getEnumTagSinglePayload((uint64_t)v35, 1, v24);
  if (!v36)
  {
    uint64_t v38 = *(void *)(v24 - 8);
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v34, v35, v24);
      goto LABEL_24;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v24);
    goto LABEL_23;
  }
  if (v37)
  {
LABEL_23:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v34, v35, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v24);
LABEL_24:
  uint64_t v40 = a3[13];
  uint64_t v41 = *(void **)((char *)a1 + v40);
  *(void *)((char *)a1 + v40) = *(void *)((char *)a2 + v40);

  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallRecentItemMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C34081C8);
}

uint64_t sub_1C34081C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_46_0(*(void *)(a1 + 8));
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_10_0();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(int *)(a3 + 20);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v10 = *(int *)(a3 + 40);
  }
  return __swift_getEnumTagSinglePayload(a1 + v10, a2, v9);
}

uint64_t storeEnumTagSinglePayload for RecentCallRecentItemMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3408288);
}

uint64_t sub_1C3408288(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_10_0();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v11 = *(int *)(a4 + 40);
    }
    return __swift_storeEnumTagSinglePayload(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RecentOngoingConversationMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    int v12 = (char *)a2 + v10;
    uint64_t v13 = *(void **)((char *)a2 + v10);
    swift_bridgeObjectRetain();
    id v14 = v9;
    if (!v13)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((void *)v11 + 2) = *((void *)v12 + 2);
      return a1;
    }
    uint64_t v15 = *((void *)v12 + 1);
    uint64_t v16 = *((void *)v12 + 2);
    *(void *)uint64_t v11 = v13;
    *((void *)v11 + 1) = v15;
    *((void *)v11 + 2) = v16;
    id v17 = v13;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return a1;
}

void destroy for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();

  int v5 = (id *)(a1 + *(int *)(a2 + 28));
  if (*v5)
  {

    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t initializeWithCopy for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = a2 + v9;
  int v12 = *(void **)v11;
  swift_bridgeObjectRetain();
  id v13 = v8;
  if (v12)
  {
    uint64_t v14 = *(void *)(v11 + 8);
    uint64_t v15 = *(void *)(v11 + 16);
    *uint64_t v10 = v12;
    v10[1] = v14;
    v10[2] = v15;
    id v16 = v12;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    v10[2] = *(void *)(v11 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[7];
  int v12 = (void *)(a1 + v11);
  id v13 = (long long *)(a2 + v11);
  uint64_t v14 = *(void **)(a1 + v11);
  uint64_t v15 = *(void **)v13;
  if (v14)
  {
    if (v15)
    {
      *int v12 = v15;
      id v16 = v15;

      v12[1] = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[2] = *((void *)v13 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of ConversationLink((uint64_t)v12);
      uint64_t v18 = *((void *)v13 + 2);
      *(_OWORD *)int v12 = *v13;
      v12[2] = v18;
    }
  }
  else if (v15)
  {
    *int v12 = v15;
    v12[1] = *((void *)v13 + 1);
    v12[2] = *((void *)v13 + 2);
    id v17 = v15;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v19 = *v13;
    v12[2] = *((void *)v13 + 2);
    *(_OWORD *)int v12 = v19;
  }
  return a1;
}

uint64_t initializeWithTake for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  return a1;
}

uint64_t assignWithTake for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  int v12 = *(void **)(a1 + v9);
  if (!v12) {
    goto LABEL_5;
  }
  if (!*(void *)v11)
  {
    outlined destroy of ConversationLink(v10);
LABEL_5:
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    return a1;
  }
  *(void *)uint64_t v10 = *(void *)v11;

  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_bridgeObjectRelease();
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C34088F8);
}

uint64_t sub_1C34088F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_212_1();
  OUTLINED_FUNCTION_10_0();
  if (*(_DWORD *)(v6 + 84) != a2) {
    return OUTLINED_FUNCTION_46_0(*(void *)(v3 + *(int *)(a3 + 20)));
  }
  uint64_t v7 = OUTLINED_FUNCTION_157();
  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3408984);
}

void sub_1C3408984(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_89();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_10_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(v4, a2, a2, v8);
  }
  else
  {
    *(void *)(v4 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

char *initializeBufferWithCopyOfBuffer for RecentsCallItemType(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v13 = *a2;
    *(void *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        uint64_t v15 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
        *(void *)&a1[v15[5]] = *(char **)((char *)a2 + v15[5]);
        uint64_t v16 = v15[6];
        id v17 = *(char **)((char *)a2 + v16);
        *(void *)&a1[v16] = v17;
        uint64_t v18 = v15[7];
        long long v19 = &a1[v18];
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = *(char **)((char *)a2 + v18);
        swift_bridgeObjectRetain();
        id v22 = v17;
        if (v21)
        {
          uint64_t v23 = *((void *)v20 + 1);
          uint64_t v24 = *((void *)v20 + 2);
          *(void *)long long v19 = v21;
          *((void *)v19 + 1) = v23;
          *((void *)v19 + 2) = v24;
          id v25 = v21;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)long long v19 = *(_OWORD *)v20;
          *((void *)v19 + 2) = *((void *)v20 + 2);
        }
        goto LABEL_43;
      case 2u:
        int v26 = *a2;
        uint64_t v27 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v27;
        *((void *)a1 + 2) = a2[2];
        uint64_t v28 = v26;
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_43;
      case 3u:
        uint64_t v29 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v29;
        uint64_t v7 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v30 = v7[5];
        uint64_t v31 = &a1[v30];
        id v32 = (char *)a2 + v30;
        uint64_t v33 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
          __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v33);
        }
        uint64_t v52 = v7[6];
        uint64_t v53 = *(char **)((char *)a2 + v52);
        *(void *)&a1[v52] = v53;
        uint64_t v54 = v7[7];
        uint64_t v55 = &a1[v54];
        uint64_t v56 = (char *)a2 + v54;
        *(void *)uint64_t v55 = *(void *)v56;
        v55[8] = v56[8];
        *(void *)&a1[v7[8]] = *(char **)((char *)a2 + v7[8]);
        *(void *)&a1[v7[9]] = *(char **)((char *)a2 + v7[9]);
        uint64_t v57 = v7[10];
        uint64_t v58 = &a1[v57];
        uint64_t v59 = (char *)a2 + v57;
        uint64_t v49 = type metadata accessor for UUID();
        id v60 = v53;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v49))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v58, v59, v49);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v49);
        }
        uint64_t v79 = v7[11];
        uint64_t v80 = &a1[v79];
        uint64_t v81 = (char *)a2 + v79;
        uint64_t v82 = *(void **)v81;
        if (*(void *)v81)
        {
          uint64_t v83 = *((void *)v81 + 1);
          uint64_t v84 = *((void *)v81 + 2);
          *(void *)uint64_t v80 = v82;
          *((void *)v80 + 1) = v83;
          *((void *)v80 + 2) = v84;
          id v85 = v82;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
          *((void *)v80 + 2) = *((void *)v81 + 2);
        }
        uint64_t v96 = v7[12];
        unint64_t v94 = &a1[v96];
        unint64_t v95 = (char *)a2 + v96;
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2 + v96, 1, v49)) {
          goto LABEL_41;
        }
        goto LABEL_40;
      case 4u:
        id v35 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v35;
        uint64_t v7 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v36 = v7[5];
        int v37 = &a1[v36];
        uint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
          __swift_storeEnumTagSinglePayload((uint64_t)v37, 0, 1, v39);
        }
        uint64_t v62 = v7[6];
        uint64_t v63 = *(char **)((char *)a2 + v62);
        *(void *)&a1[v62] = v63;
        uint64_t v64 = v7[7];
        uint64_t v65 = &a1[v64];
        uint64_t v66 = (char *)a2 + v64;
        *(void *)uint64_t v65 = *(void *)v66;
        v65[8] = v66[8];
        *(void *)&a1[v7[8]] = *(char **)((char *)a2 + v7[8]);
        *(void *)&a1[v7[9]] = *(char **)((char *)a2 + v7[9]);
        uint64_t v67 = v7[10];
        uint64_t v68 = &a1[v67];
        unsigned __int8 v69 = (char *)a2 + v67;
        uint64_t v49 = type metadata accessor for UUID();
        id v70 = v63;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v69, 1, v49))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v68, v69, v49);
          __swift_storeEnumTagSinglePayload((uint64_t)v68, 0, 1, v49);
        }
        uint64_t v86 = v7[11];
        uint64_t v87 = &a1[v86];
        uint64_t v88 = (char *)a2 + v86;
        os_log_type_t v89 = *(void **)v88;
        if (*(void *)v88)
        {
          uint64_t v90 = *((void *)v88 + 1);
          uint64_t v91 = *((void *)v88 + 2);
          *(void *)uint64_t v87 = v89;
          *((void *)v87 + 1) = v90;
          *((void *)v87 + 2) = v91;
          id v92 = v89;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
          *((void *)v87 + 2) = *((void *)v88 + 2);
        }
        uint64_t v97 = v7[12];
        unint64_t v94 = &a1[v97];
        unint64_t v95 = (char *)a2 + v97;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v97, 1, v49)) {
          goto LABEL_40;
        }
        goto LABEL_41;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v6;
        uint64_t v7 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = &a1[v8];
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
          __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
        }
        uint64_t v41 = v7[6];
        int v42 = *(char **)((char *)a2 + v41);
        *(void *)&a1[v41] = v42;
        uint64_t v43 = v7[7];
        uint64_t v44 = &a1[v43];
        uint64_t v45 = (char *)a2 + v43;
        *(void *)uint64_t v44 = *(void *)v45;
        v44[8] = v45[8];
        *(void *)&a1[v7[8]] = *(char **)((char *)a2 + v7[8]);
        *(void *)&a1[v7[9]] = *(char **)((char *)a2 + v7[9]);
        uint64_t v46 = v7[10];
        uint64_t v47 = &a1[v46];
        os_log_type_t v48 = (char *)a2 + v46;
        uint64_t v49 = type metadata accessor for UUID();
        id v50 = v42;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
          __swift_storeEnumTagSinglePayload((uint64_t)v47, 0, 1, v49);
        }
        uint64_t v72 = v7[11];
        uint64_t v73 = &a1[v72];
        uint64_t v74 = (char *)a2 + v72;
        uint64_t v75 = *(void **)v74;
        if (*(void *)v74)
        {
          uint64_t v76 = *((void *)v74 + 1);
          uint64_t v77 = *((void *)v74 + 2);
          *(void *)uint64_t v73 = v75;
          *((void *)v73 + 1) = v76;
          *((void *)v73 + 2) = v77;
          id v78 = v75;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
          *((void *)v73 + 2) = *((void *)v74 + 2);
        }
        uint64_t v93 = v7[12];
        unint64_t v94 = &a1[v93];
        unint64_t v95 = (char *)a2 + v93;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v93, 1, v49))
        {
LABEL_40:
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
        }
        else
        {
LABEL_41:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v94, v95, v49);
          __swift_storeEnumTagSinglePayload((uint64_t)v94, 0, 1, v49);
        }
        uint64_t v99 = v7[13];
        uint64_t v100 = *(char **)((char *)a2 + v99);
        *(void *)&a1[v99] = v100;
        id v101 = v100;
LABEL_43:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

void **assignWithCopy for RecentsCallItemType(void **a1, void **a2)
{
  if (a1 != a2)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)a1, (void (*)(void))type metadata accessor for RecentsCallItemType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
        *(void **)((char *)a1 + v11[5]) = *(void **)((char *)a2 + v11[5]);
        uint64_t v12 = v11[6];
        id v13 = *(void **)((char *)a2 + v12);
        *(void **)((char *)a1 + v12) = v13;
        uint64_t v14 = v11[7];
        uint64_t v15 = (void **)((char *)a1 + v14);
        uint64_t v16 = (char *)a2 + v14;
        id v17 = *(void **)((char *)a2 + v14);
        swift_bridgeObjectRetain();
        id v18 = v13;
        if (v17)
        {
          *uint64_t v15 = v17;
          v15[1] = *((void *)v16 + 1);
          _OWORD v15[2] = *((void *)v16 + 2);
          id v19 = v17;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v93 = *(_OWORD *)v16;
          _OWORD v15[2] = *((void *)v16 + 2);
          *(_OWORD *)uint64_t v15 = v93;
        }
        goto LABEL_42;
      case 2u:
        uint64_t v20 = *a2;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        id v21 = v20;
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_42;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v22 = v4[5];
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
          __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
        }
        uint64_t v44 = v4[6];
        uint64_t v45 = *(void **)((char *)a2 + v44);
        *(void **)((char *)a1 + v44) = v45;
        uint64_t v46 = v4[7];
        uint64_t v47 = (char *)a1 + v46;
        os_log_type_t v48 = (char *)a2 + v46;
        uint64_t v49 = *(void *)v48;
        v47[8] = v48[8];
        *(void *)uint64_t v47 = v49;
        *(void **)((char *)a1 + v4[8]) = *(void **)((char *)a2 + v4[8]);
        *(void **)((char *)a1 + v4[9]) = *(void **)((char *)a2 + v4[9]);
        uint64_t v50 = v4[10];
        uint64_t v51 = (char *)a1 + v50;
        uint64_t v52 = (char *)a2 + v50;
        uint64_t v41 = type metadata accessor for UUID();
        id v53 = v45;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v52, 1, v41))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v51, v52, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v51, 0, 1, v41);
        }
        uint64_t v71 = v4[11];
        uint64_t v72 = (void **)((char *)a1 + v71);
        uint64_t v73 = (char *)a2 + v71;
        uint64_t v74 = *(void **)v73;
        if (*(void *)v73)
        {
          *uint64_t v72 = v74;
          v72[1] = *((void *)v73 + 1);
          v72[2] = *((void *)v73 + 2);
          id v75 = v74;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v85 = *(_OWORD *)v73;
          v72[2] = *((void *)v73 + 2);
          *(_OWORD *)uint64_t v72 = v85;
        }
        uint64_t v86 = v4[12];
        uint64_t v83 = (char *)a1 + v86;
        uint64_t v84 = (char *)a2 + v86;
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2 + v86, 1, v41)) {
          goto LABEL_39;
        }
        goto LABEL_38;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v27 = v4[5];
        uint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
          __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
        }
        uint64_t v55 = v4[6];
        uint64_t v56 = *(void **)((char *)a2 + v55);
        *(void **)((char *)a1 + v55) = v56;
        uint64_t v57 = v4[7];
        uint64_t v58 = (char *)a1 + v57;
        uint64_t v59 = (char *)a2 + v57;
        uint64_t v60 = *(void *)v59;
        v58[8] = v59[8];
        *(void *)uint64_t v58 = v60;
        *(void **)((char *)a1 + v4[8]) = *(void **)((char *)a2 + v4[8]);
        *(void **)((char *)a1 + v4[9]) = *(void **)((char *)a2 + v4[9]);
        uint64_t v61 = v4[10];
        uint64_t v62 = (char *)a1 + v61;
        uint64_t v63 = (char *)a2 + v61;
        uint64_t v41 = type metadata accessor for UUID();
        id v64 = v56;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v63, 1, v41))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v62, v63, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v41);
        }
        uint64_t v76 = v4[11];
        uint64_t v77 = (void **)((char *)a1 + v76);
        id v78 = (char *)a2 + v76;
        uint64_t v79 = *(void **)v78;
        if (*(void *)v78)
        {
          *uint64_t v77 = v79;
          v77[1] = *((void *)v78 + 1);
          v77[2] = *((void *)v78 + 2);
          id v80 = v79;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v87 = *(_OWORD *)v78;
          v77[2] = *((void *)v78 + 2);
          *(_OWORD *)uint64_t v77 = v87;
        }
        uint64_t v88 = v4[12];
        uint64_t v83 = (char *)a1 + v88;
        uint64_t v84 = (char *)a2 + v88;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v88, 1, v41)) {
          goto LABEL_38;
        }
        goto LABEL_39;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v5 = v4[5];
        uint64_t v6 = (char *)a1 + v5;
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
        {
          uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
          __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
        }
        uint64_t v32 = v4[6];
        uint64_t v33 = *(void **)((char *)a2 + v32);
        *(void **)((char *)a1 + v32) = v33;
        uint64_t v34 = v4[7];
        id v35 = (char *)a1 + v34;
        uint64_t v36 = (char *)a2 + v34;
        uint64_t v37 = *(void *)v36;
        v35[8] = v36[8];
        *(void *)id v35 = v37;
        *(void **)((char *)a1 + v4[8]) = *(void **)((char *)a2 + v4[8]);
        *(void **)((char *)a1 + v4[9]) = *(void **)((char *)a2 + v4[9]);
        uint64_t v38 = v4[10];
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = type metadata accessor for UUID();
        id v42 = v33;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
        }
        uint64_t v66 = v4[11];
        uint64_t v67 = (void **)((char *)a1 + v66);
        uint64_t v68 = (char *)a2 + v66;
        unsigned __int8 v69 = *(void **)v68;
        if (*(void *)v68)
        {
          *uint64_t v67 = v69;
          v67[1] = *((void *)v68 + 1);
          v67[2] = *((void *)v68 + 2);
          id v70 = v69;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v81 = *(_OWORD *)v68;
          v67[2] = *((void *)v68 + 2);
          *(_OWORD *)uint64_t v67 = v81;
        }
        uint64_t v82 = v4[12];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v82, 1, v41))
        {
LABEL_38:
          uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v83, v84, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
LABEL_39:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v83, v84, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v83, 0, 1, v41);
        }
        uint64_t v90 = v4[13];
        uint64_t v91 = *(void **)((char *)a2 + v90);
        *(void **)((char *)a1 + v90) = v91;
        id v92 = v91;
LABEL_42:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for RecentsCallItemType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *a1 = *a2;
      uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      }
      *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
      uint64_t v29 = v6[7];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
      *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
      uint64_t v32 = v6[10];
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
        __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
      }
      uint64_t v53 = v6[11];
      uint64_t v54 = (char *)a1 + v53;
      uint64_t v55 = (char *)a2 + v53;
      *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
      *((void *)v54 + 2) = *((void *)v55 + 2);
      uint64_t v56 = v6[12];
      uint64_t v57 = (char *)a1 + v56;
      uint64_t v58 = (char *)a2 + v56;
      if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v56, 1, v35))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v57, v58, v35);
        __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v35);
      }
      *(void *)((char *)a1 + v6[13]) = *(void *)((char *)a2 + v6[13]);
      goto LABEL_34;
    case 1u:
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      id v13 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
      *(void *)((char *)a1 + v13[5]) = *(void *)((char *)a2 + v13[5]);
      *(void *)((char *)a1 + v13[6]) = *(void *)((char *)a2 + v13[6]);
      uint64_t v14 = v13[7];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      goto LABEL_34;
    case 3u:
      *a1 = *a2;
      id v17 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v18 = v17[5];
      id v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      }
      *(void *)((char *)a1 + v17[6]) = *(void *)((char *)a2 + v17[6]);
      uint64_t v37 = v17[7];
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      *(void *)((char *)a1 + v17[8]) = *(void *)((char *)a2 + v17[8]);
      *(void *)((char *)a1 + v17[9]) = *(void *)((char *)a2 + v17[9]);
      uint64_t v40 = v17[10];
      uint64_t v41 = (char *)a1 + v40;
      id v42 = (char *)a2 + v40;
      uint64_t v43 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v41, v42, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
        __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
      }
      uint64_t v60 = v17[11];
      uint64_t v61 = (char *)a1 + v60;
      uint64_t v62 = (char *)a2 + v60;
      *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
      *((void *)v61 + 2) = *((void *)v62 + 2);
      uint64_t v63 = v17[12];
      id v64 = (char *)a1 + v63;
      uint64_t v65 = (char *)a2 + v63;
      if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v63, 1, v43))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v64, v65, v43);
        __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v43);
      }
      *(void *)((char *)a1 + v17[13]) = *(void *)((char *)a2 + v17[13]);
      goto LABEL_34;
    case 4u:
      *a1 = *a2;
      uint64_t v23 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v24 = v23[5];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
        __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
      }
      *(void *)((char *)a1 + v23[6]) = *(void *)((char *)a2 + v23[6]);
      uint64_t v45 = v23[7];
      uint64_t v46 = (char *)a1 + v45;
      uint64_t v47 = (char *)a2 + v45;
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      *(void *)((char *)a1 + v23[8]) = *(void *)((char *)a2 + v23[8]);
      *(void *)((char *)a1 + v23[9]) = *(void *)((char *)a2 + v23[9]);
      uint64_t v48 = v23[10];
      uint64_t v49 = (char *)a1 + v48;
      uint64_t v50 = (char *)a2 + v48;
      uint64_t v51 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
        __swift_storeEnumTagSinglePayload((uint64_t)v49, 0, 1, v51);
      }
      uint64_t v67 = v23[11];
      uint64_t v68 = (char *)a1 + v67;
      unsigned __int8 v69 = (char *)a2 + v67;
      *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
      *((void *)v68 + 2) = *((void *)v69 + 2);
      uint64_t v70 = v23[12];
      uint64_t v71 = (char *)a1 + v70;
      uint64_t v72 = (char *)a2 + v70;
      if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v70, 1, v51))
      {
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v71, v72, v51);
        __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v51);
      }
      *(void *)((char *)a1 + v23[13]) = *(void *)((char *)a2 + v23[13]);
LABEL_34:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for RecentsCallItemType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)a1, (void (*)(void))type metadata accessor for RecentsCallItemType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v7 = v6[5];
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
        {
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
          __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
        }
        *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
        uint64_t v29 = v6[7];
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        *(void *)uint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
        *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
        *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
        uint64_t v32 = v6[10];
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
          __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
        }
        uint64_t v53 = v6[11];
        uint64_t v54 = (char *)a1 + v53;
        uint64_t v55 = (char *)a2 + v53;
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
        *((void *)v54 + 2) = *((void *)v55 + 2);
        uint64_t v56 = v6[12];
        uint64_t v57 = (char *)a1 + v56;
        uint64_t v58 = (char *)a2 + v56;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v56, 1, v35))
        {
          uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v57, v58, v35);
          __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v35);
        }
        *(void *)((char *)a1 + v6[13]) = *(void *)((char *)a2 + v6[13]);
        goto LABEL_35;
      case 1u:
        uint64_t v12 = type metadata accessor for UUID();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        id v13 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
        *(void *)((char *)a1 + v13[5]) = *(void *)((char *)a2 + v13[5]);
        *(void *)((char *)a1 + v13[6]) = *(void *)((char *)a2 + v13[6]);
        uint64_t v14 = v13[7];
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        *((void *)v15 + 2) = *((void *)v16 + 2);
        goto LABEL_35;
      case 3u:
        *a1 = *a2;
        id v17 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v18 = v17[5];
        id v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
          __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
        }
        *(void *)((char *)a1 + v17[6]) = *(void *)((char *)a2 + v17[6]);
        uint64_t v37 = v17[7];
        uint64_t v38 = (char *)a1 + v37;
        uint64_t v39 = (char *)a2 + v37;
        *(void *)uint64_t v38 = *(void *)v39;
        v38[8] = v39[8];
        *(void *)((char *)a1 + v17[8]) = *(void *)((char *)a2 + v17[8]);
        *(void *)((char *)a1 + v17[9]) = *(void *)((char *)a2 + v17[9]);
        uint64_t v40 = v17[10];
        uint64_t v41 = (char *)a1 + v40;
        id v42 = (char *)a2 + v40;
        uint64_t v43 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v41, v42, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
          __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
        }
        uint64_t v60 = v17[11];
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        *((void *)v61 + 2) = *((void *)v62 + 2);
        uint64_t v63 = v17[12];
        id v64 = (char *)a1 + v63;
        uint64_t v65 = (char *)a2 + v63;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v63, 1, v43))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v64, v65, v43);
          __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v43);
        }
        *(void *)((char *)a1 + v17[13]) = *(void *)((char *)a2 + v17[13]);
        goto LABEL_35;
      case 4u:
        *a1 = *a2;
        uint64_t v23 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v24 = v23[5];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
          __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
        }
        *(void *)((char *)a1 + v23[6]) = *(void *)((char *)a2 + v23[6]);
        uint64_t v45 = v23[7];
        uint64_t v46 = (char *)a1 + v45;
        uint64_t v47 = (char *)a2 + v45;
        *(void *)uint64_t v46 = *(void *)v47;
        v46[8] = v47[8];
        *(void *)((char *)a1 + v23[8]) = *(void *)((char *)a2 + v23[8]);
        *(void *)((char *)a1 + v23[9]) = *(void *)((char *)a2 + v23[9]);
        uint64_t v48 = v23[10];
        uint64_t v49 = (char *)a1 + v48;
        uint64_t v50 = (char *)a2 + v48;
        uint64_t v51 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
          __swift_storeEnumTagSinglePayload((uint64_t)v49, 0, 1, v51);
        }
        uint64_t v67 = v23[11];
        uint64_t v68 = (char *)a1 + v67;
        unsigned __int8 v69 = (char *)a2 + v67;
        *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
        *((void *)v68 + 2) = *((void *)v69 + 2);
        uint64_t v70 = v23[12];
        uint64_t v71 = (char *)a1 + v70;
        uint64_t v72 = (char *)a2 + v70;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v70, 1, v51))
        {
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v71, v72, v51);
          __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v51);
        }
        *(void *)((char *)a1 + v23[13]) = *(void *)((char *)a2 + v23[13]);
LABEL_35:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void **assignWithCopy for RecentsCallItem(void **a1, void **a2, int *a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)a1, (void (*)(void))type metadata accessor for RecentsCallItemType);
    type metadata accessor for RecentsCallItemType(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = type metadata accessor for UUID();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        id v13 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
        *(void **)((char *)a1 + v13[5]) = *(void **)((char *)a2 + v13[5]);
        uint64_t v14 = v13[6];
        uint64_t v15 = *(void **)((char *)a2 + v14);
        *(void **)((char *)a1 + v14) = v15;
        uint64_t v16 = v13[7];
        id v17 = (void **)((char *)a1 + v16);
        uint64_t v18 = (char *)a2 + v16;
        id v19 = *(void **)((char *)a2 + v16);
        swift_bridgeObjectRetain();
        id v20 = v15;
        if (v19)
        {
          *id v17 = v19;
          v17[1] = *((void *)v18 + 1);
          _OWORD v17[2] = *((void *)v18 + 2);
          id v21 = v19;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v95 = *(_OWORD *)v18;
          _OWORD v17[2] = *((void *)v18 + 2);
          *(_OWORD *)id v17 = v95;
        }
        goto LABEL_42;
      case 2u:
        uint64_t v22 = *a2;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        id v23 = v22;
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_42;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v24 = v6[5];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
          __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
        }
        uint64_t v46 = v6[6];
        uint64_t v47 = *(void **)((char *)a2 + v46);
        *(void **)((char *)a1 + v46) = v47;
        uint64_t v48 = v6[7];
        uint64_t v49 = (char *)a1 + v48;
        uint64_t v50 = (char *)a2 + v48;
        uint64_t v51 = *(void *)v50;
        v49[8] = v50[8];
        *(void *)uint64_t v49 = v51;
        *(void **)((char *)a1 + v6[8]) = *(void **)((char *)a2 + v6[8]);
        *(void **)((char *)a1 + v6[9]) = *(void **)((char *)a2 + v6[9]);
        uint64_t v52 = v6[10];
        uint64_t v53 = (char *)a1 + v52;
        uint64_t v54 = (char *)a2 + v52;
        uint64_t v43 = type metadata accessor for UUID();
        id v55 = v47;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v43))
        {
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v53, v54, v43);
          __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v43);
        }
        uint64_t v73 = v6[11];
        uint64_t v74 = (void **)((char *)a1 + v73);
        id v75 = (char *)a2 + v73;
        uint64_t v76 = *(void **)v75;
        if (*(void *)v75)
        {
          *uint64_t v74 = v76;
          v74[1] = *((void *)v75 + 1);
          v74[2] = *((void *)v75 + 2);
          id v77 = v76;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v87 = *(_OWORD *)v75;
          v74[2] = *((void *)v75 + 2);
          *(_OWORD *)uint64_t v74 = v87;
        }
        uint64_t v88 = v6[12];
        long long v85 = (char *)a1 + v88;
        uint64_t v86 = (char *)a2 + v88;
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2 + v88, 1, v43)) {
          goto LABEL_39;
        }
        goto LABEL_38;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v29 = v6[5];
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
          __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
        }
        uint64_t v57 = v6[6];
        uint64_t v58 = *(void **)((char *)a2 + v57);
        *(void **)((char *)a1 + v57) = v58;
        uint64_t v59 = v6[7];
        uint64_t v60 = (char *)a1 + v59;
        uint64_t v61 = (char *)a2 + v59;
        uint64_t v62 = *(void *)v61;
        v60[8] = v61[8];
        *(void *)uint64_t v60 = v62;
        *(void **)((char *)a1 + v6[8]) = *(void **)((char *)a2 + v6[8]);
        *(void **)((char *)a1 + v6[9]) = *(void **)((char *)a2 + v6[9]);
        uint64_t v63 = v6[10];
        id v64 = (char *)a1 + v63;
        uint64_t v65 = (char *)a2 + v63;
        uint64_t v43 = type metadata accessor for UUID();
        id v66 = v58;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v65, 1, v43))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v64, v65, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v64, v65, v43);
          __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v43);
        }
        uint64_t v78 = v6[11];
        uint64_t v79 = (void **)((char *)a1 + v78);
        id v80 = (char *)a2 + v78;
        long long v81 = *(void **)v80;
        if (*(void *)v80)
        {
          *uint64_t v79 = v81;
          v79[1] = *((void *)v80 + 1);
          v79[2] = *((void *)v80 + 2);
          id v82 = v81;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v89 = *(_OWORD *)v80;
          v79[2] = *((void *)v80 + 2);
          *(_OWORD *)uint64_t v79 = v89;
        }
        uint64_t v90 = v6[12];
        long long v85 = (char *)a1 + v90;
        uint64_t v86 = (char *)a2 + v90;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v90, 1, v43)) {
          goto LABEL_38;
        }
        goto LABEL_39;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v7 = v6[5];
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
        {
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
          __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
        }
        uint64_t v34 = v6[6];
        uint64_t v35 = *(void **)((char *)a2 + v34);
        *(void **)((char *)a1 + v34) = v35;
        uint64_t v36 = v6[7];
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = *(void *)v38;
        v37[8] = v38[8];
        *(void *)uint64_t v37 = v39;
        *(void **)((char *)a1 + v6[8]) = *(void **)((char *)a2 + v6[8]);
        *(void **)((char *)a1 + v6[9]) = *(void **)((char *)a2 + v6[9]);
        uint64_t v40 = v6[10];
        uint64_t v41 = (char *)a1 + v40;
        id v42 = (char *)a2 + v40;
        uint64_t v43 = type metadata accessor for UUID();
        id v44 = v35;
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
          __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
        }
        uint64_t v68 = v6[11];
        unsigned __int8 v69 = (void **)((char *)a1 + v68);
        uint64_t v70 = (char *)a2 + v68;
        uint64_t v71 = *(void **)v70;
        if (*(void *)v70)
        {
          void *v69 = v71;
          v69[1] = *((void *)v70 + 1);
          v69[2] = *((void *)v70 + 2);
          id v72 = v71;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v83 = *(_OWORD *)v70;
          v69[2] = *((void *)v70 + 2);
          *(_OWORD *)unsigned __int8 v69 = v83;
        }
        uint64_t v84 = v6[12];
        long long v85 = (char *)a1 + v84;
        uint64_t v86 = (char *)a2 + v84;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v84, 1, v43))
        {
LABEL_38:
          uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v85, v86, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
LABEL_39:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v85, v86, v43);
          __swift_storeEnumTagSinglePayload((uint64_t)v85, 0, 1, v43);
        }
        uint64_t v92 = v6[13];
        long long v93 = *(void **)((char *)a2 + v92);
        *(void **)((char *)a1 + v92) = v93;
        id v94 = v93;
LABEL_42:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  uint64_t v96 = a3[5];
  uint64_t v97 = (void **)((char *)a1 + v96);
  uint64_t v98 = (void **)((char *)a2 + v96);
  *uint64_t v97 = *v98;
  v97[1] = v98[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = a3[6];
  uint64_t v100 = (void **)((char *)a1 + v99);
  id v101 = (void **)((char *)a2 + v99);
  *uint64_t v100 = *v101;
  v100[1] = v101[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v102 = a3[7];
  uint64_t v103 = (void **)((char *)a1 + v102);
  uint64_t v104 = (void **)((char *)a2 + v102);
  *uint64_t v103 = *v104;
  v103[1] = v104[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v105 = a3[8];
  uint64_t v106 = (void **)((char *)a1 + v105);
  uint64_t v107 = (void **)((char *)a2 + v105);
  *uint64_t v106 = *v107;
  v106[1] = v107[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v108 = a3[9];
  uint64_t v109 = (char *)a1 + v108;
  uint64_t v110 = (char *)a2 + v108;
  uint64_t v111 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v109, 1, v111);
  int v113 = __swift_getEnumTagSinglePayload((uint64_t)v110, 1, v111);
  if (!EnumTagSinglePayload)
  {
    uint64_t v114 = *(void *)(v111 - 8);
    if (!v113)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 24))(v109, v110, v111);
      goto LABEL_49;
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v109, v111);
    goto LABEL_48;
  }
  if (v113)
  {
LABEL_48:
    uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v109, v110, *(void *)(*(void *)(v115 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v111 - 8) + 16))(v109, v110, v111);
  __swift_storeEnumTagSinglePayload((uint64_t)v109, 0, 1, v111);
LABEL_49:
  uint64_t v116 = a3[10];
  uint64_t v117 = *(void **)((char *)a2 + v116);
  uint64_t v118 = *(void **)((char *)a1 + v116);
  *(void **)((char *)a1 + v116) = v117;
  id v119 = v117;

  uint64_t v120 = a3[11];
  uint64_t v121 = *(void **)((char *)a1 + v120);
  uint64_t v122 = *(void **)((char *)a2 + v120);
  *(void **)((char *)a1 + v120) = v122;
  id v123 = v122;

  *(void **)((char *)a1 + a3[12]) = *(void **)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v124 = a3[13];
  uint64_t v125 = (void **)((char *)a1 + v124);
  uint64_t v126 = (void **)((char *)a2 + v124);
  *uint64_t v125 = *v126;
  v125[1] = v126[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v127 = a3[14];
  uint64_t v128 = *(void **)((char *)a2 + v127);
  uint64_t v129 = *(void **)((char *)a1 + v127);
  *(void **)((char *)a1 + v127) = v128;
  id v130 = v128;

  return a1;
}

_OWORD *initializeWithTake for RecentsCallItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for RecentsCallItemType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *a1 = *a2;
      uint64_t v7 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      }
      *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
      uint64_t v30 = v7[7];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
      *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
      uint64_t v33 = v7[10];
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      uint64_t v36 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
        __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
      }
      uint64_t v54 = v7[11];
      id v55 = (char *)a1 + v54;
      uint64_t v56 = (char *)a2 + v54;
      *(_OWORD *)id v55 = *(_OWORD *)v56;
      *((void *)v55 + 2) = *((void *)v56 + 2);
      uint64_t v57 = v7[12];
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (char *)a2 + v57;
      if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v57, 1, v36))
      {
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v58, v59, v36);
        __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v36);
      }
      *(void *)((char *)a1 + v7[13]) = *(void *)((char *)a2 + v7[13]);
      goto LABEL_34;
    case 1u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
      *(void *)((char *)a1 + v14[5]) = *(void *)((char *)a2 + v14[5]);
      *(void *)((char *)a1 + v14[6]) = *(void *)((char *)a2 + v14[6]);
      uint64_t v15 = v14[7];
      uint64_t v16 = (char *)a1 + v15;
      id v17 = (char *)a2 + v15;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((void *)v16 + 2) = *((void *)v17 + 2);
      goto LABEL_34;
    case 3u:
      *a1 = *a2;
      uint64_t v18 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v19 = v18[5];
      id v20 = (char *)a1 + v19;
      id v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
      }
      *(void *)((char *)a1 + v18[6]) = *(void *)((char *)a2 + v18[6]);
      uint64_t v38 = v18[7];
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      *(void *)((char *)a1 + v18[8]) = *(void *)((char *)a2 + v18[8]);
      *(void *)((char *)a1 + v18[9]) = *(void *)((char *)a2 + v18[9]);
      uint64_t v41 = v18[10];
      id v42 = (char *)a1 + v41;
      uint64_t v43 = (char *)a2 + v41;
      uint64_t v44 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
        __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v44);
      }
      uint64_t v61 = v18[11];
      uint64_t v62 = (char *)a1 + v61;
      uint64_t v63 = (char *)a2 + v61;
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *((void *)v62 + 2) = *((void *)v63 + 2);
      uint64_t v64 = v18[12];
      uint64_t v65 = (char *)a1 + v64;
      id v66 = (char *)a2 + v64;
      if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v64, 1, v44))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v65, v66, v44);
        __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v44);
      }
      *(void *)((char *)a1 + v18[13]) = *(void *)((char *)a2 + v18[13]);
      goto LABEL_34;
    case 4u:
      *a1 = *a2;
      uint64_t v24 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v25 = v24[5];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
        __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
      }
      *(void *)((char *)a1 + v24[6]) = *(void *)((char *)a2 + v24[6]);
      uint64_t v46 = v24[7];
      uint64_t v47 = (char *)a1 + v46;
      uint64_t v48 = (char *)a2 + v46;
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      *(void *)((char *)a1 + v24[8]) = *(void *)((char *)a2 + v24[8]);
      *(void *)((char *)a1 + v24[9]) = *(void *)((char *)a2 + v24[9]);
      uint64_t v49 = v24[10];
      uint64_t v50 = (char *)a1 + v49;
      uint64_t v51 = (char *)a2 + v49;
      uint64_t v52 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v51, 1, v52))
      {
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v50, v51, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v50, 0, 1, v52);
      }
      uint64_t v68 = v24[11];
      unsigned __int8 v69 = (char *)a1 + v68;
      uint64_t v70 = (char *)a2 + v68;
      *(_OWORD *)unsigned __int8 v69 = *(_OWORD *)v70;
      *((void *)v69 + 2) = *((void *)v70 + 2);
      uint64_t v71 = v24[12];
      id v72 = (char *)a1 + v71;
      uint64_t v73 = (char *)a2 + v71;
      if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v71, 1, v52))
      {
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v72, v73, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v52);
      }
      *(void *)((char *)a1 + v24[13]) = *(void *)((char *)a2 + v24[13]);
LABEL_34:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v75 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v75) = *(_OWORD *)((char *)a2 + v75);
  uint64_t v76 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v76) = *(_OWORD *)((char *)a2 + v76);
  uint64_t v77 = a3[9];
  uint64_t v78 = (char *)a1 + v77;
  uint64_t v79 = (char *)a2 + v77;
  uint64_t v80 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80))
  {
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v78, v79, *(void *)(*(void *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
    __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
  }
  uint64_t v82 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v82) = *(void *)((char *)a2 + v82);
  uint64_t v83 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v83) = *(_OWORD *)((char *)a2 + v83);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *assignWithTake for RecentsCallItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit19RecentsCallItemTypeOWOhTm_2((uint64_t)a1, (void (*)(void))type metadata accessor for RecentsCallItemType);
    uint64_t v6 = type metadata accessor for RecentsCallItemType(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        uint64_t v7 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
          __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
        }
        *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
        uint64_t v30 = v7[7];
        uint64_t v31 = (char *)a1 + v30;
        uint64_t v32 = (char *)a2 + v30;
        *(void *)uint64_t v31 = *(void *)v32;
        v31[8] = v32[8];
        *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
        *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
        uint64_t v33 = v7[10];
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
          __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
        }
        uint64_t v54 = v7[11];
        id v55 = (char *)a1 + v54;
        uint64_t v56 = (char *)a2 + v54;
        *(_OWORD *)id v55 = *(_OWORD *)v56;
        *((void *)v55 + 2) = *((void *)v56 + 2);
        uint64_t v57 = v7[12];
        uint64_t v58 = (char *)a1 + v57;
        uint64_t v59 = (char *)a2 + v57;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v57, 1, v36))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v58, v59, v36);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v36);
        }
        *(void *)((char *)a1 + v7[13]) = *(void *)((char *)a2 + v7[13]);
        goto LABEL_35;
      case 1u:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = (int *)type metadata accessor for RecentOngoingConversationMetadata(0);
        *(void *)((char *)a1 + v14[5]) = *(void *)((char *)a2 + v14[5]);
        *(void *)((char *)a1 + v14[6]) = *(void *)((char *)a2 + v14[6]);
        uint64_t v15 = v14[7];
        uint64_t v16 = (char *)a1 + v15;
        id v17 = (char *)a2 + v15;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *((void *)v16 + 2) = *((void *)v17 + 2);
        goto LABEL_35;
      case 3u:
        *a1 = *a2;
        uint64_t v18 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v19 = v18[5];
        id v20 = (char *)a1 + v19;
        id v21 = (char *)a2 + v19;
        uint64_t v22 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
          __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
        }
        *(void *)((char *)a1 + v18[6]) = *(void *)((char *)a2 + v18[6]);
        uint64_t v38 = v18[7];
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        v39[8] = v40[8];
        *(void *)((char *)a1 + v18[8]) = *(void *)((char *)a2 + v18[8]);
        *(void *)((char *)a1 + v18[9]) = *(void *)((char *)a2 + v18[9]);
        uint64_t v41 = v18[10];
        id v42 = (char *)a1 + v41;
        uint64_t v43 = (char *)a2 + v41;
        uint64_t v44 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
          __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v44);
        }
        uint64_t v61 = v18[11];
        uint64_t v62 = (char *)a1 + v61;
        uint64_t v63 = (char *)a2 + v61;
        *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
        *((void *)v62 + 2) = *((void *)v63 + 2);
        uint64_t v64 = v18[12];
        uint64_t v65 = (char *)a1 + v64;
        id v66 = (char *)a2 + v64;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v64, 1, v44))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v65, v66, v44);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v44);
        }
        *(void *)((char *)a1 + v18[13]) = *(void *)((char *)a2 + v18[13]);
        goto LABEL_35;
      case 4u:
        *a1 = *a2;
        uint64_t v24 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
        uint64_t v25 = v24[5];
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
          __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
        }
        *(void *)((char *)a1 + v24[6]) = *(void *)((char *)a2 + v24[6]);
        uint64_t v46 = v24[7];
        uint64_t v47 = (char *)a1 + v46;
        uint64_t v48 = (char *)a2 + v46;
        *(void *)uint64_t v47 = *(void *)v48;
        v47[8] = v48[8];
        *(void *)((char *)a1 + v24[8]) = *(void *)((char *)a2 + v24[8]);
        *(void *)((char *)a1 + v24[9]) = *(void *)((char *)a2 + v24[9]);
        uint64_t v49 = v24[10];
        uint64_t v50 = (char *)a1 + v49;
        uint64_t v51 = (char *)a2 + v49;
        uint64_t v52 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)v51, 1, v52))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v50, v51, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v50, 0, 1, v52);
        }
        uint64_t v68 = v24[11];
        unsigned __int8 v69 = (char *)a1 + v68;
        uint64_t v70 = (char *)a2 + v68;
        *(_OWORD *)unsigned __int8 v69 = *(_OWORD *)v70;
        *((void *)v69 + 2) = *((void *)v70 + 2);
        uint64_t v71 = v24[12];
        id v72 = (char *)a1 + v71;
        uint64_t v73 = (char *)a2 + v71;
        if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v71, 1, v52))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v72, v73, v52);
          __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v52);
        }
        *(void *)((char *)a1 + v24[13]) = *(void *)((char *)a2 + v24[13]);
LABEL_35:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v75 = a3[5];
  uint64_t v76 = (void *)((char *)a1 + v75);
  uint64_t v77 = (uint64_t *)((char *)a2 + v75);
  uint64_t v79 = *v77;
  uint64_t v78 = v77[1];
  *uint64_t v76 = v79;
  v76[1] = v78;
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[6];
  uint64_t v81 = (void *)((char *)a1 + v80);
  uint64_t v82 = (uint64_t *)((char *)a2 + v80);
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *uint64_t v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = a3[7];
  uint64_t v86 = (void *)((char *)a1 + v85);
  long long v87 = (uint64_t *)((char *)a2 + v85);
  uint64_t v89 = *v87;
  uint64_t v88 = v87[1];
  *uint64_t v86 = v89;
  v86[1] = v88;
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[8];
  uint64_t v91 = (void *)((char *)a1 + v90);
  uint64_t v92 = (uint64_t *)((char *)a2 + v90);
  uint64_t v94 = *v92;
  uint64_t v93 = v92[1];
  *uint64_t v91 = v94;
  v91[1] = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = a3[9];
  uint64_t v96 = (char *)a1 + v95;
  uint64_t v97 = (char *)a2 + v95;
  uint64_t v98 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v96, 1, v98);
  int v100 = __swift_getEnumTagSinglePayload((uint64_t)v97, 1, v98);
  if (!EnumTagSinglePayload)
  {
    uint64_t v101 = *(void *)(v98 - 8);
    if (!v100)
    {
      (*(void (**)(char *, char *, uint64_t))(v101 + 40))(v96, v97, v98);
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v101 + 8))(v96, v98);
    goto LABEL_41;
  }
  if (v100)
  {
LABEL_41:
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v96, v97, *(void *)(*(void *)(v102 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 32))(v96, v97, v98);
  __swift_storeEnumTagSinglePayload((uint64_t)v96, 0, 1, v98);
LABEL_42:
  uint64_t v103 = a3[10];
  uint64_t v104 = *(void **)((char *)a1 + v103);
  *(void *)((char *)a1 + v103) = *(void *)((char *)a2 + v103);

  uint64_t v105 = a3[11];
  uint64_t v106 = *(void **)((char *)a1 + v105);
  *(void *)((char *)a1 + v105) = *(void *)((char *)a2 + v105);

  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  uint64_t v107 = a3[13];
  uint64_t v108 = (void *)((char *)a1 + v107);
  uint64_t v109 = (uint64_t *)((char *)a2 + v107);
  uint64_t v111 = *v109;
  uint64_t v110 = v109[1];
  *uint64_t v108 = v111;
  v108[1] = v110;
  swift_bridgeObjectRelease();
  uint64_t v112 = a3[14];
  int v113 = *(void **)((char *)a1 + v112);
  *(void *)((char *)a1 + v112) = *(void *)((char *)a2 + v112);

  return a1;
}

uint64_t sub_1C340D014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_10_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_10_0();
    if (*(_DWORD *)(v11 + 84) != a2) {
      return OUTLINED_FUNCTION_46_0(*(void *)(a1 + *(int *)(a3 + 40)));
    }
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 36);
  }
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

void sub_1C340D0C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_10_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_10_0();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 36);
  }
  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

unsigned char *storeEnumTagSinglePayload for RecentsCallItem.VideoMessageError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C340D220);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for RecentsCallItem.VideoMessageError()
{
}

unint64_t lazy protocol witness table accessor for type InCallControlsState and conformance InCallControlsState()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsState and conformance InCallControlsState;
  if (!lazy protocol witness table cache variable for type InCallControlsState and conformance InCallControlsState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsState and conformance InCallControlsState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InCallControlsState and conformance InCallControlsState;
  if (!lazy protocol witness table cache variable for type InCallControlsState and conformance InCallControlsState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsState and conformance InCallControlsState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID()
{
  unint64_t result = lazy protocol witness table cache variable for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID;
  if (!lazy protocol witness table cache variable for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID;
  if (!lazy protocol witness table cache variable for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel.CaptionID and conformance TranscriptionViewModel.CaptionID);
  }
  return result;
}

void OUTLINED_FUNCTION_41_18()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_75_5()
{
  return NSObject.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_81_8(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_82_5@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_91_2(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_93_2(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_97_5()
{
  *(_DWORD *)(v1 - 88) = v0;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_99_4(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

uint64_t OUTLINED_FUNCTION_100_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_106_4()
{
  return type metadata accessor for RecentsCallItem(0);
}

uint64_t OUTLINED_FUNCTION_110_4()
{
  return _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_114_0()
{
  return _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_120_3()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_130_3()
{
  return 0x454D495445434146;
}

uint64_t OUTLINED_FUNCTION_131_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *uint64_t v10 = a10;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_144_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_148_3()
{
  return swift_unknownObjectRetain();
}

uint64_t OUTLINED_FUNCTION_155_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_156_3(uint64_t result)
{
  *(void *)(v1 + *(int *)(result + 20)) = v3;
  *(void *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_158_3()
{
  return __CocoaSet.member(for:)();
}

uint64_t OUTLINED_FUNCTION_160_2()
{
  return type metadata accessor for RecentCallRecentItemMetadata(0);
}

uint64_t OUTLINED_FUNCTION_162_2()
{
  return _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_164_2()
{
  return _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_170_1()
{
  return *(void *)(v0 + *(int *)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_195_2()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return specialized >> prefix<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_198_1()
{
  return type metadata accessor for RecentCallRecentItemMetadata(0);
}

uint64_t OUTLINED_FUNCTION_200_0()
{
  return _s15ConversationKit19RecentsCallItemTypeOWOhTm_2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_203_0()
{
  return _s15ConversationKit010RecentCallC12ItemMetadataVWObTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_207_1(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, v2, 1, a1);
}

uint64_t OUTLINED_FUNCTION_208_0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_209_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_210_1()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_211_1()
{
  type metadata accessor for RecentsCallItemType(0);
  return v0;
}

uint64_t OUTLINED_FUNCTION_212_1()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_214_0()
{
  return _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_216_1()
{
  return _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_217_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_218_1()
{
  return _s15ConversationKit19RecentsCallItemTypeOWOcTm_0(v1, v0);
}

uint64_t ClarityUIContactsList.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ClarityUIContactsList.init()();
  return v0;
}

uint64_t ClarityUIContactsList.allContactIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

ConversationKit::ClarityUIContact __swiftcall ClarityUIContactsList.contact(for:)(Swift::String a1)
{
  uint64_t v3 = v2;
  unint64_t object = (unint64_t)a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v91 = v1;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v88 - v13;
  swift_bridgeObjectRetain();
  ClarityUIContactsList.contactCache.getter((uint64_t)v14);
  uint64_t v104 = countAndFlagsBits;
  unint64_t v105 = object;
  OUTLINED_FUNCTION_11_50();
  swift_bridgeObjectRelease();
  id v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v15 = v8 + 8;
  uint64_t v16 = v17;
  v17(v14, v6);
  uint64_t v18 = v106;
  outlined consume of ClarityUIContact?(v106, v107);
  if (v18) {
    goto LABEL_62;
  }
  uint64_t v99 = v16;
  uint64_t v100 = v15;
  uint64_t v97 = v12;
  uint64_t v19 = (void *)ClarityUIContactsList.allContactIdentifiers.getter();
  id v20 = specialized Collection<>.firstIndex(of:)(countAndFlagsBits, object, v19);
  char v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v101 = v6;
  if (v22)
  {
    if (one-time initialization token for clarityUI == -1) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
  uint64_t v89 = countAndFlagsBits;
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList_maximumNumberOfContactsPerFetch) / 2;
  if (__OFSUB__(v20, v12)) {
    goto LABEL_50;
  }
  uint64_t v23 = *(char **)(ClarityUIContactsList.allContactIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  if (!__OFADD__(v20, v12))
  {
    uint64_t v24 = ((unint64_t)v20 - v12) & ~(((uint64_t)v20 - v12) >> 63);
    if ((uint64_t)((char *)v20 + v12) >= (uint64_t)v23) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = (char *)v20 + v12;
    }
    if ((uint64_t)v25 < v24)
    {
      __break(1u);
      goto LABEL_54;
    }
    uint64_t v98 = v3;
    unint64_t v90 = object;
    uint64_t v95 = (void *)(((unint64_t)v20 - v12) & ~(((uint64_t)v20 - v12) >> 63));
    if ((char *)v24 == v25)
    {
LABEL_10:
      uint64_t v26 = *(void **)(v3 + 24);
      uint64_t v27 = self;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v29 = objc_msgSend(v27, sel_predicateForContactsWithIdentifiers_, isa);

      static ClarityUIContact.requiredDescriptors(for:)((uint64_t)v26);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
      Class v30 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v106 = 0;
      unint64_t v96 = (unint64_t)v26;
      id v31 = objc_msgSend(v26, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, v29, v30, &v106);

      uint64_t v32 = v106;
      if (!v31)
      {
        uint64_t v53 = v106;
        id v20 = _convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for clarityUI == -1)
        {
LABEL_34:
          uint64_t v54 = type metadata accessor for Logger();
          __swift_project_value_buffer(v54, (uint64_t)static Log.clarityUI);
          id v55 = v20;
          uint64_t v56 = v20;
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = (uint8_t *)OUTLINED_FUNCTION_37();
            uint64_t v60 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v59 = 138412290;
            uint64_t v61 = v20;
            unint64_t object = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v106 = (void *)object;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v60 = object;

            _os_log_impl(&dword_1C2F90000, v57, v58, "Unable to enumerate contacts: %@", v59, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }
          else
          {
          }
          OUTLINED_FUNCTION_9_68();
          uint64_t v6 = v101;
          uint64_t countAndFlagsBits = v89;
          goto LABEL_48;
        }
LABEL_67:
        swift_once();
        goto LABEL_34;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      uint64_t countAndFlagsBits = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v33 = v32;

      uint64_t v12 = v97;
      if (one-time initialization token for clarityUI == -1)
      {
LABEL_12:
        uint64_t v34 = type metadata accessor for Logger();
        __swift_project_value_buffer(v34, (uint64_t)static Log.clarityUI);
        swift_bridgeObjectRetain_n();
        id v20 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        os_log_type_enabled(v20, v35);
        unint64_t v36 = (unint64_t)countAndFlagsBits >> 62;
        OUTLINED_FUNCTION_9_68();
        if (v37)
        {
          uint64_t v38 = swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = 134218496;
          if (v36)
          {
            swift_bridgeObjectRetain();
            uint64_t v39 = (void *)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v39 = *(void **)((countAndFlagsBits & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          uint64_t v106 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t object = 2048;
          *(_WORD *)(v38 + 12) = 2048;
          uint64_t v106 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v38 + 22) = 2048;
          uint64_t v106 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2F90000, v20, v35, "Fetched %ld contacts within range [%ld..<%ld].", (uint8_t *)v38, 0x20u);
          OUTLINED_FUNCTION_3();

          OUTLINED_FUNCTION_9_68();
          uint64_t v12 = v97;
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v6 = v101;
        if (v36)
        {
          if (countAndFlagsBits < 0) {
            id v20 = countAndFlagsBits;
          }
          else {
            id v20 = (countAndFlagsBits & 0xFFFFFFFFFFFFFF8);
          }
          swift_bridgeObjectRetain();
          uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v62)
          {
LABEL_39:
            if (v62 >= 1)
            {
              uint64_t v63 = 0;
              uint64_t v93 = v3 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList__contactCache;
              uint64_t v94 = v62;
              unint64_t v92 = countAndFlagsBits & 0xC000000000000001;
              uint64_t v95 = (void *)countAndFlagsBits;
              unint64_t object = v96;
              do
              {
                if (v92) {
                  id v64 = (id)MEMORY[0x1C87744F0](v63, countAndFlagsBits);
                }
                else {
                  id v64 = *(id *)(countAndFlagsBits + 8 * v63 + 32);
                }
                uint64_t v65 = v64;
                ++v63;
                id v66 = objc_msgSend(v64, sel_identifier);
                uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v69 = v68;

                id v70 = (id)object;
                id v71 = v65;
                id v72 = objc_msgSend(v71, sel_identifier);
                uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v75 = v74;

                uint64_t v106 = v71;
                uint64_t v107 = (void *)object;
                uint64_t v108 = v73;
                uint64_t v109 = v75;
                uint64_t v102 = v67;
                uint64_t v103 = v69;
                swift_getKeyPath();
                uint64_t v3 = v98;
                uint64_t v104 = v98;
                lazy protocol witness table accessor for type ClarityUIContactsList and conformance ClarityUIContactsList();
                OUTLINED_FUNCTION_10_62();
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                uint64_t v104 = v3;
                swift_getKeyPath();
                ObservationRegistrar.willSet<A, B>(_:keyPath:)();
                swift_release();
                swift_beginAccess();
                uint64_t v6 = v101;
                Cache.subscript.setter();
                swift_endAccess();
                uint64_t v104 = v3;
                swift_getKeyPath();
                OUTLINED_FUNCTION_10_62();
                ObservationRegistrar.didSet<A, B>(_:keyPath:)();

                swift_release();
                uint64_t countAndFlagsBits = (uint64_t)v95;
                uint64_t v12 = v97;
              }
              while (v94 != v63);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_9_68();
              goto LABEL_60;
            }
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v62 = *(void *)((countAndFlagsBits & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v62) {
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRelease();
LABEL_60:
        uint64_t countAndFlagsBits = v89;
        goto LABEL_61;
      }
LABEL_54:
      swift_once();
      goto LABEL_12;
    }
    if (v24 >= (uint64_t)v25)
    {
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v44 = 16 * v24;
    uint64_t v45 = MEMORY[0x1E4FBC860];
    unint64_t object = v24;
    uint64_t v6 = v101;
    while (1)
    {
      uint64_t v46 = ClarityUIContactsList.allContactIdentifiers.getter();
      if (object >= *(void *)(v46 + 16)) {
        break;
      }
      uint64_t countAndFlagsBits = *(void *)(v46 + v44 + 32);
      unint64_t v47 = *(void *)(v46 + v44 + 40);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      ClarityUIContactsList.contactCache.getter((uint64_t)v14);
      uint64_t v104 = countAndFlagsBits;
      unint64_t v105 = v47;
      OUTLINED_FUNCTION_11_50();
      swift_bridgeObjectRelease();
      v99(v14, v6);
      uint64_t v48 = v106;
      outlined consume of ClarityUIContact?(v106, v107);
      if (v48)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v45 = v51;
        }
        unint64_t v49 = *(void *)(v45 + 16);
        if (v49 >= *(void *)(v45 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v45 = v52;
        }
        *(void *)(v45 + 16) = v49 + 1;
        uint64_t v50 = v45 + 16 * v49;
        *(void *)(v50 + 32) = countAndFlagsBits;
        *(void *)(v50 + 40) = v47;
        uint64_t v3 = v98;
      }
      ++object;
      v44 += 16;
      if (v25 == (char *)object) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
  }
  __break(1u);
LABEL_52:
  swift_once();
LABEL_17:
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Log.clarityUI);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v106 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, object, (uint64_t *)&v106);
    uint64_t v6 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v41, v42, "Unable to find index of identifier %s.", v43, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_48:
  uint64_t v12 = v97;
LABEL_61:
  uint64_t v16 = v99;
LABEL_62:
  swift_bridgeObjectRetain();
  ClarityUIContactsList.contactCache.getter(v12);
  uint64_t v104 = countAndFlagsBits;
  unint64_t v105 = object;
  Cache.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v76 = (objc_class *)((uint64_t (*)(uint64_t, uint64_t))v16)(v12, v6);
  id v80 = v106;
  if (v106)
  {
    uint64_t v82 = v108;
    uint64_t v81 = v109;
    id v83 = v107;
  }
  else
  {
    id v84 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8F8]), sel_init);
    id v83 = *(id *)(v3 + 24);
    id v80 = v84;
    id v85 = objc_msgSend(v80, sel_identifier);
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v81 = v86;
  }
  long long v87 = v91;
  *uint64_t v91 = v80;
  v87[1] = v83;
  v87[2] = v82;
  v87[3] = v81;
  result.id._unint64_t object = v79;
  result.id._uint64_t countAndFlagsBits = v78;
  result.contactStore.super.Class isa = v77;
  result.cnContact.super.Class isa = v76;
  return result;
}

uint64_t key path getter for ClarityUIContactsList.allContactIdentifiers : ClarityUIContactsList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ClarityUIContactsList.allContactIdentifiers.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for ClarityUIContactsList.allContactIdentifiers : ClarityUIContactsList()
{
  return ClarityUIContactsList.allContactIdentifiers.setter();
}

uint64_t ClarityUIContactsList.allContactIdentifiers.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t ClarityUIContactsList.allContactIdentifiers.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ClarityUIContactsList.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t closure #1 in ClarityUIContactsList.allContactIdentifiers.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ClarityUIContactsList.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ClarityUIContactsList.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

void (*ClarityUIContactsList.allContactIdentifiers.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  v3[4] = OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList___observationRegistrar;
  *uint64_t v3 = v1;
  v3[5] = lazy protocol witness table accessor for type ClarityUIContactsList and conformance ClarityUIContactsList();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return ClarityUIContactsList.allContactIdentifiers.modify;
}

void ClarityUIContactsList.allContactIdentifiers.modify(void **a1)
{
  uint64_t v1 = *a1;
  swift_endAccess();
  *uint64_t v1 = v1[3];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

uint64_t ClarityUIContactsList.contactStoreDidUpdateTask.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ClarityUIContactsList.contactStoreDidUpdateTask.getter()
{
  return swift_retain();
}

uint64_t key path setter for ClarityUIContactsList.contactStoreDidUpdateTask : ClarityUIContactsList()
{
  return ClarityUIContactsList.contactStoreDidUpdateTask.setter();
}

uint64_t ClarityUIContactsList.contactStoreDidUpdateTask.setter()
{
  return swift_release();
}

uint64_t closure #1 in ClarityUIContactsList.contactStoreDidUpdateTask.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  swift_retain();
  return swift_release();
}

uint64_t ClarityUIContactsList.contactCache.init@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  return v6(a2, a1, v4);
}

uint64_t ClarityUIContactsList.contactCache.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type ClarityUIContactsList and conformance ClarityUIContactsList();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList__contactCache;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path setter for ClarityUIContactsList.contactCache : ClarityUIContactsList(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  __n128 v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return ClarityUIContactsList.contactCache.setter((uint64_t)v5);
}

uint64_t ClarityUIContactsList.contactCache.setter(uint64_t a1)
{
  swift_getKeyPath();
  specialized ClarityUIContactsList.withMutation<A, B>(keyPath:_:)();
  swift_release();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t closure #1 in ClarityUIContactsList.contactCache.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList__contactCache;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

void *ClarityUIContactsList.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = MEMORY[0x1E4FBC860];
  v1[3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  v1[4] = 0;
  Cache.init(countLimit:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList__contactCache, v10, v5);
  *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList_fetchDelay) = 0x3FB999999999999ALL;
  *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList_maximumNumberOfContactsPerFetch) = 100;
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList_favoritesList;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)((char *)v1 + v11) = static ClarityUIFavoritesList.shared;
  swift_retain();
  ObservationRegistrar.init()();
  ClarityUIContactsList.updateFromContactStore()();
  uint64_t v12 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = MEMORY[0x1E4FBCFD8];
  _OWORD v15[2] = v14;
  v15[3] = v16;
  _OWORD v15[4] = v13;
  swift_release();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ClarityUIContactsList.init(), (uint64_t)v15);
  ClarityUIContactsList.contactStoreDidUpdateTask.setter();
  return v1;
}

uint64_t sub_1C340EFF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ClarityUIContactsList.allContactIdentifiers.getter();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ClarityUIContactsList and conformance ClarityUIContactsList()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIContactsList and conformance ClarityUIContactsList;
  if (!lazy protocol witness table cache variable for type ClarityUIContactsList and conformance ClarityUIContactsList)
  {
    type metadata accessor for ClarityUIContactsList();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIContactsList and conformance ClarityUIContactsList);
  }
  return result;
}

uint64_t type metadata accessor for ClarityUIContactsList()
{
  uint64_t result = type metadata singleton initialization cache for ClarityUIContactsList;
  if (!type metadata singleton initialization cache for ClarityUIContactsList) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ClarityUIContactsList.updateFromContactStore()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClarityUIContactsList.contactCache.getter((uint64_t)v8);
  Cache.removeAllObjects()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v9 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v9);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = MEMORY[0x1E4FBCFD8];
  v11[2] = v10;
  v11[3] = v12;
  id v11[4] = v1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

uint64_t closure #1 in ClarityUIContactsList.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a4;
  v4[14] = type metadata accessor for MainActor();
  v4[15] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[16] = v6;
  v4[17] = v5;
  return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.init(), v6, v5);
}

uint64_t closure #1 in ClarityUIContactsList.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<NSNotificationCenter.Notifications, String>.Iterator);
  v0[18] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[19] = v2;
  v0[20] = *(void *)(v3 + 64);
  v0[21] = OUTLINED_FUNCTION_191();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<NSNotificationCenter.Notifications, String>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = OUTLINED_FUNCTION_191();
  id v7 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v8 = NSNotificationCenter.notifications(named:object:)();

  v0[11] = v8;
  type metadata accessor for NSNotificationCenter.Notifications();
  lazy protocol witness table accessor for type NSNotificationCenter.Notifications and conformance NSNotificationCenter.Notifications((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications and conformance NSNotificationCenter.Notifications, MEMORY[0x1F418C1A8]);
  AsyncMapSequence.init(_:transform:)();
  v0[22] = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  OUTLINED_FUNCTION_191();
  MEMORY[0x1C8774690](v4);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.Iterator.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_beginAccess();
  uint64_t v9 = static MainActor.shared.getter();
  v0[23] = v9;
  if (v9)
  {
    swift_getObjectType();
    uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  v0[24] = v10;
  v0[25] = v12;
  return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.init(), v10, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = type metadata accessor for Notification();
  v0[26] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[27] = v2;
  v0[28] = OUTLINED_FUNCTION_191();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  uint64_t v3 = OUTLINED_FUNCTION_191();
  v0[29] = v3;
  v0[30] = AsyncMapSequence.Iterator.baseIterator.modify();
  lazy protocol witness table accessor for type NSNotificationCenter.Notifications and conformance NSNotificationCenter.Notifications(&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator, MEMORY[0x1F418C198]);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in ClarityUIContactsList.init();
  return MEMORY[0x1F4187C80](v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 192);
    id v7 = *(void *)(v3 + 200);
    uint64_t v8 = closure #1 in ClarityUIContactsList.init();
  }
  else
  {
    (*(void (**)(void))(v3 + 240))();
    uint64_t v6 = *(void *)(v3 + 192);
    id v7 = *(void *)(v3 + 200);
    uint64_t v8 = closure #1 in ClarityUIContactsList.init();
  }
  return MEMORY[0x1F4188298](v8, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;

  uint64_t v1 = v0[29];
  uint64_t v2 = v0[26];
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of Notification?(v1);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = v0[16];
    uint64_t v4 = v0[17];
    return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.init(), v3, v4);
  }
  else
  {
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[19];
    (*(void (**)(void, uint64_t, uint64_t))(v0[27] + 32))(v0[28], v1, v2);
    swift_task_dealloc();
    id v7 = swift_task_alloc();
    v0[32] = v7;
    (*(void (**)(void))(v6 + 16))();
    uint64_t v8 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[33] = v9;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v0[34] = v10;
    v10(v7, v5);
    uint64_t v14 = (int *)((char *)v8 + *v8);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[35] = v11;
    *uint64_t v11 = v0;
    v11[1] = closure #1 in ClarityUIContactsList.init();
    uint64_t v12 = v0[28];
    return ((uint64_t (*)(void *, uint64_t))v14)(v0 + 9, v12);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  (*(void (**)(void))(v0 + 240))();
  swift_task_dealloc();
  return swift_task_dealloc();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v3 = v2;
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[27];
  uint64_t v6 = v1[26];
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  v2[36] = v1[10];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  id v7 = v1[25];
  uint64_t v8 = v1[24];
  return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.init(), v8, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.init(), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  swift_bridgeObjectRelease();
  if (swift_weakLoadStrong())
  {
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.clarityUI);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1C2F90000, v2, v3, "Contact store did change.", v4, 2u);
      OUTLINED_FUNCTION_3();
    }

    ClarityUIContactsList.updateFromContactStore()();
    swift_release();
    uint64_t v5 = static MainActor.shared.getter();
    *(void *)(v0 + 184) = v5;
    if (v5)
    {
      swift_getObjectType();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    *(void *)(v0 + 192) = v6;
    *(void *)(v0 + 200) = v8;
    return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.init(), v6, v8);
  }
  else
  {
    (*(void (**)(void, void))(v0 + 272))(*(void *)(v0 + 168), *(void *)(v0 + 144));
    swift_release();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in ClarityUIContactsList.updateFromContactStore()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in ClarityUIContactsList.updateFromContactStore();
  return ClarityUIContactsList.fetchContactIdentifiers()();
}

uint64_t closure #1 in ClarityUIContactsList.updateFromContactStore()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v2 = v1;
  *(void *)(v4 + 48) = v3;
  swift_task_dealloc();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in ClarityUIContactsList.updateFromContactStore(), v6, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  ClarityUIContactsList.allContactIdentifiers.setter();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ClarityUIContactsList.fetchContactIdentifiers()()
{
  *(void *)(v1 + 72) = v0;
  type metadata accessor for MainActor();
  *(void *)(v1 + 80) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](ClarityUIContactsList.fetchContactIdentifiers(), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  CNContactFetchRequest v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  id v12;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v46;
  objc_class *isa;
  Class v48;
  uint64_t v49[3];
  void *v50;
  uint64_t v51;

  uint64_t v50 = v0;
  v49[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[9];
  swift_release();
  v0[8] = MEMORY[0x1E4FBC868];
  uint64_t v2 = (unint64_t)(v0 + 8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContactFetchRequest);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  uint64_t v3 = static CNContact.requiredDescriptorsForClarityUIDisplayName.getter();
  v4.super.super.Class isa = CNContactFetchRequest.__allocating_init(keysToFetch:)((Swift::OpaquePointer)v3).super.super.isa;
  [(objc_class *)v4.super.super.isa setUnifyResults:1];
  [(objc_class *)v4.super.super.isa setSortOrder:0];
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v0 + 8;
  uint64_t v7 = swift_allocObject();
  v0[3] = 1107296256;
  uint64_t v8 = v0 + 2;
  *(void *)(v7 + 16) = partial apply for closure #1 in ClarityUIContactsList.fetchContactIdentifiers();
  *(void *)(v7 + 24) = v6;
  v0[6] = partial apply for thunk for @callee_guaranteed (@guaranteed CNContact, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v0[7] = v7;
  v0[2] = MEMORY[0x1E4F143A8];
  v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed CNContact, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v0[5] = &block_descriptor_68;
  uint64_t v9 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  swift_release();
  v0[2] = 0;
  uint64_t v10 = objc_msgSend(v5, sel_enumerateContactsWithFetchRequest_error_usingBlock_, v4.super.super.isa, v0 + 2, v9);
  _Block_release(v9);
  uint64_t v11 = (void *)v0[2];
  uint64_t v12 = v11;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_29:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v2 = 0x1EA345000uLL;
  isEscapingClosureAtFileLocation = (uint64_t)(v0 + 8);
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v11 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for clarityUI != -1) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.clarityUI);
  uint64_t v15 = v11;
  uint64_t v16 = v11;
  id v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    Class isa = v4.super.super.isa;
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v46 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    id v20 = v11;
    char v21 = _swift_stdlib_bridgeErrorToNSError();
    *uint64_t v8 = v21;
    uint64_t v2 = 0x1EA345000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v21;
    isEscapingClosureAtFileLocation = (uint64_t)(v0 + 8);

    _os_log_impl(&dword_1C2F90000, v17, v18, "Unable to enumerate contact identifiers: %@", v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    v4.super.super.Class isa = isa;
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
LABEL_7:
  char v22 = *(void *)isEscapingClosureAtFileLocation;
  swift_bridgeObjectRetain_n();
  uint64_t v23 = specialized _copyCollectionToContiguousArray<A>(_:)(v22);
  swift_bridgeObjectRelease();
  v49[0] = v23;
  specialized MutableCollection<>.sort(by:)(v49);
  swift_bridgeObjectRelease();
  uint64_t v24 = v49[0];
  if (*(void *)(v2 + 2232) != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.clarityUI);
  swift_bridgeObjectRetain();
  uint64_t v26 = Logger.logObject.getter();
  uint64_t v27 = static os_log_type_t.default.getter();
  uint64_t v48 = v4.super.super.isa;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_37();
    *(_DWORD *)uint64_t v28 = 134217984;
    *uint64_t v8 = *(void *)(v24 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2F90000, v26, v27, "Number of contacts: %ld", v28, 0xCu);
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_release();
  }

  id v29 = *(void *)(v24 + 16);
  if (v29)
  {
    Class v30 = (uint64_t *)(v24 + 40);
    id v31 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v32 = *(void *)isEscapingClosureAtFileLocation;
      if (*(void *)(*(void *)isEscapingClosureAtFileLocation + 16))
      {
        uint64_t v34 = *(v30 - 1);
        id v33 = *v30;
        swift_bridgeObjectRetain();
        os_log_type_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v33);
        if (v36)
        {
          int v37 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v35);
          uint64_t v39 = *v37;
          uint64_t v38 = v37[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            id v31 = v42;
          }
          uint64_t v40 = *(void *)(v31 + 16);
          if (v40 >= *(void *)(v31 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            id v31 = v43;
          }
          *(void *)(v31 + 16) = v40 + 1;
          uint64_t v41 = v31 + 16 * v40;
          *(void *)(v41 + 32) = v39;
          *(void *)(v41 + 40) = v38;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      v30 += 2;
      --v29;
    }
    while (v29);
  }
  else
  {
    id v31 = MEMORY[0x1E4FBC860];
  }
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v44 = (uint64_t (*)(uint64_t))v0[1];
  return v44(v31);
}

uint64_t closure #1 in ClarityUIContactsList.fetchContactIdentifiers()(void *a1)
{
  uint64_t v1 = *(void *)(ClarityUIFavoritesList.favorites.getter() + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      uint64_t v4 = *(v2 - 1);
      uint64_t v3 = *v2;
      uint64_t v5 = (void *)v2[2];
      uint64_t v6 = (void *)v2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v29 = v5;
      id v7 = v6;
      swift_bridgeObjectRetain();
      id v8 = objc_msgSend(a1, sel_identifier);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      if (v4 == v9 && v3 == v11) {
        break;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v13) {
        return swift_bridgeObjectRelease_n();
      }
      v2 += 7;
      if (!--v1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_11:
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if (ClarityUIOutgoingCallActionProvider.areEmailAddressesRelevant.getter())
    {
      id v14 = objc_msgSend(a1, sel_emailAddresses);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_21;
      }
    }
    uint64_t result = ClarityUIOutgoingCallActionProvider.arePhoneNumbersRelevant.getter();
    if (result)
    {
      id v18 = objc_msgSend(a1, sel_phoneNumbers);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (v20)
      {
LABEL_21:
        uint64_t v21 = CNContact.clarityUIDisplayName.getter();
        uint64_t v23 = v22;
        id v24 = objc_msgSend(a1, sel_identifier);
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        specialized Dictionary._Variant.setValue(_:forKey:)(v25, v27, v21, v23);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CNContact, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t ClarityUIContactsList.deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList__contactCache;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, ClarityUIContact>);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC15ConversationKit21ClarityUIContactsList___observationRegistrar;
  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v4 + 8))(v3);
  return v0;
}

uint64_t ClarityUIContactsList.__deallocating_deinit()
{
  ClarityUIContactsList.deinit();
  return swift_deallocClassInstance();
}

void *outlined consume of ClarityUIContact?(void *result, void *a2)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C3410E48@<X0>(uint64_t a1@<X8>)
{
  return ClarityUIContactsList.contactCache.getter(a1);
}

uint64_t partial apply for closure #1 in ClarityUIContactsList.allContactIdentifiers.setter()
{
  return closure #1 in ClarityUIContactsList.allContactIdentifiers.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3410E8C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ClarityUIContactsList.init()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in AsyncCancellableTimer.wait(with:);
  uint64_t v2 = OUTLINED_FUNCTION_10_4();
  return closure #1 in ClarityUIContactsList.init()(v2, v3, v4, v5);
}

uint64_t ObjC metadata update function for ClarityUIContactsList()
{
  return type metadata accessor for ClarityUIContactsList();
}

void type metadata completion function for ClarityUIContactsList()
{
  type metadata accessor for Cache<String, ClarityUIContact>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ClarityUIContactsList(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClarityUIContactsList);
}

uint64_t dispatch thunk of ClarityUIContactsList.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for Cache<String, ClarityUIContact>()
{
  if (!lazy cache variable for type metadata for Cache<String, ClarityUIContact>)
  {
    unint64_t v0 = type metadata accessor for Cache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Cache<String, ClarityUIContact>);
    }
  }
}

uint64_t sub_1C3411108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ClarityUIContactsList.contactStoreDidUpdateTask.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ClarityUIContactsList.contactStoreDidUpdateTask.setter()
{
  return closure #1 in ClarityUIContactsList.contactStoreDidUpdateTask.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in ClarityUIContactsList.updateFromContactStore()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in AsyncCancellableTimer.wait(with:);
  uint64_t v2 = OUTLINED_FUNCTION_10_4();
  return closure #1 in ClarityUIContactsList.updateFromContactStore()(v2, v3, v4, v5);
}

uint64_t sub_1C34111FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ClarityUIContactsList.fetchContactIdentifiers()(void *a1)
{
  return closure #1 in ClarityUIContactsList.fetchContactIdentifiers()(a1);
}

uint64_t sub_1C341123C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed CNContact, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_13;
    }
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v19 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v20 = v19 + 16;
      uint64_t v21 = v6 - 16;
      if (StringProtocol.localizedStandardCompare<A>(_:)() == -1)
      {
        BOOL v24 = v20 != v6 || v19 >= v6;
        v6 -= 16;
        if (!v24) {
          goto LABEL_33;
        }
      }
      else
      {
        BOOL v22 = v20 != v12 || v19 >= v12;
        uint64_t v21 = v12 - 16;
        v12 -= 16;
        if (!v22) {
          goto LABEL_33;
        }
      }
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
LABEL_33:
      v19 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_13;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    lazy protocol witness table accessor for type String and conformance String();
    while (StringProtocol.localizedStandardCompare<A>(_:)() != -1)
    {
      uint64_t v16 = v4;
      BOOL v17 = v7 == v4;
      v4 += 16;
      if (!v17) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_7;
      }
    }
    uint64_t v16 = v6;
    BOOL v17 = v7 == v6;
    v6 += 16;
    if (v17) {
      goto LABEL_17;
    }
LABEL_16:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    goto LABEL_17;
  }
LABEL_7:
  uint64_t v6 = v7;
LABEL_13:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 16, v6);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;

  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    id v18 = (char *)(a3 - 16);
    while (1)
    {
      unint64_t v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      uint64_t v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)id v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      id v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v15 = v4;
      id v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    unint64_t v15 = v6;
    id v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  long long v17;
  long long v18;
  unint64_t v20;
  char *v21;
  BOOL v22;
  char *v23;
  BOOL v24;
  BOOL v25;
  long long v26;
  long long v27;

  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 40, a4);
    uint64_t v12 = &v4[40 * v11];
    if (v7 >= v6 || v10 < 40) {
      goto LABEL_49;
    }
    uint64_t v20 = a3 - 40;
    while (1)
    {
      uint64_t v21 = (char *)(v20 + 40);
      BOOL v22 = *((void *)v12 - 3) == *((void *)v6 - 3) && *((void *)v12 - 2) == *((void *)v6 - 2);
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v23 = v12 - 40;
        uint64_t v25 = v21 != v12 || v20 >= (unint64_t)v12;
        v12 -= 40;
        if (!v25) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v23 = v6 - 40;
        BOOL v24 = v21 != v6 || v20 >= (unint64_t)v6;
        v6 -= 40;
        if (!v24) {
          goto LABEL_45;
        }
      }
      uint64_t v26 = *(_OWORD *)v23;
      uint64_t v27 = *((_OWORD *)v23 + 1);
      *(void *)(v20 + 32) = *((void *)v23 + 4);
      *(_OWORD *)uint64_t v20 = v26;
      *(_OWORD *)(v20 + 16) = v27;
LABEL_45:
      v20 -= 40;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_49;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 40, a4);
  uint64_t v12 = &v4[40 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    do
    {
      char v13 = *((void *)v6 + 2) == *((void *)v4 + 2) && *((void *)v6 + 3) == *((void *)v4 + 3);
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        char v13 = v7 == v4;
        id v14 = v4;
        v4 += 40;
        if (v13 && v7 < v4) {
          goto LABEL_20;
        }
      }
      else
      {
        char v13 = v7 == v6;
        id v14 = v6;
        v6 += 40;
        if (v13 && v7 < v6) {
          goto LABEL_20;
        }
      }
      BOOL v17 = *(_OWORD *)v14;
      id v18 = *((_OWORD *)v14 + 1);
      *((void *)v7 + 4) = *((void *)v14 + 4);
      *(_OWORD *)uint64_t v7 = v17;
      *((_OWORD *)v7 + 1) = v18;
LABEL_20:
      v7 += 40;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  uint64_t v6 = v7;
LABEL_49:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 40, v6);
  return 1;
}

uint64_t partial apply for closure #1 in ClarityUIContactsList.contactCache.setter()
{
  return closure #1 in ClarityUIContactsList.contactCache.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t static CatalystFeatureFlags.catalystClientEnabled.getter()
{
  return 0;
}

uint64_t CatalystFeatureFlags.deinit()
{
  return v0;
}

uint64_t CatalystFeatureFlags.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CatalystFeatureFlags.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t CatalystFeatureFlags.init()()
{
  return v0;
}

uint64_t type metadata accessor for CatalystFeatureFlags()
{
  return self;
}

uint64_t method lookup function for CatalystFeatureFlags(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CatalystFeatureFlags);
}

uint64_t dispatch thunk of CatalystFeatureFlags.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

id LinkShareCoordinator.__allocating_init(type:hostViewController:originatingView:)()
{
  id v0 = objc_allocWithZone((Class)OUTLINED_FUNCTION_1_120());
  return LinkShareCoordinator.init(type:hostViewController:originatingView:)();
}

void LinkShareCoordinator.start(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_type);
  char v6 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_type + 8);
  if (v6)
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    LinkShareCoordinator.start(for:with:)(v7, a1, a2);
  }
  else
  {
    LinkShareCoordinator.start(for:with:)((uint64_t)v5, a1, a2);
  }
  outlined consume of LinkShareCoordinatorType(v5, v6);
}

id LinkShareCoordinator.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_type);
  char v3 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_type + 8);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of LinkShareCoordinatorType(v2, v3);
}

uint64_t LinkShareCoordinator.hostViewController.getter()
{
  return OUTLINED_FUNCTION_0_92();
}

uint64_t LinkShareCoordinator.originatingView.getter()
{
  return OUTLINED_FUNCTION_0_92();
}

id LinkShareCoordinator.init(type:hostViewController:originatingView:)()
{
  OUTLINED_FUNCTION_1_120();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = *v3;
  char v6 = *((unsigned char *)v3 + 8);
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_shareSheetViewController] = 0;
  uint64_t v7 = &v1[OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_type];
  *(void *)uint64_t v7 = v5;
  v7[8] = v6;
  swift_unknownObjectUnownedInit();
  swift_unknownObjectUnownedInit();
  v10.receiver = v1;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id LinkShareCoordinator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void LinkShareCoordinator.init()()
{
}

id LinkShareCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void LinkShareCoordinator.start(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBF0]), sel_initWithTUConversationLink_, a1);
  uint64_t v8 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUStringShareItem);
  id v9 = objc_msgSend(self, sel_conversationKit);
  v44._unint64_t object = (void *)0xE000000000000000;
  v10._unint64_t object = (void *)0x80000001C3799820;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._unint64_t object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = TUStringShareItem.__allocating_init(message:)(v13._countAndFlagsBits, (uint64_t)v13._object);
  type metadata accessor for LinkShareActivityViewController();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C37696D0;
  uint64_t v16 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TULinkShareItem);
  *(void *)(v15 + 32) = v7;
  *(void *)(v15 + 88) = v8;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v14;
  id v17 = v7;
  id v18 = v14;
  id v19 = LinkShareActivityViewController.__allocating_init(activityItems:applicationActivities:)(v15, 0);
  objc_msgSend(v19, sel_setOverrideUserInterfaceStyle_, 2);
  objc_msgSend(v19, sel_setAllowsCustomPresentationStyle_, 1);
  id v20 = objc_msgSend(self, sel_currentDevice);
  id v21 = objc_msgSend(v20, sel_userInterfaceIdiom);

  if (v21 == (id)1)
  {
    uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    id v23 = objc_msgSend(Strong, sel_traitCollection);

    id v24 = objc_msgSend(v23, sel_horizontalSizeClass);
    if (v24 == (id)2) {
      objc_msgSend(v19, sel_setModalPresentationStyle_, 2);
    }
  }
  id v25 = objc_msgSend(v19, sel_popoverPresentationController);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = (void *)swift_unknownObjectUnownedLoadStrong();
    objc_msgSend(v26, sel_setSourceView_, v27);

    if (static Platform.current.getter() != 3)
    {
      uint64_t v28 = (void *)swift_unknownObjectUnownedLoadStrong();
      objc_msgSend(v28, sel_bounds);
      double v30 = v29;
      double v32 = v31;
      double v34 = v33;
      double v36 = v35;

      objc_msgSend(v26, sel_setSourceRect_, v30, v32, v34, v36);
      objc_msgSend(v26, sel_setCanOverlapSourceViewRect_, 1);
    }
  }
  int v37 = (void *)swift_allocObject();
  v37[2] = a2;
  v37[3] = a3;
  v37[4] = v17;
  aBlock[4] = partial apply for closure #1 in LinkShareCoordinator.start(for:with:);
  aBlock[5] = v37;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIActivityType?, @unowned Bool, @guaranteed [Any]?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_69;
  uint64_t v38 = _Block_copy(aBlock);
  id v39 = v17;
  id v40 = v19;
  swift_retain();
  swift_release();
  objc_msgSend(v40, sel_setCompletionWithItemsHandler_, v38);
  _Block_release(v38);

  uint64_t v41 = (void *)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(v41, sel_presentViewController_animated_completion_, v40, 1, 0);

  os_log_type_t v42 = *(void **)(v4 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_shareSheetViewController);
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_shareSheetViewController) = v40;
}

{
  id v5;
  id v6;
  Class isa;
  uint64_t v8;
  void *v9;
  void *v10;
  void v11[6];

  uint64_t v5 = objc_msgSend(self, sel_sharedInstance);
  char v6 = objc_msgSend(v5, sel_conversationManager);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v9 = (void *)swift_allocObject();
  void v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  id v11[4] = partial apply for closure #1 in LinkShareCoordinator.start(for:with:);
  v11[5] = v9;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
  v11[3] = &block_descriptor_12_3;
  Swift::String v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_generateLinkWithInvitedMemberHandles_linkLifetimeScope_completionHandler_, isa, 0, v10);
  _Block_release(v10);
}

void outlined consume of LinkShareCoordinatorType(void *a1, char a2)
{
  if (a2) {
    swift_bridgeObjectRelease();
  }
  else {
}
  }

id outlined copy of LinkShareCoordinatorType(void *a1, char a2)
{
  if (a2) {
    return (id)swift_bridgeObjectRetain();
  }
  else {
    return a1;
  }
}

Swift::Void __swiftcall LinkShareCoordinator.stop()()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit20LinkShareCoordinator_shareSheetViewController);
  if (v1) {
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

id protocol witness for LinkShareCoordinatorProtocol.init(type:hostViewController:originatingView:) in conformance LinkShareCoordinator@<X0>(void *a1@<X8>)
{
  id result = LinkShareCoordinator.__allocating_init(type:hostViewController:originatingView:)();
  *a1 = result;
  return result;
}

void protocol witness for LinkShareCoordinatorProtocol.start(with:) in conformance LinkShareCoordinator(uint64_t a1, uint64_t a2)
{
}

void protocol witness for LinkShareCoordinatorProtocol.stop() in conformance LinkShareCoordinator()
{
}

uint64_t initializeBufferWithCopyOfBuffer for LinkShareCoordinatorType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LinkShareCoordinatorType(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for LinkShareCoordinatorType(uint64_t a1)
{
}

uint64_t assignWithCopy for LinkShareCoordinatorType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LinkShareCoordinatorType(*(void **)a2, v4);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of LinkShareCoordinatorType(v5, v6);
  return a1;
}

uint64_t assignWithTake for LinkShareCoordinatorType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of LinkShareCoordinatorType(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for LinkShareCoordinatorType()
{
  return &type metadata for LinkShareCoordinatorType;
}

uint64_t dispatch thunk of LinkShareCoordinatorProtocol.init(type:hostViewController:originatingView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of LinkShareCoordinatorProtocol.start(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of LinkShareCoordinatorProtocol.stop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for LinkShareCoordinator()
{
  return self;
}

uint64_t method lookup function for LinkShareCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkShareCoordinator);
}

uint64_t dispatch thunk of LinkShareCoordinator.__allocating_init(type:hostViewController:originatingView:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t closure #1 in LinkShareCoordinator.start(for:with:)(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
    id v10 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v13 = v12;
    *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = a2 & 1;
    uint64_t v15 = a7;
  }
  return a5(v14, v15);
}

void closure #1 in LinkShareCoordinator.start(for:with:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a3 + 16;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x1C8776240](v9);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    if (a1)
    {
      uint64_t v12 = one-time initialization token for conversationKit;
      id v13 = a1;
      if (v12 != -1) {
        swift_once();
      }
      static os_log_type_t.info.getter();
      os_log(_:dso:log:type:_:)();
      LinkShareCoordinator.start(for:with:)((uint64_t)v13, a4, a5);
    }
    else
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1C3769620;
      if (a2)
      {
        id v15 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v16 = String.init<A>(reflecting:)();
        unint64_t v18 = v17;
      }
      else
      {
        unint64_t v18 = 0xE300000000000000;
        uint64_t v16 = 7104878;
      }
      *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v14 + 32) = v16;
      *(void *)(v14 + 40) = v18;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1C3412ADC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LinkShareCoordinator.start(for:with:)(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  return closure #1 in LinkShareCoordinator.start(for:with:)(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t sub_1C3412B28()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C3412B60()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in LinkShareCoordinator.start(for:with:)(void *a1, void *a2)
{
  closure #1 in LinkShareCoordinator.start(for:with:)(a1, a2, v2[2], v2[3], v2[4]);
}

id HeldInCallControlsView.Style.backgroundColor.getter()
{
  if (*v0 == 1) {
    return objc_msgSend(self, sel_blackColor);
  }
  else {
    return 0;
  }
}

double HeldInCallControlsView.Style.avatarDiameter.getter()
{
  double result = 50.0;
  if (*v0) {
    return 60.0;
  }
  return result;
}

double HeldInCallControlsView.Style.avatarMargins.getter()
{
  double result = 14.0;
  if (*v0) {
    return 20.0;
  }
  return result;
}

double HeldInCallControlsView.Style.brandedIconTrailingSpacer.getter()
{
  return 4.0;
}

id HeldInCallControlsView.Style.primaryFont.getter()
{
  int v1 = *v0;
  objc_super v2 = self;
  double v3 = 16.67;
  if (v1) {
    double v3 = 20.0;
  }
  id v4 = objc_msgSend(v2, sel_systemFontOfSize_weight_, v3, *MEMORY[0x1E4FB09D0]);
  return v4;
}

id HeldInCallControlsView.Style.secondaryFont.getter()
{
  int v1 = *v0;
  objc_super v2 = self;
  double v3 = 14.0;
  if (v1) {
    double v3 = 17.0;
  }
  id v4 = objc_msgSend(v2, sel_systemFontOfSize_weight_, v3, *MEMORY[0x1E4FB09D8]);
  return v4;
}

double HeldInCallControlsView.Style.textTopInset.getter()
{
  return 17.0;
}

double HeldInCallControlsView.Style.textBottomInset.getter()
{
  return 17.0;
}

double HeldInCallControlsView.Style.minimumTextWidth.getter()
{
  return 156.0;
}

double HeldInCallControlsView.Style.actionMargins.getter()
{
  double result = 17.0;
  if (*v0) {
    return 20.0;
  }
  return result;
}

BOOL static HeldInCallControlsView.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void HeldInCallControlsView.Style.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int HeldInCallControlsView.Style.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *HeldInCallControlsView.__allocating_init(callCenter:style:)(NSObject *a1, char *a2)
{
  double v3 = a1;
  char v4 = *a2;
  uint64_t v5 = [a1 callWithStatus:1];
  if (v5)
  {
    char v6 = v5;
    id v7 = [v3 callWithStatus:2];
    if (v7)
    {
      id v8 = v7;
      id v9 = [v3 activeConversationForCall:v7];
      type metadata accessor for ConversationControlsManager(0);
      uint64_t v10 = v6;
      uint64_t v11 = ConversationControlsManager.__allocating_init(activeCall:)();
      char v21 = v4;
      uint64_t v12 = (void *)(*(uint64_t (**)(id, id, char *, void, void, char *))(v2 + 160))(v8, v9, v11, 0, 0, &v21);

      double v3 = v12;
      if (!v12) {
        return v12;
      }
      goto LABEL_15;
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationControls);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl(&dword_1C2F90000, v14, v18, "unable to create held call controls: no held call in container", v19, 2u);
      OUTLINED_FUNCTION_3();
    }
    else
    {

      uint64_t v14 = v3;
      double v3 = v6;
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C2F90000, v14, v15, "unable to create held call controls: no active call in container", v16, 2u);
      OUTLINED_FUNCTION_3();
    }
  }

  uint64_t v12 = 0;
LABEL_15:

  return v12;
}

char *HeldInCallControlsView.__allocating_init(heldCall:heldConversation:controlsManager:menuHostViewController:style:)(void *a1, void *a2, void *a3, void *a4, char *a5, unsigned __int8 *a6)
{
  id v13 = objc_allocWithZone(v6);
  return HeldInCallControlsView.init(heldCall:heldConversation:controlsManager:menuHostViewController:style:)(a1, a2, a3, a4, a5, a6);
}

char *HeldInCallControlsView.init(heldCall:heldConversation:controlsManager:menuHostViewController:style:)(void *a1, void *a2, void *a3, void *a4, char *a5, unsigned __int8 *a6)
{
  id v7 = v6;
  uint64_t v99 = a5;
  id v100 = a2;
  id v103 = a3;
  id v104 = a4;
  uint64_t v10 = type metadata accessor for ConversationControlsAction();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v102) = *a6;
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_avatar;
  *(void *)((char *)v7 + OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_avatar) = 0;
  uint64_t v14 = (char *)OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_primaryLabel;
  id v15 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v16 = v7;
  *(void *)&v14[(void)v7] = objc_msgSend(v15, sel_init, v99);
  uint64_t v17 = (char *)OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_secondaryLabel;
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v101 = v17;
  *(void *)&v17[(void)v16] = v18;
  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_blurView;
  id v20 = objc_msgSend(self, sel_effectWithStyle_, 18);
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v20);

  *(void *)((char *)v16 + v19) = v21;
  BOOL v22 = a1;
  if (objc_msgSend(a1, sel_isOnHold))
  {
    *((unsigned char *)v16 + OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_style) = v102;
    swift_storeEnumTagMultiPayload();
    ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
    id v23 = a1;
    uint64_t v25 = v24;
    outlined destroy of ConversationControlsAction((uint64_t)v12);
    *(void *)((char *)v16 + OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_swapButton) = v25;
    uint64_t v26 = self;
    id v27 = v100;
    uint64_t v28 = (char *)v100;
    double v29 = v23;
    uint64_t v30 = specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v29, v27, 0, objc_msgSend(v26, sel_clearColor));
    double v31 = *(void **)((char *)v7 + v13);
    *(void *)((char *)v7 + v13) = v30;

    id v32 = *(id *)&v14[(void)v7];
    uint64_t v99 = v29;
    if (v27) {
      double v33 = v28;
    }
    else {
      double v33 = v29;
    }
    id v43 = objc_msgSend(v33, sel_displayName, v99);
    id v100 = v26;
    id v44 = v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;

    outlined bridged method (mbnn) of @objc UILabel.text.setter(v45, v47, v32);
    uint64_t v48 = one-time initialization token for conversationKit;
    id v49 = *(id *)&v101[(void)v16];
    if (v48 != -1) {
      swift_once();
    }
    uint64_t v50 = unk_1EA37DFA0;
    uint64_t v51 = (void *)qword_1EA37DFA8;
    id v52 = (id)static LocalizationSource.conversationKit;
    swift_bridgeObjectRetain();
    v106._unint64_t object = (void *)0xE000000000000000;
    v53._unint64_t object = (void *)0x80000001C37AD4D0;
    v53._uint64_t countAndFlagsBits = 0xD000000000000017;
    v54.value._uint64_t countAndFlagsBits = v50;
    v54.value._unint64_t object = v51;
    v55._uint64_t countAndFlagsBits = 0;
    v55._unint64_t object = (void *)0xE000000000000000;
    v106._uint64_t countAndFlagsBits = 0;
    Swift::String v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, (NSBundle)v52, v55, v106);
    swift_bridgeObjectRelease();

    outlined bridged method (mbnn) of @objc UILabel.text.setter(v56._countAndFlagsBits, (uint64_t)v56._object, v49);
    *(void *)((char *)v16 + OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_brandedIconView) = 0;

    uint64_t v57 = (objc_class *)type metadata accessor for HeldInCallControlsView();
    v105.receiver = v16;
    v105.super_class = v57;
    os_log_type_t v42 = (char *)objc_msgSendSuper2(&v105, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    id v58 = objc_msgSend(v100, sel_clearColor);
    objc_msgSend(v42, sel_setBackgroundColor_, v58);

    uint64_t v59 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_blurView;
    objc_msgSend(v42, sel_addSubview_, *(void *)&v42[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_blurView]);
    uint64_t v60 = *(void **)&v42[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_avatar];
    if (v60)
    {
      uint64_t v61 = v42;
      id v62 = v60;
      id v63 = objc_msgSend(v62, sel_view);
      objc_msgSend(v61, sel_addSubview_, v63);
    }
    uint64_t v101 = v28;
    id v64 = objc_msgSend(*(id *)&v42[v59], sel_contentView);
    uint64_t v65 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_primaryLabel;
    objc_msgSend(v64, sel_addSubview_, *(void *)&v42[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_primaryLabel]);

    id v66 = objc_msgSend(*(id *)&v42[v59], sel_contentView);
    uint64_t v67 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_secondaryLabel;
    objc_msgSend(v66, sel_addSubview_, *(void *)&v42[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_secondaryLabel]);

    id v68 = objc_msgSend(*(id *)&v42[v59], sel_contentView);
    objc_msgSend(v68, sel_addSubview_, *(void *)&v42[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_swapButton]);

    uint64_t v69 = *(void **)&v42[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_brandedIconView];
    if (v69)
    {
      id v70 = *(void **)&v42[v59];
      id v71 = v69;
      id v72 = objc_msgSend(v70, sel_contentView);
      objc_msgSend(v72, sel_addSubview_, v71);
    }
    uint64_t v73 = *(void **)&v42[v65];
    uint64_t v74 = self;
    double v75 = *MEMORY[0x1E4FB09D0];
    id v76 = v73;
    int v77 = v102;
    double v78 = 16.67;
    if (v102)
    {
      double v78 = 20.0;
      double v79 = 17.0;
    }
    else
    {
      double v79 = 14.0;
    }
    id v80 = objc_msgSend(v74, sel_systemFontOfSize_weight_, v78, v75);
    objc_msgSend(v76, sel_setFont_, v80);

    id v81 = *(id *)&v42[v65];
    id v82 = v100;
    id v83 = objc_msgSend(v100, sel_whiteColor);
    objc_msgSend(v81, sel_setTextColor_, v83);

    id v84 = *(void **)&v42[v67];
    id v85 = self;
    double v86 = *MEMORY[0x1E4FB09D8];
    id v87 = v84;
    id v88 = objc_msgSend(v85, sel_systemFontOfSize_weight_, v79, v86);
    objc_msgSend(v87, sel_setFont_, v88);

    uint64_t v89 = *(void **)&v42[v67];
    id v90 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
    id v91 = v89;
    id v92 = objc_msgSend(v90, sel_initWithWhite_alpha_, 1.0, 0.4);
    objc_msgSend(v91, sel_setTextColor_, v92);

    if (v77 && (id v93 = objc_msgSend(v82, sel_blackColor)) != 0)
    {
      uint64_t v94 = v93;
      id v95 = objc_msgSend(*(id *)&v42[v59], sel_contentView);
      objc_msgSend(v95, sel_setBackgroundColor_, v94);

      id v96 = *(id *)&v42[v59];
      objc_msgSend(v96, sel_setEffect_, 0);

      id v97 = v104;
    }
    else
    {

      id v97 = v101;
    }
  }
  else
  {
    uint64_t v102 = v13;
    uint64_t v99 = v14;
    id v34 = v100;
    id v36 = v103;
    id v35 = v104;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationControls);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v40 = 0;
      _os_log_impl(&dword_1C2F90000, v38, v39, "Unable to make HeldInCallControlsView for call that is not on hold", v40, 2u);
      OUTLINED_FUNCTION_3();
    }

    uint64_t v41 = *(void **)((char *)v16 + v19);
    type metadata accessor for HeldInCallControlsView();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v42;
}

id HeldInCallControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void HeldInCallControlsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_avatar] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_primaryLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_secondaryLabel;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_blurView;
  id v4 = objc_msgSend(self, sel_effectWithStyle_, 18);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v4);

  *(void *)&v0[v3] = v5;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall HeldInCallControlsView.layoutSubviews()()
{
  uint64_t v2 = v0;
  swift_getObjectType();
  v126.receiver = v0;
  v126.super_class = (Class)type metadata accessor for HeldInCallControlsView();
  objc_msgSendSuper2(&v126, sel_layoutSubviews);
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_blurView];
  OUTLINED_FUNCTION_4_97();
  objc_msgSend(v3, sel_setFrame_);
  OUTLINED_FUNCTION_4_97();
  objc_msgSend(v3, sel__setContinuousCornerRadius_, CGRectGetHeight(v127) * 0.5);
  int v4 = v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_style];
  if (v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_style]) {
    double v5 = 20.0;
  }
  else {
    double v5 = 16.0;
  }
  if (v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_style]) {
    double v6 = 60.0;
  }
  else {
    double v6 = 50.0;
  }
  OUTLINED_FUNCTION_4_97();
  double v7 = (CGRectGetHeight(v128) - v6) * 0.5;
  uint64_t v112 = OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_avatar;
  id v8 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_avatar];
  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_view);
    double v10 = OUTLINED_FUNCTION_17_43();
    objc_msgSend(v11, v12, v10);
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_9_69(v15))
  {
    OUTLINED_FUNCTION_15_1();
    v125[0] = OUTLINED_FUNCTION_8_64();
    *uint64_t v1 = 136446466;
    uint64_t v16 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v125);
    OUTLINED_FUNCTION_13_60();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    double v122 = v7;
    double v123 = v6;
    double v124 = v6;
    type metadata accessor for CGRect(0);
    uint64_t v18 = String.init<A>(reflecting:)();
    unint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_9(&dword_1C2F90000, v20, v21, "[%{public}s][layout] leadingFrame is %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_4_97();
  double Width = CGRectGetWidth(v129);
  OUTLINED_FUNCTION_4_97();
  double Height = CGRectGetHeight(v130);
  double v24 = -10.0;
  if (v4) {
    double v24 = -13.0;
  }
  double v25 = v24 + Width;
  if (v4) {
    double v26 = 20.0;
  }
  else {
    double v26 = 17.0;
  }
  double v27 = -17.0;
  if (v4) {
    double v27 = -20.0;
  }
  double v111 = v26;
  uint64_t v28 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_swapButton];
  objc_msgSend(v28, sel_sizeThatFits_, v25 - v5, v27 + Height - v26);
  double v30 = v29;
  double v32 = v31;
  OUTLINED_FUNCTION_4_97();
  CGFloat v33 = CGRectGetWidth(v131) - v5 - v30;
  OUTLINED_FUNCTION_4_97();
  double v34 = (CGRectGetHeight(v132) - v32) * 0.5;
  objc_msgSend(v28, sel_setFrame_, v33, v34, v30, v32);
  id v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  double v109 = v32;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = OUTLINED_FUNCTION_15_1();
    v125[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136446466;
    uint64_t v38 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v125);
    OUTLINED_FUNCTION_13_60();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    double v122 = v34;
    double v123 = v30;
    double v124 = v32;
    type metadata accessor for CGRect(0);
    uint64_t v40 = String.init<A>(reflecting:)();
    unint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v35, v36, "[%{public}s][layout] swapFrame is %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  v133.origin.x = OUTLINED_FUNCTION_17_43();
  double MaxX = CGRectGetMaxX(v133);
  if (v4) {
    double v43 = 13.0;
  }
  else {
    double v43 = 9.0;
  }
  if (v4) {
    double v44 = 13.0;
  }
  else {
    double v44 = 10.0;
  }
  objc_msgSend(v2, sel_bounds, *(void *)&v109);
  double v45 = CGRectGetWidth(v134);
  uint64_t v46 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_primaryLabel];
  id v47 = objc_msgSend(v46, sel_font);
  if (!v47)
  {
    __break(1u);
LABEL_85:
    __break(1u);
    return;
  }
  uint64_t v48 = v47;
  objc_msgSend(v47, sel_lineHeight);
  double v120 = v49;

  uint64_t v50 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_brandedIconView];
  CGFloat v114 = v7;
  CGFloat rect = v6;
  if (v50)
  {
    if (one-time initialization token for iconSize != -1) {
      swift_once();
    }
    double v51 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
    double v52 = *(double *)&static BrandedIconView.Constants.iconSize;
  }
  else
  {
    double v52 = 0.0;
    double v51 = 0.0;
  }
  Swift::String v53 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_secondaryLabel];
  id v54 = objc_msgSend(v53, sel_font);
  if (!v54) {
    goto LABEL_85;
  }
  Swift::String v55 = v54;
  CGFloat v113 = v5;
  double v56 = v5 + v44 + v30;
  double v57 = v43 + MaxX;
  double v58 = v45 - v56 - (v43 + MaxX);
  objc_msgSend(v54, sel_lineHeight);
  double v60 = v59;

  if (v60 > v51) {
    double v61 = v60;
  }
  else {
    double v61 = v51;
  }
  double v62 = v120 + v61;
  objc_msgSend(v2, sel_bounds);
  double v63 = (CGRectGetHeight(v135) - v62) * 0.5;
  v136.origin.x = OUTLINED_FUNCTION_15_57();
  CGRectGetMaxY(v136);
  double v64 = (v60 - v51) * 0.5;
  if (v50) {
    double v65 = v57;
  }
  else {
    double v65 = 0.0;
  }
  if (!v50) {
    double v64 = 0.0;
  }
  double v118 = v64;
  double v119 = v65;
  if (v50) {
    double v66 = v52;
  }
  else {
    double v66 = 0.0;
  }
  if (v50) {
    double v67 = v51;
  }
  else {
    double v67 = 0.0;
  }
  double v117 = v67;
  double v68 = OUTLINED_FUNCTION_15_57();
  objc_msgSend(v69, v70, v68);
  double v71 = OUTLINED_FUNCTION_11_51();
  objc_msgSend(v72, v73, v71);
  if (v50) {
    objc_msgSend(v50, sel_setBounds_, v119, v118, v66, v117);
  }
  v137.origin.x = v113;
  v137.origin.double y = v114;
  v137.size.width = rect;
  v137.size.height = rect;
  double MaxY = CGRectGetMaxY(v137);
  v138.origin.x = v57;
  v138.origin.double y = v63;
  v138.size.width = v58;
  v138.size.height = v120;
  double MinY = CGRectGetMinY(v138);
  v139.origin.x = OUTLINED_FUNCTION_11_51();
  double v75 = CGRectGetMaxY(v139);
  v140.origin.double y = v118;
  v140.origin.x = v119;
  v140.size.width = v66;
  v140.size.height = v117;
  double v76 = CGRectGetMaxY(v140);
  int v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    if (v75 > v76) {
      double v79 = v75;
    }
    else {
      double v79 = v76;
    }
    double v80 = MinY + v79;
    double v81 = 14.0;
    if (v4) {
      double v81 = 20.0;
    }
    double v82 = v81 + MaxY;
    uint64_t v83 = swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v83 = 136446978;
    unint64_t v121 = v84;
    uint64_t v85 = _typeName(_:qualified:)();
    v125[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2048;
    *(double *)uint64_t v125 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v83 + 22) = 2048;
    *(double *)uint64_t v125 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v83 + 32) = 2048;
    *(double *)uint64_t v125 = v111 + v111 + v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v77, v78, "[%{public}s][layout] avatarMaxY: %f, textMaxY: %f, %f", (uint8_t *)v83, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (objc_msgSend(v2, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C376BA00;
    id v88 = *(id *)&v2[v112];
    if (v88) {
      id v88 = objc_msgSend(v88, sel_view);
    }
    *(void *)(inited + 32) = v88;
    *(void *)(inited + 40) = v53;
    *(void *)(inited + 48) = v46;
    *(void *)(inited + 56) = v28;
    *(void *)(inited + 64) = v50;
    unint64_t v121 = inited;
    specialized Array._endMutation()();
    uint64_t v89 = (void *)v121;
    unint64_t v121 = MEMORY[0x1E4FBC860];
    id v90 = (void *)v89[4];
    if (v90)
    {
      id v91 = v90;
      id v92 = v53;
      id v93 = v46;
      id v94 = v28;
      MEMORY[0x1C87733A0](v50);
      if (*(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      id v95 = v50;
      id v96 = v53;
      id v97 = v46;
      id v98 = v28;
    }
    uint64_t v99 = (void *)v89[5];
    if (v99)
    {
      id v100 = v99;
      OUTLINED_FUNCTION_10_63();
      OUTLINED_FUNCTION_2_108();
      if (v101) {
        OUTLINED_FUNCTION_1_121();
      }
      OUTLINED_FUNCTION_5_101();
      specialized Array._endMutation()();
    }
    uint64_t v102 = (void *)v89[6];
    if (v102)
    {
      id v103 = v102;
      OUTLINED_FUNCTION_10_63();
      OUTLINED_FUNCTION_2_108();
      if (v101) {
        OUTLINED_FUNCTION_1_121();
      }
      OUTLINED_FUNCTION_5_101();
      specialized Array._endMutation()();
    }
    id v104 = (void *)v89[7];
    if (v104)
    {
      id v105 = v104;
      OUTLINED_FUNCTION_10_63();
      OUTLINED_FUNCTION_2_108();
      if (v101) {
        OUTLINED_FUNCTION_1_121();
      }
      OUTLINED_FUNCTION_5_101();
      specialized Array._endMutation()();
    }
    Swift::String v106 = (void *)v89[8];
    if (v106)
    {
      id v107 = v106;
      OUTLINED_FUNCTION_10_63();
      OUTLINED_FUNCTION_2_108();
      if (v101) {
        OUTLINED_FUNCTION_1_121();
      }
      OUTLINED_FUNCTION_5_101();
      specialized Array._endMutation()();
    }
    unint64_t v108 = v121;
    swift_bridgeObjectRelease();
    specialized Sequence.forEach(_:)(v108, v2);
    swift_bridgeObjectRelease();
  }
}

CGSize __swiftcall HeldInCallControlsView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  swift_getObjectType();
  if (height <= 2.22507386e-308) {
    double height = 1.79769313e308;
  }
  double v84 = width;
  double v85 = height;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  double v6 = (void *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_9_69(v7))
  {
    OUTLINED_FUNCTION_15_1();
    uint64_t v81 = OUTLINED_FUNCTION_8_64();
    _DWORD *v2 = 136446466;
    uint64_t v8 = _typeName(_:qualified:)();
    OUTLINED_FUNCTION_12_55(v8, v9, v10, v11, v12, v13);
    OUTLINED_FUNCTION_6_93();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    double v83 = height;
    type metadata accessor for CGSize(0);
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v82 = OUTLINED_FUNCTION_12_55(v14, v15, v16, v17, v18, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_9(&dword_1C2F90000, v20, v21, "[%{public}s][sizing] sizingThatFits %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(v1, sel_bounds);
  double v22 = CGRectGetWidth(v86);
  int v23 = v1[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_style];
  objc_msgSend(v1, sel_bounds);
  double v24 = CGRectGetHeight(v87);
  double v25 = 20.0;
  if (v23) {
    double v26 = 20.0;
  }
  else {
    double v26 = 16.0;
  }
  double v27 = -10.0;
  if (v23) {
    double v27 = -13.0;
  }
  double v28 = v22 + v27;
  if (!v23) {
    double v25 = 17.0;
  }
  double v29 = -17.0;
  if (v23) {
    double v29 = -20.0;
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_swapButton], sel_sizeThatFits_, v28 - v26, v29 + v24 - v25);
  double v31 = v30;
  double v33 = v32;
  double v34 = (void *)Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_9_69(v35))
  {
    OUTLINED_FUNCTION_15_1();
    uint64_t v81 = OUTLINED_FUNCTION_8_64();
    _DWORD *v2 = 136446466;
    uint64_t v36 = _typeName(_:qualified:)();
    OUTLINED_FUNCTION_12_55(v36, v37, v38, v39, v40, v41);
    OUTLINED_FUNCTION_6_93();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    double v83 = v33;
    type metadata accessor for CGSize(0);
    uint64_t v42 = String.init<A>(reflecting:)();
    uint64_t v82 = OUTLINED_FUNCTION_12_55(v42, v43, v44, v45, v46, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_9(&dword_1C2F90000, v48, v49, "[%{public}s][sizing] actionsSize is  %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (v23) {
    double v50 = 93.0;
  }
  else {
    double v50 = 75.0;
  }
  double v51 = 10.0;
  if (v23) {
    double v51 = 13.0;
  }
  double v52 = v26 + v51 + v31;
  double v53 = 0.0;
  double v54 = 0.0;
  if (*(void *)&v1[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_brandedIconView])
  {
    if (one-time initialization token for iconSize != -1) {
      swift_once();
    }
    double v53 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
    double v54 = *(double *)&static BrandedIconView.Constants.iconSize;
  }
  if (v54 <= 0.0) {
    double v55 = 0.0;
  }
  else {
    double v55 = v54 + 4.0;
  }
  double v56 = width - v52 - v50;
  double v57 = v56 - v55;
  swift_beginAccess();
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_primaryLabel], sel_sizeThatFits_, v56, v85);
  double v59 = v58;
  double v61 = v60;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit22HeldInCallControlsView_secondaryLabel], sel_sizeThatFits_, v57, v85 - v60);
  if (v59 > v62) {
    double v64 = v59;
  }
  else {
    double v64 = v62;
  }
  if (v63 > v53) {
    double v65 = v63;
  }
  else {
    double v65 = v53;
  }
  double v66 = v61 + v65;
  double v67 = v33 + 20.0 + 20.0;
  double v68 = 78.0;
  if (v23) {
    double v68 = 100.0;
  }
  else {
    double v67 = v33 + 17.0 + 17.0;
  }
  double v69 = v66 + 17.0 + 17.0;
  if (v64 <= 156.0) {
    double v64 = 156.0;
  }
  double v70 = v52 + v50 + v64;
  specialized max<A>(_:_:_:_:)(MEMORY[0x1E4FBC860], v68, v69, v67);
  double v72 = v71;
  SEL v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    *(_DWORD *)uint64_t v75 = 136446722;
    uint64_t v76 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v75 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v73, v74, "[%{public}s][sizing] measuredWidth: %f, measuredHeight: %f", (uint8_t *)v75, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  double v78 = width;
  if (v70 < width) {
    double v78 = v70;
  }
  double v79 = v85;
  if (v72 < v85) {
    double v79 = v72;
  }
  result.double height = v79;
  result.double width = v78;
  return result;
}

CGSize __swiftcall HeldInCallControlsView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(CGSize _, __C::UILayoutPriority withHorizontalFittingPriority, __C::UILayoutPriority verticalFittingPriority)
{
  objc_msgSend(v3, sel_sizeThatFits_, _.width, _.height, *(double *)&withHorizontalFittingPriority.rawValue, *(double *)&verticalFittingPriority.rawValue);
  result.double height = v5;
  result.double width = v4;
  return result;
}

id HeldInCallControlsView.intrinsicContentSize.getter()
{
  return objc_msgSend(v0, sel_sizeThatFits_, 1.79769313e308, 1.79769313e308);
}

id HeldInCallControlsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void HeldInCallControlsView.init(frame:)()
{
}

id HeldInCallControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HeldInCallControlsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for HeldInCallControlsView()
{
  return self;
}

uint64_t specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(void *a1, void *a2, void *a3, void *a4)
{
  double v6 = a1;
  if (a2)
  {
    type metadata accessor for ConversationControlsBadgingAvatarViewController();
    uint64_t v8 = ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(a2, a3, 0, 0, a4);
LABEL_23:
    uint64_t v44 = v8;

    return v44;
  }
  id v9 = objc_msgSend(self, sel_tu_contactStoreConfigurationForCall_, a1);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v9);

  id v11 = objc_msgSend(v6, sel_remoteParticipantHandles);
  type metadata accessor for TUHandle();
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = specialized Set.count.getter(v12);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_22:
    id v43 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v10, v18, a3, a4);
    goto LABEL_23;
  }
  uint64_t v14 = v13;
  uint64_t v53 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v17 = 1;
  }
  else
  {
    uint64_t result = specialized _NativeSet.startIndex.getter(v12);
    char v17 = v19 & 1;
  }
  id v45 = v10;
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v48 = v6;
  uint64_t v50 = result;
  uint64_t v51 = v16;
  char v52 = v17;
  if ((v14 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v21 = v50;
      uint64_t v20 = v51;
      char v22 = v52;
      uint64_t v23 = OUTLINED_FUNCTION_14_54();
      specialized Set.subscript.getter(v23, v24, v25, v26);
      double v28 = v27;
      unsigned int v29 = objc_msgSend(v27, sel_shouldHideContact);
      id v30 = objc_allocWithZone(MEMORY[0x1E4F1BA40]);
      if (v29) {
        double v31 = 0;
      }
      else {
        double v31 = v28;
      }
      double v32 = &selRef_initWithContact_;
      if (!v29) {
        double v32 = &selRef__initWithHandle_;
      }
      objc_msgSend(v30, *v32, v31, v45, v46, v47, v48);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v12 & 0xC000000000000001) != 0)
      {
        if ((v22 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
        uint64_t v42 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v42(v49, 0);
      }
      else
      {
        uint64_t v33 = OUTLINED_FUNCTION_14_54();
        uint64_t v37 = specialized _NativeSet.index(after:)(v33, v34, v35, v36);
        uint64_t v39 = v38;
        char v41 = v40;
        outlined consume of Set<TUHandle>.Index._Variant(v21, v20, v22);
        uint64_t v50 = v37;
        uint64_t v51 = v39;
        char v52 = v41 & 1;
      }
      --v14;
    }
    while (v14);
    outlined consume of Set<TUHandle>.Index._Variant(v50, v51, v52);
    uint64_t v18 = v53;
    swift_bridgeObjectRelease();
    a4 = v47;
    double v6 = v48;
    id v10 = v45;
    a3 = v46;
    goto LABEL_22;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type HeldInCallControlsView.Style and conformance HeldInCallControlsView.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type HeldInCallControlsView.Style and conformance HeldInCallControlsView.Style;
  if (!lazy protocol witness table cache variable for type HeldInCallControlsView.Style and conformance HeldInCallControlsView.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeldInCallControlsView.Style and conformance HeldInCallControlsView.Style);
  }
  return result;
}

uint64_t method lookup function for HeldInCallControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HeldInCallControlsView);
}

uint64_t dispatch thunk of HeldInCallControlsView.__allocating_init(heldCall:heldConversation:controlsManager:menuHostViewController:style:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

unsigned char *storeEnumTagSinglePayload for HeldInCallControlsView.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C341529CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HeldInCallControlsView.Style()
{
  return &type metadata for HeldInCallControlsView.Style;
}

uint64_t protocol witness for SystemApertureAccessoryView.preferredLayoutMargins.getter in conformance SystemApertureEmptyTrailingView@<X0>(uint64_t a1@<X8>)
{
  SystemApertureAccessoryView.preferredLayoutMargins.getter((uint64_t)v3);
  return outlined init with take of SystemApertureLayoutMargins((uint64_t)v3, a1);
}

double SystemApertureAccessoryView.preferredLayoutMargins.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 2;
  return result;
}

uint64_t dispatch thunk of SystemApertureAccessoryView.preferredLayoutMargins.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SystemApertureAccessoryView.shouldReplace(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      unsigned int v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = objc_msgSend(v5, sel_primaryLanguage);
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v3 = v15;
        }
        unint64_t v13 = *(void *)(v3 + 16);
        if (v13 >= *(void *)(v3 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v3 = v16;
        }
        *(void *)(v3 + 16) = v13 + 1;
        uint64_t v14 = v3 + 16 * v13;
        *(void *)(v14 + 32) = v10;
        *(void *)(v14 + 40) = v12;
      }
      else
      {
      }
      ++v4;
      if (v7 == v2) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

id static ConversationCapabilities.shared.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for shared, (void **)&static ConversationCapabilities.shared);
}

id ConversationCapabilities.().init()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ConversationCapabilities();
  id v1 = objc_msgSendSuper2(&v3, sel_init);
  ConversationCapabilities.startForwardingCaptionEnablementNotifications()();

  return v1;
}

id ConversationCapabilities.__deallocating_deinit()
{
  ConversationCapabilities.stopForwardingCaptionEnablementNotifications()();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationCapabilities();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t key path getter for ConversationCapabilities.captioningAccessibilitySettingEnabled : ConversationCapabilities@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x50))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ConversationCapabilities.captioningAccessibilitySettingEnabled : ConversationCapabilities(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x58))(*a1);
}

uint64_t ConversationCapabilities.captioningAccessibilitySettingEnabled.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 728))() & 1;
}

void ConversationCapabilities.captioningAccessibilitySettingEnabled.setter(char a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static Defaults.shared + 736))(a1 & 1);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, oslog, v3, "Captions user accessibility enablement set to: %{BOOL}d", v4, 8u);
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
}

void (*ConversationCapabilities.captioningAccessibilitySettingEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(unsigned char *)(a1 + 8) = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 728))() & 1;
  return ConversationCapabilities.captioningAccessibilitySettingEnabled.modify;
}

void ConversationCapabilities.captioningAccessibilitySettingEnabled.modify(uint64_t a1)
{
}

uint64_t ConversationCapabilities.captioningSettingEnabledPublisher.getter()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Concatenate<Publishers.Sequence<[Bool], Never>, Publishers.Map<NSNotificationCenter.Publisher, Bool>>>);
  OUTLINED_FUNCTION_4();
  uint64_t v32 = v3;
  uint64_t v33 = v2;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v31 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Concatenate<Publishers.Sequence<[Bool], Never>, Publishers.Map<NSNotificationCenter.Publisher, Bool>>);
  OUTLINED_FUNCTION_4();
  uint64_t v29 = v7;
  uint64_t v30 = v6;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<NSNotificationCenter.Publisher, Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for NSNotificationCenter.Publisher();
  OUTLINED_FUNCTION_4();
  uint64_t v20 = v19;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_21();
  uint64_t v24 = v23 - v22;
  id v25 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for captionEnablementChangedNotification != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher();
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1C3769620;
  *(unsigned char *)(v26 + 32) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50))() & 1;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<NSNotificationCenter.Publisher, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<NSNotificationCenter.Publisher, Bool>);
  Publisher.prepend(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Concatenate<Publishers.Sequence<[Bool], Never>, Publishers.Map<NSNotificationCenter.Publisher, Bool>> and conformance Publishers.Concatenate<A, B>, &demangling cache variable for type metadata for Publishers.Concatenate<Publishers.Sequence<[Bool], Never>, Publishers.Map<NSNotificationCenter.Publisher, Bool>>);
  Publisher<>.removeDuplicates()();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v10, v30);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Concatenate<Publishers.Sequence<[Bool], Never>, Publishers.Map<NSNotificationCenter.Publisher, Bool>>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Concatenate<Publishers.Sequence<[Bool], Never>, Publishers.Map<NSNotificationCenter.Publisher, Bool>>>);
  uint64_t v27 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  return v27;
}

void closure #1 in ConversationCapabilities.captioningSettingEnabledPublisher.getter(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x50))();

    char v7 = v6 & 1;
  }
  else
  {
    char v7 = 0;
  }
  *a2 = v7;
}

uint64_t ConversationCapabilities.isCaptioningSupported.getter()
{
  if (objc_msgSend(self, sel_isCaptioningSupported))
  {
    uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of ConversationCapabilities.isCaptioningSupported.getter);
    id v1 = objc_msgSend(self, sel_activeInputModes);
    type metadata accessor for UITextInputMode();
    unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = specialized Set.init<A>(_:)(v3);
    char v5 = specialized Set.isDisjoint(with:)(v0, v4) ^ 1;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109634;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v10 = Set.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 18) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v13 = Set.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v7, v8, "Captions Supported: %{BOOL}d\nSupported Locales: %s\nDevice Locales: %s", (uint8_t *)v9, 0x1Cu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1C2F90000, v17, v18, "Captioning not supported on this device.", v19, 2u);
      OUTLINED_FUNCTION_3();
    }

    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    int64_t v12 = v11;
    if (!v8) {
      break;
    }
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v14 = v13 | (v11 << 6);
LABEL_29:
    if (*(void *)(v5 + 16))
    {
      os_log_type_t v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v14);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        uint64_t v24 = *(void *)(v5 + 48);
        id v25 = (void *)(v24 + 16 * v23);
        BOOL v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_46:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = 0;
LABEL_47:
          outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
          return v30;
        }
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          double v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_46;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v15 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_51;
  }
  if (v15 >= v31) {
    goto LABEL_49;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v15);
  ++v11;
  if (v16) {
    goto LABEL_28;
  }
  int64_t v11 = v12 + 2;
  if (v12 + 2 >= v31) {
    goto LABEL_49;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v11);
  if (v16) {
    goto LABEL_28;
  }
  int64_t v11 = v12 + 3;
  if (v12 + 3 >= v31) {
    goto LABEL_49;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v11);
  if (v16)
  {
LABEL_28:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    goto LABEL_29;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    goto LABEL_47;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v12 + 4;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_49;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_28;
    }
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t one-time initialization function for captionEnablementChangedNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD00000000000003ELL, 0x80000001C37AD600);
  static ConversationCapabilities.captionEnablementChangedNotification = result;
  return result;
}

id static ConversationCapabilities.captionEnablementChangedNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for captionEnablementChangedNotification, (void **)&static ConversationCapabilities.captionEnablementChangedNotification);
}

void ConversationCapabilities.startForwardingCaptionEnablementNotifications()()
{
  id v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v5, v6, "Starting to foward caption enablement notifications");
    OUTLINED_FUNCTION_3();
  }

  uint64_t v7 = CFNotificationCenterGetDarwinNotifyCenter();
  if (*MEMORY[0x1E4FB8FB8])
  {
    unint64_t v8 = v7;
    name = (__CFString *)(id)*MEMORY[0x1E4FB8FB8];
    CFNotificationCenterAddObserver(v8, v1, (CFNotificationCallback)@objc closure #1 in ConversationCapabilities.startForwardingCaptionEnablementNotifications(), name, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ConversationCapabilities.startForwardingCaptionEnablementNotifications()()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationControls);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl(&dword_1C2F90000, v1, v2, "Forwarding captions enablement notification from Dawrin Notifaction center", v3, 2u);
    MEMORY[0x1C87760E0](v3, -1, -1);
  }

  os_log_type_t v4 = (void *)MEMORY[0x1C87730B0](0xD00000000000003ELL, 0x80000001C37AD600);
  uint64_t v5 = type metadata accessor for Notification();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v13, 0, sizeof(v13));
  id v9 = v4;
  Notification.init(name:object:userInfo:)();
  id v10 = objc_msgSend(self, sel_defaultCenter);
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, sel_postNotification_, isa);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void @objc closure #1 in ConversationCapabilities.startForwardingCaptionEnablementNotifications()(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a5;
  closure #1 in ConversationCapabilities.startForwardingCaptionEnablementNotifications()();
}

void ConversationCapabilities.stopForwardingCaptionEnablementNotifications()()
{
  id v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v5, v6, "Stopping forwarding of caption enablement notifactions");
    OUTLINED_FUNCTION_3();
  }

  center = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(center, v1);
}

uint64_t type metadata accessor for ConversationCapabilities()
{
  return self;
}

uint64_t sub_1C3416A58()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationCapabilities.captioningSettingEnabledPublisher.getter(unsigned char *a1@<X8>)
{
  closure #1 in ConversationCapabilities.captioningSettingEnabledPublisher.getter(v1, a1);
}

unint64_t type metadata accessor for UITextInputMode()
{
  unint64_t result = lazy cache variable for type metadata for UITextInputMode;
  if (!lazy cache variable for type metadata for UITextInputMode)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITextInputMode);
  }
  return result;
}

uint64_t method lookup function for ConversationCapabilities(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationCapabilities);
}

uint64_t dispatch thunk of ConversationCapabilities.captioningAccessibilitySettingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of ConversationCapabilities.captioningAccessibilitySettingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ConversationCapabilities.captioningAccessibilitySettingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ConversationCapabilities.captioningSettingEnabledPublisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConversationCapabilities.isCaptioningSupported.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t ScreenSharingContentLayout.callAsFunction<A, B, C>(_:title:toolbar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12)
{
  long long v14 = v12[1];
  long long v28 = *v12;
  long long v29 = v14;
  v30[0] = v12[2];
  *(_OWORD *)((char *)v30 + 9) = *(long long *)((char *)v12 + 41);
  void v19[2] = a7;
  _OWORD v19[3] = a8;
  v19[4] = a10;
  long long v20 = a11;
  uint64_t v21 = a12;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutRoleKey>>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  uint64_t v15 = type metadata accessor for TupleView();
  unint64_t v16 = lazy protocol witness table accessor for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Layout.callAsFunction<A>(_:)((uint64_t)partial apply for closure #1 in ScreenSharingContentLayout.callAsFunction<A, B, C>(_:title:toolbar:), (uint64_t)v19, (uint64_t)&type metadata for ScreenSharingContentLayout, v15, v16, WitnessTable, a9);
}

uint64_t ScreenSharingContentLayout.init(contentMode:safeAreaInsets:toolbarPlacement:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(_OWORD *)a3 = xmmword_1C376E570;
  *(unsigned char *)(a3 + 16) = result & 1;
  *(double *)(a3 + 24) = a4;
  *(double *)(a3 + 32) = a5;
  *(double *)(a3 + 40) = a6;
  *(double *)(a3 + 48) = a7;
  *(unsigned char *)(a3 + 56) = a2;
  return result;
}

uint64_t Layout.callAsFunction<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v20[0] = a6;
  v20[1] = a7;
  OUTLINED_FUNCTION_5_3();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  int64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _LayoutRoot();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v7, a3);
  _LayoutRoot.init(_:)();
  v20[4] = a3;
  v20[5] = a4;
  v20[6] = a5;
  v20[7] = v20[0];
  v20[8] = a1;
  v20[9] = a2;
  swift_getWitnessTable();
  return _VariadicView.Tree.init(_:content:)();
}

double ScreenSharingContentLayout.additionalSafeAreaInsets.getter()
{
  int v1 = Edge.rawValue.getter();
  if (v1 == Edge.rawValue.getter())
  {
    double v2 = 9.0 - *(double *)(v0 + 24);
    if (v2 > 0.0) {
      return v2 + 4.0;
    }
    else {
      return 4.0;
    }
  }
  else
  {
    int v4 = Edge.rawValue.getter();
    unsigned __int8 v5 = Edge.rawValue.getter();
    double v6 = *(double *)(v0 + 24);
    double v7 = 11.0 - v6;
    if (11.0 - v6 <= 0.0) {
      double v7 = 0.0;
    }
    double result = 36.0 - v6;
    if (result <= 0.0) {
      double result = 0.0;
    }
    if (v4 != v5) {
      return v7;
    }
  }
  return result;
}

uint64_t ScreenSharingContentLayout.contentMode.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

double ScreenSharingContentLayout.safeAreaInsets.getter()
{
  return *(double *)(v0 + 24);
}

uint64_t ScreenSharingContentLayout.toolbarPlacement.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

double CGRect.center.getter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.double y = a2;
  v10.size.double width = a3;
  v10.size.double height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

__C::CGRect __swiftcall CGRect.init(center:size:)(CGPoint center, CGSize size)
{
  double v2 = center.x - size.width * 0.5;
  double v3 = center.y - size.height * 0.5;
  result.size.double height = size.height;
  result.size.double width = size.width;
  result.origin.double y = v3;
  result.origin.x = v2;
  return result;
}

void ScreenSharingContentLayout.contentBounds(in:titleSize:toolbarSize:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if ((static ContentMode.== infix(_:_:)() & 1) == 0)
  {
    double v25 = -*(double *)(v8 + 24);
    double v26 = -*(double *)(v8 + 32);
    double v27 = a1;
    double v28 = a2;
    double v29 = a3;
    double v30 = a4;
LABEL_10:
    UIEdgeInsetsInsetRect(v27, v28, v29, v30, v25, v26);
    return;
  }
  double v31 = a6;
  double v16 = ScreenSharingContentLayout.additionalSafeAreaInsets.getter();
  double v17 = *(double *)(v8 + 8);
  ScreenSharingContentLayout.additionalSafeAreaInsets.getter();
  double v18 = UIEdgeInsetsInsetRect(a1, a2, a3, a4, v16, v17);
  switch(*(unsigned char *)(v8 + 56))
  {
    case 1:
      double v22 = *(double *)v8;
      double v24 = *(double *)v8 + a7;
      double v23 = 0.0;
      break;
    case 2:
      double v22 = *(double *)v8;
      double v23 = 0.0;
      double v24 = 0.0;
      break;
    case 3:
      double v22 = *(double *)v8;
      double v23 = 0.0;
      double v24 = 0.0;
      break;
    default:
      double v22 = *(double *)v8;
      double v23 = *(double *)v8 + a8;
      double v24 = 0.0;
      break;
  }
  double v27 = UIEdgeInsetsInsetRect(v18, v19, v20, v21, v23, v24);
  if (v31 > 0.0)
  {
    double v25 = v22 + v31;
    double v26 = 0.0;
    goto LABEL_10;
  }
}

double ScreenSharingContentLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 10.0;
  }
  return result;
}

uint64_t ScreenSharingContentLayout.placeToolbar(_:in:contentBounds:constrainedToSize:toolbarSize:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16 = *(unsigned __int8 *)(v8 + 56);
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  static ContentMode.== infix(_:_:)();
  switch(v16)
  {
    case 1:
      v25.origin.x = a1;
      v25.origin.double y = a2;
      v25.size.double width = a3;
      v25.size.double height = a4;
      CGRectGetMinX(v25);
      v26.origin.x = a5;
      v26.origin.double y = a6;
      v26.size.double width = a7;
      v26.size.double height = a8;
      CGRectGetMidY(v26);
      static UnitPoint.leading.getter();
      break;
    case 2:
      v21.origin.x = a1;
      v21.origin.double y = a2;
      v21.size.double width = a3;
      v21.size.double height = a4;
      CGRectGetMidX(v21);
      v22.origin.x = a1;
      v22.origin.double y = a2;
      v22.size.double width = a3;
      v22.size.double height = a4;
      CGRectGetMaxY(v22);
      ScreenSharingContentLayout.additionalSafeAreaInsets.getter();
      static UnitPoint.bottom.getter();
      break;
    case 3:
      v23.origin.x = a1;
      v23.origin.double y = a2;
      v23.size.double width = a3;
      v23.size.double height = a4;
      CGRectGetMaxX(v23);
      v24.origin.x = a5;
      v24.origin.double y = a6;
      v24.size.double width = a7;
      v24.size.double height = a8;
      CGRectGetMidY(v24);
      static UnitPoint.trailing.getter();
      break;
    default:
      v19.origin.x = a1;
      v19.origin.double y = a2;
      v19.size.double width = a3;
      v19.size.double height = a4;
      CGRectGetMidX(v19);
      v20.origin.x = a1;
      v20.origin.double y = a2;
      v20.size.double width = a3;
      v20.size.double height = a4;
      CGRectGetMinY(v20);
      ScreenSharingContentLayout.additionalSafeAreaInsets.getter();
      static UnitPoint.top.getter();
      break;
  }
  return LayoutSubview.place(at:anchor:proposal:)();
}

uint64_t ScreenSharingContentLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v221 = a3;
  double v222 = a4;
  CGFloat v208 = a2;
  CGFloat v207 = a1;
  uint64_t v10 = type metadata accessor for LayoutSubview();
  OUTLINED_FUNCTION_5_3();
  uint64_t v215 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_10_5();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_8_4();
  uint64_t v226 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v19);
  uint64_t v212 = (void (**)(void))((char *)v194 - v20);
  uint64_t v21 = type metadata accessor for LayoutSubviews();
  OUTLINED_FUNCTION_5_3();
  uint64_t v23 = v22;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_10_5();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v25);
  double v27 = (char *)v194 - v26;
  *(double *)&uint64_t v28 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_10_5();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)v194 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  MEMORY[0x1F4188790](v34 - 8);
  OUTLINED_FUNCTION_10_5();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_8_4();
  uint64_t v220 = v37;
  MEMORY[0x1F4188790](v38);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v43);
  id v45 = (char *)v194 - v44;
  __n128 v47 = MEMORY[0x1F4188790](v46);
  uint64_t v202 = (void (**)(char *))((char *)v194 - v48);
  uint64_t v197 = v23;
  uint64_t v49 = *(void (**)(uint64_t, void, uint64_t))(v23 + 16);
  double y = *(double *)&a9;
  uint64_t v224 = v49;
  *(void *)&double v225 = v23 + 16;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v49)(v27, a9, v21, v47);
  uint64_t v50 = lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews(&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  CGFloat v223 = *(double *)&v27;
  uint64_t v204 = v50;
  dispatch thunk of Sequence.makeIterator()();
  unint64_t v205 = v28;
  uint64_t v51 = &v33[*(int *)(v28 + 36)];
  uint64_t v52 = lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews((unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  uint64_t v53 = *(void *)v51;
  OUTLINED_FUNCTION_18_45();
  if (v53 == v228)
  {
LABEL_7:
    OUTLINED_FUNCTION_10_2((uint64_t)v45);
  }
  else
  {
    double v54 = (void (**)(char *))(v215 + 16);
    double v55 = (void (**)(void (*)(uint64_t), uint64_t))(v197 + 8);
    uint64_t v211 = (void (**)(void))(v215 + 32);
    *(void *)&CGFloat x = v215 + 8;
    while (1)
    {
      double v56 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      (*v54)(v45);
      uint64_t v57 = OUTLINED_FUNCTION_2_61();
      v56(v57);
      OUTLINED_FUNCTION_28_30();
      OUTLINED_FUNCTION_7_85();
      v58();
      dispatch thunk of Collection.formIndex(after:)();
      (*v55)(v56, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v10);
      OUTLINED_FUNCTION_9_1((uint64_t)v45);
      if (v138) {
        break;
      }
      uint64_t v59 = v52;
      uint64_t v60 = (uint64_t)v33;
      double v61 = *v211;
      double v62 = v212;
      OUTLINED_FUNCTION_13_61();
      v61();
      lazy protocol witness table accessor for type LayoutRoleKey and conformance LayoutRoleKey();
      LayoutSubview.subscript.getter();
      if (!(_BYTE)v228)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v60, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
        uint64_t v192 = OUTLINED_FUNCTION_22_36((uint64_t)&v231);
        ((void (*)(uint64_t))v61)(v192);
        uint64_t v66 = 0;
        goto LABEL_9;
      }
      OUTLINED_FUNCTION_24_39();
      v63(v62, v10);
      uint64_t v64 = *(void *)v51;
      double v65 = (char *)v60;
      uint64_t v52 = v59;
      dispatch thunk of Collection.endIndex.getter();
      BOOL v138 = v64 == v228;
      uint64_t v33 = v65;
      if (v138) {
        goto LABEL_7;
      }
    }
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v33, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v66 = 1;
  double v54 = v202;
LABEL_9:
  uint64_t v67 = OUTLINED_FUNCTION_26_33((uint64_t)v54, v66);
  uint64_t v68 = v199;
  outlined init with copy of LayoutSubview?(v67, v199);
  OUTLINED_FUNCTION_9_1(v68);
  uint64_t v69 = v216;
  if (v138)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v68, &demangling cache variable for type metadata for LayoutSubview?);
    double v201 = 0.0;
    double v200 = 0.0;
  }
  else
  {
    uint64_t v70 = static ProposedViewSize.unspecified.getter();
    OUTLINED_FUNCTION_15_58(v70, v71, v72, v73);
    double v200 = v74;
    uint64_t v76 = OUTLINED_FUNCTION_11_52((uint64_t)v230, v75);
    v77(v76);
  }
  OUTLINED_FUNCTION_28_30();
  OUTLINED_FUNCTION_7_85();
  v78();
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v79 = v69 + *(int *)(v205 + 36);
  OUTLINED_FUNCTION_27_33();
  OUTLINED_FUNCTION_18_45();
  OUTLINED_FUNCTION_21_40();
  if (v138)
  {
LABEL_18:
    OUTLINED_FUNCTION_10_2(*(uint64_t *)&v214);
  }
  else
  {
    double v80 = (void (**)(double))(v215 + 16);
    uint64_t v81 = (void (**)(void (*)(uint64_t), uint64_t))(v197 + 8);
    uint64_t v212 = (void (**)(void))(v215 + 32);
    uint64_t v82 = (void (**)(double, uint64_t))(v215 + 8);
    while (1)
    {
      double v83 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      uint64_t v84 = *(void *)&v214;
      (*v80)(COERCE_DOUBLE(*(void *)&v214));
      uint64_t v85 = OUTLINED_FUNCTION_2_61();
      v83(v85);
      OUTLINED_FUNCTION_28_30();
      OUTLINED_FUNCTION_7_85();
      v86();
      dispatch thunk of Collection.formIndex(after:)();
      (*v81)(v83, v21);
      __swift_storeEnumTagSinglePayload(v84, 0, 1, v10);
      OUTLINED_FUNCTION_9_1(v84);
      if (v138) {
        break;
      }
      CGRect v87 = *v212;
      double v88 = v213;
      OUTLINED_FUNCTION_13_61();
      v87();
      lazy protocol witness table accessor for type LayoutRoleKey and conformance LayoutRoleKey();
      LayoutSubview.subscript.getter();
      if (v228 == 2)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v216, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
        uint64_t v193 = OUTLINED_FUNCTION_22_36((uint64_t)&v232);
        ((void (*)(uint64_t))v87)(v193);
        uint64_t v89 = 0;
        goto LABEL_20;
      }
      (*v82)(COERCE_DOUBLE(*(void *)&v88), v10);
      OUTLINED_FUNCTION_27_33();
      OUTLINED_FUNCTION_18_45();
      OUTLINED_FUNCTION_21_40();
      if (v138) {
        goto LABEL_18;
      }
    }
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v216, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v89 = 1;
  uint64_t v79 = v203;
LABEL_20:
  uint64_t v90 = OUTLINED_FUNCTION_26_33(v79, v89);
  uint64_t v91 = v195;
  outlined init with copy of LayoutSubview?(v90, v195);
  OUTLINED_FUNCTION_9_1(v91);
  CGFloat v92 = v210;
  uint64_t v93 = v219;
  if (v138)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v91, &demangling cache variable for type metadata for LayoutSubview?);
    uint64_t v199 = 0;
    double v198 = 0.0;
  }
  else
  {
    uint64_t v94 = static ProposedViewSize.unspecified.getter();
    OUTLINED_FUNCTION_15_58(v94, v95, v96, v97);
    double v198 = v98;
    uint64_t v100 = OUTLINED_FUNCTION_11_52((uint64_t)v229, v99);
    v101(v100);
  }
  v224(v196, *(void *)&y, v21);
  double v227 = MEMORY[0x1E4FBC860];
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v102 = v93 + *(int *)(v205 + 36);
  OUTLINED_FUNCTION_27_33();
  OUTLINED_FUNCTION_18_45();
  OUTLINED_FUNCTION_21_40();
  if (v138)
  {
LABEL_25:
    id v103 = v218;
    OUTLINED_FUNCTION_10_2((uint64_t)v218);
  }
  else
  {
    uint64_t v216 = v215 + 16;
    v164 = (void (**)(void (*)(uint64_t), uint64_t))(v197 + 8);
    uint64_t v165 = (void (**)(void))(v215 + 32);
    *(void *)&double v214 = v215 + 8;
    while (1)
    {
      uint64_t v166 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      OUTLINED_FUNCTION_24_39();
      id v103 = v218;
      v167(v218);
      uint64_t v168 = OUTLINED_FUNCTION_2_61();
      v166(v168);
      OUTLINED_FUNCTION_28_30();
      OUTLINED_FUNCTION_7_85();
      v169();
      dispatch thunk of Collection.formIndex(after:)();
      (*v164)(v166, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v103, 0, 1, v10);
      OUTLINED_FUNCTION_9_1((uint64_t)v103);
      if (v138) {
        break;
      }
      os_log_type_t v170 = *v165;
      OUTLINED_FUNCTION_19_42();
      v170();
      lazy protocol witness table accessor for type LayoutRoleKey and conformance LayoutRoleKey();
      LayoutSubview.subscript.getter();
      if (v228 == 1)
      {
        OUTLINED_FUNCTION_19_42();
        v170();
        double v171 = v227;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v171 + 16) + 1, 1);
          double v171 = v227;
        }
        unint64_t v173 = *(void *)(*(void *)&v171 + 16);
        unint64_t v172 = *(void *)(*(void *)&v171 + 24);
        if (v173 >= v172 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v172 > 1, v173 + 1, 1);
          double v171 = v227;
        }
        *(void *)(*(void *)&v171 + 16) = v173 + 1;
        OUTLINED_FUNCTION_19_42();
        v170();
        double v227 = v171;
        CGFloat v92 = v210;
      }
      else
      {
        OUTLINED_FUNCTION_24_39();
        v174(*(void *)&v92, v10);
      }
      OUTLINED_FUNCTION_27_33();
      uint64_t v93 = v219;
      OUTLINED_FUNCTION_18_45();
      OUTLINED_FUNCTION_21_40();
      if (v138) {
        goto LABEL_25;
      }
    }
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v93, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v103, &demangling cache variable for type metadata for LayoutSubview?);
  double v104 = v227;
  double v105 = OUTLINED_FUNCTION_9_70();
  ScreenSharingContentLayout.contentBounds(in:titleSize:toolbarSize:)(v105, v106, v107, v108, v200, v201, v198, *(double *)&v199);
  CGFloat v223 = v111;
  uint64_t v224 = v110;
  double v112 = v109;
  double v225 = v113;
  uint64_t v114 = *(void *)(*(void *)&v104 + 16);
  uint64_t v204 = *(void *)&v104;
  if (v114)
  {
    double v213 = 0.0;
    uint64_t v212 = 0;
    uint64_t v218 = *(void (**)(void, void, void))(v215 + 16);
    unint64_t v115 = *(void *)&v104
         + ((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80));
    uint64_t v217 = *(void *)(v215 + 72);
    uint64_t v216 = v215 + 32;
    double v116 = v109;
    double v104 = v225;
    double v117 = -0.461538462;
    double v214 = fabs(v221 / v222 + -0.461538462);
    uint64_t v219 = v215 + 16;
    double v118 = (void (**)(uint64_t, uint64_t))(v215 + 8);
    OUTLINED_FUNCTION_25_38();
    *(double *)&unint64_t v205 = -0.461538462;
    while (1)
    {
      v218(v102, v115, v10);
      uint64_t v119 = OUTLINED_FUNCTION_26_33(v102, 0);
      OUTLINED_FUNCTION_9_1(v119);
      if (v138) {
        goto LABEL_90;
      }
      OUTLINED_FUNCTION_24_39();
      v120(v226, v102, v10);
      double v121 = v116;
      double v122 = v104;
      if (static ContentMode.== infix(_:_:)())
      {
        static ProposedViewSize.unspecified.getter();
        OUTLINED_FUNCTION_23_38();
        LOBYTE(v228) = v123 & 1;
        LOBYTE(v227) = v124 & 1;
        double v121 = v116;
        double v122 = v104;
        if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0) {
          break;
        }
      }
LABEL_66:
      if (v221 < v222)
      {
        uint64_t v146 = static ProposedViewSize.unspecified.getter();
        OUTLINED_FUNCTION_14_55(v146, v147, v148, v149);
        if (fabs(v150 / v151 + v117) < 0.01 && v214 < 0.06)
        {
          LODWORD(v211) = 0;
          double v213 = v121;
          uint64_t v212 = *(void (***)(void))&v122;
        }
      }
      if ((static ContentMode.== infix(_:_:)() & 1) == 0) {
        goto LABEL_74;
      }
      int v152 = Axis.rawValue.getter();
      if (v152 != Axis.rawValue.getter()) {
        goto LABEL_74;
      }
      v233.origin.CGFloat x = OUTLINED_FUNCTION_9_70();
      double MidX = CGRectGetMidX(v233);
      CGFloat v154 = *(double *)&v224;
      v234.size.double height = v225;
      *(void *)&v234.origin.CGFloat x = v224;
      CGFloat v155 = v112;
      CGFloat v156 = v223;
      v234.origin.double y = v223;
      v234.size.double width = v155;
      double MidY = CGRectGetMidY(v234);
      v235.origin.CGFloat x = MidX - v121 * 0.5;
      v235.origin.double y = MidY - v122 * 0.5;
      CGFloat x = v235.origin.x;
      double y = v235.origin.y;
      CGFloat v210 = v121;
      v235.size.double width = v121;
      v235.size.double height = v122;
      double MinX = CGRectGetMinX(v235);
      v236.origin.CGFloat x = v154;
      v236.origin.double y = v156;
      double v112 = v155;
      double v117 = *(double *)&v205;
      v236.size.double width = v112;
      v236.size.double height = v225;
      if (CGRectGetMinX(v236) > MinX) {
        goto LABEL_74;
      }
      v237.origin.CGFloat x = x;
      v237.origin.double y = y;
      v237.size.double width = v210;
      v237.size.double height = v122;
      double MaxX = CGRectGetMaxX(v237);
      v238.origin.double y = v223;
      *(void *)&v238.origin.CGFloat x = v224;
      v238.size.double width = v112;
      v238.size.double height = v225;
      if (MaxX > CGRectGetMaxX(v238))
      {
LABEL_74:
        CGFloat v161 = v223;
        CGFloat v160 = *(double *)&v224;
        *(void *)&v239.origin.CGFloat x = v224;
        v239.origin.double y = v223;
        v239.size.double width = v112;
        CGFloat v162 = v225;
        v239.size.double height = v225;
        CGRectGetMidX(v239);
        v240.origin.CGFloat x = v160;
        v240.origin.double y = v161;
        v240.size.double width = v112;
        v240.size.double height = v162;
        CGRectGetMidY(v240);
      }
      uint64_t v102 = v220;
      static UnitPoint.center.getter();
      LOBYTE(v228) = 0;
      LOBYTE(v227) = 0;
      uint64_t v163 = v226;
      LayoutSubview.place(at:anchor:proposal:)();
      (*v118)(v163, v10);
      v115 += v217;
      if (!--v114) {
        goto LABEL_89;
      }
    }
    uint64_t v125 = static ProposedViewSize.unspecified.getter();
    OUTLINED_FUNCTION_14_55(v125, v126, v127, v128);
    double v130 = v129;
    double v132 = v131;
    char v133 = static ContentMode.== infix(_:_:)();
    static ProposedViewSize.unspecified.getter();
    OUTLINED_FUNCTION_23_38();
    if (v133)
    {
      if ((OUTLINED_FUNCTION_6_94(v134, v135, v136, v137) & 1) == 0)
      {
        BOOL v138 = v112 == 0.0 && v130 == 0.0;
        double v139 = v112 / v130;
        double v140 = INFINITY;
        if (v138) {
          double v139 = INFINITY;
        }
        if (v225 != 0.0 || v132 != 0.0) {
          double v140 = v225 / v132;
        }
        if (v140 < v139) {
          double v139 = v140;
        }
LABEL_59:
        if (v130 == 0.0) {
          double v130 = 0.0;
        }
        else {
          double v130 = v130 * v139;
        }
        double v145 = v132 * v139;
        if (v132 == 0.0) {
          double v132 = 0.0;
        }
        else {
          double v132 = v145;
        }
      }
    }
    else if ((OUTLINED_FUNCTION_6_94(v134, v135, v136, v137) & 1) == 0)
    {
      BOOL v142 = v112 == 0.0 && v130 == 0.0;
      double v139 = v112 / v130;
      double v143 = -INFINITY;
      if (v142) {
        double v139 = -INFINITY;
      }
      if (v225 != 0.0 || v132 != 0.0) {
        double v143 = v225 / v132;
      }
      if (v139 <= v143) {
        double v139 = v143;
      }
      goto LABEL_59;
    }
    double v121 = v130;
    double v122 = v132;
    goto LABEL_66;
  }
  double v213 = 0.0;
  uint64_t v212 = 0;
  OUTLINED_FUNCTION_25_38();
LABEL_89:
  OUTLINED_FUNCTION_10_2(v102);
LABEL_90:
  uint64_t v175 = v194[4];
  uint64_t v176 = v203;
  uint64_t v177 = (uint64_t)v202;
  uint64_t v178 = v194[3];
  swift_release();
  outlined init with copy of LayoutSubview?(v177, v178);
  OUTLINED_FUNCTION_9_1(v178);
  if (v138)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v178, &demangling cache variable for type metadata for LayoutSubview?);
  }
  else
  {
    OUTLINED_FUNCTION_20_42();
    uint64_t v179 = v194[1];
    OUTLINED_FUNCTION_13_61();
    v180();
    CGFloat v181 = v207;
    v241.origin.CGFloat x = v207;
    CGFloat v182 = v208;
    v241.origin.double y = v208;
    CGFloat v184 = v221;
    CGFloat v183 = v222;
    v241.size.double width = v221;
    v241.size.double height = v222;
    CGRectGetMidX(v241);
    v242.origin.CGFloat x = v181;
    v242.origin.double y = v182;
    v242.size.double width = v184;
    v242.size.double height = v183;
    CGRectGetMinY(v242);
    ScreenSharingContentLayout.additionalSafeAreaInsets.getter();
    static UnitPoint.top.getter();
    LOBYTE(v228) = 0;
    LOBYTE(v227) = 0;
    LayoutSubview.place(at:anchor:proposal:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)&v104 + 8))(v179, v10);
  }
  outlined init with copy of LayoutSubview?(v176, v175);
  OUTLINED_FUNCTION_9_1(v175);
  if (v138)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v176, &demangling cache variable for type metadata for LayoutSubview?);
    uint64_t v176 = v177;
  }
  else
  {
    OUTLINED_FUNCTION_20_42();
    uint64_t v185 = v194[2];
    OUTLINED_FUNCTION_13_61();
    v186();
    double v187 = OUTLINED_FUNCTION_9_70();
    ScreenSharingContentLayout.placeToolbar(_:in:contentBounds:constrainedToSize:toolbarSize:)(v187, v188, v189, v190, *(CGFloat *)&v224, v223, v112, v225);
    (*(void (**)(uint64_t, uint64_t))(*(void *)&v104 + 8))(v185, v10);
    uint64_t v175 = v177;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v176, &demangling cache variable for type metadata for LayoutSubview?);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v175, &demangling cache variable for type metadata for LayoutSubview?);
}

uint64_t LayoutSubview.scaledSize(in:contentMode:)(uint64_t a1)
{
  static ProposedViewSize.unspecified.getter();
  OUTLINED_FUNCTION_23_38();
  if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0)
  {
    static ProposedViewSize.unspecified.getter();
    OUTLINED_FUNCTION_16_42();
    double v3 = v2;
    char v4 = static ContentMode.== infix(_:_:)();
    static ProposedViewSize.unspecified.getter();
    OUTLINED_FUNCTION_23_38();
    if (v4)
    {
      if ((OUTLINED_FUNCTION_4_98() & 1) == 0)
      {
        double v5 = OUTLINED_FUNCTION_10_64();
        double v11 = CGSize.scaleThatFits(_:)(v6, v7, v8, v9, v5, v10);
LABEL_7:
        double v3 = CGSize.scaled(by:)(v11, v3);
      }
    }
    else if ((OUTLINED_FUNCTION_4_98() & 1) == 0)
    {
      double v12 = OUTLINED_FUNCTION_10_64();
      double v11 = CGSize.scaleThatFills(_:)(v13, v14, v15, v16, v12, v17);
      goto LABEL_7;
    }
    return *(void *)&v3;
  }
  return a1;
}

Swift::Bool __swiftcall LayoutSubview.shouldConstrainToolbar(in:)(__C::CGRect in)
{
  if (in.size.width >= in.size.height) {
    return 0;
  }
  double height = in.size.height;
  double width = in.size.width;
  static ProposedViewSize.unspecified.getter();
  OUTLINED_FUNCTION_16_42();
  Swift::Bool v5 = fabs(width / height + -0.461538462) < 0.06;
  return fabs(v3 / v4 + -0.461538462) < 0.01 && v5;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ScreenSharingContentLayout(uint64_t a1, char a2)
{
  return ScreenSharingContentLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ScreenSharingContentLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  return ScreenSharingContentLayout.placeSubviews(in:proposal:subviews:cache:)(a6, a7, a8, a9, a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance ScreenSharingContentLayout(uint64_t a1)
{
  return TPNumberPadCharacter.rawValue.getter(a1);
}

uint64_t closure #1 in ScreenSharingContentLayout.callAsFunction<A, B, C>(_:title:toolbar:)@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v77 = a5;
  double v78 = a4;
  uint64_t v67 = a3;
  uint64_t v68 = a2;
  double v65 = a1;
  uint64_t v80 = a8;
  uint64_t v69 = a10;
  uint64_t v73 = a9;
  uint64_t v79 = *(void *)(a9 - 8);
  uint64_t v75 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v72 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutRoleKey>>);
  uint64_t v74 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v74 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v74);
  uint64_t v70 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v71 = (char *)&v59 - v18;
  uint64_t v63 = a6;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v84);
  uint64_t v82 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  double v83 = (char *)&v59 - v24;
  uint64_t v25 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v23);
  double v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v28 - 8);
  uint64_t v29 = v61;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v85 = (char *)&v59 - v34;
  v65(v33);
  LOBYTE(v91[0]) = 1;
  unint64_t v59 = lazy protocol witness table accessor for type LayoutRoleKey and conformance LayoutRoleKey();
  View.layoutValue<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, a7);
  uint64_t v35 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<LayoutRoleKey>> and conformance _TraitWritingModifier<A>, &demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutRoleKey>>);
  v91[7] = a11;
  v91[8] = v35;
  uint64_t v60 = v28;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v81 = v32;
  static ViewBuilder.buildExpression<A>(_:)(v32, v28, WitnessTable);
  uint64_t v36 = *(void (**)(uint64_t))(v29 + 8);
  uint64_t v64 = v29 + 8;
  double v65 = v36;
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v36)(v32, v28);
  v68(v37);
  LOBYTE(v91[0]) = 0;
  uint64_t v38 = v82;
  uint64_t v39 = v63;
  uint64_t v40 = v69;
  View.layoutValue<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v39);
  v91[5] = v40;
  v91[6] = v35;
  uint64_t v41 = v84;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v42 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v38, v41, v67);
  uint64_t v68 = *(void (**)(uint64_t))(v86 + 8);
  uint64_t v69 = v86 + 8;
  uint64_t v43 = ((uint64_t (*)(char *, uint64_t))v68)(v38, v41);
  uint64_t v44 = v72;
  v78(v43);
  LOBYTE(v91[0]) = 2;
  id v45 = v70;
  uint64_t v46 = v73;
  uint64_t v47 = v75;
  View.layoutValue<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v44, v46);
  v91[3] = v47;
  uint64_t v91[4] = v35;
  uint64_t v48 = v74;
  uint64_t v79 = swift_getWitnessTable();
  uint64_t v49 = v71;
  static ViewBuilder.buildExpression<A>(_:)(v45, v48, v79);
  uint64_t v50 = v76;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v76 + 8);
  v51(v45, v48);
  uint64_t v52 = v81;
  uint64_t v53 = v60;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v81, v85, v60);
  v91[0] = v52;
  double v54 = v83;
  uint64_t v55 = v84;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v42, v83, v84);
  v91[1] = v42;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v45, v49, v48);
  v91[2] = v45;
  v90[0] = v53;
  v90[1] = v55;
  v90[2] = v48;
  uint64_t v87 = WitnessTable;
  uint64_t v88 = v67;
  uint64_t v89 = v79;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v91, 3, (uint64_t)v90);
  v51(v49, v48);
  double v56 = (void (*)(char *, uint64_t))v68;
  ((void (*)(char *, uint64_t))v68)(v54, v55);
  uint64_t v57 = (uint64_t (*)(char *, uint64_t))v65;
  ((void (*)(char *, uint64_t))v65)(v85, v53);
  v51(v45, v48);
  v56(v82, v55);
  return v57(v81, v53);
}

uint64_t partial apply for closure #1 in ScreenSharingContentLayout.callAsFunction<A, B, C>(_:title:toolbar:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ScreenSharingContentLayout.callAsFunction<A, B, C>(_:title:toolbar:)(*(void (**)(uint64_t))(v1 + 64), *(void (**)(uint64_t))(v1 + 80), *(void *)(v1 + 88), *(void (**)(uint64_t))(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

unint64_t lazy protocol witness table accessor for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout;
  if (!lazy protocol witness table cache variable for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout;
  if (!lazy protocol witness table cache variable for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingContentLayout and conformance ScreenSharingContentLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutRoleKey and conformance LayoutRoleKey()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutRoleKey and conformance LayoutRoleKey;
  if (!lazy protocol witness table cache variable for type LayoutRoleKey and conformance LayoutRoleKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutRoleKey and conformance LayoutRoleKey);
  }
  return result;
}

uint64_t closure #1 in Layout.callAsFunction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  double v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = (void (*)(void))MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v17 - v13;
  v12();
  static ViewBuilder.buildExpression<A>(_:)(v11, a4, a6);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, a4);
  static ViewBuilder.buildExpression<A>(_:)(v14, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a4);
}

uint64_t getEnumTagSinglePayload for ScreenSharingContentLayout(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 57))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      BOOL v4 = v3 >= 2;
      int v2 = v3 - 2;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingContentLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingContentLayout()
{
  return &type metadata for ScreenSharingContentLayout;
}

uint64_t sub_1C34194BC()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for LayoutRoleKey()
{
  return &unk_1F1EAB8D0;
}

uint64_t partial apply for closure #1 in Layout.callAsFunction<A>(_:)()
{
  return closure #1 in Layout.callAsFunction<A>(_:)(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

unsigned char *storeEnumTagSinglePayload for LayoutRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3419710);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LayoutRole()
{
  return &unk_1F1EAB960;
}

unint64_t lazy protocol witness table accessor for type LayoutRole and conformance LayoutRole()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutRole and conformance LayoutRole;
  if (!lazy protocol witness table cache variable for type LayoutRole and conformance LayoutRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutRole and conformance LayoutRole);
  }
  return result;
}

uint64_t AnimatedSaveView.SaveState.image.getter(char a1)
{
  if ((a1 & 0xFE) != 0) {
    return 0x72616D6B63656863;
  }
  else {
    return 0xD000000000000015;
  }
}

double AnimatedSaveView.SaveState.scale.getter(char a1)
{
  double result = 1.0;
  if (!a1) {
    return 0.0;
  }
  return result;
}

double AnimatedSaveView.SaveState.largeScale.getter(char a1)
{
  double result = 2.0;
  if (!a1) {
    return 0.0;
  }
  return result;
}

uint64_t AnimatedSaveView.SaveState.color.getter(char a1)
{
  if (a1)
  {
    return static Color.white.getter();
  }
  else
  {
    static Color.gray.getter();
    uint64_t v3 = Color.opacity(_:)();
    swift_release();
    return v3;
  }
}

double AnimatedSaveView.SaveState.yImageOffset.getter(char a1)
{
  double result = 0.0;
  if ((a1 & 0xFE) == 0) {
    return -2.0;
  }
  return result;
}

BOOL static AnimatedSaveView.SaveState.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AnimatedSaveView.SaveState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int AnimatedSaveView.SaveState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedSaveView.SaveState(char *a1, char *a2)
{
  return static AnimatedSaveView.SaveState.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimatedSaveView.SaveState()
{
  return AnimatedSaveView.SaveState.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AnimatedSaveView.SaveState(uint64_t a1)
{
  AnimatedSaveView.SaveState.hash(into:)(a1, *v1);
}

uint64_t AnimatedSaveView.saveState.getter()
{
  OUTLINED_FUNCTION_0_93();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  MEMORY[0x1C87728E0](&v2, v0);
  return v2;
}

uint64_t key path getter for AnimatedSaveView.saveState : AnimatedSaveView@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AnimatedSaveView.saveState.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for AnimatedSaveView.saveState : AnimatedSaveView()
{
  return AnimatedSaveView.saveState.setter();
}

uint64_t AnimatedSaveView.saveState.setter()
{
  return Binding.wrappedValue.setter();
}

void (*AnimatedSaveView.saveState.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  v3[3] = *v1;
  v3[4] = v5;
  char v6 = *((unsigned char *)v1 + 16);
  *((unsigned char *)v3 + 19) = v6;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  swift_retain();
  swift_retain();
  v3[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  MEMORY[0x1C87728E0]();
  return AnimatedSaveView.saveState.modify;
}

void AnimatedSaveView.saveState.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 17);
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 19);
  *uint64_t v1 = *(void *)(*(void *)a1 + 24);
  v1[1] = v3;
  *((unsigned char *)v1 + 16) = v4;
  *((unsigned char *)v1 + 18) = v2;
  Binding.wrappedValue.setter();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t AnimatedSaveView.$saveState.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  Binding.projectedValue.getter();
  return v1;
}

double AnimatedSaveView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  double v5 = *(double *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 16);
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v9 = v8;
  closure #1 in AnimatedSaveView.body.getter(v3, v4, v6, (uint64_t)__src, v5);
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  LOBYTE(v22) = v6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  MEMORY[0x1C87728E0](&v19);
  if (v19 == 2) {
    double v11 = 0.0;
  }
  else {
    double v11 = 1.0;
  }
  static Animation.easeIn(duration:)();
  uint64_t v12 = Animation.delay(_:)();
  swift_release();
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  LOBYTE(v22) = v6;
  MEMORY[0x1C87728E0](&v19, v10);
  char v13 = v19;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v14 = v20;
  uint64_t v15 = v22;
  LOBYTE(v19) = v21;
  char v17 = v23;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  memcpy((void *)(a1 + 16), __src, 0x118uLL);
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) = v12;
  *(unsigned char *)(a1 + 312) = v13;
  *(void *)(a1 + 320) = v14;
  *(unsigned char *)(a1 + 328) = v19;
  *(void *)(a1 + 336) = v15;
  *(unsigned char *)(a1 + 344) = v17;
  double result = *(double *)&v24;
  *(_OWORD *)(a1 + 352) = v24;
  return result;
}

uint64_t closure #1 in AnimatedSaveView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  closure #1 in closure #1 in AnimatedSaveView.body.getter(a1, a2, a3, (uint64_t)v25, a5);
  v24[0] = a1;
  v24[1] = a2;
  LOBYTE(v24[2]) = a3;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  MEMORY[0x1C87728E0](v23);
  uint64_t v22 = Image.init(systemName:)();
  v24[0] = a1;
  v24[1] = a2;
  LOBYTE(v24[2]) = a3;
  MEMORY[0x1C87728E0](v23, v13);
  if (LOBYTE(v23[0]))
  {
    uint64_t v21 = static Color.white.getter();
  }
  else
  {
    static Color.gray.getter();
    uint64_t v21 = Color.opacity(_:)();
    swift_release();
  }
  uint64_t KeyPath = swift_getKeyPath();
  static Font.Weight.medium.getter();
  uint64_t v15 = type metadata accessor for Font.Design();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v15);
  uint64_t v16 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v12);
  uint64_t v17 = swift_getKeyPath();
  v24[0] = a1;
  v24[1] = a2;
  LOBYTE(v24[2]) = a3;
  MEMORY[0x1C87728E0](v23, v13);
  if (LOBYTE(v23[0]) >= 2u) {
    double v18 = 0.0;
  }
  else {
    double v18 = -2.0;
  }
  memcpy(v23, v25, 0xC9uLL);
  memcpy((void *)a4, v25, 0xC9uLL);
  *(void *)(a4 + 208) = v22;
  *(void *)(a4 + 216) = KeyPath;
  *(void *)(a4 + 224) = v21;
  *(void *)(a4 + 232) = closure #1 in ScreeningTranscriptLabel.body.getter;
  *(void *)(a4 + 240) = 0;
  *(void *)(a4 + 248) = v17;
  *(void *)(a4 + 256) = v16;
  *(void *)(a4 + 264) = 0;
  *(double *)(a4 + 272) = v18;
  outlined retain of Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>((uint64_t)v23);
  memcpy(v24, v25, 0xC9uLL);
  return outlined release of Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>((uint64_t)v24);
}

uint64_t closure #1 in closure #1 in AnimatedSaveView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v38 = v42;
  uint64_t v35 = v43;
  uint64_t v36 = v40;
  uint64_t v37 = v44;
  static Color.gray.getter();
  uint64_t v34 = Color.opacity(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = static Color.green.getter();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  MEMORY[0x1C87728E0](&v39);
  int v13 = v39;
  static UnitPoint.center.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v33 = static Animation.spring(response:dampingFraction:blendDuration:)();
  MEMORY[0x1C87728E0](&v39, v12);
  unsigned __int8 v32 = v39;
  uint64_t v31 = static Color.green.getter();
  MEMORY[0x1C87728E0](&v39, v12);
  int v18 = v39;
  MEMORY[0x1C87728E0](&v39, v12);
  uint64_t v19 = qword_1C3780538[(char)v39];
  if (v13) {
    double v20 = 1.0;
  }
  else {
    double v20 = 0.0;
  }
  if (v18) {
    double v21 = 0.0;
  }
  else {
    double v21 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a1;
  *(void *)(v26 + 24) = a2;
  *(unsigned char *)(v26 + 32) = a3;
  *(double *)(v26 + 40) = a5;
  swift_retain();
  swift_retain();
  uint64_t v27 = static Animation.spring(response:dampingFraction:blendDuration:)();
  MEMORY[0x1C87728E0](&v39, v12);
  unsigned __int8 v28 = v39;
  uint64_t v29 = v41;
  *(void *)a4 = v36;
  *(void *)(a4 + 8) = v29;
  *(void *)(a4 + 16) = v38;
  *(void *)(a4 + 24) = v35;
  *(void *)(a4 + 32) = v37;
  *(void *)(a4 + 40) = KeyPath;
  *(void *)(a4 + 48) = v34;
  *(void *)(a4 + 56) = v11;
  *(_WORD *)(a4 + 64) = 256;
  *(double *)(a4 + 72) = v20;
  *(double *)(a4 + 80) = v20;
  *(void *)(a4 + 88) = v15;
  *(void *)(a4 + 96) = v17;
  *(void *)(a4 + 104) = v33;
  *(unsigned char *)(a4 + 112) = v32;
  *(void *)(a4 + 120) = v31;
  *(_WORD *)(a4 + 128) = 256;
  *(double *)(a4 + 136) = v21;
  *(void *)(a4 + 144) = v19;
  *(void *)(a4 + 152) = v19;
  *(void *)(a4 + 160) = v23;
  *(void *)(a4 + 168) = v25;
  *(void *)(a4 + 176) = partial apply for closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter;
  *(void *)(a4 + 184) = v26;
  *(void *)(a4 + 192) = v27;
  *(unsigned char *)(a4 + 200) = v28;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  *(unsigned char *)(v13 + 32) = a5;
  *(double *)(v13 + 40) = a1;
  swift_retain();
  swift_retain();
  static AnimationCompletionCriteria.logicallyComplete.getter();
  Transaction.addAnimationCompletion(criteria:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void *closure #1 in closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<AnimatedSaveView.SaveState>);
  double result = MEMORY[0x1C87728E0](&v1);
  if (v1 == 1)
  {
    LOBYTE(v1) = 2;
    return (void *)Binding.wrappedValue.setter();
  }
  return result;
}

uint64_t AnimatedSaveView.init(saveState:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = 0x3FD6666666666666;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedSaveView.SaveState and conformance AnimatedSaveView.SaveState()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedSaveView.SaveState and conformance AnimatedSaveView.SaveState;
  if (!lazy protocol witness table cache variable for type AnimatedSaveView.SaveState and conformance AnimatedSaveView.SaveState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedSaveView.SaveState and conformance AnimatedSaveView.SaveState);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AnimatedSaveView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeWithCopy for AnimatedSaveView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatedSaveView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AnimatedSaveView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for AnimatedSaveView()
{
  return &type metadata for AnimatedSaveView;
}

unsigned char *storeEnumTagSinglePayload for AnimatedSaveView.SaveState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C341A6C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimatedSaveView.SaveState()
{
  return &type metadata for AnimatedSaveView.SaveState;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>);
    lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<AnimatedSaveView.SaveState> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<AnimatedSaveView.SaveState>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _TransactionModifier>, _EnvironmentKeyWritingModifier<Font?>>, _OffsetEffect>)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of Font.Design?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Group<TupleView<(ModifiedContent<_StrokedShape<Circle>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _OpacityEffect>, _ScaleEffect>, _TransactionModifier>, _AnimationModifier<AnimatedSaveView.SaveState>>)>>(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter(*(double *)(v1 + 40), a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t objectdestroyTm_11()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter()
{
  return closure #1 in closure #1 in closure #1 in closure #1 in AnimatedSaveView.body.getter();
}

id LinkShareActivityViewController.__allocating_init(activityItems:applicationActivities:)(uint64_t a1, uint64_t a2)
{
  v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a2)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIActivity);
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(v2), sel_initWithActivityItems_applicationActivities_, v4.super.isa, v5.super.isa);

  return v6;
}

id LinkShareActivityViewController.init(activityItems:applicationActivities:)(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit31LinkShareActivityViewController_cnkActivityItems] = a1;
  swift_bridgeObjectRetain();
  v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a2)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIActivity);
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }
  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for LinkShareActivityViewController();
  id v6 = objc_msgSendSuper2(&v11, sel_initWithActivityItems_applicationActivities_, v4.super.isa, v5.super.isa);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIActivityType>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
  uint64_t v8 = (void *)*MEMORY[0x1E4F9F3E8];
  *(void *)(v7 + 32) = *MEMORY[0x1E4F9F3E8];
  id v9 = v8;
  outlined bridged method (mbnn) of @objc UIActivityViewController.excludedActivityTypes.setter(v7, v6);
  return v6;
}

uint64_t type metadata accessor for LinkShareActivityViewController()
{
  return self;
}

Swift::Void __swiftcall LinkShareActivityViewController._prepare(_:)(UIActivity a1)
{
  v35.receiver = v1;
  v35.super_class = (Class)type metadata accessor for LinkShareActivityViewController();
  objc_msgSendSuper2(&v35, sel__prepareActivity_, a1.super.isa);
  id v3 = [(objc_class *)a1.super.isa activityType];
  if (!v3) {
    return;
  }
  NSArray v4 = v3;
  NSArray v5 = (void *)*MEMORY[0x1E4F9F370];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {
    id v13 = v5;

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v12 = v5;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      return;
    }
  }
  id v14 = [(objc_class *)a1.super.isa activityViewController];
  if (!v14) {
    goto LABEL_17;
  }
  uint64_t v15 = v14;
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  if (!v16)
  {

LABEL_17:
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    return;
  }
  uint64_t v17 = (void *)v16;
  uint64_t v18 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit31LinkShareActivityViewController_cnkActivityItems];
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v18 + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of Any(v20, (uint64_t)v32);
      outlined init with copy of Any((uint64_t)v32, (uint64_t)v31);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TULinkShareItem);
      if (swift_dynamicCast()) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      v20 += 32;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();

    outlined init with take of Any(v32, &v33);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_21:
    long long v33 = 0u;
    long long v34 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v34 + 1))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TULinkShareItem);
    if (swift_dynamicCast())
    {
      double v21 = *(void **)&v32[0];
      type metadata accessor for LinkShareItemHTMLTextGenerator();
      uint64_t v22 = static LinkShareItemHTMLTextGenerator.htmlFragment(forLinkShareItem:)(v21);
      if (v23)
      {
        uint64_t v24 = (void *)MEMORY[0x1C87730B0](v22);
        swift_bridgeObjectRelease();
        objc_msgSend(v17, sel_setMessageBody_isHTML_, v24, 1);
      }
      else
      {
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1C3769620;
        *(void *)&long long v33 = v21;
        id v26 = v21;
        uint64_t v27 = String.init<A>(reflecting:)();
        uint64_t v29 = v28;
        *(void *)(v25 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v25 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v25 + 32) = v27;
        *(void *)(v25 + 40) = v29;
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
      }
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v33);
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
}

id LinkShareActivityViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkShareActivityViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void outlined bridged method (mbnn) of @objc UIActivityViewController.excludedActivityTypes.setter(uint64_t a1, void *a2)
{
  type metadata accessor for UIActivityType(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setExcludedActivityTypes_, isa);
}

void *ScreenSharingInteraction.__allocating_init(interactionController:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ScreenSharingInteraction.init(interactionController:)(a1);
}

uint64_t ScreenSharingInteraction.view.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

void ScreenSharingInteraction.view.setter(void *a1)
{
}

uint64_t key path getter for ScreenSharingInteraction.view : ScreenSharingInteraction@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ScreenSharingInteraction.view : ScreenSharingInteraction(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  id v4 = *a1;
  return v3(v2);
}

void (*ScreenSharingInteraction.view.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_view;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  v3[3] = MEMORY[0x1C8776240](v5);
  return TapInteraction.view.modify;
}

void ScreenSharingInteraction.captureInteraction.didset(void *a1)
{
  id v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  if (a1)
  {
    uint64_t v8 = one-time initialization token for screenSharing;
    id v40 = a1;
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.screenSharing);
    uint64_t v10 = v2;
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v42 = v14;
      *(_DWORD *)id v13 = 136315138;
      uint64_t v15 = (*(uint64_t (**)(void))((*v7 & *(void *)v10) + 0x88))();
      if (v15)
      {
        uint64_t v41 = v15;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        uint64_t v16 = String.init<A>(reflecting:)();
        unint64_t v18 = v17;
      }
      else
      {
        uint64_t v16 = 7104878;
        unint64_t v18 = 0xE300000000000000;
      }
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v11, v12, "Removing screen sharing capture interaction from view: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v14, -1, -1);
      MEMORY[0x1C87760E0](v13, -1, -1);

      uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
    }
    else
    {
    }
    uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v7 & *(void *)v10) + 0x88))();
    id v20 = v40;
    if (v19)
    {
      double v21 = v19;
      objc_msgSend(v19, sel_removeInteraction_, v40);
    }
    uint64_t v22 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v22);
    uint64_t v23 = (void *)swift_allocObject();
    id v23[2] = 0;
    v23[3] = 0;
    v23[4] = v20;
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ScreenSharingInteraction.captureInteraction.didset, (uint64_t)v23);
    swift_release();
  }
  uint64_t v24 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction];
  if (v24)
  {
    uint64_t v25 = one-time initialization token for screenSharing;
    id v26 = v24;
    if (v25 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.screenSharing);
    uint64_t v28 = v2;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v42 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v33 = (*(uint64_t (**)(void))((*v7 & *(void *)v28) + 0x88))();
      if (v33)
      {
        uint64_t v41 = v33;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        uint64_t v34 = String.init<A>(reflecting:)();
        unint64_t v36 = v35;
      }
      else
      {
        uint64_t v34 = 7104878;
        unint64_t v36 = 0xE300000000000000;
      }
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v29, v30, "Adding screen sharing capture interaction to view: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v32, -1, -1);
      MEMORY[0x1C87760E0](v31, -1, -1);
    }
    else
    {
    }
    uint64_t v37 = (void *)(*(uint64_t (**)(void))((*v7 & *(void *)v28) + 0x88))();
    if (v37)
    {
      uint64_t v38 = v37;
      objc_msgSend(v37, sel_addInteraction_, v26);
    }
    (*(void (**)(void))((*v7 & *(void *)v28) + 0x100))();
    CaptureUIInteraction.deviceOrientation.setter();
  }
}

uint64_t closure #1 in ScreenSharingInteraction.captureInteraction.didset()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in CaptioningStateManager.setCaptioningEnabled(_:);
  return MEMORY[0x1F414A750]();
}

void ScreenSharingInteraction.captureInteraction.setter(void *a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction) = a1;
  id v3 = a1;
  ScreenSharingInteraction.captureInteraction.didset(v2);
}

id ScreenSharingInteraction.interactionController.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_interactionController);
}

uint64_t key path getter for ScreenSharingInteraction.isEnabled : ScreenSharingInteraction@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingInteraction.isEnabled : ScreenSharingInteraction(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(*a1);
}

unint64_t ScreenSharingInteraction.isEnabled.didset(char a1)
{
  id v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_isEnabled;
  unint64_t result = swift_beginAccess();
  if (*v4 != v3)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(unint64_t *__return_ptr, unint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)((char *)v2 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_interactionController))
                                                                             + 0x178))(&v9, result);
    unint64_t v7 = v9;
    unint64_t v8 = v9;
    (*(void (**)(unint64_t *))((*v6 & *v2) + 0x128))(&v8);
    return outlined consume of RemoteControlState(v7);
  }
  return result;
}

uint64_t ScreenSharingInteraction.isEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

unint64_t ScreenSharingInteraction.isEnabled.setter(char a1)
{
  OUTLINED_FUNCTION_4_10();
  char v3 = *v1;
  *uint64_t v1 = a1;
  return ScreenSharingInteraction.isEnabled.didset(v3);
}

void (*ScreenSharingInteraction.isEnabled.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  OUTLINED_FUNCTION_6_44();
  *((unsigned char *)v3 + 32) = *v1;
  return ScreenSharingInteraction.isEnabled.modify;
}

void ScreenSharingInteraction.isEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ScreenSharingInteraction.isEnabled.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

void key path getter for ScreenSharingInteraction.displayScale : ScreenSharingInteraction(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
}

uint64_t key path setter for ScreenSharingInteraction.displayScale : ScreenSharingInteraction(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0))(*a1);
}

unint64_t ScreenSharingInteraction.displayScale.didset(double a1)
{
  id v2 = v1;
  uint64_t v4 = (double *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_displayScale);
  unint64_t result = swift_beginAccess();
  if (*v4 != a1)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(unint64_t *__return_ptr, unint64_t, double))((*MEMORY[0x1E4FBC8C8] & **(void **)((char *)v2 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_interactionController))
                                                                                     + 0x178))(&v9, result, *v4);
    unint64_t v7 = v9;
    unint64_t v8 = v9;
    (*(void (**)(unint64_t *))((*v6 & *v2) + 0x128))(&v8);
    return outlined consume of RemoteControlState(v7);
  }
  return result;
}

double ScreenSharingInteraction.displayScale.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

unint64_t ScreenSharingInteraction.displayScale.setter(double a1)
{
  char v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_displayScale);
  swift_beginAccess();
  double v4 = *v3;
  *char v3 = a1;
  return ScreenSharingInteraction.displayScale.didset(v4);
}

void (*ScreenSharingInteraction.displayScale.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  OUTLINED_FUNCTION_6_44();
  v3[3] = *v1;
  return ScreenSharingInteraction.displayScale.modify;
}

void ScreenSharingInteraction.displayScale.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ScreenSharingInteraction.displayScale.setter(*(double *)(*(void *)a1 + 24));
  free(v1);
}

uint64_t key path getter for ScreenSharingInteraction.deviceOrientation : ScreenSharingInteraction@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ScreenSharingInteraction.deviceOrientation : ScreenSharingInteraction(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x108))(*a1);
}

void ScreenSharingInteraction.deviceOrientation.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction);
  if (v1)
  {
    swift_beginAccess();
    id v2 = v1;
    CaptureUIInteraction.deviceOrientation.setter();
  }
}

uint64_t ScreenSharingInteraction.deviceOrientation.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(void *)v0;
}

void ScreenSharingInteraction.deviceOrientation.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_4_10();
  *uint64_t v1 = a1;
  ScreenSharingInteraction.deviceOrientation.didset();
}

void (*ScreenSharingInteraction.deviceOrientation.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_6_1();
  return ScreenSharingInteraction.deviceOrientation.modify;
}

void ScreenSharingInteraction.deviceOrientation.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ScreenSharingInteraction.deviceOrientation.didset();
  }
}

void *ScreenSharingInteraction.init(interactionController:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<RemoteControlState>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_5_1();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ScreenSharingInteractionSession?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v14 = v1;
  uint64_t v41 = v6;
  uint64_t v42 = v4;
  uint64_t v40 = v2;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v15 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v14[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_cancellables] = v15;
  *(void *)&v14[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction] = 0;
  v14[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_isEnabled] = 1;
  *(void *)&v14[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_displayScale] = 0x3FF0000000000000;
  *(void *)&v14[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_deviceOrientation] = 0;
  *(void *)&v14[OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_interactionController] = a1;
  id v16 = a1;

  unint64_t v17 = (objc_class *)type metadata accessor for ScreenSharingInteraction();
  v44.receiver = v14;
  v44.super_class = v17;
  objc_msgSendSuper2(&v44, sel_init);
  OUTLINED_FUNCTION_5_49();
  uint64_t v19 = *(void (**)(void))(v18 + 272);
  id v21 = v20;
  v19();
  uint64_t v22 = swift_allocObject();
  id v38 = v21;
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<ScreenSharingInteractionSession?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ScreenSharingInteractionSession?>.Publisher);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<RemoteControlState>.Publisher, OS_dispatch_queue>);
  uint64_t v39 = &v36;
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_5_49();
  uint64_t v29 = v40;
  (*(void (**)(void))(v28 + 400))();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v43 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v30 - 8);
  OUTLINED_FUNCTION_5_1();
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v22, 1, 1, v31);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<RemoteControlState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<RemoteControlState>.Publisher);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  uint64_t v32 = v42;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v22);

  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v29, v32);
  swift_allocObject();
  uint64_t v33 = v38;
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<RemoteControlState>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<RemoteControlState>.Publisher, OS_dispatch_queue>);
  uint64_t v34 = v37;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v34);
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return v33;
}

uint64_t type metadata accessor for ScreenSharingInteraction()
{
  return self;
}

uint64_t sub_1C341C944()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in ScreenSharingInteraction.init(interactionController:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x120))(v2);
  }
}

void partial apply for closure #1 in ScreenSharingInteraction.init(interactionController:)(uint64_t *a1)
{
  closure #1 in ScreenSharingInteraction.init(interactionController:)(a1, v1);
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void closure #2 in ScreenSharingInteraction.init(interactionController:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v2;
    (*(void (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x128))(&v6);
  }
}

void partial apply for closure #2 in ScreenSharingInteraction.init(interactionController:)(uint64_t *a1)
{
  closure #2 in ScreenSharingInteraction.init(interactionController:)(a1, v1);
}

void ScreenSharingInteraction.updateCaptureInteraction(using:)(uint64_t a1)
{
  ScreenSharingInteraction.captureInteraction.setter(0);
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 280);
    uint64_t v4 = swift_retain();
    uint64_t v5 = (void *)v3(v4);
    ScreenSharingInteraction.captureInteraction.setter(v5);
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **(void **)((char *)v1
                                                                                                 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_interactionController))
                                                           + 0x178))(&v9);
    unint64_t v7 = v9;
    unint64_t v8 = v9;
    (*(void (**)(unint64_t *))((*v6 & *v1) + 0x128))(&v8);
    swift_release();
    outlined consume of RemoteControlState(v7);
  }
}

void ScreenSharingInteraction.updateCaptureInteraction(using:)(unint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for InteractionState();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = MEMORY[0x1F4188790](v10);
  id v13 = (uint64_t *)((char *)&v34 - v12);
  unint64_t v14 = *a1;
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(uint64_t (**)(__n128))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xD0))(v11))
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.screenSharing);
    outlined copy of RemoteControlState(v14);
    outlined copy of RemoteControlState(v14);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v35 = v4;
      uint64_t v36 = v14;
      uint64_t v37 = v20;
      uint64_t v34 = v6;
      *(_DWORD *)uint64_t v19 = 136315138;
      outlined copy of RemoteControlState(v14);
      uint64_t v21 = String.init<A>(reflecting:)();
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v37);
      uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v6 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of RemoteControlState(v14);
      outlined consume of RemoteControlState(v14);
      _os_log_impl(&dword_1C2F90000, v17, v18, "Updating capture UI interaction for remote control state: %s", v19, 0xCu);
      swift_arrayDestroy();
      uint64_t v4 = v35;
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined consume of RemoteControlState(v14);
      outlined consume of RemoteControlState(v14);
    }

    uint64_t v29 = *(void **)((char *)v2 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction);
    if (v29)
    {
      unint64_t v30 = v14 >> 61;
      uint64_t v31 = *(void (**)(void))((*v15 & *v2) + 0xE8);
      id v28 = v29;
      v31();
      uint64_t v33 = (unsigned int *)MEMORY[0x1E4F99CE8];
      if (((1 << v30) & 0x23) != 0)
      {
        *id v13 = v32;
        uint64_t v33 = (unsigned int *)MEMORY[0x1E4F99CE0];
      }
      else if (((1 << v30) & 0xC) != 0)
      {
        uint64_t v33 = (unsigned int *)MEMORY[0x1E4F99CF0];
      }
      (*(void (**)(void *, void, uint64_t))(v6 + 104))(v13, *v33, v4);
      goto LABEL_19;
    }
  }
  else
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.screenSharing);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1C2F90000, v24, v25, "Screen sharing interactions are disabled, pausing capture UI interaction", v26, 2u);
      OUTLINED_FUNCTION_3();
    }

    uint64_t v27 = *(void **)((char *)v2 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction);
    if (v27)
    {
      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F99CE8], v4);
      id v28 = v27;
LABEL_19:
      CaptureUIInteraction.interactionState.setter();
    }
  }
}

id ScreenSharingInteraction.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ScreenSharingInteraction.init()()
{
}

id ScreenSharingInteraction.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScreenSharingInteraction();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall ScreenSharingInteraction.willMove(to:)(UIView_optional *to)
{
  OUTLINED_FUNCTION_4_13();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 136))();
  if (!v3)
  {
LABEL_12:
    OUTLINED_FUNCTION_16();
    return;
  }
  id v18 = (id)v3;
  OUTLINED_FUNCTION_4_13();
  (*(void (**)(void))(v4 + 144))(0);
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction);
  if (v5)
  {
    uint64_t v6 = one-time initialization token for screenSharing;
    id v7 = v5;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.screenSharing);
    id v9 = v18;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      id v13 = v9;
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v10, v11, "Removing screen sharing capture interaction from previous view: %s", v12, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    objc_msgSend(v9, sel_removeInteraction_, v7);

    goto LABEL_12;
  }
  OUTLINED_FUNCTION_16();
}

Swift::Void __swiftcall ScreenSharingInteraction.didMove(to:)(UIView_optional *to)
{
  uint64_t v3 = *(void (**)(UIView_optional *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90);
  uint64_t v4 = to;
  v3(to);
  if (!to) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit24ScreenSharingInteraction_captureInteraction);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = v4;
  id v7 = v5;
  [(UIView_optional *)v6 addInteraction:v7];
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.screenSharing);
  uint64_t v17 = v6;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136315138;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    uint64_t v12 = v17;
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v9, v10, "Adding screen sharing capture interaction to new view: %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

LABEL_7:
    OUTLINED_FUNCTION_16();
    return;
  }

  OUTLINED_FUNCTION_16();
}

uint64_t method lookup function for ScreenSharingInteraction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingInteraction);
}

uint64_t dispatch thunk of ScreenSharingInteraction.view.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.view.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.view.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.isEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.isEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.isEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.displayScale.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.displayScale.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.displayScale.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.deviceOrientation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.deviceOrientation.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.deviceOrientation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.__allocating_init(interactionController:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of ScreenSharingInteraction.updateCaptureInteraction(using:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t sub_1C341DA80()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingInteraction.captureInteraction.didset()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in CaptioningStateManager.setCaptioningEnabled(_:);
  return closure #1 in ScreenSharingInteraction.captureInteraction.didset();
}

void __swiftcall UILabel.init(font:textColor:)(UILabel *__return_ptr retstr, UIFont font, UIColor_optional textColor)
{
  Class isa = textColor.value.super.isa;
  id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v5, sel_setFont_, font.super.isa);
  uint64_t v6 = (objc_class *)v5;
  if (isa)
  {
    uint64_t v6 = isa;
    objc_msgSend(v5, sel_setTextColor_, v6);
  }
}

uint64_t specialized static ViewBuilder.buildBlock<each A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of FeatureEligibility?(*a1, a2, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<Modifie);
  uint64_t v5 = a2 + v4[12];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  char v8 = *(unsigned char *)(v6 + 8);
  uint64_t v9 = *(void *)(v6 + 16);
  char v10 = *(unsigned char *)(v6 + 24);
  uint64_t v11 = *(void *)(v6 + 32);
  char v12 = *(unsigned char *)(v6 + 40);
  long long v13 = *(_OWORD *)(v6 + 48);
  *(void *)uint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = v8;
  *(void *)(v5 + 16) = v9;
  *(unsigned char *)(v5 + 24) = v10;
  *(void *)(v5 + 32) = v11;
  *(unsigned char *)(v5 + 40) = v12;
  *(_OWORD *)(v5 + 48) = v13;
  uint64_t v14 = a2 + v4[16];
  uint64_t v15 = *(void *)(v7 + 8);
  uint64_t v68 = *(void **)v7;
  char v16 = *(unsigned char *)(v7 + 16);
  uint64_t v17 = *(void *)(v7 + 24);
  LOBYTE(v9) = *(unsigned char *)(v7 + 32);
  long long v18 = *(_OWORD *)(v7 + 40);
  *(void *)uint64_t v14 = *(void *)v7;
  *(void *)(v14 + 8) = v15;
  *(unsigned char *)(v14 + 16) = v16;
  *(void *)(v14 + 24) = v17;
  *(unsigned char *)(v14 + 32) = v9;
  *(_OWORD *)(v14 + 40) = v18;
  uint64_t v19 = a2 + v4[20];
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  LOBYTE(v17) = *(unsigned char *)(v20 + 8);
  uint64_t v22 = *(void *)(v20 + 16);
  char v23 = *(unsigned char *)(v20 + 24);
  uint64_t v24 = *(void *)(v20 + 32);
  char v25 = *(unsigned char *)(v20 + 40);
  long long v26 = *(_OWORD *)(v20 + 48);
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v17;
  *(void *)(v19 + 16) = v22;
  *(unsigned char *)(v19 + 24) = v23;
  *(void *)(v19 + 32) = v24;
  *(unsigned char *)(v19 + 40) = v25;
  *(_OWORD *)(v19 + 48) = v26;
  uint64_t v27 = a2 + v4[24];
  uint64_t v29 = *(void *)v21;
  uint64_t v28 = *(void *)(v21 + 8);
  char v30 = *(unsigned char *)(v21 + 16);
  char v66 = v30;
  uint64_t v31 = *(void *)(v21 + 24);
  uint64_t v67 = *(void *)(v21 + 32);
  LOBYTE(v20) = *(unsigned char *)(v21 + 40);
  char v32 = *(unsigned char *)(v21 + 41);
  LOBYTE(v21) = *(unsigned char *)(v21 + 42);
  *(void *)uint64_t v27 = v29;
  *(void *)(v27 + 8) = v28;
  *(unsigned char *)(v27 + 16) = v30;
  *(void *)(v27 + 24) = v31;
  *(void *)(v27 + 32) = v67;
  *(unsigned char *)(v27 + 40) = v20;
  *(unsigned char *)(v27 + 41) = v32;
  *(unsigned char *)(v27 + 42) = v21;
  uint64_t v33 = a2 + v4[28];
  uint64_t v34 = a1[5];
  uint64_t v35 = a1[6];
  LOBYTE(v17) = *(unsigned char *)(v34 + 8);
  uint64_t v36 = *(void *)(v34 + 16);
  char v37 = *(unsigned char *)(v34 + 24);
  uint64_t v38 = *(void *)(v34 + 32);
  char v39 = *(unsigned char *)(v34 + 40);
  long long v40 = *(_OWORD *)(v34 + 48);
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = v17;
  *(void *)(v33 + 16) = v36;
  *(unsigned char *)(v33 + 24) = v37;
  *(void *)(v33 + 32) = v38;
  *(unsigned char *)(v33 + 40) = v39;
  *(_OWORD *)(v33 + 48) = v40;
  uint64_t v41 = a2 + v4[32];
  uint64_t v43 = *(void *)v35;
  uint64_t v42 = *(void *)(v35 + 8);
  char v44 = *(unsigned char *)(v35 + 16);
  uint64_t v46 = *(void *)(v35 + 24);
  uint64_t v45 = *(void *)(v35 + 32);
  LOBYTE(v34) = *(unsigned char *)(v35 + 40);
  char v47 = *(unsigned char *)(v35 + 41);
  LOBYTE(v35) = *(unsigned char *)(v35 + 42);
  *(void *)uint64_t v41 = v43;
  *(void *)(v41 + 8) = v42;
  *(unsigned char *)(v41 + 16) = v44;
  *(void *)(v41 + 24) = v46;
  *(void *)(v41 + 32) = v45;
  *(unsigned char *)(v41 + 40) = v34;
  *(unsigned char *)(v41 + 41) = v47;
  *(unsigned char *)(v41 + 42) = v35;
  uint64_t v48 = a2 + v4[36];
  uint64_t v50 = a1[7];
  uint64_t v49 = a1[8];
  uint64_t v51 = *(void *)v50;
  char v52 = *(unsigned char *)(v50 + 8);
  uint64_t v53 = *(void *)(v50 + 16);
  LOBYTE(v36) = *(unsigned char *)(v50 + 24);
  uint64_t v54 = *(void *)(v50 + 32);
  long long v55 = *(_OWORD *)(v50 + 48);
  LOBYTE(v50) = *(unsigned char *)(v50 + 40);
  *(void *)uint64_t v48 = v51;
  *(unsigned char *)(v48 + 8) = v52;
  *(void *)(v48 + 16) = v53;
  *(unsigned char *)(v48 + 24) = v36;
  *(void *)(v48 + 32) = v54;
  *(unsigned char *)(v48 + 40) = v50;
  *(_OWORD *)(v48 + 48) = v55;
  outlined init with copy of FeatureEligibility?(v49, a2 + v4[40], &demangling cache variable for type metadata for HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  uint64_t v56 = a2 + v4[44];
  uint64_t v57 = a1[9];
  char v58 = *(unsigned char *)(v57 + 8);
  uint64_t v59 = *(void *)(v57 + 16);
  char v60 = *(unsigned char *)(v57 + 24);
  uint64_t v61 = *(void *)(v57 + 32);
  char v62 = *(unsigned char *)(v57 + 40);
  long long v63 = *(_OWORD *)(v57 + 48);
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = v58;
  *(void *)(v56 + 16) = v59;
  *(unsigned char *)(v56 + 24) = v60;
  *(void *)(v56 + 32) = v61;
  *(unsigned char *)(v56 + 40) = v62;
  *(_OWORD *)(v56 + 48) = v63;
  id v64 = v68;
  outlined copy of Text.Storage(v29, v28, v66);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Text.Storage(v43, v42, v44);
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t default argument 1 of RemoteControlOnboardingView.init(requestingParticipant:horizontalSizeClass:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t RemoteControlOnboardingView.init(requestingParticipant:horizontalSizeClass:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _s15ConversationKit11ParticipantVWObTm_1(a1, a3, (void (*)(void))type metadata accessor for Participant);
  uint64_t v5 = type metadata accessor for RemoteControlOnboardingView();
  uint64_t v6 = (uint64_t *)(a3 + *(int *)(v5 + 20));
  *uint64_t v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of Any?(a2, a3 + *(int *)(v5 + 24), &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
}

uint64_t key path getter for EnvironmentValues.dismiss : EnvironmentValues()
{
  return EnvironmentValues.dismiss.getter();
}

double PresentationAutomaticHeightModifier.calculatedHeight.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGFloat>);
  State.wrappedValue.getter();
  return v1;
}

void key path getter for PresentationAutomaticHeightModifier.calculatedHeight : PresentationAutomaticHeightModifier(double *a1@<X8>)
{
  *a1 = PresentationAutomaticHeightModifier.calculatedHeight.getter();
}

uint64_t key path setter for PresentationAutomaticHeightModifier.calculatedHeight : PresentationAutomaticHeightModifier()
{
  return PresentationAutomaticHeightModifier.calculatedHeight.setter();
}

uint64_t PresentationAutomaticHeightModifier.calculatedHeight.setter()
{
  return State.wrappedValue.setter();
}

void (*PresentationAutomaticHeightModifier.calculatedHeight.modify(double **a1, uint64_t a2, double a3))(uint64_t a1)
{
  uint64_t v6 = (double *)malloc(0x38uLL);
  *a1 = v6;
  *((void *)v6 + 5) = a2;
  v6[4] = a3;
  *uint64_t v6 = a3;
  *((void *)v6 + 1) = a2;
  swift_retain();
  *((void *)v6 + 6) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGFloat>);
  State.wrappedValue.getter();
  return PresentationAutomaticHeightModifier.calculatedHeight.modify;
}

void PresentationAutomaticHeightModifier.calculatedHeight.modify(uint64_t a1)
{
  double v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 16);
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  *double v1 = *(void *)(*(void *)a1 + 32);
  v1[1] = v3;
  v1[3] = v2;
  State.wrappedValue.setter();
  swift_release();
  free(v1);
}

double PresentationAutomaticHeightModifier.$calculatedHeight.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGFloat>);
  State.projectedValue.getter();
  return v1;
}

uint64_t PresentationAutomaticHeightModifier.body(content:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_63();
  uint64_t v9 = static Alignment.center.getter();
  uint64_t v11 = v10;
  uint64_t v12 = static Color.clear.getter();
  uint64_t v13 = swift_allocObject();
  *(double *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<PresentationAutomaticHeightModifier>);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v3, a1);
  uint64_t v15 = (uint64_t *)(v3 + *(int *)(v7 + 36));
  *uint64_t v15 = v12;
  v15[1] = (uint64_t)closure #1 in closure #1 in PresentationAutomaticHeightModifier.body(content:);
  _OWORD v15[2] = 0;
  v15[3] = (uint64_t)partial apply for closure #2 in closure #1 in PresentationAutomaticHeightModifier.body(content:);
  _OWORD v15[4] = v13;
  v15[5] = v9;
  v15[6] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationDetent>);
  uint64_t v16 = type metadata accessor for PresentationDetent();
  OUTLINED_FUNCTION_1(v16);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C3769620;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGFloat>);
  State.wrappedValue.getter();
  static PresentationDetent.height(_:)();
  specialized Set.init(_nonEmptyArrayLiteral:)();
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>> and conformance <> ModifiedContent<A, B>();
  View.presentationDetents(_:)();
  swift_bridgeObjectRelease();
  return outlined destroy of SystemUpdateNotice?(v3, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>>);
}

uint64_t closure #1 in closure #1 in PresentationAutomaticHeightModifier.body(content:)@<X0>(void *a1@<X8>)
{
  uint64_t result = GeometryProxy.size.getter();
  *a1 = v3;
  return result;
}

uint64_t closure #2 in closure #1 in PresentationAutomaticHeightModifier.body(content:)()
{
  return State.wrappedValue.setter();
}

uint64_t PresentationAutomaticHeightModifier.init()()
{
  State.init(wrappedValue:)();
  return v1;
}

double default argument 0 of PresentationAutomaticHeightModifier.init(calculatedHeight:)()
{
  return 0.0;
}

uint64_t PresentationAutomaticHeightModifier.init(calculatedHeight:)()
{
  State.init(wrappedValue:)();
  return v1;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance PresentationAutomaticHeightModifier(uint64_t a1)
{
  return PresentationAutomaticHeightModifier.body(content:)(a1, *(void *)(v1 + 8), *(double *)v1);
}

uint64_t View.presentationAutomaticHeight()(uint64_t a1, uint64_t a2)
{
  State.init(wrappedValue:)();
  MEMORY[0x1C87723E0](&v5, a1, &type metadata for PresentationAutomaticHeightModifier, a2);
  return swift_release();
}

id ContactAvatarView.makeUIView(context:)(uint64_t a1, uint64_t a2)
{
  id v3 = objc_allocWithZone(MEMORY[0x1E4F1BB38]);
  return objc_msgSend(v3, sel_initWithContact_, a2);
}

id ContactAvatarView.updateUIView(_:context:)(void *a1)
{
  return objc_msgSend(a1, sel_setContact_);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ContactAvatarView(uint64_t a1)
{
  return ContactAvatarView.makeUIView(context:)(a1, *v1);
}

id protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance ContactAvatarView(void *a1)
{
  return ContactAvatarView.updateUIView(_:context:)(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ContactAvatarView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ContactAvatarView and conformance ContactAvatarView();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContactAvatarView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ContactAvatarView and conformance ContactAvatarView();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance ContactAvatarView()
{
}

uint64_t RemoteControlOnboardingView.requestingParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit11ParticipantVWOcTm_12(v1, a1, (void (*)(void))type metadata accessor for Participant);
}

uint64_t RemoteControlOnboardingView.requestingParticipant.setter(uint64_t a1)
{
  return outlined assign with take of Participant(a1, v1);
}

uint64_t (*RemoteControlOnboardingView.requestingParticipant.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void RemoteControlOnboardingView.horizontalSizeClass.getter()
{
}

uint64_t RemoteControlOnboardingView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v4 = type metadata accessor for RemoteControlOnboardingView();
  uint64_t v5 = OUTLINED_FUNCTION_1(v4);
  uint64_t v40 = v6;
  uint64_t v39 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v38 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<Modifi);
  MEMORY[0x1F4188790](v9 - 8);
  OUTLINED_FUNCTION_63();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingM);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v16 = v15 - v14;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _Enviro)
      - 8;
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_21();
  uint64_t v19 = v18 - v17;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, C);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_21();
  uint64_t v23 = v22 - v21;
  *(void *)uint64_t v3 = static HorizontalAlignment.center.getter();
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 1;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifi);
  closure #1 in RemoteControlOnboardingView.body.getter(v1, v3 + *(int *)(v24 + 44));
  char v25 = static Edge.Set.all.getter();
  outlined init with copy of FeatureEligibility?(v3, v2, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<Modifi);
  uint64_t v26 = v2 + *(int *)(v11 + 44);
  *(unsigned char *)uint64_t v26 = v25;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(unsigned char *)(v26 + 40) = 1;
  outlined destroy of SystemUpdateNotice?(v3, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<Modifi);
  uint64_t v27 = v38;
  _s15ConversationKit11ParticipantVWOcTm_12(v1, v38, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  unint64_t v28 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v29 = swift_allocObject();
  _s15ConversationKit11ParticipantVWObTm_1(v27, v29 + v28, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  outlined init with copy of FeatureEligibility?(v2, v16, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
  char v30 = (uint64_t (**)())(v16 + *(int *)(v13 + 44));
  *char v30 = partial apply for closure #2 in RemoteControlOnboardingView.body.getter;
  v30[1] = (uint64_t (*)())v29;
  _OWORD v30[2] = 0;
  void v30[3] = 0;
  outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined init with copy of FeatureEligibility?(v16, v19, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingM);
  *(_WORD *)(v19 + *(int *)(v36 + 44)) = 256;
  outlined destroy of SystemUpdateNotice?(v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingM);
  uint64_t v42 = 0;
  State.init(wrappedValue:)();
  uint64_t v31 = v43;
  uint64_t v32 = v44;
  outlined init with copy of FeatureEligibility?(v19, v23, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _Enviro);
  uint64_t v33 = (void *)(v23 + *(int *)(v37 + 36));
  *uint64_t v33 = v31;
  v33[1] = v32;
  outlined destroy of SystemUpdateNotice?(v19, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _Enviro);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Col();
  View.interactiveDismissDisabled(_:)();
  return outlined destroy of SystemUpdateNotice?(v23, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, C);
}

uint64_t closure #1 in RemoteControlOnboardingView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v166 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v165 = (uint64_t)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v164 = (uint64_t *)((char *)&v127 - v6);
  uint64_t v150 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v167 = *(void **)(v150 - 8);
  MEMORY[0x1F4188790](v150);
  uint64_t v148 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  MEMORY[0x1F4188790](v170);
  uint64_t v155 = (uint64_t)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v169 = (uint64_t)&v127 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v147 = (uint64_t)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v153 = (char *)&v127 - v14;
  MEMORY[0x1F4188790](v15);
  CGFloat v154 = (char *)&v127 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v146 = (uint64_t)&v127 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v168 = (uint64_t)&v127 - v20;
  MEMORY[0x1F4188790](v21);
  int v152 = (char *)&v127 - v22;
  uint64_t v151 = type metadata accessor for RemoteControlOnboardingView();
  uint64_t v23 = *(void *)(v151 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  MEMORY[0x1F4188790](v151);
  char v149 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v127 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>);
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  CGFloat v162 = (char *)&v127 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v127 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  MEMORY[0x1F4188790](v34 - 8);
  uint64_t v163 = (uint64_t)&v127 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v127 - v37;
  MEMORY[0x1F4188790](v39);
  uint64_t v171 = (uint64_t)&v127 - v40;
  *(void *)uint64_t v38 = static VerticalAlignment.center.getter();
  *((void *)v38 + 1) = 0;
  v38[16] = 1;
  uint64_t v41 = &v38[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>)
                    + 44)];
  CGFloat v156 = type metadata accessor for RemoteControlOnboardingView;
  _s15ConversationKit11ParticipantVWOcTm_12(a1, (uint64_t)v27, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  unint64_t v42 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v43 = swift_allocObject();
  _s15ConversationKit11ParticipantVWObTm_1((uint64_t)v27, v43 + v42, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  uint64_t v45 = v162;
  v44(v162, v33, v28);
  *(void *)uint64_t v41 = 0;
  v41[8] = 1;
  uint64_t v46 = &v41[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>))
                    + 48)];
  uint64_t v47 = (uint64_t)v149;
  v44(v46, v45, v28);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v29 + 8);
  v48(v33, v28);
  v48(v45, v28);
  uint64_t v49 = v150;
  outlined init with take of Any?((uint64_t)v38, v171, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  CGFloat v162 = v243;
  int v161 = v244;
  uint64_t v160 = v245;
  int v159 = v246;
  uint64_t v157 = v248;
  uint64_t v158 = v247;
  Participant.contactDetails.getter();
  uint64_t v50 = v233;
  swift_bridgeObjectRelease();
  uint64_t v51 = v170;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v172 = a1;
  _s15ConversationKit11ParticipantVWOcTm_12(a1, v47, (void (*)(void))v156);
  if (!v50)
  {
    uint64_t v52 = *(void *)(v47 + *(int *)(type metadata accessor for Participant(0) + 28));
    if (v52) {
      uint64_t v53 = (uint64_t (*)())objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v52);
    }
    else {
      uint64_t v53 = (uint64_t (*)())objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8F8]), sel_init);
    }
    uint64_t v50 = v53;
  }
  CGFloat v156 = v50;
  _s15ConversationKit11ParticipantV5StateOWOhTm_1(v47, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  uint64_t v54 = (uint64_t)v152;
  uint64_t v151 = v172 + *(int *)(v151 + 24);
  specialized Environment.wrappedValue.getter();
  uint64_t v55 = *MEMORY[0x1E4F3DA58];
  uint64_t v57 = v167;
  uint64_t v56 = v168;
  char v149 = (void (*)(uint64_t, uint64_t, uint64_t))v167[13];
  v149(v168, v55, v49);
  __swift_storeEnumTagSinglePayload(v56, 0, 1, v49);
  uint64_t v58 = v169;
  uint64_t v59 = v169 + *(int *)(v51 + 48);
  outlined init with copy of FeatureEligibility?(v54, v169, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v56, v59, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v58, 1, v49) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v168, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of SystemUpdateNotice?(v54, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v59, 1, v49) == 1) {
      char v60 = &demangling cache variable for type metadata for UserInterfaceSizeClass?;
    }
    else {
      char v60 = &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?);
    }
  }
  else
  {
    uint64_t v61 = v146;
    outlined init with copy of FeatureEligibility?(v58, v146, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v59, 1, v49) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v168, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of SystemUpdateNotice?(v54, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      ((void (*)(uint64_t, uint64_t))v57[1])(v61, v49);
      char v60 = &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?);
    }
    else
    {
      char v62 = v148;
      ((void (*)(char *, uint64_t, uint64_t))v57[4])(v148, v59, v49);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass();
      dispatch thunk of static Equatable.== infix(_:_:)();
      long long v63 = (void (*)(char *, uint64_t))v57[1];
      v63(v62, v49);
      char v60 = &demangling cache variable for type metadata for UserInterfaceSizeClass?;
      outlined destroy of SystemUpdateNotice?(v168, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of SystemUpdateNotice?(v54, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v63((char *)v61, v49);
      uint64_t v57 = v167;
    }
  }
  uint64_t v64 = (uint64_t)v154;
  uint64_t v65 = v170;
  outlined destroy of SystemUpdateNotice?(v169, v60);
  specialized Environment.wrappedValue.getter();
  uint64_t v66 = (uint64_t)v153;
  v149((uint64_t)v153, v55, v49);
  __swift_storeEnumTagSinglePayload(v66, 0, 1, v49);
  uint64_t v67 = v155;
  uint64_t v68 = v155 + *(int *)(v65 + 48);
  outlined init with copy of FeatureEligibility?(v64, v155, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v66, v68, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v67, 1, v49) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v66, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of SystemUpdateNotice?(v64, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v68, 1, v49) == 1) {
      uint64_t v69 = &demangling cache variable for type metadata for UserInterfaceSizeClass?;
    }
    else {
      uint64_t v69 = &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?);
    }
  }
  else
  {
    uint64_t v70 = v147;
    outlined init with copy of FeatureEligibility?(v67, v147, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v68, 1, v49) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v66, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of SystemUpdateNotice?(v64, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      ((void (*)(uint64_t, uint64_t))v57[1])(v70, v49);
      uint64_t v69 = &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?);
    }
    else
    {
      uint64_t v71 = v66;
      uint64_t v72 = v148;
      ((void (*)(char *, uint64_t, uint64_t))v57[4])(v148, v68, v49);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass();
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v73 = (void (*)(char *, uint64_t))v57[1];
      v73(v72, v49);
      uint64_t v69 = &demangling cache variable for type metadata for UserInterfaceSizeClass?;
      outlined destroy of SystemUpdateNotice?(v71, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of SystemUpdateNotice?(v64, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v73((char *)v70, v49);
    }
  }
  outlined destroy of SystemUpdateNotice?(v67, v69);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  LODWORD(v155) = v250;
  CGFloat v154 = v251;
  LODWORD(v170) = v252;
  uint64_t v169 = v253;
  uint64_t v167 = v249;
  uint64_t v168 = v254;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v153 = v255;
  LODWORD(v152) = v256;
  uint64_t v151 = v257;
  LODWORD(v150) = v258;
  uint64_t v148 = v260;
  char v149 = (void (*)(uint64_t, uint64_t, uint64_t))v259;
  id v143 = self;
  id v74 = objc_msgSend(v143, sel_conversationKit);
  v279._unint64_t object = (void *)0xE000000000000000;
  v75._unint64_t object = (void *)0x80000001C37AD820;
  v75._uint64_t countAndFlagsBits = 0xD000000000000018;
  v76.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v76.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v77._uint64_t countAndFlagsBits = 0;
  v77._unint64_t object = (void *)0xE000000000000000;
  v279._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v279);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_1C3769620;
  Participant.contactDetails.getter();
  uint64_t v79 = v233;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  swift_bridgeObjectRelease();
  *(void *)(v78 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v78 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v78 + 32) = v81;
  *(void *)(v78 + 40) = v83;
  uint64_t v84 = String.init(format:_:)();
  uint64_t v86 = v85;
  swift_bridgeObjectRelease();
  CGRect v233 = (uint64_t (*)())v84;
  CGRect v234 = v86;
  unint64_t v135 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v87 = Text.init<A>(_:)();
  uint64_t v89 = v88;
  LOBYTE(v78) = v90 & 1;
  static Font.title.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v91 = Text.font(_:)();
  uint64_t v93 = v92;
  LOBYTE(v81) = v94;
  swift_release();
  outlined consume of Text.Storage(v87, v89, v78);
  swift_bridgeObjectRelease();
  LODWORD(v233) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v95 = Text.foregroundStyle<A>(_:)();
  uint64_t v145 = v96;
  uint64_t v146 = v95;
  int v144 = v97;
  uint64_t v147 = v98;
  outlined consume of Text.Storage(v91, v93, v81 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v141 = v261;
  int v140 = v262;
  uint64_t v139 = v263;
  int v138 = v264;
  uint64_t v136 = v266;
  uint64_t v137 = v265;
  id v99 = objc_msgSend(v143, sel_conversationKit);
  v100._uint64_t countAndFlagsBits = 0xD000000000000024;
  v280._unint64_t object = (void *)0xE000000000000000;
  v100._unint64_t object = (void *)0x80000001C37AD840;
  v101.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v101.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v102._uint64_t countAndFlagsBits = 0;
  v102._unint64_t object = (void *)0xE000000000000000;
  v280._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v100, v101, (NSBundle)v99, v102, v280);

  uint64_t v103 = String.init(format:_:)();
  double v105 = v104;
  swift_bridgeObjectRelease();
  CGRect v233 = (uint64_t (*)())v103;
  CGRect v234 = v105;
  uint64_t v106 = Text.init<A>(_:)();
  uint64_t v108 = v107;
  LOBYTE(v91) = v109 & 1;
  LODWORD(v233) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v110 = Text.foregroundStyle<A>(_:)();
  uint64_t v134 = v111;
  unint64_t v135 = v110;
  int v133 = v112;
  id v143 = v113;
  outlined consume of Text.Storage(v106, v108, v91);
  swift_bridgeObjectRelease();
  uint64_t v114 = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v132 = v267;
  uint64_t v115 = v269;
  int v130 = v270;
  int v131 = v268;
  uint64_t v116 = v272;
  uint64_t v129 = v271;
  uint64_t v117 = static VerticalAlignment.center.getter();
  uint64_t v118 = (uint64_t)v164;
  uint64_t *v164 = v117;
  *(void *)(v118 + 8) = 0;
  *(unsigned char *)(v118 + 16) = 1;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  closure #3 in closure #1 in RemoteControlOnboardingView.body.getter(v172, (char *)(v118 + *(int *)(v119 + 44)));
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v120 = v273;
  char v121 = v274;
  uint64_t v172 = v275;
  int v128 = v276;
  uint64_t v122 = v278;
  uint64_t v127 = v277;
  uint64_t v123 = v171;
  uint64_t v124 = v163;
  outlined init with copy of FeatureEligibility?(v171, v163, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  double v227 = v162;
  char v228 = v161;
  uint64_t v229 = v160;
  char v230 = v159;
  uint64_t v231 = v158;
  uint64_t v232 = v157;
  v219[0] = v156;
  v219[1] = v167;
  char v220 = v155;
  double v221 = v154;
  CGRect v234 = &v225;
  CGRect v233 = (uint64_t (*)())v124;
  uint64_t v225 = 0;
  char v226 = 1;
  char v222 = v170;
  uint64_t v223 = v169;
  uint64_t v224 = v168;
  uint64_t v211 = 0;
  char v212 = 1;
  double v213 = v153;
  char v214 = (char)v152;
  uint64_t v215 = v151;
  char v216 = v150;
  uint64_t v217 = (char *)v149;
  uint64_t v218 = v148;
  CGRect v235 = v219;
  CGRect v236 = &v211;
  uint64_t v204 = v146;
  uint64_t v205 = v145;
  char v206 = v144 & 1;
  uint64_t v207 = v147;
  uint64_t v208 = KeyPath;
  __int16 v209 = 1;
  char v210 = 1;
  uint64_t v196 = 0;
  char v197 = 1;
  uint64_t v198 = v141;
  char v199 = v140;
  uint64_t v200 = v139;
  char v201 = v138;
  uint64_t v202 = v137;
  uint64_t v203 = v136;
  CGRect v237 = &v204;
  CGRect v238 = &v196;
  unint64_t v189 = v135;
  uint64_t v190 = v134;
  char v191 = v133 & 1;
  id v192 = v143;
  uint64_t v193 = v114;
  __int16 v194 = 1;
  char v195 = 1;
  uint64_t v181 = 0;
  char v182 = 1;
  uint64_t v183 = v132;
  char v184 = v131;
  uint64_t v185 = v115;
  char v186 = v130;
  uint64_t v187 = v129;
  uint64_t v188 = v116;
  CGRect v239 = (uint64_t *)&v189;
  CGRect v240 = &v181;
  uint64_t v125 = v165;
  outlined init with copy of FeatureEligibility?(v118, v165, &demangling cache variable for type metadata for HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  uint64_t v173 = 0;
  char v174 = 1;
  uint64_t v175 = v120;
  char v176 = v121;
  uint64_t v177 = v172;
  char v178 = v128;
  uint64_t v179 = v127;
  uint64_t v180 = v122;
  uint64_t v241 = v125;
  CGRect v242 = &v173;
  specialized static ViewBuilder.buildBlock<each A>(_:)((uint64_t *)&v233, v166);
  outlined destroy of SystemUpdateNotice?(v118, &demangling cache variable for type metadata for HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  outlined destroy of SystemUpdateNotice?(v123, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  outlined destroy of SystemUpdateNotice?(v125, &demangling cache variable for type metadata for HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
  outlined consume of Text.Storage(v189, v190, v191);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v204, v205, v206);
  swift_release();
  swift_bridgeObjectRelease();

  return outlined destroy of SystemUpdateNotice?(v124, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>);
}

Swift::Void __swiftcall RemoteControlOnboardingView.didDismiss(remoteControl:)(Swift::Bool remoteControl)
{
  type metadata accessor for DismissAction();
  OUTLINED_FUNCTION_8_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(Swift::Bool))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingInteractionController.shared)
                                      + 0x1F8))(remoteControl);
  type metadata accessor for RemoteControlOnboardingView();
  specialized Environment.wrappedValue.getter();
  DismissAction.callAsFunction()();
  (*(void (**)())(v3 + 8))();
}

uint64_t closure #2 in closure #1 in closure #1 in RemoteControlOnboardingView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Font.TextStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymbolRenderingMode?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v12 = type metadata accessor for SymbolRenderingMode();
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v12);
  uint64_t v13 = Image.symbolRenderingMode(_:)();
  swift_release();
  outlined destroy of SystemUpdateNotice?((uint64_t)v11, &demangling cache variable for type metadata for SymbolRenderingMode?);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4F3E138], v5);
  uint64_t v14 = type metadata accessor for Font.Design();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v14);
  static Font.Weight.bold.getter();
  uint64_t v15 = static Font.system(_:design:weight:)();
  outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v4) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = static Alignment.center.getter();
  uint64_t v27 = v26;
  id v28 = objc_msgSend(self, sel_quaternaryLabelColor);
  uint64_t v29 = MEMORY[0x1C87725F0](v28);
  uint64_t v30 = static Color.secondary.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 24) = (_BYTE)v4;
  *(void *)(a1 + 32) = v18;
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v22;
  *(void *)(a1 + 56) = v24;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v29;
  *(_WORD *)(a1 + 80) = 256;
  *(void *)(a1 + 88) = v25;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = result;
  *(void *)(a1 + 112) = v30;
  return result;
}

uint64_t closure #3 in closure #1 in RemoteControlOnboardingView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for RemoteControlOnboardingView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v35 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v34 = (char *)&v29 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v33 = (char *)&v29 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v30 = (char *)&v29 - v15;
  uint64_t v31 = type metadata accessor for RemoteControlOnboardingView;
  _s15ConversationKit11ParticipantVWOcTm_12(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  uint64_t v16 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  uint64_t v29 = v16 | 7;
  uint64_t v18 = swift_allocObject();
  _s15ConversationKit11ParticipantVWObTm_1((uint64_t)v6, v18 + v17, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  _s15ConversationKit11ParticipantVWOcTm_12(v32, (uint64_t)v6, (void (*)(void))v31);
  uint64_t v19 = swift_allocObject();
  _s15ConversationKit11ParticipantVWObTm_1((uint64_t)v6, v19 + v17, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
  uint64_t v20 = v33;
  Button.init(action:label:)();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v22 = v34;
  uint64_t v23 = v30;
  v21(v34, v30, v7);
  uint64_t v24 = v35;
  v21(v35, v20, v7);
  uint64_t v25 = v36;
  v21(v36, v22, v7);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>));
  v21(&v25[*(int *)(v26 + 48)], v24, v7);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v20, v7);
  v27(v23, v7);
  v27(v24, v7);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v7);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteControlOnboardingView.body.getter()
{
  type metadata accessor for DismissAction();
  OUTLINED_FUNCTION_8_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingInteractionController.shared)
                                 + 0x1F8))(0);
  type metadata accessor for RemoteControlOnboardingView();
  specialized Environment.wrappedValue.getter();
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

uint64_t closure #2 in closure #3 in closure #1 in RemoteControlOnboardingView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>)
      - 8;
  MEMORY[0x1F4188790](v55);
  uint64_t v54 = (uint64_t)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for RoundedRectangle() - 8;
  MEMORY[0x1F4188790](v49);
  uint64_t v48 = (int64x2_t *)((char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<RoundedRectangle, Color>)
      - 8;
  MEMORY[0x1F4188790](v51);
  uint64_t v50 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>)
      - 8;
  MEMORY[0x1F4188790](v53);
  uint64_t v52 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(self, sel_conversationKit);
  v67._unint64_t object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 20302;
  v6._unint64_t object = (void *)0xE200000000000000;
  v7.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v7.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v8._uint64_t countAndFlagsBits = 0;
  v8._unint64_t object = (void *)0xE000000000000000;
  v67._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v67);

  uint64_t v9 = String.init(format:_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v66[0] = v9;
  v66[1] = v11;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.callout.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  outlined consume of Text.Storage(v12, v14, v16);
  swift_bridgeObjectRelease();
  char v24 = static Edge.Set.all.getter();
  uint64_t v57 = v17;
  uint64_t v58 = v19;
  char v59 = v21 & 1;
  uint64_t v60 = v23;
  char v61 = v24;
  long long v62 = 0u;
  long long v63 = 0u;
  char v64 = 1;
  uint64_t v25 = static Alignment.center.getter();
  char v47 = 1;
  char v46 = 1;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v66, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v46, 0, v47, v25, v26);
  outlined consume of Text.Storage(v17, v19, v21 & 1);
  swift_bridgeObjectRelease();
  memcpy(v65, v66, sizeof(v65));
  memcpy(v66, v65, 0xC0uLL);
  LOWORD(v66[24]) = 0;
  uint64_t v27 = v48;
  id v28 = &v48->i8[*(int *)(v49 + 28)];
  uint64_t v29 = *MEMORY[0x1E4F3D4A0];
  uint64_t v30 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  *uint64_t v27 = vdupq_n_s64(0x4042000000000000uLL);
  id v31 = objc_msgSend(self, sel_quaternaryLabelColor);
  uint64_t v32 = MEMORY[0x1C87725F0](v31);
  uint64_t v33 = v50;
  _s15ConversationKit11ParticipantVWOcTm_12((uint64_t)v27, v50, MEMORY[0x1E4F3CDB8]);
  uint64_t v34 = v51;
  *(void *)(v33 + *(int *)(v51 + 60)) = v32;
  *(_WORD *)(v33 + *(int *)(v34 + 64)) = 256;
  _s15ConversationKit11ParticipantV5StateOWOhTm_1((uint64_t)v27, MEMORY[0x1E4F3CDB8]);
  uint64_t v35 = static Alignment.center.getter();
  uint64_t v37 = v36;
  uint64_t v38 = v54;
  outlined init with copy of FeatureEligibility?(v33, v54, &demangling cache variable for type metadata for _ShapeView<RoundedRectangle, Color>);
  uint64_t v39 = (uint64_t *)(v38 + *(int *)(v55 + 44));
  *uint64_t v39 = v35;
  v39[1] = v37;
  uint64_t v40 = v52;
  outlined init with copy of FeatureEligibility?(v38, (uint64_t)&v52[*(int *)(v53 + 44)], &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>);
  memcpy(v40, v66, 0xC2uLL);
  outlined retain of ModifiedContent<Text, _PaddingLayout>((uint64_t)v66);
  outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>);
  outlined destroy of SystemUpdateNotice?(v33, &demangling cache variable for type metadata for _ShapeView<RoundedRectangle, Color>);
  outlined release of ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>((uint64_t)v65);
  uint64_t v41 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v43 = v56;
  outlined init with copy of FeatureEligibility?((uint64_t)v40, v56, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>);
  uint64_t v44 = (uint64_t *)(v43
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>)
                           + 36));
  uint64_t *v44 = KeyPath;
  v44[1] = v41;
  return outlined destroy of SystemUpdateNotice?((uint64_t)v40, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>);
}

uint64_t closure #3 in closure #3 in closure #1 in RemoteControlOnboardingView.body.getter()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingInteractionController.shared)
                                  + 0x1F8))(1);
  type metadata accessor for RemoteControlOnboardingView();
  specialized Environment.wrappedValue.getter();
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t closure #4 in closure #3 in closure #1 in RemoteControlOnboardingView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>)
      - 8;
  MEMORY[0x1F4188790](v60);
  uint64_t v59 = (uint64_t)&v53 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for RoundedRectangle() - 8;
  MEMORY[0x1F4188790](v54);
  uint64_t v53 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<RoundedRectangle, Color>)
      - 8;
  MEMORY[0x1F4188790](v56);
  uint64_t v55 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>)
      - 8;
  MEMORY[0x1F4188790](v58);
  uint64_t v57 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(self, sel_conversationKit);
  v72._unint64_t object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0x45554E49544E4F43;
  v6._unint64_t object = (void *)0xE800000000000000;
  v7.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v7.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v8._uint64_t countAndFlagsBits = 0;
  v8._unint64_t object = (void *)0xE000000000000000;
  v72._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v72);

  uint64_t v9 = String.init(format:_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v71[0] = v9;
  v71[1] = v11;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.callout.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  outlined consume of Text.Storage(v12, v14, v16);
  swift_bridgeObjectRelease();
  char v24 = static Edge.Set.all.getter();
  uint64_t v62 = v17;
  uint64_t v63 = v19;
  char v64 = v21 & 1;
  uint64_t v65 = v23;
  char v66 = v24;
  long long v67 = 0u;
  long long v68 = 0u;
  char v69 = 1;
  uint64_t v25 = static Alignment.center.getter();
  char v52 = 1;
  char v51 = 1;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v71, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v51, 0, v52, v25, v26);
  outlined consume of Text.Storage(v17, v19, v21 & 1);
  swift_bridgeObjectRelease();
  memcpy(v70, v71, sizeof(v70));
  memcpy(v71, v70, 0xC0uLL);
  LOWORD(v71[24]) = 0;
  uint64_t v27 = v53;
  id v28 = &v53[*(int *)(v54 + 28)];
  uint64_t v29 = *MEMORY[0x1E4F3D4A0];
  uint64_t v30 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  __asm { FMOV            V0.2D, #26.0 }
  *uint64_t v27 = _Q0;
  id v36 = objc_msgSend(self, sel_quaternaryLabelColor);
  uint64_t v37 = MEMORY[0x1C87725F0](v36);
  uint64_t v38 = v55;
  _s15ConversationKit11ParticipantVWOcTm_12((uint64_t)v27, v55, MEMORY[0x1E4F3CDB8]);
  uint64_t v39 = v56;
  *(void *)(v38 + *(int *)(v56 + 60)) = v37;
  *(_WORD *)(v38 + *(int *)(v39 + 64)) = 256;
  _s15ConversationKit11ParticipantV5StateOWOhTm_1((uint64_t)v27, MEMORY[0x1E4F3CDB8]);
  uint64_t v40 = static Alignment.center.getter();
  uint64_t v42 = v41;
  uint64_t v43 = v59;
  outlined init with copy of FeatureEligibility?(v38, v59, &demangling cache variable for type metadata for _ShapeView<RoundedRectangle, Color>);
  uint64_t v44 = (uint64_t *)(v43 + *(int *)(v60 + 44));
  uint64_t *v44 = v40;
  v44[1] = v42;
  uint64_t v45 = v57;
  outlined init with copy of FeatureEligibility?(v43, (uint64_t)&v57[*(int *)(v58 + 44)], &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>);
  memcpy(v45, v71, 0xC2uLL);
  outlined retain of ModifiedContent<Text, _PaddingLayout>((uint64_t)v71);
  outlined destroy of SystemUpdateNotice?(v43, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>);
  outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for _ShapeView<RoundedRectangle, Color>);
  outlined release of ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>((uint64_t)v70);
  uint64_t v46 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v48 = v61;
  outlined init with copy of FeatureEligibility?((uint64_t)v45, v61, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>);
  uint64_t v49 = (uint64_t *)(v48
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>)
                           + 36));
  *uint64_t v49 = KeyPath;
  v49[1] = v46;
  return outlined destroy of SystemUpdateNotice?((uint64_t)v45, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>);
}

uint64_t closure #2 in RemoteControlOnboardingView.body.getter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 888))();
  Participant.contactDetails.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    id v3 = objc_msgSend(v15, sel_identifier);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v6 = v5;

    Swift::String_optional v7 = *(void **)(a1 + *(int *)(type metadata accessor for Participant(0) + 28));
    if (v7 && (outlined bridged method (ob) of @objc TUHandle.normalizedValue.getter(v7), v8))
    {
      v9._uint64_t countAndFlagsBits = v4;
      v9._unint64_t object = v6;
      Swift::String v10 = String.hashWithSalt(salt:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v13;
      }
      unint64_t v11 = *(void *)(v2 + 16);
      if (v11 >= *(void *)(v2 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v14;
      }
      *(void *)(v2 + 16) = v11 + 1;
      *(Swift::String *)(v2 + 16 * v11 + 32) = v10;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)static Defaults.shared + 896))(v2);
}

uint64_t type metadata accessor for RemoteControlOnboardingView()
{
  uint64_t result = type metadata singleton initialization cache for RemoteControlOnboardingView;
  if (!type metadata singleton initialization cache for RemoteControlOnboardingView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3421544()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_1C3421568()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PresentationAutomaticHeightModifier.body(content:)()
{
  return closure #2 in closure #1 in PresentationAutomaticHeightModifier.body(content:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<PresentationAutomaticHeightModifier> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<PresentationAutomaticHeightModifier>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #2 in RemoteControlOnboardingView.body.getter()
{
  return partial apply for closure #2 in RemoteControlOnboardingView.body.getter(closure #2 in RemoteControlOnboardingView.body.getter);
}

unint64_t lazy protocol witness table accessor for type PresentationAutomaticHeightModifier and conformance PresentationAutomaticHeightModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationAutomaticHeightModifier and conformance PresentationAutomaticHeightModifier;
  if (!lazy protocol witness table cache variable for type PresentationAutomaticHeightModifier and conformance PresentationAutomaticHeightModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationAutomaticHeightModifier and conformance PresentationAutomaticHeightModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PresentationAutomaticHeightModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RemoteControlOnboardingView()
{
  return swift_getOpaqueTypeConformance2();
}

void *assignWithCopy for PresentationAutomaticHeightModifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for PresentationAutomaticHeightModifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationAutomaticHeightModifier(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationAutomaticHeightModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationAutomaticHeightModifier()
{
  return &type metadata for PresentationAutomaticHeightModifier;
}

void *initializeBufferWithCopyOfBuffer for RemoteControlOnboardingView(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_18;
      case 4u:
        uint64_t v10 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)a2 + v12);
        uint64_t v15 = *(void *)((char *)a2 + v12 + 16);
        uint64_t v16 = *(void *)((char *)a2 + v12 + 24);
        *((void *)v13 + 2) = v15;
        *((void *)v13 + 3) = v16;
        *((_WORD *)v13 + 16) = *((_WORD *)v14 + 16);
        *((void *)v13 + 5) = *((void *)v14 + 5);
        unsigned char v13[48] = v14[48];
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
        v13[88] = v14[88];
        v13[89] = v14[89];
        uint64_t v17 = *((void *)v14 + 15);
        swift_bridgeObjectRetain();
        if (v17)
        {
          if (v17 == 1)
          {
            uint64_t v18 = v13 + 96;
            uint64_t v19 = v14 + 96;
            size_t v20 = 209;
            goto LABEL_12;
          }
          uint64_t v22 = *((void *)v14 + 16);
          *((void *)v13 + 15) = v17;
          *((void *)v13 + 16) = v22;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8))((uint64_t)(v13 + 96), (uint64_t)(v14 + 96), v17);
        }
        else
        {
          long long v21 = *((_OWORD *)v14 + 7);
          *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
          *((_OWORD *)v13 + 7) = v21;
          *((void *)v13 + 16) = *((void *)v14 + 16);
        }
        *((_DWORD *)v13 + 34) = *((_DWORD *)v14 + 34);
        long long v23 = *((_OWORD *)v14 + 10);
        *((_OWORD *)v13 + 9) = *((_OWORD *)v14 + 9);
        *((_OWORD *)v13 + 10) = v23;
        *((_OWORD *)v13 + 11) = *((_OWORD *)v14 + 11);
        v13[192] = v14[192];
        uint64_t v18 = v13 + 208;
        uint64_t v19 = v14 + 208;
        *((void *)v13 + 25) = *((void *)v14 + 25);
        size_t v20 = 97;
LABEL_12:
        memcpy(v18, v19, v20);
        uint64_t v24 = *((void *)v14 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v14 + 40);
          uint64_t v26 = *((void *)v14 + 41);
          *((void *)v13 + 39) = v24;
          *((void *)v13 + 40) = v25;
          *((void *)v13 + 41) = v26;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
          *((void *)v13 + 41) = *((void *)v14 + 41);
        }
        uint64_t v27 = *(int *)(v11 + 64);
        id v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = *((void *)v29 + 1);
        if (v30)
        {
          *(void *)id v28 = *(void *)v29;
          *((void *)v28 + 1) = v30;
          uint64_t v31 = *((void *)v29 + 3);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = v31;
          v28[32] = v29[32];
          *(_OWORD *)(v28 + 40) = *(_OWORD *)(v29 + 40);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v32 = *((_OWORD *)v29 + 1);
          *(_OWORD *)id v28 = *(_OWORD *)v29;
          *((_OWORD *)v28 + 1) = v32;
          long long v33 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v33;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        uint64_t v34 = (int *)type metadata accessor for Participant(0);
        uint64_t v35 = v34[5];
        id v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
        uint64_t v39 = v34[6];
        uint64_t v40 = (char *)a1 + v39;
        uint64_t v41 = (char *)a2 + v39;
        v40[4] = v41[4];
        *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
        uint64_t v42 = v34[7];
        uint64_t v43 = (char *)a1 + v42;
        uint64_t v44 = (char *)a2 + v42;
        uint64_t v45 = *(void **)v44;
        uint64_t v77 = a3;
        if (*(void *)v44)
        {
          uint64_t v46 = *((void *)v44 + 1);
          *(void *)uint64_t v43 = v45;
          *((void *)v43 + 1) = v46;
          v43[16] = v44[16];
          uint64_t v47 = *((void *)v44 + 4);
          *((void *)v43 + 3) = *((void *)v44 + 3);
          *((void *)v43 + 4) = v47;
          id v48 = v45;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v49 = *((_OWORD *)v44 + 1);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          *((_OWORD *)v43 + 1) = v49;
          *((void *)v43 + 4) = *((void *)v44 + 4);
        }
        *(void *)((char *)a1 + v34[8]) = *(void *)((char *)a2 + v34[8]);
        uint64_t v50 = v34[9];
        char v51 = (void *)((char *)a1 + v50);
        char v52 = (void *)((char *)a2 + v50);
        uint64_t v53 = v52[1];
        *char v51 = *v52;
        v51[1] = v53;
        *((unsigned char *)a1 + v34[10]) = *((unsigned char *)a2 + v34[10]);
        *(void *)((char *)a1 + v34[11]) = *(void *)((char *)a2 + v34[11]);
        uint64_t v54 = v34[12];
        uint64_t v55 = *(void **)((char *)a2 + v54);
        *(void *)((char *)a1 + v54) = v55;
        *((unsigned char *)a1 + v34[13]) = *((unsigned char *)a2 + v34[13]);
        uint64_t v56 = v34[14];
        uint64_t v57 = (char *)a1 + v56;
        uint64_t v58 = (char *)a2 + v56;
        uint64_t v59 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v60 = v55;
        if (__swift_getEnumTagSinglePayload((uint64_t)v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v59);
        }
        uint64_t v62 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v63 = *(int *)(v62 + 20);
        char v64 = &v57[v63];
        uint64_t v65 = &v58[v63];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v58[v63], 1, v59))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v64, v65, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v59);
        }
        v57[*(int *)(v62 + 24)] = v58[*(int *)(v62 + 24)];
        *((unsigned char *)a1 + v34[15]) = *((unsigned char *)a2 + v34[15]);
        *(void *)((char *)a1 + v34[16]) = *(void *)((char *)a2 + v34[16]);
        uint64_t v67 = *(int *)(v77 + 20);
        long long v68 = (void *)((char *)a1 + v67);
        char v69 = (void *)((char *)a2 + v67);
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v70 = type metadata accessor for DismissAction();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
        }
        else
        {
          *long long v68 = *v69;
          swift_retain();
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v71 = *(int *)(v77 + 24);
        Swift::String v72 = (void *)((char *)a1 + v71);
        uint64_t v73 = (void *)((char *)a2 + v71);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v74 = type metadata accessor for UserInterfaceSizeClass();
          if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v74))
          {
            uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
            memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
            __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v74);
          }
        }
        else
        {
          *Swift::String v72 = *v73;
          swift_retain();
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_19;
    }
  }
  return a1;
}

uint64_t destroy for RemoteControlOnboardingView(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v4 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 4u:
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v20 = a1 + *(int *)(v19 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v20 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v20 + 96);
      }
      if (*(void *)(v20 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + *(int *)(v19 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  int v5 = (int *)type metadata accessor for Participant(0);
  uint64_t v6 = a1 + v5[5];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (id *)(a1 + v5[7]);
  if (*v8)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v9 = a1 + v5[14];
  uint64_t v10 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  uint64_t v11 = v9 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v11, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v11, v10);
  }
  swift_release();
  uint64_t v12 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t result = __swift_getEnumTagSinglePayload(v14, 1, v15);
    if (!result)
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
      return v17(v14, v15);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

unsigned char *initializeWithCopy for RemoteControlOnboardingView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_16;
    case 4u:
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v10 = *(int *)(v9 + 48);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(_OWORD *)uint64_t v11 = *(_OWORD *)&a2[v10];
      uint64_t v13 = *(void *)&a2[v10 + 16];
      uint64_t v14 = *(void *)&a2[v10 + 24];
      *((void *)v11 + 2) = v13;
      *((void *)v11 + 3) = v14;
      *((_WORD *)v11 + 16) = *((_WORD *)v12 + 16);
      *((void *)v11 + 5) = *((void *)v12 + 5);
      unsigned char v11[48] = v12[48];
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
      v11[88] = v12[88];
      v11[89] = v12[89];
      uint64_t v15 = *((void *)v12 + 15);
      swift_bridgeObjectRetain();
      if (v15)
      {
        if (v15 == 1)
        {
          uint64_t v16 = v11 + 96;
          uint64_t v17 = v12 + 96;
          size_t v18 = 209;
          goto LABEL_10;
        }
        uint64_t v20 = *((void *)v12 + 16);
        *((void *)v11 + 15) = v15;
        *((void *)v11 + 16) = v20;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8))((uint64_t)(v11 + 96), (uint64_t)(v12 + 96), v15);
      }
      else
      {
        long long v19 = *((_OWORD *)v12 + 7);
        *((_OWORD *)v11 + 6) = *((_OWORD *)v12 + 6);
        *((_OWORD *)v11 + 7) = v19;
        *((void *)v11 + 16) = *((void *)v12 + 16);
      }
      *((_DWORD *)v11 + 34) = *((_DWORD *)v12 + 34);
      long long v21 = *((_OWORD *)v12 + 10);
      *((_OWORD *)v11 + 9) = *((_OWORD *)v12 + 9);
      *((_OWORD *)v11 + 10) = v21;
      *((_OWORD *)v11 + 11) = *((_OWORD *)v12 + 11);
      v11[192] = v12[192];
      uint64_t v16 = v11 + 208;
      uint64_t v17 = v12 + 208;
      *((void *)v11 + 25) = *((void *)v12 + 25);
      size_t v18 = 97;
LABEL_10:
      memcpy(v16, v17, v18);
      uint64_t v22 = *((void *)v12 + 39);
      if (v22)
      {
        uint64_t v23 = *((void *)v12 + 40);
        uint64_t v24 = *((void *)v12 + 41);
        *((void *)v11 + 39) = v22;
        *((void *)v11 + 40) = v23;
        *((void *)v11 + 41) = v24;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v11 + 312) = *(_OWORD *)(v12 + 312);
        *((void *)v11 + 41) = *((void *)v12 + 41);
      }
      uint64_t v25 = *(int *)(v9 + 64);
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = *((void *)v27 + 1);
      if (v28)
      {
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = *((void *)v27 + 3);
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *((void *)v26 + 3) = v29;
        v26[32] = v27[32];
        *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
        *((void *)v26 + 7) = *((void *)v27 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v30 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v30;
        long long v31 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v31;
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_17:
      long long v32 = (int *)type metadata accessor for Participant(0);
      uint64_t v33 = v32[5];
      uint64_t v34 = &a1[v33];
      uint64_t v35 = &a2[v33];
      uint64_t v36 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
      uint64_t v37 = v32[6];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      v38[4] = v39[4];
      *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
      uint64_t v40 = v32[7];
      uint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      uint64_t v43 = *(void **)v42;
      uint64_t v75 = a3;
      if (*(void *)v42)
      {
        uint64_t v44 = *((void *)v42 + 1);
        *(void *)uint64_t v41 = v43;
        *((void *)v41 + 1) = v44;
        v41[16] = v42[16];
        uint64_t v45 = *((void *)v42 + 4);
        *((void *)v41 + 3) = *((void *)v42 + 3);
        *((void *)v41 + 4) = v45;
        id v46 = v43;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v47 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v47;
        *((void *)v41 + 4) = *((void *)v42 + 4);
      }
      *(void *)&a1[v32[8]] = *(void *)&a2[v32[8]];
      uint64_t v48 = v32[9];
      long long v49 = &a1[v48];
      uint64_t v50 = &a2[v48];
      uint64_t v51 = v50[1];
      *long long v49 = *v50;
      v49[1] = v51;
      a1[v32[10]] = a2[v32[10]];
      *(void *)&a1[v32[11]] = *(void *)&a2[v32[11]];
      uint64_t v52 = v32[12];
      uint64_t v53 = *(void **)&a2[v52];
      *(void *)&a1[v52] = v53;
      a1[v32[13]] = a2[v32[13]];
      uint64_t v54 = v32[14];
      uint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      uint64_t v57 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v58 = v53;
      if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v60 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v61 = *(int *)(v60 + 20);
      uint64_t v62 = &v55[v61];
      uint64_t v63 = &v56[v61];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v56[v61], 1, v57))
      {
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v62, v63, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v57);
      }
      v55[*(int *)(v60 + 24)] = v56[*(int *)(v60 + 24)];
      a1[v32[15]] = a2[v32[15]];
      *(void *)&a1[v32[16]] = *(void *)&a2[v32[16]];
      uint64_t v65 = *(int *)(v75 + 20);
      uint64_t v66 = &a1[v65];
      uint64_t v67 = &a2[v65];
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v68 = type metadata accessor for DismissAction();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(v66, v67, v68);
      }
      else
      {
        *uint64_t v66 = *v67;
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v69 = *(int *)(v75 + 24);
      uint64_t v70 = &a1[v69];
      uint64_t v71 = &a2[v69];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v72 = type metadata accessor for UserInterfaceSizeClass();
        if (__swift_getEnumTagSinglePayload((uint64_t)v71, 1, v72))
        {
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
          memcpy(v70, v71, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
          __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, v72);
        }
      }
      else
      {
        void *v70 = *v71;
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
      return a1;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_17;
  }
}

char *assignWithCopy for RemoteControlOnboardingView(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantV5StateOWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v6 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_17;
      case 4u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        *(_OWORD *)uint64_t v11 = *(_OWORD *)&a2[v10];
        *((void *)v11 + 2) = *(void *)&a2[v10 + 16];
        uint64_t v13 = *(void *)&a2[v10 + 24];
        *((_WORD *)v11 + 16) = *((_WORD *)v12 + 16);
        *((void *)v11 + 3) = v13;
        *((void *)v11 + 5) = *((void *)v12 + 5);
        unsigned char v11[48] = v12[48];
        long long v14 = *(_OWORD *)(v12 + 72);
        long long v15 = *(_OWORD *)(v12 + 56);
        v11[88] = v12[88];
        *(_OWORD *)(v11 + 56) = v15;
        *(_OWORD *)(v11 + 72) = v14;
        v11[89] = v12[89];
        uint64_t v16 = *((void *)v12 + 15);
        swift_bridgeObjectRetain();
        if (v16)
        {
          if (v16 == 1)
          {
            uint64_t v17 = v11 + 96;
            size_t v18 = v12 + 96;
            size_t v19 = 209;
            goto LABEL_11;
          }
          *((void *)v11 + 15) = v16;
          *((void *)v11 + 16) = *((void *)v12 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8))((uint64_t)(v11 + 96), (uint64_t)(v12 + 96), v16);
        }
        else
        {
          long long v20 = *((_OWORD *)v12 + 6);
          long long v21 = *((_OWORD *)v12 + 7);
          *((void *)v11 + 16) = *((void *)v12 + 16);
          *((_OWORD *)v11 + 6) = v20;
          *((_OWORD *)v11 + 7) = v21;
        }
        *((_DWORD *)v11 + 34) = *((_DWORD *)v12 + 34);
        *((void *)v11 + 18) = *((void *)v12 + 18);
        *((void *)v11 + 19) = *((void *)v12 + 19);
        long long v22 = *((_OWORD *)v12 + 10);
        long long v23 = *((_OWORD *)v12 + 11);
        v11[192] = v12[192];
        *((_OWORD *)v11 + 10) = v22;
        *((_OWORD *)v11 + 11) = v23;
        *((void *)v11 + 25) = *((void *)v12 + 25);
        uint64_t v17 = v11 + 208;
        size_t v18 = v12 + 208;
        size_t v19 = 97;
LABEL_11:
        memcpy(v17, v18, v19);
        uint64_t v24 = *((void *)v12 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v12 + 40);
          *((void *)v11 + 39) = v24;
          *((void *)v11 + 40) = v25;
          *((void *)v11 + 41) = *((void *)v12 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v26 = *(_OWORD *)(v12 + 312);
          *((void *)v11 + 41) = *((void *)v12 + 41);
          *(_OWORD *)(v11 + 312) = v26;
        }
        uint64_t v27 = *(int *)(v9 + 64);
        uint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        if (*((void *)v29 + 1))
        {
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = *((void *)v29 + 1);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = *((void *)v29 + 3);
          v28[32] = v29[32];
          *((void *)v28 + 5) = *((void *)v29 + 5);
          *((void *)v28 + 6) = *((void *)v29 + 6);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v30 = *(_OWORD *)v29;
          long long v31 = *((_OWORD *)v29 + 1);
          long long v32 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v32;
          *(_OWORD *)uint64_t v28 = v30;
          *((_OWORD *)v28 + 1) = v31;
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v33 = (int *)type metadata accessor for Participant(0);
  uint64_t v34 = v33[5];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  uint64_t v38 = v33[6];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  v39[2] = v40[2];
  v39[3] = v40[3];
  void v39[4] = v40[4];
  uint64_t v41 = v33[7];
  uint64_t v42 = (uint64_t)&a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v44 = *(void **)&a1[v41];
  uint64_t v45 = *(void **)&a2[v41];
  uint64_t v87 = a3;
  if (v44)
  {
    if (v45)
    {
      *(void *)uint64_t v42 = v45;
      id v46 = v45;

      uint64_t v47 = *((void *)v43 + 1);
      *(unsigned char *)(v42 + 16) = v43[16];
      *(void *)(v42 + 8) = v47;
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      *(void *)(v42 + 32) = *((void *)v43 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v42);
      uint64_t v50 = *((void *)v43 + 4);
      long long v51 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v51;
      *(void *)(v42 + 32) = v50;
    }
  }
  else if (v45)
  {
    *(void *)uint64_t v42 = v45;
    uint64_t v48 = *((void *)v43 + 1);
    *(unsigned char *)(v42 + 16) = v43[16];
    *(void *)(v42 + 8) = v48;
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    id v49 = v45;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)v43;
    long long v53 = *((_OWORD *)v43 + 1);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    *(_OWORD *)uint64_t v42 = v52;
    *(_OWORD *)(v42 + 16) = v53;
  }
  *(void *)&a1[v33[8]] = *(void *)&a2[v33[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v33[9];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v33[10]] = a2[v33[10]];
  *(void *)&a1[v33[11]] = *(void *)&a2[v33[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v33[12];
  id v58 = *(void **)&a1[v57];
  uint64_t v59 = *(void **)&a2[v57];
  *(void *)&a1[v57] = v59;
  id v60 = v59;

  a1[v33[13]] = a2[v33[13]];
  uint64_t v61 = v33[14];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v64 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v62, 1, v64);
  int v66 = __swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64);
  if (EnumTagSinglePayload)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v67 = *(void *)(v64 - 8);
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v64);
LABEL_30:
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v62, v63, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v62, v63, v64);
LABEL_31:
  uint64_t v69 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v70 = *(int *)(v69 + 20);
  uint64_t v71 = &v62[v70];
  uint64_t v72 = &v63[v70];
  int v73 = __swift_getEnumTagSinglePayload((uint64_t)&v62[v70], 1, v64);
  int v74 = __swift_getEnumTagSinglePayload((uint64_t)v72, 1, v64);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v71, v72, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v64);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v75 = *(void *)(v64 - 8);
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v71, v64);
LABEL_36:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v71, v72, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v71, v72, v64);
LABEL_37:
  v62[*(int *)(v69 + 24)] = v63[*(int *)(v69 + 24)];
  a1[v33[15]] = a2[v33[15]];
  *(void *)&a1[v33[16]] = *(void *)&a2[v33[16]];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v77 = *(int *)(v87 + 20);
    uint64_t v78 = &a1[v77];
    uint64_t v79 = &a2[v77];
    outlined destroy of SystemUpdateNotice?((uint64_t)&a1[v77], &demangling cache variable for type metadata for Environment<DismissAction>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v80 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))(v78, v79, v80);
    }
    else
    {
      *(void *)uint64_t v78 = *(void *)v79;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v81 = *(int *)(v87 + 24);
    uint64_t v82 = &a1[v81];
    uint64_t v83 = &a2[v81];
    outlined destroy of SystemUpdateNotice?((uint64_t)&a1[v81], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v84 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v83, 1, v84))
      {
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 16))(v82, v83, v84);
        __swift_storeEnumTagSinglePayload((uint64_t)v82, 0, 1, v84);
      }
    }
    else
    {
      *(void *)uint64_t v82 = *(void *)v83;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for RemoteControlOnboardingView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      goto LABEL_5;
    case 4u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], 0x150uLL);
      uint64_t v9 = *(int *)(v8 + 64);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      long long v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v12;
      long long v13 = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 3) = v13;
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  long long v15 = (int *)type metadata accessor for Participant(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = &a1[v16];
  size_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = v15[6];
  long long v21 = &a1[v20];
  long long v22 = &a2[v20];
  *(_DWORD *)long long v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  uint64_t v23 = v15[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *(void *)&a1[v15[8]] = *(void *)&a2[v15[8]];
  *(_OWORD *)&a1[v15[9]] = *(_OWORD *)&a2[v15[9]];
  a1[v15[10]] = a2[v15[10]];
  *(void *)&a1[v15[11]] = *(void *)&a2[v15[11]];
  *(void *)&a1[v15[12]] = *(void *)&a2[v15[12]];
  a1[v15[13]] = a2[v15[13]];
  uint64_t v27 = v15[14];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v32 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = &v28[v33];
  uint64_t v35 = &v29[v33];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v29[v33], 1, v30))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v34, v35, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v30);
  }
  v28[*(int *)(v32 + 24)] = v29[*(int *)(v32 + 24)];
  a1[v15[15]] = a2[v15[15]];
  *(void *)&a1[v15[16]] = *(void *)&a2[v15[16]];
  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v41 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v38, v39, v41);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  uint64_t v42 = *(int *)(a3 + 24);
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v46 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v46))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v43, v44, v46);
      __swift_storeEnumTagSinglePayload((uint64_t)v43, 0, 1, v46);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for RemoteControlOnboardingView(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantV5StateOWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v6 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v14 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        goto LABEL_5;
      case 4u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], 0x150uLL);
        uint64_t v9 = *(int *)(v8 + 64);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        long long v12 = *((_OWORD *)v11 + 1);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *((_OWORD *)v10 + 1) = v12;
        long long v13 = *((_OWORD *)v11 + 3);
        *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
        *((_OWORD *)v10 + 3) = v13;
LABEL_5:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  long long v15 = (int *)type metadata accessor for Participant(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = &a1[v16];
  size_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = v15[6];
  long long v21 = &a1[v20];
  long long v22 = &a2[v20];
  *long long v21 = *v22;
  v21[1] = v22[1];
  uint64_t v21[2] = v22[2];
  v21[3] = v22[3];
  v21[4] = v22[4];
  uint64_t v23 = v15[7];
  uint64_t v24 = (uint64_t)&a1[v23];
  uint64_t v25 = &a2[v23];
  long long v26 = *(void **)&a1[v23];
  uint64_t v64 = a3;
  if (v26)
  {
    if (*(void *)v25)
    {
      *(void *)uint64_t v24 = *(void *)v25;

      *(void *)(v24 + 8) = *((void *)v25 + 1);
      *(unsigned char *)(v24 + 16) = v25[16];
      uint64_t v27 = *((void *)v25 + 4);
      *(void *)(v24 + 24) = *((void *)v25 + 3);
      *(void *)(v24 + 32) = v27;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Participant.RemoteIdentifiers(v24);
  }
  long long v28 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v28;
  *(void *)(v24 + 32) = *((void *)v25 + 4);
LABEL_11:
  *(void *)&a1[v15[8]] = *(void *)&a2[v15[8]];
  swift_bridgeObjectRelease();
  uint64_t v29 = v15[9];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v33 = *(void *)v31;
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  a1[v15[10]] = a2[v15[10]];
  *(void *)&a1[v15[11]] = *(void *)&a2[v15[11]];
  swift_bridgeObjectRelease();
  uint64_t v34 = v15[12];
  uint64_t v35 = *(void **)&a1[v34];
  *(void *)&a1[v34] = *(void *)&a2[v34];

  a1[v15[13]] = a2[v15[13]];
  uint64_t v36 = v15[14];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v39 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v39);
  int v41 = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39);
  if (EnumTagSinglePayload)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
      __swift_storeEnumTagSinglePayload((uint64_t)v37, 0, 1, v39);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v42 = *(void *)(v39 - 8);
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v39);
LABEL_16:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v37, v38, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v37, v38, v39);
LABEL_17:
  uint64_t v44 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v45 = *(int *)(v44 + 20);
  uint64_t v46 = &v37[v45];
  uint64_t v47 = &v38[v45];
  int v48 = __swift_getEnumTagSinglePayload((uint64_t)&v37[v45], 1, v39);
  int v49 = __swift_getEnumTagSinglePayload((uint64_t)v47, 1, v39);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v46, v47, v39);
      __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v39);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v50 = *(void *)(v39 - 8);
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v39);
LABEL_22:
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v46, v47, v39);
LABEL_23:
  v37[*(int *)(v44 + 24)] = v38[*(int *)(v44 + 24)];
  a1[v15[15]] = a2[v15[15]];
  *(void *)&a1[v15[16]] = *(void *)&a2[v15[16]];
  swift_release();
  if (a1 != a2)
  {
    uint64_t v52 = *(int *)(v64 + 20);
    long long v53 = &a1[v52];
    uint64_t v54 = &a2[v52];
    outlined destroy of SystemUpdateNotice?((uint64_t)&a1[v52], &demangling cache variable for type metadata for Environment<DismissAction>.Content);
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v56 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32))(v53, v54, v56);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    uint64_t v57 = *(int *)(v64 + 24);
    id v58 = &a1[v57];
    uint64_t v59 = &a2[v57];
    outlined destroy of SystemUpdateNotice?((uint64_t)&a1[v57], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v61 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v61))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v58, v59, v61);
        __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v61);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteControlOnboardingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3424908);
}

uint64_t sub_1C3424908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v8 = v10;
      uint64_t v12 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
      uint64_t v12 = *(int *)(a3 + 24);
    }
    uint64_t v9 = a1 + v12;
  }
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RemoteControlOnboardingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C34249C4);
}

uint64_t sub_1C34249C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
      uint64_t v14 = *(int *)(a4 + 24);
    }
    uint64_t v11 = a1 + v14;
  }
  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for RemoteControlOnboardingView()
{
  type metadata accessor for Participant(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<DismissAction>.Content();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Environment<DismissAction>.Content()
{
  if (!lazy cache variable for type metadata for Environment<DismissAction>.Content)
  {
    type metadata accessor for DismissAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissAction>.Content);
    }
  }
}

uint64_t sub_1C3424BD0(uint64_t a1)
{
  return get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE19presentationDetentsyQrShyAA18PresentationDetentVGFQOyAA15ModifiedContentVyAA01_c9Modifier_I0Vy15ConversationKit0f15AutomaticHeightJ0VGAA011_BackgroundJ0VyAIyAA5ColorVAA015_GeometryActionJ0Vy12CoreGraphics7CGFloatVGGGG_Qo_HOTm(a1, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PresentationAutomaticHeightModifier>, _BackgroundModifier<ModifiedContent<Color, _GeometryActionModifier<CGFloat>>>> and conformance <> ModifiedContent<A, B>);
}

uint64_t sub_1C3424C04()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C3424C68(uint64_t a1)
{
  return get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE19presentationDetentsyQrShyAA18PresentationDetentVGFQOyAA15ModifiedContentVyAA01_c9Modifier_I0Vy15ConversationKit0f15AutomaticHeightJ0VGAA011_BackgroundJ0VyAIyAA5ColorVAA015_GeometryActionJ0Vy12CoreGraphics7CGFloatVGGGG_Qo_HOTm(a1, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, C, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Col);
}

uint64_t get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE19presentationDetentsyQrShyAA18PresentationDetentVGFQOyAA15ModifiedContentVyAA01_c9Modifier_I0Vy15ConversationKit0f15AutomaticHeightJ0VGAA011_BackgroundJ0VyAIyAA5ColorVAA015_GeometryActionJ0Vy12CoreGraphics7CGFloatVGGGG_Qo_HOTm(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  return swift_getOpaqueTypeConformance2();
}

void *type metadata accessor for ContactAvatarView()
{
  return &unk_1F1EABC00;
}

unint64_t lazy protocol witness table accessor for type ContactAvatarView and conformance ContactAvatarView()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactAvatarView and conformance ContactAvatarView;
  if (!lazy protocol witness table cache variable for type ContactAvatarView and conformance ContactAvatarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactAvatarView and conformance ContactAvatarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactAvatarView and conformance ContactAvatarView;
  if (!lazy protocol witness table cache variable for type ContactAvatarView and conformance ContactAvatarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactAvatarView and conformance ContactAvatarView);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in RemoteControlOnboardingView.body.getter()
{
  uint64_t v0 = type metadata accessor for RemoteControlOnboardingView();
  OUTLINED_FUNCTION_1_1(v0);
  return closure #1 in closure #1 in closure #1 in RemoteControlOnboardingView.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _Environm(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<Circle, Color>> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Circle, Color>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<RoundedRectangle, Color>> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(Spacer, Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<_ShapeView<Circle, Color>>>, _EnvironmentKeyWritingModifier<Color?>>>)>>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ContactAvatarView, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>, ModifiedContent<Spacer, _FrameLayout>, HStack<TupleView<(Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>, _Environm(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _PaddingLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #3 in closure #1 in RemoteControlOnboardingView.body.getter()
{
  return partial apply for closure #2 in RemoteControlOnboardingView.body.getter((uint64_t (*)(uint64_t))closure #3 in closure #3 in closure #1 in RemoteControlOnboardingView.body.getter);
}

uint64_t partial apply for closure #2 in RemoteControlOnboardingView.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for RemoteControlOnboardingView();
  OUTLINED_FUNCTION_1_1(v2);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return a1(v4);
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_12(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantV5StateOWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  return a1;
}

uint64_t VideoReaction.systemImageName.getter(char a1)
{
  uint64_t v1 = (NSString *)VideoReaction.rawValue.getter(a1);
  uint64_t v2 = AVCaptureReactionSystemImageNameForType(v1);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

ConversationKit::VideoReaction_optional __swiftcall VideoReaction.init(rawValue:)(__C::AVCaptureReactionType rawValue)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v4)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_46;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_46:

    return 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v6)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_48;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_48:

    return (ConversationKit::VideoReaction_optional)1;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v8)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_50;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_50:

    return (ConversationKit::VideoReaction_optional)2;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v10)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_52;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_52:

    return (ConversationKit::VideoReaction_optional)3;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v12)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_54;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_54:

    return (ConversationKit::VideoReaction_optional)4;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v14)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_56;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_56:

    return (ConversationKit::VideoReaction_optional)5;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_1_17() && v1 == v16)
  {
    OUTLINED_FUNCTION_15_59();
    goto LABEL_58;
  }
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_5_2();
  swift_bridgeObjectRelease();
  if (v2)
  {
LABEL_58:

    return (ConversationKit::VideoReaction_optional)6;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23.value = ConversationKit_VideoReaction_lasers;
  if (v2 != OUTLINED_FUNCTION_1_17() || v1 != v18)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      char v20 = 7;
    }
    else {
      char v20 = 8;
    }
    v23.value = v20;
  }
  NSString v21 = rawValue._rawValue;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t VideoReactionPickerViewModel.isShowingPicker.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t VideoReactionPickerViewModel.isShowingPicker.setter()
{
  return static Published.subscript.setter();
}

uint64_t VideoReactionPickerViewModel.anchorPoint.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t VideoReactionPickerViewModel.anchorPoint.setter()
{
  return static Published.subscript.setter();
}

uint64_t VideoReactionPickerViewModel.init(onReaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2
     + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel__isShowingPicker;
  LOBYTE(v19) = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  uint64_t v10 = v2
      + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel__anchorPoint;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CGPoint?>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPoint?);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v10, v14, v11);
  long long v15 = (_OWORD *)(v2
                 + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_anchorFrame);
  *long long v15 = 0u;
  v15[1] = 0u;
  *(unsigned char *)(v2
           + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_bubbleGrowsRightwards) = 2;
  *(unsigned char *)(v2
           + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_anchorCorner) = 3;
  *(unsigned char *)(v2
           + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_shouldHidePickerAfterReaction) = 1;
  uint64_t v16 = (void *)(v2
                 + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_onReaction);
  *uint64_t v16 = a1;
  v16[1] = a2;
  return v2;
}

uint64_t VideoReactionPickerViewModel.sendReaction(_:)(uint64_t a1)
{
  if (*(unsigned char *)(v1
                + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_shouldHidePickerAfterReaction) == 1)
    VideoReactionPickerViewModel.isShowingPicker.setter();
  uint64_t v3 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel_onReaction);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t VideoReactionPickerViewModel.deinit()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel__isShowingPicker;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtC15ConversationKitP33_5A0B7B44E54382705C993A39EDE5E35828VideoReactionPickerViewModel__anchorPoint;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CGPoint?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return v0;
}

uint64_t VideoReactionPickerViewModel.__deallocating_deinit()
{
  VideoReactionPickerViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance VideoReactionPickerViewModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for VideoReactionPickerViewModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VideoReaction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoReaction()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VideoReaction(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoReaction()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

id VideoReaction.rawValue.getter(char a1)
{
  return **((id **)&unk_1E6484DC8 + a1);
}

ConversationKit::VideoReaction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VideoReaction@<W0>(__C::AVCaptureReactionType *a1@<X0>, ConversationKit::VideoReaction_optional *a2@<X8>)
{
  result.value = VideoReaction.init(rawValue:)((__C::AVCaptureReactionType)a1->_rawValue).value;
  a2->value = result.value;
  return result;
}

id protocol witness for RawRepresentable.rawValue.getter in conformance VideoReaction@<X0>(void *a1@<X8>)
{
  id result = VideoReaction.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t VideoReaction.accessibilityLabel.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 4:
    case 5:
    case 6:
      id v1 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_11();
      break;
    default:
      id v2 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_16_43();
      OUTLINED_FUNCTION_13_11();
      break;
  }
  OUTLINED_FUNCTION_4_6();
  v3._uint64_t countAndFlagsBits = 0;
  v3._unint64_t object = (void *)0xE000000000000000;
  uint64_t v4 = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v1, v3, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

double VideoReaction.rotationParameters.getter(char a1)
{
  if (a1 == 2)
  {
    static UnitPoint.topTrailing.getter();
  }
  else
  {
    if (a1 != 1)
    {
      double v1 = 0.0;
      static UnitPoint.center.getter();
      return v1;
    }
    static UnitPoint.bottomLeading.getter();
  }
  return -0.785398163;
}

uint64_t VideoReactionButtonStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = static Alignment.center.getter();
  a1[1] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>)>>);
  return closure #1 in VideoReactionButtonStyle.makeBody(configuration:)((uint64_t)a1 + *(int *)(v3 + 44));
}

uint64_t closure #1 in VideoReactionButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v2 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  MEMORY[0x1F4188790](v31);
  Swift::String_optional v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v25 - v11;
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    id v13 = objc_msgSend(self, sel_labelColor);
    uint64_t v14 = MEMORY[0x1C8772490](v13);
  }
  else
  {
    uint64_t v14 = static Color.clear.getter();
  }
  uint64_t v30 = v14;
  VideoReactionButtonStyle.backgroundSize.getter();
  VideoReactionButtonStyle.backgroundSize.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v15 = v33;
  int v29 = v34;
  uint64_t v28 = v35;
  int v27 = v36;
  uint64_t v25 = v38;
  uint64_t v26 = v37;
  ButtonStyleConfiguration.label.getter();
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    uint64_t v16 = static Color.black.getter();
  }
  else
  {
    id v17 = objc_msgSend(self, sel_labelColor);
    uint64_t v16 = MEMORY[0x1C8772490](v17);
  }
  uint64_t v18 = v16;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = v32;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v9, v4, v32);
  char v21 = (uint64_t *)&v9[*(int *)(v31 + 36)];
  *char v21 = KeyPath;
  v21[1] = v18;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  outlined init with copy of FeatureEligibility?((uint64_t)v12, (uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  *(void *)a1 = v30;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 24) = v29;
  *(void *)(a1 + 32) = v28;
  *(unsigned char *)(a1 + 40) = v27;
  uint64_t v22 = v25;
  *(void *)(a1 + 48) = v26;
  *(void *)(a1 + 56) = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>));
  outlined init with copy of FeatureEligibility?((uint64_t)v6, a1 + *(int *)(v23 + 48), &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  swift_retain();
  outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  outlined destroy of SystemUpdateNotice?((uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  return swift_release();
}

double VideoReactionButtonStyle.backgroundSize.getter()
{
  uint64_t v0 = type metadata accessor for DynamicTypeSize();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  Swift::String_optional v6 = (char *)&v13 - v5;
  specialized Environment.wrappedValue.getter();
  uint64_t v7 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v7(v3, *MEMORY[0x1E4F3CB88], v0);
  char v8 = static DynamicTypeSize.< infix(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v9(v6, v0);
  if (v8) {
    return 44.0;
  }
  specialized Environment.wrappedValue.getter();
  v7(v3, *MEMORY[0x1E4F3CB28], v0);
  char v11 = static DynamicTypeSize.< infix(_:_:)();
  v9(v3, v0);
  v9(v6, v0);
  if (v11) {
    return 50.6;
  }
  specialized Environment.wrappedValue.getter();
  v7(v3, *MEMORY[0x1E4F3CB40], v0);
  char v12 = static DynamicTypeSize.< infix(_:_:)();
  v9(v3, v0);
  v9(v6, v0);
  double result = 81.84;
  if (v12) {
    return 62.04;
  }
  return result;
}

uint64_t VideoReactionButtonStyle.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  return swift_storeEnumTagMultiPayload();
}

double static XPositionPreferenceKey.defaultValue.getter()
{
  return 0.0;
}

double thunk for @callee_guaranteed () -> (@out CGFloat)(void (*a1)(double *__return_ptr))
{
  a1(&v2);
  return v2;
}

uint64_t protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance XPositionPreferenceKey()
{
  return MEMORY[0x1F40F85C8]();
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance XPositionPreferenceKey()
{
  return MEMORY[0x1F40F85C8]();
}

uint64_t VideoReactionButton.reaction.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for VideoReactionButton(0) + 32));
}

uint64_t VideoReactionButton.reaction.setter(char a1)
{
  uint64_t result = type metadata accessor for VideoReactionButton(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*VideoReactionButton.reaction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double VideoReactionButton.showDelay.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for VideoReactionButton(0) + 36));
}

uint64_t VideoReactionButton.showDelay.setter(double a1)
{
  uint64_t result = type metadata accessor for VideoReactionButton(0);
  *(double *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*VideoReactionButton.showDelay.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double VideoReactionButton.moveDelay.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for VideoReactionButton(0) + 40));
}

uint64_t VideoReactionButton.moveDelay.setter(double a1)
{
  uint64_t result = type metadata accessor for VideoReactionButton(0);
  *(double *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*VideoReactionButton.moveDelay.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t VideoReactionButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v127 = a1;
  uint64_t v120 = type metadata accessor for VideoReactionButtonStyle(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_17_4();
  MEMORY[0x1F4188790](v4);
  Swift::String_optional v6 = (char *)&v100 - v5;
  uint64_t v111 = type metadata accessor for VideoReactionButton(0) - 8;
  OUTLINED_FUNCTION_5_102();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  uint64_t v128 = (uint64_t)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v100 - v13;
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>>);
  OUTLINED_FUNCTION_4();
  uint64_t v105 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_62();
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v110 = v17;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v19);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
  MEMORY[0x1F4188790](v20 - 8);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v21);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>)
       - 8;
  MEMORY[0x1F4188790](v109);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v22);
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>)
       - 8;
  MEMORY[0x1F4188790](v112);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v23);
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v25);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v27);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v29);
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>, _OffsetEffect>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v31);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>, _OffsetEffect>, _AnimationModifier<Bool>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_2_3();
  uint64_t v125 = v33;
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onChange<A>(of:initial:_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v123 = v34;
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v36);
  Swift::String v102 = type metadata accessor for VideoReactionButton;
  outlined init with copy of VideoReactionButton(v1, (uint64_t)v14, (void (*)(void))type metadata accessor for VideoReactionButton);
  uint64_t v37 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v38 = (v37 + 16) & ~v37;
  uint64_t v129 = v37 | 7;
  uint64_t v130 = v38 + v10;
  uint64_t v39 = swift_allocObject();
  Swift::String_optional v101 = type metadata accessor for VideoReactionButton;
  outlined init with take of VideoReactionButton((uint64_t)v14, v39 + v38, (void (*)(void))type metadata accessor for VideoReactionButton);
  uint64_t v131 = v1;
  uint64_t v40 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  uint64_t *v2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = (uint64_t)v6;
  outlined init with take of VideoReactionButton((uint64_t)v2, (uint64_t)v6, (void (*)(void))type metadata accessor for VideoReactionButtonStyle);
  uint64_t v42 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Image.Scale>>>);
  uint64_t v43 = lazy protocol witness table accessor for type VideoReactionButtonStyle and conformance VideoReactionButtonStyle(&lazy protocol witness table cache variable for type VideoReactionButtonStyle and conformance VideoReactionButtonStyle, (void (*)(uint64_t))type metadata accessor for VideoReactionButtonStyle);
  uint64_t v44 = v103;
  uint64_t v45 = v120;
  View.buttonStyle<A>(_:)();
  outlined destroy of VideoReactionButtonStyle(v41, (void (*)(void))type metadata accessor for VideoReactionButtonStyle);
  OUTLINED_FUNCTION_26_2();
  v46();
  uint64_t v47 = v111;
  uint64_t v105 = *(int *)(v111 + 40);
  uint64_t v136 = VideoReaction.accessibilityLabel.getter(*(unsigned char *)(v1 + v105));
  uint64_t v137 = v48;
  uint64_t v132 = v44;
  uint64_t v133 = v45;
  uint64_t v134 = v42;
  uint64_t v135 = v43;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v49 = v104;
  View.accessibilityLabel<A>(_:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_2();
  v50();
  uint64_t v51 = static Alignment.center.getter();
  long long v53 = v52;
  uint64_t v54 = v128;
  outlined init with copy of VideoReactionButton(v40, v128, (void (*)(void))v102);
  uint64_t v55 = (void *)v40;
  uint64_t v56 = swift_allocObject();
  uint64_t v120 = v38;
  outlined init with take of VideoReactionButton(v54, v56 + v38, (void (*)(void))v101);
  uint64_t v57 = v107;
  outlined init with copy of FeatureEligibility?(v49, v107, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
  id v58 = (void (**)(uint64_t@<X8>))(v57 + *(int *)(v109 + 44));
  *id v58 = closure #1 in closure #3 in VideoReactionButton.body.getter;
  v58[1] = 0;
  v58[2] = (void (*)(uint64_t@<X8>))partial apply for closure #2 in closure #3 in VideoReactionButton.body.getter;
  v58[3] = (void (*)(uint64_t@<X8>))v56;
  uint64_t v59 = v106;
  v58[4] = (void (*)(uint64_t@<X8>))v51;
  v58[5] = v53;
  outlined destroy of SystemUpdateNotice?(v49, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
  uint64_t v60 = v40 + *(int *)(v47 + 36);
  uint64_t v61 = *(void *)(v60 + 8);
  LOBYTE(v132) = *(unsigned char *)v60;
  uint64_t v133 = v61;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  unint64_t v62 = 0;
  if ((_BYTE)v136) {
    double v63 = 1.0;
  }
  else {
    double v63 = 0.0;
  }
  static UnitPoint.center.getter();
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  outlined init with copy of FeatureEligibility?(v57, v59, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>);
  uint64_t v68 = v59 + *(int *)(v112 + 44);
  *(double *)uint64_t v68 = v63;
  *(double *)(v68 + 8) = v63;
  *(void *)(v68 + 16) = v65;
  *(void *)(v68 + 24) = v67;
  outlined destroy of SystemUpdateNotice?(v57, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>);
  OUTLINED_FUNCTION_7_86();
  if (v136)
  {
    uint64_t v69 = v125;
    uint64_t v70 = v121;
    uint64_t v71 = v105;
  }
  else
  {
    uint64_t v71 = v105;
    int v72 = *((unsigned __int8 *)v55 + v105);
    if (v72 == 2)
    {
      static UnitPoint.topTrailing.getter();
      unint64_t v62 = 0xBFE921FB54442D18;
      uint64_t v69 = v125;
      uint64_t v70 = v121;
    }
    else
    {
      uint64_t v69 = v125;
      uint64_t v70 = v121;
      if (v72 == 1)
      {
        static UnitPoint.bottomLeading.getter();
        unint64_t v62 = 0xBFE921FB54442D18;
      }
      else
      {
        static UnitPoint.center.getter();
      }
    }
  }
  int v73 = *((unsigned __int8 *)v55 + v71);
  if (v73 == 2)
  {
    static UnitPoint.topTrailing.getter();
    unint64_t v76 = v75;
    unint64_t v78 = v77;
    uint64_t v74 = v113;
  }
  else
  {
    uint64_t v74 = v113;
    if (v73 == 1) {
      static UnitPoint.bottomLeading.getter();
    }
    else {
      static UnitPoint.center.getter();
    }
    unint64_t v76 = v79;
    unint64_t v78 = v80;
  }
  uint64_t v81 = v117;
  outlined init with copy of FeatureEligibility?(v59, v117, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>);
  uint64_t v82 = (unint64_t *)(v81 + *(int *)(v74 + 36));
  *uint64_t v82 = v62;
  v82[1] = v76;
  v82[2] = v78;
  outlined destroy of SystemUpdateNotice?(v59, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>);
  uint64_t v83 = VideoReactionButton.transformAnimation.getter();
  OUTLINED_FUNCTION_7_86();
  char v84 = v136;
  uint64_t v85 = v118;
  outlined init with copy of FeatureEligibility?(v81, v118, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>);
  uint64_t v86 = v85 + *(int *)(v115 + 36);
  *(void *)uint64_t v86 = v83;
  *(unsigned char *)(v86 + 8) = v84;
  outlined destroy of SystemUpdateNotice?(v81, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>);
  uint64_t v87 = v119;
  outlined init with copy of FeatureEligibility?(v85, v119, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>);
  uint64_t v88 = (void *)(v87 + *(int *)(v114 + 36));
  *uint64_t v88 = 0x3FF0000000000000;
  v88[1] = 0;
  v88[2] = 0;
  v88[3] = 0x3FF0000000000000;
  v88[4] = 0;
  v88[5] = 0;
  outlined destroy of SystemUpdateNotice?(v85, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>);
  VideoReactionButton.offset.getter();
  uint64_t v90 = v89;
  outlined init with copy of FeatureEligibility?(v87, v70, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>);
  uint64_t v91 = (void *)(v70 + *(int *)(v116 + 36));
  *uint64_t v91 = v90;
  v91[1] = 0;
  outlined destroy of SystemUpdateNotice?(v87, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>);
  uint64_t v92 = VideoReactionButton.offsetAnimation.getter();
  OUTLINED_FUNCTION_7_86();
  char v93 = v136;
  outlined init with copy of FeatureEligibility?(v70, v69, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>, _OffsetEffect>);
  uint64_t v94 = v69 + *(int *)(v124 + 36);
  *(void *)uint64_t v94 = v92;
  *(unsigned char *)(v94 + 8) = v93;
  outlined destroy of SystemUpdateNotice?(v70, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>, _OffsetEffect>);
  if (*v55)
  {
    swift_retain();
    char v95 = VideoReactionPickerViewModel.isShowingPicker.getter();
    swift_release();
    LOBYTE(v132) = v95 & 1;
    uint64_t v96 = v128;
    outlined init with copy of VideoReactionButton((uint64_t)v55, v128, (void (*)(void))type metadata accessor for VideoReactionButton);
    uint64_t v97 = swift_allocObject();
    outlined init with take of VideoReactionButton(v96, v97 + v120, (void (*)(void))type metadata accessor for VideoReactionButton);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>, _OffsetEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    uint64_t v98 = v122;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    outlined destroy of SystemUpdateNotice?(v69, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<XPositionPreferenceKey>>>, _PreferenceActionModifier<XPositionPreferenceKey>>>>, _ScaleEffect>, _RotationEffect>, _AnimationModifier<Bool>>, _TransformEffect>, _OffsetEffect>, _AnimationModifier<Bool>>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v127, v98, v126);
  }
  else
  {
    type metadata accessor for VideoReactionPickerViewModel(0);
    lazy protocol witness table accessor for type VideoReactionButtonStyle and conformance VideoReactionButtonStyle(&lazy protocol witness table cache variable for type VideoReactionPickerViewModel and conformance VideoReactionPickerViewModel, (void (*)(uint64_t))type metadata accessor for VideoReactionPickerViewModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}