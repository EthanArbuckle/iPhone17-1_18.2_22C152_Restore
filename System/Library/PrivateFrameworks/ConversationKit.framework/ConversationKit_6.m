void InCallControlButton.addConstraintsForPillWithImageView(_:imageSpacing:isImageTrailing:)(void *a1, uint64_t a2, char a3, char a4)
{
  char *v4;
  void *v5;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  double v14;
  id v15;
  uint64_t vars8;

  v5 = *(void **)&v4[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label];
  if (v5)
  {
    if (a3) {
      *(double *)&a2 = 3.0;
    }
    v9 = objc_allocWithZone(MEMORY[0x1E4FB1940]);
    v10 = v5;
    v11 = objc_msgSend(v9, sel_init);
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
    v12 = *(void **)&v4[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];
    objc_msgSend(v12, sel_addLayoutGuide_, v11);
    objc_msgSend(v12, sel_addSubview_, a1);
    objc_msgSend(v12, sel_addSubview_, v10);
    v13 = (void *)MEMORY[0x1C8775630](objc_msgSend(v12, sel_addLayoutGuide_, v15));
    closure #1 in InCallControlButton.addConstraintsForPillWithImageView(_:imageSpacing:isImageTrailing:)(v4, v11, v15, v10, a4 & 1, a1, *(double *)&a2);
    LODWORD(v14) = 1148846080;
    objc_msgSend(a1, sel_setContentCompressionResistancePriority_forAxis_, 0, v14);
  }
  else
  {
    OUTLINED_FUNCTION_4_81();
    __break(1u);
  }
}

void closure #1 in InCallControlButton.addConstraintsForPillWithImageView(_:imageSpacing:isImageTrailing:)(char *a1, void *a2, void *a3, void *a4, char a5, void *a6, double a7)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSLayoutConstraint?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C377AAD0;
  id v10 = objc_msgSend(a1, sel_heightAnchor);
  id v11 = objc_msgSend(v10, sel_constraintGreaterThanOrEqualToConstant_, 42.0);

  LODWORD(v12) = 1148846080;
  objc_msgSend(v11, sel_setPriority_, v12);
  *(void *)(inited + 32) = v11;
  id v13 = objc_msgSend(a1, sel_widthAnchor);
  id v14 = objc_msgSend(v13, sel_constraintGreaterThanOrEqualToConstant_, 72.0);

  LODWORD(v15) = 1148846080;
  objc_msgSend(v14, sel_setPriority_, v15);
  *(void *)(inited + 40) = v14;
  v16 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];
  id v17 = objc_msgSend(v16, sel_topAnchor);
  id v18 = objc_msgSend(a1, sel_topAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(void *)(inited + 48) = v19;
  id v20 = objc_msgSend(v16, sel_bottomAnchor);
  id v21 = objc_msgSend(a1, sel_bottomAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(inited + 56) = v22;
  id v23 = objc_msgSend(v16, sel_leadingAnchor);
  id v24 = objc_msgSend(a1, sel_leadingAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(inited + 64) = v25;
  id v26 = objc_msgSend(v16, sel_trailingAnchor);
  id v27 = objc_msgSend(a1, sel_trailingAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(void *)(inited + 72) = v28;
  uint64_t v29 = OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView;
  v30 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView];
  if (v30)
  {
    id v31 = objc_msgSend(v30, sel_topAnchor);
    v32 = v16;
    id v33 = objc_msgSend(v16, sel_topAnchor);
    id v34 = objc_msgSend(v31, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v33);
  }
  else
  {
    v32 = v16;
    id v34 = 0;
  }
  *(void *)(inited + 80) = v34;
  v35 = *(void **)&a1[v29];
  if (v35)
  {
    id v36 = objc_msgSend(v35, sel_bottomAnchor);
    id v37 = objc_msgSend(v32, sel_bottomAnchor);
    id v38 = objc_msgSend(v36, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v37);
  }
  else
  {
    id v38 = 0;
  }
  *(void *)(inited + 88) = v38;
  v39 = *(void **)&a1[v29];
  if (v39)
  {
    id v40 = objc_msgSend(v39, sel_leadingAnchor);
    id v41 = objc_msgSend(v32, sel_leadingAnchor);
    id v42 = objc_msgSend(v40, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v41);
  }
  else
  {
    id v42 = 0;
  }
  *(void *)(inited + 96) = v42;
  v43 = *(void **)&a1[v29];
  if (v43)
  {
    id v44 = objc_msgSend(v43, sel_trailingAnchor);
    id v45 = objc_msgSend(v32, sel_trailingAnchor);
    id v46 = objc_msgSend(v44, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v45);
  }
  else
  {
    id v46 = 0;
  }
  *(void *)(inited + 104) = v46;
  v47 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundFlatView];
  id v48 = objc_msgSend(v47, sel_topAnchor);
  id v49 = objc_msgSend(v32, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v50 = objc_msgSend(v48, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v49);

  *(void *)(inited + 112) = v50;
  id v51 = objc_msgSend(v47, sel_bottomAnchor);
  id v52 = objc_msgSend(v32, (SEL)&selRef_canOpenURL_ + 5);
  id v53 = objc_msgSend(v51, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v52);

  *(void *)(inited + 120) = v53;
  id v54 = objc_msgSend(v47, sel_leadingAnchor);
  id v55 = objc_msgSend(v32, (SEL)&selRef_shouldShowCallDetailsWhenReady + 2);
  id v56 = objc_msgSend(v54, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v55);

  *(void *)(inited + 128) = v56;
  id v57 = objc_msgSend(v47, sel_trailingAnchor);
  id v58 = objc_msgSend(v32, sel_trailingAnchor);
  id v59 = objc_msgSend(v57, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v58);

  *(void *)(inited + 136) = v59;
  id v60 = objc_msgSend(a2, sel_topAnchor);
  id v61 = objc_msgSend(v32, sel_topAnchor);
  id v62 = objc_msgSend(v60, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v61);

  *(void *)(inited + 144) = v62;
  id v63 = objc_msgSend(a2, sel_bottomAnchor);
  id v64 = objc_msgSend(v32, sel_bottomAnchor);
  id v65 = objc_msgSend(v63, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v64);

  *(void *)(inited + 152) = v65;
  id v66 = objc_msgSend(a2, sel_leadingAnchor);
  id v67 = objc_msgSend(v32, sel_leadingAnchor);
  id v68 = objc_msgSend(v66, sel_constraintEqualToAnchor_constant_, v67, 10.0);

  *(void *)(inited + 160) = v68;
  id v69 = objc_msgSend(a3, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v70 = objc_msgSend(v32, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v71 = objc_msgSend(v69, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v70);

  *(void *)(inited + 168) = v71;
  id v72 = objc_msgSend(a3, sel_bottomAnchor);
  id v73 = objc_msgSend(v32, sel_bottomAnchor);
  id v74 = objc_msgSend(v72, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v73);

  *(void *)(inited + 176) = v74;
  id v75 = objc_msgSend(a3, sel_leadingAnchor);
  id v76 = objc_msgSend(a4, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v77 = objc_msgSend(v75, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v76);

  *(void *)(inited + 184) = v77;
  id v78 = objc_msgSend(a3, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v79 = objc_msgSend(v32, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v80 = objc_msgSend(v78, sel_constraintEqualToAnchor_constant_, v79, -10.0);

  *(void *)(inited + 192) = v80;
  id v81 = objc_msgSend(a2, sel_widthAnchor);
  id v82 = objc_msgSend(a3, sel_widthAnchor);
  id v83 = objc_msgSend(v81, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v82);

  *(void *)(inited + 200) = v83;
  uint64_t v125 = inited;
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1C3769600;
  if (a5)
  {
    id v85 = objc_msgSend(a6, (SEL)&selRef_supportsDynamicSystemUI + 4);
    id v86 = objc_msgSend(a3, (SEL)&selRef_supportsDynamicSystemUI + 4);
    id v87 = objc_msgSend(v85, sel_constraintEqualToAnchor_constant_, v86, -a7);

    *(void *)(v84 + 32) = v87;
    id v88 = objc_msgSend(a6, sel_centerYAnchor);
    id v89 = objc_msgSend(v32, sel_centerYAnchor);
    id v90 = objc_msgSend(v88, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v89);

    *(void *)(v84 + 40) = v90;
    id v91 = objc_msgSend(a4, sel_leadingAnchor);
    id v92 = objc_msgSend(a2, sel_leadingAnchor);
    id v93 = objc_msgSend(v91, (SEL)&selRef_cinematicFramingButton + 7, v92, a7);

    *(void *)(v84 + 48) = v93;
    id v94 = objc_msgSend(a4, sel_topAnchor);
    id v95 = objc_msgSend(v32, sel_topAnchor);
    id v96 = objc_msgSend(v94, (SEL)&selRef_cinematicFramingButton + 7, v95, 8.0);

    *(void *)(v84 + 56) = v96;
    id v97 = objc_msgSend(a4, sel_bottomAnchor);
    id v98 = objc_msgSend(v32, sel_bottomAnchor);
    id v99 = objc_msgSend(v97, (SEL)&selRef_cinematicFramingButton + 7, v98, -8.0);
  }
  else
  {
    id v100 = objc_msgSend(a6, sel_leadingAnchor);
    id v101 = objc_msgSend(a2, (SEL)&selRef_supportsDynamicSystemUI + 4);
    id v102 = objc_msgSend(v100, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v101);

    *(void *)(v84 + 32) = v102;
    id v103 = objc_msgSend(a6, sel_centerYAnchor);
    id v104 = objc_msgSend(v32, sel_centerYAnchor);
    id v105 = objc_msgSend(v103, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v104);

    *(void *)(v84 + 40) = v105;
    id v106 = objc_msgSend(a4, sel_leadingAnchor);
    id v107 = objc_msgSend(a6, (SEL)&selRef_supportsDynamicSystemUI + 4);
    id v108 = objc_msgSend(v106, sel_constraintEqualToAnchor_constant_, v107, a7);

    *(void *)(v84 + 48) = v108;
    id v109 = objc_msgSend(a4, sel_topAnchor);
    id v110 = objc_msgSend(v32, sel_topAnchor);
    id v111 = objc_msgSend(v109, sel_constraintEqualToAnchor_constant_, v110, 8.0);

    *(void *)(v84 + 56) = v111;
    id v97 = objc_msgSend(a4, sel_bottomAnchor);
    id v98 = objc_msgSend(v32, sel_bottomAnchor);
    id v99 = objc_msgSend(v97, sel_constraintEqualToAnchor_constant_, v98, -8.0);
  }
  id v112 = v99;

  *(void *)(v84 + 64) = v112;
  specialized Array._endMutation()();
  specialized _arrayForceCast<A, B>(_:)(v84);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  uint64_t v124 = MEMORY[0x1E4FBC860];
  uint64_t v113 = *(void *)(v125 + 16);
  if (v113)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v113; ++i)
    {
      v115 = *(void **)(v125 + 8 * i + 32);
      if (v115)
      {
        id v116 = v115;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v117 = self;
  swift_bridgeObjectRelease_n();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v117, sel_activateConstraints_, isa);
}

void InCallControlButton.addConstraintsForPill()()
{
  v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label];
  if (v1)
  {
    id v2 = v1;
    LODWORD(v3) = 1144750080;
    objc_msgSend(v2, sel_setContentHuggingPriority_forAxis_, 0, v3);
    LODWORD(v4) = 1144750080;
    objc_msgSend(v2, sel_setContentCompressionResistancePriority_forAxis_, 0, v4);
    v5 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];
    objc_msgSend(v5, sel_addSubview_, v2);
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
    objc_msgSend(v5, sel_addLayoutGuide_, v8);
    v7 = (void *)MEMORY[0x1C8775630](objc_msgSend(v5, sel_addLayoutGuide_, v6));
    closure #1 in InCallControlButton.addConstraintsForPill()(v0, v8, v2, v6);
  }
  else
  {
    OUTLINED_FUNCTION_4_81();
    __break(1u);
  }
}

void closure #1 in InCallControlButton.addConstraintsForPill()(char *a1, void *a2, void *a3, void *a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSLayoutConstraint?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C377AAE0;
  id v6 = objc_msgSend(a1, sel_heightAnchor);
  id v7 = objc_msgSend(v6, sel_constraintGreaterThanOrEqualToConstant_, 42.0);

  LODWORD(v8) = 1144750080;
  objc_msgSend(v7, sel_setPriority_, v8);
  *(void *)(inited + 32) = v7;
  id v9 = objc_msgSend(a1, sel_widthAnchor);
  id v10 = objc_msgSend(v9, sel_constraintGreaterThanOrEqualToConstant_, 72.0);

  LODWORD(v11) = 1144750080;
  objc_msgSend(v10, sel_setPriority_, v11);
  *(void *)(inited + 40) = v10;
  double v12 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];
  id v13 = objc_msgSend(v12, sel_topAnchor);
  id v14 = objc_msgSend(a1, sel_topAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  *(void *)(inited + 48) = v15;
  id v16 = objc_msgSend(v12, sel_bottomAnchor);
  id v17 = objc_msgSend(a1, sel_bottomAnchor);
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(void *)(inited + 56) = v18;
  id v19 = objc_msgSend(v12, sel_leadingAnchor);
  id v20 = objc_msgSend(a1, sel_leadingAnchor);
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(void *)(inited + 64) = v21;
  id v22 = objc_msgSend(v12, sel_trailingAnchor);
  id v23 = objc_msgSend(a1, sel_trailingAnchor);
  id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);

  *(void *)(inited + 72) = v24;
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView;
  id v26 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView];
  if (v26)
  {
    id v27 = objc_msgSend(v26, sel_topAnchor);
    id v28 = objc_msgSend(v12, sel_topAnchor);
    id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);
  }
  else
  {
    id v29 = 0;
  }
  *(void *)(inited + 80) = v29;
  v30 = *(void **)&a1[v25];
  if (v30)
  {
    id v31 = objc_msgSend(v30, sel_bottomAnchor);
    id v32 = objc_msgSend(v12, sel_bottomAnchor);
    id v33 = objc_msgSend(v31, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v32);
  }
  else
  {
    id v33 = 0;
  }
  *(void *)(inited + 88) = v33;
  id v34 = *(void **)&a1[v25];
  if (v34)
  {
    id v35 = objc_msgSend(v34, sel_leadingAnchor);
    id v36 = objc_msgSend(v12, sel_leadingAnchor);
    id v37 = objc_msgSend(v35, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v36);
  }
  else
  {
    id v37 = 0;
  }
  *(void *)(inited + 96) = v37;
  id v38 = *(void **)&a1[v25];
  if (v38)
  {
    id v39 = objc_msgSend(v38, sel_trailingAnchor);
    id v40 = objc_msgSend(v12, sel_trailingAnchor);
    id v41 = objc_msgSend(v39, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v40);
  }
  else
  {
    id v41 = 0;
  }
  *(void *)(inited + 104) = v41;
  id v42 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundFlatView];
  id v43 = objc_msgSend(v42, sel_topAnchor);
  id v44 = objc_msgSend(v12, sel_topAnchor);
  id v45 = objc_msgSend(v43, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v44);

  *(void *)(inited + 112) = v45;
  id v46 = objc_msgSend(v42, sel_bottomAnchor);
  id v47 = objc_msgSend(v12, (SEL)&selRef_canOpenURL_ + 5);
  id v48 = objc_msgSend(v46, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v47);

  *(void *)(inited + 120) = v48;
  id v49 = objc_msgSend(v42, sel_leadingAnchor);
  id v50 = objc_msgSend(v12, (SEL)&selRef_shouldShowCallDetailsWhenReady + 2);
  id v51 = objc_msgSend(v49, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v50);

  *(void *)(inited + 128) = v51;
  id v52 = objc_msgSend(v42, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v53 = objc_msgSend(v12, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v54 = objc_msgSend(v52, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v53);

  *(void *)(inited + 136) = v54;
  id v55 = objc_msgSend(a2, sel_topAnchor);
  id v56 = objc_msgSend(v12, sel_topAnchor);
  id v57 = objc_msgSend(v55, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v56);

  *(void *)(inited + 144) = v57;
  id v58 = objc_msgSend(a2, sel_bottomAnchor);
  id v59 = objc_msgSend(v12, sel_bottomAnchor);
  id v60 = objc_msgSend(v58, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v59);

  *(void *)(inited + 152) = v60;
  id v61 = objc_msgSend(a2, sel_leadingAnchor);
  id v62 = objc_msgSend(v12, sel_leadingAnchor);
  id v63 = objc_msgSend(v61, sel_constraintEqualToAnchor_constant_, v62, 10.0);

  *(void *)(inited + 160) = v63;
  id v64 = objc_msgSend(a3, sel_leadingAnchor);
  id v65 = objc_msgSend(a2, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v66 = objc_msgSend(v64, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v65);

  *(void *)(inited + 168) = v66;
  id v67 = objc_msgSend(a3, sel_topAnchor);
  id v68 = objc_msgSend(v12, sel_topAnchor);
  id v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_constant_, v68, 8.0);

  *(void *)(inited + 176) = v69;
  id v70 = objc_msgSend(a3, sel_bottomAnchor);
  id v71 = objc_msgSend(v12, sel_bottomAnchor);
  id v72 = objc_msgSend(v70, sel_constraintEqualToAnchor_constant_, v71, -8.0);

  *(void *)(inited + 184) = v72;
  id v73 = objc_msgSend(a4, sel_topAnchor);
  id v74 = objc_msgSend(v12, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v75 = objc_msgSend(v73, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v74);

  *(void *)(inited + 192) = v75;
  id v76 = objc_msgSend(a4, sel_bottomAnchor);
  id v77 = objc_msgSend(v12, sel_bottomAnchor);
  id v78 = objc_msgSend(v76, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v77);

  *(void *)(inited + 200) = v78;
  id v79 = objc_msgSend(a4, sel_leadingAnchor);
  id v80 = objc_msgSend(a3, sel_trailingAnchor);
  id v81 = objc_msgSend(v79, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v80);

  *(void *)(inited + 208) = v81;
  id v82 = objc_msgSend(a4, sel_trailingAnchor);
  id v83 = objc_msgSend(v12, sel_trailingAnchor);
  id v84 = objc_msgSend(v82, sel_constraintEqualToAnchor_constant_, v83, -10.0);

  *(void *)(inited + 216) = v84;
  id v85 = objc_msgSend(a2, sel_widthAnchor);
  id v86 = objc_msgSend(a4, sel_widthAnchor);
  id v87 = objc_msgSend(v85, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v86);

  *(void *)(inited + 224) = v87;
  specialized Array._endMutation()();
  uint64_t v96 = MEMORY[0x1E4FBC860];
  for (uint64_t i = 32; i != 232; i += 8)
  {
    id v89 = *(void **)(inited + i);
    if (v89)
    {
      id v90 = v89;
      MEMORY[0x1C87733A0]();
      if (*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  id v91 = self;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v91, sel_activateConstraints_, isa);
}

void InCallControlButton.updateColors()()
{
  if (objc_msgSend(v0, sel_isEnabled))
  {
    unsigned int v1 = objc_msgSend(v0, sel_isHighlighted);
    unsigned int v2 = objc_msgSend(v0, sel_isSelected);
    if (!v1 && v2 && static Platform.current.getter() == 2) {
      objc_msgSend(v0, sel_isFocused);
    }
  }
  unint64_t v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  if ((*MEMORY[0x1E4FB25B8] & ~v3) == 0)
  {
    unsigned int v4 = objc_msgSend(v0, sel_isSelected);
    id v5 = objc_msgSend(self, sel_conversationKit);
    unint64_t v58 = 0xE000000000000000;
    if (v4)
    {
      uint64_t v6 = 20047;
      unint64_t v7 = 0xE200000000000000;
    }
    else
    {
      uint64_t v6 = 4605519;
      unint64_t v7 = 0xE300000000000000;
    }
    v8.value._countAndFlagsBits = 0x61737265766E6F43;
    v8.value._object = (void *)0xEF74694B6E6F6974;
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    uint64_t v10 = 0;
    Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v6, v8, (NSBundle)v5, v9, *(Swift::String *)(&v58 - 1));

    outlined bridged method (mbnn) of @objc NSObject.accessibilityValue.setter(v11._countAndFlagsBits, (uint64_t)v11._object, v0);
  }
  double v12 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180);
  v12();
  specialized Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v75, (uint64_t)v82, &demangling cache variable for type metadata for InCallControlButtonConfiguration?);
  id v14 = (void *)v82[0];
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  if (v82[0] == 1)
  {
    ((void (*)(uint64_t))v12)(v13);
    specialized Dictionary.subscript.getter();
    swift_bridgeObjectRelease();
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for InCallControlButtonConfiguration?);
    id v14 = (void *)v77[0];
    if (v77[0] == 1)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1C376BA10;
      type metadata accessor for UIControlState(0);
      uint64_t v17 = String.init<A>(reflecting:)();
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = v15;
      unint64_t v20 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v16 + 64) = v20;
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 40) = v19;
      uint64_t v21 = String.init<A>(reflecting:)();
      *(void *)(v16 + 96) = v15;
      *(void *)(v16 + 104) = v20;
      *(void *)(v16 + 72) = v21;
      *(void *)(v16 + 80) = v22;
      uint64_t v67 = ((uint64_t (*)(void))v12)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Dictionary<UIControlState, InCallControlButtonConfiguration>);
      uint64_t v23 = String.init<A>(reflecting:)();
      *(void *)(v16 + 136) = v15;
      *(void *)(v16 + 144) = v20;
      *(void *)(v16 + 112) = v23;
      *(void *)(v16 + 120) = v24;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v30 = v15;
    id v65 = (void *)v77[3];
    id v66 = (void *)v77[2];
    unsigned int v62 = v78;
    id v63 = v79;
    id v59 = v80;
    id v60 = (void *)v77[1];
    id v61 = v81;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1C37696D0;
    type metadata accessor for UIControlState(0);
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v34 = v33;
    uint64_t v35 = v30;
    *(void *)(v31 + 56) = v30;
    unint64_t v36 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 64) = v36;
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    uint64_t v67 = ((uint64_t (*)(void))v12)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Dictionary<UIControlState, InCallControlButtonConfiguration>);
    uint64_t v37 = String.init<A>(reflecting:)();
    *(void *)(v31 + 96) = v35;
    *(void *)(v31 + 104) = v36;
    *(void *)(v31 + 72) = v37;
    *(void *)(v31 + 80) = v38;
    os_log(_:dso:log:type:_:)();
    uint64_t v15 = v35;
    swift_bridgeObjectRelease();
    id v27 = v59;
    uint64_t v25 = v60;
    id v28 = v63;
    unint64_t v26 = v62;
    id v29 = v61;
  }
  else
  {
    uint64_t v25 = (void *)v82[1];
    id v65 = (void *)v82[3];
    id v66 = (void *)v82[2];
    unint64_t v26 = v83;
    id v28 = v84;
    id v27 = v85;
    id v29 = v86;
  }
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_isUsingVisualEffects) == 1)
  {
    if (v14)
    {
      uint64_t v67 = (uint64_t)v14;
      id v68 = v25;
      id v69 = v66;
      id v70 = v65;
      char v71 = v26 & 1;
      id v39 = v14;
      id v40 = v25;
      id v64 = v14;
      id v41 = v25;
      id v42 = v27;
      id v43 = v40;
      outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v66, v65, v26 & 1);
      InCallControlButton.update(with:)(&v67);

      id v44 = v42;
      uint64_t v25 = v41;
      id v14 = v64;
      outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v66, v65, v26 & 1);
    }
    else
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1C37696D0;
      uint64_t v67 = 0;
      id v68 = v25;
      id v69 = v66;
      id v70 = v65;
      char v71 = v26;
      id v72 = v28;
      id v73 = v27;
      id v74 = v29;
      outlined copy of InCallControlButtonConfiguration.Flat?(v28, v27, v29);
      String.init<A>(reflecting:)();
      unint64_t v49 = OUTLINED_FUNCTION_20_35();
      OUTLINED_FUNCTION_10_53(v49);
      id v50 = v0;
      uint64_t v51 = String.init<A>(reflecting:)();
      *(void *)(v48 + 96) = v25;
      *(void *)(v48 + 104) = v15;
      uint64_t v25 = v28;
      id v44 = (void *)v26;
      LOBYTE(v26) = v62;
      *(void *)(v48 + 72) = v51;
      *(void *)(v48 + 80) = v52;
      OUTLINED_FUNCTION_21_30();
      swift_bridgeObjectRelease();
    }
  }
  else if (v28)
  {
    id v45 = v28;
    id v46 = v27;
    id v44 = v27;
    id v47 = v29;
    InCallControlButton.update(with:)((uint64_t)v45, (uint64_t)v46);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_1C37696D0;
    uint64_t v67 = (uint64_t)v14;
    id v68 = v25;
    id v69 = v66;
    id v70 = v65;
    char v71 = v26;
    id v72 = 0;
    id v73 = v27;
    id v74 = v29;
    outlined copy of InCallControlButtonConfiguration.Regular?(v14, v25, v66, v65, v26);
    String.init<A>(reflecting:)();
    unint64_t v54 = OUTLINED_FUNCTION_20_35();
    OUTLINED_FUNCTION_10_53(v54);
    id v55 = v0;
    uint64_t v56 = String.init<A>(reflecting:)();
    *(void *)(v53 + 96) = v25;
    *(void *)(v53 + 104) = v15;
    uint64_t v25 = 0;
    id v44 = (void *)v26;
    LOBYTE(v26) = v62;
    *(void *)(v53 + 72) = v56;
    *(void *)(v53 + 80) = v57;
    OUTLINED_FUNCTION_21_30();
    swift_bridgeObjectRelease();
    id v28 = 0;
  }
  InCallControlButton.hyphenateLabelText()();
  outlined consume of InCallControlButtonConfiguration.Regular?(v14, v25, v66, v65, v26);
  outlined consume of InCallControlButtonConfiguration.Flat?(v28, v44, v29);
}

id InCallControlButton.update(with:)(uint64_t *a1)
{
  unsigned int v4 = (void *)a1[2];
  unint64_t v3 = (void *)a1[3];
  if (*((unsigned char *)a1 + 32) == 1)
  {
    uint64_t v5 = OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView;
    uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView);
    if (v6)
    {
      unint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style);
      BOOL v8 = v7 > 6;
      uint64_t v9 = (1 << v7) & 0x46;
      BOOL v10 = v8 || v9 == 0;
      Swift::String v11 = (void *)a1[2];
      if (v10) {
        Swift::String v11 = (void *)a1[3];
      }
      id v12 = v11;
      outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v4, v3, 1);
      id v13 = v6;
      objc_msgSend(v13, sel_setEffect_, v12);
    }
    else
    {
      id v17 = v4;
      id v18 = v3;
    }
    uint64_t v19 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundVibrancyView);
    if (v19) {
      objc_msgSend(v19, sel_setEffect_, v3);
    }
    unint64_t v20 = *(void **)(v1 + v5);
    if (v20) {
      objc_msgSend(v20, sel_setHidden_, 0);
    }
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundFlatView), sel_setHidden_, 1);
  }
  else
  {
    id v14 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundFlatView);
    objc_msgSend(v14, sel_setBackgroundColor_, v4);
    objc_msgSend(v14, sel_setHidden_, 0);
    uint64_t v15 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundEffectView);
    if (v15)
    {
      id v16 = v15;
      objc_msgSend(v16, sel_setHidden_, 1);
      outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v4, v3, 0);
    }
    else
    {
      outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v4, v3, 0);
    }
  }
  unint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style);
  if (v21 > 6)
  {
    OUTLINED_FUNCTION_15_49();
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_17_38(v27);
    swift_bridgeObjectRelease();
    id result = (id)OUTLINED_FUNCTION_2_88();
    __break(1u);
    return result;
  }
  if (((1 << v21) & 0x4F) != 0)
  {
    uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
    if (!v22) {
      goto LABEL_26;
    }
    uint64_t v23 = *a1;
  }
  else
  {
    uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
    if (!v22) {
      goto LABEL_26;
    }
    uint64_t v23 = a1[1];
  }
  objc_msgSend(v22, sel_setTextColor_, v23);
LABEL_26:
  id result = *(id *)(v1 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_imageView);
  if (result)
  {
    uint64_t v25 = a1[1];
    return objc_msgSend(result, sel_setTintColor_, v25);
  }
  return result;
}

id InCallControlButton.update(with:)(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discBackgroundFlatView), sel_setBackgroundColor_);
  unint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style);
  if (v5 > 6)
  {
    _StringGuts.grow(_:)(70);
    v9._object = (void *)0x80000001C37A6110;
    v9._countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v9);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_17_38(v11);
    swift_bridgeObjectRelease();
    id result = (id)OUTLINED_FUNCTION_2_88();
    __break(1u);
  }
  else
  {
    if (((1 << v5) & 0x4F) != 0)
    {
      uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
      if (v6) {
        objc_msgSend(v6, sel_setTextColor_, a1);
      }
    }
    else
    {
      unint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
      if (v7) {
        objc_msgSend(v7, sel_setTextColor_, a2);
      }
    }
    id result = *(id *)(v2 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_imageView);
    if (result)
    {
      return objc_msgSend(result, sel_setTintColor_, a2);
    }
  }
  return result;
}

void *InCallControlButton.updateSymbol()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))(v20);
  id result = (void *)outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v20, (uint64_t)v21, &demangling cache variable for type metadata for SymbolImageDescription?);
  if (*((void *)&v21[0] + 1))
  {
    long long v22 = v21[0];
    long long v23 = v21[1];
    long long v24 = v21[2];
    long long v25 = v21[3];
    unsigned int v4 = objc_msgSend(v0, sel_isSelected);
    char v5 = BYTE1(v24);
    if (BYTE1(v24) == 1)
    {
      unsigned int v6 = v4;
      long long v26 = v22;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      BOOL v9 = v6 == 0;
      if (v6) {
        uint64_t v10 = 0x6C6C69662ELL;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v9) {
        Swift::String v11 = (void *)0xE000000000000000;
      }
      else {
        Swift::String v11 = (void *)0xE500000000000000;
      }
      *(void *)&long long v26 = v7;
      *((void *)&v26 + 1) = v8;
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v10;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = *((void *)&v26 + 1);
      uint64_t v14 = v26;
      uint64_t v15 = (void *)*((void *)&v23 + 1);
      id v16 = (id)*((void *)&v25 + 1);
      id v17 = *((id *)&v25 + 1);
      id v18 = v15;
    }
    else
    {
      id v17 = (id)*((void *)&v25 + 1);
      id v18 = (id)*((void *)&v23 + 1);
      uint64_t v13 = *((void *)&v22 + 1);
      uint64_t v14 = v22;
      outlined retain of SymbolImageDescription((uint64_t)&v22);
      id v16 = v17;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    *(void *)&long long v26 = v14;
    *((void *)&v26 + 1) = v13;
    uint64_t v27 = v23;
    id v28 = v18;
    char v29 = v24;
    char v30 = v5;
    uint64_t v31 = *((void *)&v24 + 1);
    char v32 = v25;
    id v33 = v16;
    id v19 = static UIImage.symbolImage(for:)((uint64_t)&v26);

    swift_bridgeObjectRelease();
    (*(void (**)(id))((*v2 & *v1) + 0x120))(v19);
    return outlined retain of SymbolImageDescription?(v20, (void (*)(void, void, void, void, void, void, void, void))outlined consume of SymbolImageDescription?);
  }
  return result;
}

void InCallControlButton.hyphenateLabelText()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
  if (!v1) {
    return;
  }
  id v23 = v1;
  if (objc_msgSend(v23, sel_lineBreakMode)) {
    goto LABEL_3;
  }
  uint64_t v2 = outlined bridged method (pb) of @objc UILabel.text.getter(v23);
  if (!v3)
  {
    objc_msgSend(v23, sel_setAttributedText_, 0);
LABEL_3:

    return;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Swift.AnyObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769620;
  uint64_t v7 = (void *)*MEMORY[0x1E4FB0738];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB0738];
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_paragraphStyle);
  *(void *)(inited + 40) = v8;
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  id v9 = v7;
  id v10 = v8;
  Dictionary.init(dictionaryLiteral:)();
  id v11 = objc_msgSend(v23, sel_textColor);
  if (v11)
  {
    Swift::String v12 = v11;
    id v13 = (id)*MEMORY[0x1E4FB0700];
    id v14 = v12;
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_16_35();

    swift_bridgeObjectRelease();
  }
  id v15 = objc_msgSend(v23, sel_font);
  if (v15)
  {
    id v16 = v15;
    id v17 = (id)*MEMORY[0x1E4FB06F8];
    id v18 = v16;
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_16_35();

    swift_bridgeObjectRelease();
  }
  specialized _dictionaryUpCast<A, B, C, D>(_:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  id v21 = objc_allocWithZone(MEMORY[0x1E4F28B10]);
  id v22 = @nonobjc NSAttributedString.init(string:attributes:)(v4, v5, v20);
  objc_msgSend(v23, sel_setAttributedText_, v22);
}

UIControlEvents __swiftcall InCallControlButton._controlEventsForActionTriggered()()
{
  return 64;
}

id InCallControlButton.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void InCallControlButton.init(frame:)()
{
}

id InCallControlButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t InCallControlButton.shape.getter()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style);
  if (v1 < 7) {
    return 0x1020001010101uLL >> (8 * v1);
  }
  OUTLINED_FUNCTION_15_49();
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_59();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_17_38(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_31();
  unint64_t result = OUTLINED_FUNCTION_2_88();
  __break(1u);
  return result;
}

unint64_t CNKInCallControlButtonStyle.shape.getter(unint64_t a1)
{
  if (a1 < 7) {
    return 0x1020001010101uLL >> (8 * a1);
  }
  OUTLINED_FUNCTION_15_49();
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_59();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_17_38(v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_31();
  unint64_t result = OUTLINED_FUNCTION_2_88();
  __break(1u);
  return result;
}

uint64_t protocol witness for Control.cnkContentAlpha.getter in conformance InCallControlButton()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t protocol witness for Control.cnkContentAlpha.setter in conformance InCallControlButton()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

void (*protocol witness for Control.cnkContentAlpha.modify in conformance InCallControlButton(void *a1))(void *a1)
{
  Swift::String v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A8))();
  return protocol witness for Control.cnkContentAlpha.modify in conformance BaseButton;
}

uint64_t InCallControlButton.presentingControl.getter()
{
  id v1 = v0;
  return OUTLINED_FUNCTION_23_0();
}

uint64_t protocol witness for ControlMenuPresenter.menuDataSource.getter in conformance InCallControlButton()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t protocol witness for ControlMenuPresenter.presentingControl.getter in conformance InCallControlButton()
{
  return InCallControlButton.presentingControl.getter();
}

UIContextMenuConfiguration_optional __swiftcall InCallControlButton.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  Swift::String v3 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1B0);
  uint64_t v4 = v2;
  if (v3())
  {
    uint64_t v6 = v5;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextMenuConfiguration);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 24) = v6;
    swift_unknownObjectWeakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 24) = &protocol witness table for InCallControlButton;
    swift_unknownObjectWeakInit();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v7;
    swift_retain();
    swift_retain();
    UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)();
    id v11 = v10;
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {

    id v11 = 0;
  }
  id v13 = v11;
  result.value.super.Class isa = v13;
  result.is_nil = v12;
  return result;
}

void InCallControlButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  uint64_t v11 = type metadata accessor for InCallControlButton();
  OUTLINED_FUNCTION_26_26(v11, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_);
  id v1 = objc_msgSend(self, sel_defaultCenter, v0, v11);
  uint64_t v2 = type metadata accessor for Notification();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  static Notification.contextMenuWillPresent(target:)(v0);
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  OUTLINED_FUNCTION_5_67(v10, sel_postNotification_);
}

uint64_t InCallControlButton.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = type metadata accessor for InCallControlButton();
  OUTLINED_FUNCTION_26_26(v14, sel_contextMenuInteraction_willEndForConfiguration_animator_);
  id v5 = objc_msgSend(self, sel_defaultCenter, v3, v14);
  uint64_t v6 = type metadata accessor for Notification();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_21();
  uint64_t v12 = v11 - v10;
  static Notification.contextMenuDidDismiss(target:)(v3);
  NSNotificationCenter.post(_:afterAnimatorCompletes:)(v12, a3);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
}

void @objc InCallControlButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  id v10 = a3;
  id v11 = a4;
  swift_unknownObjectRetain();
  id v12 = a1;
  a6(v10, v11, a5);

  swift_unknownObjectRelease();
}

UIPointerRegion_optional __swiftcall InCallControlButton.pointerInteraction(_:regionFor:defaultRegion:)(UIPointerInteraction _, UIPointerRegionRequest regionFor, UIPointerRegion defaultRegion)
{
  id v3 = [(objc_class *)_.super.isa view];
  if (v3)
  {
    id v5 = v3;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerRegion);
    objc_msgSend(v5, sel_bounds);
    uint64_t v6 = UIPointerRegion.init(rect:identifier:)();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (objc_class *)v6;
  result.value.super.Class isa = v7;
  result.is_nil = v4;
  return result;
}

UIPointerStyle_optional __swiftcall InCallControlButton.pointerInteraction(_:styleFor:)(UIPointerInteraction _, UIPointerRegion styleFor)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x1F4188790](v4 - 8);
  OUTLINED_FUNCTION_17_0();
  uint64_t v5 = type metadata accessor for UIPointerEffect();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  id v11 = (void *)(v10 - v9);
  id v12 = [(objc_class *)_.super.isa view];
  if (v12)
  {
    uint64_t v14 = v12;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D48]), sel_initWithView_, v12);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
    *id v11 = v15;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v11, *MEMORY[0x1E4FB0E70], v5);
    uint64_t v16 = type metadata accessor for UIPointerShape();
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v16);
    id v17 = v15;
    OUTLINED_FUNCTION_23_0();
    uint64_t v18 = UIPointerStyle.init(effect:shape:)();
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (objc_class *)v18;
  result.value.super.super.Class isa = v19;
  result.is_nil = v13;
  return result;
}

void UIControlState.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UIControlState()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UIControlState(int a1)
{
  UIControlState.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UIControlState()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

id InCallControlButtonConfiguration.Regular.contentColor.getter()
{
  return *v0;
}

void InCallControlButtonConfiguration.Regular.contentColor.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*InCallControlButtonConfiguration.Regular.contentColor.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id InCallControlButtonConfiguration.Regular.discContentColor.getter()
{
  return *(id *)(v0 + 8);
}

void InCallControlButtonConfiguration.Regular.discContentColor.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*InCallControlButtonConfiguration.Regular.discContentColor.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void *InCallControlButtonConfiguration.Regular.disc.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v1, *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
  return v1;
}

void InCallControlButtonConfiguration.Regular.disc.setter(uint64_t a1, uint64_t a2, char a3)
{
  outlined consume of InCallControlButtonConfiguration.DiscConfiguration(*(void **)(v3 + 16), *(void **)(v3 + 24), *(unsigned char *)(v3 + 32));
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(unsigned char *)(v3 + 32) = a3 & 1;
}

uint64_t (*InCallControlButtonConfiguration.Regular.disc.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void InCallControlButtonConfiguration.Flat.contentColor.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*InCallControlButtonConfiguration.Flat.contentColor.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void InCallControlButtonConfiguration.Flat.discContentColor.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*InCallControlButtonConfiguration.Flat.discContentColor.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void InCallControlButtonConfiguration.Flat.discBackgroundColor.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*InCallControlButtonConfiguration.Flat.discBackgroundColor.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t InCallControlButtonConfiguration.regular.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<DynamicTypeSize>.Content(v1, a1, (uint64_t *)&demangling cache variable for type metadata for InCallControlButtonConfiguration.Regular?);
}

uint64_t InCallControlButtonConfiguration.regular.setter(uint64_t a1)
{
  return outlined assign with take of InCallControlButtonConfiguration.Regular?(a1, v1);
}

uint64_t (*InCallControlButtonConfiguration.regular.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void *InCallControlButtonConfiguration.flat.getter()
{
  uint64_t v1 = *(void **)(v0 + 40);
  outlined copy of InCallControlButtonConfiguration.Flat?(v1, *(void **)(v0 + 48), *(void **)(v0 + 56));
  return v1;
}

void InCallControlButtonConfiguration.flat.setter(void *a1, void *a2, void *a3)
{
  outlined consume of InCallControlButtonConfiguration.Flat?(v3[5], v3[6], v3[7]);
  v3[5] = a1;
  v3[6] = a2;
  v3[7] = a3;
}

uint64_t (*InCallControlButtonConfiguration.flat.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double InCallControlButtonConfiguration.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void outlined bridged method (mbnn) of @objc NSObject.accessibilityValue.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setAccessibilityValue_, v4);
}

void outlined copy of SymbolImageDescription?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a2)
  {
    id v8 = a8;
    swift_bridgeObjectRetain();
    id v9 = a4;
  }
}

void outlined consume of SymbolImageDescription?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

void *outlined retain of SymbolImageDescription?(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t type metadata accessor for InCallControlButton()
{
  return self;
}

uint64_t sub_1C32EAD60()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C32EAD98()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void outlined consume of InCallControlButtonConfiguration.DiscConfiguration(void *a1, void *a2, char a3)
{
  if (a3)
  {
  }
}

uint64_t outlined assign with take of InCallControlButtonConfiguration.Regular?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InCallControlButtonConfiguration.Regular?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined consume of InCallControlButtonConfiguration.Flat?(void *a1, void *a2, void *a3)
{
  if (a1)
  {
  }
}

uint64_t method lookup function for InCallControlButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlButton);
}

uint64_t dispatch thunk of InCallControlButton.callbackCancellable.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of InCallControlButton.callbackCancellable.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of InCallControlButton.callbackCancellable.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of InCallControlButton.image.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of InCallControlButton.image.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of InCallControlButton.image.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of InCallControlButton.symbolDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of InCallControlButton.symbolDescription.setter(_OWORD *a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x158);
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  return v2(v6);
}

uint64_t dispatch thunk of InCallControlButton.symbolDescription.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of InCallControlButton.text.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of InCallControlButton.text.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of InCallControlButton.text.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of InCallControlButton.colorConfiguration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of InCallControlButton.colorConfiguration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of InCallControlButton.colorConfiguration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of InCallControlButton.cnkContentAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of InCallControlButton.cnkContentAlpha.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of InCallControlButton.cnkContentAlpha.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of InCallControlButton.menuDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of InCallControlButton.menuDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of InCallControlButton.menuDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of InCallControlButton.__allocating_init(style:image:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 456))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t dispatch thunk of InCallControlButton.updateSymbolDescribing(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

void destroy for InCallControlButtonConfiguration(uint64_t a1)
{
  if (*(void *)a1)
  {

    outlined consume of InCallControlButtonConfiguration.DiscConfiguration(*(void **)(a1 + 16), *(void **)(a1 + 24), *(unsigned char *)(a1 + 32));
  }
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {

    long long v3 = *(void **)(a1 + 56);
  }
}

uint64_t initializeWithCopy for InCallControlButtonConfiguration(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  if (*(void *)a2)
  {
    uint64_t v6 = *(void **)(a2 + 8);
    uint64_t v5 = *(void **)(a2 + 16);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void **)(a2 + 24);
    char v8 = *(unsigned char *)(a2 + 32);
    id v9 = v4;
    id v10 = v6;
    outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v5, v7, v8);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v8;
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  id v12 = *(void **)(a2 + 40);
  if (v12)
  {
    uint64_t v14 = *(void **)(a2 + 48);
    Swift::Bool v13 = *(void **)(a2 + 56);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v13;
    id v15 = v12;
    id v16 = v14;
    id v17 = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  return a1;
}

uint64_t assignWithCopy for InCallControlButtonConfiguration(uint64_t a1, long long *a2)
{
  long long v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1)
  {
    if (v5)
    {
      *(void *)a1 = v5;
      id v6 = v5;

      uint64_t v7 = (void *)*((void *)a2 + 1);
      char v8 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v7;
      id v9 = v7;

      id v10 = (void *)*((void *)a2 + 2);
      long long v11 = (void *)*((void *)a2 + 3);
      char v12 = *((unsigned char *)a2 + 32);
      outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v10, v11, v12);
      Swift::Bool v13 = *(void **)(a1 + 16);
      uint64_t v14 = *(void **)(a1 + 24);
      char v15 = *(unsigned char *)(a1 + 32);
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(unsigned char *)(a1 + 32) = v12;
      outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v13, v14, v15);
    }
    else
    {
      outlined destroy of InCallControlButtonConfiguration.Regular(a1);
      char v22 = *((unsigned char *)a2 + 32);
      long long v23 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v23;
      *(unsigned char *)(a1 + 32) = v22;
    }
  }
  else if (v5)
  {
    *(void *)a1 = v5;
    id v16 = (void *)*((void *)a2 + 1);
    *(void *)(a1 + 8) = v16;
    id v17 = (void *)*((void *)a2 + 2);
    uint64_t v18 = (void *)*((void *)a2 + 3);
    char v19 = *((unsigned char *)a2 + 32);
    id v20 = v5;
    id v21 = v16;
    outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v17, v18, v19);
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = v18;
    *(unsigned char *)(a1 + 32) = v19;
  }
  else
  {
    long long v24 = *a2;
    long long v25 = a2[1];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)a1 = v24;
    *(_OWORD *)(a1 + 16) = v25;
  }
  long long v26 = (_OWORD *)(a1 + 40);
  uint64_t v27 = *(void **)(a1 + 40);
  char v29 = (long long *)((char *)a2 + 40);
  id v28 = (void *)*((void *)a2 + 5);
  if (v27)
  {
    if (v28)
    {
      *(void *)(a1 + 40) = v28;
      id v30 = v28;

      uint64_t v31 = (void *)*((void *)a2 + 6);
      char v32 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v31;
      id v33 = v31;

      uint64_t v34 = (void *)*((void *)a2 + 7);
      uint64_t v35 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v34;
      id v36 = v34;
    }
    else
    {
      outlined destroy of InCallControlButtonConfiguration.Flat(a1 + 40);
      uint64_t v42 = *((void *)a2 + 7);
      *long long v26 = *v29;
      *(void *)(a1 + 56) = v42;
    }
  }
  else if (v28)
  {
    *(void *)(a1 + 40) = v28;
    uint64_t v37 = (void *)*((void *)a2 + 6);
    *(void *)(a1 + 48) = v37;
    uint64_t v38 = (void *)*((void *)a2 + 7);
    *(void *)(a1 + 56) = v38;
    id v39 = v28;
    id v40 = v37;
    id v41 = v38;
  }
  else
  {
    long long v43 = *v29;
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *long long v26 = v43;
  }
  return a1;
}

uint64_t outlined destroy of InCallControlButtonConfiguration.Regular(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of InCallControlButtonConfiguration.Flat(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for InCallControlButtonConfiguration(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(void *)a2)
    {
      *(void *)a1 = *(void *)a2;

      uint64_t v5 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);

      char v6 = *(unsigned char *)(a2 + 32);
      uint64_t v7 = *(void **)(a1 + 16);
      char v8 = *(void **)(a1 + 24);
      char v9 = *(unsigned char *)(a1 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 32) = v6;
      outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v7, v8, v9);
      goto LABEL_6;
    }
    outlined destroy of InCallControlButtonConfiguration.Regular(a1);
  }
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
LABEL_6:
  long long v11 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a2 + 40);
  if (!v11)
  {
LABEL_10:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    return a1;
  }
  if (!v12)
  {
    outlined destroy of InCallControlButtonConfiguration.Flat(a1 + 40);
    goto LABEL_10;
  }
  *(void *)(a1 + 40) = v12;

  Swift::Bool v13 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  uint64_t v14 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for InCallControlButtonConfiguration(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallControlButtonConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)double result = a2;
    }
  }
  return result;
}

void type metadata accessor for InCallControlButtonConfiguration()
{
}

void destroy for InCallControlButtonConfiguration.DiscConfiguration(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for InCallControlButtonConfiguration.DiscConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  long long v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of InCallControlButtonConfiguration.DiscConfiguration(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InCallControlButtonConfiguration.DiscConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  long long v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of InCallControlButtonConfiguration.DiscConfiguration(*(void **)a2, v4, v5);
  char v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for InCallControlButtonConfiguration.DiscConfiguration(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  long long v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InCallControlButtonConfiguration.DiscConfiguration(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallControlButtonConfiguration.DiscConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for InCallControlButtonConfiguration.DiscConfiguration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for InCallControlButtonConfiguration.DiscConfiguration(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

void type metadata accessor for InCallControlButtonConfiguration.DiscConfiguration()
{
}

void destroy for InCallControlButtonConfiguration.Regular(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  unsigned int v3 = *(void **)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v2, v3, v4);
}

uint64_t initializeWithCopy for InCallControlButtonConfiguration.Regular(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  char v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  char v5 = *(void **)(a2 + 16);
  char v6 = *(void **)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  id v8 = v3;
  id v9 = v4;
  outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for InCallControlButtonConfiguration.Regular(uint64_t a1, void **a2)
{
  int v2 = a2;
  char v4 = *a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *a2;
  id v6 = v4;

  char v7 = v2[1];
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  long long v10 = v2[2];
  long long v11 = v2[3];
  LOBYTE(v2) = *((unsigned char *)v2 + 32);
  outlined copy of InCallControlButtonConfiguration.DiscConfiguration(v10, v11, (char)v2);
  uint64_t v12 = *(void **)(a1 + 16);
  Swift::Bool v13 = *(void **)(a1 + 24);
  char v14 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = (_BYTE)v2;
  outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for InCallControlButtonConfiguration.Regular(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  char v5 = *(unsigned char *)(a2 + 32);
  id v6 = *(void **)(a1 + 16);
  char v7 = *(void **)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of InCallControlButtonConfiguration.DiscConfiguration(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InCallControlButtonConfiguration.Regular(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallControlButtonConfiguration.Regular(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for InCallControlButtonConfiguration.Regular()
{
}

void *initializeBufferWithCopyOfBuffer for InCallControlButtonConfiguration.Flat(void *a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  char v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  char v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void destroy for InCallControlButtonConfiguration.Flat(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for InCallControlButtonConfiguration.Flat(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  long long v10 = *(void **)(a2 + 16);
  long long v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  return a1;
}

uint64_t assignWithTake for InCallControlButtonConfiguration.Flat(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  char v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

void type metadata accessor for InCallControlButtonConfiguration.Flat()
{
}

uint64_t outlined release of (SymbolImageDescription?, SymbolImageDescription?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  char v5 = *(void **)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  id v9 = *(void **)(a1 + 120);
  outlined consume of SymbolImageDescription?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void **)(a1 + 56));
  outlined consume of SymbolImageDescription?(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

void outlined consume of InCallControlButtonConfiguration.Regular?(void *a1, void *a2, void *a3, void *a4, char a5)
{
  if (a1)
  {

    outlined consume of InCallControlButtonConfiguration.DiscConfiguration(a3, a4, a5 & 1);
  }
}

uint64_t sub_1C32EC01C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C32EC054()
{
  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InCallControlButton.updateImage()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in InCallControlButton.updateImage()(a1, v4, v5, v7, v6);
}

void RadarReporting.additionalDirections.getter()
{
}

const char *RadarReporter.URLSchema.scheme.unsafeMutableAddressor()
{
  return "tap-to-radar";
}

uint64_t static RadarReporter.URLSchema.scheme.getter()
{
  return 0x722D6F742D706174;
}

const char *RadarReporter.URLSchema.Argument.title.unsafeMutableAddressor()
{
  return "Title";
}

uint64_t static RadarReporter.URLSchema.Argument.title.getter()
{
  return 0x656C746954;
}

const char *RadarReporter.URLSchema.Argument.description.unsafeMutableAddressor()
{
  return "Description";
}

void static RadarReporter.URLSchema.Argument.description.getter()
{
}

const char *RadarReporter.URLSchema.Argument.classification.unsafeMutableAddressor()
{
  return "Classification";
}

uint64_t static RadarReporter.URLSchema.Argument.classification.getter()
{
  return 0x6966697373616C43;
}

const char *RadarReporter.URLSchema.Argument.bugReproducibility.unsafeMutableAddressor()
{
  return "Reproducible";
}

uint64_t static RadarReporter.URLSchema.Argument.bugReproducibility.getter()
{
  return 0x6375646F72706552;
}

const char *RadarReporter.URLSchema.Argument.componentID.unsafeMutableAddressor()
{
  return "ComponentID";
}

void static RadarReporter.URLSchema.Argument.componentID.getter()
{
}

const char *RadarReporter.URLSchema.Argument.componentName.unsafeMutableAddressor()
{
  return "ComponentName";
}

uint64_t static RadarReporter.URLSchema.Argument.componentName.getter()
{
  return 0x6E656E6F706D6F43;
}

void *RadarReporter.URLSchema.Argument.componentVersion.unsafeMutableAddressor()
{
  return &static RadarReporter.URLSchema.Argument.componentVersion;
}

unint64_t static RadarReporter.URLSchema.Argument.componentVersion.getter()
{
  return OUTLINED_FUNCTION_0_33(16);
}

const char *RadarReporter.URLSchema.Argument.attachments.unsafeMutableAddressor()
{
  return "Attachments";
}

void static RadarReporter.URLSchema.Argument.attachments.getter()
{
}

const char *RadarReporter.Strings.defaultTitle.unsafeMutableAddressor()
{
  return "[Internal]";
}

uint64_t static RadarReporter.Strings.defaultTitle.getter()
{
  return 0x616E7265746E495BLL;
}

uint64_t static RadarReporter.Strings.description.getter()
{
  _StringGuts.grow(_:)(307);
  v0._object = (void *)0x80000001C37A6580;
  v0._countAndFlagsBits = 0xD000000000000128;
  String.append(_:)(v0);
  uint64_t v1 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v1);
  UUID.init()();
  uint64_t v2 = UUID.uuidString.getter();
  uint64_t v4 = v3;
  uint64_t v5 = OUTLINED_FUNCTION_23_0();
  v6(v5);
  v7._countAndFlagsBits = v2;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x706172676D656D2ELL;
  v8._object = (void *)0xE900000000000068;
  String.append(_:)(v8);
  return 0;
}

void *RadarReporter.Strings.seperator.unsafeMutableAddressor()
{
  return &static RadarReporter.Strings.seperator;
}

unint64_t static RadarReporter.Strings.seperator.getter()
{
  return OUTLINED_FUNCTION_0_33(45);
}

void *RadarReporter.Action.new.unsafeMutableAddressor()
{
  return &static RadarReporter.Action.new;
}

uint64_t static RadarReporter.Action.new.getter()
{
  return 7824750;
}

BOOL RadarReporter.Reproducibility.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RadarReporter.Reproducibility.init(rawValue:);
  return RadarReporter.Reproducibility.init(rawValue:)(a1, v1);
}

uint64_t RadarReporter.Reproducibility.rawValue.getter()
{
  return 0x6C70704120746F4ELL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RadarReporter.Reproducibility@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RadarReporter.Reproducibility.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RadarReporter.Reproducibility(char *a1@<X8>)
{
  a1[15] = -18;
}

BOOL RadarReporter.Classification.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RadarReporter.Classification.init(rawValue:);
  return RadarReporter.Reproducibility.init(rawValue:)(a1, v1);
}

void RadarReporter.Classification.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RadarReporter.Classification@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RadarReporter.Classification.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RadarReporter.Classification(void *a1@<X8>)
{
  *a1 = 0x2073756F69726553;
  a1[1] = 0xEB00000000677542;
}

uint64_t RadarReporter.Component.id.getter()
{
  return 0x34313734383031;
}

uint64_t RadarReporter.Component.version.getter()
{
  return 7105633;
}

BOOL RadarReporter.Component.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RadarReporter.Component.init(rawValue:);
  return RadarReporter.Reproducibility.init(rawValue:)(a1, v1);
}

BOOL RadarReporter.Reproducibility.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

unint64_t RadarReporter.Component.rawValue.getter()
{
  return OUTLINED_FUNCTION_0_33(27);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RadarReporter.Component@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RadarReporter.Component.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RadarReporter.Component@<X0>(void *a1@<X8>)
{
  unint64_t result = RadarReporter.Component.rawValue.getter();
  *a1 = 0xD00000000000001BLL;
  a1[1] = v3;
  return result;
}

uint64_t RadarReporter.Info.description.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t RadarReporter.Info.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*RadarReporter.Info.description.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RadarReporter.Info.shortDescription.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t RadarReporter.Info.shortDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*RadarReporter.Info.shortDescription.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for RadarReporting.additionalDirections.getter in conformance RadarReporter.Info()
{
  return specialized ParticipantsViewController.participantsViewControllerDelegate.getter();
}

uint64_t RadarReporter.reportingEnabled.getter()
{
  type metadata accessor for Defaults();
  swift_allocObject();
  Defaults.init()();
  OUTLINED_FUNCTION_2_10();
  char v1 = (*(uint64_t (**)(void))(v0 + 1064))();
  swift_release();
  return v1 & 1;
}

uint64_t RadarReporter.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RadarReporter.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*RadarReporter.title.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RadarReporter.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RadarReporter.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*RadarReporter.description.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*RadarReporter.reproducibility.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*RadarReporter.component.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*RadarReporter.classification.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t RadarReporter.requestUserPermission.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t RadarReporter.init(title:description:reproducibility:component:classification:requestUserPermission:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  *(unsigned char *)(a7 + 48) = 0;
  return result;
}

uint64_t RadarReporter.addSeperatorIfNeeded()()
{
  if ((*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v2 = *(void **)(v0 + 24);
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = v1;
    v3._object = v2;
    String.append(_:)(v3);
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)(v0 + 16) = 0xD00000000000002FLL;
    *(void *)(v0 + 24) = 0x80000001C37A6750;
    *(unsigned char *)(v0 + 48) = 1;
  }
  return result;
}

uint64_t RadarReporter.add(info:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v3 = OUTLINED_FUNCTION_3_24();
  v5._countAndFlagsBits = v4(v3);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  RadarReporter.addSeperatorIfNeeded()();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v7;
  v8._countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + 16) = v17;
  *(void *)(v1 + 24) = v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v12 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v13(v12);
  if (v15)
  {
    String.append(_:)(*(Swift::String *)&result);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 10;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t RadarReporter.requestInternalUserToReportToRadar()()
{
  OUTLINED_FUNCTION_17_2();
  v1[4] = v0;
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v3;
  v1[7] = v2;
  return MEMORY[0x1F4188298](RadarReporter.requestInternalUserToReportToRadar(), v3, v2);
}

{
  void *v0;
  id v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t (*v8)(void);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;

  uint64_t v1 = objc_msgSend(self, sel_sharedInstance);
  if (v1 && (uint64_t v2 = v1, v3 = objc_msgSend(v1, sel_isInternalInstall), v2, (v3 & 1) != 0))
  {
    type metadata accessor for Defaults();
    swift_allocObject();
    Defaults.init()();
    OUTLINED_FUNCTION_2_10();
    uint64_t v5 = (*(uint64_t (**)(void))(v4 + 1064))();
    swift_release();
    if (v5)
    {
      Swift::Bool v13 = (uint64_t (*)(void))(*(void *)(v0[4] + 32) + **(int **)(v0[4] + 32));
      Swift::String v6 = (void *)swift_task_alloc();
      v0[8] = v6;
      *Swift::String v6 = v0;
      v6[1] = RadarReporter.requestInternalUserToReportToRadar();
      return v13();
    }
    swift_release();
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationKit);
    uint64_t v10 = Logger.logObject.getter();
    Swift::String v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_15_3(&dword_1C2F90000, v10, v12, "RadarReporter: Reporting is disabled, can be enabled in internal settings ");
      OUTLINED_FUNCTION_5_39();
    }
  }
  else
  {
    swift_release();
  }
  Swift::String v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 80);
  swift_release();
  if (v1 == 1)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationKit);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_15_3(&dword_1C2F90000, v3, v5, "RadarReporter: user gave permission to create radar");
      OUTLINED_FUNCTION_5_39();
    }

    RadarReporter.createRadar()();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    Swift::String v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationKit);
    uint64_t v7 = Logger.logObject.getter();
    Swift::String v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_15_3(&dword_1C2F90000, v7, v9, "RadarReporter: user declined to create a radar");
      OUTLINED_FUNCTION_5_39();
    }
  }
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  swift_release();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationKit);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  Swift::String v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  Swift::String v8 = (void *)v0[9];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    Swift::String v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[2] = v8;
    Swift::String v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v5, v6, "RadarReporter: error: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v10, -1, -1);
    OUTLINED_FUNCTION_5_39();
  }
  else
  {
  }
  char v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t RadarReporter.requestInternalUserToReportToRadar()(char a1)
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_2_2();
  void *v7 = v6;
  *(void *)(v5 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = *(void *)(v5 + 48);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v10 = RadarReporter.requestInternalUserToReportToRadar();
  }
  else
  {
    *(unsigned char *)(v5 + 80) = a1 & 1;
    uint64_t v8 = *(void *)(v5 + 48);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v10 = RadarReporter.requestInternalUserToReportToRadar();
  }
  return MEMORY[0x1F4188298](v10, v8, v9);
}

uint64_t RadarReporter.createRadar()()
{
  uint64_t v1 = type metadata accessor for URLComponents();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  RadarReporter.queryItems()();
  URLComponents.queryItems.setter();
  MEMORY[0x1C876E840](7824750, 0xE300000000000000);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v48 = v10;
  Swift::String v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.url.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v5) == 1)
  {
    outlined destroy of URL?((uint64_t)v11);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationKit);
    Swift::Bool v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v51 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v47 = v0;
      swift_beginAccess();
      lazy protocol witness table accessor for type URLComponents and conformance URLComponents((unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents, MEMORY[0x1F418AF68]);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v13, v14, "RadarReporter: Failed to create url for radar using components %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v16, -1, -1);
      MEMORY[0x1C87760E0](v15, -1, -1);
    }

    MEMORY[0x1F4188790](v19);
    id v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    URL.init(string:)();
    RadarReporter.open(url:)((uint64_t)v21);
    outlined destroy of URL?((uint64_t)v21);
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    uint64_t v47 = v0;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v11, v5);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v45 = v2;
    uint64_t v46 = v1;
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationKit);
    long long v43 = &v40;
    __n128 v25 = MEMORY[0x1F4188790](v24);
    long long v26 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v44 = *(void (**)(char *, char *, uint64_t, __n128))(v6 + 16);
    v44(v26, v8, v5, v25);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_t v42 = v27;
      char v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v50[0] = v41;
      id v40 = v29;
      *(_DWORD *)char v29 = 136315138;
      lazy protocol witness table accessor for type URLComponents and conformance URLComponents((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1F418B820]);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v32 = *(void (**)(char *, uint64_t))(v6 + 8);
      v32(v26, v5);
      uint64_t v27 = v42;
      os_log_type_t v33 = v28;
      uint64_t v34 = v40;
      _os_log_impl(&dword_1C2F90000, v42, v33, "RadarReporter: URL: %s", v40, 0xCu);
      uint64_t v35 = v41;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v35, -1, -1);
      MEMORY[0x1C87760E0](v34, -1, -1);
    }
    else
    {
      char v32 = *(void (**)(char *, uint64_t))(v6 + 8);
      v32(v26, v5);
    }

    __n128 v37 = MEMORY[0x1F4188790](v36);
    id v39 = (char *)&v40 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    v44(v39, v8, v5, v37);
    __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v5);
    RadarReporter.open(url:)((uint64_t)v39);
    outlined destroy of URL?((uint64_t)v39);
    v32(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v4, v46);
  }
}

uint64_t RadarReporter.queryItems()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
  type metadata accessor for URLQueryItem();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C3775280;
  String.append(_:)(*v0);
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  return v1;
}

void RadarReporter.open(url:)(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_defaultWorkspace);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v4 - 8);
    uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of URL?(a1, (uint64_t)v6);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v9 = 0;
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
    {
      URL._bridgeToObjectiveC()(v8);
      uint64_t v9 = v10;
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
    uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
    outlined bridged method (mnbnn) of @objc LSApplicationWorkspace.openSensitiveURL(_:withOptions:)((uint64_t)v9, v11, v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = &async function pointer to implicit closure #1 in static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:);
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t implicit closure #1 in static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:)()
{
  OUTLINED_FUNCTION_17_2();
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = implicit closure #1 in static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:);
  return static RadarReporter.showAlert()();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  id v2 = *(unsigned __int8 *)(v0 + 48);
  return v1(v2);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  return v0(0);
}

uint64_t implicit closure #1 in static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:)(char a1)
{
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_2_2();
  uint64_t *v5 = v4;
  uint64_t *v5 = *v2;
  *(void *)(v4 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
    uint64_t v9 = implicit closure #1 in static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:);
  }
  else
  {
    *(unsigned char *)(v4 + 48) = a1 & 1;
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v10;
    uint64_t v9 = implicit closure #1 in static RadarReporter.createRadarReporterUsingAlert(title:description:reproducibility:component:classification:);
  }
  return MEMORY[0x1F4188298](v9, v6, v8);
}

uint64_t static RadarReporter.showAlert()()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[4] = v2;
  v0[5] = v1;
  return MEMORY[0x1F4188298](static RadarReporter.showAlert(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 48) = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = static RadarReporter.showAlert();
  return MEMORY[0x1F4188160](v0 + 72);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  uint64_t *v5 = v4;
  v3[8] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[4];
    uint64_t v7 = v3[5];
    uint64_t v8 = static RadarReporter.showAlert();
  }
  else
  {
    swift_release();
    uint64_t v6 = v3[4];
    uint64_t v7 = v3[5];
    uint64_t v8 = static RadarReporter.showAlert();
  }
  return MEMORY[0x1F4188298](v8, v6, v7);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  return v0(0);
}

void closure #1 in static RadarReporter.showAlert()(uint64_t a1)
{
  uint64_t v46 = a1;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v45 = *(void *)(v42 + 64);
  MEMORY[0x1F4188790](v47);
  long long v43 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v3 = self;
  id v4 = objc_msgSend(v3, sel_conversationKit);
  v49._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001C37A66B0;
  v5._countAndFlagsBits = 0xD000000000000019;
  v6.value._countAndFlagsBits = 0x61737265766E6F43;
  v6.value._object = (void *)0xEF74694B6E6F6974;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v49._countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v49);

  id v41 = v3;
  id v9 = objc_msgSend(v3, sel_conversationKit);
  v10._countAndFlagsBits = 0xD00000000000001BLL;
  v50._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C37A66D0;
  v11.value._countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v50._countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v50);

  id v44 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v8._countAndFlagsBits, (uint64_t)v8._object, v13._countAndFlagsBits, (uint64_t)v13._object, 1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v14 = objc_msgSend(v3, sel_conversationKit);
  v15._countAndFlagsBits = 0xD00000000000001ALL;
  v51._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001C37A66F0;
  v16.value._countAndFlagsBits = 0x61737265766E6F43;
  v16.value._object = (void *)0xEF74694B6E6F6974;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v51._countAndFlagsBits = 0;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v51);

  uint64_t v19 = v42;
  uint64_t v20 = v43;
  id v40 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  uint64_t v21 = v47;
  v40(v43, a1, v47);
  uint64_t v22 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  v45 += v23;
  v39[1] = v22 | 7;
  uint64_t v24 = swift_allocObject();
  __n128 v25 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v25(v24 + v23, v20, v21);
  id v26 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v18._countAndFlagsBits, (uint64_t)v18._object, 0, (uint64_t)partial apply for closure #1 in closure #1 in static RadarReporter.showAlert(), v24);
  id v27 = objc_msgSend(v41, sel_conversationKit);
  v52._object = (void *)0xE000000000000000;
  v28._countAndFlagsBits = 0x4C45434E4143;
  v28._object = (void *)0xE600000000000000;
  v29.value._countAndFlagsBits = 0x61737265766E6F43;
  v29.value._object = (void *)0xEF74694B6E6F6974;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v52._countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v52);

  uint64_t v32 = v47;
  v40(v20, v46, v47);
  uint64_t v33 = v32;
  uint64_t v34 = swift_allocObject();
  v25(v34 + v23, v20, v33);
  id v35 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v31._countAndFlagsBits, (uint64_t)v31._object, 1, (uint64_t)partial apply for closure #2 in closure #1 in static RadarReporter.showAlert(), v34);
  id v36 = v44;
  objc_msgSend(v44, sel_addAction_, v26);
  objc_msgSend(v36, sel_addAction_, v35);
  UIAlertController.show()();
  if (v37)
  {
    uint64_t v48 = v37;
    id v38 = v37;
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
  }
}

uint64_t closure #1 in closure #1 in static RadarReporter.showAlert()()
{
  return CheckedContinuation.resume(returning:)();
}

unint64_t lazy protocol witness table accessor for type RadarReporter.Reproducibility and conformance RadarReporter.Reproducibility()
{
  unint64_t result = lazy protocol witness table cache variable for type RadarReporter.Reproducibility and conformance RadarReporter.Reproducibility;
  if (!lazy protocol witness table cache variable for type RadarReporter.Reproducibility and conformance RadarReporter.Reproducibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadarReporter.Reproducibility and conformance RadarReporter.Reproducibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RadarReporter.Classification and conformance RadarReporter.Classification()
{
  unint64_t result = lazy protocol witness table cache variable for type RadarReporter.Classification and conformance RadarReporter.Classification;
  if (!lazy protocol witness table cache variable for type RadarReporter.Classification and conformance RadarReporter.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadarReporter.Classification and conformance RadarReporter.Classification);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RadarReporter.Component and conformance RadarReporter.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type RadarReporter.Component and conformance RadarReporter.Component;
  if (!lazy protocol witness table cache variable for type RadarReporter.Component and conformance RadarReporter.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadarReporter.Component and conformance RadarReporter.Component);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for RadarReporter.Info(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RadarReporter.Info and conformance RadarReporter.Info();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RadarReporter.Info and conformance RadarReporter.Info()
{
  unint64_t result = lazy protocol witness table cache variable for type RadarReporter.Info and conformance RadarReporter.Info;
  if (!lazy protocol witness table cache variable for type RadarReporter.Info and conformance RadarReporter.Info)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadarReporter.Info and conformance RadarReporter.Info);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadarReporter.Info and conformance RadarReporter.Info;
  if (!lazy protocol witness table cache variable for type RadarReporter.Info and conformance RadarReporter.Info)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadarReporter.Info and conformance RadarReporter.Info);
  }
  return result;
}

uint64_t dispatch thunk of RadarReporting.shortDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of RadarReporting.additionalDirections.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for RadarReporter()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for RadarReporter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RadarReporter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for RadarReporter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

void type metadata accessor for RadarReporter()
{
}

void type metadata accessor for RadarReporter.URLSchema()
{
}

void type metadata accessor for RadarReporter.URLSchema.Argument()
{
}

void type metadata accessor for RadarReporter.Strings()
{
}

void type metadata accessor for RadarReporter.Action()
{
}

void type metadata accessor for RadarReporter.Reproducibility()
{
}

void type metadata accessor for RadarReporter.Classification()
{
}

unsigned char *storeEnumTagSinglePayload for RadarReporter.Reproducibility(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C32EEDFCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for RadarReporter.Component()
{
}

void *initializeWithCopy for RadarReporter.Info(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RadarReporter.Info(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RadarReporter.Info(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for RadarReporter.Info()
{
}

uint64_t partial apply for closure #1 in closure #1 in static RadarReporter.showAlert()()
{
  return partial apply for closure #1 in closure #1 in static RadarReporter.showAlert()();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  return closure #1 in closure #1 in static RadarReporter.showAlert()();
}

uint64_t objectdestroyTm_8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  OUTLINED_FUNCTION_23_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in static RadarReporter.showAlert()()
{
  return partial apply for closure #1 in closure #1 in static RadarReporter.showAlert()();
}

uint64_t lazy protocol witness table accessor for type URLComponents and conformance URLComponents(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id outlined bridged method (mnbnn) of @objc LSApplicationWorkspace.openSensitiveURL(_:withOptions:)(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(a3, sel_openSensitiveURL_withOptions_, a1, isa);

  return v6;
}

uint64_t key path getter for SystemApertureContainerView.content : SystemApertureContainerView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for SystemApertureContainerView.content : SystemApertureContainerView(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60);
  id v5 = *(id *)a1;
  return v4(v2, v3);
}

id SystemApertureContainerView.content.didset(void *a1)
{
  if (a1) {
    objc_msgSend(a1, sel_removeFromSuperview);
  }
  id v2 = &v1[OBJC_IVAR____TtC15ConversationKit27SystemApertureContainerView_content];
  swift_beginAccess();
  if (*(void *)v2) {
    objc_msgSend(v1, sel_addSubview_);
  }
  return objc_msgSend(v1, sel_setNeedsLayout);
}

id SystemApertureContainerView.content.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit27SystemApertureContainerView_content);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = *v1;
  return v2;
}

void SystemApertureContainerView.content.setter(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC15ConversationKit27SystemApertureContainerView_content;
  swift_beginAccess();
  id v6 = *(void **)v5;
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  id v7 = a1;
  SystemApertureContainerView.content.didset(v6);
}

void (*SystemApertureContainerView.content.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 5) = v1;
  uint64_t v4 = (long long *)(v1 + OBJC_IVAR____TtC15ConversationKit27SystemApertureContainerView_content);
  swift_beginAccess();
  long long v5 = *v4;
  *(_OWORD *)(v3 + 24) = *v4;
  id v6 = (id)v5;
  return SystemApertureContainerView.content.modify;
}

void SystemApertureContainerView.content.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    id v6 = v3;
    SystemApertureContainerView.content.setter(v3, v5);
  }
  else
  {
    SystemApertureContainerView.content.setter(*(void **)(*(void *)a1 + 24), v5);
  }
  free(v2);
}

id SystemApertureContainerView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id SystemApertureContainerView.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit27SystemApertureContainerView_content];
  uint64_t v2 = (objc_class *)type metadata accessor for SystemApertureContainerView();
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
}

uint64_t type metadata accessor for SystemApertureContainerView()
{
  return self;
}

id SystemApertureContainerView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureContainerView.init(coder:)()
{
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit27SystemApertureContainerView_content];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void SystemApertureContainerView.preferredLayoutMargins.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 88))();
  if (v3)
  {
    uint64_t v5 = (void *)v3;
    uint64_t v6 = v4;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v13, ObjectType, v6);
    long long v11 = v13[1];
    long long v12 = v13[0];
    char v8 = v14;

    long long v10 = v11;
    long long v9 = v12;
  }
  else
  {
    long long v9 = 0uLL;
    char v8 = 2;
    long long v10 = 0uLL;
  }
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v8;
}

Swift::Void __swiftcall SystemApertureContainerView.layoutSubviews()()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SystemApertureContainerView();
  objc_msgSendSuper2(&v4, sel_layoutSubviews);
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 88))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v3, sel_setFrame_);
  }
}

CGSize __swiftcall SystemApertureContainerView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  OUTLINED_FUNCTION_0_20();
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(v4 + 88))();
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend(v5, sel_sizeThatFits_, width, height);
    double height = v7;
    double width = v8;
  }
  else
  {
    v12.receiver = v1;
    v12.super_class = (Class)type metadata accessor for SystemApertureContainerView();
    objc_msgSendSuper2(&v12, sel_sizeThatFits_, width, height);
    OUTLINED_FUNCTION_2_89();
  }
  double v9 = height;
  double v10 = width;
  result.double height = v10;
  result.double width = v9;
  return result;
}

double SystemApertureContainerView.intrinsicContentSize.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(v2 + 88))();
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_intrinsicContentSize);
    double v1 = v5;
  }
  else
  {
    v7.receiver = v0;
    v7.super_class = (Class)type metadata accessor for SystemApertureContainerView();
    objc_msgSendSuper2(&v7, sel_intrinsicContentSize);
    OUTLINED_FUNCTION_2_89();
  }
  return v1;
}

double SystemApertureContainerView.sizeThatFits(_:for:)(uint64_t a1, double a2, double a3)
{
  OUTLINED_FUNCTION_0_20();
  double v8 = (void *)(*(uint64_t (**)(void))(v7 + 88))();
  if (!v8) {
    goto LABEL_5;
  }
  double v9 = v8;
  if ((objc_msgSend(v8, sel_respondsToSelector_, sel_sizeThatFits_forLayoutMode_) & 1) == 0)
  {

LABEL_5:
    objc_msgSend(v3, sel_sizeThatFits_, a2, a3);
    OUTLINED_FUNCTION_2_89();
    return a3;
  }
  objc_msgSend(v9, sel_sizeThatFits_forLayoutMode_, a1, a2, a3);
  OUTLINED_FUNCTION_2_89();

  return a3;
}

void SystemApertureContainerView.updateContentIfNeeded(_:)(void *a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x58))();
  if (v5)
  {
    uint64_t v7 = v6;
    id v18 = (id)v5;
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(a2 + 16))(v18, v7, ObjectType, a2))
    {
      OUTLINED_FUNCTION_11_5();
      double v10 = *(void (**)(void *, uint64_t))(v9 + 96);
      id v11 = a1;
      v10(a1, a2);
    }
    else
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationControls);
      Swift::String v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        Swift::String v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v17 = 0;
        _os_log_impl(&dword_1C2F90000, v15, v16, "ignoring system aperture accessory view content update", v17, 2u);
        MEMORY[0x1C87760E0](v17, -1, -1);
      }
    }
  }
  else
  {
    OUTLINED_FUNCTION_11_5();
    uint64_t v19 = *(void (**)(void *, uint64_t))(v12 + 96);
    id v13 = a1;
    v19(a1, a2);
  }
}

void *SystemApertureContainerView.accessibilityLabel.getter()
{
  OUTLINED_FUNCTION_0_20();
  CGSize result = (void *)(*(uint64_t (**)(void))(v0 + 88))();
  if (result) {
    return (void *)outlined bridged method (ob) of @objc NSObject.accessibilityLabel.getter(result);
  }
  return result;
}

void SystemApertureContainerView.accessibilityLabel.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 88))();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    if (a2)
    {
      id v7 = (id)MEMORY[0x1C87730B0](a1, a2);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v7 = 0;
    }
    objc_msgSend(v6, sel_setAccessibilityLabel_, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id SystemApertureContainerView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SystemApertureContainerView.init(frame:)()
{
}

id SystemApertureContainerView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureContainerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SystemApertureAccessoryView.preferredLayoutMargins.getter in conformance SystemApertureContainerView@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v4);
  return outlined init with take of SystemApertureLayoutMargins((uint64_t)v4, a1);
}

uint64_t outlined bridged method (ob) of @objc NSObject.accessibilityLabel.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_accessibilityLabel);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t method lookup function for SystemApertureContainerView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureContainerView);
}

uint64_t dispatch thunk of SystemApertureContainerView.content.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SystemApertureContainerView.content.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SystemApertureContainerView.content.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SystemApertureContainerView.preferredLayoutMargins.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemApertureContainerView.sizeThatFits(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemApertureContainerView.updateContentIfNeeded(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

char *SystemApertureIncomingCallLeadingView.__allocating_init(leadingViewType:)(void *a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  id v7 = objc_allocWithZone(v3);
  return SystemApertureIncomingCallLeadingView.init(leadingViewType:)(a1, a2, v6);
}

id SystemApertureIncomingCallLeadingView.__allocating_init(avatar:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SystemApertureIncomingCallLeadingView.init(avatar:)(a1);
}

__n128 one-time initialization function for avatarPreferredSize()
{
  __asm { FMOV            V0.2D, #25.0 }
  static SystemApertureIncomingCallLeadingView.LayoutConstants.avatarPreferredSize = (__int128)result;
  return result;
}

__n128 one-time initialization function for brandedCallImagePreferredSize()
{
  __asm { FMOV            V0.2D, #23.0 }
  static SystemApertureIncomingCallLeadingView.LayoutConstants.brandedCallImagePreferredSize = (__int128)result;
  return result;
}

id SystemApertureIncomingCallLeadingView.init(avatar:)(void *a1)
{
  swift_getObjectType();
  id v3 = v1;
  id v4 = objc_msgSend(a1, sel_view);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView] = v4;
  v3[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon] = 0;

  v24.receiver = v3;
  v24.super_class = (Class)type metadata accessor for SystemApertureIncomingCallLeadingView();
  id v5 = OUTLINED_FUNCTION_0_75(&v24, sel_initWithFrame_);
  id v6 = objc_msgSend(a1, sel_view);
  objc_msgSend(v5, sel_addSubview_, v6);

  uint64_t v7 = one-time initialization token for conversationKit;
  id v8 = v5;
  if (v7 != -1) {
    swift_once();
  }
  id v9 = (void *)qword_1EA37DFA8;
  id v10 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v25._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = OUTLINED_FUNCTION_1_102();
  v12.value._object = v9;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v25);
  swift_bridgeObjectRelease();

  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v14._countAndFlagsBits, (uint64_t)v14._object, v8);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationControls);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)id v18 = 136446210;
    uint64_t v19 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v16, v17, "[SystemAperture] %{public}s created", v18, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v21 = v8;
  objc_msgSend(v21, sel_setNeedsLayout);

  return v21;
}

char *SystemApertureIncomingCallLeadingView.init(leadingViewType:)(void *a1, uint64_t a2, char a3)
{
  swift_getObjectType();
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon;
  v3[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon] = 0;
  if (a3)
  {
    id v7 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
    id v8 = v3;
    id v9 = objc_msgSend(v7, sel_initWithImage_, a1);
    *(void *)&v8[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView] = v9;
    v3[v6] = 1;
  }
  else
  {
    *(void *)&v3[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView] = a1;
    id v10 = a1;
  }
  uint64_t v32 = a1;
  v34.receiver = v3;
  v34.super_class = (Class)type metadata accessor for SystemApertureIncomingCallLeadingView();
  Swift::String v11 = (char *)OUTLINED_FUNCTION_0_75(&v34, sel_initWithFrame_);
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView;
  uint64_t v13 = *(void *)&v11[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView];
  Swift::String v14 = v11;
  objc_msgSend(v14, sel_addSubview_, v13);
  uint64_t v15 = one-time initialization token for conversationKit;
  os_log_type_t v16 = v14;
  if (v15 != -1) {
    swift_once();
  }
  os_log_type_t v17 = (void *)qword_1EA37DFA8;
  id v18 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v35._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = OUTLINED_FUNCTION_1_102();
  v20.value._object = v17;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0;
  Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v35);
  swift_bridgeObjectRelease();

  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v22._countAndFlagsBits, (uint64_t)v22._object, v16);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationControls);
  objc_super v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)id v26 = 136446210;
    uint64_t v27 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v24, v25, "[SystemAperture] %{public}s created", v26, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v29 = objc_msgSend(*(id *)&v11[v12], sel_layer);
  objc_msgSend(v29, sel_setAllowsHitTesting_, 0);

  objc_msgSend(*(id *)&v11[v12], sel_setUserInteractionEnabled_, 0);
  Swift::String v30 = v16;
  objc_msgSend(v30, sel_setNeedsLayout);
  outlined consume of PreCallControlsContext(v32);

  return v30;
}

uint64_t type metadata accessor for SystemApertureIncomingCallLeadingView()
{
  return self;
}

id SystemApertureIncomingCallLeadingView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SystemApertureIncomingCallLeadingView.init(frame:)()
{
}

id SystemApertureIncomingCallLeadingView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureIncomingCallLeadingView.init(coder:)()
{
}

Swift::Void __swiftcall SystemApertureIncomingCallLeadingView.layoutSubviews()()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for SystemApertureIncomingCallLeadingView();
  objc_msgSendSuper2(&v10, sel_layoutSubviews);
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon;
  if (v0[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon] == 1)
  {
    if (one-time initialization token for brandedCallImagePreferredSize != -1) {
      swift_once();
    }
    id v2 = &static SystemApertureIncomingCallLeadingView.LayoutConstants.brandedCallImagePreferredSize;
  }
  else
  {
    if (one-time initialization token for avatarPreferredSize != -1) {
      swift_once();
    }
    id v2 = &static SystemApertureIncomingCallLeadingView.LayoutConstants.avatarPreferredSize;
  }
  double v4 = *(double *)v2;
  double v3 = *((double *)v2 + 1);
  if (v0[v1]) {
    double v5 = 10.0;
  }
  else {
    double v5 = 0.0;
  }
  objc_msgSend(v0, sel_bounds);
  CGFloat Height = CGRectGetHeight(v11);
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_leadingView], sel_setFrame_, v5, (Height - v3) * 0.5, v4, v3);
  if (v0[v1] == 1)
  {
    id v8 = objc_msgSend(*(id *)&v0[v7], sel_layer);
    objc_msgSend(v8, sel_setCornerRadius_, 5.0);

    id v9 = objc_msgSend(*(id *)&v0[v7], sel_layer);
    objc_msgSend(v9, sel_setMasksToBounds_, 1);
  }
}

CGSize __swiftcall SystemApertureIncomingCallLeadingView.sizeThatFits(_:)(CGSize a1)
{
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon;
  if (*(unsigned char *)(v1
                + OBJC_IVAR____TtC15ConversationKit37SystemApertureIncomingCallLeadingView_isLeadingViewBrandedCallIcon) == 1)
  {
    double v3 = 10.0;
    if (one-time initialization token for brandedCallImagePreferredSize != -1) {
      swift_once();
    }
    double v4 = &static SystemApertureIncomingCallLeadingView.LayoutConstants.brandedCallImagePreferredSize;
  }
  else
  {
    double v3 = 0.0;
    if (one-time initialization token for avatarPreferredSize != -1) {
      swift_once();
    }
    double v4 = &static SystemApertureIncomingCallLeadingView.LayoutConstants.avatarPreferredSize;
  }
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v1 + v2) == 1)
  {
    if (one-time initialization token for brandedCallImagePreferredSize != -1) {
      swift_once();
    }
    uint64_t v6 = (double *)&static SystemApertureIncomingCallLeadingView.LayoutConstants.brandedCallImagePreferredSize + 1;
  }
  else
  {
    if (one-time initialization token for avatarPreferredSize != -1) {
      swift_once();
    }
    uint64_t v6 = (double *)&static SystemApertureIncomingCallLeadingView.LayoutConstants.avatarPreferredSize + 1;
  }
  double v7 = v5 + v3;
  double v8 = *v6;
  result.double height = v8;
  result.double width = v7;
  return result;
}

id SystemApertureIncomingCallLeadingView.sizeThatFits(_:for:)()
{
  return objc_msgSend(v0, sel_sizeThatFits_);
}

double SystemApertureIncomingCallLeadingView.preferredLayoutMargins.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

id SystemApertureIncomingCallLeadingView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureIncomingCallLeadingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SystemApertureAccessoryView.preferredLayoutMargins.getter in conformance SystemApertureIncomingCallLeadingView@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA8))(v4);
  return outlined init with take of SystemApertureLayoutMargins((uint64_t)v4, a1);
}

uint64_t method lookup function for SystemApertureIncomingCallLeadingView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureIncomingCallLeadingView);
}

uint64_t dispatch thunk of SystemApertureIncomingCallLeadingView.__allocating_init(avatar:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SystemApertureIncomingCallLeadingView.__allocating_init(leadingViewType:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 152))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of SystemApertureIncomingCallLeadingView.sizeThatFits(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SystemApertureIncomingCallLeadingView.preferredLayoutMargins.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

id ConversationControlsAppLaunchButtonProvider.__allocating_init(controlsManager:context:)(void *a1, char a2)
{
  return ConversationControlsAppLaunchButtonProvider.init(controlsManager:context:)(a1, a2);
}

id ConversationControlsAppLaunchButtonProvider.init(controlsManager:context:)(void *a1, char a2)
{
  *(void *)(v2 + 136) = a1;
  uint64_t v4 = ControlsButtonProvider.init(context:shape:)(a2, 2);
  double v5 = self;
  id v6 = a1;
  swift_retain();
  ControlsButtonProvider.backgroundStyle.setter(objc_msgSend(v5, sel_whiteColor), 0, 64);
  id result = objc_msgSend(self, sel__preferredFontForTextStyle_variant_, *MEMORY[0x1E4FB28D0], 264);
  if (result)
  {
    ControlsButtonProvider.titleFont.setter(result);
    swift_release();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConversationControlsAppLaunchButtonProvider.buttonConfiguration.getter()
{
  ControlsButtonProvider.defaultButtonConfiguration.getter();
  id v1 = objc_msgSend(self, sel_blackColor);
  UIButton.Configuration.baseForegroundColor.setter();
  if (one-time initialization token for buttonContentInsets != -1) {
    swift_once();
  }
  UIButton.Configuration.contentInsets.setter();
  UIButton.Configuration.titleLineBreakMode.setter();
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 104))
  {
    id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2998]);
    id v4 = objc_msgSend(self, sel_configurationWithFont_scale_, v3, 2);

    return UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  }
  return result;
}

void ConversationControlsAppLaunchButtonProvider.__allocating_init(controlsManager:context:shape:)()
{
}

void ConversationControlsAppLaunchButtonProvider.init(controlsManager:context:shape:)()
{
}

uint64_t ConversationControlsAppLaunchButtonProvider.deinit()
{
  uint64_t v0 = ControlsButtonProvider.deinit();

  return v0;
}

uint64_t ConversationControlsAppLaunchButtonProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationControlsAppLaunchButtonProvider()
{
  return self;
}

uint64_t method lookup function for ConversationControlsAppLaunchButtonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsAppLaunchButtonProvider);
}

uint64_t dispatch thunk of ConversationControlsAppLaunchButtonProvider.__allocating_init(controlsManager:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 480))();
}

uint64_t CallScreening.EnteringAnsweringStateService.viewModel.getter()
{
  return swift_retain();
}

uint64_t CallScreening.EnteringAnsweringStateService.callServices.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IDSLookupManager(v1 + 8, a1);
}

Swift::Void __swiftcall CallScreening.EnteringAnsweringStateService.enter(with:)(Swift::String with)
{
  swift_bridgeObjectRetain();
  TranscriptionViewModel.callUUID.setter();
  uint64_t v2 = v1[5];
  __swift_project_boxed_opaque_existential_1(v1 + 1, v1[4]);
  uint64_t v3 = TranscriptionViewModel.callUUID.getter();
  (*(void (**)(uint64_t))(v2 + 64))(v3);
  swift_bridgeObjectRelease();
  TranscriptionViewModel.callerDisplayName.setter();
  TranscriptionViewModel.state.setter();
}

uint64_t CallScreening.EnteringAnsweringStateService.init(viewModel:callServices:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  return outlined init with take of Notice(a2, (uint64_t)(a3 + 1));
}

uint64_t destroy for CallScreening.EnteringAnsweringStateService(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for CallScreening.EnteringAnsweringStateService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  id v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for CallScreening.EnteringAnsweringStateService(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for CallScreening.EnteringAnsweringStateService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for CallScreening.EnteringAnsweringStateService()
{
  return &type metadata for CallScreening.EnteringAnsweringStateService;
}

char *CallCenter.__allocating_init(callCenter:placeholderCallCenter:shouldRegisterForMediaControllerChanges:shouldRegisterForReactionsControllerChanges:)(void *a1, void *a2, char a3, char a4)
{
  id v9 = objc_allocWithZone(v4);
  return CallCenter.init(callCenter:placeholderCallCenter:shouldRegisterForMediaControllerChanges:shouldRegisterForReactionsControllerChanges:)(a1, a2, a3, a4);
}

uint64_t CallCenter.currentAudioAndVideoCalls.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_currentAudioAndVideoCalls);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized _arrayForceCast<A, B>(_:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t CallCenter.activeConversations.getter()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_conversationManager));
  id v2 = objc_msgSend(v1, sel_activeConversations);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)();
  uint64_t v5 = v4;
  swift_release();
  return v5;
}

id CallCenter.callContainer.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter);
}

uint64_t CallCenter.localVideoProvider.getter@<X0>(void *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_videoDeviceController);
  uint64_t result = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUVideoDeviceController);
  a1[3] = result;
  a1[4] = &protocol witness table for TUVideoDeviceController;
  a1[5] = &protocol witness table for TUVideoDeviceController;
  *a1 = v3;
  return result;
}

id CallCenter.conversationManager.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_conversationManager);
  return v1;
}

id CallCenter.videoDeviceController.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_videoDeviceController);
  return v1;
}

id CallCenter.audioRoute.getter()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_routeController));
  id v2 = objc_msgSend(v1, sel_pickedRoute);

  return v2;
}

uint64_t key path getter for CallCenter.delegate : CallCenter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for CallCenter.delegate : CallCenter(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CallCenter.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate;
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v1);
}

uint64_t CallCenter.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*CallCenter.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ParticipantGridViewController.participantsViewControllerDelegate.modify;
}

uint64_t CallCenter.disconnect(_:reason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 440))(a3, ObjectType, a2);
}

uint64_t CallCenter.answer(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 448))(ObjectType, a2);
}

double CallCenter.activeConversation(for:)@<D0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  OUTLINED_FUNCTION_6_64();
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = v3;
    *(void *)(a1 + 24) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    *(void *)(a1 + 32) = &protocol witness table for TUConversation;
    *(void *)a1 = v4;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void CallCenter.avLessConversation(for:)()
{
}

void CallCenter.downgradeToAVLess(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  OUTLINED_FUNCTION_6_64();
  uint64_t v6 = v5();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
    id v9 = v7;
    id v10 = objc_msgSend(v9, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = MEMORY[0x1E4FBB1A0];
    uint64_t v12 = String.init<A>(reflecting:)();
    uint64_t v14 = v13;
    *(void *)(v8 + 56) = v11;
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = v12;
    *(void *)(v8 + 40) = v14;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit10CallCenter_placeholderCallCenter);
    id v16 = v9;
    specialized PlaceholderCallCenter.downgradeToAVLess(for:)(v16, v15);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v17 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v17 + 16) = xmmword_1C3769620;
    (*(void (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2);
    uint64_t v18 = MEMORY[0x1E4FBB1A0];
    uint64_t v19 = String.init<A>(reflecting:)();
    uint64_t v21 = v20;
    *(void *)(v17 + 56) = v18;
    *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v17 + 32) = v19;
    *(void *)(v17 + 40) = v21;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

void CallCenter.setGridDisplayMode(mode:for:)(uint64_t a1, uint64_t a2)
{
  id v4 = OUTLINED_FUNCTION_25_32();
  id v5 = objc_msgSend(v4, sel_activeConversations);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = a2;
  OUTLINED_FUNCTION_24_30(partial apply for closure #1 in CallCenter.setGridDisplayMode(mode:for:), (uint64_t)v15);
  OUTLINED_FUNCTION_23_32();
  if (v5)
  {
    id v6 = OUTLINED_FUNCTION_25_32();
    objc_msgSend(v6, sel_setGridDisplayMode_conversation_, a1, v5);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v7 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    MEMORY[0x1F4188790](v8 - 8);
    id v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a2, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
    uint64_t v12 = specialized >> prefix<A>(_:)((uint64_t)v10);
    uint64_t v14 = v13;
    outlined destroy of Conversation?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v7 + 32) = v12;
    *(void *)(v7 + 40) = v14;
    OUTLINED_FUNCTION_13_51();
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in CallCenter.setGridDisplayMode(mode:for:)(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_UUID);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v6 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6 & 1;
}

void CallCenter.updateConversation(uuid:presentationContexts:)()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_conversationManager));
  id v2 = objc_msgSend(v1, sel_mediaController);

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
  Class v4 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, sel_updateConversationWithUUID_participantPresentationContexts_, isa, v4);
}

uint64_t CallCenter.calls(passingTest:)(uint64_t a1, uint64_t a2)
{
  id v5 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for thunk for @callee_guaranteed (@guaranteed Call) -> (@unowned Bool);
  *(void *)(v7 + 24) = v6;
  v13[4] = _sSo6TUCallCSbIggd_ABSbIeggd_TRTA_0;
  v13[5] = v7;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  _OWORD v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed TUCall) -> (@unowned Bool);
  v13[3] = &block_descriptor_53;
  uint64_t v8 = _Block_copy(v13);
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v5, sel_callsPassingTest_, v8);
  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized _arrayForceCast<A, B>(_:)();
    uint64_t v12 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed Call) -> (@unowned Bool)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  unint64_t v4 = lazy protocol witness table accessor for type TUCall and conformance TUCall();
  return a2(a1, v4) & 1;
}

uint64_t CallCenter.buzz(_:in:)(uint64_t a1, void *a2)
{
  return CallCenter.buzz(_:in:)(a1, a2, (void (*)(void *, void *))partial apply for closure #1 in CallCenter.buzz(_:in:));
}

void Conversation.performTUAction(for:action:)(uint64_t a1, void (*a2)(void *, void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Participant(0);
  uint64_t v20 = *(void **)(a1 + *(int *)(v19 + 28));
  if (v20)
  {
    uint64_t v40 = a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v5, a4);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    id v21 = v20;
    if (swift_dynamicCast())
    {
      Swift::String v22 = v45;
      uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
      unint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a4, a5);
      specialized Set.union<A>(_:)(v24, v23);
      uint64_t v26 = v25;
      id v27 = v21;
      specialized Sequence.first(where:)(v26, v27);
      id v29 = v28;
      swift_bridgeObjectRelease();
      if (v29)
      {
        v42(v22, v29);

        return;
      }
    }
    else
    {
    }
    a1 = v40;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v42 = (void (*)(void *, void *))static OS_os_log.conversationKit;
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1C37696D0;
  outlined init with copy of Participant(a1, (uint64_t)v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v19);
  uint64_t v31 = specialized >> prefix<A>(_:)();
  uint64_t v33 = v32;
  outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Participant?);
  uint64_t v34 = MEMORY[0x1E4FBB1A0];
  *(void *)(v30 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v35 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v30 + 64) = v35;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, v5, a4);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, a4);
  uint64_t v36 = >> prefix<A>(_:)((uint64_t)v11, a4);
  uint64_t v38 = v37;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
  *(void *)(v30 + 96) = v34;
  *(void *)(v30 + 104) = v35;
  *(void *)(v30 + 72) = v36;
  *(void *)(v30 + 80) = v38;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

uint64_t CallCenter.kick(_:in:)(uint64_t a1, void *a2)
{
  return CallCenter.buzz(_:in:)(a1, a2, (void (*)(void *, void *))partial apply for closure #1 in CallCenter.kick(_:in:));
}

void closure #1 in CallCenter.buzz(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_3_95();
  uint64_t v15 = MEMORY[0x1C8776240](a3 + 16);
  if (v15)
  {
    uint64_t v16 = (char *)v15;
    uint64_t v31 = a2;
    uint64_t v32 = a1;
    uint64_t v33 = a7;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1C37696D0;
    outlined init with copy of Participant(a4, (uint64_t)v14);
    uint64_t v18 = type metadata accessor for Participant(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v18);
    uint64_t v19 = specialized >> prefix<A>(_:)();
    uint64_t v21 = v20;
    outlined destroy of Conversation?((uint64_t)v14, &demangling cache variable for type metadata for Participant?);
    uint64_t v22 = MEMORY[0x1E4FBB1A0];
    *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v23 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v17 + 64) = v23;
    *(void *)(v17 + 32) = v19;
    *(void *)(v17 + 40) = v21;
    uint64_t v24 = OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter;
    uint64_t v34 = *(void **)&v16[OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter];
    uint64_t v25 = v34;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUCallCenter);
    id v26 = v25;
    uint64_t v27 = String.init<A>(reflecting:)();
    *(void *)(v17 + 96) = v22;
    *(void *)(v17 + 104) = v23;
    *(void *)(v17 + 72) = v27;
    *(void *)(v17 + 80) = v28;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(*(id *)&v16[v24], sel_conversationManager);
    objc_msgSend(v29, *v33, v31, v32);
  }
}

uint64_t CallCenter.approve(_:in:)(uint64_t a1, void *a2)
{
  return CallCenter.buzz(_:in:)(a1, a2, (void (*)(void *, void *))partial apply for closure #1 in CallCenter.approve(_:in:));
}

uint64_t CallCenter.reject(_:in:)(uint64_t a1, void *a2)
{
  return CallCenter.buzz(_:in:)(a1, a2, (void (*)(void *, void *))partial apply for closure #1 in CallCenter.reject(_:in:));
}

uint64_t CallCenter.buzz(_:in:)(uint64_t a1, void *a2, void (*a3)(void *, void *))
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9[2] = v7;
  v9[3] = a1;
  Conversation.performTUAction(for:action:)(a1, a3, (uint64_t)v9, v5, v6);
  return swift_release();
}

void CallCenter.setDownlinkMuted(_:forRemoteParticipantsIn:)(char a1, uint64_t a2)
{
}

void CallCenter.generateLink(for:completionHandler:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter);
  id v8 = objc_msgSend(v7, sel_conversationManager);
  id v9 = objc_msgSend(v8, sel_activeConversations);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v15[2] = a1;
  OUTLINED_FUNCTION_24_30(partial apply for closure #1 in CallCenter.generateLink(for:completionHandler:), (uint64_t)v15);
  OUTLINED_FUNCTION_23_32();
  if (v9)
  {
    id v10 = objc_msgSend(v7, sel_conversationManager);
    if (a2)
    {
      aBlock[4] = a2;
      aBlock[5] = a3;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
      aBlock[3] = &block_descriptor_12_1;
      a2 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
    }
    objc_msgSend(v10, sel_generateLinkForConversation_completionHandler_, v9, a2);
    _Block_release(a2);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v11 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v11 + 16) = xmmword_1C3769620;
    outlined init with copy of IDSLookupManager(a1, (uint64_t)aBlock);
    uint64_t v12 = specialized >> prefix<A>(_:)((uint64_t)aBlock);
    uint64_t v14 = v13;
    outlined destroy of Conversation?((uint64_t)aBlock, &demangling cache variable for type metadata for Conversation?);
    *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    OUTLINED_FUNCTION_13_51();
    swift_bridgeObjectRelease();
  }
}

void CallCenter.ignoreLetMeIn(_:in:)(char a1, uint64_t a2)
{
}

void CallCenter.setDownlinkMuted(_:forRemoteParticipantsIn:)(char a1, uint64_t a2, uint64_t (*a3)(id *), SEL *a4)
{
  id v9 = *(void **)(v4 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter);
  id v10 = objc_msgSend(v9, sel_conversationManager);
  id v11 = objc_msgSend(v10, sel_activeConversations);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v17[2] = a2;
  OUTLINED_FUNCTION_24_30(a3, (uint64_t)v17);
  OUTLINED_FUNCTION_23_32();
  if (a3)
  {
    id v12 = objc_msgSend(v9, sel_conversationManager);
    objc_msgSend(v12, *a4, a1 & 1, a3);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v13 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v13 + 16) = xmmword_1C3769620;
    outlined init with copy of IDSLookupManager(a2, (uint64_t)v18);
    uint64_t v14 = specialized >> prefix<A>(_:)((uint64_t)v18);
    uint64_t v16 = v15;
    outlined destroy of Conversation?((uint64_t)v18, &demangling cache variable for type metadata for Conversation?);
    *(void *)(v13 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    OUTLINED_FUNCTION_13_51();
    swift_bridgeObjectRelease();
  }
}

void CallCenter.addScreenSharingType(_:in:)(uint64_t a1, uint64_t a2)
{
  id v4 = OUTLINED_FUNCTION_25_32();
  id v5 = objc_msgSend(v4, sel_activeConversations);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v11[2] = a2;
  OUTLINED_FUNCTION_24_30(partial apply for closure #1 in CallCenter.setDownlinkMuted(_:forRemoteParticipantsIn:), (uint64_t)v11);
  OUTLINED_FUNCTION_23_32();
  if (v5)
  {
    id v6 = OUTLINED_FUNCTION_25_32();
    objc_msgSend(v6, sel_addScreenSharingType_forConversation_, a1, v5);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v7 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
    outlined init with copy of IDSLookupManager(a2, (uint64_t)v12);
    uint64_t v8 = specialized >> prefix<A>(_:)((uint64_t)v12);
    uint64_t v10 = v9;
    outlined destroy of Conversation?((uint64_t)v12, &demangling cache variable for type metadata for Conversation?);
    *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    OUTLINED_FUNCTION_13_51();
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in CallCenter.setDownlinkMuted(_:forRemoteParticipantsIn:)(id *a1, void *a2)
{
  id v3 = objc_msgSend(*a1, sel_UUID);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(a2, v8);
  MEMORY[0x1F4188790](v10);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  LOBYTE(a2) = static UUID.== infix(_:_:)();
  id v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11((char *)v13 - v7, v4);
  v11((char *)v13 - v7, v4);
  return a2 & 1;
}

id CallCenter.requestVideoUpgrade(for:)()
{
  self;
  id result = (id)swift_dynamicCastObjCClass();
  if (result)
  {
    id v2 = result;
    id v3 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter);
    return objc_msgSend(v3, sel_requestVideoUpgradeForCall_, v2);
  }
  return result;
}

id CallCenter.launchApp(forJoin:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_launchAppForJoinRequest_, a1);
}

void CallCenter.launchApp(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter);
  if (a2)
  {
    v7[4] = a2;
    v7[5] = a3;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 1107296256;
    v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    v7[3] = &block_descriptor_15_1;
    uint64_t v6 = _Block_copy(v7);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  objc_msgSend(v5, sel_launchAppForDialRequest_completion_, a1, v6);
  _Block_release(v6);
}

void CallCenter.requestScreenSharingPicker(for:with:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conversation);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  if (swift_dynamicCast())
  {
    id v4 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_conversationManager);
    objc_msgSend(v4, sel_requestScreenSharingPickerForConversation_withContentStyle_, v5, a2);
  }
}

id CallCenter.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CallCenter.init()()
{
}

id CallCenter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for CallCenterProvider.currentAudioAndVideoCalls.getter in conformance CallCenter()
{
  return CallCenter.currentAudioAndVideoCalls.getter();
}

uint64_t protocol witness for CallCenterProvider.activeConversations.getter in conformance CallCenter()
{
  return CallCenter.activeConversations.getter();
}

id protocol witness for CallCenterProvider.callContainer.getter in conformance CallCenter()
{
  return CallCenter.callContainer.getter();
}

uint64_t protocol witness for CallCenterProvider.localVideoProvider.getter in conformance CallCenter@<X0>(void *a1@<X8>)
{
  return CallCenter.localVideoProvider.getter(a1);
}

id protocol witness for CallCenterProvider.audioRoute.getter in conformance CallCenter()
{
  return CallCenter.audioRoute.getter();
}

uint64_t protocol witness for CallCenterProvider.delegate.getter in conformance CallCenter()
{
  return CallCenter.delegate.getter();
}

uint64_t protocol witness for CallCenterProvider.delegate.setter in conformance CallCenter(uint64_t a1, uint64_t a2)
{
  return CallCenter.delegate.setter(a1, a2);
}

uint64_t (*protocol witness for CallCenterProvider.delegate.modify in conformance CallCenter(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return ParticipantGridViewController.participantsViewControllerDelegate.modify;
}

id protocol witness for CallCenterProvider.conversationManager.getter in conformance CallCenter()
{
  return CallCenter.conversationManager.getter();
}

id protocol witness for CallCenterProvider.videoDeviceController.getter in conformance CallCenter()
{
  return CallCenter.videoDeviceController.getter();
}

uint64_t protocol witness for CallCenterProvider.disconnect(_:reason:) in conformance CallCenter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CallCenter.disconnect(_:reason:)(a1, a2, a3);
}

uint64_t protocol witness for CallCenterProvider.answer(_:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
  return CallCenter.answer(_:)(a1, a2);
}

double protocol witness for CallCenterProvider.activeConversation(for:) in conformance CallCenter@<D0>(uint64_t a1@<X8>)
{
  return CallCenter.activeConversation(for:)(a1);
}

void protocol witness for CallCenterProvider.avLessConversation(for:) in conformance CallCenter()
{
}

void protocol witness for CallCenterProvider.updateConversation(uuid:presentationContexts:) in conformance CallCenter()
{
}

void protocol witness for CallCenterProvider.downgradeToAVLess(for:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
}

void protocol witness for CallCenterProvider.setGridDisplayMode(mode:for:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
}

uint64_t protocol witness for CallCenterProvider.buzz(_:in:) in conformance CallCenter(uint64_t a1, void *a2)
{
  return CallCenter.buzz(_:in:)(a1, a2);
}

uint64_t protocol witness for CallCenterProvider.kick(_:in:) in conformance CallCenter(uint64_t a1, void *a2)
{
  return CallCenter.kick(_:in:)(a1, a2);
}

void protocol witness for CallCenterProvider.setDownlinkMuted(_:forRemoteParticipantsIn:) in conformance CallCenter(char a1, uint64_t a2)
{
}

uint64_t protocol witness for CallCenterProvider.approve(_:in:) in conformance CallCenter(uint64_t a1, void *a2)
{
  return CallCenter.approve(_:in:)(a1, a2);
}

uint64_t protocol witness for CallCenterProvider.reject(_:in:) in conformance CallCenter(uint64_t a1, void *a2)
{
  return CallCenter.reject(_:in:)(a1, a2);
}

void protocol witness for CallCenterProvider.generateLink(for:completionHandler:) in conformance CallCenter(uint64_t a1, void *a2, uint64_t a3)
{
}

void protocol witness for CallCenterProvider.ignoreLetMeIn(_:in:) in conformance CallCenter(char a1, uint64_t a2)
{
}

void protocol witness for CallCenterProvider.addScreenSharingType(_:in:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
}

uint64_t protocol witness for CallCenterProvider.calls(passingTest:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
  return CallCenter.calls(passingTest:)(a1, a2);
}

id protocol witness for CallCenterProvider.requestVideoUpgrade(for:) in conformance CallCenter()
{
  return CallCenter.requestVideoUpgrade(for:)();
}

id protocol witness for CallCenterProvider.launchApp(forJoin:) in conformance CallCenter(uint64_t a1)
{
  return CallCenter.launchApp(forJoin:)(a1);
}

void protocol witness for CallCenterProvider.launchApp(for:completion:) in conformance CallCenter(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for CallCenterProvider.requestScreenSharingPicker(for:with:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
}

uint64_t protocol witness for CallCenterProvider.pttStartTransmit(_:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
  return CallCenter.pttStartTransmit(_:)(a1, a2);
}

uint64_t CallCenter.pttStartTransmit(_:)(uint64_t a1, uint64_t a2)
{
  return CallCenter.pttStartTransmit(_:)(a1, a2, (SEL *)&selRef_startTransmissionForBargeCall_sourceIsHandsfreeAccessory_);
}

uint64_t protocol witness for CallCenterProvider.pttStopTransmit(_:) in conformance CallCenter(uint64_t a1, uint64_t a2)
{
  return CallCenter.pttStopTransmit(_:)(a1, a2);
}

uint64_t CallCenter.pttStopTransmit(_:)(uint64_t a1, uint64_t a2)
{
  return CallCenter.pttStartTransmit(_:)(a1, a2, (SEL *)&selRef_stopTransmissionForBargeCall_sourceIsHandsfreeAccessory_);
}

uint64_t CallCenter.pttStartTransmit(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v6 = (void *)result;
    swift_unknownObjectRetain();
    if (objc_msgSend(v6, sel_isPTT)) {
      objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), *a3, v6, 0);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for CallCenterProvider.pttLeaveChannel(_:) in conformance CallCenter()
{
  return CallCenter.pttLeaveChannel(_:)();
}

uint64_t CallCenter.pttLeaveChannel(_:)()
{
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    objc_super v2 = (void *)result;
    swift_unknownObjectRetain();
    if (objc_msgSend(v2, sel_isPTT)) {
      objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter), sel_disconnectCall_, v2);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CallCenter.audioDeviceControllerMutedTalkerDidStart(_:)()
{
  return CallCenter.audioDeviceControllerMutedTalkerDidStart(_:)();
}

{
  char *v0;
  uint64_t ObjectType;
  char *v2;
  uint64_t result;
  void (*v4)(uint64_t);
  char *v5;
  uint64_t v6;
  void v7[5];

  uint64_t ObjectType = swift_getObjectType();
  objc_super v2 = &v0[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_3_95();
  uint64_t result = MEMORY[0x1C8776240](v2);
  if (result)
  {
    OUTLINED_FUNCTION_93();
    v7[3] = ObjectType;
    v7[4] = &protocol witness table for CallCenter;
    v7[0] = v0;
    uint64_t v4 = (void (*)(uint64_t))*((void *)v2 + 21);
    uint64_t v5 = v0;
    OUTLINED_FUNCTION_2_90();
    v4(v6);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t CallCenter.audioDeviceControllerMutedTalkerDidEnd(_:)()
{
  return CallCenter.audioDeviceControllerMutedTalkerDidStart(_:)();
}

#error "1C32F44A8: call analysis failed (funcsize=42)"

#error "1C32F45D0: call analysis failed (funcsize=42)"

#error "1C32F46F8: call analysis failed (funcsize=42)"

void CallCenter.conversationManager(_:activeRemoteParticipantsChangedFor:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = &v2[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v6))
  {
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t v8 = swift_getObjectType();
    uint64_t v34 = (void *)ObjectType;
    unint64_t v35 = (uint64_t (*)())&protocol witness table for CallCenter;
    aBlock[0] = v2;
    uint64_t v38 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    uint64_t v39 = &protocol witness table for TUConversation;
    v37[0] = a2;
    uint64_t v9 = *(void (**)(void *, void *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v10 = v2;
    id v11 = a2;
    v9(aBlock, v37, v8, v7);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  if (objc_msgSend(a2, sel_state) != (id)3) {
    return;
  }
  if (!objc_msgSend(a2, sel_isOneToOneModeEnabled)) {
    return;
  }
  id v12 = objc_msgSend(a2, sel_activeRemoteParticipants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = specialized Set.count.getter(v13);
  swift_bridgeObjectRelease();
  if (v14 != 1) {
    return;
  }
  unint64_t v15 = (unint64_t)objc_msgSend(self, sel_sharedInstance);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in CallCenter.conversationManager(_:activeRemoteParticipantsChangedFor:);
  *(void *)(v17 + 24) = v16;
  unint64_t v35 = thunk for @callee_guaranteed (@guaranteed TUCall) -> (@unowned Bool)partial apply;
  uint64_t v36 = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed TUCall) -> (@unowned Bool);
  uint64_t v34 = &block_descriptor_25_3;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = a2;
  swift_retain();
  swift_release();
  id v20 = objc_msgSend((id)v15, sel_callsPassingTest_, v18);

  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v18)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v15 >> 62))
    {
      uint64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  if (v21)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v15 & 0xC000000000000001) == 0, v15);
    if ((v15 & 0xC000000000000001) != 0) {
      id v22 = (id)MEMORY[0x1C87744F0](0, v15);
    }
    else {
      id v22 = *(id *)(v15 + 32);
    }
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    id v24 = v23;
    if ((objc_msgSend(v24, sel_isVideo) & 1) != 0
      || (id v25 = objc_msgSend(v19, sel_activeRemoteParticipants),
          uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
          v25,
          uint64_t v28 = (void *)specialized Collection.randomElement<A>(using:)(v27, v26),
          swift_bridgeObjectRelease(),
          !v28))
    {
      swift_release();
    }
    else
    {
      if (MEMORY[0x1C8776240](v6))
      {
        uint64_t v29 = *((void *)v6 + 1);
        uint64_t v30 = swift_getObjectType();
        uint64_t v34 = (void *)ObjectType;
        unint64_t v35 = (uint64_t (*)())&protocol witness table for CallCenter;
        aBlock[0] = v3;
        uint64_t v38 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
        uint64_t v39 = &protocol witness table for TUConversation;
        v37[0] = v19;
        id v31 = v3;
        id v32 = v19;
        (*(void (**)(void *, void *, id, id, uint64_t, uint64_t))(v29 + 192))(aBlock, v37, objc_msgSend(v28, sel_identifier), objc_msgSend(v28, sel_isAudioPaused), v30, v29);

        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        swift_release();
        return;
      }
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in CallCenter.conversationManager(_:activeRemoteParticipantsChangedFor:)(void *a1, void *a2)
{
  id v3 = objc_msgSend(a1, sel_callGroupUUID);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v9 = 1;
  }
  uint64_t v10 = __swift_storeEnumTagSinglePayload((uint64_t)v8, v9, 1, v7);
  MEMORY[0x1F4188790](v10);
  unint64_t v11 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v12 = (char *)v30 - v11;
  id v13 = objc_msgSend(a2, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v30 - v11, 0, 1, v7);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  v30[3] = v30;
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 56)];
  outlined init with copy of UUID?((uint64_t)v30 - v11, (uint64_t)v17);
  outlined init with copy of UUID?((uint64_t)v30 - v11, v18);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v7);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Conversation?((uint64_t)v30 - v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of Conversation?((uint64_t)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    int v20 = __swift_getEnumTagSinglePayload(v18, 1, v7);
    if (v20 == 1) {
      uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    }
    else {
      uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
    }
    if (v20 == 1) {
      char v22 = -1;
    }
    else {
      char v22 = 0;
    }
  }
  else
  {
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    unint64_t v23 = (char *)v30 - v11;
    outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v30 - v11);
    uint64_t v24 = __swift_getEnumTagSinglePayload(v18, 1, v7);
    if (v24 == 1)
    {
      outlined destroy of Conversation?((uint64_t)v30 - v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of Conversation?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))((char *)v30 - v11, v7);
      uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
      char v22 = 0;
    }
    else
    {
      v30[1] = v30;
      uint64_t v25 = *(void *)(v7 - 8);
      MEMORY[0x1F4188790](v24);
      v30[0] = v30;
      uint64_t v27 = (char *)v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v27, v18, v7);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30[2] = v30;
      uint64_t v28 = *(void (**)(char *, uint64_t))(v25 + 8);
      v28(v27, v7);
      uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      outlined destroy of Conversation?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of Conversation?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v28(v23, v7);
    }
  }
  outlined destroy of Conversation?((uint64_t)v17, v21);
  return v22 & 1;
}

#error "1C32F51C0: call analysis failed (funcsize=42)"

#error "1C32F52E8: call analysis failed (funcsize=42)"

#error "1C32F5410: call analysis failed (funcsize=42)"

#error "1C32F5538: call analysis failed (funcsize=42)"

#error "1C32F5660: call analysis failed (funcsize=42)"

#error "1C32F5788: call analysis failed (funcsize=42)"

#error "1C32F58B0: call analysis failed (funcsize=42)"

#error "1C32F59D8: call analysis failed (funcsize=42)"

#error "1C32F5B00: call analysis failed (funcsize=42)"

#error "1C32F5C28: call analysis failed (funcsize=42)"

#error "1C32F5D50: call analysis failed (funcsize=42)"

uint64_t CallCenter.conversationManager(_:screenSharingAvailableChanged:)()
{
  uint64_t ObjectType = swift_getObjectType();
  objc_super v2 = &v0[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_3_95();
  uint64_t result = MEMORY[0x1C8776240](v2);
  if (result)
  {
    OUTLINED_FUNCTION_93();
    v7[3] = ObjectType;
    v7[4] = &protocol witness table for CallCenter;
    v7[0] = v0;
    uint64_t v4 = (void (*)(uint64_t))*((void *)v2 + 33);
    uint64_t v5 = v0;
    OUTLINED_FUNCTION_2_90();
    v4(v6);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

#error "1C32F5F94: call analysis failed (funcsize=42)"

uint64_t CallCenter.conversationManager(_:migratingFrom:to:)()
{
  uint64_t v3 = OUTLINED_FUNCTION_12_47();
  uint64_t v4 = &v2[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v4);
  if (result)
  {
    OUTLINED_FUNCTION_26_27();
    v12[3] = v3;
    v12[4] = &protocol witness table for CallCenter;
    v12[0] = v2;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    OUTLINED_FUNCTION_21_31();
    uint64_t v6 = *(void (**)(void))(v3 + 160);
    uint64_t v7 = v2;
    id v8 = v1;
    id v9 = v0;
    OUTLINED_FUNCTION_14_45();
    v6();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  return result;
}

uint64_t CallCenter.conversationManager(_:activitySessionsChangedFor:fromOldConversation:)()
{
  uint64_t v3 = OUTLINED_FUNCTION_12_47();
  uint64_t v4 = &v2[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v4);
  if (result)
  {
    OUTLINED_FUNCTION_26_27();
    v12[3] = v3;
    v12[4] = &protocol witness table for CallCenter;
    v12[0] = v2;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    OUTLINED_FUNCTION_21_31();
    uint64_t v6 = *(void (**)(void))(v3 + 184);
    uint64_t v7 = v2;
    id v8 = v1;
    id v9 = v0;
    OUTLINED_FUNCTION_14_45();
    v6();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  return result;
}

uint64_t CallCenter.conversationManager(_:conversation:participant:addedNotice:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C376BA10;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationNotice);
  id v28 = a4;
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v13 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  id v14 = a3;
  uint64_t v15 = String.init<A>(reflecting:)();
  *(void *)(v8 + 96) = v12;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 72) = v15;
  *(void *)(v8 + 80) = v16;
  v31[0] = a2;
  uint64_t v17 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  id v18 = a2;
  uint64_t v19 = String.init<A>(reflecting:)();
  *(void *)(v8 + 136) = v12;
  *(void *)(v8 + 144) = v13;
  *(void *)(v8 + 112) = v19;
  *(void *)(v8 + 120) = v20;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = &v4[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v21);
  if (result)
  {
    uint64_t v23 = *((void *)v21 + 1);
    uint64_t v24 = swift_getObjectType();
    v31[3] = ObjectType;
    v31[4] = &protocol witness table for CallCenter;
    v31[0] = v4;
    v30[3] = v17;
    void v30[4] = &protocol witness table for TUConversation;
    v30[0] = v18;
    uint64_t v25 = *(void (**)(void *, id, void *, id, uint64_t, uint64_t))(v23 + 200);
    id v26 = v18;
    uint64_t v27 = v4;
    v25(v31, v28, v30, v14, v24, v23);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  return result;
}

void CallCenter.conversationManager(_:conversation:updatedMessagesGroupPhoto:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, _UNKNOWN **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_17_39();
  a33 = v36;
  a34 = v37;
  uint64_t v38 = OUTLINED_FUNCTION_15_50();
  uint64_t v39 = &v35[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v39))
  {
    swift_getObjectType();
    a18 = v38;
    a19 = &protocol witness table for CallCenter;
    a15 = v35;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    OUTLINED_FUNCTION_20_36();
    uint64_t v40 = *(void (**)(void))(v38 + 208);
    uint64_t v41 = v35;
    id v42 = v34;
    OUTLINED_FUNCTION_19_35();
    v40();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a15);
  }
  OUTLINED_FUNCTION_16_36();
}

#error "1C32F6724: call analysis failed (funcsize=51)"

void CallCenter.conversationManager(_:conversation:launchStateChanged:session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, _UNKNOWN **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_17_39();
  a33 = v36;
  a34 = v37;
  uint64_t v38 = OUTLINED_FUNCTION_15_50();
  uint64_t v39 = &v35[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v39))
  {
    swift_getObjectType();
    a18 = v38;
    a19 = &protocol witness table for CallCenter;
    a15 = v35;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    OUTLINED_FUNCTION_20_36();
    uint64_t v40 = *(void (**)(void))(v38 + 216);
    uint64_t v41 = v35;
    id v42 = v34;
    OUTLINED_FUNCTION_19_35();
    v40();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a15);
  }
  OUTLINED_FUNCTION_16_36();
}

#error "1C32F68A0: call analysis failed (funcsize=38)"

uint64_t CallCenter.conversationManager(_:remoteScreenShareAttributesChanged:isLocallySharing:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v8 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
  v18[0] = a2;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUScreenShareAttributes);
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = &v4[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v12);
  if (result)
  {
    uint64_t v14 = *((void *)v12 + 1);
    uint64_t v15 = swift_getObjectType();
    v18[3] = ObjectType;
    v18[4] = &protocol witness table for CallCenter;
    v18[0] = v4;
    uint64_t v16 = *(void (**)(void *, uint64_t, void, uint64_t, uint64_t))(v14 + 224);
    uint64_t v17 = v4;
    v16(v18, a2, a3 & 1, v15, v14);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  return result;
}

void CallCenter.conversationManager(_:conversation:buzzedMember:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, _UNKNOWN **a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, _UNKNOWN **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_5_89();
  a31 = v34;
  a32 = v35;
  uint64_t v36 = OUTLINED_FUNCTION_12_47();
  uint64_t v37 = &v33[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v37))
  {
    OUTLINED_FUNCTION_26_27();
    a18 = v36;
    a19 = &protocol witness table for CallCenter;
    a15 = v33;
    a13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    a14 = &protocol witness table for TUConversation;
    a10 = v32;
    uint64_t v38 = (void (*)(void))*((void *)v37 + 29);
    uint64_t v39 = v33;
    id v40 = v32;
    OUTLINED_FUNCTION_14_45();
    v38();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a15);
  }
  OUTLINED_FUNCTION_4_82();
}

#error "1C32F6C40: call analysis failed (funcsize=36)"

#error "1C32F6D00: call analysis failed (funcsize=44)"

void CallCenter.conversationManager(_:conversation:participant:addedCollaborationNotice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, _UNKNOWN **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_17_39();
  a33 = v36;
  a34 = v37;
  uint64_t v38 = OUTLINED_FUNCTION_15_50();
  uint64_t v39 = &v35[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v39))
  {
    swift_getObjectType();
    a18 = v38;
    a19 = &protocol witness table for CallCenter;
    a15 = v35;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    OUTLINED_FUNCTION_20_36();
    id v40 = *(void (**)(void))(v38 + 248);
    uint64_t v41 = v35;
    id v42 = v34;
    OUTLINED_FUNCTION_19_35();
    v40();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a15);
  }
  OUTLINED_FUNCTION_16_36();
}

void @objc CallCenter.conversationManager(_:conversation:participant:addedNotice:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void (*a7)(void))
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a1;
  a7();
}

#error "1C32F6FF0: call analysis failed (funcsize=44)"

uint64_t CallCenter.conversationManager(_:screenSharingRequestsChangedFor:fromOldConversation:)()
{
  uint64_t v3 = OUTLINED_FUNCTION_12_47();
  uint64_t v4 = &v2[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_3_95();
  uint64_t result = MEMORY[0x1C8776240](v4);
  if (result)
  {
    uint64_t v6 = *((void *)v4 + 1);
    v17[3] = v3;
    void v17[4] = &protocol witness table for CallCenter;
    v17[0] = v2;
    uint64_t v7 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    v16[3] = v7;
    v16[4] = &protocol witness table for TUConversation;
    v16[0] = v1;
    if (v0)
    {
      *((void *)&v14 + 1) = v7;
      id v15 = &protocol witness table for TUConversation;
      *(void *)&long long v13 = v0;
    }
    else
    {
      id v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(void (**)(void *, void *, long long *, uint64_t, uint64_t))(v6 + 272);
    uint64_t v10 = v2;
    id v11 = v1;
    id v12 = v0;
    v9(v17, v16, &v13, ObjectType, v6);
    swift_unknownObjectRelease();
    outlined destroy of Conversation?((uint64_t)&v13, &demangling cache variable for type metadata for Conversation?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  return result;
}

#error "1C32F72D4: call analysis failed (funcsize=42)"

void CallCenter.reactionsController(_:conversation:participant:didReact:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, _UNKNOWN **a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, _UNKNOWN **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_17_39();
  a33 = v35;
  a34 = v36;
  uint64_t v37 = v34;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v47 = &v37[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v47))
  {
    uint64_t v48 = *((void *)v47 + 1);
    uint64_t v49 = swift_getObjectType();
    a18 = ObjectType;
    a19 = &protocol witness table for CallCenter;
    a15 = v37;
    a13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    a14 = &protocol witness table for TUConversation;
    a10 = v45;
    Swift::String v50 = *(void (**)(char **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 144);
    Swift::String v51 = v37;
    id v52 = v45;
    v50(&a15, &a10, v43, v41, v39, v49, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a15);
  }
  OUTLINED_FUNCTION_16_36();
}

#error "1C32F74F8: call analysis failed (funcsize=43)"

void CallCenter.reactionsController(_:conversation:participantDidStopReacting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, _UNKNOWN **a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, _UNKNOWN **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_5_89();
  a31 = v34;
  a32 = v35;
  uint64_t v36 = OUTLINED_FUNCTION_12_47();
  uint64_t v37 = &v33[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v37))
  {
    OUTLINED_FUNCTION_26_27();
    a18 = v36;
    a19 = &protocol witness table for CallCenter;
    a15 = v33;
    a13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    a14 = &protocol witness table for TUConversation;
    a10 = v32;
    uint64_t v38 = (void (*)(void))*((void *)v37 + 19);
    uint64_t v39 = v33;
    id v40 = v32;
    OUTLINED_FUNCTION_14_45();
    v38();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a15);
  }
  OUTLINED_FUNCTION_4_82();
}

#error "1C32F7664: call analysis failed (funcsize=36)"

void CallCenter.routesChanged(for:)()
{
  id v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit10CallCenter_tuCallCenter], sel_routeController);
  char v4 = static NSObject.== infix(_:_:)();

  if (v4)
  {
    uint64_t v5 = &v1[OBJC_IVAR____TtC15ConversationKit10CallCenter_delegate];
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v5))
    {
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t v7 = swift_getObjectType();
      v10[3] = ObjectType;
      v10[4] = &protocol witness table for CallCenter;
      v10[0] = v1;
      uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 176);
      uint64_t v9 = v1;
      v8(v10, v7, v6);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }
  }
}

void specialized PlaceholderCallCenter.downgradeToAVLess(for:)(void *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(a2 + OBJC_IVAR____TtC15ConversationKit21PlaceholderCallCenter_queue);
  *(void *)uint64_t v9 = v10;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBE8], v6);
  id v11 = a1;
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v6 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_msgSend(v11, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  PlaceholderCallCenter.setAVMode(_:for:)();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v23 = (uint64_t)&v23;
  uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v18 = MEMORY[0x1F4188790](v16 - 8);
  unint64_t v3 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v24 = v11;
  MEMORY[0x1F4188790](v18);
  uint64_t v25 = v13;
  objc_super v2 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v2(v9, v9, v6);
  swift_beginAccess();
  specialized Set._Variant.update(with:)((unint64_t)v9, (uint64_t)&v23 - v3);
  outlined destroy of Conversation?((uint64_t)&v23 - v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  if (one-time initialization token for conversationKit != -1) {
LABEL_5:
  }
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
  MEMORY[0x1F4188790](v19);
  v2((char *)&v23 - v3, v9, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)&v23 - v3, 0, 1, v6);
  uint64_t v20 = specialized >> prefix<A>(_:)((uint64_t)&v23 - v3);
  uint64_t v22 = v21;
  outlined destroy of Conversation?((uint64_t)&v23 - v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v19 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
}

uint64_t partial apply for closure #1 in CallCenter.setGridDisplayMode(mode:for:)(id *a1)
{
  return closure #1 in CallCenter.setGridDisplayMode(mode:for:)(a1) & 1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed Call) -> (@unowned Bool)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed Call) -> (@unowned Bool)(a1, *(uint64_t (**)(uint64_t, unint64_t))(v1 + 16));
}

uint64_t _sSo6TUCallCSbIggd_ABSbIeggd_TRTA_0(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed TUCall) -> (@unowned Bool)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1C32F7C6C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallCenter.buzz(_:in:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CallCenter.buzz(_:in:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), (uint64_t)"Buzzing participant via TUCallCenter: %@ %@", 43, (SEL *)&selRef_buzzMember_conversation_);
}

void partial apply for closure #1 in CallCenter.kick(_:in:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CallCenter.buzz(_:in:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), (uint64_t)"Kicking out participant via TUCallCenter: %@ %@", 47, (SEL *)&selRef_kickMember_conversation_);
}

void partial apply for closure #1 in CallCenter.approve(_:in:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CallCenter.buzz(_:in:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), (uint64_t)"Approving participant via TUCallCenter: %@ %@", 45, (SEL *)&selRef_approvePendingMember_forConversation_);
}

void partial apply for closure #1 in CallCenter.reject(_:in:)(uint64_t a1, uint64_t a2)
{
  closure #1 in CallCenter.buzz(_:in:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), (uint64_t)"Rejecting pending participant via TUCallCenter: %@ %@", 53, (SEL *)&selRef_rejectPendingMember_forConversation_);
}

uint64_t partial apply for closure #1 in CallCenter.generateLink(for:completionHandler:)(id *a1)
{
  return closure #1 in CallCenter.setDownlinkMuted(_:forRemoteParticipantsIn:)(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C32F7DC8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CallCenter.conversationManager(_:activeRemoteParticipantsChangedFor:)(void *a1)
{
  return closure #1 in CallCenter.conversationManager(_:activeRemoteParticipantsChangedFor:)(a1, *(void **)(v1 + 16));
}

uint64_t method lookup function for CallCenter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallCenter);
}

uint64_t dispatch thunk of CallCenter.__allocating_init(callCenter:placeholderCallCenter:shouldRegisterForMediaControllerChanges:shouldRegisterForReactionsControllerChanges:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t partial apply for closure #1 in CallCenter.setDownlinkMuted(_:forRemoteParticipantsIn:)(id *a1)
{
  return partial apply for closure #1 in CallCenter.generateLink(for:completionHandler:)(a1) & 1;
}

id CallRecordingEducationViewController.__allocating_init()()
{
  uint64_t v1 = String.localizedCallRecording.getter();
  uint64_t v2 = (void *)MEMORY[0x1C87730B0](v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = static CallRecordingEducationViewController.educationScreenSubtitle.getter();
  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x1C87730B0](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(v0), sel_initWithTitle_detailText_icon_contentLayout_, v2, v5, 0, 1);

  return v6;
}

uint64_t key path getter for CallRecordingEducationViewController.delegate : CallRecordingEducationViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CallRecordingEducationViewController.delegate : CallRecordingEducationViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t CallRecordingEducationViewController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t CallRecordingEducationViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CallRecordingEducationViewController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton()
{
  id v0 = objc_msgSend(self, sel_boldButton);
  uint64_t v1 = String.localizedCallRecording.getter();
  outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(v1, v2, 0, v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  objc_msgSend(v0, sel_addTarget_action_forControlEvents_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), sel_handleTappedEducationScreenContinue, 64, _s15ConversationKit36CallRecordingEducationViewControllerCACIego_Ieggo_ACxRi_zRi0_zlyACIsegr_Iegnr_TR04_s15a5Kit36cdefG94C14continueButton33_655044DE3502CE4C2EC422ECD64F29E5LLSo010OBBoldTrayI0CvpfiAGyXEfU_ACycACcfu_Tf3nnpf_n, 0);
  swift_unknownObjectRelease();
  return v0;
}

id (*implicit closure #1 in closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton(void *a1))()
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton;
}

id implicit closure #2 in implicit closure #1 in closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton(void *a1)
{
  id v1 = objc_msgSend(a1, sel_self);
  return v1;
}

uint64_t _s15ConversationKit36CallRecordingEducationViewControllerCACIego_Ieggo_ACxRi_zRi0_zlyACIsegr_Iegnr_TR04_s15a5Kit36cdefG94C14continueButton33_655044DE3502CE4C2EC422ECD64F29E5LLSo010OBBoldTrayI0CvpfiAGyXEfU_ACycACcfu_Tf3nnpf_n@<X0>(void **a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = implicit closure #1 in closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton(*a1);
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned CallRecordingEducationViewController);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

Swift::Void __swiftcall CallRecordingEducationViewController.setupView()()
{
  OUTLINED_FUNCTION_24_0();
  id v1 = v0;
  id v2 = (void *)specialized static UIImage.image(named:)();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v2);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setContentMode_, 1);
  id v4 = objc_msgSend(v1, sel_buttonTray);
  objc_msgSend(v4, sel_addButton_, *(void *)&v1[OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_continueButton]);

  id v5 = OUTLINED_FUNCTION_1_104();
  objc_msgSend(v5, sel_addSubview_, v3);

  id v6 = OUTLINED_FUNCTION_1_104();
  objc_msgSend(v6, sel_setBackgroundColor_, 0);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769F40;
  id v8 = OUTLINED_FUNCTION_1_104();
  id v9 = objc_msgSend(v8, sel_heightAnchor);

  id v10 = objc_msgSend(v1, sel_view);
  if (v10)
  {
    id v11 = v10;
    id v12 = self;
    id v13 = objc_msgSend(v11, sel_widthAnchor);

    id v14 = objc_msgSend(v9, sel_constraintEqualToAnchor_multiplier_, v13, 0.4);
    *(void *)(v7 + 32) = v14;
    id v15 = objc_msgSend(v3, sel_centerXAnchor);
    id v16 = OUTLINED_FUNCTION_1_104();
    id v17 = objc_msgSend(v16, sel_centerXAnchor);

    id v18 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v17);
    *(void *)(v7 + 40) = v18;
    id v19 = objc_msgSend(v3, sel_bottomAnchor);
    id v20 = OUTLINED_FUNCTION_1_104();
    id v21 = objc_msgSend(v20, sel_bottomAnchor);

    id v22 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v21);
    *(void *)(v7 + 48) = v22;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_activateConstraints_, isa);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
    v28.value.super.super.Class isa = 0;
    v28.is_nil = 0;
    Class v27 = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemCancel, v28, v29).super.super.isa;
    [(objc_class *)v27 setAction:sel_handleTappedEducationScreenCancel];
    [(objc_class *)v27 setTarget:v1];
    id v24 = objc_msgSend(v1, sel_navigationItem);
    objc_msgSend(v24, sel_setLeftBarButtonItem_, v27);

    objc_msgSend(v1, sel_setModalPresentationStyle_, 7);
    OUTLINED_FUNCTION_22();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static CallRecordingEducationViewController.educationScreenSubtitle.getter()
{
  void (*v0)(uint64_t *__return_ptr, uint64_t);
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v0 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)static CallRecordingAvailabilityManager.shared
                                                             + 80);
  id v1 = swift_retain();
  v0(&v3, v1);
  swift_release();
  uint64_t result = 0;
  switch((char)v3)
  {
    case 3:
      return result;
    default:
      uint64_t result = String.localizedCallRecording.getter();
      break;
  }
  return result;
}

void CallRecordingEducationViewController.handleTappedEducationScreenContinue()()
{
}

uint64_t closure #1 in CallRecordingEducationViewController.handleTappedEducationScreenContinue()(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void CallRecordingEducationViewController.handleTappedEducationScreenCancel()()
{
}

void CallRecordingEducationViewController.handleTappedEducationScreenContinue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  void v9[4] = a2;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = a3;
  uint64_t v7 = _Block_copy(v9);
  id v8 = v3;
  swift_release();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, v7);
  _Block_release(v7);
}

uint64_t closure #1 in CallRecordingEducationViewController.handleTappedEducationScreenCancel()(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

id CallRecordingEducationViewController.__allocating_init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v8 = v7;
  id v14 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    id v15 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    id v16 = 0;
    goto LABEL_6;
  }
  id v15 = (void *)MEMORY[0x1C87730B0](a3, a4);
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  id v16 = (void *)MEMORY[0x1C87730B0](a5, a6);
  swift_bridgeObjectRelease();
LABEL_6:
  id v17 = objc_msgSend(objc_allocWithZone(v8), sel_initWithTitle_detailText_symbolName_contentLayout_, v14, v15, v16, a7);

  return v17;
}

void CallRecordingEducationViewController.init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_24_0();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  *(void *)&v21[OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v38 = OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_continueButton;
  uint64_t v39 = v21;
  *(void *)&v21[v38] = closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton();

  id v40 = (void *)MEMORY[0x1C87730B0](v37, v35);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    uint64_t v41 = 0;
    if (v27) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v42 = 0;
    goto LABEL_6;
  }
  uint64_t v41 = (void *)MEMORY[0x1C87730B0](v33, v31);
  swift_bridgeObjectRelease();
  if (!v27) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v42 = (void *)MEMORY[0x1C87730B0](v29, v27);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v43 = (objc_class *)type metadata accessor for CallRecordingEducationViewController();
  a9.receiver = v39;
  a9.super_class = v43;
  objc_msgSendSuper2(&a9, sel_initWithTitle_detailText_symbolName_contentLayout_, v40, v41, v42, v25);

  OUTLINED_FUNCTION_22();
}

#error "1C32F8D74: call analysis failed (funcsize=42)"

id CallRecordingEducationViewController.__allocating_init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  id v12 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    id v13 = (void *)MEMORY[0x1C87730B0](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v13 = 0;
  }
  id v14 = objc_msgSend(objc_allocWithZone(v7), sel_initWithTitle_detailText_icon_contentLayout_, v12, v13, a5, a6);

  return v14;
}

void CallRecordingEducationViewController.init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_24_0();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  *(void *)&v21[OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v36 = OBJC_IVAR____TtC15ConversationKit36CallRecordingEducationViewController_continueButton;
  uint64_t v37 = v21;
  *(void *)&v21[v36] = closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton();

  uint64_t v38 = (void *)MEMORY[0x1C87730B0](v35, v33);
  swift_bridgeObjectRelease();
  if (v29)
  {
    uint64_t v39 = (void *)MEMORY[0x1C87730B0](v31, v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = 0;
  }
  id v40 = (objc_class *)type metadata accessor for CallRecordingEducationViewController();
  a9.receiver = v37;
  a9.super_class = v40;
  objc_msgSendSuper2(&a9, sel_initWithTitle_detailText_icon_contentLayout_, v38, v39, v27, v25);

  OUTLINED_FUNCTION_22();
}

#error "1C32F8FB0: call analysis failed (funcsize=37)"

id CallRecordingEducationViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallRecordingEducationViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CallRecordingEducationViewController()
{
  return self;
}

uint64_t method lookup function for CallRecordingEducationViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallRecordingEducationViewController);
}

uint64_t dispatch thunk of CallRecordingEducationViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CallRecordingEducationViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CallRecordingEducationViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CallRecordingEducationViewController.setupView()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t sub_1C32F9160()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CallRecordingEducationViewController.handleTappedEducationScreenCancel()()
{
  return closure #1 in CallRecordingEducationViewController.handleTappedEducationScreenCancel()(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in CallRecordingEducationViewController.handleTappedEducationScreenContinue()()
{
  return closure #1 in CallRecordingEducationViewController.handleTappedEducationScreenContinue()(*(void **)(v0 + 16));
}

uint64_t sub_1C32F91A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned CallRecordingEducationViewController)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

id partial apply for implicit closure #2 in implicit closure #1 in closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton()
{
  return implicit closure #2 in implicit closure #1 in closure #1 in variable initialization expression of CallRecordingEducationViewController.continueButton(*(void **)(v0 + 16));
}

uint64_t ParticipantViewDragController.dragEnabled.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned __int8 *)(v0 + 16);
}

void ParticipantViewDragController.dragEnabled.setter(char a1)
{
  OUTLINED_FUNCTION_11_0();
  char v3 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(v1 + 16) = a1;
  ParticipantViewDragController.dragEnabled.didset(v3);
}

void ParticipantViewDragController.dragEnabled.didset(char a1)
{
  int v2 = a1 & 1;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 16) != v2)
  {
    objc_msgSend(*(id *)(v1 + 96), sel_setEnabled_);
    uint64_t v3 = MEMORY[0x1C8776240](v1 + 40);
    if (v3)
    {
      id v4 = (void *)v3;
      uint64_t v5 = *(void *)(v1 + 48);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void, uint64_t, uint64_t))(v5 + 16))(*(unsigned __int8 *)(v1 + 16), ObjectType, v5);
    }
  }
}

void (*ParticipantViewDragController.dragEnabled.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *(unsigned char *)(v1 + 16);
  return ParticipantViewDragController.dragEnabled.modify;
}

void ParticipantViewDragController.dragEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ParticipantViewDragController.dragEnabled.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t ParticipantViewDragController.delegate.getter()
{
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 24);
}

uint64_t ParticipantViewDragController.delegate.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_11_0();
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ParticipantViewDragController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = v4;
  v3[4] = v5;
  return CaptionsViewDragController.delegate.modify;
}

uint64_t ParticipantViewDragController.isDragging.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t ParticipantViewDragController.isDragging.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 88) = a1;
  return result;
}

uint64_t (*ParticipantViewDragController.isDragging.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t ParticipantViewDragController.__allocating_init(participantView:constraintIdentifier:)()
{
  OUTLINED_FUNCTION_4_83();
  uint64_t v0 = (void *)OUTLINED_FUNCTION_2_91();
  return specialized ParticipantViewDragController.__allocating_init(participantView:constraintIdentifier:)(v0, v1, v2, v3, v4, v5);
}

uint64_t ParticipantViewDragController.init(participantView:constraintIdentifier:)()
{
  OUTLINED_FUNCTION_4_83();
  uint64_t v0 = (void *)OUTLINED_FUNCTION_2_91();
  return specialized ParticipantViewDragController.init(participantView:constraintIdentifier:)(v0, v1, v2, v3, v4, v5);
}

id static ParticipantViewDragController.boingAnimator(usingVelocity:)(double a1, double a2)
{
  if (one-time initialization token for springStiffness != -1) {
    swift_once();
  }
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C58]), sel_initWithMass_stiffness_damping_initialVelocity_, 4.5, *(double *)&static Animation.LocalPreview.springStiffness, 95.0, a1 * 0.00333333333, a2 * 0.00333333333);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1ED8]), sel_initWithDuration_timingParameters_, v4, 0.0);

  return v5;
}

Swift::Void __swiftcall ParticipantViewDragController.handlePanGestureRecognizer(_:)(UIPanGestureRecognizer *a1)
{
  switch((unint64_t)[(UIPanGestureRecognizer *)a1 state])
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      id v10 = (void *)MEMORY[0x1C8776240](v1 + 40);
      [(UIPanGestureRecognizer *)a1 locationInView:v10];
      unint64_t v12 = v11;
      unint64_t v14 = v13;

      ParticipantViewDragController.handleDragDidBegin(with:)((CGPoint)__PAIR128__(v14, v12));
      id v9 = (void *)MEMORY[0x1C8776240](v1 + 40);
      if (v9) {
        goto LABEL_11;
      }
      id v16 = 0;
      goto LABEL_14;
    case 2uLL:
      id v9 = (void *)MEMORY[0x1C8776240](v1 + 40);
      if (v9)
      {
LABEL_11:
        id v15 = v9;
        id v16 = objc_msgSend(v9, sel_superview);
      }
      else
      {
        id v16 = 0;
      }
LABEL_14:
      [(UIPanGestureRecognizer *)a1 locationInView:v16];

      OUTLINED_FUNCTION_3_96();
      ParticipantViewDragController.handleDragDidMove(to:)((CGPoint)__PAIR128__(v18, v17));
      break;
    case 3uLL:
    case 4uLL:
    case 5uLL:
      uint64_t v3 = (void *)MEMORY[0x1C8776240](v1 + 40);
      if (v3
        && (v4 = v3, id v22 = objc_msgSend(v3, sel_superview), v4, v22))
      {
        [(UIPanGestureRecognizer *)a1 velocityInView:v22];
        ParticipantViewDragController.handleDragDidEnd(with:)((CGPoint)__PAIR128__(v6, v5));
        OUTLINED_FUNCTION_3_96();
      }
      else
      {
LABEL_7:
        OUTLINED_FUNCTION_3_96();
      }
      break;
    default:
      _StringGuts.grow(_:)(73);
      v20._object = (void *)0x80000001C37A6F10;
      v20._countAndFlagsBits = 0xD000000000000047;
      String.append(_:)(v20);
      [(UIPanGestureRecognizer *)a1 state];
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1C32F99A8);
  }
}

Swift::Void __swiftcall ParticipantViewDragController.handleDragDidBegin(with:)(CGPoint with)
{
  CGFloat y = with.y;
  CGFloat x = with.x;
  id v4 = (void *)MEMORY[0x1C8776240](v1 + 40);
  if (v4 && (v5 = v4, id v6 = objc_msgSend(v4, sel_superview), v5, v6))
  {
    *(CGFloat *)(v1 + 72) = x;
    *(CGFloat *)(v1 + 80) = y;
    OUTLINED_FUNCTION_11_0();
    *(unsigned char *)(v1 + 88) = 1;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v1 + 24))
    {
      uint64_t v7 = *(void *)(v1 + 32);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v1, ObjectType, v7);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
    if (MEMORY[0x1C8776240](v1 + 40))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DraggableView);
      uint64_t v10 = String.init<A>(reflecting:)();
      unint64_t v12 = v11;
    }
    else
    {
      unint64_t v12 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    ParticipantViewDragController.dragEnabled.setter(0);
  }
  OUTLINED_FUNCTION_3_96();
}

Swift::Void __swiftcall ParticipantViewDragController.handleDragDidMove(to:)(CGPoint to)
{
  double y = to.y;
  double x = to.x;
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 40);
  if (v4)
  {
    unint64_t v5 = (void *)v4;
    OUTLINED_FUNCTION_2();
    if (*(unsigned char *)(v1 + 88) == 1)
    {
      id v6 = objc_msgSend(v5, sel_superview);
      if (v6)
      {
        uint64_t v7 = v6;
        double v8 = x - *(double *)(v1 + 72);
        double v9 = y - *(double *)(v1 + 80);
        id v10 = v5;
        objc_msgSend(v10, sel_frame);
        objc_msgSend(v10, sel_setFrame_, v8, v9);

        return;
      }
    }
  }
  OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 88) = 0;
}

Swift::Void __swiftcall ParticipantViewDragController.handleDragDidEnd(with:)(CGPoint with)
{
  double y = with.y;
  double x = with.x;
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 40);
  if (v4)
  {
    unint64_t v5 = (void *)v4;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v1 + 24))
    {
      uint64_t v6 = *(void *)(v1 + 32);
      OUTLINED_FUNCTION_11_0();
      if (*(unsigned char *)(v1 + 88))
      {
        *(unsigned char *)(v1 + 88) = 0;
        objc_msgSend(v5, sel_center);
        double v8 = x * 0.3 + v7;
        objc_msgSend(v5, sel_center);
        double v10 = y * 0.3 + v9;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v6 + 16))(v1, ObjectType, v6, v8, v10, x, y);

        swift_unknownObjectRelease();
        return;
      }

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
  ParticipantViewDragController.dragEnabled.setter(0);
  OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 88) = 0;
}

uint64_t ParticipantViewDragController.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 24);
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 40);
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ParticipantViewDragController.__deallocating_deinit()
{
  ParticipantViewDragController.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized ParticipantViewDragController.__allocating_init(participantView:constraintIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject();
  return specialized ParticipantViewDragController.init(participantView:constraintIdentifier:)(a1, a2, a3, v11, a5, a6);
}

uint64_t specialized ParticipantViewDragController.init(participantView:constraintIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a4 + 48) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 88) = 0;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A58]), sel_init);
  *(void *)(a4 + 96) = v11;
  *(void *)(a4 + 48) = a6;
  swift_unknownObjectWeakAssign();
  *(void *)(a4 + 56) = a2;
  *(void *)(a4 + 64) = a3;
  objc_msgSend(v11, sel_addTarget_action_, a4, sel_handlePanGestureRecognizer_);
  objc_msgSend(v11, sel_setEnabled_, 0);
  objc_msgSend(a1, sel_addGestureRecognizer_, v11);

  return a4;
}

void sub_1C32FA000(char *a1)
{
}

uint64_t dispatch thunk of ParticipantViewDragControllerDelegate.participantViewDragControllerDidStartDrag(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ParticipantViewDragControllerDelegate.participantViewDragController(_:didEndDragAtPosition:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DraggableView.dragEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DraggableView.dragEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DraggableView.dragEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for ParticipantViewDragController()
{
  return self;
}

uint64_t method lookup function for ParticipantViewDragController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantViewDragController);
}

uint64_t dispatch thunk of ParticipantViewDragController.__allocating_init(participantView:constraintIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

void one-time initialization function for interItemSpacing()
{
  static BadgedLabel.Constants.interItemSpacing = 0x4008000000000000;
}

uint64_t key path getter for BadgedLabel.badge : BadgedLabel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t key path setter for BadgedLabel.badge : BadgedLabel(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  id v4 = *a1;
  return v3(v2);
}

id BadgedLabel.badge.didset(void *a1)
{
  v22[3] = *MEMORY[0x1E4F143B8];
  swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
  id v4 = a1;
  id v5 = v1;
  id v6 = v4;
  double v7 = (char *)v5;
  double v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    id v11 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v22[0] = v21;
    *(_DWORD *)uint64_t v10 = 136446722;
    uint64_t v12 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    unint64_t v14 = (void **)&v7[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge];
    swift_beginAccess();
    id v15 = *v14;
    if (*v14)
    {
      uint64_t v20 = v10 + 22;
      id v16 = v15;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v11 = v15;

    *(_WORD *)(v10 + 22) = 2112;
    if (a1) {
      id v17 = v6;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = a1;

    _os_log_impl(&dword_1C2F90000, v8, v9, "[%{public}s] setting badge to %@ from %@", (uint8_t *)v10, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v21, -1, -1);
    MEMORY[0x1C87760E0](v10, -1, -1);
  }
  else
  {
  }
  objc_msgSend(v6, sel_removeFromSuperview, v20);
  unint64_t v18 = &v7[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge];
  swift_beginAccess();
  if (*(void *)v18) {
    objc_msgSend(v7, sel_addSubview_);
  }
  return objc_msgSend(v7, sel_setNeedsLayout);
}

void *BadgedLabel.badge.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void BadgedLabel.badge.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
  id v5 = a1;
  BadgedLabel.badge.didset(v4);
}

void (*BadgedLabel.badge.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge);
  swift_beginAccess();
  id v5 = *v4;
  v3[3] = *v4;
  id v6 = v5;
  return BadgedLabel.badge.modify;
}

void BadgedLabel.badge.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  id v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  if (a2)
  {
    id v5 = v3;
    BadgedLabel.badge.setter(v3);
  }
  else
  {
    BadgedLabel.badge.setter(*(void **)(*(void *)a1 + 24));
  }
  free(v2);
}

uint64_t key path getter for BadgedLabel.attributedText : BadgedLabel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t key path setter for BadgedLabel.attributedText : BadgedLabel(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  id v4 = *a1;
  return v3(v2);
}

id BadgedLabel.attributedText.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label), sel_attributedText);
  return v1;
}

void BadgedLabel.attributedText.setter(void *a1)
{
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label], sel_setAttributedText_, a1);
  objc_msgSend(v1, sel_setNeedsLayout);
}

void (*BadgedLabel.attributedText.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label), sel_attributedText);
  return BadgedLabel.attributedText.modify;
}

void BadgedLabel.attributedText.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    BadgedLabel.attributedText.setter(v2);
  }
  else
  {
    BadgedLabel.attributedText.setter(*a1);
  }
}

id BadgedLabel.font.getter()
{
  id result = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label), sel_font));
  if (!result) {
    __break(1u);
  }
  return result;
}

double BadgedLabel.glyphInsetFromTop.getter()
{
  uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label);
  objc_msgSend(v1, sel__tightBoundingRectOfFirstLine);
  id v2 = objc_msgSend(v1, sel_convertPoint_toCoordinateSpace_, v0);
  double v4 = v3;
  id v5 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))(v2);
  if (v5)
  {
    id v6 = v5;
    objc_msgSend(v5, sel_frame);
    double MinY = CGRectGetMinY(v9);

    if (MinY < v4) {
      return MinY;
    }
  }
  return v4;
}

id BadgedLabel.__allocating_init(label:badge:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return BadgedLabel.init(label:badge:)(a1, a2);
}

id BadgedLabel.init(label:badge:)(void *a1, void *a2)
{
  id v5 = (void **)&v2[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge];
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge] = 0;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label] = a1;
  swift_beginAccess();
  id v6 = *v5;
  void *v5 = a2;
  id v7 = a1;
  id v8 = a2;

  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for BadgedLabel();
  id v9 = objc_msgSendSuper2(&v12, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, sel_addSubview_, v7);
  if (a2)
  {
    id v10 = v9;
    objc_msgSend(v10, sel_addSubview_, v8);
  }
  return v9;
}

uint64_t type metadata accessor for BadgedLabel()
{
  return self;
}

uint64_t BadgedLabel.__allocating_init(font:textColor:badge:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for UILabel();
  id v6 = a1;
  id v7 = a2;
  v11.value.super.Class isa = (Class)a2;
  UILabel.init(font:textColor:)(v8, (UIFont)v6, v11);
  uint64_t v9 = (*(uint64_t (**)(void))(v3 + 160))();

  return v9;
}

id BadgedLabel.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void BadgedLabel.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit11BadgedLabel_badge] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall BadgedLabel.layoutSubviews()()
{
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  id v3 = v0;
  double v4 = (void *)Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  id v6 = &selRef_ringButton;
  if (OUTLINED_FUNCTION_21_0(v5))
  {
    id v7 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    double v192 = COERCE_DOUBLE(OUTLINED_FUNCTION_14_3());
    _DWORD *v7 = 136446466;
    uint64_t v8 = OUTLINED_FUNCTION_10_54();
    v197[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, (uint64_t *)&v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    objc_msgSend(v3, sel_bounds);
    uint64_t v10 = CGRect.description.getter();
    v197[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v192);
    id v6 = &selRef_ringButton;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_61(&dword_1C2F90000, v12, v13, "[%{public}s][sizing] bounds %s");
    OUTLINED_FUNCTION_23_33();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  [v3 v6[203]];
  double v16 = BadgedLabel.makeBadgeSize(fitting:)(v14, v15);
  double v18 = v17;
  BOOL v19 = v16 > 2.22507386e-308;
  if (v17 <= 2.22507386e-308) {
    BOOL v19 = 0;
  }
  HIDWORD(v182) = v19;
  uint64_t v20 = (void *)Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_0(v21))
  {
    id v22 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    v197[0] = OUTLINED_FUNCTION_14_3();
    *id v22 = 136446466;
    uint64_t v23 = OUTLINED_FUNCTION_10_54();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v197);
    OUTLINED_FUNCTION_21_32();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    double v192 = v16;
    double v193 = v18;
    type metadata accessor for CGSize(0);
    uint64_t v25 = OUTLINED_FUNCTION_8_56();
    double v192 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v197));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_61(&dword_1C2F90000, v27, v28, "[%{public}s][layout] badgeSize %s");
    OUTLINED_FUNCTION_23_33();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v29 = (void *)Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_0(v30))
  {
    uint64_t v31 = (_DWORD *)swift_slowAlloc();
    double v192 = COERCE_DOUBLE(OUTLINED_FUNCTION_9_0());
    *uint64_t v31 = 136446466;
    uint64_t v32 = OUTLINED_FUNCTION_10_54();
    v197[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_28();
    int v34 = HIDWORD(v182);
    LODWORD(v197[0]) = HIDWORD(v182);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_28_25(&dword_1C2F90000, v35, v36, "[%{public}s][layout] hasBadge %{BOOL}d");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    uint64_t v37 = &selRef_ringButton;
  }
  else
  {

    uint64_t v37 = &selRef_ringButton;
    int v34 = HIDWORD(v182);
  }
  [v3 v37[203]];
  double Width = CGRectGetWidth(v200);
  if (v34)
  {
    if (one-time initialization token for interItemSpacing != -1) {
      swift_once();
    }
    double Width = Width - v16 - *(double *)&static BadgedLabel.Constants.interItemSpacing;
  }
  [v3 v37[203]];
  double Height = CGRectGetHeight(v201);
  id v40 = *(void **)((char *)v3 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label);
  objc_msgSend(v40, sel_sizeThatFits_, Width, Height);
  *(double *)&uint64_t v42 = v41;
  double v44 = v43;
  double v198 = v41;
  double v199 = v43;
  if (Width < v41)
  {
    double v198 = Width;
    *(double *)&uint64_t v42 = Width;
  }
  uint64_t v45 = (void *)Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_12_4(v46))
  {
    os_log_type_t v1 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_30_23();
    uint64_t v47 = OUTLINED_FUNCTION_6_82(4.8752e-34);
    OUTLINED_FUNCTION_13_52(v47, v48, v49, v50, v51, v52, v53, v54, v159, v164, v170, (uint64_t)v176, v182, ObjectType);
    OUTLINED_FUNCTION_1_105();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_31();
    double v192 = Width;
    double v193 = Height;
    type metadata accessor for CGSize(0);
    uint64_t v55 = OUTLINED_FUNCTION_8_56();
    OUTLINED_FUNCTION_13_52(v55, v56, v57, v58, v59, v60, v61, v62, v160, v165, v171, (uint64_t)v177, v183, v188);
    OUTLINED_FUNCTION_2_92();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_4_84(&dword_1C2F90000, v63, v64, "[%{public}s][layout] labelFittingSize %s");
    OUTLINED_FUNCTION_12_48();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    *(double *)&uint64_t v42 = v198;
  }
  else
  {
  }
  id v65 = (void *)Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  id v178 = v40;
  if (OUTLINED_FUNCTION_12_4(v66))
  {
    os_log_type_t v1 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_30_23();
    uint64_t v67 = OUTLINED_FUNCTION_6_82(4.8752e-34);
    OUTLINED_FUNCTION_13_52(v67, v68, v69, v70, v71, v72, v73, v74, v159, v164, v170, (uint64_t)v40, v182, ObjectType);
    OUTLINED_FUNCTION_1_105();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_31();
    double v192 = *(double *)&v42;
    double v193 = v44;
    type metadata accessor for CGSize(0);
    uint64_t v75 = OUTLINED_FUNCTION_8_56();
    OUTLINED_FUNCTION_13_52(v75, v76, v77, v78, v79, v80, v81, v82, v161, v166, v172, (uint64_t)v179, v184, v189);
    OUTLINED_FUNCTION_2_92();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_4_84(&dword_1C2F90000, v83, v84, "[%{public}s][layout] labelSize %s");
    OUTLINED_FUNCTION_12_48();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(v3, sel_bounds);
  double v85 = (CGRectGetHeight(v202) - v18) * 0.5;
  uint64_t v167 = (*MEMORY[0x1E4FBC8C8] & *v3) + 96;
  v173 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x60);
  id v86 = (void *)v173();
  double v87 = OUTLINED_FUNCTION_32_23();
  objc_msgSend(v88, v89, v87);

  id v90 = (void *)Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_12_4(v91))
  {
    os_log_type_t v1 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_30_23();
    uint64_t v92 = OUTLINED_FUNCTION_6_82(4.8752e-34);
    OUTLINED_FUNCTION_13_52(v92, v93, v94, v95, v96, v97, v98, v99, v159, v167, (uint64_t)v173, (uint64_t)v178, v182, ObjectType);
    OUTLINED_FUNCTION_1_105();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_24();
    double v193 = v85;
    type metadata accessor for CGPoint(0);
    uint64_t v100 = OUTLINED_FUNCTION_8_56();
    OUTLINED_FUNCTION_13_52(v100, v101, v102, v103, v104, v105, v106, v107, v162, v168, v174, (uint64_t)v180, v185, v190);
    OUTLINED_FUNCTION_2_92();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_4_84(&dword_1C2F90000, v108, v109, "[%{public}s][layout] badgeOrigin %s");
    OUTLINED_FUNCTION_12_48();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v110 = (void *)Logger.logObject.getter();
  os_log_type_t v111 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_12_4(v111))
  {
    os_log_type_t v1 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_30_23();
    uint64_t v112 = OUTLINED_FUNCTION_6_82(4.8752e-34);
    OUTLINED_FUNCTION_13_52(v112, v113, v114, v115, v116, v117, v118, v119, v159, v167, (uint64_t)v173, (uint64_t)v178, v182, ObjectType);
    OUTLINED_FUNCTION_1_105();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_24();
    double v193 = v85;
    double v194 = v16;
    double v195 = v18;
    type metadata accessor for CGRect(0);
    uint64_t v120 = OUTLINED_FUNCTION_8_56();
    OUTLINED_FUNCTION_13_52(v120, v121, v122, v123, v124, v125, v126, v127, v163, v169, v175, (uint64_t)v181, v186, v191);
    OUTLINED_FUNCTION_2_92();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_4_84(&dword_1C2F90000, v128, v129, "[%{public}s][layout] badgeFrame %s");
    OUTLINED_FUNCTION_12_48();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  double v130 = 0.0;
  if (HIDWORD(v182))
  {
    v203.origin.double x = OUTLINED_FUNCTION_32_23();
    double MaxX = CGRectGetMaxX(v203);
    if (one-time initialization token for interItemSpacing != -1) {
      swift_once();
    }
    double v130 = MaxX + *(double *)&static BadgedLabel.Constants.interItemSpacing;
  }
  objc_msgSend(v3, sel_bounds);
  double v132 = (CGRectGetHeight(v204) - v44) * 0.5;
  swift_beginAccess();
  objc_msgSend(v178, sel_setFrame_, v130, v132, v198, v44);
  v133 = (void *)Logger.logObject.getter();
  os_log_type_t v134 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_12_4(v134))
  {
    os_log_type_t v1 = OUTLINED_FUNCTION_15_1();
    v196[0] = OUTLINED_FUNCTION_14_3();
    uint64_t v135 = OUTLINED_FUNCTION_6_82(4.8752e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, v196);
    OUTLINED_FUNCTION_1_105();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_31();
    double v192 = v130;
    double v193 = v132;
    type metadata accessor for CGPoint(0);
    uint64_t v137 = OUTLINED_FUNCTION_8_56();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, v196);
    OUTLINED_FUNCTION_2_92();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_4_84(&dword_1C2F90000, v139, v140, "[%{public}s][layout] labelOrigin %s");
    OUTLINED_FUNCTION_12_48();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  v141 = v3;
  v142 = Logger.logObject.getter();
  os_log_type_t v143 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_0(v143))
  {
    uint64_t v144 = OUTLINED_FUNCTION_15_1();
    v196[0] = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v144 = 136446466;
    uint64_t v145 = OUTLINED_FUNCTION_10_54();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v146, v196);
    OUTLINED_FUNCTION_21_32();
    swift_bridgeObjectRelease();
    *(_WORD *)(v144 + 12) = 2080;
    objc_msgSend(v178, sel_frame);
    double v192 = *(double *)&v147;
    double v193 = v148;
    double v194 = v149;
    double v195 = v150;
    type metadata accessor for CGRect(0);
    uint64_t v151 = String.init<A>(reflecting:)();
    double v192 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, v196));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v142, v1, "[%{public}s][layout] label.frame %s", (uint8_t *)v144, 0x16u);
    OUTLINED_FUNCTION_23_33();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  if (objc_msgSend(v141, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
  {
    v153 = (void *)v173();
    v154 = v153;
    double v192 = MEMORY[0x1E4FBC860];
    if (v153)
    {
      id v155 = v153;
      MEMORY[0x1C87733A0](v178);
      if (*(void *)((*(void *)&v192 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v192 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
        OUTLINED_FUNCTION_33();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      id v156 = v178;
    }
    id v157 = v178;
    MEMORY[0x1C87733A0]();
    if (*(void *)((*(void *)&v192 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v192 & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
      OUTLINED_FUNCTION_33();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    unint64_t v158 = *(void *)&v192;

    specialized Sequence.forEach(_:)(v158, v141);
    swift_bridgeObjectRelease();
  }
}

CGSize __swiftcall BadgedLabel.sizeThatFits(_:)(CGSize a1)
{
  uint64_t v2 = v1;
  double height = a1.height;
  double width = a1.width;
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  id v6 = (void *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_0(v7))
  {
    OUTLINED_FUNCTION_15_1();
    uint64_t v97 = OUTLINED_FUNCTION_14_3();
    uint64_t v8 = OUTLINED_FUNCTION_14_46(4.8752e-34);
    OUTLINED_FUNCTION_25_33(v8, v9, v10, v11, v12, ObjectType);
    OUTLINED_FUNCTION_18_42();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    double v96 = height;
    type metadata accessor for CGSize(0);
    uint64_t v13 = String.init<A>(reflecting:)();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_25_33(v13, v14, v15, v16, v17));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_61(&dword_1C2F90000, v18, v19, "[%{public}s][sizing] fittingSize %s");
    OUTLINED_FUNCTION_23_33();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  double v20 = BadgedLabel.makeBadgeSize(fitting:)(width, height);
  double v22 = v21;
  BOOL v23 = v21 > 2.22507386e-308 && v20 > 2.22507386e-308;
  unint64_t v24 = (void *)Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_0(v25))
  {
    OUTLINED_FUNCTION_15_1();
    uint64_t v97 = OUTLINED_FUNCTION_14_3();
    uint64_t v26 = OUTLINED_FUNCTION_14_46(4.8752e-34);
    OUTLINED_FUNCTION_25_33(v26, v27, v28, v29, v30);
    OUTLINED_FUNCTION_18_42();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_6();
    double v96 = v22;
    type metadata accessor for CGSize(0);
    uint64_t v31 = OUTLINED_FUNCTION_22_32();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_25_33(v31, v32, v33, v34, v35));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_61(&dword_1C2F90000, v36, v37, "[%{public}s][sizing] badgeSize %s");
    OUTLINED_FUNCTION_23_33();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v38 = (void *)Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_0(v39))
  {
    swift_slowAlloc();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_9_0());
    uint64_t v40 = OUTLINED_FUNCTION_14_46(4.8752e-34);
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_28();
    LODWORD(v97) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_28_25(&dword_1C2F90000, v42, v43, "[%{public}s][sizing] hasBadge %{BOOL}d");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  double v44 = width;
  if (v23)
  {
    if (one-time initialization token for interItemSpacing != -1) {
      swift_once();
    }
    double v44 = width - v20 - *(double *)&static BadgedLabel.Constants.interItemSpacing;
  }
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit11BadgedLabel_label), sel_sizeThatFits_, v44, height, ObjectType, *(void *)&v95, *(void *)&v96, v97);
  double v46 = v45;
  double v48 = v47;
  uint64_t v49 = (void *)Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_107(v50))
  {
    uint64_t v51 = OUTLINED_FUNCTION_15_1();
    uint64_t v97 = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v51 = 136446466;
    uint64_t v52 = OUTLINED_FUNCTION_16_37();
    OUTLINED_FUNCTION_29_25(v52, v53, v54, v55, v56);
    OUTLINED_FUNCTION_19_36();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2080;
    double v95 = v44;
    double v96 = height;
    type metadata accessor for CGSize(0);
    uint64_t v57 = OUTLINED_FUNCTION_22_32();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_29_25(v57, v58, v59, v60, v61));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15_51(&dword_1C2F90000, v62, v63, "[%{public}s][sizing] labelFittingSize %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v64 = (void *)Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_107(v65))
  {
    uint64_t v66 = OUTLINED_FUNCTION_15_1();
    uint64_t v97 = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v66 = 136446466;
    uint64_t v67 = OUTLINED_FUNCTION_16_37();
    OUTLINED_FUNCTION_29_25(v67, v68, v69, v70, v71);
    OUTLINED_FUNCTION_19_36();
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 12) = 2080;
    double v95 = v46;
    double v96 = v48;
    type metadata accessor for CGSize(0);
    uint64_t v72 = OUTLINED_FUNCTION_22_32();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_29_25(v72, v73, v74, v75, v76));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15_51(&dword_1C2F90000, v77, v78, "[%{public}s][sizing] labelSize %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (v22 <= v48) {
    double v22 = v48;
  }
  if (v23)
  {
    if (one-time initialization token for interItemSpacing != -1) {
      swift_once();
    }
    double v46 = v46 + v20 + *(double *)&static BadgedLabel.Constants.interItemSpacing;
  }
  uint64_t v79 = (void *)Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_107(v80))
  {
    uint64_t v81 = OUTLINED_FUNCTION_15_1();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_9_0());
    *(_DWORD *)uint64_t v81 = 136446466;
    uint64_t v82 = OUTLINED_FUNCTION_16_37();
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v81 + 12) = 2048;
    uint64_t v97 = *(void *)&v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_15_51(&dword_1C2F90000, v84, v85, "[%{public}s][sizing] measuredHeight %f");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = OUTLINED_FUNCTION_15_1();
    double v95 = COERCE_DOUBLE(OUTLINED_FUNCTION_9_0());
    *(_DWORD *)uint64_t v88 = 136446466;
    uint64_t v89 = OUTLINED_FUNCTION_16_37();
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v88 + 12) = 2048;
    uint64_t v97 = *(void *)&v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v86, v87, "[%{public}s][sizing] measuredWidth %f", (uint8_t *)v88, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (v46 <= width) {
    double v91 = v46;
  }
  else {
    double v91 = width;
  }
  if (v22 <= height) {
    double v92 = v22;
  }
  else {
    double v92 = height;
  }
  result.double height = v92;
  result.double width = v91;
  return result;
}

double BadgedLabel.makeBadgeSize(fitting:)(double a1, double a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x60))();
  if (!v5) {
    return 0.0;
  }
  id v6 = (void *)v5;
  self;
  os_log_type_t v7 = (void *)swift_dynamicCastObjCClass();
  BOOL v8 = v7 == 0;
  if (!v7) {
    os_log_type_t v7 = v6;
  }
  unint64_t v9 = &selRef_sizeThatFits_;
  if (!v8) {
    unint64_t v9 = &selRef_systemLayoutSizeFittingSize_;
  }
  objc_msgSend(v7, *v9, a1, a2);
  double v11 = v10;

  return v11;
}

id BadgedLabel.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void BadgedLabel.init(frame:)()
{
}

id BadgedLabel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BadgedLabel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for AlternatingLabel.attributedText.getter in conformance BadgedLabel()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t protocol witness for AlternatingLabel.attributedText.setter in conformance BadgedLabel()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

void (*protocol witness for AlternatingLabel.attributedText.modify in conformance BadgedLabel(void *a1))(void *a1)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88))();
  return protocol witness for Control.cnkContentAlpha.modify in conformance BaseButton;
}

uint64_t method lookup function for BadgedLabel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BadgedLabel);
}

uint64_t dispatch thunk of BadgedLabel.badge.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of BadgedLabel.badge.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of BadgedLabel.badge.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of BadgedLabel.attributedText.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of BadgedLabel.attributedText.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of BadgedLabel.attributedText.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BadgedLabel.font.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of BadgedLabel.glyphInsetFromTop.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of BadgedLabel.__allocating_init(label:badge:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t key path getter for RemotePeoplePickerViewController.connection : RemotePeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RemotePeoplePickerViewController.connection : RemotePeoplePickerViewController(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  id v4 = *a1;
  return v3(v2);
}

void *RemotePeoplePickerViewController.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CKRemotePeoplePickerViewController_connection);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void RemotePeoplePickerViewController.connection.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___CKRemotePeoplePickerViewController_connection);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*RemotePeoplePickerViewController.connection.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for RemotePeoplePickerViewController.contentViewController : RemotePeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for RemotePeoplePickerViewController.contentViewController : RemotePeoplePickerViewController(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  id v5 = *(id *)a1;
  return v4(v2, v3);
}

id RemotePeoplePickerViewController.contentViewController.getter()
{
  uint64_t v1 = &v0[OBJC_IVAR___CKRemotePeoplePickerViewController____lazy_storage___contentViewController];
  id v2 = *(void **)&v0[OBJC_IVAR___CKRemotePeoplePickerViewController____lazy_storage___contentViewController];
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = closure #1 in RemotePeoplePickerViewController.contentViewController.getter(v0);
    uint64_t v4 = *(void **)v1;
    *(void *)uint64_t v1 = v3;
    *((void *)v1 + 1) = v5;
    id v6 = v3;
    outlined consume of UIView??(v4);
  }
  outlined copy of UIView??(v2);
  return v3;
}

id closure #1 in RemotePeoplePickerViewController.contentViewController.getter(void *a1)
{
  id result = objc_msgSend(a1, sel_makeContentViewController);
  if (result)
  {
    id v2 = result;
    swift_getObjectType();
    id result = (id)dynamic_cast_existential_1_conditional((uint64_t)v2);
    if (!result)
    {

      return 0;
    }
  }
  return result;
}

void RemotePeoplePickerViewController.contentViewController.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR___CKRemotePeoplePickerViewController____lazy_storage___contentViewController);
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR___CKRemotePeoplePickerViewController____lazy_storage___contentViewController);
  *id v3 = a1;
  v3[1] = a2;
  outlined consume of UIView??(v4);
}

void (*RemotePeoplePickerViewController.contentViewController.modify(id *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = RemotePeoplePickerViewController.contentViewController.getter();
  a1[1] = v3;
  return RemotePeoplePickerViewController.contentViewController.modify;
}

void RemotePeoplePickerViewController.contentViewController.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    id v4 = v2;
    RemotePeoplePickerViewController.contentViewController.setter((uint64_t)v2, v3);
  }
  else
  {
    RemotePeoplePickerViewController.contentViewController.setter(*a1, v3);
  }
}

Swift::Void __swiftcall RemotePeoplePickerViewController.loadView()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  objc_msgSend(v0, sel_setView_, v1);
}

Swift::Void __swiftcall RemotePeoplePickerViewController.viewDidLoad()()
{
  id v1 = v0;
  v42.receiver = v0;
  v42.super_class = (Class)type metadata accessor for RemotePeoplePickerViewController();
  id v2 = objc_msgSendSuper2(&v42, sel_viewDidLoad);
  uint64_t v3 = (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))(v2);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v5 = (void *)v3;
  uint64_t v6 = v4;
  uint64_t ObjectType = swift_getObjectType();
  id v8 = objc_msgSend(v5, sel_view);
  if (!v8)
  {

LABEL_10:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v39))
    {
      uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v40);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, v12, v41, "Failed to create SharePlay people picker view controller");
      OUTLINED_FUNCTION_3();
    }
    goto LABEL_14;
  }
  id v9 = v8;
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  double v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64);
  uint64_t v11 = swift_unknownObjectRetain();
  v10(v11, ObjectType, v6);
  uint64_t v12 = v5;
  objc_msgSend(v1, sel_addChildViewController_, v12);
  id v13 = OUTLINED_FUNCTION_39_0();
  if (!v13)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v14 = v13;
  objc_msgSend(v13, sel_addSubview_, v9);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C3769580;
  id v16 = objc_msgSend(v9, sel_topAnchor);
  id v17 = OUTLINED_FUNCTION_39_0();
  if (!v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v18 = v17;
  id v19 = objc_msgSend(v17, sel_topAnchor);

  id v20 = OUTLINED_FUNCTION_7_77();
  *(void *)(v15 + 32) = v20;
  id v21 = objc_msgSend(v9, sel_bottomAnchor);
  id v22 = OUTLINED_FUNCTION_39_0();
  if (!v22)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  BOOL v23 = v22;
  id v24 = objc_msgSend(v22, sel_bottomAnchor);

  id v25 = OUTLINED_FUNCTION_7_77();
  *(void *)(v15 + 40) = v25;
  id v26 = objc_msgSend(v9, sel_leadingAnchor);
  id v27 = OUTLINED_FUNCTION_39_0();
  if (!v27)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v28 = v27;
  id v29 = objc_msgSend(v27, sel_leadingAnchor);

  id v30 = OUTLINED_FUNCTION_7_77();
  *(void *)(v15 + 48) = v30;
  id v31 = objc_msgSend(v9, sel_trailingAnchor);
  id v32 = OUTLINED_FUNCTION_39_0();
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = self;
    id v35 = objc_msgSend(v33, sel_trailingAnchor);

    id v36 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v35);
    *(void *)(v15 + 56) = v36;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_activateConstraints_, isa);

    [v12 didMoveToParentViewController:v1];
LABEL_14:

    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t type metadata accessor for RemotePeoplePickerViewController()
{
  return self;
}

Swift::Void __swiftcall RemotePeoplePickerViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for RemotePeoplePickerViewController();
  objc_msgSendSuper2(&v15, sel_viewDidDisappear_, a1);
  OUTLINED_FUNCTION_161();
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 120);
  uint64_t v5 = (void *)v4();
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend(v5, sel_willMoveToParentViewController_, 0);
  }
  os_log_type_t v7 = (void *)v4();
  if (v7)
  {
    id v8 = v7;
    id v9 = objc_msgSend(v7, sel_view);

    if (!v9)
    {
      __break(1u);
      return;
    }
    objc_msgSend(v9, sel_removeFromSuperview);
  }
  double v10 = (void *)v4();
  if (v10)
  {
    uint64_t v11 = v10;
    objc_msgSend(v10, sel_removeFromParentViewController);
  }
  uint64_t v12 = (void *)v4();
  if (v12)
  {
    id v13 = v12;
    objc_msgSend(v12, sel_didMoveToParentViewController_, 0);
  }
  OUTLINED_FUNCTION_161();
  (*(void (**)(void, void))(v14 + 128))(0, 0);
}

Swift::Bool __swiftcall RemotePeoplePickerViewController.shouldAcceptXPCConnection(_:)(NSXPCConnection a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = a1.super.isa;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v3;

    _os_log_impl(&dword_1C2F90000, v4, v5, "Received request to accept connection for %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  OUTLINED_FUNCTION_4_8();
  uint64_t v10 = (*(uint64_t (**)(void))(v9 + 120))();
  if (!v10)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v25))
    {
      id v26 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v26);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, v12, v27, "Failed to create SharePlay people picker view controller");
      OUTLINED_FUNCTION_3();
    }
    goto LABEL_14;
  }
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v14 = v3;
  static OS_dispatch_queue.main.getter();
  id v15 = objc_allocWithZone((Class)type metadata accessor for PeoplePickerHostConnection());
  uint64_t v16 = PeoplePickerHostConnection.init(connection:queue:)();
  if (!v16)
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)id v30 = 0;
      _os_log_impl(&dword_1C2F90000, v28, v29, "Failed to create PeoplePickerHostConnection", v30, 2u);
      OUTLINED_FUNCTION_3();
    }

LABEL_14:
    Swift::Bool v24 = 0;
    goto LABEL_15;
  }
  id v17 = (void *)v16;
  OUTLINED_FUNCTION_4_8();
  id v19 = *(void (**)(void *))(v18 + 104);
  id v20 = v17;
  v19(v17);
  uint64_t ObjectType = swift_getObjectType();
  id v22 = *(void (**)(void *, uint64_t, uint64_t))(v13 + 16);
  id v23 = v20;
  v22(v17, ObjectType, v13);
  lazy protocol witness table accessor for type RemotePeoplePickerViewController and conformance RemotePeoplePickerViewController();
  swift_unknownObjectRetain();
  PeoplePickerHostConnection.delegate.setter();

  Swift::Bool v24 = 1;
LABEL_15:

  return v24;
}

id RemotePeoplePickerViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id RemotePeoplePickerViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR___CKRemotePeoplePickerViewController_connection] = 0;
  *(_OWORD *)&v3[OBJC_IVAR___CKRemotePeoplePickerViewController____lazy_storage___contentViewController] = xmmword_1C37737D0;
  if (a2)
  {
    os_log_type_t v5 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for RemotePeoplePickerViewController();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithNibName_bundle_, v5, a3);

  return v6;
}

id RemotePeoplePickerViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id RemotePeoplePickerViewController.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___CKRemotePeoplePickerViewController_connection] = 0;
  *(_OWORD *)&v1[OBJC_IVAR___CKRemotePeoplePickerViewController____lazy_storage___contentViewController] = xmmword_1C37737D0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for RemotePeoplePickerViewController();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id RemotePeoplePickerViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemotePeoplePickerViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall RemotePeoplePickerViewController.handleHostConnectionInvalidated()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  objc_super v8 = (uint64_t *)(v7 - v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *objc_super v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x1E4FBCBE8], v2);
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v8, v2);
  if (v9)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v13, v14, "Connection invalidated");
    OUTLINED_FUNCTION_3();
  }

  id v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78))();
  if (v15)
  {
    uint64_t v16 = v15;
    objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

uint64_t RemotePeoplePickerViewController.checkIn(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  objc_super v8 = (uint64_t *)(v7 - v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *objc_super v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x1E4FBCBE8], v2);
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v8, v2);
  if (v9)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  id v11 = a1;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v21 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    type metadata accessor for PeoplePickerConfiguration();
    id v16 = v11;
    uint64_t v17 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v12, v13, "Received checkIn from app configuration %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v15, -1, -1);
    MEMORY[0x1C87760E0](v14, -1, -1);
  }
  else
  {
  }
  uint64_t result = dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.getter();
  if (v20)
  {
    RemotePeoplePickerViewController.requestParticipants(_:)(*(Swift::String *)&result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall RemotePeoplePickerViewController.requestParticipants(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v4, v5, "Requesting participants for shareSheetSessionID %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v7 = self;
  objc_super v8 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in RemotePeoplePickerViewController.requestParticipants(_:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [Any]?) -> ();
  void aBlock[3] = (uint64_t)&block_descriptor_55;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_requestMailRecipientsForSessionID_completionHandler_, v8, v10);
  _Block_release(v10);
}

void RemotePeoplePickerViewController.updateActivity(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  objc_super v8 = (uint64_t *)(v7 - v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *objc_super v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v8, *MEMORY[0x1E4FBCBE8], v2);
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v8, v2);
  if (v9)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  id v11 = a1;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    if (a1)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationActivity);
      id v15 = v11;
      uint64_t v16 = String.init<A>(reflecting:)();
      unint64_t v18 = v17;
    }
    else
    {
      unint64_t v18 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v12, v13, "Received updated activity %s", v14, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    if (a1)
    {
LABEL_10:
      id v19 = objc_msgSend(v11, sel_sanitizedCopy);
      if (v19) {
        goto LABEL_14;
      }
    }
  }
  else
  {

    if (a1) {
      goto LABEL_10;
    }
  }
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v22, v23, "Received empty activity, using placeholder activity");
    OUTLINED_FUNCTION_3();
  }

  id v19 = objc_msgSend(self, sel_placeholderActivity);
LABEL_14:
  OUTLINED_FUNCTION_4_8();
  os_log_type_t v25 = (void *)(*(uint64_t (**)(void))(v24 + 96))();
  if (v25)
  {
    id v26 = v25;
    char v27 = XPCHostConnection.isEntitledToUsePrivateAPI.getter();

    if ((v27 & 1) == 0
      || (outlined bridged method (pb) of @objc FBSDisplayLayoutElement.bundleIdentifier.getter(v19),
          uint64_t v29 = v28,
          swift_bridgeObjectRelease(),
          !v29))
    {
      id v30 = v26;
      uint64_t v31 = XPCHostConnection.bundleIdentifier.getter();
      uint64_t v33 = v32;

      outlined bridged method (mbnn) of @objc TUConversationActivity.bundleIdentifier.setter(v31, v33, v19);
    }
  }
  OUTLINED_FUNCTION_4_8();
  id v36 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(v34 + 136))(v45);
  uint64_t v37 = *(void **)v35;
  if (*(void *)v35)
  {
    uint64_t v38 = v35;
    uint64_t v39 = *(void *)(v35 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v41 = *(void (**)(id, uint64_t, uint64_t))(v39 + 40);
    id v42 = v19;
    id v43 = v37;
    v41(v19, ObjectType, v39);
    double v44 = *(void **)v38;
    *(void *)uint64_t v38 = v37;
    *(void *)(v38 + 8) = v39;
  }
  v36(v45, 0);
}

uint64_t protocol witness for PeoplePickerHostConnectionDelegate.checkIn(_:) in conformance RemotePeoplePickerViewController(void *a1)
{
  return RemotePeoplePickerViewController.checkIn(_:)(a1);
}

void RemotePeoplePickerViewController.requestActivity(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x60))();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    XPCHostConnection.clientObject.getter();
    objc_super v8 = (void *)aBlock[6];
    char v9 = (void *)swift_allocObject();
    v9[2] = v3;
    v9[3] = a1;
    void v9[4] = a2;
    aBlock[4] = partial apply for closure #1 in RemotePeoplePickerViewController.requestActivity(completionHandler:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed AVCaptureDevice?) -> ();
    void aBlock[3] = &block_descriptor_6_1;
    uint64_t v10 = _Block_copy(aBlock);
    id v11 = v3;
    swift_retain();
    swift_release();
    objc_msgSend(v8, sel_requestActivity_, v10);

    _Block_release(v10);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.default);
    oslog = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v14);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, oslog, v15, "No connection.  Cannot request activity.");
      OUTLINED_FUNCTION_3();
    }
  }
}

void closure #1 in RemotePeoplePickerViewController.requestActivity(completionHandler:)(void *a1, void *a2, void (*a3)(id))
{
  if (!a1 || (id v5 = objc_msgSend(a1, sel_sanitizedCopy)) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v9 = 0;
      _os_log_impl(&dword_1C2F90000, v7, v8, "Received empty activity, using placeholder activity", v9, 2u);
      MEMORY[0x1C87760E0](v9, -1, -1);
    }

    id v5 = objc_msgSend(self, sel_placeholderActivity);
  }
  uint64_t v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x60))();
  if (v10)
  {
    id v11 = v10;
    char v12 = XPCHostConnection.isEntitledToUsePrivateAPI.getter();

    if ((v12 & 1) == 0
      || (outlined bridged method (pb) of @objc FBSDisplayLayoutElement.bundleIdentifier.getter(v5),
          uint64_t v14 = v13,
          swift_bridgeObjectRelease(),
          !v14))
    {
      id v15 = v11;
      uint64_t v16 = XPCHostConnection.bundleIdentifier.getter();
      uint64_t v18 = v17;

      outlined bridged method (mbnn) of @objc TUConversationActivity.bundleIdentifier.setter(v16, v18, v5);
    }
  }
  id v19 = v5;
  a3(v5);
}

Swift::Void __swiftcall RemotePeoplePickerViewController.dismissViewController(success:)(Swift::Bool success)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60))();
  if (v4)
  {
    id v5 = (void *)v4;
    XPCHostConnection.clientObject.getter();
    objc_msgSend(v14, sel_dismissViewControllerWithSuccess_, success);
    uint64_t v6 = swift_unknownObjectRelease();
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))((*v3 & *v1) + 0x78))(v6);
    if (v7)
    {
      os_log_type_t v8 = v7;
      objc_msgSend(v7, sel_dismissViewControllerAnimated_completion_, 1, 0);
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      id v11 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v11);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, oslog, v12, "No connection.  Cannot dismiss.");
      OUTLINED_FUNCTION_3();
    }
  }
}

void closure #1 in RemotePeoplePickerViewController.requestParticipants(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v24 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
        uint64_t v11 = String.init<A>(reflecting:)();
        unint64_t v13 = v12;
      }
      else
      {
        unint64_t v13 = 0xE300000000000000;
        uint64_t v11 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v7, v8, "Received recipients %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v10, -1, -1);
      MEMORY[0x1C87760E0](v9, -1, -1);

      if (!a1) {
        goto LABEL_15;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!a1) {
        goto LABEL_15;
      }
    }
    uint64_t v14 = specialized _arrayConditionalCast<A, B>(_:)(a1);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x78))();
      if (v16)
      {
        uint64_t v18 = (void *)v16;
        uint64_t v19 = v17;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v24 = (uint64_t)v18;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 80))(v15, ObjectType, v19);
      }
      swift_bridgeObjectRelease();
LABEL_18:

      return;
    }
LABEL_15:
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1C2F90000, v21, v22, "Unable to parse recipients as strings, dropping suggestions.", v23, 2u);
      MEMORY[0x1C87760E0](v23, -1, -1);
    }

    goto LABEL_18;
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [Any]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type RemotePeoplePickerViewController and conformance RemotePeoplePickerViewController()
{
  unint64_t result = lazy protocol witness table cache variable for type RemotePeoplePickerViewController and conformance RemotePeoplePickerViewController;
  if (!lazy protocol witness table cache variable for type RemotePeoplePickerViewController and conformance RemotePeoplePickerViewController)
  {
    type metadata accessor for RemotePeoplePickerViewController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemotePeoplePickerViewController and conformance RemotePeoplePickerViewController);
  }
  return result;
}

uint64_t sub_1C32FECC0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in RemotePeoplePickerViewController.requestParticipants(_:)(uint64_t a1)
{
  closure #1 in RemotePeoplePickerViewController.requestParticipants(_:)(a1, v1);
}

void outlined bridged method (mbnn) of @objc TUConversationActivity.bundleIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setBundleIdentifier_, v4);
}

uint64_t sub_1C32FED64()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in RemotePeoplePickerViewController.requestActivity(completionHandler:)(void *a1)
{
  closure #1 in RemotePeoplePickerViewController.requestActivity(completionHandler:)(a1, *(void **)(v1 + 16), *(void (**)(id))(v1 + 24));
}

uint64_t dispatch thunk of SharePlayPeoplePicker.connection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.connection.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.connection.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.activity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.activity.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.activity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.extensionViewController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.extensionViewController.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.extensionViewController.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of SharePlayPeoplePicker.updateShareSheetRecipients(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t method lookup function for RemotePeoplePickerViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemotePeoplePickerViewController);
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.connection.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.connection.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.connection.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.contentViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.contentViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.contentViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of RemotePeoplePickerViewController.shouldAcceptXPCConnection(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t sub_1C32FF00C()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

id LiveCallDurationView.__allocating_init(font:callDurationProvider:voiceOverUpdateHandler:)()
{
  OUTLINED_FUNCTION_8_8();
  id v2 = objc_allocWithZone(v0);
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  id v5 = OUTLINED_FUNCTION_2_93(v4, v9);
  v6(v5);
  id v7 = OUTLINED_FUNCTION_3_97();
  __swift_destroy_boxed_opaque_existential_1(v1);
  return v7;
}

uint64_t key path getter for LiveCallDurationView.voiceOverUpdateHandler : LiveCallDurationView@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    id v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    id v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for LiveCallDurationView.voiceOverUpdateHandler : LiveCallDurationView(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return v7(v6, v5);
}

uint64_t LiveCallDurationView.voiceOverUpdateHandler.getter()
{
  OUTLINED_FUNCTION_1_106();
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t LiveCallDurationView.voiceOverUpdateHandler.setter()
{
  OUTLINED_FUNCTION_1_106();
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t (*LiveCallDurationView.voiceOverUpdateHandler.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit20LiveCallDurationView_controller);
  a1[2] = v2;
  *a1 = (*(uint64_t (**)(void))(*(void *)v2 + 192))();
  a1[1] = v4;
  return LiveCallDurationView.voiceOverUpdateHandler.modify;
}

uint64_t LiveCallDurationView.voiceOverUpdateHandler.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)(a1 + 16) + 200);
  if (a2)
  {
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)a1);
    uint64_t v4 = OUTLINED_FUNCTION_6_83();
    v3(v4);
    return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v2);
  }
  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_6_83();
    return ((uint64_t (*)(uint64_t))v3)(v6);
  }
}

id LiveCallDurationView.init(font:callDurationProvider:voiceOverUpdateHandler:)()
{
  OUTLINED_FUNCTION_8_8();
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = OUTLINED_FUNCTION_2_93(v3, v8);
  v5(v4);
  id v6 = OUTLINED_FUNCTION_3_97();
  __swift_destroy_boxed_opaque_existential_1(v0);
  return v6;
}

id LiveCallDurationView.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit20LiveCallDurationView_controller);
  type metadata accessor for OS_dispatch_queue();
  swift_retain();
  uint64_t v2 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = (uint64_t)partial apply for closure #1 in LiveCallDurationView.deinit;
  aBlock[5] = (uint64_t)v1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = (uint64_t)&block_descriptor_56;
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[2] = v1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C8773BA0](0, v9, v15, v3);
  _Block_release(v3);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  swift_release();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
  id v17 = v27[1];
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = (uint64_t)v17;
    aBlock[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    type metadata accessor for LiveCallDurationView();
    id v22 = v17;
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v18, v19, "%s deinit", v20, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
    swift_release();
  }
  else
  {

    swift_release();
  }
  os_log_type_t v25 = (objc_class *)type metadata accessor for LiveCallDurationView();
  v28.receiver = v17;
  v28.super_class = v25;
  return objc_msgSendSuper2(&v28, sel_dealloc);
}

uint64_t closure #1 in LiveCallDurationView.deinit(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)a1 + 200))(0, 0);
}

id LiveCallDurationView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void LiveCallDurationView.init(frame:)()
{
}

id LiveCallDurationView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void LiveCallDurationView.init(coder:)()
{
}

uint64_t LiveCallDurationView.accessibilityLabel.getter()
{
  id v1 = *(id *)(*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit20LiveCallDurationView_controller) + 16);
  return outlined bridged method (ob) of @objc NSObject.accessibilityLabel.getter(v1);
}

void LiveCallDurationView.accessibilityLabel.setter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for LiveCallDurationView();
  objc_msgSendSuper2(&v4, sel_setAccessibilityLabel_, v3);
}

id LiveCallDurationView.alpha.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveCallDurationView();
  return objc_msgSendSuper2(&v2, sel_alpha);
}

uint64_t LiveCallDurationView.alpha.setter(double a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for LiveCallDurationView();
  objc_msgSendSuper2(&v5, sel_setAlpha_, a1);
  OUTLINED_FUNCTION_1_106();
  return (*(uint64_t (**)(void))(v3 + 232))();
}

id LiveCallDurationView.isHidden.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveCallDurationView();
  return objc_msgSendSuper2(&v2, sel_isHidden);
}

uint64_t LiveCallDurationView.isHidden.setter(char a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for LiveCallDurationView();
  objc_msgSendSuper2(&v5, sel_setHidden_, a1 & 1);
  OUTLINED_FUNCTION_1_106();
  return (*(uint64_t (**)(void))(v3 + 232))();
}

Swift::Void __swiftcall LiveCallDurationView.didMoveToWindow()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveCallDurationView();
  objc_msgSendSuper2(&v2, sel_didMoveToWindow);
  OUTLINED_FUNCTION_1_106();
  (*(void (**)(void))(v1 + 232))();
}

Swift::Void __swiftcall LiveCallDurationView.layoutSubviews()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveCallDurationView();
  objc_msgSendSuper2(&v2, sel_layoutSubviews);
  id v1 = *(id *)(*(void *)&v0[OBJC_IVAR____TtC15ConversationKit20LiveCallDurationView_controller] + 16);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
}

CGSize __swiftcall LiveCallDurationView.sizeThatFits(_:)(CGSize a1)
{
  OUTLINED_FUNCTION_1_106();
  (*(void (**)(void))(v1 + 224))();
  result.double height = v3;
  result.double width = v2;
  return result;
}

id specialized LiveCallDurationView.init(font:callDurationProvider:voiceOverUpdateHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v52 = a1;
  OUTLINED_FUNCTION_5_3();
  uint64_t v13 = v12;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  id v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  os_log_type_t v19 = (char *)&v47 - v18;
  (*(void (**)(char *))(v13 + 32))((char *)&v47 - v18);
  id v20 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  uint64_t v21 = a5;
  id v22 = objc_msgSend(v20, sel_init);
  if (one-time initialization token for systemApertureDurationTextColor != -1) {
    swift_once();
  }
  objc_msgSend(v22, sel_setTextColor_, static UIColor.systemApertureDurationTextColor);
  objc_msgSend(v22, sel_setFont_, v52);
  type metadata accessor for DurationLabelController();
  uint64_t v23 = swift_allocObject();
  unint64_t v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v51 = v19;
  v24(v17, v19, a6);
  id v25 = v22;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  specialized DurationLabelController.init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)((uint64_t)v17, (uint64_t)v25, 0, a3, a4, 0, v23, a6, a7, v46, (uint64_t)v47, v48, v49, v50, (uint64_t)v51, (uint64_t)v52, v53, v54, (uint64_t)v55.receiver,
    (uint64_t)v55.super_class,
    v56);
  *(void *)&v21[OBJC_IVAR____TtC15ConversationKit20LiveCallDurationView_controller] = v26;
  char v27 = *(void (**)(uint64_t))(*(void *)v26 + 248);
  uint64_t v28 = swift_retain();
  v27(v28);
  swift_release();

  uint64_t v29 = (objc_class *)type metadata accessor for LiveCallDurationView();
  v55.receiver = v21;
  v55.super_class = v29;
  id v30 = objc_msgSendSuper2(&v55, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v31 = one-time initialization token for conversationControls;
  id v32 = v30;
  if (v31 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationControls);
  id v34 = v32;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    id v47 = v25;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v50 = a6;
    uint64_t v38 = (uint8_t *)v37;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v53 = (uint64_t)v34;
    uint64_t v54 = v39;
    uint64_t v48 = a3;
    *(_DWORD *)uint64_t v38 = 136315138;
    id v40 = v34;
    uint64_t v49 = v13;
    id v41 = v40;
    uint64_t v42 = String.init<A>(reflecting:)();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v54);
    id v25 = v47;
    a3 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v13 = v49;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v35, v36, "%s created", v38, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    a6 = v50;
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v44 = (uint64_t)v51;
  objc_msgSend(v34, sel_addSubview_, v25);

  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a3);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v44, a6);
  return v34;
}

uint64_t partial apply for closure #1 in LiveCallDurationView.deinit()
{
  return closure #1 in LiveCallDurationView.deinit(v0);
}

uint64_t type metadata accessor for LiveCallDurationView()
{
  return self;
}

uint64_t method lookup function for LiveCallDurationView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LiveCallDurationView);
}

uint64_t dispatch thunk of LiveCallDurationView.voiceOverUpdateHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of LiveCallDurationView.voiceOverUpdateHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of LiveCallDurationView.voiceOverUpdateHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of LiveCallDurationView.__allocating_init(font:callDurationProvider:voiceOverUpdateHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1C3300560()
{
  swift_release();
  return swift_deallocObject();
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_foregroundApp;
    uint64_t v6 = a1 + 56;
    uint64_t v7 = MEMORY[0x1E4FBC860];
    id v25 = a2;
    uint64_t v22 = a1 + 56;
    do
    {
      uint64_t v23 = v7;
      uint64_t v8 = (_OWORD *)(v6 + 40 * v4);
      unint64_t v9 = v4;
      while (1)
      {
        if (v9 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v10 = *((void *)v8 - 3);
        uint64_t v11 = *((void *)v8 - 2);
        uint64_t v12 = *((void *)v8 - 1);
        unint64_t v4 = v9 + 1;
        long long v26 = *v8;
        uint64_t v13 = *(void *)&a2[v5];
        if (!v13) {
          break;
        }
        uint64_t v14 = (void *)(v13 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier);
        if (v10 != *v14 || v11 != v14[1])
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          a2 = v25;
          if ((v16 & 1) == 0) {
            break;
          }
        }
        uint64_t v8 = (_OWORD *)((char *)v8 + 40);
        ++v9;
        if (v3 == v4) {
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v17 = *((id *)&v26 + 1);
      uint64_t v7 = v23;
      uint64_t v27 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v23;
      }
      unint64_t v18 = *(void *)(v7 + 16);
      unint64_t v19 = v18 + 1;
      a2 = v25;
      if (v18 >= *(void *)(v7 + 24) >> 1)
      {
        unint64_t v24 = *(void *)(v7 + 16);
        unint64_t v21 = v18 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v19 = v21;
        unint64_t v18 = v24;
        a2 = v25;
        uint64_t v7 = v27;
      }
      *(void *)(v7 + 16) = v19;
      uint64_t v20 = v7 + 40 * v18;
      *(void *)(v20 + 32) = v10;
      *(void *)(v20 + 40) = v11;
      *(void *)(v20 + 48) = v12;
      *(_OWORD *)(v20 + 56) = v26;
      uint64_t v6 = v22;
    }
    while (v3 - 1 != v9);
  }
LABEL_18:

  swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  CGFloat v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  int v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  CGRect v44;
  CGRect v45;

  double v2 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v38 = *(void *)(a1 + 16);
    uint64_t v39 = &a2[OBJC_IVAR____TtC15ConversationKit22ConversationController_recentPresentationContexts];
    uint64_t v35 = v3 - 1;
    os_log_type_t v36 = a1 + 96;
    uint64_t v5 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v37 = v5;
      uint64_t v6 = (unsigned __int8 *)(v36 + 72 * v4);
      uint64_t v7 = v4;
      while (1)
      {
        if (v7 >= *(void *)(v2 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v8 = *((void *)v6 - 8);
        unint64_t v9 = *((void *)v6 - 7);
        uint64_t v10 = *((void *)v6 - 6);
        id v41 = *((void *)v6 - 5);
        uint64_t v11 = *((double *)v6 - 4);
        uint64_t v12 = *((double *)v6 - 3);
        uint64_t v13 = *((double *)v6 - 2);
        uint64_t v14 = *((double *)v6 - 1);
        uint64_t v42 = *v6;
        swift_beginAccess();
        uint64_t v15 = *(void *)v39;
        char v16 = 0.0;
        unint64_t v43 = v8;
        if (!*(void *)(*(void *)v39 + 16)) {
          goto LABEL_8;
        }
        id v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
        if (v18)
        {
          unint64_t v19 = *(void *)(v15 + 56) + 72 * v17;
          uint64_t v20 = *(void *)v19;
          unint64_t v21 = *(void *)(v19 + 8);
          uint64_t v22 = *(void *)(v19 + 16);
          uint64_t v23 = *(void *)(v19 + 24);
          char v16 = *(double *)(v19 + 32);
          unint64_t v24 = *(double *)(v19 + 40);
          id v25 = *(double *)(v19 + 48);
          long long v26 = *(double *)(v19 + 56);
          uint64_t v27 = *(unsigned __int8 *)(v19 + 64);
        }
        else
        {
LABEL_8:
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          unint64_t v24 = 0.0;
          id v25 = 0.0;
          uint64_t v27 = 2;
          long long v26 = 0.0;
        }
        swift_endAccess();
        uint64_t v28 = v27 != 2 && v43 == v20;
        uint64_t v29 = v28 && v9 == v21;
        id v30 = v29 && v10 == v22;
        if (!v30 || v41 != v23) {
          break;
        }
        v44.origin.double x = v11;
        v44.origin.double y = v12;
        v44.size.double width = v13;
        v44.size.double height = v14;
        v45.origin.double x = v16;
        v45.origin.double y = v24;
        v45.size.double width = v25;
        v45.size.double height = v26;
        if (!CGRectEqualToRect(v44, v45) || (v27 == 0) == v42) {
          break;
        }
        ++v7;
        v6 += 72;
        double v2 = a1;
        if (v38 == v7) {
          goto LABEL_32;
        }
      }
      uint64_t v5 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v37;
      }
      id v32 = *(void *)(v5 + 16);
      if (v32 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v37;
      }
      unint64_t v4 = v7 + 1;
      *(void *)(v5 + 16) = v32 + 1;
      uint64_t v33 = v5 + 72 * v32;
      *(void *)(v33 + 32) = v43;
      *(void *)(v33 + 40) = v9;
      *(void *)(v33 + 48) = v10;
      *(void *)(v33 + 56) = v41;
      *(CGFloat *)(v33 + 64) = v11;
      *(CGFloat *)(v33 + 72) = v12;
      *(CGFloat *)(v33 + 80) = v13;
      *(CGFloat *)(v33 + 88) = v14;
      *(unsigned char *)(v33 + 96) = v42;
      double v2 = a1;
    }
    while (v35 != v7);
  }
LABEL_32:

  swift_bridgeObjectRelease();
}

id SharePlayDiscoverabilityMenuView.__allocating_init(type:presentationStyle:foregroundApp:)(char a1, char a2, void *a3)
{
  char v5 = a1 & 1;
  char v6 = a2 & 1;
  id v7 = objc_allocWithZone(v3);
  return SharePlayDiscoverabilityMenuView.init(type:presentationStyle:foregroundApp:)(v5, v6, a3);
}

uint64_t key path getter for SharePlayDiscoverabilityMenuView.titleLabel : SharePlayDiscoverabilityMenuView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SharePlayDiscoverabilityMenuView.titleLabel : SharePlayDiscoverabilityMenuView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x98))(*a1);
}

id SharePlayDiscoverabilityMenuView.titleLabel.getter()
{
  return SharePlayDiscoverabilityMenuView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___titleLabel, (uint64_t (*)(uint64_t))closure #1 in SharePlayDiscoverabilityMenuView.titleLabel.getter);
}

id closure #1 in SharePlayDiscoverabilityMenuView.titleLabel.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v2, sel_setNumberOfLines_, 2);
  id v3 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v2, sel_setTextColor_, v3);

  id result = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB28C8], *MEMORY[0x1E4FB09E0]);
  if (result)
  {
    char v5 = result;
    Class isa = UIFont.caseSensitive()().super.isa;

    objc_msgSend(v2, sel_setFont_, isa);
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_presentationStyle))
    {
      char v7 = *(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_type);
      id v8 = objc_msgSend(self, sel_conversationKit);
      if (v7)
      {
        unint64_t v9 = 0xD00000000000001CLL;
        unint64_t v16 = 0xE000000000000000;
        uint64_t v10 = "COLLABORATE_SHARE_CARD_TITLE";
      }
      else
      {
        unint64_t v9 = 0xD000000000000018;
        unint64_t v16 = 0xE000000000000000;
        uint64_t v10 = "Listen and Play Together";
      }
      unint64_t v11 = (unint64_t)(v10 - 32) | 0x8000000000000000;
    }
    else
    {
      id v8 = objc_msgSend(self, sel_conversationKit);
      unint64_t v16 = 0xE000000000000000;
      unint64_t v11 = 0x80000001C37A7480;
      unint64_t v9 = 0xD000000000000012;
    }
    v12.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v12.value._object = (void *)0xEF74694B6E6F6974;
    v13._uint64_t countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    uint64_t v14 = 0;
    Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v9, v12, (NSBundle)v8, v13, *(Swift::String *)(&v16 - 1));

    outlined bridged method (mbnn) of @objc UILabel.text.setter(v15._countAndFlagsBits, (uint64_t)v15._object, v2);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SharePlayDiscoverabilityMenuView.titleLabel.setter(uint64_t a1)
{
}

void (*SharePlayDiscoverabilityMenuView.titleLabel.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = SharePlayDiscoverabilityMenuView.titleLabel.getter();
  return SharePlayDiscoverabilityMenuView.titleLabel.modify;
}

void SharePlayDiscoverabilityMenuView.titleLabel.modify(void **a1, char a2)
{
}

uint64_t key path getter for SharePlayDiscoverabilityMenuView.moreButton : SharePlayDiscoverabilityMenuView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SharePlayDiscoverabilityMenuView.moreButton : SharePlayDiscoverabilityMenuView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB0))(*a1);
}

id SharePlayDiscoverabilityMenuView.moreButton.getter()
{
  return SharePlayDiscoverabilityMenuView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___moreButton, (uint64_t (*)(uint64_t))closure #1 in SharePlayDiscoverabilityMenuView.moreButton.getter);
}

void *closure #1 in SharePlayDiscoverabilityMenuView.moreButton.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  char v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v8 = (char *)v26 - v7;
  static UIButton.Configuration.plain()();
  id v9 = objc_msgSend(self, sel_secondaryLabelColor);
  UIButton.Configuration.baseForegroundColor.setter();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v10 - 8);
  Swift::String_optional v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(self, sel_conversationKit);
  v28._object = (void *)0xE000000000000000;
  v14._uint64_t countAndFlagsBits = 1701998413;
  v14._object = (void *)0xE400000000000000;
  v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v28);

  uint64_t v17 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v17 - 8);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v18 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v18);
  UIButton.Configuration.attributedTitle.setter();
  unint64_t v19 = (void (*)(unsigned char *, void))UIButton.Configuration.attributedTitle.modify();
  if (!__swift_getEnumTagSinglePayload(v20, 1, v18))
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    v26[1] = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    AttributedString.subscript.setter();
  }
  v19(v27, 0);
  UIButton.Configuration.contentInsets.setter();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v22 = (void *)UIButton.init(configuration:primaryAction:)();
  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v23 = objc_msgSend(v22, sel_titleLabel);
  if (v23)
  {
    unint64_t v24 = v23;
    objc_msgSend(v23, sel__setDrawsAsBackdropOverlayWithBlendMode_, 3);
  }
  objc_msgSend(v22, sel_addTarget_action_forControlEvents_, a1, sel_didTapMore, 0x2000);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_presentationStyle) == 1) {
    objc_msgSend(v22, sel_setHidden_, 1);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v22;
}

void SharePlayDiscoverabilityMenuView.moreButton.setter(uint64_t a1)
{
}

void (*SharePlayDiscoverabilityMenuView.moreButton.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = SharePlayDiscoverabilityMenuView.moreButton.getter();
  return SharePlayDiscoverabilityMenuView.moreButton.modify;
}

void SharePlayDiscoverabilityMenuView.moreButton.modify(void **a1, char a2)
{
}

void SharePlayDiscoverabilityMenuView.sortedSharePlayApps.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static SharePlayDiscoverabilityAppsController.shared)
                                         + 0x90))(v0[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_type]);
  specialized _ArrayProtocol.filter(_:)(v2, (char *)v1);
}

uint64_t SharePlayDiscoverabilityMenuView.appCellRegistration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  char v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  id v8 = &v14[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___appCellRegistration;
  swift_beginAccess();
  outlined init with copy of LinkShareCoordinatorProtocol?(v9, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>?);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>?);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
    UICollectionView.CellRegistration.init(handler:)();
    OUTLINED_FUNCTION_48();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
    swift_beginAccess();
    outlined assign with take of UICollectionView.CellRegistration<UICollectionViewCell, Application>?((uint64_t)v6, v9);
    return swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_48();
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(a1, v8, v10);
  }
}

uint64_t closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = a3[1];
  long long v6 = *a3;
  long long v7 = v3;
  uint64_t v8 = *((void *)a3 + 4);
  v5[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingConfiguration<SharePlayAppCell, EmptyView>);
  v5[4] = lazy protocol witness table accessor for type UIHostingConfiguration<SharePlayAppCell, EmptyView> and conformance UIHostingConfiguration<A, B>();
  __swift_allocate_boxed_opaque_existential_1(v5);
  type metadata accessor for SharePlayAppCell();
  lazy protocol witness table accessor for type SharePlayAppCell and conformance SharePlayAppCell();
  UIHostingConfiguration<>.init(content:)();
  return MEMORY[0x1C8773CD0](v5);
}

uint64_t closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SharePlayAppCell();
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = *a1;
  long long v16 = a1[1];
  long long v11 = v16;
  long long v17 = v10;
  Swift::String_optional v12 = (void *)*((void *)a1 + 4);
  *(_OWORD *)uint64_t v9 = v10;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 4) = v12;
  *((void *)v9 + 5) = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter;
  *((void *)v9 + 6) = a2;
  uint64_t v13 = (uint64_t *)&v9[*(int *)(v7 + 32)];
  *uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of SharePlayAppCell((uint64_t)v9, a3);
  outlined retain of String((uint64_t)&v17);
  outlined retain of String((uint64_t)&v16);
  id v14 = v12;
  return swift_retain();
}

void closure #1 in closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    SharePlayDiscoverabilityMenuView.didTapApp(_:)(a1);
  }
}

void SharePlayDiscoverabilityMenuView.didTapApp(_:)(uint64_t *a1)
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  long long v26 = *((_OWORD *)a1 + 1);
  uint64_t v5 = (void *)a1[4];
  swift_bridgeObjectRetain();
  outlined retain of String((uint64_t)&v26);
  id v6 = v5;
  swift_bridgeObjectRetain();
  outlined retain of String((uint64_t)&v26);
  id v7 = v6;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v24 = v4;
  if (os_log_type_enabled(v8, v9))
  {
    long long v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v25 = v11;
    *(_DWORD *)long long v10 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of String((uint64_t)&v26);
    swift_bridgeObjectRelease();

    outlined release of String((uint64_t)&v26);
    _os_log_impl(&dword_1C2F90000, v8, v9, "User did tap discoverability app with bundleIdentifier: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v11, -1, -1);
    MEMORY[0x1C87760E0](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined release of String((uint64_t)&v26);
    swift_bridgeObjectRelease();

    outlined release of String((uint64_t)&v26);
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for FBSOpenApplicationOptions);
  id v14 = (id)TUUnlockDeviceWithPromptFrontBoardOptionsDictionary();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  specialized _dictionaryUpCast<A, B, C, D>(_:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  id v17 = @nonobjc FBSOpenApplicationOptions.__allocating_init(dictionary:)(v16);
  id v18 = objc_msgSend(self, sel_serviceWithDefaultShellEndpoint);
  if (v18)
  {
    unint64_t v19 = v18;
    uint64_t v20 = (void *)MEMORY[0x1C87730B0](v24, v3);
    objc_msgSend(v19, sel_openApplication_withOptions_completion_, v20, v17, 0);
  }
  else
  {
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl(&dword_1C2F90000, v21, v22, "Unable to launch discoverability app because FBSOpenApplicationService was null", v23, 2u);
      MEMORY[0x1C87760E0](v23, -1, -1);
    }

    uint64_t v20 = v17;
  }
}

id SharePlayDiscoverabilityMenuView.collectionViewLayout.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionViewLayout;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionViewLayout);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionViewLayout);
  }
  else
  {
    uint64_t v4 = (void *)closure #1 in SharePlayDiscoverabilityMenuView.collectionViewLayout.getter();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t closure #1 in SharePlayDiscoverabilityMenuView.collectionViewLayout.getter()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_estimatedDimension_, 0.0);
  id v2 = objc_msgSend(v0, sel_fractionalHeightDimension_, 1.0);
  id v3 = self;
  id v4 = objc_msgSend(v3, sel_sizeWithWidthDimension_heightDimension_, v1, v2);

  id v5 = objc_msgSend(self, sel_itemWithLayoutSize_, v4);
  objc_msgSend(v5, sel_setContentInsets_, *MEMORY[0x1E4FB12A8], *(double *)(MEMORY[0x1E4FB12A8] + 8), *(double *)(MEMORY[0x1E4FB12A8] + 16), *(double *)(MEMORY[0x1E4FB12A8] + 24));
  id v6 = objc_msgSend(v0, sel_estimatedDimension_, 0.0);
  id v7 = objc_msgSend(v0, sel_fractionalHeightDimension_, 1.0);
  id v8 = objc_msgSend(v3, sel_sizeWithWidthDimension_heightDimension_, v6, v7);

  os_log_type_t v9 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769830;
  *(void *)(v10 + 32) = v5;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutItem);
  id v11 = v5;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v9, sel_horizontalGroupWithLayoutSize_subitems_, v8, isa);

  id v14 = objc_msgSend(self, sel_sectionWithGroup_, v13);
  static Platform.current.getter();
  objc_msgSend(v14, sel_setInterGroupSpacing_, 10.0);
  static Platform.current.getter();
  static Platform.current.getter();
  objc_msgSend(v14, sel_setContentInsets_, 0.0, 8.0, 0.0, 8.0);
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1588]), sel_init);
  objc_msgSend(v15, sel_setScrollDirection_, 1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCompositionalLayout);
  UICollectionViewCompositionalLayout.__allocating_init(section:configuration:)(v16, (NSCollectionLayoutSection)v14, (UICollectionViewCompositionalLayoutConfiguration)v15);
  uint64_t v18 = v17;

  return v18;
}

void __swiftcall UICollectionViewCompositionalLayout.__allocating_init(section:configuration:)(UICollectionViewCompositionalLayout *__return_ptr retstr, NSCollectionLayoutSection section, UICollectionViewCompositionalLayoutConfiguration configuration)
{
}

uint64_t key path getter for SharePlayDiscoverabilityMenuView.collectionView : SharePlayDiscoverabilityMenuView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SharePlayDiscoverabilityMenuView.collectionView : SharePlayDiscoverabilityMenuView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100))(*a1);
}

id SharePlayDiscoverabilityMenuView.collectionView.getter()
{
  return SharePlayDiscoverabilityMenuView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionView, (uint64_t (*)(uint64_t))closure #1 in SharePlayDiscoverabilityMenuView.collectionView.getter);
}

id SharePlayDiscoverabilityMenuView.titleLabel.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in SharePlayDiscoverabilityMenuView.collectionView.getter()
{
  id v0 = SharePlayDiscoverabilityMenuView.collectionViewLayout.getter();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1568]), sel_initWithFrame_collectionViewLayout_, v0, 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v1, sel_setShowsHorizontalScrollIndicator_, 0);
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_clearColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v4);

  return v3;
}

void SharePlayDiscoverabilityMenuView.collectionView.setter(uint64_t a1)
{
}

void (*SharePlayDiscoverabilityMenuView.collectionView.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = SharePlayDiscoverabilityMenuView.collectionView.getter();
  return SharePlayDiscoverabilityMenuView.collectionView.modify;
}

void SharePlayDiscoverabilityMenuView.collectionView.modify(void **a1, char a2)
{
}

void SharePlayDiscoverabilityMenuView.titleLabel.modify(void **a1, char a2, void (*a3)(void))
{
  id v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

id SharePlayDiscoverabilityMenuView.init(type:presentationStyle:foregroundApp:)(char a1, char a2, void *a3)
{
  char v7 = a1 & 1;
  char v8 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>);
  OUTLINED_FUNCTION_8_3();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_16_0();
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___titleLabel] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___moreButton] = 0;
  __swift_storeEnumTagSinglePayload((uint64_t)&v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___appCellRegistration], 1, 1, v3);
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionViewLayout] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionView] = 0;
  v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_type] = v7;
  v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_presentationStyle] = v8;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_foregroundApp] = a3;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for SharePlayDiscoverabilityMenuView();
  id v12 = a3;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  SharePlayDiscoverabilityMenuView.appCellRegistration.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v3);
  SharePlayDiscoverabilityMenuView.setupRootView()();

  return v13;
}

uint64_t type metadata accessor for SharePlayDiscoverabilityMenuView()
{
  uint64_t result = type metadata singleton initialization cache for SharePlayDiscoverabilityMenuView;
  if (!type metadata singleton initialization cache for SharePlayDiscoverabilityMenuView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void SharePlayDiscoverabilityMenuView.setupRootView()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for SharePlayAppCell();
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = (void *)MEMORY[0x1E4FBC8C8];
  char v7 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90);
  uint64_t v8 = (*MEMORY[0x1E4FBC8C8] & *v0) + 144;
  uint64_t v9 = (void *)((uint64_t (*)(uint64_t))v7)(v3);
  objc_msgSend(v1, sel_addSubview_, v9);

  uint64_t v10 = (*v6 & *v1) + 168;
  os_log_type_t v80 = *(uint64_t (**)(void))((*v6 & *v1) + 0xA8);
  uint64_t v11 = (void *)v80();
  objc_msgSend(v1, sel_addSubview_, v11);

  uint64_t v12 = (*v6 & *v1) + 248;
  id v13 = *(uint64_t (**)(void))((*v6 & *v1) + 0xF8);
  uint64_t v14 = v12;
  objc_super v15 = (void *)v13();
  objc_msgSend(v1, sel_addSubview_, v15);

  uint64_t v16 = (void *)v13();
  objc_msgSend(v16, sel_setDataSource_, v1);

  char v17 = *((unsigned char *)v1 + OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView_presentationStyle);
  uint64_t v78 = v13;
  uint64_t v79 = v10;
  v77[1] = v14;
  if ((v17 & 1) == 0)
  {
    id v29 = objc_msgSend(v1, sel_heightAnchor);
    static Platform.current.getter();
    id v30 = objc_msgSend(v29, sel_constraintEqualToConstant_, 160.0);

    objc_msgSend(v30, sel_setActive_, 1);
    goto LABEL_6;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v18 = @nonobjc UIImage.__allocating_init(systemName:)();
  if (!v18)
  {
    __break(1u);
    goto LABEL_13;
  }
  void *v5 = 0;
  v5[1] = 0xE000000000000000;
  v5[2] = 0xD000000000000012;
  v5[3] = 0x80000001C37A7420;
  v5[4] = v18;
  uint64_t v5[5] = TPNumberPadCharacter.rawValue.getter;
  v5[6] = 0;
  unint64_t v19 = (void *)((char *)v5 + *(int *)(v2 + 24));
  *unint64_t v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  swift_storeEnumTagMultiPayload();
  id v20 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIHostingController<SharePlayAppCell>));
  unint64_t v21 = (void *)UIHostingController.init(rootView:)();
  id v22 = objc_msgSend(v21, sel_view);
  if (!v22)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v23 = v22;
  objc_msgSend(v22, sel_intrinsicContentSize);
  double v25 = v24;

  long long v26 = (void *)v13();
  id v27 = objc_msgSend(v26, sel_heightAnchor);

  id v28 = objc_msgSend(v27, sel_constraintEqualToConstant_, v25);
  objc_msgSend(v28, sel_setActive_, 1);

LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1C377B2F0;
  id v32 = (void *)v7();
  id v33 = objc_msgSend(v32, sel_topAnchor);

  id v34 = objc_msgSend(v1, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  double v35 = 12.0;
  if (static Platform.current.getter() == 1) {
    double v36 = 16.0;
  }
  else {
    double v36 = 12.0;
  }
  id v37 = objc_msgSend(v33, sel_constraintEqualToAnchor_constant_, v34, v36);

  *(void *)(v31 + 32) = v37;
  uint64_t v38 = (void *)v7();
  id v39 = objc_msgSend(v38, sel_leadingAnchor);

  id v40 = objc_msgSend(v1, (SEL)&selRef_shouldShowCallDetailsWhenReady + 2);
  static Platform.current.getter();
  id v41 = objc_msgSend(v39, (SEL)&selRef_cinematicFramingButton + 7, v40, 16.0);

  *(void *)(v31 + 40) = v41;
  uint64_t v42 = (void *)v7();
  id v43 = objc_msgSend(v42, sel_trailingAnchor);

  v77[0] = v8;
  uint64_t v44 = v80;
  double v45 = (void *)v80();
  id v46 = objc_msgSend(v45, sel_leadingAnchor);

  id v47 = objc_msgSend(v43, sel_constraintLessThanOrEqualToAnchor_, v46);
  *(void *)(v31 + 48) = v47;
  uint64_t v48 = (void *)v44();
  id v49 = objc_msgSend(v48, sel_topAnchor);

  uint64_t v50 = (void *)v7();
  id v51 = objc_msgSend(v50, sel_topAnchor);

  id v52 = objc_msgSend(v49, sel_constraintEqualToAnchor_, v51);
  *(void *)(v31 + 56) = v52;
  uint64_t v53 = (void *)v44();
  id v54 = objc_msgSend(v53, sel_trailingAnchor);

  id v55 = objc_msgSend(v1, sel_trailingAnchor);
  static Platform.current.getter();
  id v56 = objc_msgSend(v54, (SEL)&selRef_cinematicFramingButton + 7, v55, -16.0);

  *(void *)(v31 + 64) = v56;
  uint64_t v57 = v78;
  unint64_t v58 = (void *)v78();
  id v59 = objc_msgSend(v58, sel_leadingAnchor);

  id v60 = objc_msgSend(v1, sel_leadingAnchor);
  id v61 = objc_msgSend(v59, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v60);

  *(void *)(v31 + 72) = v61;
  uint64_t v62 = (void *)v57();
  id v63 = objc_msgSend(v62, sel_trailingAnchor);

  id v64 = objc_msgSend(v1, sel_trailingAnchor);
  id v65 = objc_msgSend(v63, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v64);

  *(void *)(v31 + 80) = v65;
  uint64_t v66 = (void *)v57();
  id v67 = objc_msgSend(v66, sel_topAnchor);

  unint64_t v68 = (void *)v7();
  id v69 = objc_msgSend(v68, sel_bottomAnchor);

  if (static Platform.current.getter() == 1) {
    double v35 = 16.0;
  }
  uint64_t v70 = self;
  id v71 = objc_msgSend(v67, sel_constraintEqualToAnchor_constant_, v69, v35);

  *(void *)(v31 + 88) = v71;
  uint64_t v72 = (void *)v57();
  id v73 = objc_msgSend(v72, sel_bottomAnchor);

  id v74 = objc_msgSend(v1, sel_bottomAnchor);
  id v75 = objc_msgSend(v73, sel_constraintEqualToAnchor_, v74);

  *(void *)(v31 + 96) = v75;
  uint64_t v81 = v31;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v70, sel_activateConstraints_, isa);
}

id SharePlayDiscoverabilityMenuView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SharePlayDiscoverabilityMenuView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___titleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___moreButton] = 0;
  uint64_t v1 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___appCellRegistration];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionViewLayout] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32SharePlayDiscoverabilityMenuView____lazy_storage___collectionView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id SharePlayDiscoverabilityMenuView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SharePlayDiscoverabilityMenuView.init(frame:)()
{
}

id SharePlayDiscoverabilityMenuView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharePlayDiscoverabilityMenuView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Int __swiftcall SharePlayDiscoverabilityMenuView.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  SharePlayDiscoverabilityMenuView.sortedSharePlayApps.getter();
  Swift::Int v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t SharePlayDiscoverabilityMenuView.collectionView(_:cellForItemAt:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>);
  OUTLINED_FUNCTION_8_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  SharePlayDiscoverabilityMenuView.sortedSharePlayApps.getter();
  uint64_t v6 = v5;
  unint64_t result = IndexPath.item.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v6 + 16))
  {
    uint64_t v8 = *(void **)(v6 + 40 * result + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v8;
    swift_bridgeObjectRelease();
    SharePlayDiscoverabilityMenuView.appCellRegistration.getter(v1);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v10 = v9;
    uint64_t v11 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t ObjC metadata update function for SharePlayDiscoverabilityMenuView()
{
  return type metadata accessor for SharePlayDiscoverabilityMenuView();
}

void type metadata completion function for SharePlayDiscoverabilityMenuView()
{
  type metadata accessor for UICollectionView.CellRegistration<UICollectionViewCell, Application>?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SharePlayDiscoverabilityMenuView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharePlayDiscoverabilityMenuView);
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.titleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.titleLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.titleLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.moreButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.moreButton.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.moreButton.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.collectionView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.collectionView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.collectionView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SharePlayDiscoverabilityMenuView.__allocating_init(type:presentationStyle:foregroundApp:)(char a1, char a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 272))(a1 & 1, a2 & 1);
}

void type metadata accessor for UICollectionView.CellRegistration<UICollectionViewCell, Application>?()
{
  if (!lazy cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>?);
    }
  }
}

uint64_t SharePlayDiscoverabilityMenuView.didTapMore()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 64);
  MEMORY[0x1F4188790](v0 - 8);
  URL.init(string:)();
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  char v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = (uint64_t)v8;
  outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)v8, (uint64_t)v8, &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v3) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v8, v3);
    URL._bridgeToObjectiveC()(v10);
    uint64_t v12 = v11;
    TUOpenSensitiveURL();

    id v13 = objc_msgSend(self, sel_defaultCenter);
    if (one-time initialization token for appLaunchTriggeredPreferringHUDDismissal != -1) {
      swift_once();
    }
    objc_msgSend(v13, sel_postNotificationName_object_, static Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal, 0);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return outlined destroy of Any?(v2, &demangling cache variable for type metadata for URL?);
  }
}

uint64_t sub_1C3303658()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(uint64_t a1, uint64_t a2, long long *a3)
{
  return closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(a1, a2, a3);
}

uint64_t outlined assign with take of UICollectionView.CellRegistration<UICollectionViewCell, Application>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewCell, Application>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(*(long long **)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type UIHostingConfiguration<SharePlayAppCell, EmptyView> and conformance UIHostingConfiguration<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type UIHostingConfiguration<SharePlayAppCell, EmptyView> and conformance UIHostingConfiguration<A, B>;
  if (!lazy protocol witness table cache variable for type UIHostingConfiguration<SharePlayAppCell, EmptyView> and conformance UIHostingConfiguration<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UIHostingConfiguration<SharePlayAppCell, EmptyView>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingConfiguration<SharePlayAppCell, EmptyView> and conformance UIHostingConfiguration<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharePlayAppCell and conformance SharePlayAppCell()
{
  unint64_t result = lazy protocol witness table cache variable for type SharePlayAppCell and conformance SharePlayAppCell;
  if (!lazy protocol witness table cache variable for type SharePlayAppCell and conformance SharePlayAppCell)
  {
    type metadata accessor for SharePlayAppCell();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharePlayAppCell and conformance SharePlayAppCell);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(uint64_t *a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in SharePlayDiscoverabilityMenuView.appCellRegistration.getter(a1, v1);
}

uint64_t outlined init with take of SharePlayAppCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharePlayAppCell();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3303824()
{
  return 8;
}

uint64_t sub_1C3303830()
{
  return swift_release();
}

uint64_t sub_1C3303838(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C330384C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t InCallCallControlsService.__allocating_init(activeCall:localVideoSupported:letMeInState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  InCallCallControlsService.init(activeCall:localVideoSupported:letMeInState:)(a1, a2);
  return v4;
}

uint64_t InCallCallControlsService.updateMode(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t key path getter for InCallCallControlsService.controlsManager : InCallCallControlsService@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallCallControlsService.controlsManager : InCallCallControlsService()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallCallControlsService.controlsManager.getter()
{
  OUTLINED_FUNCTION_0_32();
  return MEMORY[0x1C8776240](v0 + 16);
}

void InCallCallControlsService.controlsManager.setter(void *a1)
{
}

void (*InCallCallControlsService.controlsManager.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  OUTLINED_FUNCTION_6_1();
  v3[3] = MEMORY[0x1C8776240](v1 + 16);
  return InCallCallControlsService.controlsManager.modify;
}

void InCallCallControlsService.controlsManager.modify()
{
  OUTLINED_FUNCTION_13_53();
  swift_unknownObjectWeakAssign();
  if (v2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v0);
}

uint64_t key path getter for InCallCallControlsService.videoTileConversationController : InCallCallControlsService@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 24;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallCallControlsService.videoTileConversationController : InCallCallControlsService()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallCallControlsService.videoTileConversationController.getter()
{
  OUTLINED_FUNCTION_0_32();
  return MEMORY[0x1C8776240](v0 + 24);
}

void InCallCallControlsService.videoTileConversationController.setter(void *a1)
{
}

void (*InCallCallControlsService.videoTileConversationController.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  OUTLINED_FUNCTION_6_1();
  v3[3] = MEMORY[0x1C8776240](v1 + 24);
  return InCallCallControlsService.videoTileConversationController.modify;
}

void InCallCallControlsService.videoTileConversationController.modify()
{
  OUTLINED_FUNCTION_13_53();
  swift_unknownObjectWeakAssign();
  if (v2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v0);
}

uint64_t InCallCallControlsService.init(activeCall:localVideoSupported:letMeInState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_64();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v10 = v4 + OBJC_IVAR____TtC15ConversationKit25InCallCallControlsService__hasPendingParticipant;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v3, v6);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit25InCallCallControlsService_conversationStateSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<TUConversationState, Never>);
  OUTLINED_FUNCTION_8_9();
  *(void *)(v4 + v11) = OUTLINED_FUNCTION_15_52();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(a2 + 184))(ObjectType, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<TUCallStatus, Never>);
  OUTLINED_FUNCTION_8_9();
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit25InCallCallControlsService_callStatusSubject) = OUTLINED_FUNCTION_15_52();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<InCallControlsMode?, Never>);
  OUTLINED_FUNCTION_8_9();
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit25InCallCallControlsService_modeSubject) = OUTLINED_FUNCTION_15_52();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<TUConversationLetMeInRequestState, Never>);
  OUTLINED_FUNCTION_8_9();
  uint64_t v13 = OUTLINED_FUNCTION_15_52();
  swift_unknownObjectRelease();
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit25InCallCallControlsService_letMeInStateSubject) = v13;
  return v4;
}

uint64_t InCallCallControlsService.conversation.getter()
{
  OUTLINED_FUNCTION_0_32();
  uint64_t v1 = (void *)MEMORY[0x1C8776240](v0 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x290))();

  return v3;
}

uint64_t InCallCallControlsService.currentCallStatus.getter()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t InCallCallControlsService.currentConversationState.getter()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t InCallCallControlsService.currentMode.getter()
{
  CurrentValueSubject.value.getter();
  if (v1 <= 0xFDu) {
    return v1;
  }
  else {
    return 32;
  }
}

uint64_t InCallCallControlsService.currentLetMeInState.getter()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t *InCallCallControlsService.callStatus.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<TUCallStatus, Never>>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_62();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<TUCallStatus, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<TUCallStatus, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<TUCallStatus, Never>);
  lazy protocol witness table accessor for type TUCallStatus and conformance TUCallStatus(&lazy protocol witness table cache variable for type TUCallStatus and conformance TUCallStatus, type metadata accessor for TUCallStatus);
  OUTLINED_FUNCTION_5_85();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<TUCallStatus, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<TUCallStatus, Never>>);
  OUTLINED_FUNCTION_5_17();
  uint64_t v1 = OUTLINED_FUNCTION_4_11();
  v2(v1);
  return &demangling cache variable for type metadata for CurrentValueSubject<TUCallStatus, Never>;
}

uint64_t *InCallCallControlsService.conversationState.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<TUConversationState, Never>>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_62();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<TUConversationState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<TUConversationState, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<TUConversationState, Never>);
  lazy protocol witness table accessor for type TUCallStatus and conformance TUCallStatus(&lazy protocol witness table cache variable for type TUConversationState and conformance TUConversationState, type metadata accessor for TUConversationState);
  OUTLINED_FUNCTION_5_85();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<TUConversationState, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<TUConversationState, Never>>);
  OUTLINED_FUNCTION_5_17();
  uint64_t v1 = OUTLINED_FUNCTION_4_11();
  v2(v1);
  return &demangling cache variable for type metadata for CurrentValueSubject<TUConversationState, Never>;
}

uint64_t InCallCallControlsService.mode.getter()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<InCallControlsMode?, Never>, InCallControlsMode>);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_64();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.CompactMap<CurrentValueSubject<InCallControlsMode?, Never>, InCallControlsMode>>);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_63();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<InCallControlsMode?, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<InCallControlsMode?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<InCallControlsMode?, Never>);
  Publisher.compactMap<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<InCallControlsMode?, Never>, InCallControlsMode> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<InCallControlsMode?, Never>, InCallControlsMode>);
  lazy protocol witness table accessor for type InCallControlsMode and conformance InCallControlsMode();
  Publisher<>.removeDuplicates()();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.CompactMap<CurrentValueSubject<InCallControlsMode?, Never>, InCallControlsMode>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.CompactMap<CurrentValueSubject<InCallControlsMode?, Never>, InCallControlsMode>>);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v6);
  return v10;
}

unsigned char *closure #1 in InCallCallControlsService.mode.getter@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type InCallControlsMode and conformance InCallControlsMode()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsMode and conformance InCallControlsMode;
  if (!lazy protocol witness table cache variable for type InCallControlsMode and conformance InCallControlsMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsMode and conformance InCallControlsMode);
  }
  return result;
}

uint64_t *InCallCallControlsService.letMeInStates.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<TUConversationLetMeInRequestState, Never>>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_62();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<TUConversationLetMeInRequestState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<TUConversationLetMeInRequestState, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<TUConversationLetMeInRequestState, Never>);
  lazy protocol witness table accessor for type TUCallStatus and conformance TUCallStatus(&lazy protocol witness table cache variable for type TUConversationLetMeInRequestState and conformance TUConversationLetMeInRequestState, type metadata accessor for TUConversationLetMeInRequestState);
  OUTLINED_FUNCTION_5_85();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<TUConversationLetMeInRequestState, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<TUConversationLetMeInRequestState, Never>>);
  OUTLINED_FUNCTION_5_17();
  uint64_t v1 = OUTLINED_FUNCTION_4_11();
  v2(v1);
  return &demangling cache variable for type metadata for CurrentValueSubject<TUConversationLetMeInRequestState, Never>;
}

uint64_t lazy protocol witness table accessor for type TUCallStatus and conformance TUCallStatus(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t InCallCallControlsService.updateCallStatus(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t InCallCallControlsService.updateConversationState(_:)()
{
  return InCallCallControlsService.updateConversationState(_:)();
}

{
  return CurrentValueSubject.send(_:)();
}

uint64_t InCallCallControlsService.updateLetMeInState(_:)()
{
  return InCallCallControlsService.updateConversationState(_:)();
}

uint64_t InCallCallControlsService.hasPendingParticipant.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for InCallCallControlsService.hasPendingParticipant : InCallCallControlsService@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = InCallCallControlsService.hasPendingParticipant.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C33047B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = InCallCallControlsService.hasPendingParticipant.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for InCallCallControlsService.hasPendingParticipant : InCallCallControlsService()
{
  return InCallCallControlsService.hasPendingParticipant.setter();
}

uint64_t sub_1C3304808()
{
  return InCallCallControlsService.hasPendingParticipant.setter();
}

uint64_t InCallCallControlsService.hasPendingParticipant.setter()
{
  return static Published.subscript.setter();
}

uint64_t InCallCallControlsService.$hasPendingParticipant.getter()
{
  return swift_endAccess();
}

uint64_t key path setter for InCallCallControlsService.$hasPendingParticipant : InCallCallControlsService(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return InCallCallControlsService.$hasPendingParticipant.setter((uint64_t)v4);
}

uint64_t InCallCallControlsService.$hasPendingParticipant.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

uint64_t InCallCallControlsService.hasPendingParticipantPublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<Bool>.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
  Publisher<>.removeDuplicates()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<Bool>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<Bool>.Publisher>);
  uint64_t v12 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v8);
  return v12;
}

uint64_t InCallCallControlsService.updateConversation(_:)(uint64_t a1)
{
  outlined init with copy of Conversation?(a1, (uint64_t)&v9);
  if (v10)
  {
    outlined init with take of Notice(&v9, (uint64_t)v11);
    uint64_t v1 = v12;
    uint64_t v2 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2);
    specialized Set.isEmpty.getter(v3);
    swift_bridgeObjectRelease();
    InCallCallControlsService.hasPendingParticipant.setter();
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.sidebar);
    swift_retain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67109120;
      LOBYTE(v9) = InCallCallControlsService.hasPendingParticipant.getter() & 1;
      LODWORD(v9) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1C2F90000, v5, v6, "CallControlsService updated conversation; hasPendingParticipant = %{BOOL}d",
        v7,
        8u);
      MEMORY[0x1C87760E0](v7, -1, -1);
    }
    else
    {

      swift_release();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)&v9);
    return InCallCallControlsService.hasPendingParticipant.setter();
  }
}

Swift::Void __swiftcall InCallCallControlsService.joinConversation()()
{
}

Swift::Void __swiftcall InCallCallControlsService.leaveConversation()()
{
}

Swift::Void __swiftcall InCallCallControlsService.cancelJoinCountdown()()
{
}

void InCallCallControlsService.joinConversation()(void (*a1)(void))
{
  OUTLINED_FUNCTION_11_43();
  uint64_t v3 = MEMORY[0x1C8776240](v1);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    a1();
  }
}

uint64_t InCallCallControlsService.muted.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_3_98((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.muted.getter, a2, (void (*)(uint64_t *__return_ptr))protocol witness for static LayoutValueKey.defaultValue.getter in conformance LayoutPositionKey);
}

uint64_t closure #1 in InCallCallControlsService.muted.getter@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x5E0))();
  *a2 = (result & 1) == 0;
  return result;
}

uint64_t specialized InCallCallControlsService.fromControlManager<A>(_:defaultValue:)(void (*a1)(uint64_t *__return_ptr), uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v3 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    a1(&v13);
  }
  else
  {
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.sidebar);
    long long v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C2F90000, v9, v10, "[InCallCallControlsService] Missing control manager.", v11, 2u);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }

    a3(&v13);
  }
  return v13;
}

{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;

  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v3 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    a1(&v13);
  }
  else
  {
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.sidebar);
    long long v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C2F90000, v9, v10, "[InCallCallControlsService] Missing control manager.", v11, 2u);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }

    a3(&v13);
  }
  return v13;
}

uint64_t InCallCallControlsService.mutedStates.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_2_94((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.mutedStates.getter, a2, (void (*)(uint64_t *__return_ptr))closure #2 in InCallCallControlsService.mutedStates.getter);
}

uint64_t closure #1 in InCallCallControlsService.mutedStates.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v19 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<Bool>.Publisher, Bool>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<Published<Bool>.Publisher, Bool>>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  objc_super v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x5F8))(v13);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<Published<Bool>.Publisher, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<Bool>.Publisher, Bool>);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Map<Published<Bool>.Publisher, Bool>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<Published<Bool>.Publisher, Bool>>);
  uint64_t v16 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  *unint64_t v19 = v16;
  return result;
}

unsigned char *closure #1 in closure #1 in InCallCallControlsService.mutedStates.getter@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

uint64_t closure #2 in InCallCallControlsService.mutedStates.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in InCallCallControlsService.mutedStates.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  Just.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Just<Bool> and conformance Just<A>, &demangling cache variable for type metadata for Just<Bool>);
  uint64_t v7 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall InCallCallControlsService.mutateMutedState(_:)(Swift::Bool a1)
{
  if ((specialized InCallCallControlsService.fromControlManager<A>(_:defaultValue:)((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.muted.getter, 0, (void (*)(uint64_t *__return_ptr))protocol witness for static LayoutValueKey.defaultValue.getter in conformance LayoutPositionKey) & 1) != a1)
  {
    OUTLINED_FUNCTION_11_43();
    uint64_t v1 = MEMORY[0x1C8776240]();
    if (v1)
    {
      uint64_t v2 = (void *)v1;
      ConversationControlsManager.setLocalAudio(muted:bluetoothAudioFormat:)();
    }
  }
}

uint64_t InCallCallControlsService.localVideoSupported.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_3_98((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.localVideoSupported.getter, a2, (void (*)(uint64_t *__return_ptr))closure #2 in InCallCallControlsService.localVideoSupported.getter);
}

uint64_t closure #1 in InCallCallControlsService.localVideoSupported.getter@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x610))();
  *a2 = result & 1;
  return result;
}

void closure #2 in InCallCallControlsService.localVideoSupported.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t InCallCallControlsService.localVideoSupportedState.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_2_94((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.localVideoSupportedState.getter, a2, (void (*)(uint64_t *__return_ptr))closure #2 in InCallCallControlsService.localVideoSupportedState.getter);
}

uint64_t closure #1 in InCallCallControlsService.localVideoSupportedState.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in InCallCallControlsService.localVideoSupportedState.getter(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<ControlsActionState>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  os_log_type_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<ControlsActionState>.Publisher, Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v16 = v15 - v14;
  char v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<Published<ControlsActionState>.Publisher, Bool>>);
  OUTLINED_FUNCTION_4();
  unint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_21();
  id v23 = v22 - v21;
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x628))();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<ControlsActionState>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<ControlsActionState>.Publisher);
  Publisher.map<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<Published<ControlsActionState>.Publisher, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<ControlsActionState>.Publisher, Bool>);
  Publisher<>.removeDuplicates()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Map<Published<ControlsActionState>.Publisher, Bool>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<Published<ControlsActionState>.Publisher, Bool>>);
  double v24 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v23, v17);
  *a2 = v24;
  return result;
}

uint64_t closure #2 in InCallCallControlsService.localVideoSupportedState.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in InCallCallControlsService.mutedStates.getter(a1);
}

uint64_t InCallCallControlsService.isVideoOn.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_3_98((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.isVideoOn.getter, a2, (void (*)(uint64_t *__return_ptr))closure #2 in InCallCallControlsService.localVideoSupported.getter);
}

uint64_t closure #1 in InCallCallControlsService.isVideoOn.getter@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x610))();
  *a2 = BYTE1(result) & 1;
  return result;
}

uint64_t InCallCallControlsService.isVideoOnState.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_2_94((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.isVideoOnState.getter, a2, (void (*)(uint64_t *__return_ptr))closure #2 in InCallCallControlsService.localVideoSupportedState.getter);
}

uint64_t closure #1 in InCallCallControlsService.isVideoOnState.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in InCallCallControlsService.localVideoSupportedState.getter(a1, a2);
}

uint64_t closure #1 in closure #1 in InCallCallControlsService.isVideoOnState.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

Swift::Void __swiftcall InCallCallControlsService.mutateVideoOnState(_:)(Swift::Bool a1)
{
  if ((specialized InCallCallControlsService.fromControlManager<A>(_:defaultValue:)((void (*)(uint64_t *__return_ptr))closure #1 in InCallCallControlsService.isVideoOn.getter, 0, (void (*)(uint64_t *__return_ptr))closure #2 in InCallCallControlsService.localVideoSupported.getter) & 1) != a1)
  {
    OUTLINED_FUNCTION_0_32();
    uint64_t v2 = MEMORY[0x1C8776240](v1 + 24);
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      ConversationController.toggleLocalVideo(shouldPauseIfStopped:)(0);
    }
    else
    {
      OUTLINED_FUNCTION_0_32();
      uint64_t v4 = MEMORY[0x1C8776240](v1 + 16);
      if (!v4) {
        return;
      }
      uint64_t v3 = (void *)v4;
      ConversationControlsManager.toggleVideoButtonTapped()();
    }
  }
}

uint64_t InCallCallControlsService.deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit25InCallCallControlsService__hasPendingParticipant;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t InCallCallControlsService.__deallocating_deinit()
{
  InCallCallControlsService.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CallControlsService.conversation.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.conversation.getter();
}

uint64_t protocol witness for CallControlsService.currentCallStatus.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.currentCallStatus.getter();
}

uint64_t protocol witness for CallControlsService.currentConversationState.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.currentConversationState.getter();
}

uint64_t protocol witness for CallControlsService.currentMode.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.currentMode.getter();
}

uint64_t protocol witness for CallControlsService.currentLetMeInState.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.currentLetMeInState.getter();
}

uint64_t *protocol witness for CallControlsService.callStatus.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.callStatus.getter();
}

uint64_t *protocol witness for CallControlsService.conversationState.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.conversationState.getter();
}

uint64_t protocol witness for CallControlsService.mode.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.mode.getter();
}

uint64_t *protocol witness for CallControlsService.letMeInStates.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.letMeInStates.getter();
}

uint64_t protocol witness for CallControlsService.hasPendingParticipant.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.hasPendingParticipant.getter() & 1;
}

uint64_t protocol witness for CallControlsService.hasPendingParticipantPublisher.getter in conformance InCallCallControlsService()
{
  return InCallCallControlsService.hasPendingParticipantPublisher.getter();
}

uint64_t protocol witness for CallControlsService.updateCallStatus(_:) in conformance InCallCallControlsService()
{
  return InCallCallControlsService.updateCallStatus(_:)();
}

uint64_t protocol witness for CallControlsService.updateConversationState(_:) in conformance InCallCallControlsService()
{
  return InCallCallControlsService.updateConversationState(_:)();
}

uint64_t protocol witness for CallControlsService.updateMode(_:) in conformance InCallCallControlsService()
{
  return InCallCallControlsService.updateMode(_:)();
}

uint64_t protocol witness for CallControlsService.updateLetMeInState(_:) in conformance InCallCallControlsService()
{
  return InCallCallControlsService.updateLetMeInState(_:)();
}

uint64_t protocol witness for CallControlsService.updateConversation(_:) in conformance InCallCallControlsService(uint64_t a1)
{
  return InCallCallControlsService.updateConversation(_:)(a1);
}

uint64_t protocol witness for CallControlsService.controlsManager.getter in conformance InCallCallControlsService()
{
  uint64_t v1 = *v0 + 16;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

void protocol witness for CallControlsService.joinConversation() in conformance InCallCallControlsService()
{
}

void protocol witness for CallControlsService.leaveConversation() in conformance InCallCallControlsService()
{
}

void protocol witness for CallControlsService.cancelJoinCountdown() in conformance InCallCallControlsService()
{
}

uint64_t protocol witness for CallControlsService.muted.getter in conformance InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return InCallCallControlsService.muted.getter(a1, a2) & 1;
}

uint64_t protocol witness for CallControlsService.mutedStates.getter in conformance InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return InCallCallControlsService.mutedStates.getter(a1, a2);
}

void protocol witness for CallControlsService.mutateMutedState(_:) in conformance InCallCallControlsService(Swift::Bool a1)
{
}

uint64_t protocol witness for CallControlsService.localVideoSupported.getter in conformance InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return InCallCallControlsService.localVideoSupported.getter(a1, a2) & 1;
}

uint64_t protocol witness for CallControlsService.localVideoSupportedState.getter in conformance InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return InCallCallControlsService.localVideoSupportedState.getter(a1, a2);
}

uint64_t protocol witness for CallControlsService.isVideoOn.getter in conformance InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return InCallCallControlsService.isVideoOn.getter(a1, a2) & 1;
}

uint64_t protocol witness for CallControlsService.isVideoOnState.getter in conformance InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return InCallCallControlsService.isVideoOnState.getter(a1, a2);
}

void protocol witness for CallControlsService.mutateVideoOnState(_:) in conformance InCallCallControlsService(Swift::Bool a1)
{
}

uint64_t outlined destroy of Conversation?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conversation?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C33061DC()
{
  return InCallCallControlsService.$hasPendingParticipant.getter();
}

uint64_t dispatch thunk of CallControlsService.conversation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallControlsService.currentCallStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallControlsService.currentConversationState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CallControlsService.currentMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CallControlsService.currentLetMeInState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CallControlsService.callStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CallControlsService.conversationState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CallControlsService.mode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CallControlsService.letMeInStates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CallControlsService.hasPendingParticipant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of CallControlsService.hasPendingParticipantPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of CallControlsService.updateCallStatus(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of CallControlsService.updateConversationState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of CallControlsService.updateMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of CallControlsService.updateLetMeInState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of CallControlsService.updateConversation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of CallControlsService.controlsManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of CallControlsService.joinConversation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of CallControlsService.leaveConversation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of CallControlsService.cancelJoinCountdown()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of CallControlsService.muted.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of CallControlsService.mutedStates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of CallControlsService.mutateMutedState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of CallControlsService.localVideoSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of CallControlsService.localVideoSupportedState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of CallControlsService.isVideoOn.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of CallControlsService.isVideoOnState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of CallControlsService.mutateVideoOnState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t ObjC metadata update function for InCallCallControlsService()
{
  return type metadata accessor for InCallCallControlsService();
}

uint64_t type metadata accessor for InCallCallControlsService()
{
  uint64_t result = type metadata singleton initialization cache for InCallCallControlsService;
  if (!type metadata singleton initialization cache for InCallCallControlsService) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for InCallCallControlsService()
{
  type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for InCallCallControlsService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallCallControlsService);
}

uint64_t dispatch thunk of InCallCallControlsService.__allocating_init(activeCall:localVideoSupported:letMeInState:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

Swift::String __swiftcall String.hashWithSalt(salt:)(Swift::String salt)
{
  int64_t v3 = v2;
  unint64_t v4 = v1;
  object = salt._object;
  uint64_t countAndFlagsBits = salt._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for SHA256();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SHA256Digest();
  OUTLINED_FUNCTION_4();
  uint64_t v53 = v14;
  uint64_t v54 = v13;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  id v52 = (char *)&v49 - v18;
  unint64_t v56 = v4;
  int64_t v57 = v3;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = countAndFlagsBits;
  v19._object = object;
  String.append(_:)(v19);
  uint64_t v20 = specialized Data.init<A>(_:)(v56, v57);
  unint64_t v22 = v21;
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.init()();
  unint64_t v51 = v22;
  switch(v22 >> 62)
  {
    case 1uLL:
      if (v20 >> 32 < (int)v20) {
        goto LABEL_23;
      }
      outlined copy of Data._Representation(v20, v22);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v20, v20 >> 32);
LABEL_5:
      outlined consume of Data._Representation(v20, v22);
LABEL_7:
      double v25 = v52;
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v17, v25, v54);
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x1E4F24F80]);
      dispatch thunk of Sequence.makeIterator()();
      unint64_t v26 = v56;
      int64_t v27 = v57;
      int64_t v28 = *(void *)(v56 + 16);
      uint64_t v50 = v20;
      if (v57 != v28)
      {
        if (v57 < v28)
        {
          unint64_t v29 = MEMORY[0x1E4FBC860];
          long long v55 = xmmword_1C3769620;
          unint64_t v38 = v57;
          while ((v27 & 0x8000000000000000) == 0)
          {
            if (v38 >= *(void *)(v26 + 16)) {
              goto LABEL_21;
            }
            char v39 = *(unsigned char *)(v26 + 32 + v38);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            uint64_t v40 = swift_allocObject();
            *(_OWORD *)(v40 + 16) = v55;
            *(void *)(v40 + 56) = MEMORY[0x1E4FBC358];
            *(void *)(v40 + 64) = MEMORY[0x1E4FBC3B0];
            *(unsigned char *)(v40 + 32) = v39;
            uint64_t v41 = String.init(format:_:)();
            uint64_t v43 = v42;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              unint64_t v29 = v46;
            }
            unint64_t v44 = *(void *)(v29 + 16);
            if (v44 >= *(void *)(v29 + 24) >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              unint64_t v29 = v47;
            }
            ++v38;
            *(void *)(v29 + 16) = v44 + 1;
            unint64_t v45 = v29 + 16 * v44;
            *(void *)(v45 + 32) = v41;
            *(void *)(v45 + 40) = v43;
            if (v28 == v38) {
              goto LABEL_9;
            }
          }
          __break(1u);
LABEL_21:
          __break(1u);
        }
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3306A58);
      }
      unint64_t v29 = MEMORY[0x1E4FBC860];
LABEL_9:
      swift_bridgeObjectRelease();
      unint64_t v56 = v29;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
      int64_t v32 = v31;
      swift_bridgeObjectRelease();
      unint64_t v56 = v30;
      int64_t v57 = v32;
      uint64_t v33 = String.init<A>(_:)();
      double v35 = v34;
      outlined consume of Data._Representation(v50, v51);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
      uint64_t v36 = v33;
      id v37 = v35;
      result._object = v37;
      result._uint64_t countAndFlagsBits = v36;
      return result;
    case 2uLL:
      uint64_t v24 = *(void *)(v20 + 16);
      uint64_t v23 = *(void *)(v20 + 24);
      outlined copy of Data._Representation(v20, v22);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v24, v23);
      swift_release();
      swift_release();
      goto LABEL_5;
    default:
      _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytTg5037_s10Foundation4DataV06InlineB0V15withB31BytesyxxSWKXEKlFxSWKXEfU_yt_TG5SWxsAC_pRi_zRi0_zlyytIsgyrzo_SiTf1nnc_n063_s9CryptoKit12HashFunctionPAAE6update4datayqd___t10Foundation12I70ProtocolRd__lFy7Regions_7ElementQYd__XEfU_ySWXEfU_AA6SHA256V_AF0H0VTg50U3Kit6SHA256VTf1nncn_n();
      outlined consume of Data._Representation(v20, v22);
      goto LABEL_7;
  }
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v37 = a1;
  unint64_t v38 = a2;
  *(void *)&long long v41 = a1;
  *((void *)&v41 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of Notice(v39, (uint64_t)&v42);
    __swift_project_boxed_opaque_existential_1(&v42, v44);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v39[0] = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    return *(void *)&v39[0];
  }
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  outlined destroy of ContiguousBytes?((uint64_t)v39);
  unint64_t v2 = v37;
  uint64_t v3 = v38;
  if ((v38 & 0x1000000000000000) == 0)
  {
    if ((v38 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = v37;
      uint64_t v43 = v38 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v42 + (HIBYTE(v38) & 0xF);
      uint64_t v7 = &v42;
    }
    else
    {
      if ((v37 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (v38 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v37 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = MEMORY[0x1C876EF40](v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v39[0] = v8;
      *((void *)&v39[0] + 1) = v10;
      return *(void *)&v39[0];
    }
    unint64_t v2 = v37;
    uint64_t v3 = v38;
    if ((v38 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_69:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_68:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_69;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v39[0] = MEMORY[0x1C876EF20](v11);
  *((void *)&v39[0] + 1) = v12;
  MEMORY[0x1F4188790](*(void *)&v39[0]);
  v32[2] = &v37;
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:), (uint64_t)v32);
  uint64_t v16 = *((void *)&v39[0] + 1) >> 62;
  uint64_t v17 = v13;
  unint64_t v19 = v18;
  unint64_t v20 = v14;
  uint64_t v3 = BYTE14(v39[0]);
  switch(*((void *)&v39[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v21) = DWORD1(v39[0]) - LODWORD(v39[0]);
      if (__OFSUB__(DWORD1(v39[0]), v39[0])) {
        goto LABEL_72;
      }
      uint64_t v21 = (int)v21;
LABEL_23:
      if (v15 != v21)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v3 = *(uint64_t *)&v39[0] >> 32;
          }
          else {
            uint64_t v3 = *(void *)(*(void *)&v39[0] + 24);
          }
        }
LABEL_60:
        if (v3 < v15)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_62:
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
LABEL_29:
      if ((v19 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v19) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v41 + 7) = 0;
      *(void *)&long long v41 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      unint64_t v33 = v10;
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v19 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v36 = v19 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v34 = v8;
      uint64_t v35 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v23 = *(void *)(*(void *)&v39[0] + 16);
      uint64_t v22 = *(void *)(*(void *)&v39[0] + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_23;
      }
      goto LABEL_73;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v3 = 0;
      goto LABEL_60;
    default:
      uint64_t v21 = BYTE14(v39[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v2 = v20;
    if ((v20 & 0xC) == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v17, v19);
    }
    unint64_t v29 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v30 = v2;
    }
    else if ((v19 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = v17;
      uint64_t v43 = v36;
      char v30 = *((unsigned char *)&v42 + v29);
    }
    else
    {
      unint64_t v2 = v35;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v30 = *(unsigned char *)(v2 + v29);
    }
    if ((v20 & 0xC) == v28)
    {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v17, v19);
      unint64_t v20 = v2;
      if ((v19 & 0x1000000000000000) == 0)
      {
LABEL_47:
        unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_52;
      }
    }
    else if ((v19 & 0x1000000000000000) == 0)
    {
      goto LABEL_47;
    }
    if (v25 <= v20 >> 16) {
      goto LABEL_67;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v20 = v2;
LABEL_52:
    *((unsigned char *)&v41 + v26) = v30;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_66;
    }
    BYTE14(v41) = v26;
    if (v26 == 14)
    {
      uint64_t v42 = v41;
      LODWORD(v43) = DWORD2(v41);
      WORD2(v43) = WORD6(v41);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v41) = 0;
    }
  }
  while (4 * v25 != v20 >> 14);
  uint64_t v8 = v34;
  unint64_t v10 = v33;
  if ((_BYTE)v26)
  {
    uint64_t v42 = v41;
    LODWORD(v43) = DWORD2(v41);
    WORD2(v43) = WORD6(v41);
    Data._Representation.append(contentsOf:)();
    outlined consume of Data?(v8, v10);
    goto LABEL_62;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of Data?(v8, v10);
LABEL_63:
  swift_bridgeObjectRelease();
  return *(void *)&v39[0];
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytTg5037_s10Foundation4DataV06InlineB0V15withB31BytesyxxSWKXEKlFxSWKXEfU_yt_TG5SWxsAC_pRi_zRi0_zlyytIsgyrzo_SiTf1nnc_n063_s9CryptoKit12HashFunctionPAAE6update4datayqd___t10Foundation12I70ProtocolRd__lFy7Regions_7ElementQYd__XEfU_ySWXEfU_AA6SHA256V_AF0H0VTg50U3Kit6SHA256VTf1nncn_n()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

void *_ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVySS8UTF8ViewVG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxt9KXEfU_s16hi5VySS8jK10VG_Sit_TG5SwxsAC_pRi_zRi0_zlyAJ_SitIsgyrzo_SiTf1nc_n(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  Swift::String result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_1_107(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = MEMORY[0x1C8773240](15, a1 >> 16);
    OUTLINED_FUNCTION_1_107(v3);
    return v4 | 8;
  }
}

void *specialized closure #3 in Data.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v5, a1, a2);
}

void *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v2 = xmmword_1C377B500;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      Swift::String result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      uint64_t *v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      Swift::String result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *unint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVySS8UTF8ViewVG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxt9KXEfU_s16hi5VySS8jK10VG_Sit_TG5SwxsAC_pRi_zRi0_zlyAJ_SitIsgyrzo_SiTf1nc_n((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      Swift::String result = _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_ps16IndexingIteratorVySS8UTF8ViewVG_SitTg5037_s10Foundation4DataV06InlineB0V22withbc17BytesyxxSwKXEKlFxt9KXEfU_s16hi5VySS8jK10VG_Sit_TG5SwxsAC_pRi_zRi0_zlyAJ_SitIsgyrzo_SiTf1nc_n((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *unint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t closure #1 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    Swift::String result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    Swift::String result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    Swift::String result = MEMORY[0x1C876EEE0]();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    Swift::String result = MEMORY[0x1C876EF00]();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    Swift::String result = _StringGuts.copyUTF8(into:)();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  Swift::String result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  Swift::String result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  Swift::String result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  Swift::String result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x1E4F25170]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = specialized closure #3 in Data.init<A>(_:)(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return specialized closure #3 in Data.init<A>(_:)(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in closure #3 in Data.init<A>(_:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t MonogramView.text.getter()
{
  char v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit12MonogramView_text);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for MonogramView.text : MonogramView@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC15ConversationKit12MonogramView_text);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

id key path setter for MonogramView.text : MonogramView(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return MonogramView.text.setter(v1, v2);
}

id MonogramView.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v2[OBJC_IVAR____TtC15ConversationKit12MonogramView_text];
  swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *((void *)v5 + 1) = a2;
  swift_bridgeObjectRelease();
  return objc_msgSend(v2, sel_setNeedsDisplay);
}

id (*MonogramView.text.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MonogramView.text.modify;
}

id MonogramView.text.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    return objc_msgSend(v5, sel_setNeedsDisplay);
  }
  return result;
}

id MonogramView.__allocating_init(colorStyle:)(unsigned __int8 *a1)
{
  id v3 = objc_allocWithZone(v1);
  return MonogramView.init(colorStyle:)(a1);
}

id MonogramView.init(colorStyle:)(unsigned __int8 *a1)
{
  swift_getObjectType();
  int v3 = *a1;
  OUTLINED_FUNCTION_4_85(OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont);
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_font] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_text];
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_colorStyle] = v3;
  v16.receiver = v1;
  v16.super_class = v5;
  id v6 = objc_msgSendSuper2(&v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, sel_setContentMode_, 3);
  uint64_t v7 = self;
  id v8 = v6;
  id v9 = objc_msgSend(v7, sel_clearColor);
  objc_msgSend(v8, sel_setBackgroundColor_, v9);

  id v10 = v8;
  if (v3 == 1)
  {
    id v11 = v8;
    id v12 = objc_msgSend(v11, sel_layer);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v10 = CAFilter.__allocating_init(type:)(v13, v14);
    objc_msgSend(v12, sel_setCompositingFilter_, v10);
  }
  return v8;
}

id MonogramView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void MonogramView.init()()
{
  OUTLINED_FUNCTION_4_85(OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont);
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit12MonogramView_font) = 0;
  OUTLINED_FUNCTION_2_95(OBJC_IVAR____TtC15ConversationKit12MonogramView_text);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id MonogramView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void MonogramView.init(frame:)()
{
  OUTLINED_FUNCTION_4_85(OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont);
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit12MonogramView_font) = 0;
  OUTLINED_FUNCTION_2_95(OBJC_IVAR____TtC15ConversationKit12MonogramView_text);
  OUTLINED_FUNCTION_1_108();
  __break(1u);
}

id MonogramView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void MonogramView.init(coder:)()
{
  OUTLINED_FUNCTION_4_85(OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont);
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit12MonogramView_font) = 0;
  OUTLINED_FUNCTION_2_95(OBJC_IVAR____TtC15ConversationKit12MonogramView_text);
  OUTLINED_FUNCTION_1_108();
  __break(1u);
}

Swift::Void __swiftcall MonogramView.draw(_:)(__C::CGRect a1)
{
  OUTLINED_FUNCTION_7();
  uint64_t v2 = &v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_text];
  swift_beginAccess();
  unint64_t v3 = v2[1];
  uint64_t v4 = *v2 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v3) & 0xF;
  }
  if (v4)
  {
    if (v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_colorStyle])
    {
      id v5 = objc_msgSend(self, sel_whiteColor);
    }
    else
    {
      if (one-time initialization token for contactMonogram != -1) {
        swift_once();
      }
      id v5 = (id)static Colors.ParticipantViews.contactMonogram;
    }
    id v6 = v5;
    uint64_t v7 = &v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont];
    double v8 = *(double *)&v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont];
    double v9 = *(double *)&v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont + 8];
    char v10 = v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_lastSizeForFont + 16];
    objc_msgSend(v1, sel_bounds);
    if ((v10 & 1) != 0 || (v8 == v11 ? (BOOL v13 = v9 == v12) : (BOOL v13 = 0), !v13))
    {
      objc_msgSend(v1, sel_bounds);
      id v15 = MonogramView.createFont(for:)(v14);
      objc_super v16 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_font];
      *(void *)&v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_font] = v15;

      objc_msgSend(v1, sel_bounds);
      *(void *)uint64_t v7 = v17;
      *((void *)v7 + 1) = v18;
      v7[16] = 0;
    }
    unint64_t v19 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit12MonogramView_font];
    if (v19)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
      uint64_t v21 = (void *)*MEMORY[0x1E4FB06F8];
      *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
      uint64_t v22 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
      *(void *)(inited + 40) = v19;
      uint64_t v23 = (void *)*MEMORY[0x1E4FB0700];
      *(void *)(inited + 64) = v22;
      *(void *)(inited + 72) = v23;
      *(void *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(void *)(inited + 80) = v6;
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      id v24 = v19;
      id v25 = v21;
      id v26 = v23;
      id v27 = v6;
      uint64_t v28 = Dictionary.init(dictionaryLiteral:)();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v29 = StringProtocol.localizedUppercase.getter();
      char v30 = (void *)MEMORY[0x1C87730B0](v29);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v30, sel_sizeWithAttributes_, isa);
      double v33 = v32;
      double v35 = v34;

      v38.origin.double x = OUTLINED_FUNCTION_6_2();
      double v36 = CGRectGetMidX(v38) - v33 * 0.5;
      v39.origin.double x = OUTLINED_FUNCTION_6_2();
      CGFloat MidY = CGRectGetMidY(v39);
      outlined bridged method (mnbnn) of @objc NSString.draw(in:withAttributes:)(v36, MidY - v35 * 0.5, v33, v35, v28, v30);
    }
    else
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:type:_:)();
    }
  }
}

id MonogramView.createFont(for:)(double a1)
{
  double v1 = a1 * 0.515555556;
  uint64_t v2 = self;
  id result = outlined bridged method (mnnbgnn) of @objc static UIFont.systemFont(ofSize:weight:design:)(v1, *MEMORY[0x1E4FB09D0], 0xD00000000000001BLL, 0x80000001C37A7620, v2);
  if (!result) {
    __break(1u);
  }
  return result;
}

id MonogramView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id outlined bridged method (mnnbgnn) of @objc static UIFont.systemFont(ofSize:weight:design:)(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  double v8 = (void *)MEMORY[0x1C87730B0]();
  id v9 = objc_msgSend(a5, sel_systemFontOfSize_weight_design_, v8, a1, a2);

  return v9;
}

void outlined bridged method (mnbnn) of @objc NSString.draw(in:withAttributes:)(double a1, double a2, double a3, double a4, uint64_t a5, void *a6)
{
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a6, sel_drawInRect_withAttributes_, isa, a1, a2, a3, a4);
}

uint64_t type metadata accessor for MonogramView()
{
  return self;
}

uint64_t method lookup function for MonogramView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MonogramView);
}

uint64_t dispatch thunk of MonogramView.__allocating_init(colorStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

double ParticipantScreenShareInfoView.customCornerRadius.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

void ParticipantScreenShareInfoView.customCornerRadius.setter(double a1)
{
  unint64_t v3 = (double *)(v1 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_customCornerRadius);
  swift_beginAccess();
  *unint64_t v3 = a1;
  ParticipantScreenShareInfoView.customCornerRadius.didset();
}

void key path getter for ParticipantScreenShareInfoView.customCornerRadius : ParticipantScreenShareInfoView(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
}

uint64_t key path setter for ParticipantScreenShareInfoView.customCornerRadius : ParticipantScreenShareInfoView(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

void ParticipantScreenShareInfoView.customCornerRadius.didset()
{
  id v1 = objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_backgroundBlurView), sel_layer);
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
  objc_msgSend(v1, sel_setCornerRadius_);
}

uint64_t (*ParticipantScreenShareInfoView.customCornerRadius.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ParticipantScreenShareInfoView.customCornerRadius.modify;
}

uint64_t ParticipantScreenShareInfoView.customCornerRadius.modify(uint64_t a1, char a2)
{
  return ParticipantScreenShareInfoView.customCornerRadius.modify(a1, a2, (uint64_t (*)(uint64_t))ParticipantScreenShareInfoView.customCornerRadius.didset);
}

double ParticipantScreenShareInfoView.preferredHeight.getter()
{
  char v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
  double result = 40.0;
  if (v1) {
    return 54.0;
  }
  return result;
}

void *ParticipantScreenShareInfoView.avatarImage.getter()
{
  OUTLINED_FUNCTION_5_4();
  char v1 = *v0;
  id v2 = v1;
  return v1;
}

void ParticipantScreenShareInfoView.avatarImage.setter(void *a1)
{
  unint64_t v3 = (void **)(v1 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImage);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *unint64_t v3 = a1;
  id v5 = a1;

  ParticipantScreenShareInfoView.avatarImage.didset();
}

uint64_t key path getter for ParticipantScreenShareInfoView.avatarImage : ParticipantScreenShareInfoView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ParticipantScreenShareInfoView.avatarImage : ParticipantScreenShareInfoView(id *a1, void **a2)
{
  id v2 = *a1;
  unint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0);
  id v4 = *a1;
  return v3(v2);
}

id ParticipantScreenShareInfoView.avatarImage.didset()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImage);
  swift_beginAccess();
  id v2 = *(void **)(v0 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImageView);
  objc_msgSend(v2, sel_setHidden_, *v1 == 0);
  objc_msgSend(v2, sel_setImage_, *v1);
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_stackView);
  objc_msgSend(v3, sel_directionalLayoutMargins);
  return objc_msgSend(v3, sel_setDirectionalLayoutMargins_);
}

uint64_t (*ParticipantScreenShareInfoView.avatarImage.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ParticipantScreenShareInfoView.avatarImage.modify;
}

uint64_t ParticipantScreenShareInfoView.avatarImage.modify(uint64_t a1, char a2)
{
  return ParticipantScreenShareInfoView.customCornerRadius.modify(a1, a2, (uint64_t (*)(uint64_t))ParticipantScreenShareInfoView.avatarImage.didset);
}

uint64_t ParticipantScreenShareInfoView.customCornerRadius.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t key path getter for ParticipantScreenShareInfoView.isFullScreenMode : ParticipantScreenShareInfoView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ParticipantScreenShareInfoView.isFullScreenMode : ParticipantScreenShareInfoView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x108))(*a1);
}

uint64_t ParticipantScreenShareInfoView.isFullScreenMode.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t ParticipantScreenShareInfoView.isFullScreenMode.setter(char a1)
{
  unint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_isFullScreenMode);
  uint64_t result = swift_beginAccess();
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*ParticipantScreenShareInfoView.isFullScreenMode.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id ParticipantScreenShareInfoView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *ParticipantScreenShareInfoView.init()()
{
  uint64_t v1 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_nameLabel;
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  unint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_stackView;
  *(void *)&v3[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  uint64_t v5 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImageView;
  *(void *)&v3[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  uint64_t v6 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_backgroundBlurView;
  *(void *)&v3[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_init);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_normalConstraints] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_fullScreenConstraints] = v7;
  *(void *)&v3[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_customCornerRadius] = 0;
  *(void *)&v3[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImage] = 0;
  v3[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_isFullScreenMode] = 0;

  v76.receiver = v3;
  v76.super_class = (Class)type metadata accessor for ParticipantScreenShareInfoView();
  double v8 = (char *)objc_msgSendSuper2(&v76, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v9 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_backgroundBlurView;
  char v10 = *(void **)&v8[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_backgroundBlurView];
  double v11 = v8;
  id v12 = v10;
  UIVisualEffectView.applyEffect(_:)(ConversationKit_PlatformEffectViewStyle_thinDark);

  BOOL v13 = *(void **)&v8[v9];
  double v14 = self;
  id v15 = v13;
  id v16 = objc_msgSend(v14, sel_clearColor);
  objc_msgSend(v15, sel_setBackgroundColor_, v16);

  uint64_t v17 = *(void **)&v8[v9];
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v18 = v17;
  id v19 = objc_msgSend(v18, sel_layer);
  objc_msgSend(v19, sel_setMasksToBounds_, 1);

  uint64_t v20 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_stackView;
  uint64_t v21 = *(void **)&v11[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_stackView];
  objc_msgSend(v21, sel_setDirectionalLayoutMargins_, 0.0, 10.0, 0.0, 10.0);
  objc_msgSend(v21, sel_setLayoutMarginsRelativeArrangement_, 1);
  objc_msgSend(v21, (SEL)&selRef_inCallKeypadEnabled + 7, 0);
  objc_msgSend(v21, sel_setAxis_, 0);
  objc_msgSend(v21, sel_setAlignment_, 3);
  objc_msgSend(v21, sel_setDistribution_, 0);
  objc_msgSend(v21, sel_setSpacing_, 5.0);
  uint64_t v22 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImageView;
  id v23 = *(id *)&v11[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImageView];
  id v24 = objc_msgSend(v14, sel_whiteColor);
  objc_msgSend(v23, sel_setTintColor_, v24);

  id v25 = *(void **)&v11[v22];
  objc_msgSend(v25, sel_setHidden_, 1);
  objc_msgSend(*(id *)&v11[v20], sel_addArrangedSubview_, v25);
  uint64_t v26 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_nameLabel;
  id v27 = *(void **)&v11[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_nameLabel];
  objc_msgSend(v27, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v28 = v27;
  id v29 = objc_msgSend(v14, sel_whiteColor);
  objc_msgSend(v28, sel_setTextColor_, v29);

  uint64_t v30 = one-time initialization token for screenShareInfo;
  id v31 = *(id *)&v11[v26];
  if (v30 != -1) {
    swift_once();
  }
  objc_msgSend(v31, sel_setFont_, static Fonts.ParticipantViews.screenShareInfo);

  double v32 = *(void **)&v11[v26];
  objc_msgSend(v32, sel_setAdjustsFontForContentSizeCategory_, 1);
  LODWORD(v33) = 1144750080;
  objc_msgSend(v32, sel_setContentCompressionResistancePriority_forAxis_, 0, v33);
  double v34 = *(void **)&v11[v20];
  objc_msgSend(v34, sel_addArrangedSubview_, v32);
  double v35 = *(void **)&v8[v9];
  objc_msgSend(v11, sel_addSubview_, v35);
  objc_msgSend(v11, sel_addSubview_, v34);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1C3769600;
  id v37 = objc_msgSend(v34, sel_leadingAnchor);
  id v38 = objc_msgSend(v35, (SEL)&selRef_shouldShowCallDetailsWhenReady + 2);
  id v39 = OUTLINED_FUNCTION_3_99();

  *(void *)(v36 + 32) = v39;
  id v40 = objc_msgSend(*(id *)&v11[v20], sel_centerYAnchor);
  id v41 = objc_msgSend(*(id *)&v8[v9], sel_centerYAnchor);
  id v42 = OUTLINED_FUNCTION_3_99();

  *(void *)(v36 + 40) = v42;
  id v43 = objc_msgSend(*(id *)&v11[v20], sel_trailingAnchor);
  id v44 = objc_msgSend(*(id *)&v8[v9], (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v45 = OUTLINED_FUNCTION_3_99();

  *(void *)(v36 + 48) = v45;
  id v46 = objc_msgSend(*(id *)&v11[v22], sel_heightAnchor);
  id v47 = objc_msgSend(v46, sel_constraintEqualToConstant_, 28.0);

  *(void *)(v36 + 56) = v47;
  uint64_t v48 = *(void **)&v11[v22];
  id v49 = objc_msgSend(v48, sel_widthAnchor);
  id v50 = objc_msgSend(v48, sel_heightAnchor);
  id v51 = objc_msgSend(v49, sel_constraintEqualToAnchor_, v50);

  *(void *)(v36 + 64) = v51;
  specialized Array._endMutation()();
  *(void *)&v11[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_normalConstraints] = v36;
  swift_bridgeObjectRelease();
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1C3769F40;
  id v53 = objc_msgSend(*(id *)&v11[v20], sel_centerXAnchor);
  id v54 = objc_msgSend(*(id *)&v8[v9], sel_centerXAnchor);
  id v55 = objc_msgSend(v53, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v54);

  *(void *)(v52 + 32) = v55;
  id v56 = objc_msgSend(*(id *)&v11[v20], sel_topAnchor);
  id v57 = objc_msgSend(*(id *)&v8[v9], sel_safeAreaLayoutGuide);
  id v58 = objc_msgSend(v57, (SEL)&selRef_insertAttributedString_atIndex_ + 3);

  id v59 = objc_msgSend(v56, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v58);
  *(void *)(v52 + 40) = v59;
  id v60 = objc_msgSend(*(id *)&v11[v20], sel_trailingAnchor);
  id v61 = objc_msgSend(*(id *)&v8[v9], sel_trailingAnchor);
  id v62 = objc_msgSend(v60, sel_constraintEqualToAnchor_constant_, v61, -30.0);

  *(void *)(v52 + 48) = v62;
  specialized Array._endMutation()();
  *(void *)&v11[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_fullScreenConstraints] = v52;
  swift_bridgeObjectRelease();
  id v63 = self;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_1C3769580;
  id v65 = objc_msgSend(*(id *)&v8[v9], sel_topAnchor);
  id v66 = OUTLINED_FUNCTION_2_96((uint64_t)objc_msgSend(v11, sel_topAnchor));

  *(void *)(v64 + 32) = v66;
  id v67 = objc_msgSend(*(id *)&v8[v9], sel_bottomAnchor);
  id v68 = OUTLINED_FUNCTION_2_96((uint64_t)objc_msgSend(v11, sel_bottomAnchor));

  *(void *)(v64 + 40) = v68;
  id v69 = objc_msgSend(*(id *)&v8[v9], sel_leadingAnchor);
  id v70 = OUTLINED_FUNCTION_2_96((uint64_t)objc_msgSend(v11, sel_leadingAnchor));

  *(void *)(v64 + 48) = v70;
  id v71 = objc_msgSend(*(id *)&v8[v9], sel_trailingAnchor);
  id v72 = objc_msgSend(v11, sel_trailingAnchor);
  id v73 = objc_msgSend(v71, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v72);

  *(void *)(v64 + 56) = v73;
  specialized Array._endMutation()();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v63, sel_activateConstraints_, isa);

  return v11;
}

uint64_t type metadata accessor for ParticipantScreenShareInfoView()
{
  return self;
}

id ParticipantScreenShareInfoView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantScreenShareInfoView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_nameLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v2 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_stackView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  uint64_t v3 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImageView;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  uint64_t v4 = OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_backgroundBlurView;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_init);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_normalConstraints] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_fullScreenConstraints] = v5;
  *(void *)&v0[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_customCornerRadius] = 0;
  *(void *)&v0[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_avatarImage] = 0;
  v0[OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_isFullScreenMode] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ParticipantScreenShareInfoView.configure(with:isFullScreenMode:)(Swift::String with, Swift::Bool isFullScreenMode)
{
  uint64_t v4 = v2;
  object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *double v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBE8], v8);
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  (*(void (**)(Swift::Bool))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x108))(isFullScreenMode);
  uint64_t v12 = *(void *)((char *)v4 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_nameLabel);
  if (isFullScreenMode)
  {
    double v3 = 0.0;
    if (one-time initialization token for screenShareInfoFullScreen == -1)
    {
LABEL_4:
      BOOL v13 = &static Fonts.ParticipantViews.screenShareInfoFullScreen;
      uint64_t v14 = 1;
      goto LABEL_8;
    }
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  double v3 = 1.0;
  if (one-time initialization token for screenShareInfo != -1) {
    swift_once();
  }
  BOOL v13 = &static Fonts.ParticipantViews.screenShareInfo;
  uint64_t v14 = 4;
LABEL_8:
  objc_msgSend((id)v12, sel_setFont_, *v13);
  objc_msgSend((id)v12, sel_setTextAlignment_, v14);
  outlined bridged method (mbgnn) of @objc UILabel.text.setter(countAndFlagsBits, (uint64_t)object, (void *)v12);
  objc_msgSend(*(id *)((char *)v4 + OBJC_IVAR___CNKParticipantScreenShareInfoViewInternal_backgroundBlurView), sel_setAlpha_, v3);
  id v15 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_deactivateConstraints_, isa);

  swift_bridgeObjectRetain();
  Class v17 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_activateConstraints_, v17);
}

id ParticipantScreenShareInfoView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantScreenShareInfoView.init(frame:)()
{
}

id ParticipantScreenShareInfoView.__deallocating_deinit()
{
  return ParticipantScreenShareInfoView.layoutSubviews()((SEL *)&selRef_dealloc);
}

id ParticipantScreenShareInfoView.layoutSubviews()(SEL *a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ParticipantScreenShareInfoView();
  return objc_msgSendSuper2(&v4, *a1);
}

uint64_t method lookup function for ParticipantScreenShareInfoView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantScreenShareInfoView);
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.customCornerRadius.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.customCornerRadius.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.customCornerRadius.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.preferredHeight.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.avatarImage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.avatarImage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.avatarImage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.isFullScreenMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.isFullScreenMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.isFullScreenMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ParticipantScreenShareInfoView.configure(with:isFullScreenMode:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t key path getter for DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate : DefaultParticipantCaptionsProviderCreator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with copy of DefaultParticipantCaptionsProviderCreator(a1, (uint64_t)v6);
  uint64_t v3 = MEMORY[0x1C8776240](v6);
  uint64_t v4 = v6[1];
  uint64_t result = outlined destroy of DefaultParticipantCaptionsProviderCreator((uint64_t)v6);
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate : DefaultParticipantCaptionsProviderCreator(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return swift_unknownObjectWeakAssign();
}

uint64_t DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate.getter()
{
  return MEMORY[0x1C8776240](v0);
}

uint64_t DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate.modify(uint64_t *a1))(uint64_t a1)
{
  a1[2] = v1;
  uint64_t v3 = MEMORY[0x1C8776240](v1);
  uint64_t v4 = *(void *)(v1 + 8);
  *a1 = v3;
  a1[1] = v4;
  return DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate.modify;
}

uint64_t DefaultParticipantCaptionsProviderCreator.participantCaptionsProviderDelegate.modify(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 16) + 8) = *(void *)(a1 + 8);
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void *DefaultParticipantCaptionsProviderCreator.createParticipantCaptionsProvider(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of DefaultParticipantCaptionsProviderCreator(v2, (uint64_t)v17);
  uint64_t v8 = MEMORY[0x1C8776240](v17);
  outlined destroy of DefaultParticipantCaptionsProviderCreator((uint64_t)v17);
  swift_unknownObjectRelease();
  if (v8)
  {
    if (one-time initialization token for conversationController == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationController);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  id v10 = objc_allocWithZone((Class)type metadata accessor for CaptionsClientParticipantCaptionsProvider());
  double v11 = CaptionsClientParticipantCaptionsProvider.init(logger:token:usage:)((uint64_t)v7, a1, 1);
  if (v11)
  {
    uint64_t v12 = MEMORY[0x1C8776240](v2);
    uint64_t v13 = *(void *)(v2 + 8);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x80);
    id v15 = v11;
    v14(v12, v13);
  }
  return v11;
}

uint64_t DefaultParticipantCaptionsProviderCreator.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  return swift_unknownObjectWeakInit();
}

uint64_t DefaultParticipantCaptionsProviderCreator.init(participantCaptionsProviderDelegate:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = a1;
  swift_unknownObjectWeakInit();
  return swift_unknownObjectRelease();
}

uint64_t dispatch thunk of ParticipantCaptionsProviderCreator.createParticipantCaptionsProvider(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t initializeWithCopy for DefaultParticipantCaptionsProviderCreator(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for DefaultParticipantCaptionsProviderCreator(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for DefaultParticipantCaptionsProviderCreator(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for DefaultParticipantCaptionsProviderCreator(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for DefaultParticipantCaptionsProviderCreator(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0)
    {
      int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
    }
    else
    {
      int v2 = -1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultParticipantCaptionsProviderCreator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultParticipantCaptionsProviderCreator()
{
  return &type metadata for DefaultParticipantCaptionsProviderCreator;
}

uint64_t InCallControlsViewController.groupName.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InCallControlsViewController.groupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_groupName);
  OUTLINED_FUNCTION_11_0();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*InCallControlsViewController.groupName.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id InCallControlsViewController.contentView.getter()
{
  id v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    uint64_t v2 = v1;
    self;
    uint64_t v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      id v4 = objc_msgSend(v3, sel_contentView);

      if (v4) {
        return v4;
      }
    }
    else
    {
    }
  }
  id result = objc_msgSend(v0, sel_view);
  id v4 = result;
  if (result) {
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t InCallControlsViewController.participants.getter()
{
  id v1 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
  swift_beginAccess();
  if (!*v1) {
    return MEMORY[0x1E4FBC860];
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t InCallControlsViewController.mode.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for InCallControlsViewController.mode : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void InCallControlsViewController.mode.setter(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode);
  OUTLINED_FUNCTION_11_0();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = a1;
  InCallControlsViewController.mode.didset(v4);
}

void InCallControlsViewController.mode.didset(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  int v4 = a1;
  uint64_t v5 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode);
  swift_beginAccess();
  unsigned int v6 = *v5;
  switch(a1 >> 5)
  {
    case 1:
      if ((v6 & 0xE0) != 0x20) {
        goto LABEL_21;
      }
      goto LABEL_10;
    case 2:
      if ((v6 & 0xE0) != 0x40) {
        goto LABEL_21;
      }
LABEL_10:
      if ((((v4 & 1) == 0) ^ v6)) {
        return;
      }
      goto LABEL_21;
    case 3:
      if (v4 == 96)
      {
        if (v6 != 96) {
          goto LABEL_21;
        }
        return;
      }
      if (v6 == 97) {
        return;
      }
      goto LABEL_21;
    case 4:
      if (v4 == 128)
      {
        if (v6 == 128) {
          return;
        }
      }
      else if (v6 == 129)
      {
        return;
      }
LABEL_21:
      uint64_t v7 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
      swift_beginAccess();
      if (*v7)
      {
        id v8 = *v7;
        InCallControlsCollectionViewController.mode.setter(v6);
      }
      InCallControlsViewController.updateJoinLeaveButton()();
      return;
    case 5:
      if (v4 == 160 || v6 != 161) {
        goto LABEL_21;
      }
      return;
    default:
      if (v6 < 0x20) {
        return;
      }
      goto LABEL_21;
  }
}

void InCallControlsViewController.updateJoinLeaveButton()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C37696D0;
  uint64_t v2 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode);
  swift_beginAccess();
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v1 + 64) = v7;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v5;
  id v8 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_shouldShowLeaveButton);
  swift_beginAccess();
  uint64_t v9 = String.init<A>(reflecting:)();
  *(void *)(v1 + 96) = v6;
  *(void *)(v1 + 104) = v7;
  *(void *)(v1 + 72) = v9;
  *(void *)(v1 + 80) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (*v8 == 1)
  {
LABEL_4:
    uint64_t v11 = v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent;
    swift_beginAccess();
    if (!*(void *)v11) {
      return;
    }
    id v12 = *(id *)(v11 + 16);
    unsigned __int8 v13 = 2;
  }
  else
  {
    unsigned int v14 = *v2;
    switch(v14 >> 5)
    {
      case 1u:
        if ((v14 & 1) == 0) {
          goto LABEL_4;
        }
        goto LABEL_14;
      case 2u:
        if (v14) {
          goto LABEL_4;
        }
        uint64_t v15 = v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent;
        swift_beginAccess();
        if (!*(void *)v15) {
          return;
        }
        id v12 = *(id *)(v15 + 16);
        unsigned __int8 v13 = 0;
        break;
      case 3u:
        if (v14 != 96) {
          return;
        }
LABEL_14:
        uint64_t v16 = v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent;
        swift_beginAccess();
        if (!*(void *)v16) {
          return;
        }
        id v12 = *(id *)(v16 + 16);
        unsigned __int8 v13 = 1;
        break;
      case 4u:
      case 5u:
        return;
      default:
        goto LABEL_4;
    }
  }
  InCallControlsView.joinLeaveConfiguration.setter(v13);
}

void (*InCallControlsViewController.mode.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode);
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return InCallControlsViewController.mode.modify;
}

void InCallControlsViewController.mode.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  InCallControlsViewController.mode.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t InCallControlsViewController.gridLayoutStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_gridLayoutStyle);
  uint64_t result = OUTLINED_FUNCTION_2();
  *a1 = *v3;
  return result;
}

uint64_t key path getter for InCallControlsViewController.gridLayoutStyle : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_gridLayoutStyle);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void key path setter for InCallControlsViewController.gridLayoutStyle : InCallControlsViewController(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  InCallControlsViewController.gridLayoutStyle.setter(&v1);
}

void InCallControlsViewController.gridLayoutStyle.setter(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_gridLayoutStyle);
  OUTLINED_FUNCTION_11_0();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v5 = v4;
  InCallControlsViewController.gridLayoutStyle.didset(&v5);
}

void InCallControlsViewController.gridLayoutStyle.didset(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_gridLayoutStyle);
  swift_beginAccess();
  int v4 = *v3;
  if (v2 != v4)
  {
    unsigned __int8 v5 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*v5)
    {
      unsigned __int8 v8 = v4;
      id v7 = v6;
      InCallControlsCollectionViewController.gridLayoutStyle.setter(&v8);
    }
  }
}

void (*InCallControlsViewController.gridLayoutStyle.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  int v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_gridLayoutStyle);
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return InCallControlsViewController.gridLayoutStyle.modify;
}

void InCallControlsViewController.gridLayoutStyle.modify(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  if (a2)
  {
    char v4 = *(unsigned char *)(*(void *)a1 + 32);
    uint64_t v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = *(unsigned char *)(*(void *)a1 + 32);
    uint64_t v3 = (unsigned __int8 *)&v5;
  }
  InCallControlsViewController.gridLayoutStyle.setter(v3);
  free(v2);
}

double InCallControlsViewController.topInset.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

double key path getter for InCallControlsViewController.topInset : InCallControlsViewController@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (double *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_topInset);
  swift_beginAccess();
  double result = *v3;
  *a2 = *(void *)v3;
  return result;
}

id InCallControlsViewController.topInset.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_topInset);
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = a1;
  return InCallControlsViewController.topInset.didset();
}

id InCallControlsViewController.topInset.didset()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  id result = (id)OUTLINED_FUNCTION_2();
  if (*v1)
  {
    uint64_t v3 = (void *)v1[3];
    char v4 = (double *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_topInset);
    OUTLINED_FUNCTION_2();
    return objc_msgSend(v3, sel_setConstant_, *v4);
  }
  return result;
}

uint64_t (*InCallControlsViewController.topInset.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.topInset.modify;
}

uint64_t InCallControlsViewController.topInset.modify(uint64_t a1, char a2)
{
  return InCallControlsViewController.topInset.modify(a1, a2, (uint64_t (*)(uint64_t))InCallControlsViewController.topInset.didset);
}

uint64_t InCallControlsViewController.isExpanded.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t InCallControlsViewController.isExpanded.setter(char a1)
{
  return InCallControlsViewController.isExpanded.setter(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isExpanded, (uint64_t (*)(uint64_t))InCallControlsViewController.isExpanded.didset);
}

uint64_t key path getter for InCallControlsViewController.isExpanded : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isExpanded);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void InCallControlsViewController.isExpanded.didset()
{
  OUTLINED_FUNCTION_5_4();
  if (*v0 == 1)
  {
    InCallControlsViewController.initializeCollectionViewIfNecessary()();
    char v1 = *v0;
  }
  else
  {
    char v1 = 0;
  }
  InCallControlsViewController.updateControlsVisibility(forExpandedState:)(v1);
}

id InCallControlsViewController.initializeCollectionViewIfNecessary()()
{
  char v1 = v0;
  int v2 = (void **)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController];
  id result = (id)swift_beginAccess();
  if (!*v2)
  {
    char v4 = self;
    objc_msgSend(v4, sel_begin);
    objc_msgSend(v4, sel_setDisableActions_, 1);
    swift_beginAccess();
    swift_beginAccess();
    char v5 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController];
    swift_beginAccess();
    MEMORY[0x1C8776240](v5);
    id v6 = objc_allocWithZone((Class)type metadata accessor for InCallControlsCollectionViewController(0));
    InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)();
    id v7 = *v2;
    *int v2 = v8;

    InCallControlsViewController.setUpCollectionViewConstraints()();
    uint64_t v9 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate];
    swift_beginAccess();
    if (MEMORY[0x1C8776240](v9))
    {
      uint64_t v10 = *((void *)v9 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 24))(v0, ObjectType, v10);
      swift_unknownObjectRelease();
    }
    id result = objc_msgSend(v0, sel_view);
    if (result)
    {
      id v12 = result;
      objc_msgSend(result, sel_setNeedsLayout);

      id result = objc_msgSend(v1, sel_view);
      if (result)
      {
        unsigned __int8 v13 = result;
        objc_msgSend(result, sel_layoutIfNeeded);

        return objc_msgSend(v4, sel_commit);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void InCallControlsViewController.updateControlsVisibility(forExpandedState:)(char a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent;
  swift_beginAccess();
  char v4 = *(void **)v3;
  if (*(void *)v3)
  {
    char v5 = *(void **)(v3 + 8);
    id v6 = *(void **)(v3 + 16);
    id v7 = *(void **)(v3 + 24);
    unint64_t v8 = *(void *)(v3 + 32);
    uint64_t v9 = *(void **)(v3 + 40);
    uint64_t v10 = *(void **)(v3 + 48);
    uint64_t v11 = one-time initialization token for conversationKit;
    double v34 = v4;
    id v12 = v4;
    double v33 = v5;
    id v13 = v5;
    double v32 = v6;
    id v14 = v6;
    id v31 = v7;
    id v15 = v7;
    swift_bridgeObjectRetain();
    uint64_t v30 = v9;
    id v16 = v9;
    id v29 = v10;
    id v17 = v10;
    if (v11 != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1C3769620;
    if (a1) {
      double v19 = 1.0;
    }
    else {
      double v19 = 0.0;
    }
    uint64_t v20 = String.init<A>(reflecting:)();
    uint64_t v22 = v21;
    *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v20;
    *(void *)(v18 + 40) = v22;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      if (v23) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v23)
      {
LABEL_9:
        if (v23 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v24 = 0;
        id v25 = (void *)MEMORY[0x1E4FBC8C8];
        do
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v26 = (id)MEMORY[0x1C87744F0](v24, v8);
          }
          else {
            id v26 = *(id *)(v8 + 8 * v24 + 32);
          }
          id v27 = v26;
          type metadata accessor for InCallControlButton();
          id v28 = (void *)swift_dynamicCastClass();
          if (v28) {
            (*(void (**)(double))((*v25 & *v28) + 0x1A0))(v19);
          }
          else {
            objc_msgSend(v27, sel_setAlpha_, v19, v29, v30, v31, v32, v33, v34);
          }
          ++v24;
          objc_msgSend(v27, sel_setUserInteractionEnabled_, a1 & 1, v29);
        }
        while (v23 != v24);
      }
    }
    swift_bridgeObjectRelease();
    outlined consume of InCallControlsViewController.ViewContent?(v34, v33, v32, v31, v8, v30, v29);
  }
}

uint64_t (*InCallControlsViewController.isExpanded.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.isExpanded.modify;
}

uint64_t InCallControlsViewController.isExpanded.modify(uint64_t a1, char a2)
{
  return InCallControlsViewController.topInset.modify(a1, a2, (uint64_t (*)(uint64_t))InCallControlsViewController.isExpanded.didset);
}

uint64_t InCallControlsViewController.audioIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id InCallControlsViewController.audioIsEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled);
  OUTLINED_FUNCTION_11_0();
  *uint64_t v3 = a1;
  return InCallControlsViewController.updateMuteAudioButton()(&OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled, (uint64_t)"Updating mute audio button for audioIsEnabled=%@", 48, &OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton);
}

uint64_t key path getter for InCallControlsViewController.audioIsEnabled : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

id (*InCallControlsViewController.audioIsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.audioIsEnabled.modify;
}

id InCallControlsViewController.audioIsEnabled.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return InCallControlsViewController.updateMuteAudioButton()(&OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled, (uint64_t)"Updating mute audio button for audioIsEnabled=%@", 48, &OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton);
  }
  return result;
}

uint64_t InCallControlsViewController.videoIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t InCallControlsViewController.videoIsEnabled.setter(char a1)
{
  return InCallControlsViewController.isExpanded.setter(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled, (uint64_t (*)(uint64_t))InCallControlsViewController.videoIsEnabled.didset);
}

uint64_t InCallControlsViewController.isExpanded.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  id v6 = (unsigned char *)(v3 + *a2);
  uint64_t v7 = OUTLINED_FUNCTION_11_0();
  *id v6 = a1;
  return a3(v7);
}

uint64_t key path getter for InCallControlsViewController.videoIsEnabled : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void InCallControlsViewController.videoIsEnabled.didset()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled);
  swift_beginAccess();
  if ((*v1 & 1) == 0)
  {
    int v2 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled);
    swift_beginAccess();
    *int v2 = 0;
    InCallControlsViewController.updateEffectsButton()();
  }
  InCallControlsViewController.updateMuteAudioButton()(&OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled, (uint64_t)"Updating disable video button videoIsEnabled=%@", 47, &OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton);
  InCallControlsViewController.updateEffectsButton()();
  InCallControlsViewController.updateFlipCameraButton()();
}

uint64_t InCallControlsViewController.effectsAreEnabled.setter(char a1)
{
  return InCallControlsViewController.shouldShowLeaveButton.setter(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled, (uint64_t (*)(uint64_t))InCallControlsViewController.updateEffectsButton());
}

uint64_t InCallControlsViewController.shouldShowLeaveButton.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  id v6 = (unsigned char *)(v3 + *a2);
  uint64_t v7 = OUTLINED_FUNCTION_11_0();
  *id v6 = a1;
  return a3(v7);
}

id InCallControlsViewController.updateMuteAudioButton()(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
  unint64_t v8 = (unsigned char *)(v4 + *a1);
  OUTLINED_FUNCTION_2();
  LOBYTE(v14) = *v8;
  uint64_t v9 = String.init<A>(reflecting:)();
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v12 = (void *)(v4 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  id result = (id)OUTLINED_FUNCTION_2();
  if (*v12) {
    return objc_msgSend(*(id *)(v12[2] + *a4), sel_setSelected_, (*v8 & 1) == 0, v14);
  }
  return result;
}

void InCallControlsViewController.updateEffectsButton()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C376BA10;
  int v2 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled);
  OUTLINED_FUNCTION_2();
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v1 + 64) = v7;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v5;
  unint64_t v8 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled);
  OUTLINED_FUNCTION_2();
  uint64_t v9 = String.init<A>(reflecting:)();
  *(void *)(v1 + 96) = v6;
  *(void *)(v1 + 104) = v7;
  *(void *)(v1 + 72) = v9;
  *(void *)(v1 + 80) = v10;
  uint64_t v11 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreAvailable);
  OUTLINED_FUNCTION_2();
  LOBYTE(v23) = *v11;
  uint64_t v12 = String.init<A>(reflecting:)();
  *(void *)(v1 + 136) = v6;
  *(void *)(v1 + 144) = v7;
  *(void *)(v1 + 112) = v12;
  *(void *)(v1 + 120) = v13;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  OUTLINED_FUNCTION_2();
  if (*v14)
  {
    id v15 = *(void **)(v14[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_effectsButton);
    uint64_t v16 = one-time initialization token for shared;
    id v17 = v15;
    if (v16 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    char v20 = (*(uint64_t (**)(uint64_t))(v18 + 152))(v19) & *v11 & *v2;
    if ((v20 & 1) != 0 && *v8 == 1)
    {
      objc_msgSend(v17, sel_setSelected_, 1, v23);
      uint64_t v21 = 2;
    }
    else
    {
      objc_msgSend(v17, sel_setSelected_, 0, v23);
      uint64_t v21 = 1;
    }
    objc_msgSend(v17, sel_setEnabled_, v20 & 1);
    uint64_t v22 = specialized static UIImage.image(named:)(v21);
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x120))(v22);
  }
}

void InCallControlsViewController.updateFlipCameraButton()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769620;
  uint64_t v3 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled);
  swift_beginAccess();
  LOBYTE(v13) = *v3;
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v2 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v2 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  unint64_t v7 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  swift_beginAccess();
  if (*v7)
  {
    unint64_t v8 = *(void **)(v7[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_flipCameraButton);
    if (*v3 == 1)
    {
      uint64_t v9 = one-time initialization token for shared;
      id v10 = v8;
      if (v9 != -1) {
        id v10 = (id)swift_once();
      }
      BOOL v11 = ((*(uint64_t (**)(id))(*(void *)static Defaults.shared + 152))(v10) & 1) != 0
         || *(void *)(v1
                      + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier
                      + 8) != 0;
    }
    else
    {
      id v12 = v8;
      BOOL v11 = 0;
    }
    objc_msgSend(v8, sel_setEnabled_, v11, v13);
  }
}

uint64_t (*InCallControlsViewController.videoIsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.videoIsEnabled.modify;
}

uint64_t InCallControlsViewController.videoIsEnabled.modify(uint64_t a1, char a2)
{
  return InCallControlsViewController.topInset.modify(a1, a2, (uint64_t (*)(uint64_t))InCallControlsViewController.videoIsEnabled.didset);
}

uint64_t InCallControlsViewController.topInset.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t InCallControlsViewController.isScreenSharing.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t InCallControlsViewController.isScreenSharing.setter(char a1)
{
  return InCallControlsViewController.shouldShowLeaveButton.setter(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isScreenSharing, (uint64_t (*)(uint64_t))InCallControlsViewController.updateScreenShareButton());
}

uint64_t key path getter for InCallControlsViewController.isScreenSharing : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isScreenSharing);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

id InCallControlsViewController.updateScreenShareButton()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v1 + 16) = xmmword_1C3769620;
  uint64_t v2 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isScreenSharing);
  OUTLINED_FUNCTION_2();
  LOBYTE(v8) = *v2;
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v5;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  id result = (id)OUTLINED_FUNCTION_2();
  if (*v6) {
    return objc_msgSend(*(id *)(v6[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_screenShareButton), sel_setSelected_, *v2, v8);
  }
  return result;
}

uint64_t (*InCallControlsViewController.isScreenSharing.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.isScreenSharing.modify;
}

uint64_t InCallControlsViewController.isScreenSharing.modify(uint64_t a1, char a2)
{
  return InCallControlsViewController.shouldShowLeaveButton.modify(a1, a2, (uint64_t (*)(uint64_t))InCallControlsViewController.updateScreenShareButton());
}

uint64_t InCallControlsViewController.shouldShowLeaveButton.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t InCallControlsViewController.cinematicFramingIsAvailable.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void InCallControlsViewController.cinematicFramingIsAvailable.setter(char a1)
{
}

uint64_t key path getter for InCallControlsViewController.cinematicFramingIsAvailable : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_cinematicFramingIsAvailable);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void InCallControlsViewController.cinematicFramingIsAvailable.didset()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void v19[6];

  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v5 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19[4] = v4;
  v19[5] = v6;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed () -> ();
  v19[3] = v2;
  unint64_t v7 = _Block_copy(v19);
  swift_release();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  id v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v14 = v13 - v12;
  static DispatchQoS.unspecified.getter();
  id v15 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  id v17 = v16;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_5_1();
  v19[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C8773BA0](0, v14, v0, v7);
  _Block_release(v7);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0, v15);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
  OUTLINED_FUNCTION_28();
}

id InCallControlsViewController.updateCinematicFramingButton()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C37696D0;
  uint64_t v2 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_cinematicFramingIsEnabled);
  swift_beginAccess();
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v1 + 64) = v7;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v5;
  uint64_t v8 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_cinematicFramingIsAvailable);
  swift_beginAccess();
  uint64_t v9 = String.init<A>(reflecting:)();
  *(void *)(v1 + 96) = v6;
  *(void *)(v1 + 104) = v7;
  *(void *)(v1 + 72) = v9;
  *(void *)(v1 + 80) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  BOOL v11 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  id result = (id)swift_beginAccess();
  if (*v11)
  {
    id result = objc_msgSend(*(id *)(v11[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCinematicFramingButton), sel_setEnabled_, *v8);
    if (*v11) {
      return objc_msgSend(*(id *)(v11[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCinematicFramingButton), sel_setSelected_, *v2);
    }
  }
  return result;
}

void (*InCallControlsViewController.cinematicFramingIsAvailable.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.cinematicFramingIsAvailable.modify;
}

void InCallControlsViewController.cinematicFramingIsAvailable.modify(uint64_t a1, char a2)
{
}

{
  swift_endAccess();
  if ((a2 & 1) == 0) {
    InCallControlsViewController.cinematicFramingIsAvailable.didset();
  }
}

uint64_t InCallControlsViewController.cinematicFramingIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void InCallControlsViewController.cinematicFramingIsEnabled.setter(char a1)
{
}

void InCallControlsViewController.cinematicFramingIsAvailable.setter(char a1, void *a2)
{
  uint64_t v4 = (unsigned char *)(v2 + *a2);
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = a1;
  InCallControlsViewController.cinematicFramingIsAvailable.didset();
}

uint64_t key path getter for InCallControlsViewController.cinematicFramingIsEnabled : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_cinematicFramingIsEnabled);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void InCallControlsViewController.cinematicFramingIsEnabled.didset()
{
}

void closure #1 in InCallControlsViewController.cinematicFramingIsAvailable.didset(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  OUTLINED_FUNCTION_2();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    InCallControlsViewController.updateCinematicFramingButton()();
  }
}

void (*InCallControlsViewController.cinematicFramingIsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.cinematicFramingIsEnabled.modify;
}

void InCallControlsViewController.cinematicFramingIsEnabled.modify(uint64_t a1, char a2)
{
}

uint64_t InCallControlsViewController.effectsAreAvailable.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t InCallControlsViewController.effectsAreAvailable.setter(char a1)
{
  return InCallControlsViewController.shouldShowLeaveButton.setter(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreAvailable, (uint64_t (*)(uint64_t))InCallControlsViewController.updateEffectsButton());
}

uint64_t key path getter for InCallControlsViewController.effectsAreAvailable : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreAvailable);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t (*InCallControlsViewController.effectsAreAvailable.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.effectsAreAvailable.modify;
}

uint64_t InCallControlsViewController.effectsAreAvailable.modify(uint64_t a1, char a2)
{
  return InCallControlsViewController.shouldShowLeaveButton.modify(a1, a2, (uint64_t (*)(uint64_t))InCallControlsViewController.updateEffectsButton());
}

uint64_t InCallControlsViewController.effectsAreEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for InCallControlsViewController.effectsAreEnabled : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t (*InCallControlsViewController.effectsAreEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.effectsAreAvailable.modify;
}

uint64_t InCallControlsViewController.shouldShowLeaveButton.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t InCallControlsViewController.shouldShowLeaveButton.setter(char a1)
{
  return InCallControlsViewController.shouldShowLeaveButton.setter(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_shouldShowLeaveButton, (uint64_t (*)(uint64_t))InCallControlsViewController.updateJoinLeaveButton());
}

uint64_t key path getter for InCallControlsViewController.shouldShowLeaveButton : InCallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_shouldShowLeaveButton);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t (*InCallControlsViewController.shouldShowLeaveButton.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return InCallControlsViewController.shouldShowLeaveButton.modify;
}

uint64_t InCallControlsViewController.shouldShowLeaveButton.modify(uint64_t a1, char a2)
{
  return InCallControlsViewController.shouldShowLeaveButton.modify(a1, a2, (uint64_t (*)(uint64_t))InCallControlsViewController.updateJoinLeaveButton());
}

void *InCallControlsViewController.audioButton.getter()
{
  OUTLINED_FUNCTION_5_4();
  if (!*v0) {
    return 0;
  }
  uint64_t v1 = *(void **)(v0[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton);
  id v2 = v1;
  return v1;
}

uint64_t InCallControlsViewController.delegate.getter()
{
  return ConversationControlsManager.systemBannerPresenter.getter();
}

uint64_t InCallControlsViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  return InCallControlsViewController.delegate.setter(a1, a2, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate);
}

uint64_t (*InCallControlsViewController.delegate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_47_1();
  uint64_t v2 = OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate;
  *(void *)(v2 + 40) = v0;
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = v0 + v3;
  OUTLINED_FUNCTION_6_1();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  OUTLINED_FUNCTION_237(v5);
  return InCallControlsViewController.delegate.modify;
}

uint64_t InCallControlsViewController.participantDelegate.getter()
{
  return ConversationControlsManager.systemBannerPresenter.getter();
}

uint64_t InCallControlsViewController.participantDelegate.setter(uint64_t a1, uint64_t a2)
{
  return InCallControlsViewController.delegate.setter(a1, a2, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate);
}

uint64_t (*InCallControlsViewController.participantDelegate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_47_1();
  uint64_t v2 = OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate;
  *(void *)(v2 + 40) = v0;
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = v0 + v3;
  OUTLINED_FUNCTION_6_1();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  OUTLINED_FUNCTION_237(v5);
  return InCallControlsViewController.delegate.modify;
}

uint64_t InCallControlsViewController.participantsViewControllerDelegate.getter()
{
  return ConversationControlsManager.systemBannerPresenter.getter();
}

uint64_t InCallControlsViewController.participantsViewControllerDelegate.setter(uint64_t a1, uint64_t a2)
{
  return InCallControlsViewController.delegate.setter(a1, a2, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate);
}

uint64_t InCallControlsViewController.delegate.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3 + *a3;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*InCallControlsViewController.participantsViewControllerDelegate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_47_1();
  uint64_t v2 = OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate;
  *(void *)(v2 + 40) = v0;
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = v0 + v3;
  OUTLINED_FUNCTION_6_1();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  OUTLINED_FUNCTION_237(v5);
  return InCallControlsViewController.delegate.modify;
}

uint64_t key path setter for InCallControlsViewController.delegate : InCallControlsViewController(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *a2 + *a5;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 8) = v5;
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallControlsViewController.menuHostViewController.getter()
{
  return ConversationControlsManager.systemBannerPresenter.getter();
}

void InCallControlsViewController.menuHostViewController.setter(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
}

void (*InCallControlsViewController.menuHostViewController.modify())(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_47_1();
  uint64_t v2 = OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController;
  *(void *)(v2 + 40) = v0;
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = v0 + v3;
  OUTLINED_FUNCTION_6_1();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  OUTLINED_FUNCTION_237(v5);
  return InCallControlsViewController.menuHostViewController.modify;
}

void InCallControlsViewController.menuHostViewController.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_19_37(a1);
  if (v3)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v1);
}

uint64_t InCallControlsViewController.description.getter()
{
  uint64_t ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: Any?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C376BA10;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001C37A1C80;
  uint64_t v3 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_localParticipant];
  OUTLINED_FUNCTION_2();
  *(void *)(inited + 72) = type metadata accessor for Participant(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
  _s15ConversationKit11ParticipantVWOcTm_7(v3, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for Participant);
  *(void *)(inited + 80) = 1701080941;
  *(void *)(inited + 88) = 0xE400000000000000;
  uint64_t v5 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode];
  OUTLINED_FUNCTION_2();
  *(unsigned char *)(inited + 96) = *v5;
  *(void *)(inited + 120) = &type metadata for InCallControlsMode;
  *(void *)(inited + 128) = 0xD000000000000018;
  *(void *)(inited + 136) = 0x80000001C37A7780;
  uint64_t v6 = (void **)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController];
  OUTLINED_FUNCTION_2();
  unint64_t v7 = *v6;
  if (v7)
  {
    uint64_t v8 = type metadata accessor for InCallControlsCollectionViewController(0);
  }
  else
  {
    uint64_t v8 = 0;
    *(void *)(inited + 152) = 0;
    *(void *)(inited + 160) = 0;
  }
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 168) = v8;
  v12[3] = ObjectType;
  v12[0] = v0;
  id v9 = v7;
  uint64_t v10 = v0;
  return String.init(namedPropertyValues:for:)(inited, v12);
}

id InCallControlsViewController.__allocating_init(localParticipant:remoteParticipants:mode:gridLayoutStyle:representedLegacyCallIdentifier:isLocalMemberAuthorizedToChangeGroupMembership:isLinkSharingSupported:menuHostViewController:)(uint64_t a1, uint64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6, int a7, int a8, void *a9, uint64_t a10)
{
  id v17 = objc_allocWithZone(v10);
  return InCallControlsViewController.init(localParticipant:remoteParticipants:mode:gridLayoutStyle:representedLegacyCallIdentifier:isLocalMemberAuthorizedToChangeGroupMembership:isLinkSharingSupported:menuHostViewController:)(a1, a2, a3, a4, a5, a6, 0, 0, a9, a10);
}

id InCallControlsViewController.init(localParticipant:remoteParticipants:mode:gridLayoutStyle:representedLegacyCallIdentifier:isLocalMemberAuthorizedToChangeGroupMembership:isLinkSharingSupported:menuHostViewController:)(uint64_t a1, uint64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  BOOL v11 = v10;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_bridgeObjectRelease();
  id v15 = &v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_groupName];
  *id v15 = 0;
  v15[1] = 0;
  uint64_t v16 = &v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier];
  void *v16 = 0;
  v16[1] = 0;
  *(void *)&v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_tableViewSeparator] = 0;
  *(void *)&v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController] = 0;
  id v17 = &v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
  *(_OWORD *)id v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((void *)v17 + 6) = 0;
  *(void *)&v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_topInset] = 0x4043800000000000;
  char v18 = *a4;
  v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isExpanded] = 0;
  v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled] = 1;
  v11[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isScreenSharing] = 0;
  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreAvailable;
  uint64_t v20 = one-time initialization token for shared;
  uint64_t v21 = v11;
  if (v20 != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  v11[v19] = (*(uint64_t (**)(void))(v22 + 184))() & 1;
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled] = 0;
  OUTLINED_FUNCTION_30_24(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate);
  OUTLINED_FUNCTION_30_24(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate);
  OUTLINED_FUNCTION_30_24(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate);
  uint64_t v23 = &v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController];
  *(void *)&v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  _s15ConversationKit11ParticipantVWOcTm_7(a1, (uint64_t)&v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_localParticipant], (void (*)(void))type metadata accessor for Participant);
  *(void *)&v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_controlsButtonRowCount] = 0;
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_gridLayoutStyle] = v18;
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode] = a3;
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_shouldShowLeaveButton] = 0;
  void *v16 = a5;
  v16[1] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_50();
  if (((*(uint64_t (**)(void))(v24 + 152))() & 1) != 0 || a6)
  {
    swift_bridgeObjectRelease();
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
  }
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled] = v25;
  OUTLINED_FUNCTION_11_0();
  *((void *)v23 + 1) = a10;
  swift_unknownObjectWeakAssign();
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_cinematicFramingIsEnabled] = 0;
  v21[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_cinematicFramingIsAvailable] = 0;

  v34.receiver = v21;
  v34.super_class = ObjectType;
  id v26 = objc_msgSendSuper2(&v34, sel_initWithNibName_bundle_, 0, 0);
  id v27 = self;
  id v28 = v26;
  id v29 = objc_msgSend(v27, sel_defaultCenter);
  objc_msgSend(v29, sel_addObserver_selector_name_object_, v28, sel_handleLegacyCallStatusDidChangeNotification_, *MEMORY[0x1E4FADDD8], 0);

  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  _s15ConversationKit11ParticipantVWOhTm_5(a1, (void (*)(void))type metadata accessor for Participant);
  return v28;
}

id InCallControlsViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsViewController.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_groupName];
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier];
  *uint64_t v2 = 0;
  v2[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_tableViewSeparator] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController] = 0;
  id v3 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
  *(_OWORD *)id v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((void *)v3 + 6) = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_topInset] = 0x4043800000000000;
  v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isExpanded] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled] = 1;
  v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isScreenSharing] = 0;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreAvailable;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  v0[v4] = (*(uint64_t (**)(void))(v5 + 184))() & 1;
  v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled] = 0;
  OUTLINED_FUNCTION_22_33(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate);
  OUTLINED_FUNCTION_22_33(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate);
  OUTLINED_FUNCTION_22_33(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate);
  OUTLINED_FUNCTION_22_33(OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall InCallControlsViewController.embedEffectsBrowserViewController(_:)(UIViewController *a1)
{
  objc_msgSend(v1, sel_loadViewIfNeeded);
  id v3 = &v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
  OUTLINED_FUNCTION_2();
  uint64_t v4 = *(void **)v3;
  if (*(void *)v3)
  {
    uint64_t v5 = (void *)*((void *)v3 + 5);
    uint64_t v19 = v5;
    uint64_t v20 = (void *)*((void *)v3 + 6);
    unint64_t v7 = (void *)*((void *)v3 + 3);
    uint64_t v6 = *((void *)v3 + 4);
    uint64_t v10 = v3 + 8;
    id v9 = (void *)*((void *)v3 + 1);
    uint64_t v8 = (void *)*((void *)v10 + 1);
    id v11 = v20;
    id v12 = v4;
    id v13 = v9;
    id v14 = v8;
    id v15 = v7;
    swift_bridgeObjectRetain();
    id v16 = v5;
    objc_msgSend(v1, sel_addChildViewController_, a1);
    id v17 = InCallControlsViewController.contentView.getter();
    char v18 = [(UIViewController *)a1 view];
    objc_msgSend(v17, sel_insertSubview_below_, v18, v14);

    [(UIViewController *)a1 didMoveToParentViewController:v1];
    outlined consume of InCallControlsViewController.ViewContent?(v4, v9, v8, v7, v6, v19, v20);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
  }
}

void InCallControlsViewController.setUpCollectionViewConstraints()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void **)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController];
  swift_beginAccess();
  id v3 = *v2;
  if (!v3) {
    return;
  }
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_tableViewSeparator];
  if (!v4) {
    return;
  }
  uint64_t v5 = &v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
  swift_beginAccess();
  uint64_t v6 = *(void **)v5;
  if (!*(void *)v5) {
    return;
  }
  unint64_t v7 = v3;
  id v8 = v4;
  id v9 = v6;
  id v10 = objc_msgSend(v1, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v10) = specialized Sequence<>.contains(_:)((uint64_t)v7, v11);
  swift_bridgeObjectRelease();
  if (v10)
  {
    id v12 = objc_msgSend(v1, sel_view);
    if (!v12)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    id v13 = v12;
    id v14 = objc_msgSend(v12, sel_subviews);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v16 = objc_msgSend(v7, sel_view);
    if (!v16)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    id v17 = v16;
    char v18 = specialized Sequence<>.contains(_:)((uint64_t)v16, v15);
    swift_bridgeObjectRelease();

    if ((v18 & 1) == 0)
    {
      id v19 = objc_msgSend(v7, sel_view);
      if (!v19)
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v20 = v19;
      objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

      id v21 = InCallControlsViewController.contentView.getter();
      id v22 = objc_msgSend(v7, sel_view);
      if (!v22)
      {
LABEL_38:
        __break(1u);
        return;
      }
      uint64_t v23 = v22;
      objc_msgSend(v21, sel_addSubview_, v22);
    }
  }
  else
  {
    objc_msgSend(v1, sel_addChildViewController_, v7);
    id v24 = objc_msgSend(v7, sel_view);
    if (!v24)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    char v25 = v24;
    objc_msgSend(v24, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    id v26 = InCallControlsViewController.contentView.getter();
    id v27 = objc_msgSend(v7, sel_view);
    if (!v27)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    id v28 = v27;
    objc_msgSend(v26, sel_addSubview_, v27);

    objc_msgSend(v7, sel_didMoveToParentViewController_, v1);
    id v29 = &v7[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate];
    swift_beginAccess();
    *((void *)v29 + 1) = &protocol witness table for InCallControlsViewController;
    swift_unknownObjectWeakAssign();
  }
  id v30 = objc_msgSend(v7, sel_view);
  if (!v30)
  {
    __break(1u);
    goto LABEL_30;
  }
  id v31 = v30;
  id v32 = objc_msgSend(v30, sel_bottomAnchor);

  id v33 = objc_msgSend(v9, sel_bottomAnchor);
  id v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_constant_, v33, -0.0);

  LODWORD(v35) = 1132068864;
  id v68 = v34;
  objc_msgSend(v34, sel_setPriority_, v35);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1C3769580;
  id v37 = objc_msgSend(v7, sel_view);
  if (!v37)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  id v38 = v37;
  id v39 = objc_msgSend(v37, sel_topAnchor);

  id v67 = v8;
  id v40 = objc_msgSend(v8, sel_bottomAnchor);
  id v41 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v40);

  *(void *)(v36 + 32) = v41;
  id v42 = objc_msgSend(v7, sel_view);
  if (!v42)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  id v43 = v42;
  id v44 = v7;
  id v45 = objc_msgSend(v42, sel_leadingAnchor);

  id v46 = objc_msgSend(v9, sel_leadingAnchor);
  id v47 = objc_msgSend(v45, sel_constraintEqualToAnchor_constant_, v46, 0.0);

  *(void *)(v36 + 40) = v47;
  id v48 = objc_msgSend(v7, sel_view);
  if (!v48)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  id v49 = v48;
  id v50 = self;
  id v51 = objc_msgSend(v49, sel_trailingAnchor);

  id v66 = v9;
  id v52 = objc_msgSend(v9, sel_trailingAnchor);
  id v53 = objc_msgSend(v51, sel_constraintEqualToAnchor_constant_, v52, -0.0);

  *(void *)(v36 + 48) = v53;
  *(void *)(v36 + 56) = v68;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  id v54 = v68;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v50, sel_activateConstraints_, isa);

  id v56 = objc_msgSend(v44, sel_view);
  if (v56)
  {
    id v57 = v56;
    if (*(void *)&v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_controlsButtonRowCount] == 1)
    {
      swift_beginAccess();
      if (*(void *)v5)
      {
        id v58 = v57;
        MEMORY[0x1C87733A0]();
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*((void *)v5 + 4) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x10));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      swift_endAccess();
      id v59 = &v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isExpanded];
      swift_beginAccess();
      InCallControlsViewController.updateControlsVisibility(forExpandedState:)(*v59);
    }
  }
  uint64_t v60 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier
                     + 8];
  if (v60)
  {
    uint64_t v61 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier];
    id v62 = self;
    swift_bridgeObjectRetain();
    id v63 = objc_msgSend(v62, sel_sharedInstance);
    uint64_t v64 = (void *)MEMORY[0x1C87730B0](v61, v60);
    swift_bridgeObjectRelease();
    id v65 = objc_msgSend(v63, sel_callWithUniqueProxyIdentifier_, v64);

    if (v65)
    {
      InCallControlsViewController.updateToRepresentLegacyCall(_:)();
    }
  }
}

void InCallControlsViewController.updateToRepresentLegacyCall(_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant.CountdownInfo?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17;
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v82 = (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v75 - v22;
  if (objc_msgSend(v2, sel_isConversation))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v24 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v24 + 16) = xmmword_1C3769620;
    id v87 = v2;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    id v25 = v2;
    uint64_t v26 = String.init<A>(reflecting:)();
    uint64_t v28 = v27;
    *(void *)(v24 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v24 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v24 + 32) = v26;
    *(void *)(v24 + 40) = v28;
LABEL_23:
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v77 = v18;
  uint64_t v78 = v7;
  os_log_type_t v80 = v23;
  uint64_t v81 = v0;
  id v29 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier);
  uint64_t v31 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier);
  uint64_t v30 = *(void *)(v0
                  + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier
                  + 8);
  uint64_t v79 = v29;
  swift_bridgeObjectRetain();
  id v83 = v2;
  id v32 = objc_msgSend(v2, sel_uniqueProxyIdentifier);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  if (v30)
  {
    if (v31 == v33 && v30 == v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v81;
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v81;
      if ((v37 & 1) == 0) {
        goto LABEL_16;
      }
    }
    uint64_t v39 = InCallControlsViewController.participants.getter();
    specialized Collection.first.getter(v39, v15);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v15, 1, v16) != 1)
    {
      uint64_t v52 = (uint64_t)v80;
      outlined init with take of Participant(v15, (uint64_t)v80);
      id v51 = v83;
      goto LABEL_25;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v15, &demangling cache variable for type metadata for Participant?);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_16:
  id v40 = objc_msgSend(v83, sel_handle);
  if (!v40)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v53 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v53 + 16) = xmmword_1C3769620;
    id v54 = v83;
    id v87 = v83;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    id v55 = v54;
    uint64_t v56 = String.init<A>(reflecting:)();
    uint64_t v58 = v57;
    *(void *)(v53 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v53 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v53 + 32) = v56;
    *(void *)(v53 + 40) = v58;
    goto LABEL_23;
  }
  id v41 = v40;
  Date.init()();
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = type metadata accessor for UUID();
  objc_super v76 = &v75;
  uint64_t v43 = OUTLINED_FUNCTION_8(v42);
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_64();
  UUID.init()();
  id v87 = v41;
  long long v88 = xmmword_1C376E330;
  uint64_t v89 = 0;
  v90[0] = 0;
  id v44 = v41;
  uint64_t v75 = static Colors.ParticipantGradients.gradient(for:)(v44);
  uint64_t v45 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v46 = v78;
  __swift_storeEnumTagSinglePayload(v78, 1, 1, v45);
  uint64_t v47 = type metadata accessor for ParticipantContactDetailsCache();
  unint64_t v48 = lazy protocol witness table accessor for type TUCall and conformance TUCall();
  uint64_t v49 = v48;
  uint64_t v50 = (uint64_t)v10;
  if (one-time initialization token for queue != -1) {
    unint64_t v48 = swift_once();
  }
  MEMORY[0x1F4188790](v48);
  id v51 = v83;
  *(&v75 - 4) = v47;
  *(&v75 - 3) = (uint64_t)v51;
  uint64_t v74 = v49;
  OS_dispatch_queue.sync<A>(execute:)();
  LOBYTE(v74) = 1;
  uint64_t v52 = (uint64_t)v80;
  Participant.init(state:identifier:capabilities:remoteIdentifiers:gradient:nickname:countdownInfo:isAuthorizedToChangeGroupMembership:cache:)(v50, v16, 0x100010100, (uint64_t)&v87, v75, 0, 0, v46, v74, v93, v75, (uint64_t)v76, v77, v78, (uint64_t)v79, (uint64_t)v80, v81, v82, (uint64_t)v83,
    v84,
    v85,
    v86);

  uint64_t v38 = v81;
LABEL_25:
  id v59 = objc_msgSend(v51, sel_status);
  uint64_t v60 = v82;
  if (v59 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
    lazy protocol witness table accessor for type Participant.VideoProviderType and conformance Participant.VideoProviderType();
    uint64_t v93 = Dictionary.init(dictionaryLiteral:)();
    long long v94 = xmmword_1C37737D0;
    uint64_t v95 = 1;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v98 = 0;
    __int16 v99 = 1;
    id v87 = 0;
    long long v88 = 0uLL;
    uint64_t v89 = 1;
    bzero(v90, 0xB1uLL);
    Participant.copresenceInfo.getter();
    Participant.asJoined(avInfo:videoInfo:screenInfo:captionInfo:copresenceInfo:)();
    outlined release of Participant.CopresenceInfo?(v92);
    swift_bridgeObjectRelease();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v87, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    InCallControlsViewController.mode.setter(0);
    unsigned __int8 v61 = objc_msgSend(v51, sel_isSendingVideo);
    id v62 = (unsigned __int8 *)(v38 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled);
    OUTLINED_FUNCTION_11_0();
    *id v62 = v61;
    InCallControlsViewController.videoIsEnabled.didset();
  }
  else
  {
    Participant.asWaiting()(v59);
    InCallControlsViewController.mode.setter(0x20u);
  }
  id v63 = (unsigned char *)(v38 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_shouldShowLeaveButton);
  OUTLINED_FUNCTION_11_0();
  *id v63 = 1;
  InCallControlsViewController.updateJoinLeaveButton()();
  id v64 = objc_msgSend(v51, sel_uniqueProxyIdentifier);
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  id v68 = v79;
  *uint64_t v79 = v65;
  v68[1] = v67;
  swift_bridgeObjectRelease();
  id v69 = (void **)(v38 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
  swift_beginAccess();
  id v70 = *v69;
  if (v70)
  {
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
    unint64_t v71 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    uint64_t v72 = swift_allocObject();
    *(_OWORD *)(v72 + 16) = xmmword_1C3769620;
    _s15ConversationKit11ParticipantVWOcTm_7(v60, v72 + v71, (void (*)(void))type metadata accessor for Participant);
    __int16 v91 = 513;
    id v73 = v70;
    InCallControlsCollectionViewController.update(with:updateReason:)();

    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOhTm_5(v60, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOhTm_5(v52, (void (*)(void))type metadata accessor for Participant);
  }
  else
  {
    _s15ConversationKit11ParticipantVWOhTm_5(v60, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOhTm_5(v52, (void (*)(void))type metadata accessor for Participant);
    swift_endAccess();
  }
LABEL_31:
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall InCallControlsViewController.loadView()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v2 + 320))())
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
    uint64_t v4 = one-time initialization token for background;
    id v5 = v3;
    id v6 = v5;
    if (v4 != -1)
    {
      swift_once();
      id v5 = v6;
    }
    objc_msgSend(v5, sel_setBackgroundColor_, static Colors.InCallControls.background);
  }
  else
  {
    if (one-time initialization token for backgroundBlurEffect != -1) {
      swift_once();
    }
    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, static Colors.InCallControls.backgroundBlurEffect);
  }
  objc_msgSend(v1, sel_setView_, v6);
}

Swift::Void __swiftcall InCallControlsViewController.viewDidLoad()()
{
  v145.receiver = v0;
  v145.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v145, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v2 = v1;
  objc_msgSend(v1, sel__setCornerRadius_, 10.0);

  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
LABEL_69:
    __break(1u);
    return;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_setClipsToBounds_, 1);

  unint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v144 = MEMORY[0x1E4FBC860];
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  id v7 = InCallControlsViewController.contentView.getter();
  objc_msgSend(v7, sel_addLayoutGuide_, v6);

  id v8 = objc_msgSend(v6, sel_leadingAnchor);
  id v9 = InCallControlsViewController.contentView.getter();
  id v10 = objc_msgSend(v9, sel_leadingAnchor);

  id v11 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v10);
  id v12 = objc_msgSend(v6, sel_trailingAnchor);
  id v13 = InCallControlsViewController.contentView.getter();
  id v14 = objc_msgSend(v13, sel_trailingAnchor);

  id v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
  id v141 = v6;
  id v16 = objc_msgSend(v6, sel_topAnchor);
  uint64_t v139 = v0;
  id v17 = InCallControlsViewController.contentView.getter();
  id v18 = objc_msgSend(v17, sel_topAnchor);

  id v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v18);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v20, 3))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_34_17(v20 + 3);
    specialized Array._endMutation()();
    unint64_t v5 = (unint64_t)v11;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_33_22();
    if (!v21) {
      goto LABEL_7;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_7:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v22 = v15;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v23 = v19;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v24 = (void *)specialized static UIImage.image(named:)(0);
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  objc_msgSend(v25, sel_setImage_, v24);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  unint64_t v136 = v25;
  if ((*(uint64_t (**)(void))(v26 + 320))())
  {
    if (one-time initialization token for flatHotdog != -1) {
      swift_once();
    }
    objc_msgSend(v25, sel_setTintColor_, static Colors.InCallControls.flatHotdog);
    id v27 = v25;
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
    id v28 = static UIVibrancyEffect.inCallControlsEffect.getter();
    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v28);

    id v29 = v25;
    objc_msgSend(v27, sel_bounds);
    objc_msgSend(v29, sel_setFrame_, 0.0, 0.0);

    objc_msgSend(v29, sel_setAutoresizingMask_, 18);
    id v30 = objc_msgSend(self, sel_whiteColor);
    objc_msgSend(v29, sel_setTintColor_, v30);

    id v31 = objc_msgSend(v27, sel_contentView);
    objc_msgSend(v31, sel_addSubview_, v29);
  }
  objc_msgSend(v27, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v32 = InCallControlsViewController.contentView.getter();
  objc_msgSend(v32, sel_addSubview_, v27);

  id v33 = objc_msgSend(v27, sel_widthAnchor);
  objc_msgSend(v24, sel_size);
  id v34 = objc_msgSend(v33, sel_constraintEqualToConstant_);

  id v35 = objc_msgSend(v27, sel_heightAnchor);
  objc_msgSend(v24, sel_size);
  id v37 = objc_msgSend(v35, sel_constraintEqualToConstant_, v36);

  id v38 = objc_msgSend(v27, sel_centerXAnchor);
  id v39 = objc_msgSend(v141, sel_centerXAnchor);
  id v40 = OUTLINED_FUNCTION_13_43((uint64_t)v39, sel_constraintEqualToAnchor_);

  uint64_t v135 = v27;
  id v41 = objc_msgSend(v27, sel_topAnchor);
  id v42 = objc_msgSend(v141, sel_topAnchor);
  id v43 = OUTLINED_FUNCTION_13_43((uint64_t)v42, sel_constraintEqualToAnchor_constant_);

  if (v144 >> 62)
  {
    OUTLINED_FUNCTION_66();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v44 = *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v44, 4))
  {
    __break(1u);
  }
  else
  {
    os_log_type_t v134 = v24;
    OUTLINED_FUNCTION_34_17(v44 + 4);
    specialized Array._endMutation()();
    id v27 = v34;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_18_43();
    if (!v21) {
      goto LABEL_22;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_22:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v45 = v37;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_18_43();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v46 = v40;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v47 = v43;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  OUTLINED_FUNCTION_50();
  char v49 = (*(uint64_t (**)(void))(v48 + 192))();
  OUTLINED_FUNCTION_50();
  char v51 = (*(uint64_t (**)(void))(v50 + 184))();
  OUTLINED_FUNCTION_50();
  char v53 = (*(uint64_t (**)(void))(v52 + 152))();
  ConversationKit::InCallControlsView::ConfigurationCapabilities v54 = InCallControlsView.ConfigurationCapabilities.init(supportsCinematicFraming:supportsEffects:supportsVideo:isLegacyCall:)(v49 & 1, v51 & 1, v53 & 1, *(void *)&v139[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_representedLegacyCallIdentifier+ 8] != 0);
  id v55 = objc_allocWithZone((Class)type metadata accessor for InCallControlsView());
  uint64_t v56 = InCallControlsView.init(frame:capabilities:)(v54);
  uint64_t v57 = (char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  OUTLINED_FUNCTION_11_0();
  *((void *)v57 + 1) = &protocol witness table for InCallControlsViewController;
  swift_unknownObjectWeakAssign();
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_effectsButton), v58, v59, (uint64_t)sel_didTapEffectsButton_);
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton), v60, v61, (uint64_t)sel_didTapMuteButton_);
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_flipCameraButton), v62, v63, (uint64_t)sel_didTapFlipCameraButton_);
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton), v64, v65, (uint64_t)sel_didTapJoinLeaveButton_);
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton), v66, v67, (uint64_t)sel_didTapToggleCameraButton_);
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_screenShareButton), v68, v69, (uint64_t)sel_didTapScreenShareButton_);
  OUTLINED_FUNCTION_11_44(*(void **)((char *)v56 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCinematicFramingButton), v70, v71, (uint64_t)sel_didTapToggleCinematicFramingButton_);
  [(SEL *)v56 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v72 = InCallControlsViewController.contentView.getter();
  objc_msgSend(v72, sel_addSubview_, v56);

  id v73 = [(SEL *)v56 topAnchor];
  id v74 = objc_msgSend(v141, sel_topAnchor);
  uint64_t v75 = OUTLINED_FUNCTION_2();
  id v76 = OUTLINED_FUNCTION_13_43(v75, sel_constraintEqualToAnchor_constant_);

  id v77 = v76;
  id v78 = [(SEL *)v56 leadingAnchor];
  id v79 = objc_msgSend(v141, sel_leadingAnchor);
  id v80 = OUTLINED_FUNCTION_13_43((uint64_t)v79, sel_constraintEqualToAnchor_);

  uint64_t v140 = v56;
  id v81 = [(SEL *)v56 trailingAnchor];
  id v82 = objc_msgSend(v141, sel_trailingAnchor);
  id v83 = OUTLINED_FUNCTION_13_43((uint64_t)v82, sel_constraintEqualToAnchor_);

  if (v144 >> 62)
  {
    OUTLINED_FUNCTION_66();
    id v84 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v84 = *(id *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v84, 3))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_34_17((uint64_t)v84 + 3);
    specialized Array._endMutation()();
    id v84 = v77;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_33_22();
    if (!v21) {
      goto LABEL_32;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_32:
  uint64_t v137 = v84;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v85 = v80;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v86 = v83;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (one-time initialization token for separatorStyle != -1) {
    swift_once();
  }
  id v87 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, static InCallControlsCollectionViewController.separatorStyle);
  objc_msgSend(v87, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v88 = objc_msgSend(v87, sel_contentView);
  id v89 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v88, sel_setBackgroundColor_, v89);

  id v90 = InCallControlsViewController.contentView.getter();
  objc_msgSend(v90, sel_addSubview_, v87);

  __int16 v91 = *(void **)&v139[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_tableViewSeparator];
  *(void *)&v139[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_tableViewSeparator] = v87;
  id v92 = v87;

  id v93 = objc_msgSend(v92, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v94 = [(SEL *)v56 bottomAnchor];
  id v95 = OUTLINED_FUNCTION_13_43((uint64_t)v94, sel_constraintEqualToAnchor_);

  LODWORD(v96) = 1144750080;
  objc_msgSend(v95, sel_setPriority_, v96);
  id v97 = objc_msgSend(v92, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v98 = objc_msgSend(v141, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v99 = OUTLINED_FUNCTION_13_43((uint64_t)v98, sel_constraintGreaterThanOrEqualToAnchor_constant_);

  LODWORD(v100) = 1148846080;
  objc_msgSend(v99, sel_setPriority_, v100);
  id v101 = objc_msgSend(v92, sel_leadingAnchor);
  id v102 = objc_msgSend(v141, sel_leadingAnchor);
  id v103 = OUTLINED_FUNCTION_13_43((uint64_t)v102, sel_constraintEqualToAnchor_constant_);

  id v104 = objc_msgSend(v92, sel_trailingAnchor);
  id v105 = objc_msgSend(v141, sel_trailingAnchor);
  id v106 = OUTLINED_FUNCTION_13_43((uint64_t)v105, sel_constraintEqualToAnchor_constant_);

  id v107 = objc_msgSend(v92, sel_heightAnchor);
  id v108 = objc_msgSend(v107, sel_constraintEqualToConstant_, 0.5);

  if (v144 >> 62)
  {
    OUTLINED_FUNCTION_66();
    uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v109 = *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v109, 5))
  {
    __break(1u);
    goto LABEL_66;
  }
  OUTLINED_FUNCTION_34_17(v109 + 5);
  specialized Array._endMutation()();
  id v95 = v95;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
LABEL_66:
  }
    OUTLINED_FUNCTION_0_77();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v110 = v99;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v111 = v103;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v112 = v106;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v113 = v108;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_78();
  if (v21) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v114 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v114, sel_activateConstraints_, isa);

  uint64_t v116 = *(uint64_t *)((char *)v140 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow);
  *(void *)&v139[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_controlsButtonRowCount] = *(void *)(v116 + 16);
  v133 = v92;
  if (*(void *)(v116 + 16) < 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = xmmword_1C3769830;
    *(void *)(v118 + 32) = v92;
    uint64_t v143 = v118;
    specialized Array._endMutation()();
    uint64_t v131 = v143;
    id v119 = v92;
  }
  else
  {
    unint64_t v117 = *(void *)(v116 + 40);
    if (v117 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      swift_bridgeObjectRetain();
      uint64_t v128 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v131 = v128;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      uint64_t v131 = v117;
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v120 = &v139[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
  OUTLINED_FUNCTION_11_0();
  unint64_t v121 = *(void **)v120;
  uint64_t v122 = (void *)*((void *)v120 + 1);
  uint64_t v124 = (void *)*((void *)v120 + 2);
  uint64_t v123 = (void *)*((void *)v120 + 3);
  uint64_t v125 = (void *)*((void *)v120 + 6);
  uint64_t v129 = (void *)*((void *)v120 + 5);
  uint64_t v130 = *((void *)v120 + 4);
  *(void *)uint64_t v120 = v141;
  *((void *)v120 + 1) = v135;
  *((void *)v120 + 2) = v140;
  *((void *)v120 + 3) = v137;
  *((void *)v120 + 5) = 0;
  *((void *)v120 + 6) = 0;
  *((void *)v120 + 4) = v131;
  id v138 = v137;
  id v132 = v141;
  id v142 = v135;
  uint64_t v126 = v140;
  outlined consume of InCallControlsViewController.ViewContent?(v121, v122, v124, v123, v130, v129, v125);
  InCallControlsViewController.updateJoinLeaveButton()();
  InCallControlsViewController.updateMuteAudioButton()(&OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled, (uint64_t)"Updating mute audio button for audioIsEnabled=%@", 48, &OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton);
  InCallControlsViewController.updateMuteAudioButton()(&OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled, (uint64_t)"Updating disable video button videoIsEnabled=%@", 47, &OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton);
  InCallControlsViewController.updateScreenShareButton()();
  InCallControlsViewController.updateFlipCameraButton()();
  InCallControlsViewController.updateEffectsButton()();
  InCallControlsViewController.updateCinematicFramingButton()();
  uint64_t v127 = &v139[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_isExpanded];
  OUTLINED_FUNCTION_2();
  InCallControlsViewController.updateControlsVisibility(forExpandedState:)(*v127);
}

Swift::Void __swiftcall InCallControlsViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v5, sel_viewDidAppear_, a1);
  id v3 = objc_msgSend(v1, sel_view);
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_setNeedsUpdateConstraints);

    InCallControlsViewController.setUpCollectionViewConstraints()();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall InCallControlsViewController.willMove(toParent:)(UIViewController_optional *toParent)
{
  v6.receiver = v1;
  v6.super_class = (Class)swift_getObjectType();
  [(UIViewController_optional *)&v6 willMoveToParentViewController:toParent];
  if (toParent)
  {
    id v3 = self;
    uint64_t v4 = toParent;
    id v5 = objc_msgSend(v3, sel_traitCollectionWithUserInterfaceStyle_, 2);
    [(UIViewController_optional *)v4 setOverrideTraitCollection:v5 forChildViewController:v1];
  }
}

Swift::Void __swiftcall InCallControlsViewController.didMove(toParent:)(UIViewController_optional *toParent)
{
  v72.receiver = v1;
  v72.super_class = (Class)swift_getObjectType();
  [(UIViewController_optional *)&v72 didMoveToParentViewController:toParent];
  if (!toParent) {
    return;
  }
  id v3 = [(UIViewController_optional *)toParent viewIfLoaded];
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  id v5 = &v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
  OUTLINED_FUNCTION_2();
  objc_super v6 = *(void **)v5;
  if (!*(void *)v5)
  {

    return;
  }
  unint64_t v7 = MEMORY[0x1E4FBC860];
  id v8 = objc_allocWithZone(MEMORY[0x1E4FB1940]);
  id v71 = v6;
  id v9 = objc_msgSend(v8, sel_init);
  objc_msgSend(v4, sel_addLayoutGuide_, v9);
  id v10 = objc_msgSend(v9, sel_leadingAnchor);
  id v11 = objc_msgSend(v4, sel_leadingAnchor);
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  id v13 = objc_msgSend(v9, sel_trailingAnchor);
  id v14 = objc_msgSend(v4, sel_trailingAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v16, 2))
  {
    __break(1u);
    goto LABEL_37;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v16 + 2, 1);
  specialized Array._endMutation()();
  id v12 = v12;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_18_43();
  if (v17) {
LABEL_37:
  }
    OUTLINED_FUNCTION_33();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v18 = v15;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_18_43();
  if (v17) {
    OUTLINED_FUNCTION_33();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v19 = self;
  id v20 = objc_msgSend(v19, sel_currentDevice);
  id v21 = objc_msgSend(v20, sel_userInterfaceIdiom);

  if (v21 == (id)1
    || (id v22 = objc_msgSend(v19, sel_currentDevice),
        id v23 = objc_msgSend(v22, sel_userInterfaceIdiom),
        v22,
        v23 == (id)5))
  {
    id v24 = objc_msgSend(v9, sel_heightAnchor);
    id v25 = objc_msgSend(v4, sel_widthAnchor);
    double v26 = static Layout.MediaPip.padding.getter();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v27 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v28 + 488))();
    id v70 = objc_msgSend(v24, sel_constraintEqualToAnchor_constant_, v25, v26 * -2.0);

    id v29 = objc_msgSend(v9, sel_topAnchor);
    id v30 = objc_msgSend(v4, sel_safeAreaLayoutGuide);
    id v31 = objc_msgSend(v30, sel_topAnchor);

    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v32 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v33 + 488))();
    id v34 = objc_msgSend(v29, sel_constraintEqualToAnchor_constant_, v31, 16.0);

    id v35 = objc_msgSend(v9, sel_bottomAnchor);
    id v36 = objc_msgSend(v4, sel_safeAreaLayoutGuide);
    id v37 = objc_msgSend(v36, sel_bottomAnchor);

    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v38 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v39 + 488))();
    id v40 = objc_msgSend(v35, sel_constraintEqualToAnchor_constant_, v37, -16.0);

    id v41 = v40;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_21_33();
    if (v17) {
      OUTLINED_FUNCTION_33();
    }
    OUTLINED_FUNCTION_28_26();
    id v42 = v71;
    id v43 = &selRef_ringButton;
  }
  else
  {
    id v44 = objc_msgSend(v9, sel_topAnchor);
    id v45 = objc_msgSend(v4, sel_safeAreaLayoutGuide);
    id v46 = objc_msgSend(v45, sel_topAnchor);

    static Layout.MediaPip.padding.getter();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v47 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v48 + 488))();
    id v70 = objc_msgSend(v44, sel_constraintEqualToAnchor_constant_, v46, 20.0);

    id v49 = objc_msgSend(v9, sel_topAnchor);
    id v50 = objc_msgSend(v4, sel_safeAreaLayoutGuide);
    id v51 = objc_msgSend(v50, sel_topAnchor);

    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v52 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v53 + 488))();
    id v34 = objc_msgSend(v49, sel_constraintEqualToAnchor_constant_, v51, 20.0);

    id v54 = objc_msgSend(v9, sel_bottomAnchor);
    id v55 = objc_msgSend(v4, sel_bottomAnchor);
    id v43 = &selRef_ringButton;
    id v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_, v55);

    id v41 = v56;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_21_33();
    if (v17) {
      OUTLINED_FUNCTION_33();
    }
    OUTLINED_FUNCTION_28_26();
    id v42 = v71;
  }
  specialized Array._endMutation()();

  objc_msgSend(v4, sel_bounds);
  if (v58 >= v57) {
    uint64_t v59 = v70;
  }
  else {
    uint64_t v59 = v34;
  }
  id v60 = v59;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_21_33();
  if (v17) {
    OUTLINED_FUNCTION_33();
  }
  OUTLINED_FUNCTION_28_26();
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_6_1();
  if (*(void *)v5)
  {
    uint64_t v61 = (void *)*((void *)v5 + 5);
    *((void *)v5 + 5) = v34;
    id v62 = v34;

    if (*(void *)v5)
    {
      uint64_t v63 = (void *)*((void *)v5 + 6);
      *((void *)v5 + 6) = v70;
      id v64 = v70;
    }
  }
  swift_endAccess();
  id v65 = objc_msgSend(v42, sel_heightAnchor);
  id v66 = objc_msgSend(v9, sel_heightAnchor);
  id v67 = objc_msgSend(v65, v43[181], v66);

  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_18_43();
  if (v17) {
    OUTLINED_FUNCTION_33();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v68 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v68, sel_activateConstraints_, isa);
}

Swift::Void __swiftcall InCallControlsViewController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v5, sel_traitCollectionDidChange_, isa);
  id v3 = &v1[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController];
  OUTLINED_FUNCTION_2();
  if (*(void *)v3)
  {
    uint64_t v4 = (id *)(*(void *)v3 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
    OUTLINED_FUNCTION_2();
    objc_msgSend(*v4, sel_reloadData);
  }
}

Swift::Void __swiftcall InCallControlsViewController.updateViewConstraints()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = objc_msgSend(v0, sel_parentViewController);
  if (v2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v2, sel_viewIfLoaded);

    if (v4)
    {
      objc_super v5 = &v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent];
      OUTLINED_FUNCTION_2();
      if (*(void *)v5)
      {
        objc_super v6 = (void *)*((void *)v5 + 6);
        if (v6)
        {
          unint64_t v7 = (void *)*((void *)v5 + 5);
          if (v7)
          {
            id v8 = v6;
            id v9 = v7;
            objc_msgSend(v4, sel_bounds);
            objc_msgSend(v8, sel_setActive_, v10 < v11);
            objc_msgSend(v4, sel_bounds);
            objc_msgSend(v9, sel_setActive_, v13 < v12);

            id v4 = v9;
          }
        }
      }
    }
  }
  v14.receiver = v0;
  v14.super_class = ObjectType;
  objc_msgSendSuper2(&v14, sel_updateViewConstraints);
}

Swift::Void __swiftcall InCallControlsViewController.viewDidLayoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_viewDidLayoutSubviews);
  InCallControlsViewController.updateViewConstraints()();
}

Swift::Bool __swiftcall InCallControlsViewController._canShowWhileLocked()()
{
  return 1;
}

uint64_t InCallControlsViewController.handle(_:from:completion:)(unint64_t a1, void *a2, void (*a3)(uint64_t), uint64_t a4)
{
  id v9 = &v4[OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate];
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v9);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *((void *)v9 + 1);
    if (CNKCommand.isAvailableWhileLocked.getter(a1))
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, unint64_t, void *, uint64_t, uint64_t))(v12 + 16))(v4, a1, a2, ObjectType, v12);
      if (a3) {
        a3(1);
      }
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v14 = type metadata accessor for SpringBoardUtilities();
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)a3);
      id v15 = a2;
      return specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)(v14, a1, a3, a4, v11, v12, v4, a2);
    }
  }
  return result;
}

uint64_t closure #1 in InCallControlsViewController.handle(_:from:completion:)(char a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 16))(a7, a2, a8, ObjectType, a6);
    if (!a3) {
      return result;
    }
    uint64_t v15 = 1;
    return a3(v15);
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v16 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v16 + 16) = xmmword_1C3769620;
  type metadata accessor for CNKCommand(0);
  uint64_t v17 = String.init<A>(reflecting:)();
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v15 = 0;
    return a3(v15);
  }
  return result;
}

uint64_t InCallControlsViewController.didTapEffectsButton(_:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  id v4 = v1;
  InCallControlsViewController.handle(_:from:completion:)(1uLL, a1, (void (*)(uint64_t))partial apply for closure #1 in InCallControlsViewController.didTapEffectsButton(_:), v3);
  return swift_release();
}

void closure #1 in InCallControlsViewController.didTapEffectsButton(_:)(char a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = (BOOL *)(a2 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_effectsAreEnabled);
    swift_beginAccess();
    *id v2 = !*v2;
    InCallControlsViewController.updateEffectsButton()();
  }
}

uint64_t InCallControlsViewController.didTapJoinLeaveButton(_:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  id v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_mode);
  swift_beginAccess();
  uint64_t v5 = String.init<A>(reflecting:)();
  uint64_t v7 = v6;
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v7;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v8 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_shouldShowLeaveButton);
  uint64_t result = swift_beginAccess();
  if (*v8 == 1)
  {
LABEL_4:
    unint64_t v10 = 2;
  }
  else
  {
    unsigned int v11 = *v4;
    switch(v11 >> 5)
    {
      case 1u:
        if ((v11 & 1) == 0) {
          goto LABEL_4;
        }
        goto LABEL_13;
      case 2u:
        if (v11) {
          goto LABEL_4;
        }
        goto LABEL_13;
      case 3u:
        if (v11 != 96) {
          return result;
        }
LABEL_13:
        unint64_t v10 = 3;
        break;
      case 4u:
      case 5u:
        return result;
      default:
        goto LABEL_4;
    }
  }
  return InCallControlsViewController.handle(_:from:completion:)(v10, a1, 0, 0);
}

uint64_t InCallControlsViewController.didTapFlipCameraButton(_:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return InCallControlsViewController.handle(_:from:completion:)(a4, a1, 0, 0);
}

void InCallControlsViewController.updateControls(forLocalParticipantState:broadcastingState:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v28 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant.State?);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  long long v27 = xmmword_1C37696D0;
  *(_OWORD *)(v11 + 16) = xmmword_1C37696D0;
  _s15ConversationKit11ParticipantVWOcTm_7(a1, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant.State);
  uint64_t v12 = type metadata accessor for Participant.State(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  uint64_t v13 = specialized >> prefix<A>(_:)();
  uint64_t v15 = v14;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Participant.State?);
  uint64_t v16 = MEMORY[0x1E4FBB1A0];
  *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v17 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v11 + 64) = v17;
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  LODWORD(v13) = v28;
  char v31 = v28;
  uint64_t v18 = String.init<A>(reflecting:)();
  *(void *)(v11 + 96) = v16;
  *(void *)(v11 + 104) = v17;
  *(void *)(v11 + 72) = v18;
  *(void *)(v11 + 80) = v19;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  LOBYTE(v11) = (a2 & 1) == 0;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v27;
  LOBYTE(v29) = v11;
  uint64_t v21 = String.init<A>(reflecting:)();
  *(void *)(v20 + 56) = v16;
  *(void *)(v20 + 64) = v17;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v22;
  LODWORD(v13) = (v13 >> 7) & 1;
  LOBYTE(v29) = v13;
  uint64_t v23 = String.init<A>(reflecting:)();
  *(void *)(v20 + 96) = v16;
  *(void *)(v20 + 104) = v17;
  *(void *)(v20 + 72) = v23;
  *(void *)(v20 + 80) = v24;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v25 = (unsigned char *)(v4 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled);
  swift_beginAccess();
  *id v25 = v11;
  InCallControlsViewController.updateMuteAudioButton()(&OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_audioIsEnabled, (uint64_t)"Updating mute audio button for audioIsEnabled=%@", 48, &OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton);
  double v26 = (unsigned char *)(v4 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_videoIsEnabled);
  swift_beginAccess();
  *double v26 = v13;
  InCallControlsViewController.videoIsEnabled.didset();
}

void InCallControlsViewController.updateAudioRouteButton(for:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v4 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769620;
  if (v3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TURoute);
    id v5 = v3;
    uint64_t v6 = String.init<A>(reflecting:)();
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  *(void *)(v4 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  OUTLINED_FUNCTION_2();
  if (!*v9) {
    goto LABEL_21;
  }
  unint64_t v10 = *(char **)(v9[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton);
  uint64_t v11 = &unk_1EBBAE000;
  if (v3
    && (uint64_t v12 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate,
        OUTLINED_FUNCTION_2(),
        MEMORY[0x1C8776240](v12)))
  {
    uint64_t v54 = v1;
    uint64_t v13 = *(void *)(v12 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v55 = OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style;
    uint64_t v15 = *(void *)&v10[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style];
    uint64_t v16 = *(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v13 + 40);
    id v17 = v3;
    uint64_t v18 = v10;
    uint64_t v19 = (void *)v16(v17, v15, ObjectType, v13);
    swift_unknownObjectRelease();
    if (v19)
    {
      OUTLINED_FUNCTION_31_25();
      uint64_t v21 = *(void (**)(void *))(v20 + 288);
      uint64_t v22 = v19;
      v21(v19);
      TURoute.name(for:)(*(void *)&v10[v55]);
      OUTLINED_FUNCTION_31_25();
      (*(void (**)(void))(v23 + 368))();

      unint64_t v10 = v22;
LABEL_20:

LABEL_21:
      OUTLINED_FUNCTION_28();
      return;
    }

    uint64_t v1 = v54;
    uint64_t v11 = (void *)&unk_1EBBAE000;
  }
  else
  {
    uint64_t v24 = v10;
  }
  uint64_t v25 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v27 = v26;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_21();
  uint64_t v31 = v30 - v29;
  UUID.init()();
  uint64_t v32 = UUID.uuidString.getter();
  uint64_t v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v25);
  id v35 = objc_allocWithZone(MEMORY[0x1E4FADC28]);
  uint64_t v18 = (char *)@nonobjc TUMutableRoute.init(uniqueIdentifier:name:)(v32, v34, 0x72656B61657053, 0xE700000000000000);
  objc_msgSend(v18, sel_setSpeaker_, 1);
  uint64_t v36 = v1 + v11[337];
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v36))
  {
    uint64_t v37 = *(void *)(v36 + 8);
    uint64_t v38 = swift_getObjectType();
    uint64_t v39 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v37 + 40))(v18, *(void *)&v10[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style], v38, v37);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v39 = 0;
  }
  OUTLINED_FUNCTION_31_25();
  (*(void (**)(uint64_t))(v40 + 288))(v39);
  unint64_t v41 = *(void *)&v10[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_style];
  BOOL v42 = v41 >= 4;
  unint64_t v43 = v41 - 4;
  if (!v42)
  {
    id v44 = objc_msgSend(self, sel_conversationKit);
    unint64_t v53 = 0xE000000000000000;
    id v45 = "DRAWER_DISC_AUDIO_ROUTE_BUTTON";
LABEL_19:
    v46._object = (void *)((unint64_t)(v45 - 32) | 0x8000000000000000);
    v46._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v47.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v47.value._object = (void *)0xEF74694B6E6F6974;
    v48._uint64_t countAndFlagsBits = 0;
    v48._object = (void *)0xE000000000000000;
    uint64_t v49 = 0;
    Swift::String v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v44, v48, *(Swift::String *)(&v53 - 1));

    OUTLINED_FUNCTION_31_25();
    (*(void (**)(uint64_t, void *))(v51 + 368))(v50._countAndFlagsBits, v50._object);
    goto LABEL_20;
  }
  if (v43 < 2)
  {
    id v44 = objc_msgSend(self, sel_conversationKit);
    unint64_t v53 = 0xE000000000000000;
    id v45 = "DRAWER_PILL_AUDIO_ROUTE_BUTTON";
    goto LABEL_19;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  type metadata accessor for CNKInCallControlButtonStyle(0);
  v52._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t TURoute.name(for:)(unint64_t a1)
{
  if (a1 >= 4)
  {
    if (a1 - 4 > 1)
    {
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      type metadata accessor for CNKInCallControlButtonStyle(0);
      v8._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      id v6 = objc_msgSend(v1, sel_name);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v7;
    }
  }
  else
  {
    id v2 = objc_msgSend(v1, sel_deviceType);
    id v3 = objc_msgSend(v1, sel_name);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    if (!v2)
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v4 = StringProtocol.localizedLowercase.getter();
      swift_bridgeObjectRelease();
    }
    return v4;
  }
  return result;
}

void *InCallControlsViewController.accessibilityHotdog()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  swift_beginAccess();
  if (!*v1) {
    return 0;
  }
  id v2 = (void *)v1[1];
  id v3 = v2;
  return v2;
}

void *InCallControlsViewController.accessibilityJoinLeaveButton()(void *a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  OUTLINED_FUNCTION_2();
  if (!*v3) {
    return 0;
  }
  uint64_t v4 = *(void **)(v3[2] + *a1);
  id v5 = v4;
  return v4;
}

void *InCallControlsViewController.accessibilityEffectsLabel()(void *a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  OUTLINED_FUNCTION_2();
  if (!*v3) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(v3[2] + *a1) + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
  if (v4) {
    id v5 = v4;
  }
  return v4;
}

id InCallControlsViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void InCallControlsViewController.init(nibName:bundle:)()
{
}

id InCallControlsViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void InCallControlsViewController.handleLegacyCallStatusDidChangeNotification(_:)()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v0 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v0 + 16) = xmmword_1C3769620;
  Notification.object.getter();
  uint64_t v1 = specialized >> prefix<A>(_:)((uint64_t)v11);
  uint64_t v3 = v2;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  *(void *)(v0 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v0 + 64) = v5;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  Notification.object.getter();
  if (v12)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    if (swift_dynamicCast())
    {
      InCallControlsViewController.updateToRepresentLegacyCall(_:)();

      return;
    }
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v6 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
  Notification.object.getter();
  uint64_t v7 = specialized >> prefix<A>(_:)((uint64_t)v11);
  uint64_t v9 = v8;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

void InCallControlsViewController.participantIdentifiers.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v26 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v1 = v0;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = InCallControlsViewController.participants.getter();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v22[1] = v6;
    uint64_t v9 = v6 + v8;
    uint64_t v10 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v13 = v12;
    uint64_t v24 = *(void *)(v14 + 64);
    uint64_t v25 = v11;
    uint64_t v15 = *(void *)(v1 + 72);
    uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v22[2] = v12 + 32;
    uint64_t v23 = v15;
    do
    {
      MEMORY[0x1F4188790](v11);
      uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_7(v9, v5, (void (*)(void))type metadata accessor for Participant);
      (*v16)(v18, v5 + *(int *)(v26 + 20), v10);
      _s15ConversationKit11ParticipantVWOhTm_5(v5, (void (*)(void))type metadata accessor for Participant);
      uint64_t v19 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v27;
      }
      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v19 = v27;
      }
      *(void *)(v19 + 16) = v21 + 1;
      uint64_t v10 = v25;
      uint64_t v11 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v19+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v21, v18, v25);
      uint64_t v27 = v19;
      v9 += v23;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t InCallControlsViewController.participantCount.getter()
{
  uint64_t v0 = *(void *)(InCallControlsViewController.participants.getter() + 16);
  swift_bridgeObjectRelease();
  return v0;
}

void InCallControlsViewController.update(participant:broadcastingState:)()
{
  OUTLINED_FUNCTION_31();
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for Participant.State(0);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_64();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_5_1();
  uint64_t v15 = type metadata accessor for Participant(0);
  if (*(void *)(v10 + *(int *)(v15 + 28)))
  {
    uint64_t v16 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
    OUTLINED_FUNCTION_2();
    if (*v16)
    {
      id v17 = *v16;
      InCallControlsCollectionViewController.update(participant:broadcastingState:)();
    }
  }
  else
  {
    uint64_t v18 = v15;
    uint64_t v25 = v6;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v19 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
    _s15ConversationKit11ParticipantVWOcTm_7(v10, v2, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v18);
    uint64_t v20 = specialized >> prefix<A>(_:)();
    uint64_t v22 = v21;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
    *(void *)(v19 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_localParticipant;
    OUTLINED_FUNCTION_6_1();
    outlined assign with copy of Participant(v10, v23);
    swift_endAccess();
    if ((v8 & 0xFFFFFFFFFFFFFCFELL) != 0x7FFFFFCFELL || v4 >= 2u)
    {
      _s15ConversationKit11ParticipantVWOcTm_7(v23, v1, (void (*)(void))type metadata accessor for Participant.State);
      InCallControlsViewController.updateControls(forLocalParticipantState:broadcastingState:)(v1, v8, v25, v4);
      _s15ConversationKit11ParticipantVWOhTm_5(v1, (void (*)(void))type metadata accessor for Participant.State);
    }
  }
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall InCallControlsViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(Swift::OpaquePointer a1, Swift::Bool isLocalMemberAuthorizedToChangeGroupMembership)
{
  uint64_t v5 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
  OUTLINED_FUNCTION_2();
  if (*v5)
  {
    id v6 = *v5;
    InCallControlsCollectionViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(a1, isLocalMemberAuthorizedToChangeGroupMembership);
  }
}

void InCallControlsViewController.update(participant:isKickingAvailable:)(uint64_t a1)
{
  if (*(void *)(a1 + *(int *)(type metadata accessor for Participant(0) + 28)))
  {
    uint64_t v2 = (id *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
    OUTLINED_FUNCTION_2();
    if (*v2)
    {
      id v3 = *v2;
      InCallControlsCollectionViewController.update(participant:isKickingAvailable:)();
    }
  }
}

void InCallControlsViewController.update(with:updateReason:)(uint64_t a1, unsigned char *a2)
{
  if (a2[1] == 1)
  {
    v5[0] = *a2 & 1;
    InCallControlsViewController.gridLayoutStyle.setter(v5);
  }
  id v3 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_collectionViewController);
  OUTLINED_FUNCTION_2();
  if (*v3)
  {
    id v4 = *v3;
    InCallControlsCollectionViewController.update(with:updateReason:)();
  }
}

double InCallControlsViewController.spatialPosition(for:relativeTo:)()
{
  return 0.0;
}

uint64_t protocol witness for ParticipantsViewController.participantsViewControllerDelegate.getter in conformance InCallControlsViewController()
{
  return InCallControlsViewController.participantsViewControllerDelegate.getter();
}

uint64_t protocol witness for ParticipantsViewController.participantsViewControllerDelegate.setter in conformance InCallControlsViewController(uint64_t a1, uint64_t a2)
{
  return InCallControlsViewController.participantsViewControllerDelegate.setter(a1, a2);
}

uint64_t (*protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance InCallControlsViewController(void *a1))()
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return InCallControlsViewController.delegate.modify;
}

void InCallControlsViewController.delegate.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_19_37(a1);
  if (v2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v1);
}

void protocol witness for ParticipantsViewController.participantIdentifiers.getter in conformance InCallControlsViewController()
{
}

uint64_t protocol witness for ParticipantsViewController.participantCount.getter in conformance InCallControlsViewController()
{
  return InCallControlsViewController.participantCount.getter();
}

void protocol witness for ParticipantsViewController.update(participant:broadcastingState:) in conformance InCallControlsViewController()
{
}

void protocol witness for ParticipantsViewController.update(participant:isKickingAvailable:) in conformance InCallControlsViewController(uint64_t a1)
{
}

void protocol witness for ParticipantsViewController.update(with:updateReason:) in conformance InCallControlsViewController(uint64_t a1, unsigned char *a2)
{
}

void protocol witness for ParticipantsViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:) in conformance InCallControlsViewController(Swift::OpaquePointer a1, Swift::Bool a2)
{
}

void *InCallControlsViewController.menu(for:button:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = InCallControlsViewController.audioButton.getter();
  if (v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v6 = a2;
    char v7 = static NSObject.== infix(_:_:)();

    uint64_t v5 = 0;
    if (v7)
    {
      uint64_t v8 = v3 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate;
      OUTLINED_FUNCTION_2();
      if (MEMORY[0x1C8776240](v8))
      {
        uint64_t v9 = *(void *)(v8 + 8);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(ObjectType, v9);
        swift_unknownObjectRelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t InCallControlsViewController.isCaptioningEnabled(inCallControlsCollectionViewController:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v1))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t InCallControlsViewController.inCallControlsCollectionViewController(_:didTap:from:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  _s15ConversationKit11ParticipantVWOcTm_7(a2, v7 - v6, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v10 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v12 = v11;
      MEMORY[0x1F4188790](v13);
      uint64_t v15 = OUTLINED_FUNCTION_18_5(v14, v33);
      v16(v15);
      InCallControlsViewController.didTapBuzz(_:)(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a2, v10);
    case 2:
      uint64_t v10 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v12 = v17;
      MEMORY[0x1F4188790](v18);
      uint64_t v20 = OUTLINED_FUNCTION_18_5(v19, v33);
      v21(v20);
      InCallControlsViewController.didTapApprove(_:)(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a2, v10);
    case 3:
      uint64_t v10 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v12 = v22;
      MEMORY[0x1F4188790](v23);
      uint64_t v25 = OUTLINED_FUNCTION_18_5(v24, v33);
      v26(v25);
      InCallControlsViewController.didTapDismiss(_:)(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a2, v10);
    case 4:
      uint64_t v10 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v12 = v27;
      MEMORY[0x1F4188790](v28);
      uint64_t v30 = OUTLINED_FUNCTION_18_5(v29, v33);
      v31(v30);
      InCallControlsViewController.didTapKick(_:)(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a2, v10);
    case 5:
      unint64_t v32 = 10;
      goto LABEL_15;
    case 6:
      unint64_t v32 = 8;
      goto LABEL_15;
    case 7:
      unint64_t v32 = 13;
      goto LABEL_15;
    case 8:
      unint64_t v32 = 14;
      goto LABEL_15;
    case 9:
    case 10:
    case 11:
      return result;
    case 12:
      unint64_t v32 = 19;
      goto LABEL_15;
    case 13:
      unint64_t v32 = 20;
      goto LABEL_15;
    case 14:
      unint64_t v32 = 21;
LABEL_15:
      uint64_t result = InCallControlsViewController.handle(_:from:completion:)(v32, a3, 0, 0);
      break;
    default:
      InCallControlsViewController.handle(_:from:completion:)(0, a3, 0, 0);
      uint64_t result = _s15ConversationKit11ParticipantVWOhTm_5(v8, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
      break;
  }
  return result;
}

uint64_t InCallControlsViewController.didTapBuzz(_:)(uint64_t a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  uint64_t v8 = specialized >> prefix<A>(_:)((uint64_t)v6);
  uint64_t v10 = v9;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v8;
  *(void *)(v3 + 40) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v11);
  if (result)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v1, a1, ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t InCallControlsViewController.didTapApprove(_:)(uint64_t a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  uint64_t v8 = specialized >> prefix<A>(_:)((uint64_t)v6);
  uint64_t v10 = v9;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v8;
  *(void *)(v3 + 40) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v11);
  if (result)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v1, a1, ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t InCallControlsViewController.didTapDismiss(_:)(uint64_t a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  uint64_t v8 = specialized >> prefix<A>(_:)((uint64_t)v6);
  uint64_t v10 = v9;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v8;
  *(void *)(v3 + 40) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v11);
  if (result)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 24))(v1, a1, ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t InCallControlsViewController.didTapKick(_:)(uint64_t a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  uint64_t v8 = specialized >> prefix<A>(_:)((uint64_t)v6);
  uint64_t v10 = v9;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v8;
  *(void *)(v3 + 40) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v11);
  if (result)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32))(v1, a1, ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

id InCallControlsViewController.videoButtonIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  if (*v0) {
    return objc_msgSend(*(id *)(v0[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton), sel_isEnabled);
  }
  else {
    return 0;
  }
}

id InCallControlsViewController.videoButtonIsEnabled.setter(char a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_viewContent);
  id result = (id)OUTLINED_FUNCTION_2();
  if (*v3) {
    return objc_msgSend(*(id *)(v3[2] + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton), sel_setEnabled_, a1 & 1);
  }
  return result;
}

id (*InCallControlsViewController.videoButtonIsEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = InCallControlsViewController.videoButtonIsEnabled.getter() & 1;
  return InCallControlsViewController.videoButtonIsEnabled.modify;
}

id InCallControlsViewController.videoButtonIsEnabled.modify(uint64_t a1)
{
  return InCallControlsViewController.videoButtonIsEnabled.setter(*(unsigned char *)(a1 + 8));
}

id @nonobjc TUMutableRoute.init(uniqueIdentifier:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)MEMORY[0x1C87730B0](a3, a4);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v4, sel_initWithUniqueIdentifier_name_, v7, v8);

  return v9;
}

void outlined consume of InCallControlsViewController.ViewContent?(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  if (a1)
  {

    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type Participant.VideoProviderType and conformance Participant.VideoProviderType()
{
  unint64_t result = lazy protocol witness table cache variable for type Participant.VideoProviderType and conformance Participant.VideoProviderType;
  if (!lazy protocol witness table cache variable for type Participant.VideoProviderType and conformance Participant.VideoProviderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Participant.VideoProviderType and conformance Participant.VideoProviderType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Participant.VideoProviderType and conformance Participant.VideoProviderType;
  if (!lazy protocol witness table cache variable for type Participant.VideoProviderType and conformance Participant.VideoProviderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Participant.VideoProviderType and conformance Participant.VideoProviderType);
  }
  return result;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_7(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantVWOhTm_5(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void sub_1C3314F2C(unsigned __int8 *a1)
{
}

id sub_1C3314F60(double *a1)
{
  return InCallControlsViewController.topInset.setter(*a1);
}

uint64_t sub_1C3314F8C(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.isExpanded.setter(v1);
}

id sub_1C3314FB4(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.audioIsEnabled.setter(v1);
}

uint64_t sub_1C3314FDC(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.videoIsEnabled.setter(v1);
}

uint64_t sub_1C3315004(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.isScreenSharing.setter(v1);
}

void sub_1C331502C(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  InCallControlsViewController.cinematicFramingIsAvailable.setter(v1);
}

void sub_1C3315054(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  InCallControlsViewController.cinematicFramingIsEnabled.setter(v1);
}

uint64_t sub_1C331507C(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.effectsAreAvailable.setter(v1);
}

uint64_t sub_1C33150A4(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.effectsAreEnabled.setter(v1);
}

uint64_t sub_1C33150CC(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.shouldShowLeaveButton.setter(v1);
}

uint64_t sub_1C33150F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate, a2);
}

uint64_t sub_1C3315110(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for InCallControlsViewController.delegate : InCallControlsViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_delegate);
}

uint64_t sub_1C3315130@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate, a2);
}

uint64_t sub_1C3315150(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for InCallControlsViewController.delegate : InCallControlsViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantDelegate);
}

uint64_t sub_1C3315170@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate, a2);
}

uint64_t sub_1C3315190(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for InCallControlsViewController.delegate : InCallControlsViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_participantsViewControllerDelegate);
}

uint64_t sub_1C33151B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController, a2);
}

uint64_t sub_1C33151D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for InCallControlsViewController.delegate : InCallControlsViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC15ConversationKit28InCallControlsViewController_menuHostViewController);
}

id sub_1C33151F0@<X0>(unsigned char *a1@<X8>)
{
  id result = InCallControlsViewController.videoButtonIsEnabled.getter();
  *a1 = result & 1;
  return result;
}

id sub_1C3315220(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return InCallControlsViewController.videoButtonIsEnabled.setter(v1);
}

uint64_t ObjC metadata update function for InCallControlsViewController()
{
  return type metadata accessor for InCallControlsViewController();
}

uint64_t type metadata accessor for InCallControlsViewController()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsViewController;
  if (!type metadata singleton initialization cache for InCallControlsViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for InCallControlsViewController()
{
  uint64_t result = type metadata accessor for Participant(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for InCallControlsViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsViewController);
}

uint64_t dispatch thunk of InCallControlsViewController.__allocating_init(localParticipant:remoteParticipants:mode:gridLayoutStyle:representedLegacyCallIdentifier:isLocalMemberAuthorizedToChangeGroupMembership:isLinkSharingSupported:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

void destroy for InCallControlsViewController.ViewContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 48);
}

void *initializeWithCopy for InCallControlsViewController.ViewContent(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = *(void **)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  uint64_t v8 = *(void **)(a2 + 48);
  a1[6] = v8;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  swift_bridgeObjectRetain();
  id v13 = v7;
  id v14 = v8;
  return a1;
}

uint64_t assignWithCopy for InCallControlsViewController.ViewContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 24);
  id v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void **)(a1 + 40);
  uint64_t v17 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v17;
  id v18 = v17;

  uint64_t v19 = *(void **)(a1 + 48);
  uint64_t v20 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v20;
  id v21 = v20;

  return a1;
}

uint64_t assignWithTake for InCallControlsViewController.ViewContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

void *type metadata accessor for InCallControlsViewController.ViewContent()
{
  return &unk_1F1EA7620;
}

uint64_t sub_1C33155EC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in InCallControlsViewController.didTapEffectsButton(_:)(char a1)
{
  closure #1 in InCallControlsViewController.didTapEffectsButton(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C331562C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in InCallControlsViewController.cinematicFramingIsEnabled.didset()
{
  closure #1 in InCallControlsViewController.cinematicFramingIsAvailable.didset(v0);
}

id CNComposeRecipient.messagesChatGUID.getter()
{
  if (!objc_msgSend(v0, sel_isGroup)) {
    return 0;
  }
  id result = objc_msgSend(v0, sel_autocompleteResult);
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  id v3 = objc_msgSend(result, sel_psSuggestion);

  if (v3) {
    return (id)outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(v3, (SEL *)&selRef_conversationIdentifier);
  }
  else {
    return 0;
  }
}

uint64_t CNComposeRecipient.messagesGroupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  if (objc_msgSend(v1, sel_isGroup)
    && (id v3 = objc_msgSend(v1, sel_autocompleteResult)) != 0
    && (uint64_t v4 = v3, v5 = objc_msgSend(v3, sel_psSuggestion), v4, v5)
    && (outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(v5, (SEL *)&selRef_messagesGroupIdentifier), v6))
  {
    UUID.init(uuidString:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v8);
  }
}

uint64_t dispatch thunk of InCallControlsViewControllerDelegate.isCaptioningEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of InCallControlsViewControllerDelegate.inCallControlsViewController(_:didTap:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of InCallControlsViewControllerDelegate.didCreateCollectionViewForInCallControlsViewController(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of InCallControlsViewControllerDelegate.audioRouteMenu()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InCallControlsViewControllerDelegate.audioRouteGlyph(for:buttonStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of InCallControlsViewControllerDelegate.inCallControlsViewController(_:didAdd:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

id @nonobjc UIView.isHidden.getter()
{
  return objc_msgSend(v0, sel_isHidden);
}

id @nonobjc UIView.isHidden.setter(char a1)
{
  return objc_msgSend(v1, sel_setHidden_, a1 & 1);
}

double CallControlsStatusView.LeadingView.size.getter()
{
  if (!*(unsigned char *)(v0 + 32)) {
    return *(double *)(v0 + 8);
  }
  if (*(unsigned char *)(v0 + 32) == 1) {
    return *(double *)(v0 + 16);
  }
  return 72.0;
}

id CallControlsStatusView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id CallControlsStatusView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___container) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerWidthConstraint) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerHeightConstraint) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainer) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView_customView) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewWidthConstraint) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewHeightConstraint) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___labelContainer) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___titleLabel) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___subtitleLabel) = 0;
  uint64_t v7 = ObjectType;
  double v2 = OUTLINED_FUNCTION_6_2();
  id v5 = objc_msgSendSuper2(v3, v4, v2, v0, v7);
  CallControlsStatusView.build()();

  return v5;
}

void CallControlsStatusView.build()()
{
  id v1 = v0;
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769580;
  id v3 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___container, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.container.getter);
  id v4 = objc_msgSend(v3, sel_topAnchor);

  id v5 = objc_msgSend(v1, sel_topAnchor);
  id v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(void *)(v2 + 32) = v6;
  id v7 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___container, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.container.getter);
  id v8 = objc_msgSend(v7, sel_bottomAnchor);

  id v9 = objc_msgSend(v1, sel_bottomAnchor);
  id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  *(void *)(v2 + 40) = v10;
  id v11 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___container, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.container.getter);
  id v12 = objc_msgSend(v11, sel_leadingAnchor);

  id v13 = objc_msgSend(v1, sel_leadingAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v2 + 48) = v14;
  id v15 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___container, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.container.getter);
  id v16 = objc_msgSend(v15, sel_trailingAnchor);

  id v17 = objc_msgSend(v1, sel_trailingAnchor);
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(void *)(v2 + 56) = v18;
  unint64_t v42 = v2;
  specialized Array._endMutation()();
  unint64_t v19 = v2;
  id v20 = CallControlsStatusView.leadingContainerWidthConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerWidthConstraint, (SEL *)&selRef_widthAnchor);
  id v21 = CallControlsStatusView.leadingContainerWidthConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerHeightConstraint, (SEL *)&selRef_heightAnchor);
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v22, 2))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v22 + 2, 1);
    specialized Array._endMutation()();
    id v20 = v20;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_5;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v23 = v21;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v24 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
  id v25 = objc_msgSend(v24, sel_centerXAnchor);

  id v26 = CallControlsStatusView.leadingContainer.getter();
  id v27 = objc_msgSend(v26, sel_centerXAnchor);

  id v28 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v27);
  id v29 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
  id v30 = objc_msgSend(v29, sel_centerYAnchor);

  id v31 = CallControlsStatusView.leadingContainer.getter();
  id v32 = objc_msgSend(v31, sel_centerYAnchor);

  id v33 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v32);
  id v34 = CallControlsStatusView.imageViewHeightConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewWidthConstraint, (SEL *)&selRef_widthAnchor);
  id v35 = CallControlsStatusView.imageViewHeightConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewHeightConstraint, (SEL *)&selRef_heightAnchor);
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v36, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v36 + 4, 1);
    specialized Array._endMutation()();
    id v28 = v28;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_11;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_11:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v37 = v33;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v38 = v34;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v39 = v35;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v40 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_activateConstraints_, isa);
}

id CallControlsStatusView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CallControlsStatusView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___container] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerWidthConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerHeightConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView_customView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewWidthConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewHeightConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___labelContainer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___titleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___subtitleLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CallControlsStatusView.set(title:subtitle:)(NSAttributedString_optional title, NSAttributedString_optional subtitle)
{
  uint64_t v2 = *(void *)&title.is_nil;
  Class isa = title.value.super.isa;
  id v4 = OUTLINED_FUNCTION_3_100();
  objc_msgSend(v4, sel_setAttributedText_, isa);

  id v5 = OUTLINED_FUNCTION_3_100();
  objc_msgSend(v5, sel_setHidden_, isa == 0);

  id v6 = OUTLINED_FUNCTION_0_86();
  objc_msgSend(v6, sel_setAttributedText_, v2);

  id v7 = OUTLINED_FUNCTION_0_86();
  objc_msgSend(v7, sel_setHidden_, v2 == 0);
}

id CallControlsStatusView.titleLabel.getter(uint64_t *a1, uint64_t *a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *a1;
  id v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    id v7 = *(id *)(v4 + *a1);
  }
  else
  {
    id v8 = closure #1 in CallControlsStatusView.titleLabel.getter(a2, a3, a4);
    id v9 = *(void **)(v4 + v5);
    *(void *)(v4 + v5) = v8;
    id v7 = v8;

    id v6 = 0;
  }
  id v10 = v6;
  return v7;
}

void CallControlsStatusView.set(leadingView:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  double v1 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  id v6 = CallControlsStatusView.leadingContainerWidthConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerWidthConstraint, (SEL *)&selRef_widthAnchor);
  id v7 = v6;
  if (v5)
  {
    if (v5 == 1) {
      double v8 = v3;
    }
    else {
      double v8 = 72.0;
    }
  }
  else
  {
    double v8 = v1;
  }
  double v9 = 72.0;
  if (v8 <= 72.0) {
    double v8 = 72.0;
  }
  objc_msgSend(v6, sel_setConstant_, v8);

  id v10 = CallControlsStatusView.leadingContainerWidthConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainerHeightConstraint, (SEL *)&selRef_heightAnchor);
  id v11 = v10;
  if (v5)
  {
    if (v5 == 1) {
      double v9 = v4;
    }
  }
  else
  {
    double v9 = v3;
  }
  double v12 = 72.0;
  if (v9 > 72.0) {
    double v12 = v9;
  }
  objc_msgSend(v10, sel_setConstant_, v12);

  id v13 = CallControlsStatusView.leadingContainer.getter();
  objc_msgSend(v13, sel_setHidden_, 0);

  id v14 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
  objc_msgSend(v14, sel_setHidden_, 0);

  if (!v5)
  {
    id v25 = v2;
    id v26 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
    objc_msgSend(v26, sel_setHidden_, 1);

    id v27 = v25;
    CallControlsStatusView.customView.setter(v2);
    id v20 = (void *)OUTLINED_FUNCTION_2_97();
    unsigned __int8 v24 = 0;
    goto LABEL_18;
  }
  if (v5 == 1)
  {
    id v15 = v2;
    CallControlsStatusView.customView.setter(0);
    id v16 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
    objc_msgSend(v16, sel_setContentMode_, *(void *)&v1);

    id v17 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
    objc_msgSend(v17, sel_setImage_, v15);

    id v18 = CallControlsStatusView.imageViewHeightConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewWidthConstraint, (SEL *)&selRef_widthAnchor);
    objc_msgSend(v18, sel_setConstant_, v3);

    id v19 = CallControlsStatusView.imageViewHeightConstraint.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageViewHeightConstraint, (SEL *)&selRef_heightAnchor);
    objc_msgSend(v19, sel_setConstant_, v4);

    id v20 = (void *)OUTLINED_FUNCTION_2_97();
    unsigned __int8 v24 = 1;
LABEL_18:
    outlined consume of CallControlsStatusView.LeadingView(v20, v21, v22, v23, v24);
    return;
  }
  CallControlsStatusView.customView.setter(0);
  id v28 = CallControlsStatusView.leadingContainer.getter();
  objc_msgSend(v28, sel_setHidden_, 1);
}

id CallControlsStatusView.leadingContainerWidthConstraint.getter(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  double v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v7 = CallControlsStatusView.leadingContainer.getter();
    id v8 = [v7 *a2];

    id v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 72.0);
    id v10 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v9;
    id v5 = v9;

    double v4 = 0;
  }
  id v11 = v4;
  return v5;
}

id CallControlsStatusView.leadingContainer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainer;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___leadingContainer);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void CallControlsStatusView.customView.setter(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView_customView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView_customView) = a1;
  id v3 = a1;
  objc_msgSend(v2, sel_removeFromSuperview);
  CallControlsStatusView.buildCustomView()();
}

id CallControlsStatusView.imageViewHeightConstraint.getter(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v7 = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___imageView, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.imageView.getter);
    id v8 = [v7 *a2];

    id v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 26.0);
    id v10 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v9;
    id v5 = v9;

    id v4 = 0;
  }
  id v11 = v4;
  return v5;
}

void outlined consume of CallControlsStatusView.LeadingView(id a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 1u) {
}
  }

void *closure #1 in CallControlsStatusView.container.getter(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769610;
  *(void *)(v2 + 32) = CallControlsStatusView.leadingContainer.getter();
  *(void *)(v2 + 40) = CallControlsStatusView.imageView.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___labelContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsStatusView.labelContainer.getter);
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v3, (Swift::OpaquePointer)v2);
  id v5 = v4;
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v5, sel_setSpacing_, 8.0);
  objc_msgSend(v5, sel_setAxis_, 0);
  objc_msgSend(v5, sel_setAlignment_, 3);
  objc_msgSend(a1, sel_addSubview_, v5);
  return v5;
}

id CallControlsStatusView.imageView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void CallControlsStatusView.buildCustomView()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView_customView);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v3 = CallControlsStatusView.leadingContainer.getter();
    objc_msgSend(v3, sel_addSubview_, v2);

    id v4 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1C3769580;
    id v6 = objc_msgSend(v2, sel_topAnchor);
    id v7 = CallControlsStatusView.leadingContainer.getter();
    id v8 = objc_msgSend(v7, sel_topAnchor);

    id v9 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v8);
    *(void *)(v5 + 32) = v9;
    id v10 = objc_msgSend(v2, sel_leadingAnchor);
    id v11 = CallControlsStatusView.leadingContainer.getter();
    id v12 = objc_msgSend(v11, sel_leadingAnchor);

    id v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v12);
    *(void *)(v5 + 40) = v13;
    id v14 = objc_msgSend(v2, sel_trailingAnchor);
    id v15 = CallControlsStatusView.leadingContainer.getter();
    id v16 = objc_msgSend(v15, sel_trailingAnchor);

    id v17 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v16);
    *(void *)(v5 + 48) = v17;
    id v18 = objc_msgSend(v2, sel_bottomAnchor);
    id v19 = CallControlsStatusView.leadingContainer.getter();
    id v20 = objc_msgSend(v19, sel_bottomAnchor);

    id v21 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v20);
    *(void *)(v5 + 56) = v21;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_activateConstraints_, isa);
  }
}

id closure #1 in CallControlsStatusView.imageView.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v0, sel_setContentMode_, 4);
  id v1 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v0, sel_setTintColor_, v1);

  id v2 = CallControlsStatusView.leadingContainer.getter();
  objc_msgSend(v2, sel_addSubview_, v0);

  return v0;
}

void *closure #1 in CallControlsStatusView.labelContainer.getter()
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C3769610;
  *(void *)(v0 + 32) = CallControlsStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___titleLabel, MEMORY[0x1E4FB2988], MEMORY[0x1E4FB09C8], (SEL *)&selRef_labelColor);
  *(void *)(v0 + 40) = CallControlsStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit22CallControlsStatusView____lazy_storage___subtitleLabel, MEMORY[0x1E4FB2998], MEMORY[0x1E4FB09D8], (SEL *)&selRef_secondaryLabelColor);
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v1, (Swift::OpaquePointer)v0);
  id v3 = v2;
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setSpacing_, 8.0);
  objc_msgSend(v3, sel_setAxis_, 1);
  objc_msgSend(v3, sel_setAlignment_, 1);
  return v3;
}

void *closure #1 in CallControlsStatusView.titleLabel.getter(uint64_t *a1, uint64_t a2, SEL *a3)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UILabel);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  id v5 = static UIFont.preferredFont(textStyle:weight:maximumPointSize:)(*a1, 0, 1);
  v11.value.super.Class isa = 0;
  UILabel.init(font:textColor:)(v6, (UIFont)v5, v11);
  id v8 = v7;
  objc_msgSend(v7, sel_setAdjustsFontForContentSizeCategory_, 1);
  id v9 = [self *a3];
  objc_msgSend(v8, sel_setTextColor_, v9);

  objc_msgSend(v8, sel__setWantsContentAwareTypesettingLanguage_, 1);
  return v8;
}

id CallControlsStatusView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CallControlsStatusView()
{
  return self;
}

id outlined copy of CallControlsStatusView.LeadingView(id result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 1u) {
    return result;
  }
  return result;
}

void destroy for CallControlsStatusView.LeadingView(uint64_t a1)
{
}

uint64_t initializeWithCopy for CallControlsStatusView.LeadingView(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of CallControlsStatusView.LeadingView(*(id *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CallControlsStatusView.LeadingView(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of CallControlsStatusView.LeadingView(*(id *)a2, v4, v5, v6, v7);
  id v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of CallControlsStatusView.LeadingView(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CallControlsStatusView.LeadingView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of CallControlsStatusView.LeadingView(v4, v6, v5, v7, v9);
  return a1;
}

ValueMetadata *type metadata accessor for CallControlsStatusView.LeadingView()
{
  return &type metadata for CallControlsStatusView.LeadingView;
}

double RecipientResultWrapper.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = xmmword_1C376E330;
  *(void *)(v2 + 16) = a1;
  return result;
}

uint64_t static PeoplePickerRanker.findDuetHandle<A>(from:isHandleEligible:)()
{
  return Sequence.first(where:)();
}

uint64_t RecipientResultWrapper.idsHandle.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v3 = closure #1 in RecipientResultWrapper.idsHandle.getter(v0);
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = v3;
    *(void *)(v0 + 32) = v6;
    swift_bridgeObjectRetain();
    outlined consume of String??(v4, v5);
  }
  outlined copy of String??(v1, v2);
  return v3;
}

uint64_t static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(void *a1, void *a2, char a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  id v14 = __swift_project_boxed_opaque_existential_1(a1, v13);
  uint64_t v16 = a2[3];
  uint64_t v15 = a2[4];
  id v17 = __swift_project_boxed_opaque_existential_1(a2, v16);
  return specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)((uint64_t)v14, (uint64_t)v17, a3, a4, a5, a6, a7, v20, v13, v16, v12, v15) & 1;
}

uint64_t closure #1 in static PeoplePickerRanker.findDuetHandle<A>(from:isHandleEligible:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  if (!v9) {
    return 0;
  }
  char v10 = a2(v8);
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t PeoplePickerRanker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PeoplePickerRanker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t RecipientResultWrapper.init(_:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 24) = xmmword_1C376E330;
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_0_87();
}

uint64_t partial apply for closure #1 in static PeoplePickerRanker.findDuetHandle<A>(from:isHandleEligible:)(uint64_t a1)
{
  return closure #1 in static PeoplePickerRanker.findDuetHandle<A>(from:isHandleEligible:)(a1, *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

id RecipientResultWrapper.recipient.getter()
{
  return *(id *)(v0 + 16);
}

unint64_t RecipientResultWrapper.isDuetHandle.getter()
{
  return ((unint64_t)objc_msgSend(*(id *)(v0 + 16), sel_sourceType) >> 4) & 1;
}

uint64_t key path setter for RecipientResultWrapper.idsHandle : RecipientResultWrapper(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return RecipientResultWrapper.idsHandle.setter(v1, v2);
}

uint64_t RecipientResultWrapper.idsHandle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return outlined consume of String??(v3, v4);
}

uint64_t closure #1 in RecipientResultWrapper.idsHandle.getter(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + 16), sel_address);
  id v2 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t RecipientResultWrapper.deinit()
{
  outlined consume of String??(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return v0;
}

uint64_t RecipientResultWrapper.__deallocating_deinit()
{
  RecipientResultWrapper.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PeoplePickerHandle.idsHandle.getter in conformance RecipientResultWrapper()
{
  return RecipientResultWrapper.idsHandle.getter();
}

unint64_t protocol witness for PeoplePickerHandle.isDuetHandle.getter in conformance RecipientResultWrapper()
{
  return RecipientResultWrapper.isDuetHandle.getter() & 1;
}

uint64_t specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v47[3] = a9;
  v47[4] = a11;
  __swift_allocate_boxed_opaque_existential_1(v47);
  (*(void (**)(void))(*(void *)(a9 - 8) + 16))();
  v46[3] = a10;
  v46[4] = a12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 16))(boxed_opaque_existential_1, a2, a10);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(a9, a11);
  uint64_t v19 = v18;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(a10, a12);
  uint64_t v22 = v21;
  if (!v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (!v21)
  {
LABEL_15:
    if (one-time initialization token for peoplePicker != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.peoplePicker);
    outlined init with copy of IDSLookupManager((uint64_t)v47, (uint64_t)v45);
    outlined init with copy of IDSLookupManager((uint64_t)v46, (uint64_t)v44);
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v43 = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      outlined init with copy of IDSLookupManager((uint64_t)v45, (uint64_t)v42);
      uint64_t v35 = specialized >> prefix<A>(_:)((uint64_t)v42);
      unint64_t v37 = v36;
      outlined destroy of PeoplePickerHandle?((uint64_t)v42);
      v42[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      *(_WORD *)(v33 + 12) = 2080;
      outlined init with copy of IDSLookupManager((uint64_t)v44, (uint64_t)v42);
      uint64_t v38 = specialized >> prefix<A>(_:)((uint64_t)v42);
      unint64_t v40 = v39;
      outlined destroy of PeoplePickerHandle?((uint64_t)v42);
      v42[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      _os_log_impl(&dword_1C2F90000, v31, v32, "Missing IDS Handle for %s, %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v34, -1, -1);
      MEMORY[0x1C87760E0](v33, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    }

    if (!v19)
    {
      LOBYTE(v25) = 0;
      goto LABEL_24;
    }
    LOBYTE(v25) = 1;
    goto LABEL_22;
  }
  uint64_t v23 = v20;
  if (a3) {
    unsigned __int8 v24 = a4;
  }
  else {
    unsigned __int8 v24 = a6;
  }
  unsigned int v25 = v24(v17, v19);
  if (((v25 ^ v24(v23, v22)) & 1) == 0)
  {
    id v26 = (void *)MEMORY[0x1C87730B0](v17, v19);
    unsigned int v25 = objc_msgSend(v26, sel_destinationIdIsPhoneNumber);

    id v27 = (void *)MEMORY[0x1C87730B0](v23, v22);
    unsigned int v28 = objc_msgSend(v27, sel_destinationIdIsPhoneNumber);

    if (v25 == v28)
    {
      if (v17 == v23 && v19 == v22)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v25) = 0;
        goto LABEL_22;
      }
      LOBYTE(v25) = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
LABEL_24:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v25 & 1;
}

uint64_t sub_1C3317CA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RecipientResultWrapper.idsHandle.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t dispatch thunk of PeoplePickerHandle.idsHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerHandle.isDuetHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for PeoplePickerRanker()
{
  return self;
}

uint64_t method lookup function for PeoplePickerRanker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PeoplePickerRanker);
}

uint64_t dispatch thunk of PeoplePickerRanker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t type metadata accessor for RecipientResultWrapper()
{
  return self;
}

uint64_t method lookup function for RecipientResultWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecipientResultWrapper);
}

uint64_t dispatch thunk of RecipientResultWrapper.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t outlined destroy of PeoplePickerHandle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PeoplePickerHandle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ConversationHUDMenuController.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  return v0;
}

uint64_t *ConversationHUDMenuController.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static ConversationHUDMenuController.shared;
}

uint64_t static ConversationHUDMenuController.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t key path setter for ConversationHUDMenuController.activeMenuButtonProvider : ConversationHUDMenuController(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

void ConversationHUDMenuController.activeMenuButtonProvider.didset()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationControls);
  swift_retain_n();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      type metadata accessor for ConversationControlsMenuButtonProvider();
      uint64_t v5 = String.init<A>(reflecting:)();
      unint64_t v7 = v6;
    }
    else
    {
      unint64_t v7 = 0xE300000000000000;
      uint64_t v5 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v1, v2, "activeMenuButtonProvider: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v4, -1, -1);
    MEMORY[0x1C87760E0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t ConversationHUDMenuController.activeMenuButtonProvider.getter()
{
  return swift_weakLoadStrong();
}

uint64_t ConversationHUDMenuController.activeMenuButtonProvider.setter()
{
  return swift_release();
}

void (*ConversationHUDMenuController.activeMenuButtonProvider.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return ConversationHUDMenuController.activeMenuButtonProvider.modify;
}

void ConversationHUDMenuController.activeMenuButtonProvider.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
    ConversationHUDMenuController.activeMenuButtonProvider.didset();
  }
  free(v3);
}

uint64_t ConversationHUDMenuController.deinit()
{
  swift_weakDestroy();
  return v0;
}

uint64_t ConversationHUDMenuController.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t ConversationHUDMenuController.init()()
{
  swift_weakInit();
  return v0;
}

uint64_t sub_1C3318388@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for ConversationHUDMenuController()
{
  return self;
}

uint64_t method lookup function for ConversationHUDMenuController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHUDMenuController);
}

uint64_t dispatch thunk of ConversationHUDMenuController.activeMenuButtonProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationHUDMenuController.activeMenuButtonProvider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationHUDMenuController.activeMenuButtonProvider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ConversationHUDMenuController.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

BOOL CNKDeviceOrientation.isPortrait.getter(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFDLL) == 1;
}

BOOL CNKDeviceOrientation.isLandscape.getter(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

uint64_t CNKDeviceOrientation.uiDeviceOrientation.getter(unint64_t a1)
{
  if (a1 > 3) {
    return 1;
  }
  else {
    return qword_1C377B8E8[a1];
  }
}

uint64_t CNKDeviceOrientation.toggled.getter(uint64_t a1)
{
  if ((a1 & 0xFFFFFFFFFFFFFFFDLL) == 1) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t CNKDeviceOrientation.debugDescription.getter()
{
  return 0x6E776F6E6B6E75;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CNKDeviceOrientation()
{
  return CNKDeviceOrientation.debugDescription.getter();
}

uint64_t CNKSupportedDeviceOrientations.debugDescription.getter(uint64_t a1)
{
  uint64_t v1 = 1819042094;
  uint64_t v2 = 0x6E776F6E6B6E75;
  if (a1 == 1) {
    uint64_t v2 = 0x616373646E616C2ELL;
  }
  if (a1 != 2) {
    uint64_t v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0x69617274726F702ELL;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CNKSupportedDeviceOrientations()
{
  return CNKSupportedDeviceOrientations.debugDescription.getter(*v0);
}

uint64_t IconMenu.content.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IconMenu.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v25 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v28 = a1;
  uint64_t v31 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for Menu();
  type metadata accessor for ButtonMenuStyle();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle, MEMORY[0x1E4F3CB00]);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for IconMenuButtonStyle();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  type metadata accessor for ModifiedContent();
  uint64_t v46 = OpaqueTypeConformance2;
  uint64_t v47 = WitnessTable;
  uint64_t v42 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v9 = MEMORY[0x1E4F3CC28];
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  OUTLINED_FUNCTION_2_98();
  uint64_t v10 = type metadata accessor for _ConditionalContent();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = MEMORY[0x1E4F3CE38];
  v24[1] = v9;
  uint64_t v11 = swift_getWitnessTable();
  uint64_t v12 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  uint64_t v38 = v11;
  uint64_t v39 = v12;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v11;
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v44 = v10;
  uint64_t v45 = v13;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  uint64_t v14 = type metadata accessor for _ConditionalContent();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v24 - v19;
  IconMenu.menuWithAccessbilityLabel()(v28, v29, v30, v25, v27, v26, (uint64_t)v18);
  uint64_t v44 = v10;
  uint64_t v45 = v13;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  uint64_t v35 = v12;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v13;
  uint64_t v21 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18, v14, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20, v14, v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for IconMenuButtonStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t IconMenu.menuWithAccessbilityLabel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v78 = a3;
  uint64_t v77 = a2;
  uint64_t v82 = a7;
  uint64_t v70 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v68 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  unint64_t v14 = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  uint64_t v101 = v13;
  unint64_t v102 = v14;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v101 = v12;
  unint64_t v102 = a5;
  uint64_t v80 = a5;
  uint64_t v103 = OpaqueTypeConformance2;
  uint64_t v104 = a6;
  uint64_t v81 = a6;
  uint64_t v16 = type metadata accessor for Menu();
  uint64_t v17 = type metadata accessor for ButtonMenuStyle();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle, MEMORY[0x1E4F3CB00]);
  uint64_t v101 = v16;
  unint64_t v102 = v17;
  uint64_t v103 = WitnessTable;
  uint64_t v104 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v79 = a4;
  uint64_t v21 = type metadata accessor for IconMenuButtonStyle();
  uint64_t v101 = v16;
  unint64_t v102 = v17;
  uint64_t v103 = WitnessTable;
  uint64_t v104 = v19;
  uint64_t v22 = swift_getOpaqueTypeConformance2();
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v101 = OpaqueTypeMetadata2;
  unint64_t v102 = v21;
  uint64_t v103 = v22;
  uint64_t v104 = v23;
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v101 = OpaqueTypeMetadata2;
  unint64_t v102 = v21;
  uint64_t v103 = v22;
  uint64_t v104 = v23;
  uint64_t v25 = swift_getOpaqueTypeConformance2();
  uint64_t v26 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v99 = v25;
  uint64_t v100 = v26;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v101 = v24;
  unint64_t v102 = v27;
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v28 = type metadata accessor for _ConditionalContent();
  uint64_t v73 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v64 = (uint64_t)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v71 = (uint64_t)&v64 - v31;
  uint64_t v97 = swift_getWitnessTable();
  uint64_t v98 = MEMORY[0x1E4F3CE38];
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  uint64_t v95 = v32;
  uint64_t v96 = v33;
  uint64_t v76 = v33;
  uint64_t v34 = a1;
  uint64_t v93 = swift_getWitnessTable();
  uint64_t v94 = v32;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v101 = v28;
  unint64_t v102 = v35;
  uint64_t v36 = swift_getOpaqueTypeMetadata2();
  uint64_t v65 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v64 - v37;
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v39 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v39);
  uint64_t v42 = (char *)&v64 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v40);
  id v66 = (char *)&v64 - v43;
  uint64_t v75 = type metadata accessor for _ConditionalContent();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  objc_super v72 = (char *)&v64 - v44;
  uint64_t v45 = IconButtonConfig.accessibilityLabel.getter();
  if (v46)
  {
    uint64_t v47 = v45;
    unint64_t v48 = v46;
    uint64_t v49 = v71;
    IconMenu.menuWithAccessbilityIdentifier()(v34, v77, v78, v79, v80, v81, v71);
    Swift::String v50 = v68;
    static AccessibilityChildBehavior.combine.getter();
    View.accessibilityElement(children:)();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v50, v70);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v49, v28);
    uint64_t v101 = v47;
    unint64_t v102 = v48;
    uint64_t v85 = v28;
    uint64_t v86 = v35;
    uint64_t v51 = swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type String and conformance String();
    View.accessibilityLabel<A>(_:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v38, v36);
    swift_bridgeObjectRelease();
    uint64_t v83 = v51;
    uint64_t v52 = v76;
    uint64_t v84 = v76;
    uint64_t v53 = swift_getWitnessTable();
    uint64_t v54 = v66;
    static ViewBuilder.buildExpression<A>(_:)(v42, v39, v53);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v55(v42, v39);
    static ViewBuilder.buildExpression<A>(_:)(v54, v39, v53);
    id v56 = v72;
    static ViewBuilder.buildEither<A, B>(first:)();
    v55(v42, v39);
    v55(v54, v39);
  }
  else
  {
    uint64_t v57 = v64;
    IconMenu.menuWithAccessbilityIdentifier()(a1, v77, v78, v79, v80, v81, v64);
    uint64_t v58 = v71;
    static ViewBuilder.buildExpression<A>(_:)(v57, v28, v35);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v59(v57, v28);
    static ViewBuilder.buildExpression<A>(_:)(v58, v28, v35);
    uint64_t v101 = v28;
    unint64_t v102 = v35;
    uint64_t v60 = swift_getOpaqueTypeConformance2();
    uint64_t v52 = v76;
    uint64_t v91 = v60;
    uint64_t v92 = v76;
    swift_getWitnessTable();
    id v56 = v72;
    static ViewBuilder.buildEither<A, B>(second:)();
    v59(v57, v28);
    v59(v58, v28);
  }
  uint64_t v101 = v28;
  unint64_t v102 = v35;
  uint64_t v89 = swift_getOpaqueTypeConformance2();
  uint64_t v90 = v52;
  uint64_t v87 = swift_getWitnessTable();
  uint64_t v88 = v35;
  uint64_t v61 = v75;
  uint64_t v62 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v56, v61, v62);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v56, v61);
}

uint64_t associated type witness table accessor for View.Body : View in IconMenu<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t IconMenu.menuWithAccessbilityIdentifier()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v46 = a2;
  uint64_t v51 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  swift_getOpaqueTypeConformance2();
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  type metadata accessor for Menu();
  type metadata accessor for ButtonMenuStyle();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle, MEMORY[0x1E4F3CB00]);
  swift_getOpaqueTypeMetadata2();
  uint64_t v48 = a4;
  type metadata accessor for IconMenuButtonStyle();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v71 = OpaqueTypeConformance2;
  uint64_t v72 = WitnessTable;
  uint64_t v67 = swift_getOpaqueTypeConformance2();
  uint64_t v68 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v69 = v13;
  uint64_t v70 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v52 = type metadata accessor for VStack();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v42 - v18;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v42 - v25;
  uint64_t v45 = type metadata accessor for _ConditionalContent();
  uint64_t v44 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v43 = (char *)&v42 - v27;
  IconButtonConfig.accessibilityIdentifier.getter();
  if (v28)
  {
    IconMenu.menu()(a1, v46, v47, v48, v49, v50, (uint64_t)v19);
    uint64_t v55 = swift_getWitnessTable();
    uint64_t v56 = MEMORY[0x1E4F3CE38];
    uint64_t v29 = swift_getWitnessTable();
    View.accessibilityIdentifier(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v14);
    uint64_t v30 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    uint64_t v53 = v29;
    uint64_t v54 = v30;
    uint64_t v31 = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v24, v20, v31);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v21 + 8);
    v32(v24, v20);
    static ViewBuilder.buildExpression<A>(_:)(v26, v20, v31);
    uint64_t v33 = v43;
    static ViewBuilder.buildEither<A, B>(first:)();
    v32(v24, v20);
    v32(v26, v20);
  }
  else
  {
    IconMenu.menu()(a1, v46, v47, v48, v49, v50, (uint64_t)v17);
    uint64_t v65 = swift_getWitnessTable();
    uint64_t v66 = MEMORY[0x1E4F3CE38];
    uint64_t v34 = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v17, v14, v34);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v42 + 8);
    v35(v17, v14);
    static ViewBuilder.buildExpression<A>(_:)(v19, v14, v34);
    uint64_t v36 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    uint64_t v63 = v34;
    uint64_t v64 = v36;
    swift_getWitnessTable();
    uint64_t v33 = v43;
    static ViewBuilder.buildEither<A, B>(second:)();
    v35(v17, v14);
    v35(v19, v14);
  }
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = MEMORY[0x1E4F3CE38];
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v38 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  uint64_t v59 = v37;
  uint64_t v60 = v38;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v58 = v37;
  uint64_t v39 = v45;
  uint64_t v40 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v33, v39, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v33, v39);
}

uint64_t IconMenu.menu()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v48 = a6;
  uint64_t v49 = a5;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v44 = a1;
  uint64_t v47 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for Menu();
  type metadata accessor for ButtonMenuStyle();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle, MEMORY[0x1E4F3CB00]);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for IconMenuButtonStyle();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  v61[2] = OpaqueTypeConformance2;
  v61[3] = WitnessTable;
  uint64_t v58 = swift_getOpaqueTypeConformance2();
  uint64_t v59 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v43 = MEMORY[0x1E4F3CC28];
  v61[0] = v10;
  v61[1] = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  swift_getTupleTypeMetadata2();
  uint64_t v36 = type metadata accessor for TupleView();
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v37 = type metadata accessor for VStack();
  uint64_t v41 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v34 = (char *)&v32 - v11;
  uint64_t v40 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v40 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v40);
  uint64_t v38 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v39 = (char *)&v32 - v14;
  uint64_t v16 = v44;
  uint64_t v15 = v45;
  uint64_t v17 = v46;
  uint64_t v18 = a4;
  uint64_t v32 = a4;
  uint64_t v19 = v48;
  uint64_t v20 = v49;
  IconMenu.style.getter(v44, (uint64_t)v60);
  uint64_t v33 = (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe;
  outlined release of IconButtonStyle<A>(v60, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
  uint64_t v50 = v18;
  uint64_t v51 = v20;
  uint64_t v52 = v19;
  uint64_t v53 = v16;
  uint64_t v54 = v15;
  uint64_t v55 = v17;
  default argument 0 of VStack.init(alignment:spacing:content:)(v36, v35);
  uint64_t v21 = v34;
  VStack.init(alignment:spacing:content:)();
  IconMenu.style.getter(v16, (uint64_t)v61);
  outlined release of IconButtonStyle<A>(v61, v33, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
  uint64_t v30 = v37;
  uint64_t v31 = swift_getWitnessTable();
  default argument 6 of View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v30, v31, v22, v23);
  uint64_t v24 = v38;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v30);
  uint64_t v56 = v31;
  uint64_t v57 = MEMORY[0x1E4F3CE38];
  uint64_t v25 = v40;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v39;
  static ViewBuilder.buildExpression<A>(_:)(v24, v25, v26);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v42 + 8);
  v28(v24, v25);
  static ViewBuilder.buildExpression<A>(_:)(v27, v25, v26);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, v25);
}

uint64_t IconMenu.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 32;
  uint64_t v4 = type metadata accessor for IconButtonStyle();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

uint64_t closure #1 in IconMenu.menu()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v93 = a5;
  uint64_t v94 = a6;
  uint64_t v91 = a3;
  uint64_t v92 = a4;
  uint64_t v89 = a7;
  uint64_t v90 = a2;
  uint64_t v84 = a1;
  uint64_t v9 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v88 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v86 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ButtonMenuStyle();
  uint64_t v85 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v78 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  uint64_t KeyPath = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  unint64_t v15 = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  uint64_t v136 = v14;
  unint64_t v137 = v15;
  uint64_t v95 = (char *)MEMORY[0x1E4F3E7B8];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v136 = v13;
  unint64_t v137 = a5;
  uint64_t v138 = OpaqueTypeConformance2;
  uint64_t v139 = a6;
  uint64_t v16 = type metadata accessor for Menu();
  uint64_t v83 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v79 = (char *)&v63 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle, MEMORY[0x1E4F3CB00]);
  uint64_t v136 = v16;
  uint64_t v71 = v11;
  uint64_t v72 = v19;
  unint64_t v137 = v11;
  uint64_t v138 = WitnessTable;
  uint64_t v20 = WitnessTable;
  uint64_t v73 = WitnessTable;
  uint64_t v139 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v80 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v75 = (char *)&v63 - v22;
  uint64_t v23 = type metadata accessor for IconMenuButtonStyle();
  uint64_t v136 = v16;
  unint64_t v137 = v11;
  uint64_t v138 = v20;
  uint64_t v139 = v19;
  uint64_t v24 = swift_getOpaqueTypeConformance2();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v136 = OpaqueTypeMetadata2;
  uint64_t v63 = v23;
  uint64_t v64 = OpaqueTypeMetadata2;
  unint64_t v137 = v23;
  uint64_t v26 = v23;
  uint64_t v138 = v24;
  uint64_t v65 = v25;
  uint64_t v66 = v24;
  uint64_t v139 = v25;
  uint64_t v27 = v25;
  uint64_t v74 = swift_getOpaqueTypeMetadata2();
  uint64_t v77 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v70 = (char *)&v63 - v28;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v69 = (char *)&v63 - v30;
  uint64_t v136 = OpaqueTypeMetadata2;
  unint64_t v137 = v26;
  uint64_t v138 = v24;
  uint64_t v139 = v27;
  uint64_t v31 = swift_getOpaqueTypeConformance2();
  uint64_t v67 = v31;
  uint64_t v32 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  uint64_t v131 = v31;
  uint64_t v132 = v32;
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v136 = v29;
  unint64_t v137 = v68;
  uint64_t v98 = swift_getOpaqueTypeMetadata2();
  uint64_t v96 = *(void *)(v98 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v98);
  uint64_t v35 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v97 = (char *)&v63 - v36;
  uint64_t v105 = v92;
  unint64_t v106 = v93;
  uint64_t v37 = v84;
  uint64_t v107 = v94;
  uint64_t v108 = v84;
  uint64_t v109 = v90;
  uint64_t v110 = v91;
  uint64_t v99 = v92;
  unint64_t v100 = v93;
  uint64_t v101 = v94;
  uint64_t v102 = v84;
  uint64_t v103 = v90;
  uint64_t v104 = v91;
  uint64_t v38 = v79;
  Menu.init(content:label:)();
  uint64_t v39 = v78;
  ButtonMenuStyle.init()();
  uint64_t v40 = v75;
  uint64_t v41 = v71;
  View.menuStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v39, v41);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v38, v16);
  uint64_t v136 = v37;
  uint64_t v42 = v37;
  swift_retain();
  swift_checkMetadataState();
  uint64_t v43 = v70;
  uint64_t v44 = v64;
  View.buttonStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v44);
  IconButtonConfig.enabled.getter();
  uint64_t v45 = v69;
  uint64_t v46 = v74;
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v46);
  uint64_t v47 = v86;
  static AccessibilityChildBehavior.contain.getter();
  uint64_t v48 = v68;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v88);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v45, v29);
  uint64_t v136 = v29;
  unint64_t v137 = v48;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v50 = v98;
  uint64_t v88 = v49;
  static ViewBuilder.buildExpression<A>(_:)(v35, v98, v49);
  uint64_t v51 = v96 + 8;
  uint64_t v52 = *(void (**)(char *, uint64_t))(v96 + 8);
  uint64_t v95 = v35;
  v52(v35, v50);
  uint64_t v53 = IconButtonConfig.title.getter();
  if (v54)
  {
    uint64_t v136 = v53;
    unint64_t v137 = v54;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v85 = Text.init<A>(_:)();
    uint64_t OpaqueTypeConformance2 = v56;
    uint64_t v83 = v55;
    LODWORD(v80) = v57;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v86 = (char *)v52;
    uint64_t v87 = v51;
    IconMenu.style.getter(v42, (uint64_t)v133);
    uint64_t v79 = (char *)v133[4];
    swift_retain();
    outlined release of IconButtonStyle<A>(v133, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
    uint64_t v78 = (char *)swift_getKeyPath();
    IconMenu.style.getter(v42, (uint64_t)v134);
    uint64_t v77 = v134[3];
    swift_retain();
    outlined release of IconButtonStyle<A>(v134, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
    uint64_t v76 = swift_getKeyPath();
    IconMenu.style.getter(v42, (uint64_t)v135);
    outlined release of IconButtonStyle<A>(v135, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
    uint64_t v52 = (void (*)(char *, uint64_t))v86;
    IconMenu.style.getter(v42, (uint64_t)&v136);
    outlined release of IconButtonStyle<A>(&v136, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v114[0] = v80 & 1;
    LOBYTE(v115[0]) = v141;
    LOBYTE(v113[0]) = v143;
    v116[0] = v85;
    v116[1] = v83;
    char v117 = v80 & 1;
    uint64_t v118 = OpaqueTypeConformance2;
    uint64_t v119 = KeyPath;
    char v120 = 1;
    unint64_t v121 = v78;
    uint64_t v122 = v79;
    uint64_t v123 = v76;
    uint64_t v124 = v77;
    uint64_t v125 = v140;
    char v126 = v141;
    uint64_t v127 = v142;
    char v128 = v143;
    long long v129 = v144;
    __int16 v130 = 1;
    TPNumberPadCharacter.rawValue.getter(v116);
    uint64_t v58 = v116;
  }
  else
  {
    _s7SwiftUI15ModifiedContentVyACyACyACyACyAA4TextVAA30_EnvironmentKeyWritingModifierVyAA0E9AlignmentOGGAGyAA4FontVSgGGAGyAA5ColorVSgGGAA12_FrameLayoutVGAA010_FixedSizeN0VGSgWOi0_(&v136);
    uint64_t v58 = &v136;
  }
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v58, (uint64_t)v145, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  uint64_t v59 = v95;
  uint64_t v61 = v97;
  uint64_t v60 = v98;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v95, v97, v98);
  v115[0] = v59;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v145, (uint64_t)v114, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  v115[1] = v114;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?((uint64_t)v145, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  v113[0] = v60;
  v113[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  uint64_t v111 = v88;
  unint64_t v112 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>? and conformance <A> A?();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v115, 2, (uint64_t)v113);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?((uint64_t)v145, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  v52(v61, v60);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v114, (uint64_t)v116, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?((uint64_t)v116, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  return ((uint64_t (*)(char *, uint64_t))v52)(v59, v60);
}

uint64_t closure #1 in closure #1 in IconMenu.menu()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v11, a5, a6);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a5);
  static ViewBuilder.buildExpression<A>(_:)(v14, a5, a6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a5);
}

uint64_t closure #2 in closure #1 in IconMenu.menu()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &__dst[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &__dst[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  memcpy(__dst, (const void *)(a1 + 16), sizeof(__dst));
  uint64_t v9 = type metadata accessor for StateIconButtonStyle();
  StateIconButtonStyle.image()(v9, (uint64_t)v8);
  static AccessibilityChildBehavior.ignore.getter();
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  View.accessibilityElement(children:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
}

uint64_t protocol witness for View.body.getter in conformance IconMenu<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return IconMenu.body.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a2);
}

uint64_t type metadata accessor for IconMenu()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C331B6CC()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>);
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image> and conformance <> _ConditionalContent<A, B>();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for Menu();
  type metadata accessor for ButtonMenuStyle();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle, MEMORY[0x1E4F3CB00]);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for IconMenuButtonStyle();
  swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  type metadata accessor for ModifiedContent();
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  swift_getWitnessTable();
  OUTLINED_FUNCTION_1_109();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
  OUTLINED_FUNCTION_2_98();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_2_98();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
  swift_getWitnessTable();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_1_109();
  type metadata accessor for ModifiedContent();
  OUTLINED_FUNCTION_2_98();
  type metadata accessor for _ConditionalContent();
  swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in IconMenuButtonStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t IconMenuButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v94 = a3;
  uint64_t v95 = a1;
  uint64_t v4 = type metadata accessor for Material();
  uint64_t v92 = *(void *)(v4 - 8);
  uint64_t v93 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v91 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IconOnlyLabelStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.labelStyle<A>(_:)>>.0);
  uint64_t v71 = *(void *)(v17 - 8);
  uint64_t v72 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
  MEMORY[0x1F4188790](v75);
  uint64_t v74 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.fontWeight(_:)>>.0);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v79 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v77 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
  MEMORY[0x1F4188790](v76);
  uint64_t v81 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
  MEMORY[0x1F4188790](v80);
  uint64_t v84 = (uint64_t)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x1F4188790](v83);
  uint64_t v90 = (uint64_t)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  MEMORY[0x1F4188790](v82);
  uint64_t v88 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
  MEMORY[0x1F4188790](v85);
  uint64_t v89 = (uint64_t)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect>);
  MEMORY[0x1F4188790](v87);
  uint64_t v86 = (uint64_t)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  IconOnlyLabelStyle.init()();
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, MEMORY[0x1E4F3DB78]);
  lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, MEMORY[0x1E4F3D440]);
  uint64_t v69 = v19;
  View.labelStyle<A>(_:)();
  uint64_t v29 = v12;
  uint64_t v30 = v68;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  IconMenuButtonStyle.symbol.getter(v95, (uint64_t)v96);
  uint64_t v31 = v97;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v97);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v96[6]);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v31);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v98);
  uint64_t v70 = v8;
  if (v31)
  {
    StateHolder.state.getter((uint64_t)v8);
    uint64_t v32 = v31(v8);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v31);
    uint64_t v33 = v73;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v8, v30);
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v34 = v73;
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v37 = v71;
  uint64_t v36 = v72;
  uint64_t v38 = (uint64_t)v74;
  uint64_t v39 = v69;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v74, v69, v72);
  uint64_t v40 = (uint64_t *)(v38 + *(int *)(v75 + 36));
  *uint64_t v40 = KeyPath;
  v40[1] = v32;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
  IconMenuButtonStyle.symbol.getter(v95, (uint64_t)v99);
  uint64_t v41 = v100;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v100);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v99[6]);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v99[8]);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v41);
  uint64_t v42 = (uint64_t)v70;
  if (v41)
  {
    StateHolder.state.getter((uint64_t)v70);
    v41(v42);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v41);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v42, v30);
  }
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  uint64_t v43 = v77;
  View.fontWeight(_:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v44 = v95;
  IconMenuButtonStyle.symbol.getter(v95, (uint64_t)v101);
  uint64_t v45 = (uint64_t (*)(uint64_t))v101[2];
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v101[6]);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v101[8]);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v101[10]);
  StateHolder.state.getter(v42);
  uint64_t v46 = v45(v42);
  swift_release();
  uint64_t v75 = *(void *)(v34 + 8);
  ((void (*)(uint64_t, uint64_t))v75)(v42, v30);
  uint64_t v48 = v78;
  uint64_t v47 = v79;
  uint64_t v49 = (uint64_t)v81;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v81, v43, v79);
  *(void *)(v49 + *(int *)(v76 + 36)) = v46;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v47);
  IconMenuButtonStyle.style.getter(v44, (uint64_t)v102);
  outlined release of IconButtonStyle<A>(v102, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe);
  uint64_t v50 = v30;
  IconMenuButtonStyle.style.getter(v44, (uint64_t)v103);
  outlined release of IconButtonStyle<A>(v103, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v51 = v84;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v49, v84, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
  uint64_t v52 = (_OWORD *)(v51 + *(int *)(v80 + 36));
  long long v53 = v105;
  *uint64_t v52 = v104;
  v52[1] = v53;
  v52[2] = v106;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v49, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
  IconMenuButtonStyle.symbol.getter(v44, (uint64_t)v107);
  unint64_t v54 = v108;
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v109);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v110);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v111);
  StateHolder.state.getter(v42);
  uint64_t v55 = v54(v42);
  swift_release();
  ((void (*)(uint64_t, uint64_t))v75)(v42, v50);
  LOBYTE(v47) = static Edge.Set.all.getter();
  uint64_t v56 = v90;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v51, v90, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
  uint64_t v57 = v56 + *(int *)(v83 + 36);
  *(void *)uint64_t v57 = v55;
  *(unsigned char *)(v57 + 8) = v47;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v51, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
  uint64_t v58 = v91;
  static Material.ultraThin.getter();
  LOBYTE(v55) = static Edge.Set.all.getter();
  uint64_t v59 = (uint64_t)v88;
  uint64_t v60 = &v88[*(int *)(v82 + 36)];
  uint64_t v62 = v92;
  uint64_t v61 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v60, v58, v93);
  v60[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundStyleModifier<Material>)
             + 36)] = v55;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v56, v59, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v58, v61);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v56, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v63 = v89;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v59, v89, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  *(_WORD *)(v63 + *(int *)(v85 + 36)) = 256;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v59, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  if (IconButtonConfig.enabled.getter()) {
    double v64 = 1.0;
  }
  else {
    double v64 = 0.5;
  }
  uint64_t v65 = v86;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v63, v86, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
  *(double *)(v65 + *(int *)(v87 + 36)) = v64;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v63, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v65, v94, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect>);
}

__n128 IconMenuButtonStyle.symbol.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IconMenuButtonStyle.style.getter(a1, (uint64_t)v14);
  uint64_t v3 = v14[5];
  uint64_t v4 = v17;
  uint64_t v5 = v18;
  uint64_t v6 = v19;
  uint64_t v7 = v20;
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = v23;
  long long v13 = v15;
  swift_retain();
  __n128 v12 = v16;
  swift_retain();
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v5);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v7);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v9);
  outlined release of IconButtonStyle<A>(v14, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe);
  *(void *)a2 = v3;
  *(_OWORD *)(a2 + 8) = v13;
  __n128 result = v12;
  *(__n128 *)(a2 + 24) = v12;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v8;
  *(void *)(a2 + 80) = v9;
  *(void *)(a2 + 88) = v10;
  return result;
}

uint64_t IconMenuButtonStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 32;
  uint64_t v4 = type metadata accessor for IconButtonStyle();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance IconMenuButtonStyle<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return IconMenuButtonStyle.makeBody(configuration:)(*v2, *(void *)(a1 + 16), a2);
}

uint64_t lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *outlined release of IconButtonStyle<A>(void *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[15];
  uint64_t v11 = a1[16];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  a2(v5, v6);
  a3(v7, v8);
  a4(v9, v11);
  return a1;
}

uint64_t partial apply for closure #1 in IconMenu.menu()()
{
  return partial apply for closure #1 in IconMenu.menu()((uint64_t (*)(void, void, void, void, void, void))closure #1 in IconMenu.menu());
}

uint64_t partial apply for closure #1 in closure #1 in IconMenu.menu()()
{
  return partial apply for closure #1 in IconMenu.menu()(closure #1 in closure #1 in IconMenu.menu());
}

uint64_t partial apply for closure #2 in closure #1 in IconMenu.menu()()
{
  return partial apply for closure #1 in IconMenu.menu()((uint64_t (*)(void, void, void, void, void, void))closure #2 in closure #1 in IconMenu.menu());
}

uint64_t partial apply for closure #1 in IconMenu.menu()(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[5], v1[6], v1[7], v1[2], v1[3], v1[4]);
}

void _s7SwiftUI15ModifiedContentVyACyACyACyACyAA4TextVAA30_EnvironmentKeyWritingModifierVyAA0E9AlignmentOGGAGyAA4FontVSgGGAGyAA5ColorVSgGGAA12_FrameLayoutVGAA010_FixedSizeN0VGSgWOi0_(void *a1)
{
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Circle> and conformance _ClipEffect<A>, (uint64_t *)&demangling cache variable for type metadata for _ClipEffect<Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Circle> and conformance _ClipEffect<A>, (uint64_t *)&demangling cache variable for type metadata for _ClipEffect<Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, Image>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<Color> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t InCallControlsStatusCellViewModel.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InCallControlsStatusCellViewModel.subtitle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

id InCallControlsStatusCellViewModel.controlsManager.getter()
{
  return *(id *)(v0 + 32);
}

void InCallControlsStatusCellViewModel.init(participants:controlsManager:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v83 = a3;
  uint64_t v86 = type metadata accessor for Participant.State(0);
  MEMORY[0x1F4188790](v86 - 8);
  OUTLINED_FUNCTION_10_5();
  uint64_t v87 = v6;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v79 - v8;
  uint64_t v10 = type metadata accessor for Participant(0) - 8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_10_5();
  uint64_t v84 = v11;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v12);
  uint64_t v89 = (uint64_t)&v79 - v13;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v14);
  uint64_t v85 = (uint64_t)&v79 - v15;
  OUTLINED_FUNCTION_8_1();
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v79 - v18;
  uint64_t v20 = (void *)MEMORY[0x1E4FBC8C8];
  char v21 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x320))(v17);
  id v22 = objc_msgSend(self, sel_conversationKit);
  unint64_t v78 = 0xE000000000000000;
  if (v21)
  {
    uint64_t v23 = 0x414C504552414853;
    unint64_t v24 = 0xE900000000000059;
  }
  else
  {
    uint64_t v23 = 0x454D495445434146;
    unint64_t v24 = 0xE800000000000000;
  }
  v25.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v25.value._object = (void *)0xEF74694B6E6F6974;
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  uint64_t v27 = 0;
  Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v23, v25, (NSBundle)v22, v26, *(Swift::String *)(&v78 - 1));
  object = v28._object;
  uint64_t countAndFlagsBits = v28._countAndFlagsBits;

  uint64_t v29 = *(uint64_t (**)(void))((*v20 & *a2) + 0x290);
  uint64_t v80 = a2;
  uint64_t v30 = v29();
  if (!v30)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
    uint64_t v90 = MEMORY[0x1E4FBC860];
    uint64_t v39 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v88 = v39;
    if (v39)
    {
      unint64_t v40 = 0;
      uint64_t v41 = v87;
      while (v40 < *(void *)(a1 + 16))
      {
        OUTLINED_FUNCTION_3_101();
        unint64_t v43 = v42 + 1;
        _s15ConversationKit11ParticipantVWOcTm_8((uint64_t)v20 + a1 + v3 * v42, (uint64_t)v19, type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOcTm_8((uint64_t)v19, (uint64_t)v9, type metadata accessor for Participant.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            uint64_t v46 = (uint64_t)&v9[*(int *)(v45 + 48)];
            OUTLINED_FUNCTION_8_2((uint64_t *)&v9[*(int *)(v45 + 64)]);
            outlined destroy of Participant.MediaInfo(v46);
            type metadata accessor for Date();
            OUTLINED_FUNCTION_12_0();
            (*(void (**)(char *))(v47 + 8))(v9);
            outlined init with take of Participant((uint64_t)v19, v85);
            uint64_t v48 = v90;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_1_110();
              uint64_t v48 = v90;
            }
            unint64_t v50 = *(void *)(v48 + 16);
            unint64_t v49 = *(void *)(v48 + 24);
            if (v50 >= v49 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
              uint64_t v48 = v90;
            }
            *(void *)(v48 + 16) = v50 + 1;
            outlined init with take of Participant(v85, (uint64_t)v20 + v48 + v50 * v3);
            uint64_t v41 = v87;
            break;
          case 6u:
            goto LABEL_11;
          default:
            type metadata accessor for Date();
            OUTLINED_FUNCTION_12_0();
            (*(void (**)(char *))(v44 + 8))(v9);
LABEL_11:
            outlined destroy of Participant((uint64_t)v19);
            break;
        }
        unint64_t v40 = v43;
        if (v88 == v43)
        {
          uint64_t v51 = v90;
          uint64_t v38 = MEMORY[0x1E4FBC860];
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      JUMPOUT(0x1C331DD68);
    }
    uint64_t v51 = v38;
    uint64_t v41 = v87;
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v51 + 16);
    swift_release();
    uint64_t v90 = v38;
    if (v88)
    {
      unint64_t v52 = 0;
      while (2)
      {
        if (v52 >= *(void *)(a1 + 16)) {
          goto LABEL_42;
        }
        OUTLINED_FUNCTION_3_101();
        unint64_t v54 = v53 + 1;
        uint64_t v55 = v89;
        _s15ConversationKit11ParticipantVWOcTm_8((uint64_t)v20 + a1 + v3 * v53, v89, type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOcTm_8(v55, v41, type metadata accessor for Participant.State);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 2u:
            type metadata accessor for Date();
            OUTLINED_FUNCTION_12_0();
            (*(void (**)(uint64_t))(v56 + 8))(v41);
            outlined init with take of Participant(v89, v84);
            uint64_t v57 = v90;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_1_110();
              uint64_t v57 = v90;
            }
            unint64_t v59 = *(void *)(v57 + 16);
            unint64_t v58 = *(void *)(v57 + 24);
            if (v59 >= v58 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
              uint64_t v57 = v90;
            }
            *(void *)(v57 + 16) = v59 + 1;
            outlined init with take of Participant(v84, (uint64_t)v20 + v57 + v59 * v3);
            uint64_t v41 = v87;
            goto LABEL_32;
          case 4u:
            uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            uint64_t v61 = v87 + *(int *)(v60 + 48);
            OUTLINED_FUNCTION_8_2((uint64_t *)(v87 + *(int *)(v60 + 64)));
            uint64_t v62 = v61;
            uint64_t v41 = v87;
            outlined destroy of Participant.MediaInfo(v62);
            goto LABEL_30;
          case 6u:
            goto LABEL_31;
          default:
LABEL_30:
            type metadata accessor for Date();
            OUTLINED_FUNCTION_12_0();
            (*(void (**)(uint64_t))(v63 + 8))(v41);
LABEL_31:
            outlined destroy of Participant(v89);
LABEL_32:
            unint64_t v52 = v54;
            if (v88 != v54) {
              continue;
            }
            uint64_t v64 = v90;
            break;
        }
        break;
      }
    }
    else
    {
      uint64_t v64 = v38;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v64 + 16);
    swift_release();
    goto LABEL_36;
  }
  uint64_t v31 = (void *)v30;
  swift_bridgeObjectRelease();
  id v32 = objc_msgSend(v31, sel_mergedActiveRemoteParticipants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  _sSo25TUConversationParticipantCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  uint64_t v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = specialized Set.count.getter(v33);
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(v31, sel_pendingMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo25TUConversationParticipantCSo8NSObjectCSH10ObjectiveCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v37 = specialized Set.count.getter(v36);
  swift_bridgeObjectRelease();

LABEL_36:
  uint64_t v66 = countAndFlagsBits;
  uint64_t v65 = v83;
  uint64_t v68 = v80;
  uint64_t v67 = (uint64_t)object;
  if (v34 || v37 < 1)
  {
    String.localizedConversationControls.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v72 = swift_allocObject();
    uint64_t v73 = MEMORY[0x1E4FBB550];
    *(_OWORD *)(v72 + 16) = xmmword_1C3769620;
    uint64_t v74 = MEMORY[0x1E4FBB5C8];
    *(void *)(v72 + 56) = v73;
    *(void *)(v72 + 64) = v74;
    *(void *)(v72 + 32) = v34;
  }
  else
  {
    String.localizedConversationControls.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v69 = swift_allocObject();
    uint64_t v70 = MEMORY[0x1E4FBB550];
    *(_OWORD *)(v69 + 16) = xmmword_1C3769620;
    uint64_t v71 = MEMORY[0x1E4FBB5C8];
    *(void *)(v69 + 56) = v70;
    *(void *)(v69 + 64) = v71;
    *(void *)(v69 + 32) = v37;
  }
  uint64_t v75 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v77 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *uint64_t v65 = v66;
  v65[1] = v67;
  v65[2] = v75;
  v65[3] = v77;
  v65[4] = (uint64_t)v68;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _sSo25TUConversationParticipantCSo8NSObjectCSH10ObjectiveCWlTm_1(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *assignWithCopy for InCallControlsStatusCellViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int16 v4 = (void *)a2[4];
  uint64_t v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for InCallControlsStatusCellViewModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallControlsStatusCellViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsStatusCellViewModel()
{
  return &type metadata for InCallControlsStatusCellViewModel;
}

id CNKMutedTalkerBannerViewControllerFactory.makeViewController()()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for MutedTalkerBannerViewController());
  return objc_msgSend(v0, sel_init);
}

id MutedTalkerBannerViewController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t type metadata accessor for MutedTalkerBannerViewController()
{
  return self;
}

CNKMutedTalkerBannerViewControllerFactory __swiftcall CNKMutedTalkerBannerViewControllerFactory.init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CNKMutedTalkerBannerViewControllerFactory)objc_msgSend(v0, sel_init);
}

id CNKMutedTalkerBannerViewControllerFactory.init()()
{
  v1.super_class = (Class)CNKMutedTalkerBannerViewControllerFactory;
  return objc_msgSendSuper2(&v1, sel_init);
}

uint64_t MutedTalkerBannerViewController.currentRequestID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_currentRequestID);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void MutedTalkerBannerViewController.pillViewSubtitle.setter(uint64_t a1)
{
}

void MutedTalkerBannerViewController.pillViewTitle.setter(uint64_t a1)
{
}

uint64_t key path getter for MutedTalkerBannerViewController.isBannerPresent : MutedTalkerBannerViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for MutedTalkerBannerViewController.isBannerPresent : MutedTalkerBannerViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130))(*a1);
}

uint64_t MutedTalkerBannerViewController.isBannerPresent.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t MutedTalkerBannerViewController.isBannerPresent.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  unsigned char *v1 = a1;
  return result;
}

uint64_t (*MutedTalkerBannerViewController.isBannerPresent.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t MutedTalkerBannerViewController.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t MutedTalkerBannerViewController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path getter for MutedTalkerBannerViewController.delegate : MutedTalkerBannerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t key path setter for MutedTalkerBannerViewController.delegate : MutedTalkerBannerViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x148);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

void (*MutedTalkerBannerViewController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1C8776240](v5);
  return DestinationQueryController.delegate.modify;
}

id MutedTalkerBannerViewController.init()()
{
  swift_unknownObjectWeakInit();
  id v1 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  uint64_t v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  id v4 = objc_msgSend(v3, sel_UUIDString);

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = (uint64_t *)&v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_currentRequestID];
  *uint64_t v8 = v5;
  v8[1] = v7;
  v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_isMuted] = 1;
  v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_isBannerPresent] = 0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v9 = OUTLINED_FUNCTION_5_90();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v9);

  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillImageView;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillImageView] = v10;
  uint64_t v12 = self;
  id v13 = v10;
  id v14 = objc_msgSend(v12, sel_systemOrangeColor);
  objc_msgSend(v13, sel_setTintColor_, v14);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PLPillContentItem);
  uint64_t v15 = self;
  id v16 = objc_msgSend(v15, sel_conversationKit);
  uint64_t v17 = OUTLINED_FUNCTION_0_23(0xD000000000000021, 0x80000001C37A85D0);
  uint64_t v19 = v18;

  id v20 = PLPillContentItem.__allocating_init(text:)(v17, v19);
  uint64_t v21 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillViewTitle;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillViewTitle] = v20;
  id v22 = objc_msgSend(v15, sel_conversationKit, 0xE000000000000000);
  uint64_t v23 = OUTLINED_FUNCTION_0_23(0xD00000000000002ELL, 0x80000001C37A8600);
  uint64_t v25 = v24;

  id v26 = PLPillContentItem.__allocating_init(text:style:)(v23, v25, 5);
  uint64_t v27 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillViewSubtitle;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillViewSubtitle] = v26;
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F91450]), sel_initWithLeadingAccessoryView_, *(void *)&v2[v11], 0xE000000000000000);
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillView] = v28;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1C3769610;
  uint64_t v30 = *(void **)&v2[v21];
  *(void *)(v29 + 32) = v30;
  uint64_t v31 = *(void **)&v2[v27];
  *(void *)(v29 + 40) = v31;
  v46[0] = (id)v29;
  specialized Array._endMutation()();
  id v32 = v28;
  id v33 = v30;
  id v34 = v31;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_setCenterContentItems_, isa);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BNBannerSource);
  id result = @nonobjc BNBannerSource.__allocating_init(for:forRequesterIdentifier:)(0, 0xD000000000000037, 0x80000001C37A8630);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_bannerSource] = result;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

  uint64_t v37 = (objc_class *)type metadata accessor for MutedTalkerBannerViewController();
  v48.receiver = v2;
  v48.super_class = v37;
  uint64_t v47 = v37;
  v46[0] = objc_msgSendSuper2(&v48, sel_initWithNibName_bundle_, 0, 0);
  id v38 = objc_allocWithZone(MEMORY[0x1E4FB1D38]);
  id v39 = v46[0];
  id v40 = @nonobjc UITapGestureRecognizer.init(target:action:)(v46, (uint64_t)sel_handleTap_);
  objc_msgSend(v40, sel_setNumberOfTapsRequired_, 1);
  id result = objc_msgSend(v39, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v41 = result;
  objc_msgSend(result, sel_addGestureRecognizer_, v40);

  uint64_t v47 = v37;
  v46[0] = v39;
  id v42 = objc_allocWithZone(MEMORY[0x1E4FB1D38]);
  id v43 = v39;
  id v44 = @nonobjc UITapGestureRecognizer.init(target:action:)(v46, (uint64_t)sel_handleTap_);
  objc_msgSend(v44, sel_setNumberOfTapsRequired_, 2);
  id result = objc_msgSend(v43, sel_view);
  if (result)
  {
    uint64_t v45 = result;
    objc_msgSend(result, sel_addGestureRecognizer_, v44);

    objc_msgSend(v40, sel_requireGestureRecognizerToFail_, v44);
    return v43;
  }
LABEL_7:
  __break(1u);
  return result;
}

id PLPillContentItem.__allocating_init(text:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithText_, v5);

  return v6;
}

id PLPillContentItem.__allocating_init(text:style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithText_style_, v7, a3);

  return v8;
}

id @nonobjc BNBannerSource.__allocating_init(for:forRequesterIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = (void *)MEMORY[0x1C87730B0](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = 0;
  }
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bannerSourceForDestination_forRequesterIdentifier_, a1, v4);

  return v5;
}

id MutedTalkerBannerViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void MutedTalkerBannerViewController.init(coder:)()
{
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MutedTalkerBannerViewController.viewDidLoad()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillView], sel_setAutoresizingMask_, 18);
  id v2 = *(id *)&v0[v1];
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v4 = v3;
  objc_msgSend(v3, sel_bounds);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  objc_msgSend(v2, sel_setFrame_, v6, v8, v10, v12);
  id v13 = objc_msgSend(v0, sel_view);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v14 = v13;
  objc_msgSend(v13, sel_addSubview_, *(void *)&v0[v1]);
}

Swift::Void __swiftcall MutedTalkerBannerViewController.handleTap(_:)(UITapGestureRecognizer_optional *a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v4 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  aBlock[4] = partial apply for closure #1 in MutedTalkerBannerViewController.handleTap(_:);
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_58;
  double v6 = _Block_copy(aBlock);
  id v7 = v1;
  swift_release();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_59_0();
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_5_1();
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_2_99();
  MEMORY[0x1C8773BA0](0, v2, v3, v6);
  _Block_release(v6);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v8);
}

void *closure #1 in MutedTalkerBannerViewController.handleTap(_:)(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_isMuted;
  uint64_t v3 = (char *)a1 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_isMuted;
  id v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (*(uint64_t (**)(BOOL))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x160))((*((unsigned char *)a1
                                                                                   + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_isMuted) & 1) == 0);
  *((unsigned char *)a1 + v2) = (*v3 & 1) == 0;
  id result = (void *)(*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x140))(v5);
  if (result)
  {
    objc_msgSend(result, sel_bannerDidGetTap);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall MutedTalkerBannerViewController.updatePillView(isMuted:)(Swift::Bool isMuted)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillImageView;
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillImageView);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v6 = v5;
  if (isMuted)
  {
    id v7 = OUTLINED_FUNCTION_5_90();
    OUTLINED_FUNCTION_12_3((uint64_t)v7, sel_setImage_);

    uint64_t v8 = *(void **)(v2 + v4);
    uint64_t v9 = self;
    id v10 = v8;
    id v11 = objc_msgSend(v9, sel_systemOrangeColor);
    OUTLINED_FUNCTION_12_3((uint64_t)v11, sel_setTintColor_);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PLPillContentItem);
    uint64_t v12 = self;
    id v13 = objc_msgSend(v12, sel_conversationKit);
    uint64_t v14 = OUTLINED_FUNCTION_0_23(0xD000000000000021, 0x80000001C37A85D0);
    uint64_t v16 = v15;

    id v17 = PLPillContentItem.__allocating_init(text:)(v14, v16);
    MutedTalkerBannerViewController.pillViewTitle.setter((uint64_t)v17);
    id v18 = objc_msgSend(v12, sel_conversationKit, 0xE000000000000000);
    uint64_t v19 = 0xD00000000000002ELL;
    id v20 = "PARTICIPANT_VIEW_MUTED_TALKER_MIC_SUBTITLE_OFF";
  }
  else
  {
    id v21 = @nonobjc UIImage.init(_systemName:)(0x6C6C69662E63696DLL, 0xE800000000000000);
    OUTLINED_FUNCTION_12_3((uint64_t)v21, sel_setImage_);

    id v22 = *(void **)(v2 + v4);
    uint64_t v23 = self;
    id v24 = v22;
    id v25 = objc_msgSend(v23, sel_systemOrangeColor);
    OUTLINED_FUNCTION_12_3((uint64_t)v25, sel_setTintColor_);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PLPillContentItem);
    id v26 = self;
    id v27 = objc_msgSend(v26, sel_conversationKit);
    uint64_t v28 = OUTLINED_FUNCTION_0_23(0xD000000000000020, 0x80000001C37A86B0);
    uint64_t v30 = v29;

    id v31 = PLPillContentItem.__allocating_init(text:)(v28, v30);
    MutedTalkerBannerViewController.pillViewTitle.setter((uint64_t)v31);
    id v18 = objc_msgSend(v26, sel_conversationKit, 0xE000000000000000);
    uint64_t v19 = 0xD00000000000002DLL;
    id v20 = "PARTICIPANT_VIEW_MUTED_TALKER_MIC_SUBTITLE_ON";
  }
  uint64_t v32 = OUTLINED_FUNCTION_0_23(v19, (unint64_t)(v20 - 32) | 0x8000000000000000);
  uint64_t v34 = v33;

  id v35 = PLPillContentItem.__allocating_init(text:style:)(v32, v34, 5);
  MutedTalkerBannerViewController.pillViewSubtitle.setter((uint64_t)v35);
  uint64_t v36 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1C3769610;
  id v38 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillViewTitle);
  id v39 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillViewSubtitle);
  *(void *)(v37 + 32) = v38;
  *(void *)(v37 + 40) = v39;
  specialized Array._endMutation()();
  id v40 = v36;
  id v41 = v38;
  id v42 = v39;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setCenterContentItems_, isa, 0xE000000000000000);
}

Swift::Void __swiftcall MutedTalkerBannerViewController.playBannerSound()()
{
}

Swift::Void __swiftcall MutedTalkerBannerViewController.showBanner()()
{
  uint64_t v1 = v0;
  *((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_isMuted) = 1;
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))() & 1) == 0)
  {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F29128]), sel_init);
    id v3 = objc_msgSend(v2, sel_UUIDString);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    MutedTalkerBannerViewController.currentRequestID.setter(v4, v6);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v17[1] = static OS_dispatch_queue.main.getter();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    aBlock[4] = partial apply for closure #1 in MutedTalkerBannerViewController.showBanner();
    aBlock[5] = v7;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_6_2;
    uint64_t v8 = _Block_copy(aBlock);
    id v9 = v1;
    swift_release();
    type metadata accessor for DispatchQoS();
    v17[0] = v17;
    OUTLINED_FUNCTION_4();
    MEMORY[0x1F4188790](v10);
    OUTLINED_FUNCTION_59_0();
    type metadata accessor for DispatchWorkItemFlags();
    OUTLINED_FUNCTION_4();
    MEMORY[0x1F4188790](v11);
    OUTLINED_FUNCTION_5_1();
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    uint64_t v12 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    OUTLINED_FUNCTION_2_99();
    OUTLINED_FUNCTION_172();
    _Block_release(v8);

    uint64_t v13 = OUTLINED_FUNCTION_21_3();
    v14(v13);
    uint64_t v15 = OUTLINED_FUNCTION_20_26();
    v16(v15);
  }
}

void closure #1 in MutedTalkerBannerViewController.showBanner()(char *a1)
{
  v23[1] = *(id *)MEMORY[0x1E4F143B8];
  id v2 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_bannerSource];
  v23[0] = 0;
  id v3 = objc_msgSend(v2, sel_layoutDescriptionWithError_, v23);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = v23[0];
    [v4 presentationSize];
    double v7 = v6;
    double v9 = v8;
    [v4 containerSize];
    objc_msgSend(a1, sel_preferredContentSizeWithPresentationSize_containerSize_, v7, v9, v10, v11);
    objc_msgSend(a1, sel_setPreferredContentSize_);
    v23[0] = 0;
    if (objc_msgSend(v2, sel_postPresentable_options_userInfo_error_, a1, 1, 0, v23))
    {
      id v12 = v23[0];
      goto LABEL_11;
    }
    id v15 = v23[0];
    uint64_t v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    id v13 = v23[0];
    uint64_t v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v18 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v17, "MutedTalker: unable to post banner", v18, 2u);
    MEMORY[0x1C87760E0](v18, -1, -1);
  }

LABEL_11:
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationControls);
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v22 = 0;
    _os_log_impl(&dword_1C2F90000, v20, v21, "MutedTalker: banner presented", v22, 2u);
    MEMORY[0x1C87760E0](v22, -1, -1);
  }
}

Swift::Void __swiftcall MutedTalkerBannerViewController.dismissBanner()()
{
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))())
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v11[1] = static OS_dispatch_queue.main.getter();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16) = v0;
    aBlock[4] = partial apply for closure #1 in MutedTalkerBannerViewController.dismissBanner();
    aBlock[5] = v1;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_12_2;
    id v2 = _Block_copy(aBlock);
    id v3 = v0;
    swift_release();
    type metadata accessor for DispatchQoS();
    v11[0] = v11;
    OUTLINED_FUNCTION_4();
    MEMORY[0x1F4188790](v4);
    OUTLINED_FUNCTION_59_0();
    type metadata accessor for DispatchWorkItemFlags();
    OUTLINED_FUNCTION_4();
    MEMORY[0x1F4188790](v5);
    OUTLINED_FUNCTION_5_1();
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    double v6 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    OUTLINED_FUNCTION_2_99();
    OUTLINED_FUNCTION_172();
    _Block_release(v2);

    uint64_t v7 = OUTLINED_FUNCTION_21_3();
    v8(v7);
    uint64_t v9 = OUTLINED_FUNCTION_20_26();
    v10(v9);
  }
}

void closure #1 in MutedTalkerBannerViewController.dismissBanner()(uint64_t a1)
{
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_bannerSource);
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_currentRequestID);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_currentRequestID + 8);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x1C87730B0](0x727574206574756DLL, 0xEF66666F2064656ELL);
  v9[0] = 0;
  id v5 = outlined bridged method (mbnnnnnn) of @objc BNBannerSource.revokePresentable(withRequestIdentifier:reason:animated:userInfo:)(v2, v3, (uint64_t)v4, 1, 0, (uint64_t)v9, v1);

  id v6 = v9[0];
  if (v5)
  {
  }
  else
  {
    uint64_t v7 = v6;
    double v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

uint64_t MutedTalkerBannerViewController.presentableWillAppear(asBanner:)()
{
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))(1);
}

uint64_t MutedTalkerBannerViewController.presentableWillDisappear(asBanner:withReason:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))(0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*v1 & *v0) + 0x160);
  return v2(1);
}

id MutedTalkerBannerViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void MutedTalkerBannerViewController.init(nibName:bundle:)()
{
}

id MutedTalkerBannerViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MutedTalkerBannerViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MutedTalkerBannerViewController.presentableBehavior.getter()
{
  return 1;
}

uint64_t MutedTalkerBannerViewController.requestIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_currentRequestID);
  swift_bridgeObjectRetain();
  return v1;
}

void *MutedTalkerBannerViewController.viewController.getter()
{
  id v1 = v0;
  return v0;
}

unint64_t MutedTalkerBannerViewController.requesterIdentifier.getter()
{
  return 0xD000000000000037;
}

CGSize __swiftcall MutedTalkerBannerViewController.preferredContentSize(withPresentationSize:containerSize:)(CGSize withPresentationSize, CGSize containerSize)
{
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillView), sel_systemLayoutSizeFittingSize_, withPresentationSize.width, withPresentationSize.height, containerSize.width, containerSize.height);
  result.double height = v4;
  result.double width = v3;
  return result;
}

id MutedTalkerBannerViewController.bannerContentOutsets.getter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit31MutedTalkerBannerViewController_pillView), sel_shadowOutsets);
}

id outlined bridged method (mbnnnnnn) of @objc BNBannerSource.revokePresentable(withRequestIdentifier:reason:animated:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v12 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(a7, sel_revokePresentableWithRequestIdentifier_reason_animated_userInfo_error_, v12, a3, a4 & 1, a5, a6);

  return v13;
}

uint64_t sub_1C3320538()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in MutedTalkerBannerViewController.handleTap(_:)()
{
  return closure #1 in MutedTalkerBannerViewController.handleTap(_:)(*(void **)(v0 + 16));
}

void partial apply for closure #1 in MutedTalkerBannerViewController.showBanner()()
{
  closure #1 in MutedTalkerBannerViewController.showBanner()(*(char **)(v0 + 16));
}

void partial apply for closure #1 in MutedTalkerBannerViewController.dismissBanner()()
{
  closure #1 in MutedTalkerBannerViewController.dismissBanner()(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for CNKMutedTalkerBannerViewControllerFactory(uint64_t a1)
{
  return type metadata accessor for NSObject(a1, (unint64_t *)&lazy cache variable for type metadata for CNKMutedTalkerBannerViewControllerFactory);
}

uint64_t method lookup function for MutedTalkerBannerViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MutedTalkerBannerViewController);
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.isBannerPresent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.isBannerPresent.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.isBannerPresent.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.handleTap(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.updatePillView(isMuted:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.playBannerSound()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.showBanner()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.dismissBanner()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.presentableWillAppear(asBanner:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of MutedTalkerBannerViewController.presentableWillDisappear(asBanner:withReason:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t CarrierBundleSettings.__allocating_init()()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v0 = (void *)static OS_dispatch_queue.main.getter();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F23A80]), sel_initWithQueue_, v0);

  uint64_t v2 = swift_allocObject();
  CarrierBundleSettings.init(ctClient:)((uint64_t)v1);
  return v2;
}

uint64_t static CarrierBundleSettings.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

id CarrierBundleSettings.ctClient.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_ctClient);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void CarrierBundleSettings.ctClient.setter(void *a1)
{
  double v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_ctClient);
  swift_beginAccess();
  double v4 = *v3;
  *double v3 = a1;
}

uint64_t (*CarrierBundleSettings.ctClient.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t CarrierBundleSettings.__allocating_init(ctClient:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  CarrierBundleSettings.init(ctClient:)(a1);
  return v2;
}

uint64_t CarrierBundleSettings.init(ctClient:)(uint64_t a1)
{
  Logger.init(subsystem:category:)();
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_ctClient) = a1;
  return v1;
}

double CarrierBundleSettings.fetchCarrierBundleValue(for:context:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v32[4] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = (id *)(v3 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_ctClient);
  swift_beginAccess();
  id v8 = *v7;
  specialized _arrayForceCast<A, B>(_:)(a1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  id v10 = objc_msgSend(v8, sel_context_getCarrierBundleValue_error_, a2, isa, v32);

  id v30 = v32[0];
  if (v10)
  {
    *(void *)(a3 + 24) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    *(void *)a3 = v10;
    id v11 = v30;
  }
  else
  {
    id v13 = v32[0];
    uint64_t v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRetain();
    id v15 = a2;
    id v16 = v14;
    swift_bridgeObjectRetain();
    id v17 = v15;
    id v18 = v14;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      id v31 = (id)swift_slowAlloc();
      v32[0] = v31;
      *(_DWORD *)uint64_t v21 = 136315650;
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v24 = MEMORY[0x1C87733E0](v23, MEMORY[0x1E4FBB1A0]);
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, (uint64_t *)v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2112;
      id v27 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v22 = v17;

      *(_WORD *)(v21 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v28 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v19, v20, "Error while extracting carrier bundle value for key hierarchy: %s for subscription context: %@. Error - %s", (uint8_t *)v21, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v22, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v31, -1, -1);
      MEMORY[0x1C87760E0](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

id CarrierBundleSettings.subscription(for:)(uint64_t a1, unint64_t a2)
{
  v42[4] = *(id *)MEMORY[0x1E4F143B8];
  double v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_ctClient);
  swift_beginAccess();
  id v5 = *v4;
  v42[0] = 0;
  id v6 = objc_msgSend(v5, sel_getSubscriptionInfoWithError_, v42);
  id v7 = v42[0];
  if (!v6)
  {
    id v22 = v42[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v7;
  }
  id v8 = v6;
  id v9 = v42[0];
  unint64_t v10 = outlined bridged method (ob) of @objc CTXPCServiceSubscriptionInfo.subscriptions.getter(v8);
  if (!v10)
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v24))
    {
LABEL_49:

      return 0;
    }
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl(&dword_1C2F90000, v23, v24, "Not able to fetch subscriptions active in device.", v25, 2u);
LABEL_47:
    OUTLINED_FUNCTION_3();
    goto LABEL_49;
  }
  unint64_t v11 = v10;
  if (v10 >> 62)
  {
LABEL_38:
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v23, v33))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_49;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    id v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    v42[0] = v35;
    if (a2) {
      uint64_t v36 = a1;
    }
    else {
      uint64_t v36 = 0;
    }
    if (a2) {
      unint64_t v37 = a2;
    }
    else {
      unint64_t v37 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v23, v33, "Not able to find subscription context for SIM ID - %s", v34, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    goto LABEL_47;
  }
LABEL_5:
  uint64_t v13 = 4;
  uint64_t v14 = a1;
  while (1)
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v15 = (id)MEMORY[0x1C87744F0](v13 - 4, v11);
    }
    else {
      id v15 = *(id *)(v11 + 8 * v13);
    }
    id v7 = v15;
    uint64_t v16 = v13 - 3;
    if (__OFADD__(v13 - 4, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v17 = outlined bridged method (pb) of @objc CTXPCServiceSubscriptionContext.labelID.getter(v15);
    if (v18) {
      break;
    }
    if (!a2) {
      goto LABEL_28;
    }

LABEL_21:
    ++v13;
    if (v16 == v12) {
      goto LABEL_39;
    }
  }
  if (!a2)
  {

    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (v17 == v14 && v18 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  unint64_t v20 = a2;
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {

    a2 = v20;
    uint64_t v14 = a1;
    goto LABEL_21;
  }
  a2 = v20;
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  id v26 = v7;
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    id v39 = (void *)swift_slowAlloc();
    v42[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412546;
    log = v27;
    id v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v39 = v7;

    *(_WORD *)(v29 + 12) = 2080;
    if (a2) {
      uint64_t v31 = a1;
    }
    else {
      uint64_t v31 = 0;
    }
    if (a2) {
      unint64_t v32 = a2;
    }
    else {
      unint64_t v32 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, log, v28, "Found subscription context %@ for SIM ID %s", (uint8_t *)v29, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  return v7;
}

uint64_t CarrierBundleSettings.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);

  return v0;
}

uint64_t CarrierBundleSettings.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit21CarrierBundleSettings_logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);

  return swift_deallocClassInstance();
}

uint64_t outlined bridged method (ob) of @objc CTXPCServiceSubscriptionInfo.subscriptions.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_subscriptions);

  if (!v2) {
    return 0;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CTXPCServiceSubscriptionContext);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc CTXPCServiceSubscriptionContext.labelID.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_labelID);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ObjC metadata update function for CarrierBundleSettings()
{
  return type metadata accessor for CarrierBundleSettings();
}

uint64_t type metadata accessor for CarrierBundleSettings()
{
  uint64_t result = type metadata singleton initialization cache for CarrierBundleSettings;
  if (!type metadata singleton initialization cache for CarrierBundleSettings) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CarrierBundleSettings()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CarrierBundleSettings(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CarrierBundleSettings);
}

uint64_t dispatch thunk of CarrierBundleSettings.__allocating_init(ctClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ParticipantMonogramView.ViewModel.init(participant:includeAudioVisualization:includeRingButton:titles:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  Participant.contactDetails.getter();
  uint64_t v13 = *(void *)(a1 + *(int *)(type metadata accessor for Participant(0) + 32));
  id v22 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of Participant(a1);
  swift_bridgeObjectRetain();
  outlined copy of (title: String, subtitle: String?)?(a4, a5);
  outlined consume of AnsweringMachineCallStatus?(0, 0);
  id v14 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = OUTLINED_FUNCTION_3_102();
  outlined copy of (title: String, subtitle: String?)?(v15, v16);
  uint64_t v17 = OUTLINED_FUNCTION_3_102();
  outlined consume of AnsweringMachineCallStatus?(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  *(void *)a8 = v26;
  *(void *)(a8 + 8) = v27;
  *(void *)(a8 + 16) = v28;
  *(void *)(a8 + 24) = v29;
  *(void *)(a8 + 32) = v30;
  *(void *)(a8 + 40) = v31;
  *(void *)(a8 + 48) = v32;
  *(void *)(a8 + 56) = v13;
  *(unsigned char *)(a8 + 64) = a2;
  *(unsigned char *)(a8 + 65) = a3;
  *(void *)(a8 + 72) = a4;
  *(void *)(a8 + 80) = a5;
  *(void *)(a8 + 88) = a6;
  *(void *)(a8 + 96) = a7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v19 = OUTLINED_FUNCTION_3_102();
  return outlined consume of AnsweringMachineCallStatus?(v19, v20);
}

BOOL static ParticipantMonogramView.ViewModel.== infix(_:_:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  uint64_t v6 = *((void *)a1 + 6);
  uint64_t v7 = *((void *)a1 + 7);
  char v8 = *((unsigned char *)a1 + 64);
  char v9 = *((unsigned char *)a1 + 65);
  uint64_t v10 = *((void *)a1 + 9);
  uint64_t v11 = *((void *)a1 + 10);
  uint64_t v12 = *((void *)a1 + 11);
  uint64_t v13 = *((void *)a1 + 12);
  uint64_t v38 = *(void *)(a2 + 24);
  uint64_t v39 = *(void *)(a2 + 8);
  uint64_t v37 = *(void *)(a2 + 40);
  uint64_t v28 = *(void *)(a2 + 48);
  uint64_t v29 = *(void *)(a2 + 32);
  id v26 = *(void **)a2;
  uint64_t v27 = *(void *)(a2 + 56);
  char v35 = *(unsigned char *)(a2 + 65);
  char v36 = *(unsigned char *)(a2 + 64);
  uint64_t v33 = *(void *)(a2 + 72);
  uint64_t v34 = *(void *)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 88);
  uint64_t v32 = *(void *)(a2 + 80);
  uint64_t v30 = *(void *)(a2 + 96);
  long long v42 = *a1;
  uint64_t v43 = v3;
  uint64_t v44 = v2;
  uint64_t v45 = v5;
  uint64_t v46 = v4;
  uint64_t v47 = v6;
  uint64_t v48 = v7;
  char v49 = v8;
  char v50 = v9;
  uint64_t v51 = v10;
  uint64_t v52 = v11;
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  Hasher.init(_seed:)();
  id v14 = (id)v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = OUTLINED_FUNCTION_11_45();
  outlined copy of (title: String, subtitle: String?)?(v15, v16);
  ParticipantMonogramView.ViewModel.hash(into:)((uint64_t)v41);
  Swift::Int v40 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v17 = OUTLINED_FUNCTION_11_45();
  outlined consume of AnsweringMachineCallStatus?(v17, v18);
  *(void *)&long long v42 = v26;
  *((void *)&v42 + 1) = v39;
  uint64_t v43 = v34;
  uint64_t v44 = v38;
  uint64_t v45 = v29;
  uint64_t v46 = v37;
  uint64_t v47 = v28;
  uint64_t v48 = v27;
  char v49 = v36;
  char v50 = v35;
  uint64_t v51 = v33;
  uint64_t v52 = v32;
  uint64_t v53 = v31;
  uint64_t v54 = v30;
  Hasher.init(_seed:)();
  id v19 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5_91();
  outlined copy of (title: String, subtitle: String?)?(v20, v21);
  ParticipantMonogramView.ViewModel.hash(into:)((uint64_t)v41);
  Swift::Int v22 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_5_91();
  outlined consume of AnsweringMachineCallStatus?(v23, v24);
  return v40 == v22;
}

uint64_t ParticipantMonogramView.ViewModel.participantContactDetails.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *((void *)v1 + 2);
  uint64_t v2 = *((void *)v1 + 3);
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v4 = *((void *)v1 + 5);
  uint64_t v6 = *((void *)v1 + 6);
  long long v7 = *v1;
  *(_OWORD *)a1 = *v1;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v6;
  id v8 = (id)v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 ParticipantMonogramView.ViewModel.participantContactDetails.setter(long long *a1)
{
  long long v6 = a1[1];
  long long v7 = *a1;
  __n128 v5 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *(void **)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_OWORD *)uint64_t v1 = v7;
  *(_OWORD *)(v1 + 16) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*ParticipantMonogramView.ViewModel.participantContactDetails.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantMonogramView.ViewModel.gradient.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ParticipantMonogramView.ViewModel.gradient.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*ParticipantMonogramView.ViewModel.gradient.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantMonogramView.ViewModel.includeAudioVisualization.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ParticipantMonogramView.ViewModel.includeAudioVisualization.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*ParticipantMonogramView.ViewModel.includeAudioVisualization.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantMonogramView.ViewModel.includeRingButton.getter()
{
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t ParticipantMonogramView.ViewModel.includeRingButton.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 65) = result;
  return result;
}

uint64_t (*ParticipantMonogramView.ViewModel.includeRingButton.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantMonogramView.ViewModel.titles.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_12_49();
  outlined copy of (title: String, subtitle: String?)?(v0, v1);
  return OUTLINED_FUNCTION_12_49();
}

uint64_t ParticipantMonogramView.ViewModel.titles.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = outlined consume of AnsweringMachineCallStatus?(v4[9], v4[10]);
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v4[12] = a4;
  return result;
}

uint64_t (*ParticipantMonogramView.ViewModel.titles.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id ParticipantMonogramView.ringButton.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton);
}

void ParticipantMonogramView.ringButton.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton) = a1;
}

id ParticipantMonogramView.titleLabelContainer.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer);
}

id ParticipantMonogramView.subtitleLabelContainer.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer);
}

uint64_t ParticipantMonogramView.isInRoster.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for ParticipantMonogramView.isInRoster : ParticipantMonogramView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

id ParticipantMonogramView.isInRoster.setter(char a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster];
  swift_beginAccess();
  *uint64_t v3 = a1;
  return objc_msgSend(v1, sel_setNeedsLayout);
}

id (*ParticipantMonogramView.isInRoster.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ParticipantMonogramView.isInRoster.modify;
}

id ParticipantMonogramView.isInRoster.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    __n128 v5 = *(void **)(a1 + 24);
    return objc_msgSend(v5, sel_setNeedsLayout);
  }
  return result;
}

double ParticipantMonogramView.customCornerRadius.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

double key path getter for ParticipantMonogramView.customCornerRadius : ParticipantMonogramView@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (double *)(*a1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius);
  swift_beginAccess();
  double result = *v3;
  *a2 = *(void *)v3;
  return result;
}

id ParticipantMonogramView.customCornerRadius.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return ParticipantMonogramView.customCornerRadius.didset();
}

id ParticipantMonogramView.customCornerRadius.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowClippingView);
  if (v1)
  {
    uint64_t v2 = (double *)(v0 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius);
    swift_beginAccess();
    return objc_msgSend(v1, sel__setContinuousCornerRadius_, *v2);
  }
  return result;
}

id (*ParticipantMonogramView.customCornerRadius.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ParticipantMonogramView.customCornerRadius.modify;
}

id ParticipantMonogramView.customCornerRadius.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return ParticipantMonogramView.customCornerRadius.didset();
  }
  return result;
}

uint64_t key path getter for ParticipantMonogramView.delegate : ParticipantMonogramView@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for ParticipantMonogramView.delegate : ParticipantMonogramView(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t ParticipantMonogramView.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t ParticipantMonogramView.delegate.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ParticipantMonogramView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t ParticipantMonogramView.participantMonogramViewLayout.getter()
{
  return swift_retain();
}

uint64_t ParticipantMonogramView.participantMonogramViewLayout.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  void *v1 = a1;
  return swift_release();
}

uint64_t (*ParticipantMonogramView.participantMonogramViewLayout.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

char *ParticipantMonogramView.__allocating_init(colorStyle:)(unsigned __int8 *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ParticipantMonogramView.init(colorStyle:)(a1);
}

char *ParticipantMonogramView.init(colorStyle:)(unsigned __int8 *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  int v4 = *a1;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer;
  type metadata accessor for ParticipantViewLabelContainerView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v7 = objc_allocWithZone(ObjCClassFromMetadata);
  id v8 = v1;
  *(void *)&v1[v5] = objc_msgSend(v7, sel_init);
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer;
  *(void *)&v8[v9] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_participantMonogramViewLayout] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 320))() & 1) != 0 || v4)
  {
    *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowClippingView] = 0;
    *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowView] = 0;
  }
  else
  {
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
    uint64_t v11 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowClippingView;
    *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowClippingView] = v10;
    if (v10)
    {
      uint64_t v12 = self;
      id v13 = v10;
      id v14 = objc_msgSend(v12, sel_clearColor);
      objc_msgSend(v13, sel_setBackgroundColor_, v14);

      id v10 = *(id *)&v8[v11];
    }
    if (v10) {
      objc_msgSend(v10, sel_setClipsToBounds_, 1);
    }
    uint64_t v15 = (void *)specialized static UIImage.image(named:)(6);
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v15);

    *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowView] = v16;
    if (v16) {
      objc_msgSend(v16, sel_setAlpha_, 0.2);
    }
  }
  LOBYTE(v81[0]) = v4;
  id v17 = objc_allocWithZone((Class)type metadata accessor for AudioVisualizationView());
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_audioVisualizationView] = AudioVisualizationView.init(colorStyle:)((unsigned __int8 *)v81);
  LOBYTE(v81[0]) = v4;
  id v18 = objc_allocWithZone((Class)type metadata accessor for ParticipantContactView());
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_contactView] = ParticipantContactView.init(colorStyle:)((unsigned __int8 *)v81);
  v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_colorStyle] = v4;
  id v19 = objc_msgSend(self, sel_conversationKit);
  v83._object = (void *)0xE000000000000000;
  v20._object = (void *)0x80000001C37A89F0;
  v20._uint64_t countAndFlagsBits = 0xD000000000000015;
  v21.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v21.value._object = (void *)0xEF74694B6E6F6974;
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v83._uint64_t countAndFlagsBits = 0;
  Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v83);

  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14D0]), sel_init);
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton] = v24;

  v82.receiver = v8;
  v82.super_class = ObjectType;
  unint64_t v25 = (char *)objc_msgSendSuper2(&v82, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v26 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton;
  uint64_t v27 = *(void **)&v25[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton];
  v81[3] = ObjectType;
  v81[0] = v25;
  uint64_t v28 = v25;
  id v29 = v27;
  UIButton.add(target:action:)((uint64_t)v81, (uint64_t)sel_didTapRingButton);

  outlined destroy of Conversation?((uint64_t)v81, &demangling cache variable for type metadata for Any?);
  outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(v23._countAndFlagsBits, (uint64_t)v23._object, 0, *(void **)&v25[v26]);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x74747542676E6972, 0xEA00000000006E6FLL, *(void **)&v25[v26]);
  id v30 = objc_msgSend(*(id *)&v25[v26], sel_titleLabel);
  if (v30)
  {
    uint64_t v31 = v30;
    if (one-time initialization token for ringButton != -1) {
      swift_once();
    }
    objc_msgSend(v31, sel_setFont_, static Fonts.ParticipantViews.ringButton);
  }
  uint64_t v32 = one-time initialization token for ringButtonColor;
  id v33 = *(id *)&v25[v26];
  if (v32 != -1) {
    swift_once();
  }
  char v79 = v4;
  objc_msgSend(v33, sel_setBackgroundColor_, static Colors.ParticipantViews.ringButtonColor);

  uint64_t v34 = *(void **)&v25[v26];
  char v35 = self;
  id v36 = v34;
  id v37 = objc_msgSend(v35, sel_whiteColor);
  objc_msgSend(v36, sel_setTitleColor_forState_, v37, 0);

  uint64_t v78 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowView;
  uint64_t v38 = *(void **)&v28[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowView];
  if (v38)
  {
    uint64_t v39 = *(void **)&v28[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowClippingView];
    if (v39)
    {
      id v40 = v38;
      id v41 = v39;
      objc_msgSend(v41, sel_addSubview_, v40);
      objc_msgSend(v28, sel_addSubview_, v41);
    }
  }
  uint64_t v42 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer;
  id v43 = *(id *)&v28[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer];
  ParticipantViewLabelContainerView.isCentered.setter(0);

  uint64_t v44 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer;
  id v45 = *(id *)&v28[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer];
  ParticipantViewLabelContainerView.isCentered.setter(0);

  uint64_t v80 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_audioVisualizationView;
  OUTLINED_FUNCTION_7_79();
  OUTLINED_FUNCTION_7_79();
  uint64_t v77 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_contactView;
  OUTLINED_FUNCTION_7_79();
  OUTLINED_FUNCTION_7_79();
  OUTLINED_FUNCTION_7_79();
  uint64_t v46 = *(uint64_t (**)(void))(*(void *)static Defaults.shared + 320);
  uint64_t v47 = v28;
  if (v46())
  {
    uint64_t v48 = &selRef_ringButton;
    if (one-time initialization token for background != -1) {
      swift_once();
    }
    id v49 = (id)static Colors.ParticipantViews.background;
    char v50 = &selRef_ringButton;
  }
  else
  {
    id v49 = objc_msgSend(v35, sel_clearColor);
    char v50 = &selRef_ringButton;
    uint64_t v48 = &selRef_ringButton;
  }
  objc_msgSend(v47, v50[318], v49);

  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000016, 0x80000001C37A8A10, *(void **)&v28[v80]);
  OUTLINED_FUNCTION_13_54();
  id v52 = v51;
  OUTLINED_FUNCTION_10_55();
  if (!v53) {
    swift_once();
  }
  objc_msgSend(v49, v48[297], static Fonts.ParticipantViews.title);

  OUTLINED_FUNCTION_13_54();
  id v55 = v54;
  OUTLINED_FUNCTION_10_55();
  if (!v53) {
    swift_once();
  }
  objc_msgSend(v49, v48[297], static Fonts.ParticipantViews.subtitle);

  OUTLINED_FUNCTION_13_54();
  if (v79)
  {
    id v57 = v56;
    OUTLINED_FUNCTION_10_55();
    if (!v53) {
      swift_once();
    }
    objc_msgSend(v49, sel_setTextColor_, static Colors.ParticipantViews.overlayContent);

    objc_msgSend(*(id *)(*(void *)&v28[v44] + OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label), sel_setTextColor_, static Colors.ParticipantViews.overlayContent);
  }
  else
  {
    id v58 = v56;
    OUTLINED_FUNCTION_10_55();
    if (!v53) {
      swift_once();
    }
    objc_msgSend(v49, sel_setTextColor_, static Colors.ParticipantViews.titleLabel);

    OUTLINED_FUNCTION_13_54();
    uint64_t v59 = one-time initialization token for subtitleLabel;
    id v61 = v60;
    if (v59 != -1) {
      swift_once();
    }
    objc_msgSend(v61, sel_setTextColor_, static Colors.ParticipantViews.subtitleLabel);
  }
  uint64_t v62 = *(void **)&v28[v80];
  uint64_t v63 = *(void **)&v28[v77];
  uint64_t v64 = *(void **)&v28[v42];
  uint64_t v65 = *(void **)&v28[v44];
  uint64_t v66 = *(void **)&v28[v78];
  uint64_t v67 = *(void **)&v25[v26];
  type metadata accessor for ParticipantMonogramViewLayout();
  swift_allocObject();
  id v68 = v62;
  id v69 = v63;
  id v70 = v64;
  id v71 = v65;
  id v72 = v66;
  id v73 = v67;
  OUTLINED_FUNCTION_5_91();
  uint64_t v74 = ParticipantMonogramViewLayout.init(audioVisualizer:contactView:titleView:subtitleView:glowView:ringButton:)();

  uint64_t v75 = &v47[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_participantMonogramViewLayout];
  swift_beginAccess();
  *(void *)uint64_t v75 = v74;
  swift_release();
  return v47;
}

id ParticipantMonogramView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ParticipantMonogramView.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer;
  type metadata accessor for ParticipantViewLabelContainerView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius] = 0;
  OUTLINED_FUNCTION_8_57(OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_participantMonogramViewLayout] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id ParticipantMonogramView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantMonogramView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer;
  type metadata accessor for ParticipantViewLabelContainerView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius] = 0;
  OUTLINED_FUNCTION_8_57(OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_participantMonogramViewLayout] = 0;

  OUTLINED_FUNCTION_4_86();
  __break(1u);
}

id ParticipantMonogramView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantMonogramView.init(frame:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer;
  type metadata accessor for ParticipantViewLabelContainerView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_customCornerRadius] = 0;
  OUTLINED_FUNCTION_8_57(OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_participantMonogramViewLayout] = 0;

  OUTLINED_FUNCTION_4_86();
  __break(1u);
}

Swift::Void __swiftcall ParticipantMonogramView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  ParticipantMonogramView._layout()();
}

uint64_t ParticipantMonogramView._layout()()
{
  objc_msgSend(v0, sel_bounds);
  uint64_t result = CGRectIsInfinite(v8);
  if ((result & 1) == 0)
  {
    objc_msgSend(v0, sel_bounds);
    uint64_t result = CGRectIsEmpty(v9);
    if ((result & 1) == 0)
    {
      objc_msgSend(v0, sel_bounds);
      CGFloat v3 = v2;
      CGFloat v5 = v4;
      objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowClippingView], sel_setFrame_, 0.0, 0.0);
      uint64_t v6 = &v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_participantMonogramViewLayout];
      uint64_t result = swift_beginAccess();
      if (*(void *)v6)
      {
        id v7 = &v0[OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_isInRoster];
        swift_beginAccess();
        LOBYTE(v7) = *v7;
        swift_retain();
        v10.origin.double x = 0.0;
        v10.origin.double y = 0.0;
        v10.size.double width = v3;
        v10.size.double height = v5;
        ParticipantMonogramViewLayout.layout(in:inRoster:)(v10, (Swift::Bool)v7);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t ParticipantMonogramView.didTapRingButton()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ParticipantMonogramView.configure(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = *(void *)(a1 + 56);
  int v31 = *(unsigned __int8 *)(a1 + 64);
  int v32 = *(unsigned __int8 *)(a1 + 65);
  uint64_t v27 = *(void *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v26 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 80);
  unint64_t v34 = *(void *)(a1 + 96);
  CGRect v8 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_glowView);
  if (!v8) {
    goto LABEL_8;
  }
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    CGRect v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    CGRect v9 = *(void **)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_4:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v7 & 0xC000000000000001) == 0, v7);
      if ((v7 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x1C87744F0](0, v7);
      }
      else {
        id v10 = *(id *)(v7 + 32);
      }
      CGRect v9 = v10;
    }
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setTintColor_, v9);

LABEL_8:
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_audioVisualizationView);
  uint64_t v12 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x90);
  uint64_t v13 = swift_bridgeObjectRetain();
  v12(v13);
  uint64_t v14 = swift_bridgeObjectRetain();
  GradientView.colors.setter(v14);
  v35[0] = (uint64_t)v3;
  v35[1] = v30;
  v35[2] = v4;
  v35[3] = v29;
  v35[4] = v5;
  v35[5] = v28;
  v35[6] = v6;
  id v15 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ParticipantContactView.contactDetails.setter(v35);
  if (v31)
  {
    id v16 = objc_msgSend(v11, sel_setHidden_, 0);
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v11) + 0xA0))(v16);
  }
  else
  {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v11) + 0xA8))();
    objc_msgSend(v11, sel_setHidden_, 1);
  }
  id v17 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_ringButton);
  if (v32)
  {
    objc_msgSend(v17, sel_setHidden_, 0);
    id v18 = *(char **)(v2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer);
    ParticipantViewLabelContainerView.isCentered.setter(0);
    id v19 = *(char **)(v2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer);
    char v20 = 0;
  }
  else
  {
    objc_msgSend(v17, sel_setHidden_, 1);
    id v18 = *(char **)(v2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_titleLabelContainer);
    ParticipantViewLabelContainerView.isCentered.setter(1);
    id v19 = *(char **)(v2 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_subtitleLabelContainer);
    char v20 = 1;
  }
  ParticipantViewLabelContainerView.isCentered.setter(v20);
  if (v33)
  {
    id v21 = *(id *)&v18[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label];
    outlined bridged method (mbgnn) of @objc UILabel.text.setter(v27, v33, v21);

    objc_msgSend(v18, sel_setHidden_, 0);
    if (v34)
    {
      id v22 = *(id *)&v19[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label];
      outlined bridged method (mbgnn) of @objc UILabel.text.setter(v26, v34, v22);

      uint64_t v23 = HIBYTE(v34) & 0xF;
      if ((v34 & 0x2000000000000000) == 0) {
        uint64_t v23 = v26 & 0xFFFFFFFFFFFFLL;
      }
      BOOL v24 = v23 == 0;
    }
    else
    {
      BOOL v24 = 1;
    }
  }
  else
  {
    BOOL v24 = 1;
    objc_msgSend(v18, sel_setHidden_, 1);
  }
  objc_msgSend(v19, sel_setHidden_, v24);
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label], sel_sizeToFit);
  objc_msgSend(*(id *)&v19[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label], sel_sizeToFit);
  return ParticipantMonogramView._layout()();
}

Swift::Void __swiftcall ParticipantMonogramView.reset()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                          + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_audioVisualizationView))
                    + 0xA8))();
}

Swift::Void __swiftcall ParticipantMonogramView.updateAudioVisualization(with:)(Swift::Float with)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit23ParticipantMonogramView_audioVisualizationView);
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0) {
    (*(void (**)(float))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78))(with);
  }
}

id ParticipantMonogramView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Int ParticipantMonogramView.ViewModel.hashValue.getter()
{
  OUTLINED_FUNCTION_0_88();
  Hasher.init(_seed:)();
  ParticipantMonogramView.ViewModel.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t ParticipantMonogramView.ViewModel.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void *)(v1 + 56);
  Swift::UInt8 v10 = *(unsigned char *)(v1 + 64);
  Swift::UInt8 v11 = *(unsigned char *)(v1 + 65);
  uint64_t v12 = *(void *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 96);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_4;
  }
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = String.count.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(v6 - 1) < 2) {
    Swift::UInt8 v7 = 1;
  }
  else {
LABEL_4:
  }
    Swift::UInt8 v7 = 0;
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  if (v12)
  {
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (v9)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
LABEL_10:
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantMonogramView.ViewModel()
{
  OUTLINED_FUNCTION_0_88();
  Hasher.init(_seed:)();
  ParticipantMonogramView.ViewModel.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_9_62(a1, a2);
  if (v2)
  {
    uint64_t v4 = v3 + 64;
    do
    {
      Swift::UInt v5 = *(unsigned __int8 *)(v4 - 16);
      uint64_t v6 = *(void *)(v4 - 8);
      swift_bridgeObjectRetain();
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v6);
      String.hash(into:)();
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6 == 0);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v6);
      v4 += 40;
      --v2;
    }
    while (v2);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::UInt *v4;
  Swift::UInt v5;

  OUTLINED_FUNCTION_9_62(a1, a2);
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(v3 + 40);
    do
    {
      Swift::UInt v5 = *v4;
      Hasher._combine(_:)(*(v4 - 1));
      Hasher._combine(_:)(v5);
      v4 += 2;
      --v2;
    }
    while (v2);
  }
}

void specialized Array<A>.hash(into:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::UInt v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  Hasher._combine(_:)(v4);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x1C87744F0](i, a2);
      }
      else {
        id v7 = *(id *)(a2 + 8 * i + 32);
      }
      CGRect v8 = v7;
      NSObject.hash(into:)();
    }
  }
}

unint64_t lazy protocol witness table accessor for type ParticipantMonogramView.ViewModel and conformance ParticipantMonogramView.ViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantMonogramView.ViewModel and conformance ParticipantMonogramView.ViewModel;
  if (!lazy protocol witness table cache variable for type ParticipantMonogramView.ViewModel and conformance ParticipantMonogramView.ViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantMonogramView.ViewModel and conformance ParticipantMonogramView.ViewModel);
  }
  return result;
}

id sub_1C33240B0(char *a1)
{
  return ParticipantMonogramView.isInRoster.setter(*a1);
}

id sub_1C33240DC(double *a1)
{
  return ParticipantMonogramView.customCornerRadius.setter(*a1);
}

uint64_t dispatch thunk of ParticipantMonogramViewDelegate.participantViewDidTapRing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for ParticipantMonogramView()
{
  return self;
}

uint64_t method lookup function for ParticipantMonogramView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantMonogramView);
}

uint64_t dispatch thunk of ParticipantMonogramView.__allocating_init(colorStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t destroy for ParticipantMonogramView.ViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ParticipantMonogramView.ViewModel(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  uint64_t v9 = *(void *)(a2 + 80);
  id v10 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v9;
    uint64_t v11 = *(void *)(a2 + 88);
    uint64_t v12 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for ParticipantMonogramView.ViewModel(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  uint64_t v7 = (_OWORD *)(a1 + 72);
  uint64_t v8 = (_OWORD *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v9)
    {
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Conversation?(a1 + 72, &demangling cache variable for type metadata for (title: String, subtitle: String?));
      long long v10 = *(_OWORD *)(a2 + 88);
      _OWORD *v7 = *v8;
      *(_OWORD *)(a1 + 88) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 88);
    _OWORD *v7 = *v8;
    *(_OWORD *)(a1 + 88) = v11;
  }
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for ParticipantMonogramView.ViewModel(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  if (!*(void *)(a1 + 80)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 80);
  if (!v8)
  {
    outlined destroy of Conversation?(a1 + 72, &demangling cache variable for type metadata for (title: String, subtitle: String?));
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    return a1;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantMonogramView.ViewModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantMonogramView.ViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantMonogramView.ViewModel()
{
  return &type metadata for ParticipantMonogramView.ViewModel;
}

CABasicAnimation __swiftcall CABasicAnimation.animationCopy()()
{
  objc_msgSend(v0, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CABasicAnimation();
  if (swift_dynamicCast())
  {
    objc_msgSend(v4, sel_setDelegate_, 0);
    unint64_t v3 = (objc_class *)v4;
  }
  else
  {
    unint64_t v3 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result.super.super._attr = v1;
  result.super.super.super.Class isa = v3;
  result.super.super._flags = v2;
  return result;
}

unint64_t type metadata accessor for CABasicAnimation()
{
  unint64_t result = lazy cache variable for type metadata for CABasicAnimation;
  if (!lazy cache variable for type metadata for CABasicAnimation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CABasicAnimation);
  }
  return result;
}

uint64_t PreCallStatusViewModel.statusView.getter()
{
  swift_beginAccess();
  return MEMORY[0x1C8776240](v0 + 16);
}

uint64_t PreCallStatusViewModel.statusView.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PreCallStatusViewModel.statusView.modify(void *a1))(uint64_t a1, char a2)
{
  unint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return CancelConfirmationViewModel.delegate.modify;
}

uint64_t PreCallStatusViewModel.__allocating_init(preCallContextProvider:)(uint64_t a1)
{
  return PreCallStatusViewModel.__allocating_init(preCallContextProvider:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized PreCallStatusViewModel.__allocating_init(preCallContextProvider:));
}

uint64_t PreCallStatusViewModel.init(preCallContextProvider:)(uint64_t a1)
{
  return PreCallStatusViewModel.__allocating_init(preCallContextProvider:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized PreCallStatusViewModel.init(preCallContextProvider:));
}

uint64_t PreCallStatusViewModel.__allocating_init(preCallContextProvider:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  (*(void (**)(uint64_t))(v9 + 16))(v3);
  uint64_t v10 = a2(v3, v2, v6, v7);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

Swift::Void __swiftcall PreCallStatusViewModel.startObservation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<PreCallControlsContext?, Never>, NSRunLoop>);
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v8);
  v13[1] = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  v13[0] = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v10 - 8);
  OUTLINED_FUNCTION_64();
  uint64_t v11 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PreCallControlsContext?, Never>);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<PreCallControlsContext?, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PreCallControlsContext?, Never>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v8);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<PreCallControlsContext?, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<PreCallControlsContext?, Never>, NSRunLoop>);
  uint64_t v12 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  v1[9] = v12;
  swift_release();
}

void closure #1 in PreCallStatusViewModel.startObservation()(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(unsigned __int8 *)(a1 + 8);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (v2 == 255)
    {
      PreCallStatusViewModel.clearStatus()();
      swift_release();
    }
    else
    {
      outlined copy of PreCallControlsContext(v1);
      if (one-time initialization token for preCall != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.preCall);
      outlined copy of PreCallControlsContext(v1);
      outlined copy of PreCallControlsContext(v1);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v7 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136315138;
        uint64_t v10 = v7;
        uint64_t v11 = (uint64_t)v1;
        char v12 = v2 & 1;
        outlined copy of PreCallControlsContext(v1);
        uint64_t v8 = String.init<A>(reflecting:)();
        uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PreCallControlsContext?(v1, v2);
        outlined consume of PreCallControlsContext?(v1, v2);
        _os_log_impl(&dword_1C2F90000, v4, v5, "PreCallStatusViewModel: preCallContext: %s", v6, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v7, -1, -1);
        MEMORY[0x1C87760E0](v6, -1, -1);
      }
      else
      {
        outlined consume of PreCallControlsContext?(v1, v2);
        outlined consume of PreCallControlsContext?(v1, v2);
      }

      uint64_t v11 = (uint64_t)v1;
      char v12 = v2 & 1;
      PreCallStatusViewModel.updateStatus(preCallContext:)();
      swift_release();
      outlined consume of PreCallControlsContext?(v1, v2);
    }
  }
}

Swift::Void __swiftcall PreCallStatusViewModel.clearStatus()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for preCall != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.preCall);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "PreCallStatusViewModel: clear status", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  swift_beginAccess();
  if (MEMORY[0x1C8776240](v1 + 16))
  {
    uint64_t v6 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(1, ObjectType, v6);
    swift_unknownObjectRelease();
  }
}

void PreCallStatusViewModel.updateStatus(preCallContext:)()
{
  uint64_t v1 = (void *)PreCallControlsContext.labels.getter((uint64_t)&v15);
  uint64_t v14 = v2;
  uint64_t v4 = v15;
  uint64_t v3 = v16;
  uint64_t v6 = v17;
  uint64_t v5 = v18;
  char v7 = v19;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v0 + 16))
  {
    uint64_t v8 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = v4;
    uint64_t v16 = v3;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    char v19 = v7;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 40))(&v15, ObjectType, v8);
    swift_unknownObjectRelease();
  }
  if (MEMORY[0x1C8776240](v0 + 16))
  {
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v11 = swift_getObjectType();
    (*(void (**)(void *, void *, uint64_t, uint64_t))(v10 + 32))(v1, v14, v11, v10);
    swift_unknownObjectRelease();
  }
  if (MEMORY[0x1C8776240](v0 + 16))
  {
    uint64_t v12 = *(void *)(v0 + 24);
    uint64_t v13 = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v12 + 16))(0, v13, v12);
    OUTLINED_FUNCTION_4_87();
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_4_87();
  }
}

uint64_t PreCallControlsContext.labels.getter(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(unsigned char *)(v1 + 8))
  {
    id v4 = objc_msgSend(v3, sel_remoteMembers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = specialized Set.count.getter(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v58 = a1;
      uint64_t v59 = (uint64_t)v3;
      unint64_t v64 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t result = __CocoaSet.startIndex.getter();
        char v10 = 1;
      }
      else
      {
        uint64_t result = specialized _NativeSet.startIndex.getter(v5);
        char v10 = v18 & 1;
      }
      uint64_t v61 = result;
      uint64_t v62 = v9;
      char v63 = v10;
      if ((v7 & 0x8000000000000000) == 0)
      {
        do
        {
          uint64_t v19 = OUTLINED_FUNCTION_1_111();
          specialized Set.subscript.getter(v19, v20, v21, v22);
          BOOL v24 = v23;
          id v25 = objc_msgSend(v23, sel_handle);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_7_80();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t result = specialized ContiguousArray._endMutation()();
          if ((v5 & 0xC000000000000001) != 0)
          {
            if ((v63 & 1) == 0) {
              goto LABEL_32;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationMember>.Index);
            Set.Index._asCocoa.modify();
            uint64_t v30 = OUTLINED_FUNCTION_6_84();
            uint64_t v38 = OUTLINED_FUNCTION_5_92(v30, v31, v32, v33, v34, v35, v36, v37, v58, v59, v60);
            ((void (*)(char *))v24)(v38);
          }
          else
          {
            uint64_t v26 = OUTLINED_FUNCTION_1_111();
            specialized _NativeSet.index(after:)(v26, v27, v28, v29);
            OUTLINED_FUNCTION_2_100();
          }
          --v7;
        }
        while (v7);
LABEL_28:
        outlined consume of Set<TUHandle>.Index._Variant(v61, v62, v63);
        unint64_t v17 = v64;
        swift_bridgeObjectRelease();
        a1 = v58;
        uint64_t v3 = (void *)v59;
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_31;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    unint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_29:
    uint64_t v57 = PreCallControlsContext.getLabel(from:)(a1, v17);
    outlined consume of PreCallControlsContext(v3);
    swift_bridgeObjectRelease();
    return v57;
  }
  id v11 = objc_msgSend(v3, sel_handles);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = specialized Set.count.getter(v12);
  if (!v13) {
    goto LABEL_8;
  }
  uint64_t v14 = v13;
  uint64_t v58 = a1;
  uint64_t v59 = (uint64_t)v3;
  unint64_t v64 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v16 = 1;
  }
  else
  {
    uint64_t result = specialized _NativeSet.startIndex.getter(v12);
    char v16 = v39 & 1;
  }
  uint64_t v61 = result;
  uint64_t v62 = v15;
  char v63 = v16;
  if ((v14 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v40 = OUTLINED_FUNCTION_1_111();
      specialized Set.subscript.getter(v40, v41, v42, v43);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_7_80();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v12 & 0xC000000000000001) != 0)
      {
        if ((v63 & 1) == 0) {
          goto LABEL_33;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
        Set.Index._asCocoa.modify();
        uint64_t v48 = OUTLINED_FUNCTION_6_84();
        uint64_t v56 = OUTLINED_FUNCTION_5_92(v48, v49, v50, v51, v52, v53, v54, v55, v58, v59, v60);
        ((void (*)(char *))v3)(v56);
      }
      else
      {
        uint64_t v44 = OUTLINED_FUNCTION_1_111();
        specialized _NativeSet.index(after:)(v44, v45, v46, v47);
        OUTLINED_FUNCTION_2_100();
      }
      --v14;
    }
    while (v14);
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t PreCallStatusViewModel.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return v0;
}

uint64_t PreCallStatusViewModel.__deallocating_deinit()
{
  PreCallStatusViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t PreCallControlsContext.getLabel(from:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_msgSend(self, sel_defaultSettings);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB40]), sel_initWithSettings_, v4);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUContactsDataProviderFetchRequest);
  uint64_t v6 = swift_bridgeObjectRetain();
  id v7 = TUContactsDataProviderFetchRequest.__allocating_init(handles:isConversation:)(v6, 1);
  id v8 = objc_msgSend(self, sel_sharedInstance);
  id v9 = objc_msgSend(v8, sel_contactStore);

  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB00]), sel_initWithContactsDataSource_, v9);
  id v11 = objc_msgSend(v10, sel_executeFetchRequest_, v7);

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v12)
  {
LABEL_20:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setContacts_, isa);

    id v33 = objc_msgSend(v11, sel_localizedName);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)a1 = objc_msgSend(v5, sel_view);
    *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x4052000000000000uLL);
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v37._uint64_t countAndFlagsBits = v34;
    v37._object = v36;
    Class v38 = NSMutableAttributedString.__allocating_init(string:)(v37).super.super.isa;
    id v39 = objc_msgSend(self, sel_conversationKit);
    v60._object = (void *)0xE000000000000000;
    v40._object = (void *)0x80000001C37A8CF0;
    v40._uint64_t countAndFlagsBits = 0xD000000000000014;
    v41.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v41.value._object = (void *)0xEF74694B6E6F6974;
    v42._uint64_t countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v60._uint64_t countAndFlagsBits = 0;
    Swift::String v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v60);

    NSMutableAttributedString.__allocating_init(string:)(v43);
    return (uint64_t)v38;
  }
  uint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v12 & 0x8000000000000000) == 0)
  {
    id v44 = v11;
    uint64_t v45 = a1;
    id v46 = v7;
    id v47 = v5;
    uint64_t v14 = 0;
    unint64_t v48 = a2 & 0xC000000000000001;
    uint64_t v49 = v12;
    unint64_t v50 = a2;
    do
    {
      if (v48) {
        id v15 = (id)MEMORY[0x1C87744F0](v14, a2);
      }
      else {
        id v15 = *(id *)(a2 + 8 * v14 + 32);
      }
      uint64_t v16 = one-time initialization token for faceTime;
      id v17 = v15;
      if (v16 != -1) {
        swift_once();
      }
      swift_retain();
      id v55 = v17;
      ParticipantContactDetailsCache.contactDetails(for:nickname:)();
      char v18 = v56;
      uint64_t v53 = v58;
      uint64_t v51 = type metadata accessor for PersonNameComponents();
      uint64_t v52 = &v44;
      uint64_t v19 = *(void *)(v51 - 8);
      MEMORY[0x1F4188790](v51);
      char v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v22 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PersonNameComponents.init()();
      uint64_t v54 = v18;
      if (v18)
      {
        id v23 = objc_msgSend(v22, sel_givenName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        PersonNameComponents.givenName.setter();
        id v24 = objc_msgSend(v22, sel_familyName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        PersonNameComponents.givenName.setter();
      }
      PersonNameComponents.familyName.setter();
      if (one-time initialization token for initials != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v25 = (id)static NSPersonNameComponentsFormatter.initials;
      Class v26 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v27 = objc_msgSend(v25, sel_stringFromPersonNameComponents_, v26);

      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v51);
      uint64_t v56 = (void *)v28;
      uint64_t v57 = v30;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.localizedUppercase.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      id v31 = v55;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v54) {
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v31);
      }

      ++v14;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a2 = v50;
    }
    while (v49 != v14);
    id v7 = v46;
    id v5 = v47;
    a1 = v45;
    id v11 = v44;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

id TUContactsDataProviderFetchRequest.__allocating_init(handles:isConversation:)(uint64_t a1, char a2)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithHandles_isConversation_, isa, a2 & 1);

  return v5;
}

void *specialized PreCallStatusViewModel.__allocating_init(preCallContextProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  id v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  id v11 = specialized PreCallStatusViewModel.init(preCallContextProvider:)((uint64_t)v9, v10, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v11;
}

void *specialized PreCallStatusViewModel.init(preCallContextProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  a2[7] = a3;
  a2[8] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2 + 4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  a2[3] = 0;
  swift_unknownObjectWeakInit();
  a2[9] = 0;
  return a2;
}

uint64_t sub_1C3325E70()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PreCallStatusViewModel.startObservation()(uint64_t a1)
{
}

uint64_t type metadata accessor for PreCallStatusViewModel()
{
  return self;
}

uint64_t method lookup function for PreCallStatusViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PreCallStatusViewModel);
}

uint64_t dispatch thunk of PreCallStatusViewModel.__allocating_init(preCallContextProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void outlined consume of PreCallControlsContext?(id a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of PreCallControlsContext(a1);
  }
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = a2;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v2, v3);
  }
  else
  {
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)();
  }
}

uint64_t key path getter for VideoMessageController.state : VideoMessageController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for VideoMessageController.state : VideoMessageController()
{
  return VideoMessageController.state.setter();
}

uint64_t VideoMessageController.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1C332607C()
{
  return VideoMessageController.state.setter();
}

uint64_t VideoMessageController.state.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t key path getter for VideoMessageController.$state : VideoMessageController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x108))();
}

uint64_t VideoMessageController.$state.getter()
{
  return LinkDetailHeaderView.$invitedMemberHandles.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit22VideoMessageController__state, &demangling cache variable for type metadata for Published<VideoMessageController.State>);
}

uint64_t VideoMessageController.$state.setter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = OUTLINED_FUNCTION_18_7(v1, v7);
  v3(v2);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  uint64_t v4 = OUTLINED_FUNCTION_4_80();
  return v5(v4);
}

uint64_t key path getter for VideoMessageController.mostRecentActiveConversation : VideoMessageController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x120))();
}

uint64_t key path setter for VideoMessageController.mostRecentActiveConversation : VideoMessageController(uint64_t a1, void **a2)
{
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for Conversation?);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x128))(v4);
}

uint64_t VideoMessageController.mostRecentActiveConversation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_mostRecentActiveConversation;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of Environment<DynamicTypeSize>.Content(v3, a1, &demangling cache variable for type metadata for Conversation?);
}

uint64_t VideoMessageController.mostRecentActiveConversation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_mostRecentActiveConversation;
  OUTLINED_FUNCTION_6_1();
  outlined assign with take of Conversation?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of Conversation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conversation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*VideoMessageController.mostRecentActiveConversation.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for VideoMessageController.mostRecentLocalHandle : VideoMessageController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x138))();
  *a2 = result;
  return result;
}

uint64_t key path setter for VideoMessageController.mostRecentLocalHandle : VideoMessageController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x140);
  id v4 = *a1;
  return v3(v2);
}

void *VideoMessageController.mostRecentLocalHandle.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void VideoMessageController.mostRecentLocalHandle.setter(void *a1)
{
}

uint64_t (*VideoMessageController.mostRecentLocalHandle.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for VideoMessageController.currentVideoMessagePlayerViewModel : VideoMessageController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x150))();
  *a2 = result;
  return result;
}

uint64_t key path setter for VideoMessageController.currentVideoMessagePlayerViewModel : VideoMessageController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x158);
  id v4 = *a1;
  return v3(v2);
}

uint64_t VideoMessageController.currentVideoMessagePlayerViewModel.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Filter<Published<VideoMessageController.State>.Publisher>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  id v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))(v7);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  Publisher.filter(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  swift_allocObject();
  id v10 = (char *)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentVideoMessagePlayerViewModel;
  swift_beginAccess();
  id v11 = (void *)MEMORY[0x1C8776240](v10);
  swift_unknownObjectWeakInit();

  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Filter<Published<VideoMessageController.State>.Publisher> and conformance Publishers.Filter<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Filter<Published<VideoMessageController.State>.Publisher>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in VideoMessageController.currentVideoMessagePlayerViewModel.didset(unsigned char *a1)
{
  char v1 = 1;
  switch(*a1)
  {
    case 8:
      break;
    default:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  aBlock[4] = partial apply for closure #1 in closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset;
  aBlock[5] = a2;
  uint64_t v15 = static OS_dispatch_queue.main.getter();
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_143;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF08]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v12 = (void *)v15;
  MEMORY[0x1C8773BA0](0, v7, v11, v3);
  _Block_release(v3);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void closure #1 in closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF8))(4);
  }
}

uint64_t VideoMessageController.currentVideoMessagePlayerViewModel.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

void VideoMessageController.currentVideoMessagePlayerViewModel.setter(void *a1)
{
}

void (*VideoMessageController.currentVideoMessagePlayerViewModel.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentVideoMessagePlayerViewModel;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  v3[3] = MEMORY[0x1C8776240](v5);
  return VideoMessageController.currentVideoMessagePlayerViewModel.modify;
}

void VideoMessageController.currentVideoMessagePlayerViewModel.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    VideoMessageController.currentVideoMessagePlayerViewModel.didset();
  }
  free(v3);
}

uint64_t key path getter for VideoMessageController.isVideoSensitive : VideoMessageController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x168))();
  *a2 = result & 1;
  return result;
}

uint64_t VideoMessageController.isVideoSensitive.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t VideoMessageController.isVideoSensitive.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  unsigned char *v1 = a1;
  return result;
}

void VideoMessageController.videoMessageSendSoundPlayer.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_videoMessageSendSoundPlayer);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_videoMessageSendSoundPlayer) = a1;
}

uint64_t VideoMessageController.isInVideoMessageFlow.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 872))() & 1) == 0) {
    return 0;
  }
  unsigned __int8 v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
  if (v1 > 9u) {
    return 1;
  }
  else {
    return (0x1F8u >> v1) & 1;
  }
}

uint64_t VideoMessageController.State.isInVideoMessageFlow.getter(unsigned __int8 a1)
{
  return (a1 > 9u) | (0x1F8u >> a1) & 1;
}

uint64_t key path getter for VideoMessageController.viewStateReadyForVideoMessageRecording : VideoMessageController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for VideoMessageController.viewStateReadyForVideoMessageRecording : VideoMessageController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8))(*a1);
}

void VideoMessageController.updateState()()
{
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_ignoresStateUpdates) & 1) == 0)
  {
    unsigned __int8 v1 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t updated = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
    if (updated)
    {
      uint64_t v3 = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_latestVideoMessageSandboxURL;
      if (!*(void *)((char *)v0
                      + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_latestVideoMessageSandboxURL))
        goto LABEL_7;
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      MEMORY[0x1F4188790](v4 - 8);
      uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v7 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
      swift_beginAccess();
      outlined init with copy of Environment<DynamicTypeSize>.Content(v7, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v8 = type metadata accessor for UUID();
      LODWORD(v7) = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v8);
      uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v7 == 1)
      {
        char v9 = 9;
      }
      else
      {
LABEL_7:
        if (*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_sendingInProgress))
        {
          char v9 = 8;
        }
        else
        {
          if (!*(void *)((char *)v0 + v3)) {
            goto LABEL_11;
          }
          uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          MEMORY[0x1F4188790](v10 - 8);
          uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v13 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
          swift_beginAccess();
          outlined init with copy of Environment<DynamicTypeSize>.Content(v13, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v14 = type metadata accessor for UUID();
          LODWORD(v13) = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
          uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if (v13 != 1)
          {
            char v9 = 7;
          }
          else
          {
LABEL_11:
            uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
            MEMORY[0x1F4188790](v15 - 8);
            unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v18 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
            swift_beginAccess();
            outlined init with copy of Environment<DynamicTypeSize>.Content(v18, (uint64_t)&v30 - v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v19 = type metadata accessor for UUID();
            int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&v30 - v17, 1, v19);
            uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)&v30 - v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            if (EnumTagSinglePayload == 1
              || *((unsigned char *)v0
                 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession) == 1)
            {
              MEMORY[0x1F4188790](updated);
              outlined init with copy of Environment<DynamicTypeSize>.Content(v18, (uint64_t)&v30 - v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              int v21 = __swift_getEnumTagSinglePayload((uint64_t)&v30 - v17, 1, v19);
              uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)&v30 - v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              if (v21 == 1
                && (*((unsigned char *)v0
                    + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession) & 1) == 0)
              {
                if (*(void *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownSink))
                {
                  char v9 = 4;
                }
                else
                {
                  id v22 = *(uint64_t (**)(void))((*v1 & *v0) + 0x1A0);
                  if ((((uint64_t (*)(uint64_t))v22)(updated) & 1) != 0
                    && (VideoMessageController.callStateReadyForVideoMessageRecording.getter() & 1) != 0
                    && (uint64_t updated = (*(uint64_t (**)(void))((*v1 & *v0) + 0x2F0))(), (updated & 1) != 0))
                  {
                    char v9 = 3;
                  }
                  else
                  {
                    uint64_t updated = v22();
                    if ((updated & 1) != 0
                      && (uint64_t updated = VideoMessageController.callStateReadyForVideoMessageRecording.getter(),
                          (updated & 1) != 0))
                    {
                      char v9 = 2;
                    }
                    else
                    {
                      char v9 = 1;
                    }
                  }
                }
              }
              else
              {
                char v9 = 5;
              }
            }
            else
            {
              char v9 = 6;
            }
          }
        }
      }
    }
    else
    {
      char v9 = 0;
    }
    char v23 = (*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0xF0))(updated);
    uint64_t v24 = VideoMessageController.State.rawValue.getter(v23);
    uint64_t v26 = v25;
    if (v24 == VideoMessageController.State.rawValue.getter(v9) && v26 == v27)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0) {
        VideoMessageController.state.setter();
      }
    }
  }
}

uint64_t VideoMessageController.viewStateReadyForVideoMessageRecording.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void VideoMessageController.viewStateReadyForVideoMessageRecording.setter(char a1)
{
}

uint64_t (*VideoMessageController.viewStateReadyForVideoMessageRecording.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return VideoMessageController.viewStateReadyForVideoMessageRecording.modify;
}

uint64_t key path getter for VideoMessageController.isVideoMessagingEnabled : VideoMessageController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for VideoMessageController.isVideoMessagingEnabled : VideoMessageController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1C0))(*a1);
}

uint64_t VideoMessageController.isVideoMessagingEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void VideoMessageController.isVideoMessagingEnabled.setter(char a1)
{
}

void VideoMessageController.viewStateReadyForVideoMessageRecording.setter(char a1, void *a2)
{
  uint64_t v4 = (unsigned char *)(v2 + *a2);
  OUTLINED_FUNCTION_11_0();
  *uint64_t v4 = a1;
  VideoMessageController.updateState()();
}

uint64_t (*VideoMessageController.isVideoMessagingEnabled.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return VideoMessageController.viewStateReadyForVideoMessageRecording.modify;
}

void VideoMessageController.viewStateReadyForVideoMessageRecording.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    VideoMessageController.updateState()();
  }
}

uint64_t VideoMessageController.callStateReadyForVideoMessageRecording.getter()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_callCenter), *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_callCenter + 24));
  uint64_t v1 = OUTLINED_FUNCTION_92_0();
  uint64_t v3 = v2(v1);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      uint64_t v6 = *i;
      swift_getObjectType();
      uint64_t v7 = *(unsigned int (**)(uint64_t))(v6 + 184);
      swift_unknownObjectRetain();
      uint64_t v8 = OUTLINED_FUNCTION_48_11();
      if (v7(v8) == 1 || (uint64_t v9 = OUTLINED_FUNCTION_48_11(), v7(v9) == 3))
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v10 = OUTLINED_FUNCTION_48_11();
      unsigned int v11 = v7(v10);
      swift_unknownObjectRelease();
      if (v11 == 2) {
        break;
      }
      if (!--v4)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
    }
    swift_bridgeObjectRelease_n();
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 1;
  }
}

uint64_t VideoMessageController.mediaType.getter()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_callCenter), *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_callCenter + 24));
  uint64_t v1 = OUTLINED_FUNCTION_92_0();
  uint64_t v3 = (void *)v2(v1);
  unsigned int v4 = objc_msgSend(v3, sel_isPreviewRunning);

  if (v4) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t VideoMessageController.currentRecordingUUID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
  OUTLINED_FUNCTION_6_1();
  outlined assign with copy of UUID?(a1, v3);
  swift_endAccess();
  VideoMessageController.updateState()();
  return outlined destroy of SystemUpdateNotice?(a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t key path getter for VideoMessageController.latestVideoMessageURL : VideoMessageController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x210))();
}

uint64_t key path setter for VideoMessageController.latestVideoMessageURL : VideoMessageController(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  return VideoMessageController.latestVideoMessageURL.setter((uint64_t)v4);
}

uint64_t VideoMessageController.latestVideoMessageURL.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t VideoMessageController.latestVideoMessageURL.setter(uint64_t a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, v6 - v5, &demangling cache variable for type metadata for URL?);
  id v7 = v1;
  static Published.subscript.setter();
  VideoMessageController.updateState()();
  return outlined destroy of SystemUpdateNotice?(a1, &demangling cache variable for type metadata for URL?);
}

uint64_t key path getter for VideoMessageController.$latestVideoMessageURL : VideoMessageController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x228))();
}

uint64_t key path setter for VideoMessageController.$state : VideoMessageController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(char *))
{
  __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a1);
  return a6(v10);
}

uint64_t VideoMessageController.$latestVideoMessageURL.getter()
{
  return LinkDetailHeaderView.$invitedMemberHandles.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit22VideoMessageController__latestVideoMessageURL, &demangling cache variable for type metadata for Published<URL?>);
}

uint64_t VideoMessageController.$latestVideoMessageURL.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<URL?>.Publisher);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = OUTLINED_FUNCTION_18_7(v1, v7);
  v3(v2);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<URL?>);
  Published.projectedValue.setter();
  swift_endAccess();
  uint64_t v4 = OUTLINED_FUNCTION_4_80();
  return v5(v4);
}

uint64_t VideoMessageController.latestVideoMessageSandboxURL.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_latestVideoMessageSandboxURL);
  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_URL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v3, v7, 1, v6);
  return VideoMessageController.latestVideoMessageURL.setter((uint64_t)v3);
}

void VideoMessageController.latestVideoMessageSandboxURL.setter(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_latestVideoMessageSandboxURL);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_latestVideoMessageSandboxURL) = a1;
  id v3 = a1;

  VideoMessageController.latestVideoMessageSandboxURL.didset();
}

id VideoMessageController.momentsController.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v2 = *v0;
  if (*v0)
  {
    id v3 = *v0;
LABEL_6:
    id v6 = v2;
    return v3;
  }
  id v4 = objc_msgSend(self, sel_sharedInstance);
  VideoMessageController._momentsController.setter(v4);
  id result = *v0;
  if (*v0)
  {
    id result = objc_msgSend(result, sel_addDelegate_, v1);
    if (*v0)
    {
      id v3 = *v0;
      id v2 = 0;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

void VideoMessageController._momentsController.setter(void *a1)
{
}

void VideoMessageController.ignoresStateUpdates.didset(char a1)
{
  if ((a1 & 1) != 0
    && (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_ignoresStateUpdates) & 1) == 0)
  {
    VideoMessageController.updateState()();
  }
}

void VideoMessageController.ignoresStateUpdates.setter(char a1)
{
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_ignoresStateUpdates);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_ignoresStateUpdates) = a1;
  VideoMessageController.ignoresStateUpdates.didset(v2);
}

uint64_t VideoMessageController.countdownSink.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownSink) = a1;
  swift_release();
  char v2 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownShown);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *char v2 = 1;
  return result;
}

uint64_t key path getter for VideoMessageController.countdownShown : VideoMessageController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2F0))();
  *a2 = result & 1;
  return result;
}

uint64_t VideoMessageController.countdownShown.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t VideoMessageController.countdownShown.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  unsigned char *v1 = a1;
  return result;
}

void VideoMessageController.__allocating_init(callCenter:notificationCenter:)()
{
  id v1 = objc_allocWithZone(v0);
  VideoMessageController.init(callCenter:notificationCenter:)();
}

void VideoMessageController.init(callCenter:notificationCenter:)()
{
  OUTLINED_FUNCTION_31();
  id v50 = v3;
  uint64_t v51 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  uint64_t v8 = &v0[OBJC_IVAR____TtC15ConversationKit22VideoMessageController__state];
  char v52 = 0;
  uint64_t v9 = v0;
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v1, v4);
  uint64_t v10 = &v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_mostRecentActiveConversation];
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((void *)v10 + 4) = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_mostRecentLocalHandle] = 0;
  swift_unknownObjectWeakInit();
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_isVideoSensitive] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_videoMessageSendSoundPlayer] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_viewStateReadyForVideoMessageRecording] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_isVideoMessagingEnabled] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession] = 0;
  uint64_t v11 = (uint64_t)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID];
  uint64_t v12 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_25_1(v11, v13, v14, v12);
  uint64_t v15 = &v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController__latestVideoMessageURL];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_0();
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x1F4188790](v18);
  unint64_t v19 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = type metadata accessor for URL();
  OUTLINED_FUNCTION_25_1((uint64_t)v48 - v19, v21, v22, v20);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<URL?>);
  OUTLINED_FUNCTION_4();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  uint64_t v29 = v28 - v27;
  MEMORY[0x1F4188790](v30);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v48 - v19, (uint64_t)v48 - v19, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_48_3();
  Published.init(initialValue:)();
  outlined destroy of SystemUpdateNotice?((uint64_t)v48 - v19, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v15, v29, v23);
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_latestVideoMessageSandboxURL] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController__momentsController] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_warmedMomentsController] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_sendingInProgress] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_ignoresStateUpdates] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownSink] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_subscriptions] = MEMORY[0x1E4FBC870];
  v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownShown] = 0;
  outlined init with copy of IDSLookupManager(v51, (uint64_t)&v9[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_callCenter]);

  id v31 = (objc_class *)type metadata accessor for VideoMessageController();
  v53.receiver = v9;
  v53.super_class = v31;
  objc_msgSendSuper2(&v53, sel_init);
  OUTLINED_FUNCTION_89();
  uint64_t v32 = type metadata accessor for NSNotificationCenter.Publisher();
  OUTLINED_FUNCTION_4();
  uint64_t v34 = v33;
  uint64_t v36 = *(void *)(v35 + 64);
  MEMORY[0x1F4188790](v37);
  uint64_t v49 = v9;
  uint64_t v38 = NSNotificationCenter.publisher(for:object:)();
  MEMORY[0x1F4188790](v38);
  id v39 = (char *)v48 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSNotificationCenter.publisher(for:object:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Merge<NSNotificationCenter.Publisher, NSNotificationCenter.Publisher>);
  OUTLINED_FUNCTION_4();
  v48[0] = v40;
  v48[1] = v41;
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_21();
  MEMORY[0x1F4188790](v42);
  Swift::String v43 = *(uint64_t (**)(char *, char *, uint64_t))(v34 + 16);
  uint64_t v44 = v43(v39, v39, v32);
  MEMORY[0x1F4188790](v44);
  v43(v39, v39, v32);
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1F418C1E8]);
  Publishers.Merge.init(_:_:)();
  OUTLINED_FUNCTION_20();
  uint64_t v45 = v49;
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Merge<NSNotificationCenter.Publisher, NSNotificationCenter.Publisher> and conformance Publishers.Merge<A, B>, &demangling cache variable for type metadata for Publishers.Merge<NSNotificationCenter.Publisher, NSNotificationCenter.Publisher>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v46();
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store(in:)();
  swift_endAccess();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v51);
  id v47 = *(void (**)(void))(v34 + 8);
  OUTLINED_FUNCTION_12_1();
  v47();
  OUTLINED_FUNCTION_12_1();
  v47();
  OUTLINED_FUNCTION_28();
}

void closure #1 in VideoMessageController.init(callCenter:notificationCenter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    VideoMessageController.updateState()();
  }
}

char *VideoMessageController.__allocating_init(callCenter:momentsControllerType:notificationCenter:)(uint64_t a1, uint64_t a2, void *a3)
{
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v17);
  uint64_t v6 = *(uint64_t (**)(unsigned char *, id))(v3 + 776);
  id v7 = a3;
  uint64_t v8 = (void *)v6(v17, v7);
  id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v10 = v8;
  id v11 = objc_msgSend(v9, sel_init);
  uint64_t v12 = (void **)&v10[OBJC_IVAR____TtC15ConversationKit22VideoMessageController__momentsController];
  OUTLINED_FUNCTION_11_0();
  uint64_t v13 = *v12;
  *uint64_t v12 = v11;

  swift_beginAccess();
  uint64_t v14 = *v12;
  if (*v12)
  {
    swift_endAccess();
    id v15 = v14;
    objc_msgSend(v15, sel_addDelegate_, v10);

    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_endAccess();
  }
  return v10;
}

Swift::Void __swiftcall VideoMessageController.playSentVideoMessageTone()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  v41[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v7);
  unint64_t v8 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v9 = &v40[-v8];
  id v10 = objc_msgSend(self, sel_conversationKit);
  id v11 = outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(0xD000000000000015, 0x80000001C37A8D10, 6709603, 0xE300000000000000, v10);

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  if (v11)
  {
    MEMORY[0x1F4188790](v14);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 32);
    v18(v17, &v40[-v8], v2);
    __swift_storeEnumTagSinglePayload(v17, 0, 1, v2);
    if (__swift_getEnumTagSinglePayload(v17, 1, v2) != 1)
    {
      v18((uint64_t)v9, (unsigned char *)v17, v2);
      unint64_t v19 = self;
      id v20 = objc_msgSend(v19, sel_sharedInstance);
      uint64_t v21 = *MEMORY[0x1E4F14F98];
      uint64_t v22 = *MEMORY[0x1E4F15050];
      v41[0] = 0;
      unsigned int v23 = objc_msgSend(v20, sel_setCategory_mode_options_error_, v21, v22, 2, v41);

      if (v23)
      {
        id v24 = v41[0];
        id v25 = objc_msgSend(v19, sel_sharedInstance);
        v41[0] = 0;
        unsigned int v26 = objc_msgSend(v25, sel_setActive_withOptions_error_, 1, 0, v41);

        id v28 = v41[0];
        if (v26)
        {
          MEMORY[0x1F4188790](v27);
          uint64_t v29 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v29, v9, v2);
          objc_allocWithZone(MEMORY[0x1E4F153C0]);
          id v30 = v28;
          id v31 = @nonobjc AVAudioPlayer.init(contentsOf:)((uint64_t)v29);
          VideoMessageController.videoMessageSendSoundPlayer.setter((uint64_t)v31);
          objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_videoMessageSendSoundPlayer), sel_play);
LABEL_13:
          (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v2);
          goto LABEL_14;
        }
        id v34 = v41[0];
        uint64_t v33 = (void *)_convertNSErrorToError(_:)();
      }
      else
      {
        id v32 = v41[0];
        uint64_t v33 = (void *)_convertNSErrorToError(_:)();
      }
      swift_willThrow();
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1C3769620;
      v41[0] = v33;
      id v36 = v33;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v37 = String.init<A>(reflecting:)();
      uint64_t v39 = v38;
      *(void *)(v35 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v35 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v35 + 32) = v37;
      *(void *)(v35 + 40) = v39;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      goto LABEL_13;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v16 - v15, 1, 1, v2);
  }
  outlined destroy of SystemUpdateNotice?(v17, &demangling cache variable for type metadata for URL?);
LABEL_14:
  OUTLINED_FUNCTION_28();
}

id VideoMessageController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VideoMessageController.init()()
{
}

id VideoMessageController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VideoMessageController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL static VideoMessageController.UnrecoverableErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void VideoMessageController.UnrecoverableErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int VideoMessageController.UnrecoverableErrors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance VideoMessageController.UnrecoverableErrors(char *a1, char *a2)
{
  return static VideoMessageController.UnrecoverableErrors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoMessageController.UnrecoverableErrors()
{
  return VideoMessageController.UnrecoverableErrors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance VideoMessageController.UnrecoverableErrors(uint64_t a1)
{
  VideoMessageController.UnrecoverableErrors.hash(into:)(a1, *v1);
}

uint64_t static VideoMessageController.VideoMessageError.== infix(_:_:)()
{
  return 1;
}

void VideoMessageController.VideoMessageError.hash(into:)()
{
  Swift::UInt v0 = OUTLINED_FUNCTION_89();
  Hasher._combine(_:)(v0);
}

Swift::Int VideoMessageController.VideoMessageError.hashValue.getter()
{
  return Hasher._finalize()();
}

void VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v45 = v2;
  uint64_t v46 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v44 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v47 = v13 - v12;
  uint64_t v14 = OUTLINED_FUNCTION_20();
  *(void *)(v14 + 16) = v9;
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.videoMessaging);
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  v43[3] = v14 + 16;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_37();
    *(_DWORD *)uint64_t v18 = 134217984;
    uint64_t v1 = (uint64_t)(v18 + 4);
    OUTLINED_FUNCTION_2();
    uint64_t v48 = *(void *)(v14 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2F90000, v16, v17, "Starting countdown %ld", v18, 0xCu);
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTimer);
  id v19 = objc_msgSend(self, sel_currentRunLoop);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v21 = OUTLINED_FUNCTION_8(v20);
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_118();
  uint64_t v22 = type metadata accessor for NSRunLoop.SchedulerOptions();
  OUTLINED_FUNCTION_25_1(v1, v23, v24, v22);
  uint64_t v25 = static NSTimer.publish(every:tolerance:on:in:options:)();

  outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v48 = v25;
  type metadata accessor for NSTimer.TimerPublisher();
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, MEMORY[0x1F418C228]);
  uint64_t v26 = ConnectablePublisher.autoconnect()();
  v43[2] = v26;
  swift_release();
  v43[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Autoconnect<NSTimer.TimerPublisher>>);
  v43[1] = v43;
  OUTLINED_FUNCTION_4();
  uint64_t v28 = v27;
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_118();
  uint64_t v48 = v26;
  id v30 = (void *)swift_allocObject();
  v30[2] = v14;
  v30[3] = v6;
  void v30[4] = v4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  uint64_t v31 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  id v32 = (void *)swift_allocObject();
  uint64_t v33 = v45;
  v32[2] = v14;
  v32[3] = v33;
  v32[4] = v44;
  id v32[5] = v31;
  v32[6] = v6;
  v32[7] = v4;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Autoconnect<NSTimer.TimerPublisher>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Autoconnect<NSTimer.TimerPublisher>>);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v34 = v43[0];
  uint64_t v35 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v1, v34);
  VideoMessageController.countdownSink.setter(v35);
  VideoMessageController.updateState()();
  OUTLINED_FUNCTION_2();
  v33(*(void *)(v14 + 16));
  uint64_t v36 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_25_1(v47, v37, v38, v36);
  uint64_t v39 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v40 = static MainActor.shared.getter();
  uint64_t v41 = (void *)swift_allocObject();
  uint64_t v42 = MEMORY[0x1E4FBCFD8];
  id v41[2] = v40;
  v41[3] = v42;
  v41[4] = v39;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 16)) {
    return a2(0);
  }
  return result;
}

uint64_t closure #2 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t result = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    *uint64_t v10 = result;
    a3();
    uint64_t result = swift_beginAccess();
    if (*v10 <= 0)
    {
      uint64_t v13 = a5 + 16;
      swift_beginAccess();
      uint64_t v14 = MEMORY[0x1C8776240](v13);
      if (v14)
      {
        uint64_t v15 = (void *)v14;
        VideoMessageController.countdownSink.setter(0);
      }
      swift_beginAccess();
      uint64_t v16 = MEMORY[0x1C8776240](v13);
      if (v16)
      {
        os_log_type_t v17 = (void *)v16;
        VideoMessageController.updateState()();
      }
      return a6(1);
    }
  }
  return result;
}

uint64_t closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a4;
  type metadata accessor for MainActor();
  v4[15] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[16] = v6;
  v4[17] = v5;
  return MEMORY[0x1F4188298](closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:), v6, v5);
}

uint64_t closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = v0[14] + 16;
  OUTLINED_FUNCTION_2();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  v0[18] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[19] = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:);
    return VideoMessageController.prewarm()();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_6();
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 128);
    uint64_t v8 = *(void *)(v3 + 136);
    uint64_t v9 = closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:);
  }
  else
  {

    uint64_t v7 = *(void *)(v3 + 128);
    uint64_t v8 = *(void *)(v3 + 136);
    uint64_t v9 = closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:);
  }
  return MEMORY[0x1F4188298](v9, v7, v8);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v0[14];
  swift_release();

  OUTLINED_FUNCTION_2();
  uint64_t v3 = (char *)MEMORY[0x1C8776240](v2 + 16);
  if (v3
    && (uint64_t v4 = *(void *)&v3[OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownSink],
        v3,
        v4))
  {
    uint64_t v5 = (void *)(v0[14] + 16);
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v5))
    {
      uint64_t v6 = OUTLINED_FUNCTION_89();
      VideoMessageController.countdownSink.setter(v6);
    }
    uint64_t v7 = v0[14] + 16;
    OUTLINED_FUNCTION_2();
    uint64_t v8 = MEMORY[0x1C8776240](v7);
    uint64_t v9 = (void *)v0[20];
    if (v8)
    {
      uint64_t v10 = (void *)v8;
      VideoMessageController.updateState()();

      goto LABEL_10;
    }
    uint64_t v11 = (void *)v0[20];
  }
  else
  {
    uint64_t v11 = (void *)v0[20];
  }

LABEL_10:
  OUTLINED_FUNCTION_6();
  return v12();
}

uint64_t VideoMessageController.prewarm()()
{
  OUTLINED_FUNCTION_17_2();
  v1[15] = v0;
  type metadata accessor for MainActor();
  v1[16] = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  v1[17] = v3;
  v1[18] = v2;
  return MEMORY[0x1F4188298](VideoMessageController.prewarm(), v3, v2);
}

{
  uint8_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _WORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = v1[15];
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_warmedMomentsController;
  v1[19] = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_warmedMomentsController;
  if (*(unsigned char *)(v2 + v3))
  {
    swift_release();
    OUTLINED_FUNCTION_7_4();
    return v4();
  }
  else
  {
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    v1[20] = __swift_project_value_buffer(v6, (uint64_t)static Logger.videoMessaging);
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v9);
      _os_log_impl(&dword_1C2F90000, v7, v8, "Prewarming audio client", v0, 2u);
      OUTLINED_FUNCTION_3();
    }

    uint64_t v10 = VideoMessageController.momentsController.getter();
    v1[21] = v10;
    v1[2] = v1;
    v1[3] = VideoMessageController.prewarm();
    swift_continuation_init();
    v1[10] = MEMORY[0x1E4F143A8];
    OUTLINED_FUNCTION_64_4(COERCE_DOUBLE(0x40000000));
    v1[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v1[13] = &block_descriptor_2;
    v1[14] = v11;
    objc_msgSend(v10, sel_prewarmAudioClientWithCompletion_, v1 + 10);
    return MEMORY[0x1F41881E8](v1 + 2);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 176) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 144);
  uint64_t v7 = *(void *)(v6 + 136);
  if (v8) {
    uint64_t v9 = VideoMessageController.prewarm();
  }
  else {
    uint64_t v9 = VideoMessageController.prewarm();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[15];
  swift_release();

  *(unsigned char *)(v3 + v2) = 1;
  VideoMessageController.updateState()();
  OUTLINED_FUNCTION_7_4();
  return v4();
}

uint64_t VideoMessageController.prewarm()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_118_0();
  a20 = v22;
  uint64_t v26 = (void *)v22[21];
  uint64_t v25 = (void *)v22[22];
  swift_release();
  swift_willThrow();

  id v27 = v25;
  id v28 = v25;
  uint64_t v29 = (void *)Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v30))
  {
    uint64_t v31 = (void *)v22[22];
    id v32 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v33 = OUTLINED_FUNCTION_9_0();
    _DWORD *v32 = 136315138;
    a10 = v33;
    v22[10] = v31;
    id v34 = v31;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v35 = OUTLINED_FUNCTION_90_3();
    v22[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_28_27(&dword_1C2F90000, v37, v38, "Failed to prewarm audio client with error %s");
    OUTLINED_FUNCTION_52_2();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v39 = (void *)v22[22];
  }
  uint64_t v40 = (void *)v22[22];
  lazy protocol witness table accessor for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors();
  OUTLINED_FUNCTION_29();
  *uint64_t v41 = 0;
  swift_willThrow();

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_263();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14);
}

uint64_t VideoMessageController.start()()
{
  OUTLINED_FUNCTION_17_2();
  v1[20] = v0;
  type metadata accessor for MainActor();
  v1[21] = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  v1[22] = v3;
  v1[23] = v2;
  return MEMORY[0x1F4188298](VideoMessageController.start(), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 200) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 184);
  uint64_t v6 = *(void *)(v1 + 176);
  if (v0) {
    uint64_t v7 = VideoMessageController.start();
  }
  else {
    uint64_t v7 = VideoMessageController.start();
  }
  return MEMORY[0x1F4188298](v7, v6, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_55();
  uint64_t v23 = v0;
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 208) = __swift_project_value_buffer(v2, (uint64_t)static Logger.videoMessaging);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = OUTLINED_FUNCTION_92(v5);
  uint64_t v7 = *(void **)(v0 + 160);
  if (v6)
  {
    uint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v22 = OUTLINED_FUNCTION_9_0();
    *uint64_t v8 = 136315138;
    *(_DWORD *)(v0 + 280) = VideoMessageController.mediaType.getter();
    uint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v22);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_24_32(&dword_1C2F90000, v4, v11, "Starting message recording with media type %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession;
  *(void *)(v0 + 216) = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession;
  *(unsigned char *)(v12 + v13) = 1;
  VideoMessageController.updateState()();
  uint64_t v14 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_20_37(v14);
  *(void *)(v0 + 232) = v15;
  *(void *)(v0 + 248) = OUTLINED_FUNCTION_107_2(*(void *)(v16 + 64));
  os_log_type_t v17 = swift_task_alloc();
  *(void *)(v0 + 256) = v17;
  uint64_t v18 = VideoMessageController.momentsController.getter();
  *(void *)(v0 + 264) = v18;
  id v19 = VideoMessageController.mediaType.getter();
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v17;
  *(void *)(v0 + 24) = VideoMessageController.start();
  swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_64_4(COERCE_DOUBLE(0x40000000));
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSUUID?, @unowned NSError?) -> () with result type UUID;
  *(void *)(v0 + 104) = &block_descriptor_28;
  *(void *)(v0 + 112) = v20;
  objc_msgSend(v18, sel_startRecordingMessageWithMediaType_completion_, v19, v0 + 80);
  return MEMORY[0x1F41881E8](v0 + 16);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 272) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 184);
  uint64_t v7 = *(void *)(v6 + 176);
  if (v8) {
    uint64_t v9 = VideoMessageController.start();
  }
  else {
    uint64_t v9 = VideoMessageController.start();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  unint64_t v23;
  os_log_type_t type;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = v0[32];
  uint64_t v2 = (void *)v0[33];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[29];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v1, v4);

  swift_task_dealloc();
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *(void (**)(void))(v5 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v6, v3, v4);
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v9))
  {
    type = v3;
    uint64_t v11 = v0[28];
    uint64_t v10 = v0[29];
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v25 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_8(v13);
    uint64_t v14 = OUTLINED_FUNCTION_191();
    uint64_t v23 = v11;
    ((void (*)(uint64_t, uint64_t, unint64_t))v7)(v14, v6, v11);
    __swift_storeEnumTagSinglePayload(v14, 0, 1, v11);
    specialized >> prefix<A>(_:)(v14);
    OUTLINED_FUNCTION_96_2();
    outlined destroy of SystemUpdateNotice?(v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, unint64_t))(v10 + 8);
    uint64_t v16 = OUTLINED_FUNCTION_95_2();
    v15(v16, v23);
    _os_log_impl(&dword_1C2F90000, v8, type, "Successfully started message recording with UUID %s", v12, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, unint64_t))(v0[29] + 8);
    os_log_type_t v17 = OUTLINED_FUNCTION_95_2();
    ((void (*)(uint64_t))v15)(v17);
  }

  uint64_t v18 = v0[28];
  swift_task_dealloc();
  id v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_8(v19);
  OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_56_8();
  v7();
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v18);
  VideoMessageController.currentRecordingUUID.setter(v6);
  uint64_t v20 = OUTLINED_FUNCTION_69_0();
  ((void (*)(uint64_t))v15)(v20);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v21();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t VideoMessageController.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v24;
  a22 = v25;
  OUTLINED_FUNCTION_118_0();
  a20 = v23;
  OUTLINED_FUNCTION_0_20();
  id v27 = *(uint64_t (**)(void))(v26 + 240);
  char v28 = v27();
  if (VideoMessageController.State.rawValue.getter(v28) == 0xD000000000000014 && v29 == 0x80000001C3790E10) {
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_109_0();
  OUTLINED_FUNCTION_15_23();
  if (v22) {
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_97_2();
  char v30 = v27();
  BOOL v32 = VideoMessageController.State.rawValue.getter(v30) == 0x7964616572 && v31 == 0xE500000000000000;
  if (v32
    || (_stringCompareWithSmolCheck(_:_:expecting:)(),
        OUTLINED_FUNCTION_15_23(),
        OUTLINED_FUNCTION_97_2(),
        char v33 = v27(),
        VideoMessageController.State.rawValue.getter(v33) == 0xD000000000000014)
    && v34 == 0x80000001C3790E10)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v35 = *(void **)(v23 + 160);
    if (*((unsigned char *)v35 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_warmedMomentsController))
    {
      if (one-time initialization token for videoMessaging != -1)
      {
        swift_once();
        uint64_t v35 = *(void **)(v23 + 160);
      }
      uint64_t v36 = type metadata accessor for Logger();
      *(void *)(v23 + 208) = __swift_project_value_buffer(v36, (uint64_t)static Logger.videoMessaging);
      id v37 = v35;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      BOOL v40 = OUTLINED_FUNCTION_92(v39);
      uint64_t v41 = *(void **)(v23 + 160);
      if (v40)
      {
        uint64_t v42 = (_DWORD *)OUTLINED_FUNCTION_37();
        a11 = OUTLINED_FUNCTION_9_0();
        *uint64_t v42 = 136315138;
        *(_DWORD *)(v23 + 280) = VideoMessageController.mediaType.getter();
        uint64_t v43 = String.init<A>(reflecting:)();
        *(void *)(v23 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &a11);
        OUTLINED_FUNCTION_60_0();
        swift_bridgeObjectRelease();

        OUTLINED_FUNCTION_24_32(&dword_1C2F90000, v38, v45, "Starting message recording with media type %s");
        OUTLINED_FUNCTION_78_0();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
      }
      uint64_t v49 = *(void *)(v23 + 160);
      uint64_t v50 = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession;
      *(void *)(v23 + 216) = OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession;
      *(unsigned char *)(v49 + v50) = 1;
      VideoMessageController.updateState()();
      uint64_t v51 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_20_37(v51);
      *(void *)(v23 + 232) = v52;
      *(void *)(v23 + 248) = OUTLINED_FUNCTION_107_2(*(void *)(v53 + 64));
      uint64_t v54 = swift_task_alloc();
      *(void *)(v23 + 256) = v54;
      id v55 = VideoMessageController.momentsController.getter();
      *(void *)(v23 + 264) = v55;
      uint64_t v56 = VideoMessageController.mediaType.getter();
      *(void *)(v23 + 16) = v23;
      *(void *)(v23 + 56) = v54;
      *(void *)(v23 + 24) = VideoMessageController.start();
      swift_continuation_init();
      *(void *)(v23 + 80) = MEMORY[0x1E4F143A8];
      OUTLINED_FUNCTION_64_4(COERCE_DOUBLE(0x40000000));
      *(void *)(v23 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSUUID?, @unowned NSError?) -> () with result type UUID;
      *(void *)(v23 + 104) = &block_descriptor_28;
      *(void *)(v23 + 112) = v57;
      objc_msgSend(v55, sel_startRecordingMessageWithMediaType_completion_, v56, v23 + 80);
      OUTLINED_FUNCTION_263();
      return MEMORY[0x1F41881E8](v58);
    }
    else
    {
      uint64_t v46 = (void *)swift_task_alloc();
      *(void *)(v23 + 192) = v46;
      *uint64_t v46 = v23;
      v46[1] = VideoMessageController.start();
      OUTLINED_FUNCTION_263();
      return VideoMessageController.prewarm()();
    }
  }
  OUTLINED_FUNCTION_109_0();
  OUTLINED_FUNCTION_15_23();
  swift_release();
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  Swift::String v60 = *(void **)(v23 + 160);
  uint64_t v61 = type metadata accessor for Logger();
  __swift_project_value_buffer(v61, (uint64_t)static Logger.videoMessaging);
  id v62 = v60;
  char v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.error.getter();
  BOOL v65 = OUTLINED_FUNCTION_92(v64);
  uint64_t v66 = *(void **)(v23 + 160);
  if (v65)
  {
    a9 = v23 + 284;
    a10 = v23 + 120;
    uint64_t v67 = (_DWORD *)OUTLINED_FUNCTION_37();
    a11 = OUTLINED_FUNCTION_9_0();
    *uint64_t v67 = 136315138;
    OUTLINED_FUNCTION_97_2();
    *(unsigned char *)(v23 + 284) = v27();
    uint64_t v68 = String.init<A>(reflecting:)();
    *(void *)(v23 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &a11);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_24_32(&dword_1C2F90000, v63, v70, "Attempted to start video message recording in invalid state %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_263();
  return v72(v71, v72, v73, v74, v75, v76, v77, v78, a9, a10, a11, a12, a13, a14);
}

uint64_t VideoMessageController.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_38_15();
  a19 = v21;
  a20 = v22;
  OUTLINED_FUNCTION_55();
  a18 = v20;
  uint64_t v24 = (void *)v20[33];
  uint64_t v23 = (void *)v20[34];
  swift_release();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = v23;
  id v26 = v23;
  id v27 = (void *)Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_2_12(v28))
  {
    uint64_t v29 = (void *)v20[34];
    char v30 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v31 = OUTLINED_FUNCTION_9_0();
    _DWORD *v30 = 136315138;
    a9 = v31;
    v20[16] = v29;
    id v32 = v29;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v33 = OUTLINED_FUNCTION_90_3();
    v20[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &a9);
    OUTLINED_FUNCTION_27_29();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_28_27(&dword_1C2F90000, v35, v36, "Failed to start message recording with error %s");
    OUTLINED_FUNCTION_52_2();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    id v37 = (void *)v20[34];
  }
  uint64_t v38 = (void *)v20[34];
  *(unsigned char *)(v20[20] + v20[27]) = 0;
  VideoMessageController.updateState()();
  lazy protocol witness table accessor for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors();
  OUTLINED_FUNCTION_29();
  unsigned char *v39 = 1;
  swift_willThrow();

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_40();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSUUID?, @unowned NSError?) -> () with result type UUID(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, v4);
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    MEMORY[0x1F4188790](v6 - 8);
    uint64_t v8 = (char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, (uint64_t)v8);
  }
}

uint64_t VideoMessageController.pause()()
{
  OUTLINED_FUNCTION_17_2();
  *(void *)(v1 + 16) = v0;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  return MEMORY[0x1F4188298](VideoMessageController.pause(), v3, v2);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  VideoMessageController.countdownSink.setter(0);
  VideoMessageController.updateState()();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t VideoMessageController.stop()()
{
  OUTLINED_FUNCTION_17_2();
  v1[22] = v0;
  type metadata accessor for MainActor();
  v1[23] = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  v1[24] = v3;
  v1[25] = v2;
  return MEMORY[0x1F4188298](VideoMessageController.stop(), v3, v2);
}

{
  uint64_t v0;
  NSUUID *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v23;
  void (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  unsigned char v62[5];
  uint64_t v63;
  NSUUID *v64;

  os_log_type_t v64 = v1;
  uint64_t v3 = OUTLINED_FUNCTION_92_2();
  v2[4] = v3;
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[7] = OUTLINED_FUNCTION_91_1(*(void *)(v6 + 64));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_8(v7);
  v2[8] = *(void *)(v8 + 64);
  uint64_t v9 = OUTLINED_FUNCTION_81_4();
  uint64_t v10 = v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v10, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v9, 1, v3) == 1)
  {
    swift_release();
    outlined destroy of SystemUpdateNotice?(v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    swift_task_dealloc();
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_30(v11, (uint64_t)static Logger.videoMessaging);
    uint64_t v13 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_104(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v14);
      OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v15, v16, "Attempted to stop video message recording with no active recording UUID");
      OUTLINED_FUNCTION_3();
    }

LABEL_13:
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_41_1();
    __asm { BRAA            X1, X16 }
  }
  os_log_type_t v17 = OUTLINED_FUNCTION_42_16();
  v18(v17);
  swift_task_dealloc();
  OUTLINED_FUNCTION_0_20();
  uint64_t v20 = (*(uint64_t (**)(void))(v19 + 240))();
  if (VideoMessageController.State.rawValue.getter(v20) == 0x6552657669746361 && v21 == 0xEF676E6964726F63)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      OUTLINED_FUNCTION_47_11();
      v24();
      swift_release();
      swift_task_dealloc();
      goto LABEL_13;
    }
  }
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  id v27 = type metadata accessor for Logger();
  v1[31].super.Class isa = (Class)__swift_project_value_buffer(v27, (uint64_t)static Logger.videoMessaging);
  swift_task_alloc();
  OUTLINED_FUNCTION_30_25();
  MEMORY[0x6552657669746360]();
  os_log_type_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.default.getter();
  char v30 = (void (*)(uint64_t))v29;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = OUTLINED_FUNCTION_37();
    char v63 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_50_9(4.8149e-34);
    OUTLINED_FUNCTION_67_5();
    MEMORY[0x6552657669746360]();
    id v32 = OUTLINED_FUNCTION_104_1();
    unint64_t v34 = v33;
    outlined destroy of SystemUpdateNotice?(v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v63);
    OUTLINED_FUNCTION_62_5(v35, v36, v37, v38, v39, v40, v41, v42, v55, v57, v59, v2 - 1);
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_47_11();
    v43();
    OUTLINED_FUNCTION_77_3(&dword_1C2F90000, v44, v45, "Stopping message recording with UUID %s", v46, v47, v48, v49, v56, v58, v60, v61, *(int *)v62, (os_log_type_t)v62[4]);
    OUTLINED_FUNCTION_115_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v50 = OUTLINED_FUNCTION_113_0();
    v30(v50);
  }

  OUTLINED_FUNCTION_80_2();
  v1[35].super.Class isa = (Class)VideoMessageController.momentsController.getter();
  v1[36].super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v1[2].super.Class isa = (Class)v1;
  v1[3].super.Class isa = (Class)VideoMessageController.stop();
  OUTLINED_FUNCTION_53_8();
  v1[10].super.Class isa = (Class)MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_64_4(COERCE_DOUBLE(0x40000000));
  v1[12].super.Class isa = (Class)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13].super.Class isa = (Class)&block_descriptor_29;
  v1[14].super.Class isa = (Class)v51;
  OUTLINED_FUNCTION_66_6(v51, sel_endRecordingMessageWithUUID_completion_);
  OUTLINED_FUNCTION_41_1();
  return MEMORY[0x1F41881E8](v52);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 296) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 200);
  uint64_t v7 = *(void *)(v6 + 192);
  if (v8) {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))VideoMessageController.stop();
  }
  else {
    uint64_t v9 = VideoMessageController.stop();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

uint64_t VideoMessageController.stop()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_68_7();
  OUTLINED_FUNCTION_61_8();

  swift_task_alloc();
  OUTLINED_FUNCTION_56_8();
  v20();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v22))
  {
    a12 = v17[34];
    uint64_t v23 = (void (*)(void))v17[32];
    id v19 = (void (*)(uint64_t))v17[26];
    a10 = v17[27];
    unint64_t v24 = (v17[30] + 15) & 0xFFFFFFFFFFFFFFF0;
    OUTLINED_FUNCTION_37();
    a11 = OUTLINED_FUNCTION_9_0();
    a13 = a11;
    OUTLINED_FUNCTION_21_34(4.8149e-34);
    OUTLINED_FUNCTION_84_2();
    v23();
    OUTLINED_FUNCTION_34_18();
    OUTLINED_FUNCTION_96_2();
    outlined destroy of SystemUpdateNotice?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v25 = swift_task_dealloc();
    v17[20] = OUTLINED_FUNCTION_76_4(v25, v26, v27, v28);
    OUTLINED_FUNCTION_46_14();
    swift_bridgeObjectRelease();
    uint64_t v29 = OUTLINED_FUNCTION_33_23();
    v30(v29);
    OUTLINED_FUNCTION_24_32(&dword_1C2F90000, v21, v31, "Successfully stopped message recording with UUID %s");
    OUTLINED_FUNCTION_51_10();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v32 = OUTLINED_FUNCTION_44_12();
    v33(v32);
  }

  OUTLINED_FUNCTION_74_3();
  *((unsigned char *)&v21->isa + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession) = 0;
  VideoMessageController.updateState()();
  uint64_t v34 = OUTLINED_FUNCTION_69_0();
  v19(v34);
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_73();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16);
}

#error "1C332BCA8: call analysis failed (funcsize=94)"

uint64_t VideoMessageController.save()()
{
  OUTLINED_FUNCTION_17_2();
  v1[22] = v0;
  type metadata accessor for MainActor();
  v1[23] = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  v1[24] = v3;
  v1[25] = v2;
  return MEMORY[0x1F4188298](VideoMessageController.save(), v3, v2);
}

{
  uint64_t v0;
  NSUUID *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v23;
  void (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  unsigned char v62[5];
  uint64_t v63;
  NSUUID *v64;

  os_log_type_t v64 = v1;
  uint64_t v3 = OUTLINED_FUNCTION_92_2();
  v2[4] = v3;
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[7] = OUTLINED_FUNCTION_91_1(*(void *)(v6 + 64));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_8(v7);
  v2[8] = *(void *)(v8 + 64);
  uint64_t v9 = OUTLINED_FUNCTION_81_4();
  uint64_t v10 = v0 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v10, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v9, 1, v3) == 1)
  {
    swift_release();
    outlined destroy of SystemUpdateNotice?(v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    swift_task_dealloc();
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_30(v11, (uint64_t)static Logger.videoMessaging);
    uint64_t v13 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_104(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v14);
      OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v15, v16, "Attempted to save video message recording with no active recording UUID");
      OUTLINED_FUNCTION_3();
    }

LABEL_13:
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_41_1();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_101_0();
  os_log_type_t v17 = OUTLINED_FUNCTION_42_16();
  v18(v17);
  swift_task_dealloc();
  OUTLINED_FUNCTION_0_20();
  uint64_t v20 = (*(uint64_t (**)(void))(v19 + 240))();
  if ((_UNKNOWN *)VideoMessageController.State.rawValue.getter(v20) == &demangling cache variable for type metadata for UUID?
    && v21 == 0xEE006574656C706DLL)
  {
    OUTLINED_FUNCTION_98_3();
  }
  else
  {
    uint64_t v23 = OUTLINED_FUNCTION_25_34();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      OUTLINED_FUNCTION_47_11();
      v24();
      swift_release();
      swift_task_dealloc();
      goto LABEL_13;
    }
  }
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  v1[31].super.Class isa = (Class)__swift_project_value_buffer(v27, (uint64_t)static Logger.videoMessaging);
  swift_task_alloc();
  OUTLINED_FUNCTION_30_25();
  ((void (*)(void))demangling cache variable for type metadata for UUID?)();
  uint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.default.getter();
  char v30 = (void (*)(uint64_t))v29;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = OUTLINED_FUNCTION_37();
    char v63 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_50_9(4.8149e-34);
    OUTLINED_FUNCTION_67_5();
    ((void (*)(void))demangling cache variable for type metadata for UUID?)();
    uint64_t v32 = OUTLINED_FUNCTION_104_1();
    uint64_t v34 = v33;
    outlined destroy of SystemUpdateNotice?(v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v63);
    OUTLINED_FUNCTION_62_5(v35, v36, v37, v38, v39, v40, v41, v42, v55, v57, v59, v2 - 1);
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_47_11();
    v43();
    OUTLINED_FUNCTION_77_3(&dword_1C2F90000, v44, v45, "Saving message recording with UUID %s", v46, v47, v48, v49, v56, v58, v60, v61, *(int *)v62, (os_log_type_t)v62[4]);
    OUTLINED_FUNCTION_115_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v50 = OUTLINED_FUNCTION_113_0();
    v30(v50);
  }

  OUTLINED_FUNCTION_80_2();
  v1[35].super.Class isa = (Class)VideoMessageController.momentsController.getter();
  v1[36].super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v1[2].super.Class isa = (Class)v1;
  v1[3].super.Class isa = (Class)VideoMessageController.save();
  OUTLINED_FUNCTION_53_8();
  v1[10].super.Class isa = (Class)MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_64_4(COERCE_DOUBLE(0x40000000));
  v1[12].super.Class isa = (Class)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13].super.Class isa = (Class)&block_descriptor_31;
  v1[14].super.Class isa = (Class)v51;
  OUTLINED_FUNCTION_66_6(v51, sel_saveVideoMessageWithUUID_completion_);
  OUTLINED_FUNCTION_41_1();
  return MEMORY[0x1F41881E8](v52);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 296) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 200);
  uint64_t v7 = *(void *)(v6 + 192);
  if (v8) {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))VideoMessageController.save();
  }
  else {
    uint64_t v9 = VideoMessageController.save();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

uint64_t VideoMessageController.save()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_68_7();
  OUTLINED_FUNCTION_61_8();

  swift_task_alloc();
  OUTLINED_FUNCTION_56_8();
  v20();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v22))
  {
    a12 = v17[34];
    uint64_t v23 = (void (*)(void))v17[32];
    id v19 = (void (*)(uint64_t))v17[26];
    a10 = v17[27];
    unint64_t v24 = (v17[30] + 15) & 0xFFFFFFFFFFFFFFF0;
    OUTLINED_FUNCTION_37();
    a11 = OUTLINED_FUNCTION_9_0();
    a13 = a11;
    OUTLINED_FUNCTION_21_34(4.8149e-34);
    OUTLINED_FUNCTION_84_2();
    v23();
    OUTLINED_FUNCTION_34_18();
    OUTLINED_FUNCTION_96_2();
    outlined destroy of SystemUpdateNotice?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v25 = swift_task_dealloc();
    v17[20] = OUTLINED_FUNCTION_76_4(v25, v26, v27, v28);
    OUTLINED_FUNCTION_46_14();
    swift_bridgeObjectRelease();
    uint64_t v29 = OUTLINED_FUNCTION_33_23();
    v30(v29);
    OUTLINED_FUNCTION_24_32(&dword_1C2F90000, v21, v31, "Successfully saved message recording with UUID %s");
    OUTLINED_FUNCTION_51_10();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v32 = OUTLINED_FUNCTION_44_12();
    v33(v32);
  }

  OUTLINED_FUNCTION_74_3();
  *((unsigned char *)&v21->isa + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_hasActiveOrPendingRecordingSession) = 0;
  VideoMessageController.updateState()();
  uint64_t v34 = OUTLINED_FUNCTION_69_0();
  v19(v34);
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_73();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16);
}

#error "1C332C59C: call analysis failed (funcsize=94)"

uint64_t VideoMessageController.complete(sendingTo:sendingFrom:in:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  v1[13] = type metadata accessor for MainActor();
  v1[14] = static MainActor.shared.getter();
  uint64_t v6 = OUTLINED_FUNCTION_47_4();
  v1[15] = v6;
  v1[16] = v5;
  return MEMORY[0x1F4188298](VideoMessageController.complete(sendingTo:sendingFrom:in:), v6, v5);
}

{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t (*v20)(void);
  char v21;
  uint64_t v22;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int8x16_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t *v52;
  uint64_t v53;

  uint64_t v52 = v0;
  uint64_t v1 = v0[6].i64[0];
  uint64_t v2 = type metadata accessor for UUID();
  v0[8].i64[1] = v2;
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  v0[9].i64[0] = v3;
  v0[9].i64[1] = *(void *)(v5 + 64);
  uint64_t v6 = swift_task_alloc();
  v0[10].i64[0] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_8(v7);
  v0[10].i64[1] = *(void *)(v8 + 64);
  uint64_t v9 = OUTLINED_FUNCTION_81_4();
  uint64_t v10 = v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v10, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v9, 1, v2) == 1)
  {
    swift_release();
    outlined destroy of SystemUpdateNotice?(v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    swift_task_dealloc();
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_30(v11, (uint64_t)static Logger.videoMessaging);
    uint64_t v13 = static os_log_type_t.fault.getter();
    if (OUTLINED_FUNCTION_104(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v14);
      OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v15, v16, "There is no UUID to send, this should not be able to happen");
      OUTLINED_FUNCTION_3();
    }

LABEL_7:
    OUTLINED_FUNCTION_7_4();
LABEL_8:
    return v17();
  }
  OUTLINED_FUNCTION_101_0();
  uint64_t v48 = v4;
  uint64_t v50 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v9, v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_0_20();
  uint64_t v20 = *(uint64_t (**)(void))(v19 + 240);
  uint64_t v21 = v20();
  if (VideoMessageController.State.rawValue.getter(v21) == v10 && v22 == 0xEE006574656C706DLL)
  {
    OUTLINED_FUNCTION_98_3();
  }
  else
  {
    unint64_t v24 = OUTLINED_FUNCTION_25_34();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      swift_release();
      OUTLINED_FUNCTION_97_2();
      uint64_t v25 = v20();
      if (VideoMessageController.State.rawValue.getter(v25) == 0x676E69646E6573 && v26 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v28 = v4;
      }
      else
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        OUTLINED_FUNCTION_15_23();
        uint64_t v28 = v4;
        if ((v20 & 1) == 0)
        {
          if (one-time initialization token for videoMessaging != -1) {
            swift_once();
          }
          uint64_t v29 = type metadata accessor for Logger();
          char v30 = OUTLINED_FUNCTION_30(v29, (uint64_t)static Logger.videoMessaging);
          uint64_t v31 = static os_log_type_t.fault.getter();
          if (OUTLINED_FUNCTION_2_12(v31))
          {
            uint64_t v32 = (uint8_t *)OUTLINED_FUNCTION_8_0();
            *(_WORD *)uint64_t v32 = 0;
            OUTLINED_FUNCTION_3();
          }

          (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v50, v2);
          swift_task_dealloc();
          goto LABEL_7;
        }
      }
      lazy protocol witness table accessor for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError();
      OUTLINED_FUNCTION_29();
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v50, v2);
      swift_task_dealloc();
      OUTLINED_FUNCTION_6();
      goto LABEL_8;
    }
  }
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  v0[11].i64[0] = __swift_project_value_buffer(v33, (uint64_t)static Logger.videoMessaging);
  uint64_t v34 = swift_task_alloc();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[11].i64[1] = (uint64_t)v35;
  v0[12].i64[0] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v35(v34, v50, v2);
  uint64_t v36 = Logger.logObject.getter();
  uint64_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v51 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v39 = swift_task_alloc();
    v35(v39, v34, v2);
    __swift_storeEnumTagSinglePayload(v39, 0, 1, v2);
    uint64_t v40 = specialized >> prefix<A>(_:)(v39);
    uint64_t v42 = v41;
    outlined destroy of SystemUpdateNotice?(v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    v0[4].i64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v43(v34, v2);
    _os_log_impl(&dword_1C2F90000, v36, v37, "Attempting to send message with UUID %s", v38, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v43(v34, v2);
  }

  v0[12].i64[1] = (uint64_t)v43;
  uint64_t v44 = v0[6].i64[0];
  uint64_t v45 = v0[4].i64[1];
  uint64_t v49 = v0[5];
  swift_task_dealloc();
  *(unsigned char *)(v44 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_sendingInProgress) = 1;
  VideoMessageController.updateState()();
  v0[13].i64[0] = static MainActor.shared.getter();
  uint64_t v46 = swift_task_alloc();
  v0[13].i64[1] = v46;
  *(void *)(v46 + 16) = v50;
  *(int8x16_t *)(v46 + 24) = vextq_s8(v49, v49, 8uLL);
  *(void *)(v46 + 40) = v45;
  *(void *)(v46 + 48) = v44;
  uint64_t v47 = (void *)swift_task_alloc();
  v0[14].i64[0] = (uint64_t)v47;
  char *v47 = v0;
  v47[1] = VideoMessageController.complete(sendingTo:sendingFrom:in:);
  return MEMORY[0x1F4188160](v47);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  v3[29] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[15];
    uint64_t v8 = v3[16];
    uint64_t v9 = VideoMessageController.complete(sendingTo:sendingFrom:in:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v7 = v3[15];
    uint64_t v8 = v3[16];
    uint64_t v9 = VideoMessageController.complete(sendingTo:sendingFrom:in:);
  }
  return MEMORY[0x1F4188298](v9, v7, v8);
}

uint64_t VideoMessageController.complete(sendingTo:sendingFrom:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_68_7();
  os_log_type_t v17 = (void (*)(void))v16[23];
  swift_release();
  swift_task_alloc();
  OUTLINED_FUNCTION_56_8();
  v17();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v19))
  {
    a12 = (void (*)(uint64_t, uint64_t))v16[25];
    uint64_t v20 = (void (*)(void))v16[23];
    uint64_t v21 = v16[17];
    a10 = v16[18];
    unint64_t v22 = (v16[21] + 15) & 0xFFFFFFFFFFFFFFF0;
    OUTLINED_FUNCTION_37();
    a11 = OUTLINED_FUNCTION_9_0();
    a13 = a11;
    OUTLINED_FUNCTION_21_34(4.8149e-34);
    OUTLINED_FUNCTION_84_2();
    v20();
    OUTLINED_FUNCTION_34_18();
    OUTLINED_FUNCTION_96_2();
    outlined destroy of SystemUpdateNotice?(v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v23 = swift_task_dealloc();
    v16[7] = OUTLINED_FUNCTION_76_4(v23, v24, v25, v26);
    OUTLINED_FUNCTION_46_14();
    swift_bridgeObjectRelease();
    uint64_t v27 = OUTLINED_FUNCTION_95_2();
    a12(v27, v21);
    OUTLINED_FUNCTION_24_32(&dword_1C2F90000, v18, v28, "Sent message with UUID %s");
    OUTLINED_FUNCTION_51_10();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v29 = OUTLINED_FUNCTION_95_2();
    v30(v29);
  }

  uint64_t v31 = (void (*)(uint64_t))v16[25];
  uint64_t v32 = v16[17];
  swift_task_dealloc();
  uint64_t v33 = swift_task_alloc();
  __swift_storeEnumTagSinglePayload(v33, 1, 1, v32);
  VideoMessageController.currentRecordingUUID.setter(v33);
  uint64_t v34 = OUTLINED_FUNCTION_69_0();
  v31(v34);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_73();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t VideoMessageController.complete(sendingTo:sendingFrom:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_38_15();
  a19 = v21;
  a20 = v22;
  OUTLINED_FUNCTION_55();
  a18 = v20;
  uint64_t v23 = (void *)v20[29];
  swift_release();
  swift_release();
  swift_task_dealloc();
  VideoMessageController.updateState()();
  id v24 = v23;
  id v25 = v23;
  uint64_t v26 = (void *)Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v27))
  {
    uint64_t v28 = (void *)v20[29];
    uint64_t v29 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v30 = OUTLINED_FUNCTION_9_0();
    *uint64_t v29 = 136315138;
    a10 = v30;
    v20[5] = v28;
    id v31 = v28;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v32 = OUTLINED_FUNCTION_90_3();
    v20[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &a10);
    OUTLINED_FUNCTION_27_29();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v34, v35, "Failed to send video message with error: %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v36 = (void *)v20[29];
  }
  OUTLINED_FUNCTION_26_2();
  v37();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_40();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
}

void closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v24 = a3;
  id v25 = a4;
  uint64_t v23 = a2;
  uint64_t v28 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  uint64_t v15 = v14(v13, v23, v9, v12);
  __n128 v16 = MEMORY[0x1F4188790](v15);
  v14(v13, v24, v9, v16);
  objc_allocWithZone(MEMORY[0x1E4FADC10]);
  id v17 = v25;
  swift_bridgeObjectRetain();
  id v18 = @nonobjc TUMomentsMessageSendRequest.init(sessionUUID:conversationID:senderHandle:destinationHandles:)((uint64_t)v13, (uint64_t)v13, v17);
  id v19 = VideoMessageController.momentsController.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
  unint64_t v20 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  void aBlock[3] = &block_descriptor_136;
  uint64_t v22 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v19, sel_sendVideoMessageWithRequest_completion_, v18, v22);
  _Block_release(v22);
}

uint64_t closure #1 in closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return CheckedContinuation.resume(returning:)();
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a2, v4, v6);
  v11[1] = a1;
  id v9 = a1;
  CheckedContinuation.resume(throwing:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t VideoMessageController.reset()()
{
  OUTLINED_FUNCTION_17_2();
  v1[46] = v0;
  type metadata accessor for MainActor();
  v1[47] = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  v1[48] = v3;
  v1[49] = v2;
  return MEMORY[0x1F4188298](VideoMessageController.reset(), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = v0[46];
  VideoMessageController.ignoresStateUpdates.setter(1);
  uint64_t v2 = type metadata accessor for UUID();
  v0[50] = v2;
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  v0[51] = v3;
  uint64_t v5 = OUTLINED_FUNCTION_191();
  v0[52] = v5;
  __n128 v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_8(v6);
  uint64_t v7 = OUTLINED_FUNCTION_191();
  uint64_t v8 = v1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v8, v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v7, 1, v2) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    swift_task_dealloc();
    id v9 = VideoMessageController.momentsController.getter();
    v0[61] = v9;
    v0[10] = v0;
    v0[11] = VideoMessageController.reset();
    uint64_t v10 = OUTLINED_FUNCTION_53_8();
    v0[26] = MEMORY[0x1E4F143A8];
    v0[27] = 0x40000000;
    v0[28] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v0[29] = &block_descriptor_35;
    v0[30] = v10;
    objc_msgSend(v9, sel_resetVideoMessagingWithSessionUUID_completion_, 0, v0 + 26);
    OUTLINED_FUNCTION_85_4();
    return MEMORY[0x1F41881E8](v11);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v7, v2);
    swift_task_dealloc();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[53] = v13;
    *uint64_t v13 = v0;
    v13[1] = VideoMessageController.reset();
    OUTLINED_FUNCTION_85_4();
    return VideoMessageController.stop()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 432) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 392);
  __n128 v6 = *(void *)(v1 + 384);
  if (v0) {
    uint64_t v7 = VideoMessageController.reset();
  }
  else {
    uint64_t v7 = VideoMessageController.reset();
  }
  return MEMORY[0x1F4188298](v7, v6, v5);
}

{
  void *v0;
  id v1;
  Class isa;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = VideoMessageController.momentsController.getter();
  v0[55] = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v0[56] = isa;
  v0[2] = v0;
  v0[3] = VideoMessageController.reset();
  uint64_t v3 = OUTLINED_FUNCTION_53_8();
  v0[31] = MEMORY[0x1E4F143A8];
  v0[32] = 0x40000000;
  v0[33] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[34] = &block_descriptor_39_0;
  v0[35] = v3;
  objc_msgSend(v1, sel_discardVideoMessageWithUUID_completion_, isa, v0 + 31);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 456) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 392);
  uint64_t v7 = *(void *)(v6 + 384);
  if (v8) {
    id v9 = VideoMessageController.reset();
  }
  else {
    id v9 = VideoMessageController.reset();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

{
  NSUUID *v0;
  Class isa;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_49_0();
  Class isa = v0[56].super.isa;

  v0[58].super.Class isa = (Class)VideoMessageController.momentsController.getter();
  v0[59].super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v0[18].super.Class isa = (Class)v0;
  v0[19].super.Class isa = (Class)VideoMessageController.reset();
  uint64_t v2 = swift_continuation_init();
  v0[36].super.Class isa = (Class)MEMORY[0x1E4F143A8];
  v0[37].super.Class isa = (Class)0x40000000;
  v0[38].super.Class isa = (Class)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[39].super.Class isa = (Class)&block_descriptor_38;
  v0[40].super.Class isa = (Class)v2;
  OUTLINED_FUNCTION_65_4(v2, sel_resetVideoMessagingWithSessionUUID_completion_);
  return MEMORY[0x1F41881E8](&v0[18]);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 480) = *(void *)(v3 + 176);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 392);
  uint64_t v7 = *(void *)(v6 + 384);
  if (v8) {
    id v9 = VideoMessageController.reset();
  }
  else {
    id v9 = VideoMessageController.reset();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_49_0();
  uint64_t v2 = (void *)v0[58];
  uint64_t v1 = (void *)v0[59];
  uint64_t v4 = v0[51];
  uint64_t v3 = v0[52];
  uint64_t v5 = v0[50];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);

  swift_task_dealloc();
  $defer #1 () in VideoMessageController.reset()(v0[46]);
  OUTLINED_FUNCTION_7_4();
  return v6();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 496) = *(void *)(v3 + 112);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 392);
  uint64_t v7 = *(void *)(v6 + 384);
  if (v8) {
    id v9 = VideoMessageController.reset();
  }
  else {
    id v9 = VideoMessageController.reset();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void **)(v0 + 488);
  swift_release();

  $defer #1 () in VideoMessageController.reset()(*(void *)(v0 + 368));
  OUTLINED_FUNCTION_7_4();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void **)(v0 + 488);
  swift_release();
  swift_willThrow();

  $defer #1 () in VideoMessageController.reset()(*(void *)(v0 + 368));
  OUTLINED_FUNCTION_6();
  return v2();
}

{
  uint64_t v0;
  NSUUID *v1;
  Class isa;
  uint64_t v3;
  objc_class *v4;
  objc_class *v5;
  void *v6;
  os_log_type_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  NSUUID *v15;
  uint64_t v16;

  OUTLINED_FUNCTION_55();
  uint64_t v15 = v1;
  Class isa = v1[54].super.isa;
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.videoMessaging);
  uint64_t v4 = isa;
  uint64_t v5 = isa;
  __n128 v6 = (void *)Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_107(v7))
  {
    uint64_t v0 = OUTLINED_FUNCTION_37();
    uint64_t v14 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_75_1(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v8 = String.init<A>(reflecting:)();
    v1[45].super.Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v10, v11, "Discard during reset failed with error: %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  v1[58].super.Class isa = (Class)OUTLINED_FUNCTION_106_1();
  v1[59].super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v1[18].super.Class isa = (Class)v1;
  v1[19].super.Class isa = (Class)VideoMessageController.reset();
  __n128 v12 = OUTLINED_FUNCTION_53_8();
  v1[36].super.Class isa = (Class)MEMORY[0x1E4F143A8];
  v1[37].super.Class isa = (Class)0x40000000;
  v1[38].super.Class isa = (Class)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[39].super.Class isa = (Class)&block_descriptor_38;
  v1[40].super.Class isa = (Class)v12;
  OUTLINED_FUNCTION_65_4(v12, sel_resetVideoMessagingWithSessionUUID_completion_);
  return MEMORY[0x1F41881E8](v0);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = (void *)v0[59];
  uint64_t v2 = (void *)v0[58];
  swift_release();
  swift_willThrow();
  uint64_t v3 = OUTLINED_FUNCTION_71_5();
  v4(v3);

  swift_task_dealloc();
  $defer #1 () in VideoMessageController.reset()(v0[46]);
  OUTLINED_FUNCTION_6();
  return v5();
}

uint64_t VideoMessageController.reset()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, NSUUID *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_118_0();
  a20 = v22;
  Class isa = v22[56].super.isa;
  Class v26 = v22[55].super.isa;
  swift_willThrow();

  Class v27 = v22[57].super.isa;
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.videoMessaging);
  uint64_t v29 = v27;
  uint64_t v30 = v27;
  id v31 = (void *)Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_107(v32))
  {
    OUTLINED_FUNCTION_37();
    a10 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_75_1(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v33 = String.init<A>(reflecting:)();
    v22[45].super.Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &a10);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v35, v36, "Discard during reset failed with error: %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  v22[58].super.Class isa = (Class)OUTLINED_FUNCTION_106_1();
  v22[59].super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v22[18].super.Class isa = (Class)v22;
  v22[19].super.Class isa = (Class)VideoMessageController.reset();
  uint64_t v37 = OUTLINED_FUNCTION_53_8();
  v22[36].super.Class isa = (Class)MEMORY[0x1E4F143A8];
  v22[37].super.Class isa = (Class)0x40000000;
  v22[38].super.Class isa = (Class)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v22[39].super.Class isa = (Class)&block_descriptor_38;
  v22[40].super.Class isa = (Class)v37;
  OUTLINED_FUNCTION_65_4(v37, sel_resetVideoMessagingWithSessionUUID_completion_);
  OUTLINED_FUNCTION_263();
  return MEMORY[0x1F41881E8](v38);
}

void $defer #1 () in VideoMessageController.reset()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v5);
  VideoMessageController.currentRecordingUUID.setter((uint64_t)v4);
  VideoMessageController.countdownSink.setter(0);
  VideoMessageController.latestVideoMessageSandboxURL.setter(0);
  *(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_warmedMomentsController) = 0;
  VideoMessageController._momentsController.setter(0);
  __n128 v6 = (unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_countdownShown);
  swift_beginAccess();
  *__n128 v6 = 0;
  uint64_t v7 = (unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_isVideoSensitive);
  swift_beginAccess();
  unsigned char *v7 = 0;
  *(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_sendingInProgress) = 0;
  VideoMessageController.ignoresStateUpdates.setter(0);
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.videoMessaging);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C2F90000, v9, v10, "Reset message controller complete", v11, 2u);
    MEMORY[0x1C87760E0](v11, -1, -1);
  }
}

uint64_t VideoMessageController.discardRecording()()
{
  OUTLINED_FUNCTION_17_2();
  v1[20] = v0;
  type metadata accessor for MainActor();
  v1[21] = OUTLINED_FUNCTION_57();
  uint64_t v3 = OUTLINED_FUNCTION_47_4();
  v1[22] = v3;
  v1[23] = v2;
  return MEMORY[0x1F4188298](VideoMessageController.discardRecording(), v3, v2);
}

{
  NSUUID *v0;
  uint64_t v1;
  objc_class *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = type metadata accessor for UUID();
  v0[24].super.Class isa = (Class)v1;
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  v0[25].super.Class isa = v2;
  uint64_t v4 = OUTLINED_FUNCTION_191();
  v0[26].super.Class isa = (Class)v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_8(v5);
  v0[27].super.Class isa = *(Class *)(v6 + 64);
  uint64_t v7 = OUTLINED_FUNCTION_191();
  OUTLINED_FUNCTION_2();
  uint64_t v8 = OUTLINED_FUNCTION_48_3();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v8, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v7, 1, v1) == 1)
  {
    swift_release();
    outlined destroy of SystemUpdateNotice?(v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_task_dealloc();
    swift_task_dealloc();
    VideoMessageController.latestVideoMessageSandboxURL.setter(0);
    OUTLINED_FUNCTION_100_1();
    VideoMessageController.latestVideoMessageSandboxURL.setter(0);
    OUTLINED_FUNCTION_100_1();
    OUTLINED_FUNCTION_6();
    return v10();
  }
  else
  {
    (*((void (**)(uint64_t, uint64_t, uint64_t))v3 + 4))(v4, v7, v1);
    swift_task_dealloc();
    v0[28].super.Class isa = (Class)VideoMessageController.momentsController.getter();
    v0[29].super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v0[2].super.Class isa = (Class)v0;
    v0[3].super.Class isa = (Class)VideoMessageController.discardRecording();
    OUTLINED_FUNCTION_53_8();
    v0[10].super.Class isa = (Class)MEMORY[0x1E4F143A8];
    OUTLINED_FUNCTION_64_4(COERCE_DOUBLE(0x40000000));
    v0[12].super.Class isa = (Class)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v0[13].super.Class isa = (Class)&block_descriptor_40;
    v0[14].super.Class isa = (Class)v12;
    OUTLINED_FUNCTION_66_6(v12, sel_discardVideoMessageWithUUID_completion_);
    return MEMORY[0x1F41881E8](&v0[2]);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 240) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 184);
  uint64_t v7 = *(void *)(v6 + 176);
  if (v8) {
    id v9 = VideoMessageController.discardRecording();
  }
  else {
    id v9 = VideoMessageController.discardRecording();
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

void VideoMessageController.discardRecording()()
{
  OUTLINED_FUNCTION_86_0();
  uint64_t v2 = (void *)v0[28];
  uint64_t v1 = (void *)v0[29];
  uint64_t v3 = v0[24];
  swift_release();

  uint64_t v4 = swift_task_alloc();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v3);
  VideoMessageController.currentRecordingUUID.setter(v4);
  OUTLINED_FUNCTION_12_1();
  v5();
  swift_task_dealloc();
  swift_task_dealloc();
  VideoMessageController.latestVideoMessageSandboxURL.setter(0);
  OUTLINED_FUNCTION_100_1();
  VideoMessageController.latestVideoMessageSandboxURL.setter(0);
  OUTLINED_FUNCTION_100_1();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_85_4();
  __asm { BRAA            X1, X16 }
}

uint64_t VideoMessageController.discardRecording()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_118_0();
  a20 = v22;
  id v25 = (void *)v22[29];
  Class v26 = (void *)v22[28];
  swift_release();
  swift_willThrow();
  uint64_t v27 = OUTLINED_FUNCTION_71_5();
  v28(v27);

  swift_task_dealloc();
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)v22[30];
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.videoMessaging);
  id v31 = v29;
  id v32 = v29;
  uint64_t v33 = (void *)Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  BOOL v35 = OUTLINED_FUNCTION_107(v34);
  uint64_t v36 = (void *)v22[30];
  if (v35)
  {
    uint64_t v37 = (_DWORD *)OUTLINED_FUNCTION_37();
    a10 = OUTLINED_FUNCTION_9_0();
    *uint64_t v37 = 136315138;
    v22[18] = v36;
    id v38 = v36;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v39 = String.init<A>(reflecting:)();
    v22[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &a10);
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v41, v42, "Recording discard failed with error: %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v43 = v22[20];
  VideoMessageController.latestVideoMessageSandboxURL.setter(0);
  *(unsigned char *)(v43 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_warmedMomentsController) = 0;
  VideoMessageController.updateState()();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_263();
  return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
}

uint64_t VideoMessageController.State.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

ConversationKit::VideoMessageController::State_optional __swiftcall VideoMessageController.State.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VideoMessageController.State.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return (ConversationKit::VideoMessageController::State_optional)10;
  }
  else {
    return (ConversationKit::VideoMessageController::State_optional)v3;
  }
}

void *static VideoMessageController.State.allCases.getter()
{
  return &outlined read-only object #0 of static VideoMessageController.State.allCases.getter;
}

uint64_t VideoMessageController.State.rawValue.getter(char a1)
{
  uint64_t result = 0x616C696176616E75;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7964616552746F6ELL;
      break;
    case 2:
      uint64_t result = 0xD000000000000014;
      break;
    case 3:
      uint64_t result = 0x7964616572;
      break;
    case 4:
      unsigned int v3 = 1836212599;
      goto LABEL_10;
    case 5:
      uint64_t result = 0x6552657669746361;
      break;
    case 6:
      uint64_t result = 0xD000000000000013;
      break;
    case 7:
      uint64_t result = 0x6F4364726F636572;
      break;
    case 8:
      unsigned int v3 = 1684956531;
LABEL_10:
      uint64_t result = v3 | 0x676E6900000000;
      break;
    case 9:
      uint64_t result = 1953391987;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VideoMessageController.State(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoMessageController.State()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VideoMessageController.State(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoMessageController.State(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

ConversationKit::VideoMessageController::State_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VideoMessageController.State@<W0>(Swift::String *a1@<X0>, ConversationKit::VideoMessageController::State_optional *a2@<X8>)
{
  result.value = VideoMessageController.State.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VideoMessageController.State@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VideoMessageController.State.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VideoMessageController.State(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VideoMessageController.State.allCases.getter;
}

void VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)()
{
  OUTLINED_FUNCTION_31();
  Swift::String v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v0;
  void v5[3] = v2;
  v5[4] = v4;
  _OWORD v21[4] = partial apply for closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
  v21[5] = v5;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed () -> ();
  v21[3] = &block_descriptor_45;
  __n128 v6 = _Block_copy(v21);
  id v7 = v0;
  id v8 = v2;
  id v9 = v4;
  swift_release();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_63();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  v21[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF08]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C8773BA0](0, v2, v17, v6);
  _Block_release(v6);

  uint64_t v18 = OUTLINED_FUNCTION_48_3();
  v19(v18);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v2, v10);
  OUTLINED_FUNCTION_28();
}

void closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(void *a1, void *a2, void *a3)
{
  id v102 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v103 = &v97[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = &v97[-v9];
  uint64_t v11 = (uint64_t)a1 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_currentRecordingUUID;
  swift_beginAccess();
  long long v106 = (unsigned char *)v11;
  uint64_t v12 = outlined init with copy of Environment<DynamicTypeSize>.Content(v11, (uint64_t)&v97[-v9], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = &v97[-v9];
  id v14 = objc_msgSend(a2, sel_uuid);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)&v97[-v9], 0, 1, v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  long long v104 = v18;
  long long v105 = (unsigned char *)v17;
  id v19 = &v97[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)&v97[-v9], (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)&v97[-v9], v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v15);
  uint64_t v107 = a1;
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v101 = v97;
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    uint64_t v23 = &v97[-v9];
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v19, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v24 = __swift_getEnumTagSinglePayload(v20, 1, v15);
    if (v24 != 1)
    {
      uint64_t v99 = v97;
      unint64_t v100 = a2;
      uint64_t v25 = *(void *)(v15 - 8);
      MEMORY[0x1F4188790](v24);
      uint64_t v27 = &v97[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 32))(v27, v20, v15);
      lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB30]);
      int v98 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v25 + 8);
      uint64_t v29 = v27;
      a1 = v107;
      v28(v29, v15);
      outlined destroy of SystemUpdateNotice?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v28(v23, v15);
      a2 = v100;
      uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v98) {
        goto LABEL_9;
      }
LABEL_8:
      uint64_t v30 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload((uint64_t)v103, 1, 1, v30);
      type metadata accessor for MainActor();
      id v31 = v102;
      id v32 = a2;
      uint64_t v33 = static MainActor.shared.getter();
      os_log_type_t v34 = (void *)swift_allocObject();
      uint64_t v35 = MEMORY[0x1E4FBCFD8];
      v34[2] = v33;
      v34[3] = v35;
      v34[4] = v31;
      v34[5] = v32;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
      uint64_t updated = swift_release();
      goto LABEL_9;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v15 - 8) + 8))(v23, v15);
LABEL_6:
    outlined destroy of SystemUpdateNotice?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_8;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)&v97[-v9], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of SystemUpdateNotice?((uint64_t)&v97[-v9], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v20, 1, v15) != 1) {
    goto LABEL_6;
  }
  uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_9:
  uint64_t v36 = *(void **)((*MEMORY[0x1E4FBC8C8] & *a1) + 0xF0);
  uint64_t v101 = (unsigned char *)((*MEMORY[0x1E4FBC8C8] & *a1) + 240);
  id v102 = v36;
  char v37 = ((uint64_t (*)(uint64_t))v36)(updated);
  if (VideoMessageController.State.rawValue.getter(v37) == 0x6552657669746361 && v38 == 0xEF676E6964726F63) {
    goto LABEL_16;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v41 = swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_17;
  }
  char v42 = ((uint64_t (*)(uint64_t))v102)(v41);
  if (VideoMessageController.State.rawValue.getter(v42) == 0xD000000000000013 && v43 == 0x80000001C3790E50)
  {
LABEL_16:
    uint64_t v41 = swift_bridgeObjectRelease();
  }
  else
  {
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v41 = swift_bridgeObjectRelease();
    if ((v75 & 1) == 0) {
      goto LABEL_31;
    }
  }
LABEL_17:
  uint64_t v103 = v97;
  MEMORY[0x1F4188790](v41);
  unint64_t v44 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v45 = &v97[-v44];
  uint64_t v46 = outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v106, (uint64_t)&v97[-v44], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  long long v106 = v97;
  MEMORY[0x1F4188790](v46);
  uint64_t v47 = &v97[-v44];
  id v48 = objc_msgSend(a2, sel_uuid);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v49 = __swift_storeEnumTagSinglePayload((uint64_t)&v97[-v44], 0, 1, v15);
  MEMORY[0x1F4188790](v49);
  uint64_t v51 = &v97[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v52 = (uint64_t)&v51[*((int *)v105 + 12)];
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)&v97[-v44], (uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)&v97[-v44], v52, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v53 = __swift_getEnumTagSinglePayload((uint64_t)v51, 1, v15);
  if (v53 == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v97[-v44], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)&v97[-v44], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v52, 1, v15) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (!objc_msgSend(self, sel_isAnalysisEnabled)) {
        goto LABEL_29;
      }
LABEL_24:
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 872))())
      {
        id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB3920]), sel_init);
        id v61 = objc_msgSend(a2, sel_videoURL);
        id v62 = objc_msgSend(v61, sel_URL);

        uint64_t v63 = type metadata accessor for URL();
        uint64_t v64 = *(void *)(v63 - 8);
        MEMORY[0x1F4188790](v63);
        uint64_t v66 = &v97[-((v65 + 15) & 0xFFFFFFFFFFFFFFF0)];
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        URL._bridgeToObjectiveC()(v67);
        unint64_t v69 = v68;
        (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v66, v63);
        unint64_t v112 = closure #2 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
        uint64_t v113 = 0;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v109 = 1107296256;
        uint64_t v110 = thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @unowned Double) -> ();
        uint64_t v111 = &block_descriptor_116_0;
        uint64_t v70 = _Block_copy(&aBlock);
        uint64_t v71 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v72 = swift_allocObject();
        *(void *)(v72 + 16) = v71;
        *(void *)(v72 + 24) = a2;
        unint64_t v112 = partial apply for closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
        uint64_t v113 = v72;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v109 = 1107296256;
        uint64_t v110 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
        uint64_t v111 = &block_descriptor_123;
        uint64_t v73 = _Block_copy(&aBlock);
        id v74 = a2;
        swift_release();
        objc_msgSend(v60, sel_analyzeVideoFile_useBlastdoor_progressHandler_completionHandler_, v69, 0, v70, v73);
        _Block_release(v73);
        _Block_release(v70);
      }
      else
      {
LABEL_29:
        VideoMessageController.latestVideoMessageSandboxURL.setter(objc_msgSend(a2, sel_videoURL));
      }
      return;
    }
    goto LABEL_22;
  }
  MEMORY[0x1F4188790](v53);
  uint64_t v54 = &v97[-v44];
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v51, (uint64_t)&v97[-v44], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v55 = __swift_getEnumTagSinglePayload(v52, 1, v15);
  if (v55 == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v97[-v44], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)&v97[-v44], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v15 - 8) + 8))(&v97[-v44], v15);
LABEL_22:
    outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    a1 = v107;
    goto LABEL_31;
  }
  long long v105 = v97;
  uint64_t v56 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v55);
  long long v104 = v97;
  uint64_t v58 = &v97[-((v57 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v56 + 32))(v58, v52, v15);
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB30]);
  LODWORD(v100) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v59 = *(void (**)(unsigned char *, uint64_t))(v56 + 8);
  v59(v58, v15);
  outlined destroy of SystemUpdateNotice?((uint64_t)v47, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of SystemUpdateNotice?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v59(v54, v15);
  outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  a1 = v107;
  if (v100) {
    goto LABEL_24;
  }
LABEL_31:
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v76 = type metadata accessor for Logger();
  __swift_project_value_buffer(v76, (uint64_t)static Logger.videoMessaging);
  id v77 = a2;
  uint64_t v78 = a1;
  id v79 = v77;
  uint64_t v80 = v78;
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    uint64_t v107 = (void *)v84;
    uint64_t aBlock = v84;
    long long v105 = v97;
    *(_DWORD *)uint64_t v83 = 136315394;
    uint64_t v85 = *(void *)(v15 - 8);
    long long v106 = (unsigned char *)(v83 + 4);
    uint64_t v86 = v85;
    MEMORY[0x1F4188790](v84);
    uint64_t v88 = &v97[-((v87 + 15) & 0xFFFFFFFFFFFFFFF0)];
    id v89 = objc_msgSend(v79, sel_uuid);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB30]);
    uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v92 = v91;
    (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v88, v15);
    uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v93 = swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2080;
    LOBYTE(v114) = ((uint64_t (*)(uint64_t))v102)(v93);
    uint64_t v94 = String.init<A>(reflecting:)();
    uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v81, v82, "Unexpected callback for message %s while in state %s", (uint8_t *)v83, 0x16u);
    uint64_t v96 = v107;
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v96, -1, -1);
    MEMORY[0x1C87760E0](v83, -1, -1);
  }
  else
  {
  }
}

uint64_t closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  type metadata accessor for MainActor();
  v5[17] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[18] = v7;
  v5[19] = v6;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:), v7, v6);
}

uint64_t closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)()
{
  OUTLINED_FUNCTION_86_0();
  Swift::String v2 = *(void **)(v1 + 120);
  id v3 = objc_msgSend(*(id *)(v1 + 128), sel_uuid);
  OUTLINED_FUNCTION_89();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_191();
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v1 + 160) = isa;
  OUTLINED_FUNCTION_48_3();
  OUTLINED_FUNCTION_12_1();
  v5();
  swift_task_dealloc();
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
  uint64_t v6 = swift_continuation_init();
  *(void *)(v1 + 80) = MEMORY[0x1E4F143A8];
  *(void *)(v1 + 88) = 0x40000000;
  *(void *)(v1 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(void *)(v1 + 104) = &block_descriptor_130;
  *(void *)(v1 + 112) = v6;
  objc_msgSend(v2, sel_discardVideoMessageWithUUID_completion_, isa, v1 + 80);
  OUTLINED_FUNCTION_85_4();
  return MEMORY[0x1F41881E8](v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_10_56();
  *Swift::String v2 = v1;
  *Swift::String v2 = *v0;
  *(void *)(v1 + 168) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_36_17();
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v7 = *(void *)(v6 + 144);
  if (v8) {
    uint64_t v9 = closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
  }
  else {
    uint64_t v9 = closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
  }
  return MEMORY[0x1F4188298](v9, v7, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void **)(v0 + 160);
  swift_release();

  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  Swift::String v2 = type metadata accessor for Logger();
  id v3 = (void *)OUTLINED_FUNCTION_30(v2, (uint64_t)static Logger.videoMessaging);
  uint64_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_104(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v5);
    OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v6, v7, "Tossed mismatched video message");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_6();
  return v8();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void **)(v0 + 160);
  Swift::String v2 = *(void **)(v0 + 168);
  swift_release();
  swift_willThrow();

  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  id v3 = type metadata accessor for Logger();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_30(v3, (uint64_t)static Logger.videoMessaging);
  uint64_t v5 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_104(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v6);
    OUTLINED_FUNCTION_15_4(&dword_1C2F90000, v7, v8, "Tossed mismatched video message");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_6();
  return v9();
}

void closure #2 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)()
{
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.videoMessaging);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    Swift::String v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)Swift::String v2 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, oslog, v1, "Evaluation percentage: %f", v2, 0xCu);
    MEMORY[0x1C87760E0](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @unowned Double) -> ()(uint64_t a1, double a2)
{
  id v3 = *(void (**)(char *, double))(a1 + 32);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v3(v7, a2);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(int a1, id a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    id v8 = a2;
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.videoMessaging);
    id v10 = a2;
    id v11 = a2;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      LODWORD(v31) = a1;
      id v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)id v14 = 138412290;
      id v16 = a2;
      aBlock[0] = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = aBlock[0];
      LOBYTE(a1) = v31;

      _os_log_impl(&dword_1C2F90000, v12, v13, "Evaluation of video returned an error: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v15, -1, -1);
      MEMORY[0x1C87760E0](v14, -1, -1);
    }
    else
    {
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v31 = static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(unsigned char *)(v17 + 24) = a1 & 1;
  *(void *)(v17 + 32) = a4;
  aBlock[4] = partial apply for closure #1 in closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_129;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  id v19 = a4;
  swift_release();
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = (uint64_t)&v30;
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF08]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v28 = (void *)v31;
  MEMORY[0x1C8773BA0](0, v23, v27, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
}

void closure #1 in closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    id v8 = (unsigned char *)(v6 + OBJC_IVAR____TtC15ConversationKit22VideoMessageController_isVideoSensitive);
    swift_beginAccess();
    *id v8 = a2 & 1;
  }
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x1C8776240](v5);
  if (v9)
  {
    id v10 = (void *)v9;
    VideoMessageController.latestVideoMessageSandboxURL.setter(objc_msgSend(a3, sel_videoURL));
  }
}

uint64_t type metadata accessor for VideoMessageController()
{
  uint64_t result = type metadata singleton initialization cache for VideoMessageController;
  if (!type metadata singleton initialization cache for VideoMessageController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C333113C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in VideoMessageController.init(callCenter:notificationCenter:)(uint64_t a1)
{
  closure #1 in VideoMessageController.init(callCenter:notificationCenter:)(a1, v1);
}

id @nonobjc AVAudioPlayer.init(contentsOf:)(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v15 = (NSURL *)*MEMORY[0x1E4F143B8];
  URL._bridgeToObjectiveC()(v15);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = objc_msgSend(v2, sel_initWithContentsOfURL_error_, v4, &v14);

  id v7 = v14;
  if (v6)
  {
    type metadata accessor for URL();
    OUTLINED_FUNCTION_0();
    uint64_t v9 = *(void (**)(void))(v8 + 8);
    id v10 = v7;
    OUTLINED_FUNCTION_12_1();
    v9();
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    type metadata accessor for URL();
    OUTLINED_FUNCTION_0();
    (*(void (**)(uint64_t))(v12 + 8))(a1);
  }
  return v6;
}

id @nonobjc TUMomentsMessageSendRequest.init(sessionUUID:conversationID:senderHandle:destinationHandles:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v9 = UUID._bridgeToObjectiveC()().super.isa;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  Class v10 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v4, sel_initWithSessionUUID_conversationID_senderHandle_destinationHandles_, isa, v9, a3, v10);

  uint64_t v12 = type metadata accessor for UUID();
  os_log_type_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(a2, v12);
  v13(a1, v12);
  return v11;
}

id outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  Class v9 = (void *)MEMORY[0x1C87730B0](a3, a4);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a5, sel_URLForResource_withExtension_, v8, v9);

  return v10;
}

uint64_t sub_1C333146C()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C33314C4()
{
  return objectdestroy_14Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)()
{
  return closure #1 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1C33314E8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(uint64_t a1)
{
  return closure #2 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48));
}

uint64_t sub_1C3331548()
{
  return objectdestroy_14Tm(MEMORY[0x1E4FBC8F8]);
}

uint64_t objectdestroy_14Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();
  OUTLINED_FUNCTION_23_5();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *id v3 = v1;
  v3[1] = partial apply for closure #1 in CallRecordingService.startRecording(call:completion:);
  uint64_t v4 = OUTLINED_FUNCTION_18_10();
  return closure #3 in VideoMessageController.prewarm(withDuration:countdownTicker:countdownStopped:)(v4, v5, v6, v2);
}

unint64_t lazy protocol witness table accessor for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors;
  if (!lazy protocol witness table cache variable for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors;
  if (!lazy protocol witness table cache variable for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageController.UnrecoverableErrors and conformance VideoMessageController.UnrecoverableErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError;
  if (!lazy protocol witness table cache variable for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError;
  if (!lazy protocol witness table cache variable for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageController.VideoMessageError and conformance VideoMessageController.VideoMessageError);
  }
  return result;
}

void partial apply for closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:)(uint64_t a1)
{
  closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1C33316EC()
{
  OUTLINED_FUNCTION_23_5();
  return swift_deallocObject();
}

void partial apply for closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)()
{
  closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

unint64_t lazy protocol witness table accessor for type VideoMessageController.State and conformance VideoMessageController.State()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageController.State and conformance VideoMessageController.State;
  if (!lazy protocol witness table cache variable for type VideoMessageController.State and conformance VideoMessageController.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageController.State and conformance VideoMessageController.State);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VideoMessageController.State()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [VideoMessageController.State] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [VideoMessageController.State]);
}

uint64_t sub_1C3331868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for VideoMessageController.$state : VideoMessageController(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher, (uint64_t (*)(char *))VideoMessageController.$state.setter);
}

uint64_t sub_1C33318B8(char *a1)
{
  return VideoMessageController.isVideoSensitive.setter(*a1);
}

uint64_t sub_1C33318F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for VideoMessageController.$state : VideoMessageController(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<URL?>.Publisher, (uint64_t (*)(char *))VideoMessageController.$latestVideoMessageURL.setter);
}

uint64_t sub_1C333192C(char *a1)
{
  return VideoMessageController.countdownShown.setter(*a1);
}

uint64_t ObjC metadata update function for VideoMessageController()
{
  return type metadata accessor for VideoMessageController();
}

void type metadata completion function for VideoMessageController()
{
  type metadata accessor for Published<VideoMessageController.State>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<URL?>();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for VideoMessageController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VideoMessageController);
}

uint64_t dispatch thunk of VideoMessageController.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of VideoMessageController.$state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VideoMessageController.mostRecentActiveConversation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VideoMessageController.mostRecentActiveConversation.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VideoMessageController.mostRecentActiveConversation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VideoMessageController.mostRecentLocalHandle.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VideoMessageController.mostRecentLocalHandle.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of VideoMessageController.mostRecentLocalHandle.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VideoMessageController.currentVideoMessagePlayerViewModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of VideoMessageController.currentVideoMessagePlayerViewModel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VideoMessageController.currentVideoMessagePlayerViewModel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VideoMessageController.isVideoSensitive.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of VideoMessageController.isInVideoMessageFlow.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of VideoMessageController.viewStateReadyForVideoMessageRecording.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of VideoMessageController.viewStateReadyForVideoMessageRecording.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VideoMessageController.viewStateReadyForVideoMessageRecording.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of VideoMessageController.isVideoMessagingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of VideoMessageController.isVideoMessagingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of VideoMessageController.isVideoMessagingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of VideoMessageController.latestVideoMessageURL.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VideoMessageController.$latestVideoMessageURL.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VideoMessageController.countdownShown.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of VideoMessageController.__allocating_init(callCenter:notificationCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 776))();
}

uint64_t dispatch thunk of VideoMessageController.playSentVideoMessageTone()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x310))();
}

void type metadata accessor for Published<URL?>()
{
  if (!lazy cache variable for type metadata for Published<URL?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for URL?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<URL?>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for VideoMessageController.UnrecoverableErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C333216CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for VideoMessageController.UnrecoverableErrors()
{
}

unsigned char *storeEnumTagSinglePayload for VideoMessageController.VideoMessageError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C333223CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for VideoMessageController.VideoMessageError()
{
}

uint64_t getEnumTagSinglePayload for VideoMessageController.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for VideoMessageController.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C33323C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for VideoMessageController.State()
{
}

uint64_t sub_1C33323F8()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = partial apply for closure #1 in CallRecordingService.stopRecording(call:completion:);
  uint64_t v5 = OUTLINED_FUNCTION_18_10();
  return closure #1 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(v5, v6, v7, v3, v2);
}

uint64_t sub_1C33324F0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(int a1, void *a2)
{
  return closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1C3332538()
{
  swift_release();

  OUTLINED_FUNCTION_23_5();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)()
{
  closure #1 in closure #3 in closure #1 in VideoMessageController.momentsController(_:didFinishProcessingRawVideoMessage:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1C3332580()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:)(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #1 in closure #1 in VideoMessageController.complete(sendingTo:sendingFrom:in:)(a1, v4);
}

uint64_t outlined assign with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset(uint64_t a1)
{
  return closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset(a1, v1);
}

void partial apply for closure #1 in closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset()
{
  closure #1 in closure #2 in VideoMessageController.currentVideoMessagePlayerViewModel.didset(v0);
}

uint64_t OUTLINED_FUNCTION_74_3()
{
  return swift_task_dealloc();
}

id OUTLINED_FUNCTION_75_1(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v3 + 352) = v1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_76_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_80_2()
{
  *(void *)(v0 + 272) = v1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_81_4()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_91_1@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 48) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_95_2()
{
  return v0;
}

void OUTLINED_FUNCTION_100_1()
{
  *(unsigned char *)(v1 + *(void *)(v0 + 1704)) = 0;
  VideoMessageController.updateState()();
}

uint64_t OUTLINED_FUNCTION_105_1()
{
  return swift_release();
}

id OUTLINED_FUNCTION_106_1()
{
  return VideoMessageController.momentsController.getter();
}

uint64_t OUTLINED_FUNCTION_107_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 240) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_113_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_115_0()
{
  return swift_arrayDestroy();
}

void SystemUpdateNotice.style.getter(unsigned char *a1@<X8>)
{
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized BidirectionalCollection.last.getter(a1, type metadata accessor for HUDActivityManager.BannerUpdate, a2);
}

{
  return specialized BidirectionalCollection.last.getter(a1, type metadata accessor for Participant, a2);
}

{
  return specialized BidirectionalCollection.last.getter(a1, (uint64_t (*)(void))type metadata accessor for ConversationControlsAction, a2);
}

{
  return specialized BidirectionalCollection.last.getter(a1, type metadata accessor for CaptionSectioner.Caption, a2);
}

{
  return specialized BidirectionalCollection.last.getter(a1, type metadata accessor for CaptionSectioner.SpeakerSection, a2);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for IndexPath();
    OUTLINED_FUNCTION_0();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(a2, a1+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v5, v6);
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    id v10 = 1;
    id v11 = v6;
  }
  else
  {
    type metadata accessor for IndexPath();
    uint64_t v8 = OUTLINED_FUNCTION_47_0();
  }
  return __swift_storeEnumTagSinglePayload(v8, v9, v10, v11);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

{
  if (*(void *)(a1 + 16)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return *(unsigned __int8 *)(v1 + a1 + 31);
  }
  else {
    return 8;
  }
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = a2(0);
    _s15ConversationKit11ParticipantVWOcTm_9();
    uint64_t v5 = a3;
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    uint64_t v8 = v4;
  }
  else
  {
    a2(0);
    uint64_t v5 = OUTLINED_FUNCTION_47_0();
  }
  return __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
}

double specialized BidirectionalCollection.last.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    outlined init with copy of IDSLookupManager(a1 + 40 * v2 - 8, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t SessionActivationRequestNotice.fullSentence.getter()
{
  uint64_t v1 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_1_20();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  OUTLINED_FUNCTION_47();
  v3._uint64_t countAndFlagsBits = 0x100000000000001ALL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v3);
  uint64_t v4 = type metadata accessor for SessionActivationRequestNotice(0);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + *(int *)(v4 + 60)), *(void *)(v0 + *(int *)(v4 + 60) + 24));
  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_60_7();
  v15._uint64_t countAndFlagsBits = v5();
  OUTLINED_FUNCTION_195_0(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_68_8();
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_11_46();
  AttributedString.init(cnkLocalized:)();
  if (one-time initialization token for foregroundContainer != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_118_1(v8, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_62();
  uint64_t v10 = OUTLINED_FUNCTION_2_52();
  v11(v10);
  OUTLINED_FUNCTION_231_0();
  uint64_t v12 = OUTLINED_FUNCTION_39_17();
  return v13(v12);
}

uint64_t type metadata accessor for SessionActivationRequestNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for SessionActivationRequestNotice);
}

uint64_t SessionActivationRequestNotice.title.getter()
{
  uint64_t v0 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  OUTLINED_FUNCTION_47();
  v1.super.Class isa = v0;
  OUTLINED_FUNCTION_2_29(0xD000000000000016, v2, 0x61737265766E6F43, 0xEF74694B6E6F6974, v1);

  return OUTLINED_FUNCTION_41_0();
}

void SessionActivationRequestNotice.attributedSubtitle.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  unint64_t v1 = OUTLINED_FUNCTION_3_19(20);
  v2.super.Class isa = v0;
  OUTLINED_FUNCTION_2_29(v1, v3, v4, v5, v2);
  OUTLINED_FUNCTION_178_0();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
  uint64_t v7 = (void *)OUTLINED_FUNCTION_300_0();
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  OUTLINED_FUNCTION_60_7();
  uint64_t v9 = v8();
  uint64_t v11 = v10;
  *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = v11;
  OUTLINED_FUNCTION_39();
  static String.localizedStringWithFormat(_:_:)();
  OUTLINED_FUNCTION_175_1();
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for AttributeContainer();
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_1_20();
  AttributeContainer.init()();
  OUTLINED_FUNCTION_45_4();
  AttributedString.init(_:attributes:)();
  OUTLINED_FUNCTION_15_0();
}

void AccountUpdateNotice.fullSentence.getter()
{
  OUTLINED_FUNCTION_31();
  NSBundle v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_221();
  uint64_t v8 = type metadata accessor for Participant(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_36();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v104 - v11;
  uint64_t v13 = *((void *)v2 + 1);
  specialized BidirectionalCollection.last.getter(v13, type metadata accessor for Participant, v1);
  OUTLINED_FUNCTION_69(v1);
  if (!v14)
  {
    OUTLINED_FUNCTION_43();
    _s15ConversationKit11ParticipantVWObTm_3();
    char v117 = *(uint64_t **)(v13 + 16);
    uint64_t v114 = type metadata accessor for AttributedString();
    uint64_t v115 = v104;
    OUTLINED_FUNCTION_4();
    uint64_t v113 = v23;
    uint64_t v25 = *(void *)(v24 + 64);
    MEMORY[0x1F4188790](v26);
    uint64_t v118 = (char *)v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = *(void **)&v12[*(int *)(v8 + 28)];
    uint64_t v116 = v4;
    if (v27)
    {
      id v28 = v27;
      outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v28);
      if (v29)
      {
        if (objc_msgSend(v28, sel_shouldHideContact))
        {
          uint64_t v111 = type metadata accessor for PersonNameComponents();
          unint64_t v112 = v104;
          OUTLINED_FUNCTION_4();
          uint64_t v110 = v30;
          MEMORY[0x1F4188790](v31);
          OUTLINED_FUNCTION_60();
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          OUTLINED_FUNCTION_180_0();
          OUTLINED_FUNCTION_179_0();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          OUTLINED_FUNCTION_2();
          id v32 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v34 = objc_msgSend(v32, sel_stringFromPersonNameComponents_, isa);

          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v37 = v36;

          OUTLINED_FUNCTION_26_2();
          v38();
          uint64_t v119 = v35;
          uint64_t v120 = v37;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          id v39 = 0;
LABEL_15:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          Participant.name(_:)();
          uint64_t v41 = v40;
          swift_bridgeObjectRelease();
          uint64_t v42 = type metadata accessor for AttributeContainer();
          OUTLINED_FUNCTION_0();
          MEMORY[0x1F4188790](v43);
          OUTLINED_FUNCTION_87_3();
          AttributeContainer.init()();
          OUTLINED_FUNCTION_280_0();
          if (one-time initialization token for subjectContainer != -1) {
            swift_once();
          }
          v104[1] = (uint64_t)v117 - 1;
          uint64_t v44 = OUTLINED_FUNCTION_118_1(v42, (uint64_t)static AttributedStrings.Notices.subjectContainer);
          OUTLINED_FUNCTION_4();
          uint64_t v46 = v45;
          MEMORY[0x1F4188790](v47);
          uint64_t v109 = v48;
          OUTLINED_FUNCTION_157_3();
          uint64_t v49 = *(void *)(v46 + 104);
          uint64_t v108 = v46 + 104;
          uint64_t v107 = v49;
          OUTLINED_FUNCTION_19();
          v50();
          uint64_t v111 = v41;
          AttributedString.mergeAttributes(_:mergePolicy:)();
          uint64_t v51 = *(void *)(v46 + 8);
          uint64_t v110 = v44;
          uint64_t v106 = v51;
          OUTLINED_FUNCTION_139();
          uint64_t v53 = v52();
          OUTLINED_FUNCTION_223_0(v53, v54, v55, v56, v57, v58, v59, v60, v104[0]);
          MEMORY[0x1F4188790](v61);
          id v62 = (char *)v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
          int v63 = *v2;
          unint64_t v112 = (uint64_t *)v42;
          if (v63)
          {
            if (v63 == 1)
            {
              uint64_t v64 = type metadata accessor for String.LocalizationValue.StringInterpolation();
              long long v105 = v104;
              uint64_t v65 = OUTLINED_FUNCTION_8(v64);
              MEMORY[0x1F4188790](v65);
              OUTLINED_FUNCTION_69_2();
              if (!v66)
              {
                String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                OUTLINED_FUNCTION_55_10();
                type metadata accessor for AttributedString.InterpolationOptions();
                char v117 = v104;
                OUTLINED_FUNCTION_4();
                MEMORY[0x1F4188790](v83);
                OUTLINED_FUNCTION_17_0();
                uint64_t v119 = MEMORY[0x1E4FBC860];
                lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                OUTLINED_FUNCTION_19_38();
                OUTLINED_FUNCTION_51_11();
                OUTLINED_FUNCTION_12_1();
                v84();
                OUTLINED_FUNCTION_256_0();
                uint64_t v85 = 0x7466656C20;
                unint64_t v86 = 0xE500000000000000;
LABEL_29:
                String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v85);
                uint64_t v89 = type metadata accessor for String.LocalizationValue();
                uint64_t v90 = OUTLINED_FUNCTION_8(v89);
                MEMORY[0x1F4188790](v90);
                OUTLINED_FUNCTION_14_47();
                OUTLINED_FUNCTION_209_0();
                AttributedString.init(cnkLocalized:)();
LABEL_31:
                uint64_t v97 = v116;
                uint64_t v98 = (uint64_t)v112;
                if (one-time initialization token for foregroundContainer != -1) {
                  swift_once();
                }
                uint64_t v99 = __swift_project_value_buffer(v98, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
                MEMORY[0x1F4188790](v99);
                OUTLINED_FUNCTION_19();
                v100();
                OUTLINED_FUNCTION_124_1();
                AttributedString.mergeAttributes(_:mergePolicy:)();
                OUTLINED_FUNCTION_139();
                v101();
                AttributedString.replaceLinks(with:)();
                uint64_t v103 = v113;
                uint64_t v102 = v114;
                (*(void (**)(char *, uint64_t))(v113 + 8))(v118, v114);
                _s15ConversationKit11ParticipantVWOhTm_6();
                (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v97, v62, v102);
                OUTLINED_FUNCTION_147_1();
                goto LABEL_34;
              }
              String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
              OUTLINED_FUNCTION_55_10();
              type metadata accessor for AttributedString.InterpolationOptions();
              char v117 = v104;
              OUTLINED_FUNCTION_4();
              MEMORY[0x1F4188790](v67);
              OUTLINED_FUNCTION_17_0();
              uint64_t v119 = MEMORY[0x1E4FBC860];
              lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              OUTLINED_FUNCTION_19_38();
              OUTLINED_FUNCTION_51_11();
              OUTLINED_FUNCTION_12_1();
              v68();
              OUTLINED_FUNCTION_80_3();
              OUTLINED_FUNCTION_210_0();
              OUTLINED_FUNCTION_150_1();
              v69._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_250_1();
              v69._object = (void *)0xEC0000007466656CLL;
              String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v69);
              uint64_t v70 = type metadata accessor for String.LocalizationValue();
              uint64_t v71 = OUTLINED_FUNCTION_8(v70);
              MEMORY[0x1F4188790](v71);
              OUTLINED_FUNCTION_14_47();
              OUTLINED_FUNCTION_209_0();
            }
            else
            {
              uint64_t v79 = type metadata accessor for String.LocalizationValue.StringInterpolation();
              long long v105 = v104;
              uint64_t v80 = OUTLINED_FUNCTION_8(v79);
              MEMORY[0x1F4188790](v80);
              OUTLINED_FUNCTION_69_2();
              if (v66)
              {
                String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                OUTLINED_FUNCTION_55_10();
                type metadata accessor for AttributedString.InterpolationOptions();
                char v117 = v104;
                OUTLINED_FUNCTION_4();
                MEMORY[0x1F4188790](v81);
                OUTLINED_FUNCTION_17_0();
                uint64_t v119 = MEMORY[0x1E4FBC860];
                lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                OUTLINED_FUNCTION_19_38();
                OUTLINED_FUNCTION_51_11();
                OUTLINED_FUNCTION_12_1();
                v82();
                OUTLINED_FUNCTION_80_3();
                OUTLINED_FUNCTION_210_0();
                OUTLINED_FUNCTION_150_1();
                unint64_t v94 = 0xD000000000000018;
                unint64_t v93 = 0x80000001C37A9110;
              }
              else
              {
                String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                OUTLINED_FUNCTION_55_10();
                type metadata accessor for AttributedString.InterpolationOptions();
                char v117 = v104;
                OUTLINED_FUNCTION_4();
                MEMORY[0x1F4188790](v91);
                OUTLINED_FUNCTION_17_0();
                uint64_t v119 = MEMORY[0x1E4FBC860];
                lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                OUTLINED_FUNCTION_19_38();
                OUTLINED_FUNCTION_51_11();
                OUTLINED_FUNCTION_12_1();
                v92();
                OUTLINED_FUNCTION_256_0();
                OUTLINED_FUNCTION_47();
                unint64_t v94 = 0xD000000000000011;
              }
              String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v94);
              uint64_t v95 = type metadata accessor for String.LocalizationValue();
              uint64_t v96 = OUTLINED_FUNCTION_8(v95);
              MEMORY[0x1F4188790](v96);
              OUTLINED_FUNCTION_14_47();
              OUTLINED_FUNCTION_209_0();
            }
          }
          else
          {
            uint64_t v72 = type metadata accessor for String.LocalizationValue.StringInterpolation();
            long long v105 = v104;
            uint64_t v73 = OUTLINED_FUNCTION_8(v72);
            MEMORY[0x1F4188790](v73);
            OUTLINED_FUNCTION_69_2();
            if (!v66)
            {
              String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
              OUTLINED_FUNCTION_55_10();
              type metadata accessor for AttributedString.InterpolationOptions();
              char v117 = v104;
              OUTLINED_FUNCTION_4();
              MEMORY[0x1F4188790](v87);
              OUTLINED_FUNCTION_17_0();
              uint64_t v119 = MEMORY[0x1E4FBC860];
              lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              OUTLINED_FUNCTION_19_38();
              OUTLINED_FUNCTION_51_11();
              OUTLINED_FUNCTION_12_1();
              v88();
              OUTLINED_FUNCTION_256_0();
              uint64_t v85 = 0x64656E696F6A20;
              unint64_t v86 = 0xE700000000000000;
              goto LABEL_29;
            }
            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
            OUTLINED_FUNCTION_55_10();
            type metadata accessor for AttributedString.InterpolationOptions();
            char v117 = v104;
            OUTLINED_FUNCTION_4();
            MEMORY[0x1F4188790](v74);
            OUTLINED_FUNCTION_17_0();
            uint64_t v119 = MEMORY[0x1E4FBC860];
            lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
            OUTLINED_FUNCTION_19_38();
            OUTLINED_FUNCTION_51_11();
            OUTLINED_FUNCTION_12_1();
            v75();
            OUTLINED_FUNCTION_80_3();
            OUTLINED_FUNCTION_210_0();
            OUTLINED_FUNCTION_150_1();
            v76._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_250_1();
            v76._object = (void *)0xEE0064656E696F6ALL;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v76);
            uint64_t v77 = type metadata accessor for String.LocalizationValue();
            uint64_t v78 = OUTLINED_FUNCTION_8(v77);
            MEMORY[0x1F4188790](v78);
            OUTLINED_FUNCTION_14_47();
            OUTLINED_FUNCTION_209_0();
          }
          AttributedString.init(conversationControlsLocalized:comment:)();
          goto LABEL_31;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    _s15ConversationKit11ParticipantVWOcTm_9();
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v39 = v121;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_6();
    goto LABEL_15;
  }
  outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Participant?);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  uint64_t v16 = OUTLINED_FUNCTION_8(v15);
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_17_0();
  String.LocalizationValue.init(stringLiteral:)();
  AttributedString.init(cnkLocalized:)();
  if (one-time initialization token for subjectContainer != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for AttributeContainer();
  __swift_project_value_buffer(v17, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  OUTLINED_FUNCTION_49_2();
  type metadata accessor for AttributedString.AttributeMergePolicy();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_62();
  uint64_t v19 = OUTLINED_FUNCTION_2_52();
  v20(v19);
  OUTLINED_FUNCTION_124_1();
  AttributedString.mergeAttributes(_:mergePolicy:)();
  uint64_t v21 = OUTLINED_FUNCTION_39_17();
  v22(v21);
LABEL_34:
  OUTLINED_FUNCTION_28();
}

void AccountUpdateNotice.title.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_36();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_225();
  uint64_t v8 = *(void *)(v1 + 8);
  specialized BidirectionalCollection.last.getter(v8, type metadata accessor for Participant, v2);
  uint64_t v9 = OUTLINED_FUNCTION_70_3();
  if (__swift_getEnumTagSinglePayload(v9, v10, v5) != 1)
  {
    OUTLINED_FUNCTION_193_0();
    unint64_t v19 = *(void *)(v8 + 16);
    if (v19 >= 2)
    {
      uint64_t v47 = (void *)(v19 - 1);
      id v46[3] = String.localizedConversationControls.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1C37696D0;
      uint64_t v21 = *(void **)(v0 + *(int *)(v5 + 28));
      if (v21)
      {
        id v22 = v21;
        outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v22);
        if (v23)
        {
          if (objc_msgSend(v22, sel_shouldHideContact))
          {
            v46[1] = type metadata accessor for PersonNameComponents();
            v46[2] = v46;
            OUTLINED_FUNCTION_4();
            v46[0] = v24;
            MEMORY[0x1F4188790](v25);
            OUTLINED_FUNCTION_60();
            swift_bridgeObjectRetain();
            PersonNameComponents.init()();
            OUTLINED_FUNCTION_180_0();
            OUTLINED_FUNCTION_179_0();
            if (one-time initialization token for initials != -1) {
              swift_once();
            }
            OUTLINED_FUNCTION_2();
            id v26 = (id)static NSPersonNameComponentsFormatter.initials;
            Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
            id v28 = objc_msgSend(v26, sel_stringFromPersonNameComponents_, isa);

            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v31 = v30;

            OUTLINED_FUNCTION_26_2();
            v32();
            uint64_t v48 = v29;
            uint64_t v49 = v31;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol.localizedUppercase.getter();

            swift_bridgeObjectRelease();
            id v33 = 0;
            goto LABEL_24;
          }

          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      _s15ConversationKit11ParticipantVWOcTm_9();
      id v28 = *(id *)(v0 + *(int *)(v5 + 64));
      swift_retain();
      ParticipantContactDetailsCache.contactDetails(for:)();
      id v33 = v50;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Participant.name(_:)();
      OUTLINED_FUNCTION_238_0();
      swift_bridgeObjectRelease();
      *(void *)(v20 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v43 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v20 + 32) = v0;
      *(void *)(v20 + 40) = v28;
      uint64_t v44 = MEMORY[0x1E4FBB5C8];
      *(void *)(v20 + 96) = MEMORY[0x1E4FBB550];
      *(void *)(v20 + 104) = v44;
      uint64_t v45 = v47;
      *(void *)(v20 + 64) = v43;
      *(void *)(v20 + 72) = v45;
      static String.localizedStringWithFormat(_:_:)();
      OUTLINED_FUNCTION_175_1();
LABEL_28:
      swift_bridgeObjectRelease();
      _s15ConversationKit11ParticipantVWOhTm_6();
      goto LABEL_29;
    }
    id v34 = *(void **)(v0 + *(int *)(v5 + 28));
    if (v34)
    {
      id v35 = v34;
      outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v35);
      if (v36)
      {
        OUTLINED_FUNCTION_178_0();
        if (objc_msgSend(v35, sel_shouldHideContact))
        {
          type metadata accessor for PersonNameComponents();
          uint64_t v47 = v46;
          OUTLINED_FUNCTION_4();
          MEMORY[0x1F4188790](v37);
          OUTLINED_FUNCTION_47_12();
          PersonNameComponents.init()();
          OUTLINED_FUNCTION_180_0();
          OUTLINED_FUNCTION_179_0();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          OUTLINED_FUNCTION_2();
          id v38 = (id)static NSPersonNameComponentsFormatter.initials;
          Class v39 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v40 = objc_msgSend(v38, sel_stringFromPersonNameComponents_, v39);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_139();
          v41();
          OUTLINED_FUNCTION_242_0();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          id v42 = 0;
          goto LABEL_27;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    _s15ConversationKit11ParticipantVWOcTm_9();
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v42 = OUTLINED_FUNCTION_176_0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_246_0();
    goto LABEL_28;
  }
  outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for Participant?);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    char v14 = (_WORD *)swift_slowAlloc();
    *char v14 = 0;
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v15, v16, "No participant for accountUpdateNotice");
    MEMORY[0x1C87760E0](v14, -1, -1);
  }

  uint64_t v17 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  v18.super.Class isa = v17;
  OUTLINED_FUNCTION_2_29(0xD000000000000012, 0x80000001C37A9200, 0x61737265766E6F43, 0xEF74694B6E6F6974, v18);

LABEL_29:
  OUTLINED_FUNCTION_28();
}

uint64_t AccountUpdateNotice.attributedSubtitle.getter()
{
  if (*v0)
  {
    if (*v0 == 1)
    {
      uint64_t v1 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      unint64_t v2 = 1952867660;
      uint64_t v3 = 0xE400000000000000;
    }
    else
    {
      uint64_t v1 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      unint64_t v2 = OUTLINED_FUNCTION_102_2();
    }
  }
  else
  {
    uint64_t v1 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    unint64_t v2 = 0x64656E696F4ALL;
    uint64_t v3 = 0xE600000000000000;
  }
  v4.super.Class isa = v1;
  OUTLINED_FUNCTION_2_29(v2, v3, 0x61737265766E6F43, 0xEF74694B6E6F6974, v4);
  OUTLINED_FUNCTION_21_11();
  uint64_t v5 = type metadata accessor for AttributeContainer();
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_48_12();
  return OUTLINED_FUNCTION_101_1();
}

void ReactionNotice.fullSentence.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_36_4();
  uint64_t v8 = type metadata accessor for ParticipantReaction(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  OUTLINED_FUNCTION_5_1();
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 16);
  if (v11 != 1)
  {
    if (v11)
    {
      uint64_t v28 = type metadata accessor for String.LocalizationValue.StringInterpolation();
      uint64_t v103 = v96;
      uint64_t v29 = OUTLINED_FUNCTION_8(v28);
      MEMORY[0x1F4188790](v29);
      OUTLINED_FUNCTION_32_5();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v30._uint64_t countAndFlagsBits = 23390;
      v30._object = (void *)0xE200000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
      id v107 = *(id *)(v10 + 16);
      OUTLINED_FUNCTION_150_1();
      OUTLINED_FUNCTION_47();
      v31._uint64_t countAndFlagsBits = 0xD000000000000032;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t v32 = type metadata accessor for AttributedString();
      unint64_t v100 = v96;
      OUTLINED_FUNCTION_4();
      uint64_t v34 = v33;
      uint64_t v101 = *(uint64_t **)(v35 + 64);
      MEMORY[0x1F4188790](v36);
      OUTLINED_FUNCTION_5_10();
      uint64_t v102 = v37;
      ReactionNotice.reactionSymbols.getter(v38 - (void)v37);
      uint64_t v39 = type metadata accessor for AttributedString.InterpolationOptions();
      uint64_t v99 = v96;
      OUTLINED_FUNCTION_4();
      uint64_t v104 = v5;
      uint64_t v41 = v40;
      MEMORY[0x1F4188790](v42);
      OUTLINED_FUNCTION_61();
      id v107 = (id)MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OUTLINED_FUNCTION_260_0();
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v2, v39);
      uint64_t v43 = v104;
      uint64_t v44 = *(void (**)(void))(v34 + 8);
      OUTLINED_FUNCTION_257_0();
      OUTLINED_FUNCTION_12_1();
      v44();
      OUTLINED_FUNCTION_234();
      OUTLINED_FUNCTION_205_1();
      uint64_t v45 = type metadata accessor for String.LocalizationValue();
      uint64_t v46 = OUTLINED_FUNCTION_8(v45);
      MEMORY[0x1F4188790](v46);
      OUTLINED_FUNCTION_10_57();
      String.LocalizationValue.init(stringInterpolation:)();
      uint64_t KeyPath = swift_getKeyPath();
      specialized AttributedString.init<A>(conversationControlsLocalized:including:)(v9, KeyPath, v43);
      OUTLINED_FUNCTION_256_0();
      MEMORY[0x1F4188790](v48);
      uint64_t v49 = (char *)((char *)v96 - (char *)v102);
      AttributedString.applyContainer()();
      OUTLINED_FUNCTION_12_1();
      v44();
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v43, v49, v32);
    }
    else
    {
      AttributedString.init(stringLiteral:)();
    }
    goto LABEL_17;
  }
  uint64_t v104 = v5;
  unint64_t v100 = (uint64_t *)type metadata accessor for AttributedString();
  uint64_t v101 = v96;
  OUTLINED_FUNCTION_4();
  uint64_t v99 = v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v98 = v14;
  uint64_t v103 = (uint64_t *)((char *)v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s15ConversationKit11ParticipantVWOcTm_9();
  uint64_t v15 = *(void **)(v1 + *(int *)(v6 + 28));
  if (v15)
  {
    id v16 = v15;
    outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v16);
    if (v17)
    {
      if (objc_msgSend(v16, sel_shouldHideContact))
      {
        uint64_t v18 = type metadata accessor for PersonNameComponents();
        uint64_t v102 = v96;
        uint64_t v97 = (uint64_t *)v18;
        OUTLINED_FUNCTION_4();
        MEMORY[0x1F4188790](v19);
        OUTLINED_FUNCTION_60();
        swift_bridgeObjectRetain();
        PersonNameComponents.init()();
        OUTLINED_FUNCTION_180_0();
        OUTLINED_FUNCTION_179_0();
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_2();
        id v20 = (id)static NSPersonNameComponentsFormatter.initials;
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v22 = objc_msgSend(v20, sel_stringFromPersonNameComponents_, isa);

        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        OUTLINED_FUNCTION_4_1();
        v26();
        uint64_t v105 = v23;
        uint64_t v106 = v25;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        id v27 = 0;
        goto LABEL_14;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  _s15ConversationKit11ParticipantVWOcTm_9();
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:)();
  id v27 = v107;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_14:
  uint64_t v102 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  swift_bridgeObjectRelease();
  _s15ConversationKit11ParticipantVWOhTm_6();
  uint64_t v50 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v51);
  OUTLINED_FUNCTION_90_0();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  if (one-time initialization token for subjectContainer != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_118_1(v50, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_19();
  v53();
  AttributedString.mergeAttributes(_:mergePolicy:)();
  uint64_t v54 = OUTLINED_FUNCTION_29_0();
  v55(v54);
  uint64_t v56 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v97 = v96;
  uint64_t v57 = OUTLINED_FUNCTION_8(v56);
  MEMORY[0x1F4188790](v57);
  OUTLINED_FUNCTION_199();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v58._uint64_t countAndFlagsBits = 0;
  v58._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v58);
  uint64_t v59 = type metadata accessor for AttributedString.InterpolationOptions();
  OUTLINED_FUNCTION_223_0(v59, v60, v61, v62, v63, v64, v65, v66, v96[0]);
  OUTLINED_FUNCTION_4();
  uint64_t v68 = v67;
  uint64_t v70 = *(void *)(v69 + 64);
  MEMORY[0x1F4188790](v71);
  v96[2] = (v70 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v105 = MEMORY[0x1E4FBC860];
  v96[0] = lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
  OUTLINED_FUNCTION_290_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  uint64_t v72 = *(void (**)(void))(v68 + 8);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_4_1();
  v72();
  v73._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_108_0();
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v73);
  OUTLINED_FUNCTION_223_0(v74, v75, v76, v77, v78, v79, v80, v81, v96[0]);
  MEMORY[0x1F4188790](v82);
  OUTLINED_FUNCTION_5_10();
  id v85 = ReactionNotice.reactionSymbols.getter(v83 - v84);
  uint64_t v102 = v96;
  MEMORY[0x1F4188790](v85);
  uint64_t v105 = MEMORY[0x1E4FBC860];
  OUTLINED_FUNCTION_290_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OUTLINED_FUNCTION_43();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  OUTLINED_FUNCTION_4_1();
  v72();
  unint64_t v86 = (void (*)(void))v99[1];
  OUTLINED_FUNCTION_12_1();
  v86();
  OUTLINED_FUNCTION_147_1();
  v87._uint64_t countAndFlagsBits = 0;
  v87._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v87);
  uint64_t v88 = type metadata accessor for String.LocalizationValue();
  uint64_t v89 = OUTLINED_FUNCTION_8(v88);
  MEMORY[0x1F4188790](v89);
  OUTLINED_FUNCTION_10_57();
  String.LocalizationValue.init(stringInterpolation:)();
  OUTLINED_FUNCTION_285_0();
  OUTLINED_FUNCTION_12_1();
  v86();
LABEL_17:
  if (one-time initialization token for foregroundContainer != -1) {
    swift_once();
  }
  uint64_t v90 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_118_1(v90, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v91);
  OUTLINED_FUNCTION_62();
  uint64_t v92 = OUTLINED_FUNCTION_2_52();
  v93(v92);
  OUTLINED_FUNCTION_45_4();
  AttributedString.mergeAttributes(_:mergePolicy:)();
  uint64_t v94 = OUTLINED_FUNCTION_39_17();
  v95(v94);
  OUTLINED_FUNCTION_28();
}

void ReactionNotice.title.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantReaction?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_19_20();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_225();
  uint64_t v9 = *v1;
  specialized BidirectionalCollection.last.getter(*v1, type metadata accessor for ParticipantReaction, v2);
  type metadata accessor for ParticipantReaction(0);
  uint64_t v10 = OUTLINED_FUNCTION_70_3();
  if (__swift_getEnumTagSinglePayload(v10, v11, v12) != 1)
  {
    _s15ConversationKit11ParticipantVWOcTm_9();
    _s15ConversationKit11ParticipantVWOhTm_6();
    _s15ConversationKit11ParticipantVWObTm_3();
    unint64_t v21 = *(void *)(v9 + 16);
    if (v21 >= 2)
    {
      String.localizedConversationControls.getter();
      OUTLINED_FUNCTION_47_6();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v22 = OUTLINED_FUNCTION_25_15();
      uint64_t v23 = MEMORY[0x1E4FBB550];
      *(_OWORD *)(v22 + 16) = xmmword_1C3769620;
      uint64_t v24 = MEMORY[0x1E4FBB5C8];
      *(void *)(v22 + 56) = v23;
      *(void *)(v22 + 64) = v24;
      *(void *)(v22 + 32) = v21;
      OUTLINED_FUNCTION_41_0();
      static String.localizedStringWithFormat(_:_:)();
      OUTLINED_FUNCTION_175_1();
LABEL_19:
      swift_bridgeObjectRelease();
      _s15ConversationKit11ParticipantVWOhTm_6();
      goto LABEL_20;
    }
    uint64_t v25 = *(void **)(v0 + *(int *)(v5 + 28));
    if (v25)
    {
      id v26 = v25;
      outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v26);
      if (v27)
      {
        OUTLINED_FUNCTION_178_0();
        if (objc_msgSend(v26, sel_shouldHideContact))
        {
          type metadata accessor for PersonNameComponents();
          uint64_t v34 = (uint64_t)&v34;
          OUTLINED_FUNCTION_4();
          MEMORY[0x1F4188790](v28);
          OUTLINED_FUNCTION_47_12();
          PersonNameComponents.init()();
          OUTLINED_FUNCTION_180_0();
          OUTLINED_FUNCTION_179_0();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          OUTLINED_FUNCTION_2();
          id v29 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v31 = objc_msgSend(v29, sel_stringFromPersonNameComponents_, isa);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_139();
          v32();
          OUTLINED_FUNCTION_242_0();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          id v33 = 0;
          goto LABEL_18;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    _s15ConversationKit11ParticipantVWOcTm_9();
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v33 = OUTLINED_FUNCTION_176_0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_246_0();
    goto LABEL_19;
  }
  outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for ParticipantReaction?);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (_WORD *)swift_slowAlloc();
    _WORD *v16 = 0;
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v17, v18, "No participant for ReactionNotice");
    MEMORY[0x1C87760E0](v16, -1, -1);
  }

  uint64_t v19 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  v20.super.Class isa = v19;
  OUTLINED_FUNCTION_2_29(0xD000000000000013, 0x80000001C37A92A0, 0x61737265766E6F43, 0xEF74694B6E6F6974, v20);

LABEL_20:
  OUTLINED_FUNCTION_28();
}

void ReactionNotice.attributedSubtitle.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v0 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_1_20();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_138_1();
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v2);
  type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_18_6();
  ReactionNotice.reactionSymbols.getter(v4);
  type metadata accessor for AttributedString.InterpolationOptions();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_5_1();
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OUTLINED_FUNCTION_278();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  OUTLINED_FUNCTION_4_1();
  v6();
  OUTLINED_FUNCTION_139();
  v7();
  OUTLINED_FUNCTION_205_1();
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_11_46();
  OUTLINED_FUNCTION_285_0();
  OUTLINED_FUNCTION_28();
}

void static SessionActionNotice.NoticeType.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_3_15();
  a25 = v26;
  a26 = v28;
  uint64_t v30 = *v27;
  uint64_t v29 = v27[1];
  unint64_t v32 = v27[2];
  uint64_t v31 = v27[3];
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  unint64_t v37 = v33[2];
  uint64_t v36 = v33[3];
  switch(v32 >> 62)
  {
    case 1uLL:
      if (v37 >> 62 != 1) {
        goto LABEL_81;
      }
      a12 = *v27;
      a13 = v29;
      a14 = v32;
      a9 = v35;
      a10 = v34;
      a11 = v37;
      outlined copy of SessionActionNotice.NoticeType(v35, v34, v37);
      outlined copy of SessionActionNotice.NoticeType(v30, v29, v32);
      outlined copy of SessionActionNotice.NoticeType(v35, v34, v37);
      outlined copy of SessionActionNotice.NoticeType(v30, v29, v32);
      static SessionActionNotice.QueueItemType.== infix(_:_:)((uint64_t)&a12, (uint64_t)&a9);
      uint64_t v41 = OUTLINED_FUNCTION_44_13();
      goto LABEL_61;
    case 2uLL:
      if (v37 >> 62 != 2) {
        goto LABEL_81;
      }
      BOOL v44 = v30 == v35 && v29 == v34;
      if (!v44)
      {
        OUTLINED_FUNCTION_29_0();
        _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v41 = OUTLINED_FUNCTION_43_14();
      goto LABEL_61;
    case 3uLL:
      OUTLINED_FUNCTION_221_0();
      if (v44 && v46 == 0)
      {
        if (v37 >> 62 == 3 && v37 == v45 && (v34 | v35 | v36) == 0)
        {
          OUTLINED_FUNCTION_104_2();
          uint64_t v56 = 0;
          goto LABEL_59;
        }
        goto LABEL_81;
      }
      if (v30 != 1 || v29 != 0 || v32 != v45 || v31 != 0)
      {
        if (v30 == 2 && v29 == 0 && v32 == v45 && v31 == 0)
        {
          OUTLINED_FUNCTION_111_1();
          if (v54) {
            BOOL v63 = v35 == 2;
          }
          else {
            BOOL v63 = 0;
          }
          if (v63 && !v34)
          {
            OUTLINED_FUNCTION_110_2();
            if (v44 && !v36)
            {
              OUTLINED_FUNCTION_23_34(2);
              uint64_t v56 = 2;
              goto LABEL_59;
            }
          }
        }
        else if (v30 != 3 || v29 || v32 != v45 || v31)
        {
          if (v30 != 4 || v29 || v32 != v45 || v31)
          {
            if (v30 != 5 || v29 || v32 != v45 || v31)
            {
              if (v30 != 6 || v29 || v32 != v45 || v31)
              {
                if (v30 != 7 || v29 || v32 != v45 || v31)
                {
                  if (v30 != 8 || v29 || v32 != v45 || v31)
                  {
                    if (v30 != 9 || v29 || v32 != v45 || v31)
                    {
                      if (v37 >> 62 == 3 && v35 == 10 && !v34)
                      {
                        OUTLINED_FUNCTION_110_2();
                        if (v44 && !v36)
                        {
                          outlined consume of SessionActionNotice.NoticeType(10, 0, 0xC000000000000000);
                          uint64_t v56 = 10;
                          goto LABEL_59;
                        }
                      }
                    }
                    else
                    {
                      OUTLINED_FUNCTION_111_1();
                      if (v54) {
                        BOOL v72 = v35 == 9;
                      }
                      else {
                        BOOL v72 = 0;
                      }
                      if (v72 && !v34)
                      {
                        OUTLINED_FUNCTION_110_2();
                        if (v44 && !v36)
                        {
                          OUTLINED_FUNCTION_23_34(9);
                          uint64_t v56 = 9;
                          goto LABEL_59;
                        }
                      }
                    }
                  }
                  else
                  {
                    OUTLINED_FUNCTION_111_1();
                    if (v54) {
                      BOOL v71 = v35 == 8;
                    }
                    else {
                      BOOL v71 = 0;
                    }
                    if (v71 && !v34)
                    {
                      OUTLINED_FUNCTION_110_2();
                      if (v44 && !v36)
                      {
                        OUTLINED_FUNCTION_23_34(8);
                        uint64_t v56 = 8;
                        goto LABEL_59;
                      }
                    }
                  }
                }
                else
                {
                  OUTLINED_FUNCTION_111_1();
                  if (v54) {
                    BOOL v70 = v35 == 7;
                  }
                  else {
                    BOOL v70 = 0;
                  }
                  if (v70 && !v34)
                  {
                    OUTLINED_FUNCTION_110_2();
                    if (v44 && !v36)
                    {
                      OUTLINED_FUNCTION_23_34(7);
                      uint64_t v56 = 7;
                      goto LABEL_59;
                    }
                  }
                }
              }
              else
              {
                OUTLINED_FUNCTION_111_1();
                if (v54) {
                  BOOL v69 = v35 == 6;
                }
                else {
                  BOOL v69 = 0;
                }
                if (v69 && !v34)
                {
                  OUTLINED_FUNCTION_110_2();
                  if (v44 && !v36)
                  {
                    OUTLINED_FUNCTION_23_34(6);
                    uint64_t v56 = 6;
                    goto LABEL_59;
                  }
                }
              }
            }
            else
            {
              OUTLINED_FUNCTION_111_1();
              if (v54) {
                BOOL v68 = v35 == 5;
              }
              else {
                BOOL v68 = 0;
              }
              if (v68 && !v34)
              {
                OUTLINED_FUNCTION_110_2();
                if (v44 && !v36)
                {
                  OUTLINED_FUNCTION_23_34(5);
                  uint64_t v56 = 5;
                  goto LABEL_59;
                }
              }
            }
          }
          else
          {
            OUTLINED_FUNCTION_111_1();
            if (v54) {
              BOOL v67 = v35 == 4;
            }
            else {
              BOOL v67 = 0;
            }
            if (v67 && !v34)
            {
              OUTLINED_FUNCTION_110_2();
              if (v44 && !v36)
              {
                OUTLINED_FUNCTION_273_0();
                uint64_t v56 = 4;
                goto LABEL_59;
              }
            }
          }
        }
        else
        {
          OUTLINED_FUNCTION_111_1();
          if (v54) {
            BOOL v55 = v35 == 3;
          }
          else {
            BOOL v55 = 0;
          }
          if (v55 && !v34)
          {
            OUTLINED_FUNCTION_110_2();
            if (v44 && !v36)
            {
              OUTLINED_FUNCTION_23_34(3);
              uint64_t v56 = 3;
LABEL_59:
              OUTLINED_FUNCTION_23_34(v56);
              goto LABEL_82;
            }
          }
        }
        goto LABEL_81;
      }
      OUTLINED_FUNCTION_111_1();
      if (v54) {
        BOOL v59 = v35 == 1;
      }
      else {
        BOOL v59 = 0;
      }
      if (!v59 || v34 != 0 || v37 != 0xC000000000000000 || v36 != 0)
      {
LABEL_81:
        uint64_t v64 = OUTLINED_FUNCTION_43_14();
        outlined consume of SessionActionNotice.NoticeType(v64, v65, v66);
        goto LABEL_82;
      }
      OUTLINED_FUNCTION_160_0();
      uint64_t v41 = 1;
      uint64_t v42 = 0;
      unint64_t v43 = 0xC000000000000000;
LABEL_61:
      outlined consume of SessionActionNotice.NoticeType(v41, v42, v43);
LABEL_82:
      OUTLINED_FUNCTION_2_22();
      return;
    default:
      if (v37 >> 62) {
        goto LABEL_81;
      }
      a12 = *v27;
      a13 = v29;
      a14 = v32;
      a9 = v35;
      a10 = v34;
      a11 = v37;
      outlined copy of SessionActionNotice.NoticeType(v35, v34, v37);
      outlined copy of SessionActionNotice.NoticeType(v30, v29, v32);
      outlined copy of SessionActionNotice.NoticeType(v35, v34, v37);
      outlined copy of SessionActionNotice.NoticeType(v30, v29, v32);
      static SessionActionNotice.QueueItemType.== infix(_:_:)((uint64_t)&a12, (uint64_t)&a9);
      uint64_t v38 = OUTLINED_FUNCTION_44_13();
      outlined consume of SessionActionNotice.NoticeType(v38, v39, v40);
      goto LABEL_82;
  }
}

void SessionActionNotice.fullSentence.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v325 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_3();
  v329 = (uint64_t *)v5;
  v328 = (void (*)(void, void, void))type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  v326 = v7;
  MEMORY[0x1F4188790](v8);
  v327 = (char *)&v317 - v9;
  uint64_t v10 = type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v15);
  uint64_t v16 = type metadata accessor for SessionActionNotice(0);
  __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)v0 + *(int *)(v16 + 24)), *(uint64_t *)((char *)v0 + *(int *)(v16 + 24) + 24));
  uint64_t v17 = OUTLINED_FUNCTION_278();
  uint64_t v19 = v18(v17);
  uint64_t v334 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v20);
  uint64_t v318 = v21;
  OUTLINED_FUNCTION_157_3();
  AttributeContainer.init()();
  uint64_t v22 = OUTLINED_FUNCTION_280_0();
  uint64_t v319 = v14;
  MEMORY[0x1F4188790](v22);
  v321 = (char *)v16;
  uint64_t v23 = (uint64_t *)*(int *)(v16 + 32);
  v331 = v1;
  v320 = v23;
  LOBYTE(v23) = *((unsigned char *)v23 + (void)v1);
  uint64_t v333 = v12;
  v330 = (char *)&v317 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = v330;
  if (v23) {
    goto LABEL_4;
  }
  uint64_t v24 = (uint64_t)v329;
  outlined init with copy of Participant?((uint64_t)v331 + *((int *)v321 + 5), (uint64_t)v329, &demangling cache variable for type metadata for Participant?);
  uint64_t v25 = (uint64_t)v328;
  if (__swift_getEnumTagSinglePayload(v24, 1, (uint64_t)v328) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v24, &demangling cache variable for type metadata for Participant?);
    uint64_t v12 = v333;
LABEL_4:
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)&v317 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v317 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    goto LABEL_15;
  }
  uint64_t v26 = v327;
  _s15ConversationKit11ParticipantVWObTm_3();
  uint64_t v27 = *(void **)&v26[*(int *)(v25 + 28)];
  if (v27)
  {
    id v28 = v27;
    outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v28);
    if (v29)
    {
      OUTLINED_FUNCTION_47_6();
      if (objc_msgSend(v28, sel_shouldHideContact))
      {
        v329 = (uint64_t *)v19;
        type metadata accessor for PersonNameComponents();
        OUTLINED_FUNCTION_4();
        MEMORY[0x1F4188790](v30);
        OUTLINED_FUNCTION_47_12();
        PersonNameComponents.init()();
        OUTLINED_FUNCTION_180_0();
        OUTLINED_FUNCTION_179_0();
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_2();
        id v31 = (id)static NSPersonNameComponentsFormatter.initials;
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v33 = objc_msgSend(v31, sel_stringFromPersonNameComponents_, isa);

        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;

        OUTLINED_FUNCTION_139();
        v37();
        uint64_t v337 = v34;
        unint64_t v338 = v36;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        id v38 = 0;
        goto LABEL_14;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  _s15ConversationKit11ParticipantVWOcTm_9();
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:)();
  id v38 = v336;
  id v39 = v336;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v40 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_186_0();
  AttributedString.init(_:attributes:)();
  _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_15:
  v332 = (uint64_t *)v10;
  if (one-time initialization token for subjectContainer != -1) {
    swift_once();
  }
  uint64_t v41 = __swift_project_value_buffer(v334, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  uint64_t v42 = type metadata accessor for AttributedString.AttributeMergePolicy();
  v329 = &v317;
  OUTLINED_FUNCTION_4();
  uint64_t v44 = v43;
  uint64_t v46 = *(void *)(v45 + 64);
  MEMORY[0x1F4188790](v47);
  unint64_t v48 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v49 = *MEMORY[0x1E4F272C0];
  uint64_t v50 = *(void (**)(void, void, void))(v44 + 104);
  v328 = v50;
  v50((char *)&v317 - v48, v49, v42);
  AttributedString.mergeAttributes(_:mergePolicy:)();
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v44 + 8);
  uint64_t v52 = v51((char *)&v317 - v48, v42);
  OUTLINED_FUNCTION_223_0(v52, v53, v54, v55, v56, v57, v58, v59, v317);
  uint64_t v324 = v46;
  MEMORY[0x1F4188790](v60);
  uint64_t v61 = (uint64_t *)((char *)&v317 - v48);
  v329 = (uint64_t *)(v44 + 104);
  v50((char *)&v317 - v48, v49, v42);
  uint64_t v323 = v41;
  AttributedString.mergeAttributes(_:mergePolicy:)();
  uint64_t v322 = v42;
  uint64_t v62 = v42;
  uint64_t v63 = v44 + 8;
  v327 = (char *)v51;
  v51((char *)&v317 - v48, v62);
  OUTLINED_FUNCTION_147_1();
  BOOL v72 = v331;
  uint64_t v74 = *v331;
  uint64_t v73 = v331[1];
  unint64_t v76 = v331[2];
  uint64_t v75 = v331[3];
  switch(v76 >> 62)
  {
    case 1uLL:
      if (v331[2])
      {
        uint64_t v77 = type metadata accessor for String.LocalizationValue();
        uint64_t v78 = OUTLINED_FUNCTION_8(v77);
        MEMORY[0x1F4188790](v78);
        OUTLINED_FUNCTION_17_0();
        String.LocalizationValue.init(stringLiteral:)();
        AttributedString.init(cnkLocalized:)();
        goto LABEL_51;
      }
      OUTLINED_FUNCTION_29_26();
      MEMORY[0x1F4188790](v113);
      OUTLINED_FUNCTION_5_10();
      uint64_t v116 = v114 - v115;
      if (*((unsigned char *)v320 + (void)v72) == 1)
      {
        uint64_t v117 = type metadata accessor for String.LocalizationValue();
        uint64_t v118 = OUTLINED_FUNCTION_8(v117);
        MEMORY[0x1F4188790](v118);
        OUTLINED_FUNCTION_60();
        OUTLINED_FUNCTION_235_0();
        String.LocalizationValue.init(stringLiteral:)();
        AttributedString.init(cnkLocalized:)();
        OUTLINED_FUNCTION_27_30();
        uint64_t v61 = v332;
      }
      else
      {
        uint64_t v146 = type metadata accessor for String.LocalizationValue.StringInterpolation();
        uint64_t v147 = OUTLINED_FUNCTION_8(v146);
        MEMORY[0x1F4188790](v147);
        OUTLINED_FUNCTION_119_1();
        OUTLINED_FUNCTION_30_26();
        type metadata accessor for AttributedString.InterpolationOptions();
        v331 = &v317;
        OUTLINED_FUNCTION_4();
        uint64_t v318 = v63;
        MEMORY[0x1F4188790](v148);
        OUTLINED_FUNCTION_63();
        uint64_t v337 = MEMORY[0x1E4FBC860];
        lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OUTLINED_FUNCTION_50_10();
        uint64_t v149 = OUTLINED_FUNCTION_16_38();
        v150(v149);
        uint64_t v61 = v332;
        OUTLINED_FUNCTION_208();
        v152._uint64_t countAndFlagsBits = v151 + 1;
        v152._object = (void *)0x80000001C37A9340;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v152);
        uint64_t v153 = type metadata accessor for String.LocalizationValue();
        uint64_t v154 = OUTLINED_FUNCTION_8(v153);
        MEMORY[0x1F4188790](v154);
        OUTLINED_FUNCTION_52_9();
        AttributedString.init(cnkLocalized:)();
        OUTLINED_FUNCTION_27_30();
      }
      uint64_t v155 = OUTLINED_FUNCTION_207_0();
      uint64_t v157 = v116;
      goto LABEL_99;
    case 2uLL:
      OUTLINED_FUNCTION_223_0(v64, v65, v66, v67, v68, v69, v70, v71, v317);
      MEMORY[0x1F4188790](v79);
      v321 = (char *)&v317 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
      int v81 = *((unsigned __int8 *)v320 + (void)v72);
      if (v82)
      {
        uint64_t v83 = type metadata accessor for String.LocalizationValue.StringInterpolation();
        v331 = &v317;
        uint64_t v84 = OUTLINED_FUNCTION_8(v83);
        MEMORY[0x1F4188790](v84);
        OUTLINED_FUNCTION_64();
        swift_bridgeObjectRetain();
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
        if (v81)
        {
          v85._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_138_1();
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v85);
          v86._uint64_t countAndFlagsBits = v74;
          v86._object = (void *)v73;
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v86);
          outlined consume of SessionActionNotice.NoticeType(v74, v73, v76);
          OUTLINED_FUNCTION_205_1();
          uint64_t v87 = type metadata accessor for String.LocalizationValue();
          uint64_t v88 = OUTLINED_FUNCTION_8(v87);
          MEMORY[0x1F4188790](v88);
          OUTLINED_FUNCTION_10_57();
          String.LocalizationValue.init(stringInterpolation:)();
          OUTLINED_FUNCTION_62_6();
          uint64_t v89 = v332;
          uint64_t v90 = v333;
        }
        else
        {
          v136._uint64_t countAndFlagsBits = 0;
          v136._object = (void *)0xE000000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v136);
          type metadata accessor for AttributedString.InterpolationOptions();
          v320 = &v317;
          OUTLINED_FUNCTION_4();
          uint64_t v318 = v63;
          MEMORY[0x1F4188790](v137);
          OUTLINED_FUNCTION_36_4();
          uint64_t v337 = MEMORY[0x1E4FBC860];
          uint64_t v319 = lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
          uint64_t v90 = v333;
          OUTLINED_FUNCTION_12_1();
          v138();
          uint64_t v89 = v332;
          v139._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_108_0();
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v139);
          v140._uint64_t countAndFlagsBits = v74;
          v140._object = (void *)v73;
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v140);
          outlined consume of SessionActionNotice.NoticeType(v74, v73, v76);
          OUTLINED_FUNCTION_205_1();
          uint64_t v141 = type metadata accessor for String.LocalizationValue();
          uint64_t v142 = OUTLINED_FUNCTION_8(v141);
          MEMORY[0x1F4188790](v142);
          OUTLINED_FUNCTION_87_3();
          String.LocalizationValue.init(stringInterpolation:)();
          OUTLINED_FUNCTION_149_1();
        }
        OUTLINED_FUNCTION_234();
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(v90 + 32))(v325, v75, v89);
        OUTLINED_FUNCTION_147_1();
        goto LABEL_51;
      }
      if (*((unsigned char *)v320 + (void)v72))
      {
        uint64_t v119 = type metadata accessor for String.LocalizationValue();
        uint64_t v120 = OUTLINED_FUNCTION_8(v119);
        MEMORY[0x1F4188790](v120);
        OUTLINED_FUNCTION_87_3();
        String.LocalizationValue.init(stringLiteral:)();
      }
      else
      {
        uint64_t v158 = type metadata accessor for String.LocalizationValue.StringInterpolation();
        uint64_t v159 = OUTLINED_FUNCTION_8(v158);
        MEMORY[0x1F4188790](v159);
        OUTLINED_FUNCTION_1_20();
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
        OUTLINED_FUNCTION_30_26();
        type metadata accessor for AttributedString.InterpolationOptions();
        OUTLINED_FUNCTION_4();
        MEMORY[0x1F4188790](v160);
        OUTLINED_FUNCTION_17_0();
        uint64_t v337 = MEMORY[0x1E4FBC860];
        lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
        OUTLINED_FUNCTION_124_1();
        OUTLINED_FUNCTION_10_6();
        v161();
        v162._uint64_t countAndFlagsBits = 0x6465746361657220;
        v162._object = (void *)0xE800000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v162);
        uint64_t v163 = type metadata accessor for String.LocalizationValue();
        uint64_t v164 = OUTLINED_FUNCTION_8(v163);
        MEMORY[0x1F4188790](v164);
        OUTLINED_FUNCTION_172_1();
      }
      OUTLINED_FUNCTION_149_1();
      OUTLINED_FUNCTION_27_30();
      uint64_t v165 = OUTLINED_FUNCTION_239_0();
      v166(v165);
      goto LABEL_100;
    case 3uLL:
      OUTLINED_FUNCTION_82_3();
      if (v91 && !(v73 | v74 | v75))
      {
        uint64_t v92 = (uint64_t *)((char *)v72 + *((int *)v321 + 7));
        unint64_t v93 = (uint64_t *)v92[3];
        id v94 = (id)v92[4];
        uint64_t v95 = OUTLINED_FUNCTION_61_9(v92);
        uint64_t v97 = (uint64_t *)v96(v95);
        uint64_t v98 = v333;
        if (v97)
        {
          unint64_t v93 = v97;
          id v99 = objc_msgSend(v97, sel_activity);
          id v94 = objc_msgSend(v99, sel_isScreenSharingActivity);

          if (v94)
          {
            unint64_t v100 = (uint64_t *)0xD000000000000010;
            OUTLINED_FUNCTION_29_26();
            MEMORY[0x1F4188790](v101);
            OUTLINED_FUNCTION_12_50();
            if (v91)
            {
              uint64_t v102 = type metadata accessor for String.LocalizationValue();
              uint64_t v103 = OUTLINED_FUNCTION_8(v102);
              MEMORY[0x1F4188790](v103);
              OUTLINED_FUNCTION_60();
              String.LocalizationValue.init(stringLiteral:)();
              AttributedString.init(cnkLocalized:)();
              OUTLINED_FUNCTION_153();
            }
            else
            {
              uint64_t v201 = type metadata accessor for String.LocalizationValue.StringInterpolation();
              unint64_t v100 = &v317;
              uint64_t v202 = OUTLINED_FUNCTION_8(v201);
              MEMORY[0x1F4188790](v202);
              OUTLINED_FUNCTION_28_28();
              String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
              OUTLINED_FUNCTION_30_26();
              type metadata accessor for AttributedString.InterpolationOptions();
              v331 = &v317;
              OUTLINED_FUNCTION_4();
              uint64_t v318 = v63;
              MEMORY[0x1F4188790](v203);
              OUTLINED_FUNCTION_63();
              uint64_t v337 = MEMORY[0x1E4FBC860];
              lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
              uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              OUTLINED_FUNCTION_15_53();
              OUTLINED_FUNCTION_50_10();
              uint64_t v204 = OUTLINED_FUNCTION_16_38();
              v205(v204);
              OUTLINED_FUNCTION_156_1();
              v207._uint64_t countAndFlagsBits = v206 + 7;
              v207._object = (void *)0x80000001C37A9420;
              String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v207);
              uint64_t v208 = type metadata accessor for String.LocalizationValue();
              uint64_t v209 = OUTLINED_FUNCTION_8(v208);
              MEMORY[0x1F4188790](v209);
              OUTLINED_FUNCTION_52_9();
              AttributedString.init(cnkLocalized:)();
              OUTLINED_FUNCTION_27_30();
            }
            (*(void (**)(uint64_t, void *, uint64_t *))(v98 + 32))(v325, v92, v100);
            goto LABEL_100;
          }
        }
        v326 = &v317;
        OUTLINED_FUNCTION_29_26();
        uint64_t v122 = MEMORY[0x1F4188790](v121);
        uint64_t v130 = OUTLINED_FUNCTION_83_2(v122, v123, v124, v125, v126, v127, v128, v129, v317);
        uint64_t v131 = OUTLINED_FUNCTION_8(v130);
        MEMORY[0x1F4188790](v131);
        OUTLINED_FUNCTION_73_5();
        if (v91)
        {
          OUTLINED_FUNCTION_283_0();
          OUTLINED_FUNCTION_125_1();
          uint64_t v132 = OUTLINED_FUNCTION_25_35();
          v340._uint64_t countAndFlagsBits = v133(v132);
          OUTLINED_FUNCTION_195_0(v340);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_68_8();
          uint64_t v134 = type metadata accessor for String.LocalizationValue();
          uint64_t v135 = OUTLINED_FUNCTION_8(v134);
          MEMORY[0x1F4188790](v135);
          OUTLINED_FUNCTION_11_46();
          OUTLINED_FUNCTION_62_6();
          OUTLINED_FUNCTION_169_0();
        }
        else
        {
          String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
          OUTLINED_FUNCTION_30_26();
          type metadata accessor for AttributedString.InterpolationOptions();
          v331 = &v317;
          OUTLINED_FUNCTION_4();
          MEMORY[0x1F4188790](v183);
          OUTLINED_FUNCTION_64();
          uint64_t v337 = MEMORY[0x1E4FBC860];
          lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
          uint64_t v318 = v63;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          OUTLINED_FUNCTION_106_2();
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
          OUTLINED_FUNCTION_139();
          v184();
          unint64_t v93 = v332;
          uint64_t v98 = v333;
          OUTLINED_FUNCTION_234();
          OUTLINED_FUNCTION_282(0x747261747320);
          uint64_t v185 = OUTLINED_FUNCTION_25_35();
          v342._uint64_t countAndFlagsBits = v186(v185);
          OUTLINED_FUNCTION_195_0(v342);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_68_8();
          uint64_t v187 = type metadata accessor for String.LocalizationValue();
          uint64_t v188 = OUTLINED_FUNCTION_8(v187);
          MEMORY[0x1F4188790](v188);
          OUTLINED_FUNCTION_11_46();
          OUTLINED_FUNCTION_62_6();
          uint64_t v46 = v325;
          OUTLINED_FUNCTION_42_17();
        }
        (*(void (**)(uint64_t, id, uint64_t *))(v98 + 32))(v46, v94, v93);
        goto LABEL_77;
      }
      uint64_t v104 = v333;
      if (v74 == 1 && !v73)
      {
        OUTLINED_FUNCTION_82_3();
        if (v91)
        {
          if (!v75)
          {
            uint64_t v73 = (uint64_t)v72 + *((int *)v321 + 7);
            uint64_t v105 = OUTLINED_FUNCTION_61_9((void *)v73);
            id v107 = (uint64_t *)v106(v105);
            if (v107)
            {
              uint64_t v61 = v107;
              id v108 = objc_msgSend(v107, sel_activity);
              unsigned int v109 = objc_msgSend(v108, sel_isScreenSharingActivity);

              if (v109)
              {
                OUTLINED_FUNCTION_29_26();
                MEMORY[0x1F4188790](v110);
                OUTLINED_FUNCTION_12_50();
                if (!v91)
                {
                  uint64_t v218 = type metadata accessor for String.LocalizationValue.StringInterpolation();
                  uint64_t v61 = &v317;
                  uint64_t v219 = OUTLINED_FUNCTION_8(v218);
                  MEMORY[0x1F4188790](v219);
                  OUTLINED_FUNCTION_28_28();
                  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                  OUTLINED_FUNCTION_30_26();
                  type metadata accessor for AttributedString.InterpolationOptions();
                  uint64_t v220 = v73;
                  v331 = &v317;
                  OUTLINED_FUNCTION_4();
                  uint64_t v318 = v63;
                  MEMORY[0x1F4188790](v221);
                  OUTLINED_FUNCTION_63();
                  uint64_t v337 = MEMORY[0x1E4FBC860];
                  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                  OUTLINED_FUNCTION_15_53();
                  OUTLINED_FUNCTION_50_10();
                  uint64_t v222 = OUTLINED_FUNCTION_16_38();
                  v223(v222);
                  OUTLINED_FUNCTION_65_5();
                  OUTLINED_FUNCTION_306_0();
LABEL_88:
                  OUTLINED_FUNCTION_47();
                  goto LABEL_97;
                }
                uint64_t v111 = type metadata accessor for String.LocalizationValue();
                uint64_t v112 = OUTLINED_FUNCTION_8(v111);
                MEMORY[0x1F4188790](v112);
                OUTLINED_FUNCTION_60();
                OUTLINED_FUNCTION_208();
                goto LABEL_87;
              }
            }
            v326 = &v317;
            OUTLINED_FUNCTION_29_26();
            uint64_t v168 = MEMORY[0x1F4188790](v167);
            uint64_t v176 = OUTLINED_FUNCTION_83_2(v168, v169, v170, v171, v172, v173, v174, v175, v317);
            uint64_t v177 = OUTLINED_FUNCTION_8(v176);
            MEMORY[0x1F4188790](v177);
            OUTLINED_FUNCTION_73_5();
            if (v91)
            {
              String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
              v178._object = (void *)0xA90000000000009CLL;
              v178._uint64_t countAndFlagsBits = 0x80E2206465646E45;
              String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v178);
              uint64_t v179 = OUTLINED_FUNCTION_25_35();
              v341._uint64_t countAndFlagsBits = v180(v179);
              OUTLINED_FUNCTION_195_0(v341);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_68_8();
              uint64_t v181 = type metadata accessor for String.LocalizationValue();
              uint64_t v182 = OUTLINED_FUNCTION_8(v181);
              MEMORY[0x1F4188790](v182);
              OUTLINED_FUNCTION_11_46();
              OUTLINED_FUNCTION_62_6();
              OUTLINED_FUNCTION_169_0();
            }
            else
            {
              String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
              OUTLINED_FUNCTION_30_26();
              type metadata accessor for AttributedString.InterpolationOptions();
              v331 = &v317;
              OUTLINED_FUNCTION_4();
              MEMORY[0x1F4188790](v192);
              OUTLINED_FUNCTION_64();
              uint64_t v337 = MEMORY[0x1E4FBC860];
              lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
              uint64_t v318 = v63;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              OUTLINED_FUNCTION_106_2();
              String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
              OUTLINED_FUNCTION_139();
              v193();
              OUTLINED_FUNCTION_234();
              v194._uint64_t countAndFlagsBits = 0xE2206465646E6520;
              v194._object = (void *)0xAA00000000009C80;
              String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v194);
              uint64_t v195 = OUTLINED_FUNCTION_25_35();
              v343._uint64_t countAndFlagsBits = v196(v195);
              OUTLINED_FUNCTION_195_0(v343);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_68_8();
              uint64_t v197 = type metadata accessor for String.LocalizationValue();
              uint64_t v198 = OUTLINED_FUNCTION_8(v197);
              MEMORY[0x1F4188790](v198);
              OUTLINED_FUNCTION_11_46();
              OUTLINED_FUNCTION_62_6();
              OUTLINED_FUNCTION_42_17();
            }
            uint64_t v199 = OUTLINED_FUNCTION_239_0();
            v200(v199);
LABEL_77:
            OUTLINED_FUNCTION_147_1();
            goto LABEL_100;
          }
        }
      }
      if (v74 == 2 && !v73)
      {
        OUTLINED_FUNCTION_82_3();
        if (v91)
        {
          if (!v75)
          {
            OUTLINED_FUNCTION_29_26();
            MEMORY[0x1F4188790](v143);
            OUTLINED_FUNCTION_12_50();
            if (!v91)
            {
              uint64_t v210 = type metadata accessor for String.LocalizationValue.StringInterpolation();
              uint64_t v61 = &v317;
              uint64_t v211 = OUTLINED_FUNCTION_8(v210);
              MEMORY[0x1F4188790](v211);
              OUTLINED_FUNCTION_119_1();
              OUTLINED_FUNCTION_30_26();
              type metadata accessor for AttributedString.InterpolationOptions();
              uint64_t v220 = 0;
              v331 = &v317;
              OUTLINED_FUNCTION_4();
              uint64_t v318 = v63;
              MEMORY[0x1F4188790](v212);
              OUTLINED_FUNCTION_63();
              uint64_t v337 = MEMORY[0x1E4FBC860];
              lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              OUTLINED_FUNCTION_15_53();
              OUTLINED_FUNCTION_50_10();
              uint64_t v213 = OUTLINED_FUNCTION_16_38();
              v214(v213);
              OUTLINED_FUNCTION_156_1();
              goto LABEL_88;
            }
            uint64_t v144 = type metadata accessor for String.LocalizationValue();
            uint64_t v145 = OUTLINED_FUNCTION_8(v144);
            MEMORY[0x1F4188790](v145);
            OUTLINED_FUNCTION_60();
            OUTLINED_FUNCTION_235_0();
LABEL_87:
            String.LocalizationValue.init(stringLiteral:)();
            AttributedString.init(cnkLocalized:)();
            OUTLINED_FUNCTION_153();
            goto LABEL_98;
          }
        }
      }
      if (v74 != 3 || v73 || (OUTLINED_FUNCTION_82_3(), !v91) || v75)
      {
        if (v74 == 4 && !v73)
        {
          OUTLINED_FUNCTION_82_3();
          if (v91)
          {
            if (!v75)
            {
              OUTLINED_FUNCTION_29_26();
              MEMORY[0x1F4188790](v215);
              OUTLINED_FUNCTION_12_50();
              if (!v91)
              {
                uint64_t v249 = type metadata accessor for String.LocalizationValue.StringInterpolation();
                uint64_t v61 = &v317;
                uint64_t v250 = OUTLINED_FUNCTION_8(v249);
                MEMORY[0x1F4188790](v250);
                OUTLINED_FUNCTION_28_28();
                String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                OUTLINED_FUNCTION_30_26();
                type metadata accessor for AttributedString.InterpolationOptions();
                uint64_t v220 = 0;
                v331 = &v317;
                OUTLINED_FUNCTION_4();
                uint64_t v318 = v63;
                MEMORY[0x1F4188790](v251);
                OUTLINED_FUNCTION_63();
                uint64_t v337 = MEMORY[0x1E4FBC860];
                lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                OUTLINED_FUNCTION_15_53();
                OUTLINED_FUNCTION_50_10();
                uint64_t v252 = OUTLINED_FUNCTION_16_38();
                v253(v252);
                OUTLINED_FUNCTION_65_5();
                unint64_t v229 = OUTLINED_FUNCTION_201_0(0x766F6D20u);
                goto LABEL_97;
              }
LABEL_86:
              uint64_t v216 = type metadata accessor for String.LocalizationValue();
              uint64_t v217 = OUTLINED_FUNCTION_8(v216);
              MEMORY[0x1F4188790](v217);
              OUTLINED_FUNCTION_10_57();
              goto LABEL_87;
            }
          }
        }
        if (v74 == 5 && !v73)
        {
          OUTLINED_FUNCTION_82_3();
          if (v91)
          {
            if (!v75)
            {
              v326 = &v317;
              OUTLINED_FUNCTION_29_26();
              uint64_t v232 = MEMORY[0x1F4188790](v231);
              uint64_t v240 = OUTLINED_FUNCTION_84_3(v232, v233, v234, v235, v236, v237, v238, v239, v317);
              v320 = &v317;
              uint64_t v241 = OUTLINED_FUNCTION_8(v240);
              MEMORY[0x1F4188790](v241);
              OUTLINED_FUNCTION_32_5();
              if (v61 == 1)
              {
                OUTLINED_FUNCTION_283_0();
                uint64_t v242 = 0x657070696B53;
LABEL_96:
                v243._uint64_t countAndFlagsBits = v242 & 0xFFFFFFFFFFFFLL | 0x2064000000000000;
                v243._object = (void *)0xAB000000009C80E2;
                String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v243);
                __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)v72 + *((int *)v321 + 7)), *(uint64_t *)((char *)v72 + *((int *)v321 + 7) + 24));
                OUTLINED_FUNCTION_60_7();
                v245._uint64_t countAndFlagsBits = v244();
                String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v245);
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_68_8();
                uint64_t v246 = type metadata accessor for String.LocalizationValue();
                uint64_t v247 = OUTLINED_FUNCTION_8(v246);
                MEMORY[0x1F4188790](v247);
                OUTLINED_FUNCTION_14_47();
                OUTLINED_FUNCTION_262();
                uint64_t v248 = v325;
                OUTLINED_FUNCTION_42_17();
LABEL_113:
                (*(void (**)(uint64_t))(v104 + 32))(v248);
                goto LABEL_77;
              }
              String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
              OUTLINED_FUNCTION_55_10();
              type metadata accessor for AttributedString.InterpolationOptions();
              OUTLINED_FUNCTION_4();
              MEMORY[0x1F4188790](v262);
              OUTLINED_FUNCTION_17_0();
              uint64_t v337 = MEMORY[0x1E4FBC860];
              uint64_t v318 = lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
              OUTLINED_FUNCTION_126_1();
              OUTLINED_FUNCTION_51_11();
              OUTLINED_FUNCTION_10_6();
              v263();
              uint64_t v104 = v333;
              uint64_t v264 = 0x7070696B7320;
              goto LABEL_112;
            }
          }
        }
        if (v74 == 6 && !v73)
        {
          OUTLINED_FUNCTION_82_3();
          if (v91)
          {
            if (!v75)
            {
              OUTLINED_FUNCTION_29_26();
              MEMORY[0x1F4188790](v261);
              OUTLINED_FUNCTION_12_50();
              if (!v91)
              {
                uint64_t v277 = type metadata accessor for String.LocalizationValue.StringInterpolation();
                uint64_t v61 = &v317;
                uint64_t v278 = OUTLINED_FUNCTION_8(v277);
                MEMORY[0x1F4188790](v278);
                OUTLINED_FUNCTION_28_28();
                OUTLINED_FUNCTION_283_0();
                OUTLINED_FUNCTION_30_26();
                type metadata accessor for AttributedString.InterpolationOptions();
                uint64_t v220 = 0;
                v331 = &v317;
                OUTLINED_FUNCTION_4();
                uint64_t v318 = v63;
                MEMORY[0x1F4188790](v279);
                OUTLINED_FUNCTION_63();
                uint64_t v337 = MEMORY[0x1E4FBC860];
                lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                OUTLINED_FUNCTION_15_53();
                OUTLINED_FUNCTION_50_10();
                uint64_t v280 = OUTLINED_FUNCTION_16_38();
                v281(v280);
                OUTLINED_FUNCTION_65_5();
                unint64_t v229 = 0x6465746164707520;
                unint64_t v230 = 0xEE00657565757120;
                goto LABEL_97;
              }
              goto LABEL_86;
            }
          }
        }
        if (v74 != 7 || v73 || (OUTLINED_FUNCTION_82_3(), !v91) || v75)
        {
          if (v74 != 8 || v73 || (OUTLINED_FUNCTION_82_3(), !v91) || v75)
          {
            if (v74 == 9 && !v73)
            {
              OUTLINED_FUNCTION_82_3();
              if (v91)
              {
                if (!v75)
                {
                  uint64_t v318 = v63;
                  v326 = &v317;
                  OUTLINED_FUNCTION_29_26();
                  MEMORY[0x1F4188790](v288);
                  OUTLINED_FUNCTION_157_3();
                  uint64_t v289 = type metadata accessor for String.LocalizationValue.StringInterpolation();
                  v331 = &v317;
                  uint64_t v290 = OUTLINED_FUNCTION_8(v289);
                  MEMORY[0x1F4188790](v290);
                  OUTLINED_FUNCTION_73_5();
                  if (v91)
                  {
                    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                    OUTLINED_FUNCTION_306_0();
                    OUTLINED_FUNCTION_47();
                    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v291);
                    type metadata accessor for AttributedString.InterpolationOptions();
                    OUTLINED_FUNCTION_4();
                    MEMORY[0x1F4188790](v292);
                    OUTLINED_FUNCTION_63();
                    uint64_t v337 = MEMORY[0x1E4FBC860];
                    lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                    OUTLINED_FUNCTION_152();
                    String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
                    uint64_t v293 = OUTLINED_FUNCTION_16_38();
                    v294(v293);
                    uint64_t v309 = 0;
                    unint64_t v310 = 0xE000000000000000;
                  }
                  else
                  {
                    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
                    OUTLINED_FUNCTION_30_26();
                    type metadata accessor for AttributedString.InterpolationOptions();
                    OUTLINED_FUNCTION_4();
                    MEMORY[0x1F4188790](v306);
                    OUTLINED_FUNCTION_63();
                    uint64_t v337 = MEMORY[0x1E4FBC860];
                    lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
                    OUTLINED_FUNCTION_152();
                    OUTLINED_FUNCTION_50_10();
                    uint64_t v307 = OUTLINED_FUNCTION_16_38();
                    v308(v307);
                    OUTLINED_FUNCTION_47();
                  }
                  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v309);
                  uint64_t v311 = type metadata accessor for String.LocalizationValue();
                  uint64_t v312 = OUTLINED_FUNCTION_8(v311);
                  MEMORY[0x1F4188790](v312);
                  OUTLINED_FUNCTION_11_46();
                  AttributedString.init(cnkLocalized:)();
                  uint64_t v313 = OUTLINED_FUNCTION_207_0();
                  v314(v313, v61);
                  OUTLINED_FUNCTION_147_1();
                  OUTLINED_FUNCTION_42_17();
                  goto LABEL_100;
                }
              }
            }
            v326 = &v317;
            OUTLINED_FUNCTION_29_26();
            uint64_t v296 = MEMORY[0x1F4188790](v295);
            uint64_t v304 = OUTLINED_FUNCTION_84_3(v296, v297, v298, v299, v300, v301, v302, v303, v317);
            v320 = &v317;
            uint64_t v305 = OUTLINED_FUNCTION_8(v304);
            MEMORY[0x1F4188790](v305);
            OUTLINED_FUNCTION_32_5();
            if (v61)
            {
              OUTLINED_FUNCTION_283_0();
              uint64_t v242 = 0x657472617453;
              goto LABEL_96;
            }
            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
            OUTLINED_FUNCTION_55_10();
            type metadata accessor for AttributedString.InterpolationOptions();
            OUTLINED_FUNCTION_4();
            MEMORY[0x1F4188790](v315);
            OUTLINED_FUNCTION_17_0();
            uint64_t v337 = MEMORY[0x1E4FBC860];
            uint64_t v318 = lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
            OUTLINED_FUNCTION_126_1();
            OUTLINED_FUNCTION_51_11();
            OUTLINED_FUNCTION_10_6();
            v316();
            uint64_t v104 = v333;
            uint64_t v264 = 0x747261747320;
LABEL_112:
            OUTLINED_FUNCTION_282(v264);
            __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)v72 + *((int *)v321 + 7)), *(uint64_t *)((char *)v72 + *((int *)v321 + 7) + 24));
            OUTLINED_FUNCTION_60_7();
            v266._uint64_t countAndFlagsBits = v265();
            String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v266);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_68_8();
            uint64_t v267 = type metadata accessor for String.LocalizationValue();
            uint64_t v268 = OUTLINED_FUNCTION_8(v267);
            MEMORY[0x1F4188790](v268);
            OUTLINED_FUNCTION_14_47();
            OUTLINED_FUNCTION_262();
            uint64_t v248 = v325;
            OUTLINED_FUNCTION_42_17();
            goto LABEL_113;
          }
          uint64_t v337 = 0;
          unint64_t v338 = 0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease();
          uint64_t v337 = 10256610;
          unint64_t v338 = 0xA300000000000000;
          v282 = (void *)OUTLINED_FUNCTION_248_1();
          __swift_project_boxed_opaque_existential_1(v282, v282[3]);
          OUTLINED_FUNCTION_60_7();
          v284._uint64_t countAndFlagsBits = v283();
          String.append(_:)(v284);
          swift_bridgeObjectRelease();
          v285._uint64_t countAndFlagsBits = 0x68746977209D80E2;
          v285._object = (void *)0xA900000000000020;
          String.append(_:)(v285);
          lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1F418B350]);
          v286._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v286);
          uint64_t v287 = swift_bridgeObjectRelease();
          MEMORY[0x1F4188790](v287);
          OUTLINED_FUNCTION_186_0();
          AttributedString.init(_:attributes:)();
        }
        else
        {
          uint64_t v269 = type metadata accessor for String.LocalizationValue.StringInterpolation();
          uint64_t v270 = OUTLINED_FUNCTION_8(v269);
          MEMORY[0x1F4188790](v270);
          OUTLINED_FUNCTION_1_20();
          String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
          OUTLINED_FUNCTION_125_1();
          v271 = (void *)OUTLINED_FUNCTION_248_1();
          __swift_project_boxed_opaque_existential_1(v271, v271[3]);
          OUTLINED_FUNCTION_124_1();
          OUTLINED_FUNCTION_60_7();
          v273._uint64_t countAndFlagsBits = v272();
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v273);
          swift_bridgeObjectRelease();
          v274._object = (void *)0x80000001C37A9300;
          v274._uint64_t countAndFlagsBits = 0x1000000000000010;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v274);
          uint64_t v275 = type metadata accessor for String.LocalizationValue();
          uint64_t v276 = OUTLINED_FUNCTION_8(v275);
          MEMORY[0x1F4188790](v276);
          OUTLINED_FUNCTION_172_1();
          AttributedString.init(cnkLocalized:)();
        }
LABEL_51:
        OUTLINED_FUNCTION_42_17();
        goto LABEL_100;
      }
      OUTLINED_FUNCTION_29_26();
      MEMORY[0x1F4188790](v189);
      OUTLINED_FUNCTION_12_50();
      if (v91)
      {
        uint64_t v190 = type metadata accessor for String.LocalizationValue();
        uint64_t v191 = OUTLINED_FUNCTION_8(v190);
        MEMORY[0x1F4188790](v191);
        OUTLINED_FUNCTION_10_57();
        OUTLINED_FUNCTION_201_0(0x73756150u);
        goto LABEL_87;
      }
      uint64_t v224 = type metadata accessor for String.LocalizationValue.StringInterpolation();
      uint64_t v61 = &v317;
      uint64_t v225 = OUTLINED_FUNCTION_8(v224);
      MEMORY[0x1F4188790](v225);
      OUTLINED_FUNCTION_28_28();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      OUTLINED_FUNCTION_30_26();
      type metadata accessor for AttributedString.InterpolationOptions();
      uint64_t v220 = 0;
      v331 = &v317;
      OUTLINED_FUNCTION_4();
      uint64_t v318 = v63;
      MEMORY[0x1F4188790](v226);
      OUTLINED_FUNCTION_63();
      uint64_t v337 = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
      OUTLINED_FUNCTION_15_53();
      OUTLINED_FUNCTION_50_10();
      uint64_t v227 = OUTLINED_FUNCTION_16_38();
      v228(v227);
      OUTLINED_FUNCTION_65_5();
      unint64_t v229 = OUTLINED_FUNCTION_102_2();
LABEL_97:
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v229);
      uint64_t v254 = type metadata accessor for String.LocalizationValue();
      uint64_t v255 = OUTLINED_FUNCTION_8(v254);
      MEMORY[0x1F4188790](v255);
      OUTLINED_FUNCTION_52_9();
      AttributedString.init(cnkLocalized:)();
      uint64_t v73 = v220;
      OUTLINED_FUNCTION_27_30();
LABEL_98:
      uint64_t v155 = OUTLINED_FUNCTION_207_0();
      uint64_t v157 = v73;
LABEL_99:
      v156(v155, v157, v61);
LABEL_100:
      if (one-time initialization token for foregroundContainer != -1) {
        swift_once();
      }
      uint64_t v256 = __swift_project_value_buffer(v334, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
      MEMORY[0x1F4188790](v256);
      OUTLINED_FUNCTION_19();
      v257();
      OUTLINED_FUNCTION_34_9();
      AttributedString.mergeAttributes(_:mergePolicy:)();
      OUTLINED_FUNCTION_12_1();
      v258();
      AttributedString.replaceLinks(with:)();
      v259 = v332;
      v260 = *(void (**)(char *, uint64_t *))(v333 + 8);
      v260(v335, v332);
      v260(v330, v259);
      OUTLINED_FUNCTION_28();
      return;
    default:
      uint64_t v337 = *v331;
      unint64_t v338 = v73;
      char v339 = v76;
      SessionActionNotice.fullSentence(for:count:)((uint64_t)&v337, v75, v325);
      goto LABEL_51;
  }
}

void SessionActionNotice.title.getter()
{
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for SessionActionNotice(0) + 32)) == 1)
  {
    SessionActionNotice.actionDescription.getter();
  }
  else
  {
    SessionActionNotice.attributionDescription.getter();
  }
}

uint64_t SessionActionNotice.attributedSubtitle.getter()
{
  if (*(unsigned char *)(v0 + *(int *)(OUTLINED_FUNCTION_206() + 32)) == 1) {
    SessionActionNotice.attributionDescription.getter();
  }
  else {
    SessionActionNotice.actionDescription.getter();
  }
  OUTLINED_FUNCTION_47_6();
  uint64_t v1 = type metadata accessor for AttributeContainer();
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_86_4();
  return OUTLINED_FUNCTION_288();
}

BOOL SessionActionNotice.isSticky.getter()
{
  SessionActionNotice.noticeAccessory.getter();
  if (v2 >= 2) {
    outlined consume of NoticeAccessory(v1, v2);
  }
  return v2 > 1;
}

uint64_t AppLaunchNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

void AppLaunchNotice.fullSentence.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = type metadata accessor for AppLaunchNotice(0);
  uint64_t v2 = *(void *)(v0 + *(int *)(v1 + 28));
  OUTLINED_FUNCTION_304_0();
  v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(v3 + 104))(v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 10322146;
  v6._object = (void *)0xA300000000000000;
  String.append(_:)(v6);
  unsigned int v7 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_type);
  OUTLINED_FUNCTION_304_0();
  (*(void (**)(uint64_t))(v8 + 112))(v9);
  if (v7 > 1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v1 + 36)) == 1)
    {
      swift_bridgeObjectRelease();
      AppLaunchNotice.attributedCollaborationTitle()();
    }
    else
    {
      uint64_t v12 = type metadata accessor for String.LocalizationValue.StringInterpolation();
      uint64_t v13 = OUTLINED_FUNCTION_8(v12);
      MEMORY[0x1F4188790](v13);
      OUTLINED_FUNCTION_10_57();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      OUTLINED_FUNCTION_205_1();
      v14._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_29_0();
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v14);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_47();
      v15._uint64_t countAndFlagsBits = 0x100000000000001CLL;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
      uint64_t v16 = type metadata accessor for String.LocalizationValue();
      uint64_t v17 = OUTLINED_FUNCTION_8(v16);
      MEMORY[0x1F4188790](v17);
      OUTLINED_FUNCTION_72_4();
      OUTLINED_FUNCTION_287_0();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for String.LocalizationValue();
    uint64_t v11 = OUTLINED_FUNCTION_8(v10);
    MEMORY[0x1F4188790](v11);
    OUTLINED_FUNCTION_16_0();
    String.LocalizationValue.init(stringLiteral:)();
    OUTLINED_FUNCTION_287_0();
  }
  if (one-time initialization token for subjectContainer != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_118_1(v18, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_62();
  uint64_t v20 = OUTLINED_FUNCTION_2_52();
  v21(v20);
  OUTLINED_FUNCTION_231_0();
  uint64_t v22 = OUTLINED_FUNCTION_39_17();
  v23(v22);
  OUTLINED_FUNCTION_28();
}

uint64_t AppLaunchNotice.title.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t AppLaunchNotice.attributedSubtitle.getter()
{
  AppLaunchNotice.noticeContent.getter();
  swift_bridgeObjectRelease();
  uint64_t v0 = type metadata accessor for AttributeContainer();
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_86_4();
  return OUTLINED_FUNCTION_288();
}

void SystemUpdateNotice.fullSentence.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 8);
    if (!*(unsigned char *)v0)
    {
      uint64_t v9 = type metadata accessor for String.LocalizationValue.StringInterpolation();
      uint64_t v10 = OUTLINED_FUNCTION_8(v9);
      MEMORY[0x1F4188790](v10);
      OUTLINED_FUNCTION_10_57();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v11._uint64_t countAndFlagsBits = 543519573;
      v11._object = (void *)0xE400000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
      v12._uint64_t countAndFlagsBits = v2;
      v12._object = v1;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v12);
      OUTLINED_FUNCTION_208();
      OUTLINED_FUNCTION_47();
      goto LABEL_7;
    }
    if (*(unsigned char *)v0 == 1)
    {
      uint64_t v3 = type metadata accessor for String.LocalizationValue.StringInterpolation();
      uint64_t v4 = OUTLINED_FUNCTION_8(v3);
      MEMORY[0x1F4188790](v4);
      OUTLINED_FUNCTION_10_57();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v5._uint64_t countAndFlagsBits = 0x64656D2065766F4DLL;
      v5._object = (void *)0xEE00206F74206169;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v5);
      v6._uint64_t countAndFlagsBits = v2;
      v6._object = v1;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v6);
      unint64_t v7 = OUTLINED_FUNCTION_102_2();
LABEL_7:
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v7);
      uint64_t v13 = type metadata accessor for String.LocalizationValue();
      uint64_t v14 = OUTLINED_FUNCTION_8(v13);
      MEMORY[0x1F4188790](v14);
      OUTLINED_FUNCTION_72_4();
      OUTLINED_FUNCTION_287_0();
      goto LABEL_14;
    }
    outlined init with copy of Participant?(v0 + 24, (uint64_t)v33, &demangling cache variable for type metadata for Activity?);
    uint64_t v15 = v34;
    if (v34)
    {
      uint64_t v16 = v35;
      __swift_project_boxed_opaque_existential_1(v33, v34);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
      uint64_t v19 = v18;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      if (v19)
      {
LABEL_13:
        uint64_t v24 = type metadata accessor for String.LocalizationValue.StringInterpolation();
        uint64_t v25 = OUTLINED_FUNCTION_8(v24);
        MEMORY[0x1F4188790](v25);
        OUTLINED_FUNCTION_10_57();
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v26._uint64_t countAndFlagsBits = 0x9C80E22079616C50;
        v26._object = (void *)0xA800000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
        v27._uint64_t countAndFlagsBits = v17;
        v27._object = v19;
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v27);
        swift_bridgeObjectRelease();
        v28._uint64_t countAndFlagsBits = 0x206E6F209D80E2;
        v28._object = (void *)0xA700000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
        v29._uint64_t countAndFlagsBits = v2;
        v29._object = v1;
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v29);
        v30._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_102_2();
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t v31 = type metadata accessor for String.LocalizationValue();
        uint64_t v32 = OUTLINED_FUNCTION_8(v31);
        MEMORY[0x1F4188790](v32);
        OUTLINED_FUNCTION_72_4();
        OUTLINED_FUNCTION_287_0();
        goto LABEL_14;
      }
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v33, &demangling cache variable for type metadata for Activity?);
    }
    uint64_t v20 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    v21.super.Class isa = v20;
    uint64_t v17 = OUTLINED_FUNCTION_2_29(v22, 0x80000001C37A59A0, 0x61737265766E6F43, 0xEF74694B6E6F6974, v21);
    uint64_t v19 = v23;
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  AttributedString.init(stringLiteral:)();
LABEL_14:
  OUTLINED_FUNCTION_15_0();
}

void SystemUpdateNotice.title.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_3_15();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = *(void *)(v26 + 16);
  if (v29)
  {
    uint64_t v30 = *(void *)(v26 + 8);
    if (*(unsigned char *)v26)
    {
      if (*(unsigned char *)v26 != 1)
      {
        id v38 = self;
        swift_bridgeObjectRetain();
        id v39 = (objc_class *)objc_msgSend(v38, sel_conversationKit);
        OUTLINED_FUNCTION_13_11();
        OUTLINED_FUNCTION_7_7();
        v40.super.Class isa = v39;
        OUTLINED_FUNCTION_2_29(v41, v42, v43, v44, v40);
        OUTLINED_FUNCTION_178_0();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = xmmword_1C37696D0;
        outlined init with copy of Participant?(v26 + 24, (uint64_t)&a10, &demangling cache variable for type metadata for Activity?);
        uint64_t v46 = a13;
        if (a13)
        {
          __swift_project_boxed_opaque_existential_1(&a10, a13);
          uint64_t v47 = OUTLINED_FUNCTION_260_0();
          uint64_t v46 = v48(v47);
          uint64_t v50 = v49;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&a10);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)&a10, &demangling cache variable for type metadata for Activity?);
          uint64_t v50 = 0;
        }
        uint64_t v51 = MEMORY[0x1E4FBB1A0];
        *(void *)(v45 + 56) = MEMORY[0x1E4FBB1A0];
        unint64_t v52 = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v45 + 64) = v52;
        if (!v50)
        {
          uint64_t v53 = (objc_class *)objc_msgSend(v38, sel_conversationKit);
          OUTLINED_FUNCTION_13_11();
          OUTLINED_FUNCTION_7_7();
          v54.super.Class isa = v53;
          uint64_t v46 = OUTLINED_FUNCTION_2_29(v55, v56, v57, v58, v54);
          uint64_t v50 = v59;
        }
        *(void *)(v45 + 32) = v46;
        *(void *)(v45 + 40) = v50;
        *(void *)(v45 + 96) = v51;
        *(void *)(v45 + 104) = v52;
        *(void *)(v45 + 72) = v30;
        *(void *)(v45 + 80) = v29;
        OUTLINED_FUNCTION_39();
        String.init(format:_:)();
        OUTLINED_FUNCTION_229_0();
        goto LABEL_14;
      }
      uint64_t v31 = self;
      swift_bridgeObjectRetain();
      uint64_t v32 = (objc_class *)objc_msgSend(v31, sel_conversationKit);
      OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_47();
      uint64_t v34 = 0xD000000000000015;
    }
    else
    {
      uint64_t v35 = self;
      swift_bridgeObjectRetain();
      uint64_t v32 = (objc_class *)objc_msgSend(v35, sel_conversationKit);
      OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_47();
    }
    v36.super.Class isa = v32;
    OUTLINED_FUNCTION_2_29(v34, v33, 0x61737265766E6F43, 0xEF74694B6E6F6974, v36);
    OUTLINED_FUNCTION_21_11();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v37 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v37 + 16) = xmmword_1C3769620;
    *(void *)(v37 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v37 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v37 + 32) = v30;
    *(void *)(v37 + 40) = v29;
    String.init(format:_:)();
LABEL_14:
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_2_22();
}

uint64_t SystemUpdateNotice.attributedSubtitle.getter()
{
  if (*(void *)(v0 + 16))
  {
    id v1 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_19_1(0xD000000000000013, 0x80000001C37A95F0);
  }
  uint64_t v2 = type metadata accessor for AttributeContainer();
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_86_4();
  OUTLINED_FUNCTION_4_18();
  return AttributedString.init(_:attributes:)();
}

uint64_t FaceIDUnavailableNotice.fullSentence.getter()
{
  uint64_t v0 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  unint64_t v1 = OUTLINED_FUNCTION_3_19(18);
  v2.super.Class isa = v0;
  OUTLINED_FUNCTION_2_29(v1, v3, v4, v5, v2);
  OUTLINED_FUNCTION_21_11();
  uint64_t v6 = type metadata accessor for AttributeContainer();
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_48_12();
  return OUTLINED_FUNCTION_101_1();
}

uint64_t FaceIDUnavailableNotice.title.getter()
{
  uint64_t v0 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  v1.super.Class isa = v0;
  OUTLINED_FUNCTION_2_29(0xD000000000000012, 0x80000001C3798A70, 0x61737265766E6F43, 0xEF74694B6E6F6974, v1);

  return OUTLINED_FUNCTION_41_0();
}

uint64_t FaceIDUnavailableNotice.attributedSubtitle.getter()
{
  uint64_t v0 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  v1.super.Class isa = v0;
  OUTLINED_FUNCTION_2_29(0x525F474E49525544, 0xE900000000000043, 0x61737265766E6F43, 0xEF74694B6E6F6974, v1);
  OUTLINED_FUNCTION_21_11();
  uint64_t v2 = type metadata accessor for AttributeContainer();
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_48_12();
  return OUTLINED_FUNCTION_101_1();
}

uint64_t PushToTalkNotice.title.getter()
{
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v2 = OUTLINED_FUNCTION_46_15();
  type metadata accessor for PushToTalkNotice(v2);
  _s15ConversationKit11ParticipantVWOcTm_9();
  OUTLINED_FUNCTION_34_9();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v3 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                   + 48);
    id v4 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    unint64_t v5 = OUTLINED_FUNCTION_291_0();
    OUTLINED_FUNCTION_19_1(v5, v6);
    OUTLINED_FUNCTION_47_6();
  }
  else
  {
    int v3 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                   + 48);
  }
  outlined destroy of SystemUpdateNotice?(v0 + v3, &demangling cache variable for type metadata for URL?);
  return OUTLINED_FUNCTION_41_0();
}

uint64_t PushToTalkNotice.attributedSubtitle.getter()
{
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_103_2();
  _s15ConversationKit11ParticipantVWOcTm_9();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v2 = *v0;
    int v3 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    OUTLINED_FUNCTION_47();
    if (v2 == 1) {
      uint64_t v4 = 0xD000000000000020;
    }
    v9.super.Class isa = v3;
    OUTLINED_FUNCTION_2_29(v4, v5, 0x61737265766E6F43, 0xEF74694B6E6F6974, v9);

    int v6 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                   + 48);
  }
  else
  {
    swift_bridgeObjectRelease();
    int v6 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                   + 48);
    uint64_t v7 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    v8.super.Class isa = v7;
    OUTLINED_FUNCTION_2_29(0x676E696B61657053, 0xE800000000000000, 0x61737265766E6F43, 0xEF74694B6E6F6974, v8);
    OUTLINED_FUNCTION_21_11();
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)&v0[v6], &demangling cache variable for type metadata for URL?);
  uint64_t v10 = type metadata accessor for AttributeContainer();
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_48_12();
  return OUTLINED_FUNCTION_101_1();
}

void PushToTalkNotice.fullSentence.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_1_20();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  OUTLINED_FUNCTION_30_26();
  v2._uint64_t countAndFlagsBits = PushToTalkNotice.title.getter();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v3);
  type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_90_0();
  PushToTalkNotice.attributedSubtitle.getter();
  type metadata accessor for AttributedString.CharacterView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_199();
  AttributedString.characters.getter();
  OUTLINED_FUNCTION_12_1();
  v6();
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1F418B248]);
  v15._uint64_t countAndFlagsBits = String.init<A>(_:)();
  OUTLINED_FUNCTION_195_0(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_205_1();
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_11_46();
  AttributedString.init(cnkLocalized:)();
  if (one-time initialization token for foregroundContainer != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_118_1(v9, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  uint64_t v11 = OUTLINED_FUNCTION_2_52();
  v12(v11);
  OUTLINED_FUNCTION_231_0();
  uint64_t v13 = OUTLINED_FUNCTION_39_17();
  v14(v13);
  OUTLINED_FUNCTION_15_0();
}

uint64_t *AppLaunchNotice.bundleIDToItemType.unsafeMutableAddressor()
{
  if (one-time initialization token for bundleIDToItemType != -1) {
    swift_once();
  }
  return &static AppLaunchNotice.bundleIDToItemType;
}

BOOL specialized static Comparable.<= infix(_:_:)(char a1, char a2)
{
  return !static Bool.< infix(_:_:)(a2, a1);
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2)
{
  return a2 >= a1;
}

BOOL specialized static Comparable.<= infix(_:_:)()
{
  static HUDActivityManager.BannerUpdate.< infix(_:_:)();
  return (v0 & 1) == 0;
}

BOOL specialized static Comparable.<= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

uint64_t specialized AttributedString.init<A>(conversationControlsLocalized:including:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v13[2] = a2;
  v13[3] = a3;
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v13[1] = objc_msgSend(self, sel_conversationKit);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v10);
  uint64_t v11 = type metadata accessor for AttributedString.FormattingOptions();
  MEMORY[0x1F4188790](v11);
  v13[5] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions, MEMORY[0x1F418B260]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.FormattingOptions]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.FormattingOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.FormattingOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  lazy protocol witness table accessor for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes();
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t default argument 0 of AppLaunchNotice.init(uuid:date:priority:app:conversation:supportsCollaboration:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  return UUID.init()();
}

uint64_t default argument 1 of AppLaunchNotice.init(uuid:date:priority:app:conversation:supportsCollaboration:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  return Date.init()();
}

void default argument 2 of AppLaunchNotice.init(uuid:date:priority:app:conversation:supportsCollaboration:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

uint64_t default argument 6 of AppLaunchNotice.init(uuid:date:priority:app:conversation:supportsCollaboration:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 976))();
}

void default argument 7 of AppLaunchNotice.init(uuid:date:priority:app:conversation:supportsCollaboration:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

uint64_t AppLaunchNotice.init(uuid:date:priority:app:conversation:supportsCollaboration:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)@<X0>(char *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, char a4@<W5>, char *a5@<X6>, char a6@<W7>, uint64_t a7@<X8>, double a8@<D0>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t *a14)
{
  char v19 = *a1;
  char v20 = *a5;
  char v28 = *a13;
  uint64_t v29 = a14[1];
  uint64_t v30 = *a14;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v21();
  uint64_t v22 = (int *)type metadata accessor for AppLaunchNotice(0);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  uint64_t result = v23();
  *(unsigned char *)(a7 + v22[6]) = v19;
  *(void *)(a7 + v22[7]) = a2;
  *(void *)(a7 + v22[8]) = a3;
  *(unsigned char *)(a7 + v22[9]) = a4;
  *(double *)(a7 + v22[10]) = a8;
  *(unsigned char *)(a7 + v22[11]) = v20;
  *(unsigned char *)(a7 + v22[12]) = a6;
  uint64_t v25 = (void *)(a7 + v22[13]);
  *uint64_t v25 = a9;
  v25[1] = a10;
  uint64_t v26 = (void *)(a7 + v22[14]);
  *uint64_t v26 = a11;
  v26[1] = a12;
  *(unsigned char *)(a7 + v22[15]) = v28;
  uint64_t v27 = (void *)(a7 + v22[16]);
  *uint64_t v27 = v30;
  v27[1] = v29;
  return result;
}

uint64_t default argument 2 of AccountUpdateNotice.init(type:participants:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:noticeAccessory:)()
{
  return UUID.init()();
}

uint64_t default argument 3 of AccountUpdateNotice.init(type:participants:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:noticeAccessory:)()
{
  return Date.init()();
}

void default argument 4 of AccountUpdateNotice.init(type:participants:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

void default argument 9 of AccountUpdateNotice.init(type:participants:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:noticeAccessory:)(__n128 *a1@<X8>)
{
}

void AccountUpdateNotice.init(type:participants:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:noticeAccessory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31)
{
  OUTLINED_FUNCTION_3_15();
  char v51 = v31;
  uint64_t v50 = v32;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  char v39 = *v38;
  uint64_t v40 = a31[1];
  uint64_t v49 = *a31;
  *(unsigned char *)uint64_t v35 = *v37;
  *(void *)(v35 + 8) = v41;
  uint64_t updated = (int *)type metadata accessor for AccountUpdateNotice(0);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v43();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v44();
  *(unsigned char *)(v36 + updated[8]) = v39;
  uint64_t v45 = (void *)(v36 + updated[9]);
  *uint64_t v45 = v34;
  v45[1] = v50;
  *(unsigned char *)(v36 + updated[10]) = v51;
  uint64_t v46 = (void *)(v36 + updated[11]);
  *uint64_t v46 = a27;
  v46[1] = a28;
  uint64_t v47 = (void *)(v36 + updated[12]);
  void *v47 = a29;
  v47[1] = a30;
  unint64_t v48 = (void *)(v36 + updated[13]);
  *unint64_t v48 = v49;
  v48[1] = v40;
  OUTLINED_FUNCTION_2_22();
}

uint64_t default argument 1 of SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 968))();
}

uint64_t default argument 2 of SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)()
{
  return UUID.init()();
}

uint64_t default argument 3 of SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)()
{
  return Date.init()();
}

void default argument 4 of SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)(unsigned char *a1@<X8>)
{
}

void default argument 5 of SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)(unsigned char *a1@<X8>)
{
}

void default argument 7 of SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)(__n128 *a1@<X8>)
{
}

uint64_t SessionActivationRequestNotice.init(expirationCheck:dismissalDuration:uuid:date:priority:style:shouldTransitionToHUD:noticeAccessory:actionHandler:dismissHandler:bundleIdentifier:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long *a15)
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v41 = v15;
  char v40 = v16;
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_271_0();
  char v20 = *v19;
  char v22 = *v21;
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  *uint64_t v18 = v26;
  v18[1] = v27;
  v18[2] = v28;
  uint64_t v29 = (int *)type metadata accessor for SessionActivationRequestNotice(0);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v30();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v31();
  *((unsigned char *)v18 + v29[8]) = v20;
  *((unsigned char *)v18 + v29[9]) = v22;
  *((unsigned char *)v18 + v29[10]) = v40;
  uint64_t v32 = (void *)((char *)v18 + v29[11]);
  void *v32 = v24;
  v32[1] = v25;
  uint64_t v33 = (void *)((char *)v18 + v29[12]);
  *uint64_t v33 = a9;
  v33[1] = v38;
  uint64_t v34 = (void *)((char *)v18 + v29[13]);
  *uint64_t v34 = v39;
  v34[1] = a12;
  uint64_t v35 = (void *)((char *)v18 + v29[14]);
  void *v35 = a13;
  v35[1] = a14;
  uint64_t v36 = (uint64_t)v18 + v29[15];
  return outlined init with take of Notice(a15, v36);
}

uint64_t ParticipantReaction.init(participant:reaction:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  id v4 = (id)MEMORY[0x1C87730B0](a1, a2);
  v5.ConversationKit::VideoReaction value = VideoReaction.init(rawValue:)((__C::AVCaptureReactionType)v4).value;
  if (v5.value == ConversationKit_VideoReaction_unknownDefault)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
    uint64_t v7 = MEMORY[0x1E4FBB1A0];
    uint64_t v8 = String.init<A>(reflecting:)();
    uint64_t v10 = v9;
    *(void *)(v6 + 56) = v7;
    *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v6 + 32) = v8;
    *(void *)(v6 + 40) = v10;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOhTm_6();
    type metadata accessor for ParticipantReaction(0);
    uint64_t v11 = OUTLINED_FUNCTION_47_0();
    return __swift_storeEnumTagSinglePayload(v11, v12, v13, v14);
  }
  else
  {
    ConversationKit::VideoReaction value = v5.value;

    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWObTm_3();
    *(unsigned char *)(a3 + *(int *)(type metadata accessor for ParticipantReaction(0) + 20)) = value;
    OUTLINED_FUNCTION_31_13();
    return __swift_storeEnumTagSinglePayload(v17, v18, v19, v20);
  }
}

uint64_t default argument 1 of ReactionNotice.init(reactions:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:dismissalDuration:noticeAccessory:)()
{
  return UUID.init()();
}

uint64_t default argument 2 of ReactionNotice.init(reactions:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:dismissalDuration:noticeAccessory:)()
{
  return Date.init()();
}

void default argument 3 of ReactionNotice.init(reactions:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:dismissalDuration:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

uint64_t default argument 8 of ReactionNotice.init(reactions:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:dismissalDuration:noticeAccessory:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 1056))();
}

void default argument 9 of ReactionNotice.init(reactions:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:dismissalDuration:noticeAccessory:)(__n128 *a1@<X8>)
{
}

void ReactionNotice.init(reactions:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:dismissalDuration:noticeAccessory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v33 = v14;
  char v32 = v15;
  uint64_t v29 = v16;
  OUTLINED_FUNCTION_249_0();
  uint64_t v18 = v17;
  char v20 = *v19;
  uint64_t v30 = a12[1];
  uint64_t v31 = *a12;
  *uint64_t v17 = v21;
  char v22 = (int *)type metadata accessor for ReactionNotice(0);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v23();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v24();
  *((unsigned char *)v18 + v22[7]) = v20;
  uint64_t v25 = (void *)((char *)v18 + v22[8]);
  *uint64_t v25 = v12;
  v25[1] = v29;
  *((unsigned char *)v18 + v22[9]) = v32;
  uint64_t v26 = (void *)((char *)v18 + v22[10]);
  *uint64_t v26 = v33;
  v26[1] = a9;
  uint64_t v27 = (void *)((char *)v18 + v22[11]);
  *uint64_t v27 = a10;
  v27[1] = a11;
  *(void *)((char *)v18 + v22[12]) = v13;
  uint64_t v28 = (void *)((char *)v18 + v22[13]);
  *uint64_t v28 = v31;
  v28[1] = v30;
  OUTLINED_FUNCTION_151_2();
}

uint64_t default argument 7 of SessionActionNotice.init(type:participant:conversation:activity:triggeredLocally:deviceFamily:uuid:date:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:)()
{
  return Date.init()();
}

uint64_t SessionActionNotice.init(type:participant:conversation:activity:triggeredLocally:deviceFamily:uuid:date:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_154_1();
  char v17 = v16;
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  OUTLINED_FUNCTION_271_0();
  long long v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  char v32 = (int *)type metadata accessor for SessionActionNotice(0);
  outlined init with take of AspectRatio?(v27, (uint64_t)v29 + v32[5], &demangling cache variable for type metadata for Participant?);
  outlined init with take of Notice(v25, (uint64_t)v29 + v32[6]);
  outlined init with take of Notice(v23, (uint64_t)v29 + v32[7]);
  *((unsigned char *)v29 + v32[8]) = v21;
  uint64_t v33 = (char *)v29 + v32[9];
  *(void *)uint64_t v33 = v19;
  v33[8] = v17 & 1;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v34();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  uint64_t result = v35();
  uint64_t v37 = (void *)((char *)v29 + v32[12]);
  *uint64_t v37 = v40;
  v37[1] = v41;
  *((unsigned char *)v29 + v32[13]) = a12;
  uint64_t v38 = (void *)((char *)v29 + v32[14]);
  *uint64_t v38 = a13;
  v38[1] = a14;
  uint64_t v39 = (void *)((char *)v29 + v32[15]);
  void *v39 = a15;
  v39[1] = a16;
  return result;
}

void SessionActionNotice.NoticeType.init(notice:)(void *a1@<X0>, void *a2@<X8>)
{
  switch((unint64_t)objc_msgSend(a1, sel_sessionEventType))
  {
    case 1uLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C377C0C0;
      goto LABEL_29;
    case 2uLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C3765400;
      goto LABEL_29;
    case 3uLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C377C0B0;
      goto LABEL_29;
    case 4uLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C377C0A0;
      goto LABEL_29;
    case 7uLL:
      outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
      OUTLINED_FUNCTION_21_11();
      uint64_t v6 = 0;
      if (v3) {
        uint64_t v8 = v2;
      }
      else {
        uint64_t v8 = 0;
      }
      unint64_t v9 = 0xE000000000000000;
      if (v3) {
        unint64_t v9 = v3;
      }
      *a2 = v8;
      a2[1] = v9;
      unint64_t v10 = 0x8000000000000000;
      goto LABEL_31;
    case 8uLL:
      id v11 = objc_msgSend(a1, sel_queueItemType);
      if (v11 == (id)2)
      {
        outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
        OUTLINED_FUNCTION_21_11();
        if (v3) {
          uint64_t v12 = v2;
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = 0xE000000000000000;
        if (v3) {
          unint64_t v13 = v3;
        }
        _Q0 = vdupq_n_s64(0x4000000000000001uLL);
        goto LABEL_41;
      }
      if (v11 == (id)1)
      {
        outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
        OUTLINED_FUNCTION_21_11();
        if (v3) {
          uint64_t v12 = v2;
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = 0xE000000000000000;
        if (v3) {
          unint64_t v13 = v3;
        }
        __asm { FMOV            V0.2D, #2.0 }
LABEL_41:
        _Q0.i64[0] = v13;
        goto LABEL_43;
      }

      uint64_t v12 = 0;
      _Q0 = (int64x2_t)xmmword_1C377C080;
LABEL_43:
      uint64_t v6 = 0;
      *a2 = v12;
      *(int64x2_t *)(a2 + 1) = _Q0;
      goto LABEL_32;
    case 0xAuLL:
      id v19 = objc_msgSend(a1, sel_queueItemType);
      if (v19 == (id)2)
      {
        outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
        OUTLINED_FUNCTION_21_11();
        OUTLINED_FUNCTION_310_0();
        unint64_t v21 = 0xE000000000000000;
        if (!_ZF) {
          unint64_t v21 = v3;
        }
        int64x2_t v22 = vdupq_n_s64(1uLL);
        goto LABEL_47;
      }
      if (v19 == (id)1)
      {
        outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
        OUTLINED_FUNCTION_21_11();
        OUTLINED_FUNCTION_310_0();
        unint64_t v21 = 0xE000000000000000;
        if (!_ZF) {
          unint64_t v21 = v3;
        }
        v22.i64[1] = 0;
LABEL_47:
        v22.i64[0] = v21;
        goto LABEL_49;
      }

      uint64_t v20 = 0;
      int64x2_t v22 = (int64x2_t)xmmword_1C377C090;
LABEL_49:
      *a2 = v20;
      *(int64x2_t *)(a2 + 1) = v22;
      uint64_t v6 = 1;
LABEL_32:
      a2[3] = v6;
      return;
    case 0xBuLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C377C070;
      goto LABEL_29;
    case 0xCuLL:

      uint64_t v6 = 0;
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_30;
    case 0xDuLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C37737D0;
      goto LABEL_29;
    case 0xEuLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C377C060;
      goto LABEL_29;
    case 0xFuLL:

      uint64_t v6 = 0;
      long long v7 = xmmword_1C3779710;
LABEL_29:
      *(_OWORD *)a2 = v7;
LABEL_30:
      unint64_t v10 = 0xC000000000000000;
      goto LABEL_31;
    default:

      uint64_t v6 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v10 = 0x3FFFFFFFCLL;
LABEL_31:
      a2[2] = v10;
      goto LABEL_32;
  }
}

uint64_t SessionActionNotice.NoticeType.isSessionChange.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  switch(v3 >> 62)
  {
    case 2uLL:
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 3uLL:
      OUTLINED_FUNCTION_221_0();
      BOOL v19 = v19 && v18 == 0;
      if (v19)
      {
        OUTLINED_FUNCTION_23_34(0);
        uint64_t v15 = 0;
LABEL_38:
        uint64_t v14 = 1;
        goto LABEL_6;
      }
      if (v1 == 1 && v2 == 0 && v3 == v17 && v4 == 0)
      {
        uint64_t v15 = 1;
        OUTLINED_FUNCTION_160_0();
        OUTLINED_FUNCTION_104_2();
        OUTLINED_FUNCTION_23_34(1);
        goto LABEL_38;
      }
      if (v1 == 2 && v2 == 0 && v3 == v17 && v4 == 0)
      {
        uint64_t v5 = 2;
      }
      else if (v1 != 3 || v2 || v3 != v17 || v4)
      {
        if (v1 != 4 || v2 || v3 != v17 || v4)
        {
          if (v1 != 5 || v2 || v3 != v17 || v4)
          {
            if (v1 != 6 || v2 || v3 != v17 || v4)
            {
              if (v1 != 7 || v2 || v3 != v17 || v4)
              {
                if (v1 != 8 || v2 || v3 != v17 || v4)
                {
                  if (v1 != 9 || v2 || v3 != v17 || v4) {
                    uint64_t v5 = 10;
                  }
                  else {
                    uint64_t v5 = 9;
                  }
                }
                else
                {
                  uint64_t v5 = 8;
                }
              }
              else
              {
                uint64_t v5 = 7;
              }
            }
            else
            {
              uint64_t v5 = 6;
            }
          }
          else
          {
            uint64_t v5 = 5;
          }
        }
        else
        {
          uint64_t v5 = 4;
        }
      }
      else
      {
        uint64_t v5 = 3;
      }
      uint64_t v6 = 0;
      unint64_t v7 = 0xC000000000000000;
LABEL_5:
      outlined consume of SessionActionNotice.NoticeType(v5, v6, v7);
      OUTLINED_FUNCTION_23_34(0);
      uint64_t v8 = OUTLINED_FUNCTION_181();
      outlined copy of SessionActionNotice.NoticeType(v8, v9, v10);
      uint64_t v11 = OUTLINED_FUNCTION_181();
      outlined consume of SessionActionNotice.NoticeType(v11, v12, v13);
      uint64_t v14 = 0;
      uint64_t v15 = 1;
LABEL_6:
      OUTLINED_FUNCTION_23_34(v15);
      return v14;
    default:
      outlined copy of CallScreening.EndingAction(*v0, v0[1], v0[2]);
LABEL_4:
      uint64_t v5 = OUTLINED_FUNCTION_181();
      goto LABEL_5;
  }
}

uint64_t default argument 2 of PushToTalkNotice.init(uuid:type:date:priority:bundleIdentifier:dismissalDuration:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  return Date.init()();
}

void default argument 3 of PushToTalkNotice.init(uuid:type:date:priority:bundleIdentifier:dismissalDuration:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

void default argument 9 of PushToTalkNotice.init(uuid:type:date:priority:bundleIdentifier:dismissalDuration:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

void PushToTalkNotice.init(uuid:type:date:priority:bundleIdentifier:dismissalDuration:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t *a13)
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v34 = v15;
  char v33 = v16;
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_249_0();
  uint64_t v20 = v19;
  char v22 = *v21;
  char v23 = *a12;
  uint64_t v31 = a13[1];
  uint64_t v32 = *a13;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v24();
  uint64_t v25 = (int *)type metadata accessor for PushToTalkNotice(0);
  _s15ConversationKit11ParticipantVWObTm_3();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v26();
  *(unsigned char *)(v20 + v25[7]) = v22;
  uint64_t v27 = (void *)(v20 + v25[8]);
  *uint64_t v27 = v13;
  v27[1] = v18;
  *(void *)(v20 + v25[9]) = v14;
  *(unsigned char *)(v20 + v25[10]) = v33;
  uint64_t v28 = (void *)(v20 + v25[11]);
  *uint64_t v28 = v34;
  v28[1] = a9;
  uint64_t v29 = (void *)(v20 + v25[12]);
  *uint64_t v29 = a10;
  v29[1] = a11;
  *(unsigned char *)(v20 + v25[13]) = v23;
  OUTLINED_FUNCTION_158_1(v25[14], v30, v31, v32);
  OUTLINED_FUNCTION_151_2();
}

uint64_t default argument 3 of SystemUpdateNotice.init(type:activity:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  return Date.init()();
}

void default argument 4 of SystemUpdateNotice.init(type:activity:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

void default argument 9 of SystemUpdateNotice.init(type:activity:uuid:date:priority:bundleIdentifier:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

#error "1C333B420: call analysis failed (funcsize=87)"

BOOL static NoticePriority.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t NoticePriority.rawValue.getter()
{
  return *v0;
}

ConversationKit::NoticePriority_optional __swiftcall NoticePriority.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 7;
  if ((unint64_t)rawValue < 7) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (ConversationKit::NoticePriority_optional)rawValue;
}

ConversationKit::NoticePriority_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NoticePriority(Swift::Int *a1)
{
  return NoticePriority.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NoticePriority@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NoticePriority.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NoticePriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NoticePriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NoticePriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, *a2);
}

ConversationKit::ConversationNoticeStyle_optional __swiftcall ConversationNoticeStyle.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationNoticeStyle.init(rawValue:), v3);
  result.ConversationKit::VideoReaction value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t ConversationNoticeStyle.rawValue.getter()
{
  if (*v0) {
    return 0x6765746E696E6F6ELL;
  }
  else {
    return 0x7461726765746E69;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationNoticeStyle(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationNoticeStyle()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationNoticeStyle()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationNoticeStyle()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::ConversationNoticeStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationNoticeStyle(Swift::String *a1)
{
  return ConversationNoticeStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationNoticeStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ConversationNoticeStyle.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

ConversationKit::ConversationNoticeSubtitleStyle_optional __swiftcall ConversationNoticeSubtitleStyle.init(rawValue:)(Swift::UInt rawValue)
{
  OUTLINED_FUNCTION_27(v1);
  return result;
}

uint64_t ConversationNoticeSubtitleStyle.rawValue.getter()
{
  return qword_1C377CBD0[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConversationNoticeSubtitleStyle(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationNoticeSubtitleStyle()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ConversationNoticeSubtitleStyle(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationNoticeSubtitleStyle()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::ConversationNoticeSubtitleStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationNoticeSubtitleStyle(Swift::UInt *a1)
{
  return ConversationNoticeSubtitleStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationNoticeSubtitleStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ConversationNoticeSubtitleStyle.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL specialized Notice.isExpired.getter()
{
  uint64_t v20 = type metadata accessor for DateComponents();
  uint64_t v0 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4F27C58], v7);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  type metadata accessor for ReactionNotice(0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = DateComponents.second.getter();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v20);
  if (v17) {
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 992))() < v15;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  uint64_t v20 = type metadata accessor for DateComponents();
  uint64_t v0 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4F27C58], v7);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  type metadata accessor for AccountUpdateNotice(0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = DateComponents.second.getter();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v20);
  if (v17) {
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 992))() < v15;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  uint64_t v20 = type metadata accessor for DateComponents();
  uint64_t v0 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4F27C58], v7);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  type metadata accessor for SessionActionNotice(0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = DateComponents.second.getter();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v20);
  if (v17) {
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 992))() < v15;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  uint64_t v20 = type metadata accessor for DateComponents();
  uint64_t v0 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4F27C58], v7);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  type metadata accessor for AppLaunchNotice(0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = DateComponents.second.getter();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v20);
  if (v17) {
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 992))() < v15;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  uint64_t v20 = type metadata accessor for DateComponents();
  uint64_t v0 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4F27C58], v7);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  type metadata accessor for SystemUpdateNotice(0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = DateComponents.second.getter();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v20);
  if (v17) {
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 992))() < v15;
}

void specialized Notice.isExpired.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v15 = v0;
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_18_6();
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  uint64_t v3 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v5 + 104))(v7 + v6, *MEMORY[0x1E4F27C58], v3);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  v15(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_61();
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_1();
  v9();
  OUTLINED_FUNCTION_139();
  v10();
  DateComponents.second.getter();
  char v12 = v11;
  OUTLINED_FUNCTION_10_6();
  v13();
  if ((v12 & 1) == 0)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v14 + 992))();
  }
  OUTLINED_FUNCTION_28();
}

void Notice.isExpired.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v21 = v1;
  uint64_t v3 = v2;
  type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v4);
  uint64_t v22 = OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_90_0();
  static Calendar.current.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  OUTLINED_FUNCTION_264_0();
  uint64_t v8 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, void, uint64_t))(v10 + 104))(v12 + v11, *MEMORY[0x1E4F27C58], v8);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  OUTLINED_FUNCTION_264_0();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v21, v3);
  MEMORY[0x1F4188790](v16);
  Date.init()();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  char v17 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_4_1();
  v17();
  OUTLINED_FUNCTION_4_1();
  v17();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v22);
  DateComponents.second.getter();
  LOBYTE(v3) = v18;
  OUTLINED_FUNCTION_26_2();
  v19();
  if ((v3 & 1) == 0)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v20 + 992))();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t Notice.dismissalDuration.getter()
{
  return Notice.dismissalDuration.getter();
}

{
  uint64_t v0;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 984))();
}

uint64_t specialized Notice.dismissalDuration.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 984))();
}

uint64_t Notice.style.getter()
{
  return Notice.style.getter();
}

uint64_t specialized Notice.subtitle.getter()
{
  OUTLINED_FUNCTION_49_2();
  type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_32_5();
  v0();
  type metadata accessor for AttributedString.CharacterView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_18_6();
  AttributedString.characters.getter();
  uint64_t v3 = OUTLINED_FUNCTION_39();
  v4(v3);
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1F418B248]);
  return String.init<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = type metadata accessor for AttributedString();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for SessionActionNotice(0) + 32)) == 1) {
    SessionActionNotice.attributionDescription.getter();
  }
  else {
    SessionActionNotice.actionDescription.getter();
  }
  uint64_t v5 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v5 - 8);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v6 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x1F4188790](v6);
  AttributedString.characters.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1F418B248]);
  return String.init<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v0 = type metadata accessor for AttributedString();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppLaunchNotice.noticeContent.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v4 - 8);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v5 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x1F4188790](v5);
  AttributedString.characters.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1F418B248]);
  return String.init<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for AttributedString();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  FaceIDUnavailableNotice.attributedSubtitle.getter();
  uint64_t v4 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x1F4188790](v4);
  AttributedString.characters.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1F418B248]);
  return String.init<A>(_:)();
}

uint64_t Notice.subtitle.getter()
{
  OUTLINED_FUNCTION_81_5();
  type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_63();
  uint64_t v1 = OUTLINED_FUNCTION_30_15();
  v2(v1);
  type metadata accessor for AttributedString.CharacterView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_1_20();
  AttributedString.characters.getter();
  uint64_t v4 = OUTLINED_FUNCTION_29_0();
  v5(v4);
  lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1F418B248]);
  OUTLINED_FUNCTION_30_15();
  return String.init<A>(_:)();
}

void Notice.subtitleStyle.getter(unsigned char *a1@<X8>)
{
}

{
  OUTLINED_FUNCTION_27(a1);
}

BOOL specialized Notice.shouldReplace(notice:)(void *a1)
{
  unsigned int v3 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for ReactionNotice(0) + 28));
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 56))(&v7, v4, v5);
  return v7 >= v3;
}

{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  unsigned int v3 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for SystemUpdateNotice(0) + 32));
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 56))(&v7, v4, v5);
  return v7 >= v3;
}

BOOL specialized Notice.shouldReplace(notice:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_49_2();
  unsigned int v3 = *(unsigned __int8 *)(v0 + *(int *)(v2(v1) + 32));
  OUTLINED_FUNCTION_139_1();
  uint64_t v4 = OUTLINED_FUNCTION_40_15();
  v5(v4);
  return v7 >= v3;
}

BOOL Notice.shouldReplace(notice:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v8, a2, a3);
  unsigned int v3 = v8;
  OUTLINED_FUNCTION_139_1();
  uint64_t v4 = OUTLINED_FUNCTION_40_15();
  v5(v4);
  return v7 >= v3;
}

uint64_t key path getter for SessionActivationRequestNotice.expirationCheck : SessionActivationRequestNotice@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for SessionActivationRequestNotice.expirationCheck : SessionActivationRequestNotice(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out Bool);
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t SessionActivationRequestNotice.expirationCheck.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SessionActivationRequestNotice.expirationCheck.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SessionActivationRequestNotice.expirationCheck.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActivationRequestNotice.isExpired.getter()
{
  return (*v0)() & 1;
}

double SessionActivationRequestNotice.dismissalDuration.getter()
{
  return *(double *)(v0 + 16);
}

void SessionActivationRequestNotice.dismissalDuration.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*SessionActivationRequestNotice.dismissalDuration.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActivationRequestNotice.uuid.getter()
{
  return SessionActivationRequestNotice.uuid.getter();
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t vars8;

  uint64_t v1 = OUTLINED_FUNCTION_159();
  v2(v1);
  uint64_t v3 = OUTLINED_FUNCTION_266_0();
  v0(v3);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_4_18();
  return v5(v4);
}

uint64_t SessionActivationRequestNotice.uuid.setter(uint64_t a1)
{
  return SessionActivationRequestNotice.uuid.setter(a1, (void (*)(void))type metadata accessor for SessionActivationRequestNotice, MEMORY[0x1F418BCB0]);
}

uint64_t (*SessionActivationRequestNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActivationRequestNotice.date.getter()
{
  return SessionActivationRequestNotice.date.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_204();
  v1(v0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = OUTLINED_FUNCTION_35();
  return v3(v2);
}

uint64_t SessionActivationRequestNotice.date.setter()
{
  return SessionActivationRequestNotice.date.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_49_2();
  v1(v0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = OUTLINED_FUNCTION_34_3();
  return v3(v2);
}

uint64_t (*SessionActivationRequestNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SessionActivationRequestNotice.priority.getter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 32));
}

uint64_t SessionActivationRequestNotice.priority.setter(char *a1)
{
  return SessionActivationRequestNotice.priority.setter(a1);
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;

  uint64_t v2 = *a1;
  uint64_t v3 = OUTLINED_FUNCTION_204();
  uint64_t result = v4(v3);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*SessionActivationRequestNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SessionActivationRequestNotice.style.getter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 36));
}

uint64_t SessionActivationRequestNotice.style.setter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  return OUTLINED_FUNCTION_276_0(v0);
}

uint64_t (*SessionActivationRequestNotice.style.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActivationRequestNotice.shouldTransitionToHUD.getter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  return protocol witness for Notice.shouldTransitionToHUD.getter in conformance PushToTalkNotice(v0);
}

uint64_t SessionActivationRequestNotice.shouldTransitionToHUD.setter()
{
  return SessionActivationRequestNotice.shouldTransitionToHUD.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_204();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_275_0(v2);
}

uint64_t (*SessionActivationRequestNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActivationRequestNotice.noticeAccessory.getter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  uint64_t v1 = OUTLINED_FUNCTION_148_2(*(int *)(v0 + 44));
  return outlined copy of NoticeAccessory(v1, v2);
}

uint64_t SessionActivationRequestNotice.noticeAccessory.setter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  return OUTLINED_FUNCTION_168_1(*(int *)(v0 + 44));
}

uint64_t (*SessionActivationRequestNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SessionActivationRequestNotice.actionHandler : SessionActivationRequestNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SessionActivationRequestNotice(0) + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    unsigned __int8 v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    unsigned __int8 v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for SessionActivationRequestNotice.actionHandler : SessionActivationRequestNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unsigned __int8 v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SessionActivationRequestNotice(0) + 48));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t SessionActivationRequestNotice.actionHandler.getter()
{
  return SessionActivationRequestNotice.actionHandler.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_204();
  unint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v2 + 48));
}

uint64_t SessionActivationRequestNotice.actionHandler.setter()
{
  return SessionActivationRequestNotice.actionHandler.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_81_5();
  unint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v2 + 48));
}

uint64_t (*SessionActivationRequestNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SessionActivationRequestNotice.dismissHandler : SessionActivationRequestNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SessionActivationRequestNotice(0) + 52));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    unsigned __int8 v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    unsigned __int8 v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for SessionActivationRequestNotice.dismissHandler : SessionActivationRequestNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unsigned __int8 v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SessionActivationRequestNotice(0) + 52));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t SessionActivationRequestNotice.dismissHandler.getter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v0 + 52));
}

uint64_t SessionActivationRequestNotice.dismissHandler.setter()
{
  uint64_t v0 = type metadata accessor for SessionActivationRequestNotice(0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v0 + 52));
}

uint64_t (*SessionActivationRequestNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActivationRequestNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SessionActivationRequestNotice.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SessionActivationRequestNotice(0);
  uint64_t result = OUTLINED_FUNCTION_192();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SessionActivationRequestNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

unint64_t SessionActivationRequestNotice.description.getter()
{
  uint64_t v0 = (void *)OUTLINED_FUNCTION_300_0();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  uint64_t v1 = OUTLINED_FUNCTION_92_0();
  v3._uint64_t countAndFlagsBits = v2(v1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

uint64_t SessionActivationRequestNotice.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = OUTLINED_FUNCTION_300_0();
  return outlined init with copy of IDSLookupManager(v2, a1);
}

void SessionActivationRequestNotice.equalTo(notice:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionActivationRequestNotice?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_60();
  uint64_t v6 = type metadata accessor for SessionActivationRequestNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_17_0();
  outlined init with copy of IDSLookupManager(v3, (uint64_t)&v21);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  OUTLINED_FUNCTION_252_0();
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_31_13();
    __swift_storeEnumTagSinglePayload(v8, v9, v10, v6);
    _s15ConversationKit11ParticipantVWObTm_3();
    unint64_t v11 = (void *)(v0 + *(int *)(v6 + 60));
    uint64_t v12 = v11[3];
    uint64_t v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    uint64_t v16 = v15;
    __swift_project_boxed_opaque_existential_1((void *)(v1 + *(int *)(v6 + 60)), *(void *)(v1 + *(int *)(v6 + 60) + 24));
    uint64_t v17 = OUTLINED_FUNCTION_69_0();
    if (v14 != v18(v17) || v16 != v19) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOhTm_6();
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v1, 1, 1, v6);
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for SessionActivationRequestNotice?);
  }
  OUTLINED_FUNCTION_15_0();
}

uint64_t (*protocol witness for Notice.uuid.modify in conformance SessionActivationRequestNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for Notice.title.getter in conformance SessionActivationRequestNotice()
{
  return SessionActivationRequestNotice.title.getter();
}

uint64_t protocol witness for Notice.subtitle.getter in conformance SessionActivationRequestNotice()
{
  return specialized Notice.subtitle.getter();
}

uint64_t (*protocol witness for Notice.actionHandler.modify in conformance SessionActivationRequestNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*protocol witness for Notice.dismissHandler.modify in conformance SessionActivationRequestNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL protocol witness for Notice.shouldReplace(notice:) in conformance SessionActivationRequestNotice()
{
  return specialized Notice.shouldReplace(notice:)();
}

ConversationKit::AccountUpdateNotice::NoticeType_optional __swiftcall AccountUpdateNotice.NoticeType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AccountUpdateNotice.NoticeType.init(rawValue:), v3);
  result.ConversationKit::VideoReaction value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t AccountUpdateNotice.NoticeType.rawValue.getter()
{
  OUTLINED_FUNCTION_240_0();
  uint64_t v2 = 1952867692;
  if (!v3) {
    uint64_t v2 = 0x6E456172656D6163;
  }
  if (v0) {
    return v2;
  }
  else {
    return v1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccountUpdateNotice.NoticeType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccountUpdateNotice.NoticeType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AccountUpdateNotice.NoticeType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccountUpdateNotice.NoticeType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::AccountUpdateNotice::NoticeType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccountUpdateNotice.NoticeType(Swift::String *a1)
{
  return AccountUpdateNotice.NoticeType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AccountUpdateNotice.NoticeType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AccountUpdateNotice.NoticeType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void AccountUpdateNotice.type.getter(unsigned char *a1@<X8>)
{
}

unsigned char *AccountUpdateNotice.type.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*AccountUpdateNotice.type.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

unint64_t AccountUpdateNotice.description.getter()
{
  OUTLINED_FUNCTION_240_0();
  uint64_t v4 = 1952867692;
  if (!v5)
  {
    uint64_t v4 = 0x6E456172656D6163;
    unint64_t v3 = 0xED000064656C6261;
  }
  if (v0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v2;
  }
  if (v0) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = v1;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t AccountUpdateNotice.participants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccountUpdateNotice.participants.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AccountUpdateNotice.participants.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AccountUpdateNotice.uuid.getter()
{
  return SessionActivationRequestNotice.uuid.getter();
}

uint64_t AccountUpdateNotice.uuid.setter(uint64_t a1)
{
  return SessionActivationRequestNotice.uuid.setter(a1, (void (*)(void))type metadata accessor for AccountUpdateNotice, MEMORY[0x1F418BCB0]);
}

uint64_t SessionActivationRequestNotice.uuid.setter(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t))
{
  a2(0);
  uint64_t v4 = OUTLINED_FUNCTION_266_0();
  a3(v4);
  OUTLINED_FUNCTION_0();
  uint64_t v5 = OUTLINED_FUNCTION_41_0();
  return v6(v5);
}

uint64_t (*AccountUpdateNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AccountUpdateNotice.date.getter()
{
  return SessionActivationRequestNotice.date.getter();
}

uint64_t AccountUpdateNotice.date.setter()
{
  return SessionActivationRequestNotice.date.setter();
}

uint64_t (*AccountUpdateNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void AccountUpdateNotice.priority.getter()
{
  uint64_t updated = type metadata accessor for AccountUpdateNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(updated + 32));
}

uint64_t AccountUpdateNotice.priority.setter(char *a1)
{
  return SessionActivationRequestNotice.priority.setter(a1);
}

uint64_t (*AccountUpdateNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AccountUpdateNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t AccountUpdateNotice.bundleIdentifier.setter()
{
  uint64_t v3 = OUTLINED_FUNCTION_81_5();
  type metadata accessor for AccountUpdateNotice(v3);
  uint64_t result = OUTLINED_FUNCTION_192();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*AccountUpdateNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AccountUpdateNotice.shouldTransitionToHUD.getter()
{
  uint64_t updated = type metadata accessor for AccountUpdateNotice(0);
  return protocol witness for Notice.shouldTransitionToHUD.getter in conformance PushToTalkNotice(updated);
}

uint64_t AccountUpdateNotice.shouldTransitionToHUD.setter()
{
  return SessionActivationRequestNotice.shouldTransitionToHUD.setter();
}

uint64_t (*AccountUpdateNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for AccountUpdateNotice.actionHandler : AccountUpdateNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccountUpdateNotice(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    unint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for AccountUpdateNotice.actionHandler : AccountUpdateNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AccountUpdateNotice(0) + 44));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t AccountUpdateNotice.actionHandler.getter()
{
  return AccountUpdateNotice.actionHandler.getter(type metadata accessor for AccountUpdateNotice);
}

uint64_t AccountUpdateNotice.actionHandler.setter()
{
  return AccountUpdateNotice.actionHandler.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_81_5();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v2 + 44));
}

uint64_t (*AccountUpdateNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for AccountUpdateNotice.dismissHandler : AccountUpdateNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccountUpdateNotice(0) + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    unint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for AccountUpdateNotice.dismissHandler : AccountUpdateNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AccountUpdateNotice(0) + 48));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t AccountUpdateNotice.dismissHandler.getter()
{
  return SessionActivationRequestNotice.actionHandler.getter();
}

uint64_t AccountUpdateNotice.dismissHandler.setter()
{
  return SessionActivationRequestNotice.actionHandler.setter();
}

uint64_t (*AccountUpdateNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AccountUpdateNotice.coalesce(with:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccountUpdateNotice?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_30_0();
  type metadata accessor for AccountUpdateNotice(v5);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_70_4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (!OUTLINED_FUNCTION_107_3())
  {
    OUTLINED_FUNCTION_53(v2);
    outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for AccountUpdateNotice?);
    return 0;
  }
  OUTLINED_FUNCTION_54_8(v2);
  OUTLINED_FUNCTION_193_0();
  char v7 = *v0;
  if ((specialized == infix<A>(_:_:)(*v1, *v0) & 1) == 0)
  {
    char v9 = AccountUpdateNotice.hasSameParticipants(as:)((uint64_t)v0);
    _s15ConversationKit11ParticipantVWOhTm_6();
    if (v9)
    {
      char *v1 = v7;
      return 1;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  _s15ConversationKit11ParticipantVWOhTm_6();
  return 1;
}

uint64_t AccountUpdateNotice.hasSameParticipants(as:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 16) != *(void *)(v4 + 16)) {
    return 0;
  }
  uint64_t v8 = v3;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v8);
  uint64_t v8 = v4;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v8);
  OUTLINED_FUNCTION_35();
  specialized static Array<A>.== infix(_:_:)();
  char v6 = v5;
  swift_release();
  swift_release();
  return v6 & 1;
}

uint64_t AccountUpdateNotice.noticeAccessory.getter()
{
  return AccountUpdateNotice.noticeAccessory.getter(type metadata accessor for AccountUpdateNotice);
}

uint64_t AccountUpdateNotice.noticeAccessory.setter(uint64_t a1)
{
  return AccountUpdateNotice.noticeAccessory.setter(a1, type metadata accessor for AccountUpdateNotice);
}

uint64_t (*AccountUpdateNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void AccountUpdateNotice.equalTo(notice:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccountUpdateNotice?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_221();
  uint64_t updated = type metadata accessor for AccountUpdateNotice(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_196();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v18 - v12;
  outlined init with copy of IDSLookupManager(v4, (uint64_t)&v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  OUTLINED_FUNCTION_252_0();
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_31_13();
    __swift_storeEnumTagSinglePayload(v14, v15, v16, updated);
    _s15ConversationKit11ParticipantVWObTm_3();
    char v17 = specialized == infix<A>(_:_:)(*v1, *v13);
    _s15ConversationKit11ParticipantVWOcTm_9();
    _s15ConversationKit11ParticipantVWOcTm_9();
    if (v17) {
      AccountUpdateNotice.hasSameParticipants(as:)(v0);
    }
    _s15ConversationKit11ParticipantVWOhTm_6();
    OUTLINED_FUNCTION_69_0();
    _s15ConversationKit11ParticipantVWOhTm_6();
    OUTLINED_FUNCTION_163();
    _s15ConversationKit11ParticipantVWOhTm_6();
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, updated);
    outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for AccountUpdateNotice?);
  }
  OUTLINED_FUNCTION_15_0();
}

uint64_t protocol witness for Notice.subtitle.getter in conformance AccountUpdateNotice()
{
  return specialized Notice.subtitle.getter();
}

uint64_t (*protocol witness for Notice.actionHandler.modify in conformance AccountUpdateNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL protocol witness for Notice.shouldReplace(notice:) in conformance AccountUpdateNotice()
{
  return specialized Notice.shouldReplace(notice:)();
}

void SessionActionNotice.QueueItemType.init(notice:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = objc_msgSend(a1, sel_queueItemType);
  if (v5 == (id)2)
  {
    outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_310_0();
    if (v9) {
      unint64_t v8 = 0xE000000000000000;
    }
    else {
      unint64_t v8 = v2;
    }
    char v7 = 1;
  }
  else if (v5 == (id)1)
  {
    outlined bridged method (pb) of @objc TUConversationNotice.item.getter(a1);
    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_310_0();
    unint64_t v8 = 0xE000000000000000;
    if (!v9) {
      unint64_t v8 = v2;
    }
  }
  else
  {

    uint64_t v6 = 0;
    unint64_t v8 = 0;
    char v7 = 2;
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v7;
}

uint64_t static SessionActionNotice.QueueItemType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        if (v3 == v6 && v2 == v5) {
          char v9 = 1;
        }
        else {
          char v9 = OUTLINED_FUNCTION_245_0();
        }
        outlined copy of CallScreening.EndingAction(v6, v5, 1u);
        outlined copy of CallScreening.EndingAction(v3, v2, 1u);
        outlined consume of CallScreening.EndingAction(v3, v2, 1u);
        uint64_t v14 = v6;
        uint64_t v15 = v5;
        unsigned __int8 v16 = 1;
LABEL_25:
        outlined consume of CallScreening.EndingAction(v14, v15, v16);
        return v9 & 1;
      }
    }
    else if (v7 == 2 && (v5 | v6) == 0)
    {
      uint64_t v12 = OUTLINED_FUNCTION_39();
      outlined consume of CallScreening.EndingAction(v12, v13, 2u);
      outlined consume of CallScreening.EndingAction(0, 0, 2u);
      char v9 = 1;
      return v9 & 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 16))
  {
    if (v3 == v6 && v2 == v5) {
      char v9 = 1;
    }
    else {
      char v9 = OUTLINED_FUNCTION_245_0();
    }
    outlined copy of CallScreening.EndingAction(v6, v5, 0);
    outlined copy of CallScreening.EndingAction(v3, v2, 0);
    outlined consume of CallScreening.EndingAction(v3, v2, 0);
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    unsigned __int8 v16 = 0;
    goto LABEL_25;
  }
  outlined copy of CallScreening.EndingAction(*(void *)a2, *(void *)(a2 + 8), v7);
  outlined copy of CallScreening.EndingAction(v3, v2, v4);
  outlined consume of CallScreening.EndingAction(v3, v2, v4);
  outlined consume of CallScreening.EndingAction(v6, v5, v7);
  char v9 = 0;
  return v9 & 1;
}

BOOL SessionActionNotice.QueueItemType.isSong.getter()
{
  return *(unsigned char *)(v0 + 16) == 0;
}

uint64_t SessionActionNotice.QueueItemType.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (!*(unsigned char *)(v0 + 16))
  {
    uint64_t v4 = 0x28676E6F73;
    String.append(_:)(*(Swift::String *)&v1);
    uint64_t v1 = OUTLINED_FUNCTION_161_0();
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    uint64_t v4 = 0x656E6961746E6F63;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v1);
    return v4;
  }
  return 0x6E776F6E6B6E75;
}

uint64_t SessionActionNotice.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of SessionActionNotice.NoticeType(v2, v3, v4);
}

__n128 SessionActionNotice.type.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of SessionActionNotice.NoticeType(*v1, v1[1], v1[2]);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*SessionActionNotice.type.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.participant.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_206();
  return outlined init with copy of Participant?(v1 + *(int *)(v2 + 20), v0, &demangling cache variable for type metadata for Participant?);
}

uint64_t SessionActionNotice.participant.setter(uint64_t a1)
{
  type metadata accessor for SessionActionNotice(0);
  OUTLINED_FUNCTION_64_1();
  return _s15ConversationKit11ParticipantVSgWOdTm_0(a1, v2, &demangling cache variable for type metadata for Participant?);
}

uint64_t (*SessionActionNotice.participant.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.conversation.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_206();
  return outlined init with copy of IDSLookupManager(v1 + *(int *)(v2 + 24), v0);
}

uint64_t SessionActionNotice.conversation.setter()
{
  uint64_t v1 = type metadata accessor for SessionActionNotice(0);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(int *)(v1 + 24));
  uint64_t v2 = (long long *)OUTLINED_FUNCTION_35();
  return outlined init with take of Notice(v2, v3);
}

uint64_t (*SessionActionNotice.conversation.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.activity.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_206();
  return outlined init with copy of IDSLookupManager(v1 + *(int *)(v2 + 28), v0);
}

uint64_t SessionActionNotice.activity.setter()
{
  uint64_t v1 = type metadata accessor for SessionActionNotice(0);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(int *)(v1 + 28));
  uint64_t v2 = (long long *)OUTLINED_FUNCTION_35();
  return outlined init with take of Notice(v2, v3);
}

uint64_t (*SessionActionNotice.activity.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.triggeredLocally.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SessionActionNotice(0) + 32));
}

uint64_t SessionActionNotice.triggeredLocally.setter(char a1)
{
  uint64_t result = type metadata accessor for SessionActionNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*SessionActionNotice.triggeredLocally.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.deviceFamily.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SessionActionNotice(0) + 36));
}

uint64_t SessionActionNotice.deviceFamily.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for SessionActionNotice(0);
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*SessionActionNotice.deviceFamily.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.uuid.getter()
{
  OUTLINED_FUNCTION_206();
  OUTLINED_FUNCTION_281_0();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t SessionActionNotice.uuid.setter()
{
  type metadata accessor for SessionActionNotice(0);
  OUTLINED_FUNCTION_281_0();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*SessionActionNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.date.getter()
{
  OUTLINED_FUNCTION_206();
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t SessionActionNotice.date.setter()
{
  type metadata accessor for SessionActionNotice(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*SessionActionNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SessionActionNotice.bundleIdentifier.setter()
{
  OUTLINED_FUNCTION_215();
  uint64_t result = OUTLINED_FUNCTION_192();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SessionActionNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SessionActionNotice.shouldTransitionToHUD.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SessionActionNotice(0) + 52));
}

uint64_t SessionActionNotice.shouldTransitionToHUD.setter()
{
  uint64_t v0 = type metadata accessor for SessionActionNotice(0);
  return OUTLINED_FUNCTION_274(v0);
}

uint64_t (*SessionActionNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SessionActionNotice.actionHandler : SessionActionNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SessionActionNotice(0) + 56));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    int v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    int v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for SessionActionNotice.actionHandler : SessionActionNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  int v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SessionActionNotice(0) + 56));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t SessionActionNotice.actionHandler.getter()
{
  uint64_t v0 = type metadata accessor for SessionActionNotice(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v0 + 56));
}

uint64_t SessionActionNotice.actionHandler.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_215();
  return OUTLINED_FUNCTION_21_35(*(int *)(v0 + 56));
}

uint64_t (*SessionActionNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SessionActionNotice.dismissHandler : SessionActionNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SessionActionNotice(0) + 60));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    int v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    int v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for SessionActionNotice.dismissHandler : SessionActionNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  int v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SessionActionNotice(0) + 60));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t SessionActionNotice.dismissHandler.getter()
{
  uint64_t v0 = type metadata accessor for SessionActionNotice(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v0 + 60));
}

uint64_t SessionActionNotice.dismissHandler.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_215();
  return OUTLINED_FUNCTION_21_35(*(int *)(v0 + 60));
}

uint64_t (*SessionActionNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SessionActionNotice.priority.getter(unsigned char *a1@<X8>)
{
}

void SessionActionNotice.style.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_30_0();
  uint64_t v8 = type metadata accessor for Collaboration(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_62();
  if (static Platform.current.getter() == 1)
  {
    uint64_t v11 = *v0;
    uint64_t v10 = v0[1];
    uint64_t v12 = v0[3];
    if ((unint64_t)v0[2] >> 62 != 3) {
      goto LABEL_51;
    }
    OUTLINED_FUNCTION_33_24();
    if (v13)
    {
      if (!(v10 | v11 | v12)) {
        goto LABEL_51;
      }
    }
    if (v11 == 1 && !v10)
    {
      OUTLINED_FUNCTION_33_24();
      if (v13)
      {
        if (!v12) {
          goto LABEL_51;
        }
      }
    }
    if (v11 == 2 && !v10)
    {
      OUTLINED_FUNCTION_33_24();
      if (v13)
      {
        if (!v12) {
          goto LABEL_51;
        }
      }
    }
    if ((v11 != 3 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12)
      && (v11 != 4 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12)
      && (v11 != 5 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12)
      && (v11 != 6 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12)
      && (v11 != 7 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12)
      && (v11 != 8 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12)
      && (v11 != 9 || v10 || (OUTLINED_FUNCTION_33_24(), !v13) || v12))
    {
      OUTLINED_FUNCTION_97_3();
      uint64_t v22 = *(uint64_t *)((char *)v0 + v21 + 24);
      uint64_t v23 = *(uint64_t *)((char *)v0 + v21 + 32);
      __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)v0 + v21), v22);
      (*(void (**)(uint64_t, uint64_t))(v23 + 112))(v22, v23);
      uint64_t v24 = OUTLINED_FUNCTION_70_3();
      if (__swift_getEnumTagSinglePayload(v24, v25, v8) == 1)
      {
        outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Collaboration?);
      }
      else
      {
        _s15ConversationKit11ParticipantVWObTm_3();
        int v26 = *(unsigned __int8 *)(v2 + 16);
        _s15ConversationKit11ParticipantVWOhTm_6();
        if (v26 != 2)
        {
          char v20 = 1;
          goto LABEL_53;
        }
      }
    }
    else
    {
LABEL_51:
      uint64_t v14 = OUTLINED_FUNCTION_258();
      outlined copy of SessionActionNotice.NoticeType(v14, v15, v16);
      uint64_t v17 = OUTLINED_FUNCTION_258();
      outlined consume of SessionActionNotice.NoticeType(v17, v18, v19);
      OUTLINED_FUNCTION_23_34(10);
    }
  }
  char v20 = 0;
LABEL_53:
  *uint64_t v4 = v20;
  OUTLINED_FUNCTION_28();
}

uint64_t SessionActionNotice.dismissalDuration.getter()
{
  unint64_t v1 = v0[2];
  if (v1 >> 62 != 3) {
    goto LABEL_36;
  }
  uint64_t v2 = v0[3];
  uint64_t v4 = *v0;
  uint64_t v3 = v0[1];
  BOOL v5 = v1 == 0xC000000000000000 && (v2 | *v0 | v3) == 0;
  if (v5)
  {
LABEL_33:
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    return (*(uint64_t (**)(void))(v13 + 968))();
  }
  if (v2 || ((OUTLINED_FUNCTION_254_0(), v5) ? (BOOL v6 = v4 == 1) : (BOOL v6 = 0), v6 ? (v7 = v3 == 0) : (v7 = 0), !v7))
  {
    if (v2 || ((OUTLINED_FUNCTION_254_0(), v5) ? (BOOL v8 = v4 == 7) : (BOOL v8 = 0), v8 ? (v9 = v3 == 0) : (v9 = 0), !v9))
    {
      if (!v2)
      {
        BOOL v12 = v1 == 0xC000000000000000 && v4 == 10;
        if (v12 && !v3) {
          goto LABEL_33;
        }
      }
LABEL_36:
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_50();
      return (*(uint64_t (**)(void))(v14 + 984))();
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v10 + 976))();
}

void SessionActionNotice.coalesce(with:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionActionNotice?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  BOOL v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SessionActionNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_171_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (!OUTLINED_FUNCTION_146_0())
  {
    OUTLINED_FUNCTION_53((uint64_t)v5);
    outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for SessionActionNotice?);
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_54_8((uint64_t)v5);
  OUTLINED_FUNCTION_193_0();
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  unint64_t v10 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v12 = *v0;
  uint64_t v11 = v0[1];
  unint64_t v14 = v0[2];
  uint64_t v13 = v0[3];
  if (v10 >> 62)
  {
    if (v10 >> 62 == 3)
    {
      if ((OUTLINED_FUNCTION_67_6(), v15) && !(v7 | v8 | v9)
        || v8 == 1 && !v7 && (OUTLINED_FUNCTION_67_6(), v15) && !v9
        || v8 == 7 && !v7 && (OUTLINED_FUNCTION_67_6(), v15) && !v9)
      {
        OUTLINED_FUNCTION_41_17();
        _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_27:
        OUTLINED_FUNCTION_28();
        return;
      }
    }
    OUTLINED_FUNCTION_182_0();
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_182_0();
  if (v14 >> 62)
  {
LABEL_25:
    outlined consume of SessionActionNotice.NoticeType(v8, v7, v10);
    uint64_t v16 = v12;
    uint64_t v17 = v11;
    unint64_t v18 = v14;
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_41_17();
  uint64_t v19 = v10;
  outlined consume of SessionActionNotice.NoticeType(v12, v11, v14);
  if (v19 || (_BYTE)v14)
  {
    uint64_t v16 = v8;
    uint64_t v17 = v7;
    unint64_t v18 = v10;
LABEL_26:
    outlined consume of SessionActionNotice.NoticeType(v16, v17, v18);
    OUTLINED_FUNCTION_35();
    outlined assign with take of SessionActionNotice();
    goto LABEL_27;
  }
  _s15ConversationKit11ParticipantVWOhTm_6();
  if (!__OFADD__(v9, v13))
  {
    outlined consume of SessionActionNotice.NoticeType(*v1, v1[1], v1[2]);
    uint64_t *v1 = v8;
    v1[1] = v7;
    v1[2] = 0;
    v1[3] = v9 + v13;
    goto LABEL_27;
  }
  __break(1u);
}

void SessionActionNotice.shouldReplace(notice:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionActionNotice?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SessionActionNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_63();
  outlined init with copy of IDSLookupManager(v3, (uint64_t)&v67);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if ((OUTLINED_FUNCTION_146_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_53((uint64_t)v7);
    outlined destroy of SystemUpdateNotice?((uint64_t)v7, &demangling cache variable for type metadata for SessionActionNotice?);
    uint64_t v9 = *v0;
    unint64_t v10 = v0[2];
LABEL_99:
    if (v10 >> 62 == 3)
    {
      OUTLINED_FUNCTION_247_0();
      if (!v15 || v52 | v9 | v51)
      {
        if (v52 || ((OUTLINED_FUNCTION_247_0(), v15) ? (BOOL v54 = v9 == 1) : (BOOL v54 = 0), !v54 || v53))
        {
          if (!v52) {
            OUTLINED_FUNCTION_247_0();
          }
        }
      }
    }
    OUTLINED_FUNCTION_139_1();
    uint64_t v55 = OUTLINED_FUNCTION_40_15();
    v56(v55);
    goto LABEL_117;
  }
  OUTLINED_FUNCTION_54_8((uint64_t)v7);
  OUTLINED_FUNCTION_69_0();
  _s15ConversationKit11ParticipantVWObTm_3();
  uint64_t v9 = *v0;
  unint64_t v10 = v0[2];
  unint64_t v11 = v10 >> 62;
  if (v10 >> 62 == 3)
  {
    OUTLINED_FUNCTION_221_0();
    if (v15 && !(v13 | v9 | v12)) {
      goto LABEL_27;
    }
    if (!v13)
    {
      OUTLINED_FUNCTION_221_0();
      BOOL v15 = v15 && v9 == 1;
      if (v15 && !v14) {
        goto LABEL_27;
      }
    }
    if (!v13 && ((OUTLINED_FUNCTION_221_0(), v15) ? (BOOL v17 = v9 == 7) : (BOOL v17 = 0), v17 && !v16)
      || (char v18 = 0, v19 = 1, !v13) && ((OUTLINED_FUNCTION_247_0(), v15) ? (v21 = v9 == 10) : (v21 = 0), v21 && !v20))
    {
LABEL_27:
      int v19 = 0;
      char v18 = 1;
    }
  }
  else
  {
    char v18 = 0;
    int v19 = 1;
  }
  uint64_t v23 = *v1;
  uint64_t v22 = v1[1];
  unint64_t v25 = v1[2];
  uint64_t v24 = v1[3];
  unint64_t v26 = v25 >> 62;
  if (v25 >> 62 == 3)
  {
    if (v25 == 0xC000000000000000 && (v22 | v23 | v24) == 0) {
      goto LABEL_97;
    }
    BOOL v28 = v23 == 1 && v22 == 0;
    BOOL v29 = v28 && v25 == 0xC000000000000000;
    BOOL v30 = v29 && v24 == 0;
    if (v30
      || (v23 == 7 ? (BOOL v31 = v22 == 0) : (BOOL v31 = 0),
          v31 ? (BOOL v32 = v25 == 0xC000000000000000) : (BOOL v32 = 0),
          v32 ? (BOOL v33 = v24 == 0) : (BOOL v33 = 0),
          v33
       || (v23 == 10 ? (BOOL v34 = v22 == 0) : (BOOL v34 = 0),
           v34 ? (BOOL v35 = v25 == 0xC000000000000000) : (BOOL v35 = 0),
           v35 ? (BOOL v36 = v24 == 0) : (BOOL v36 = 0),
           v36)))
    {
LABEL_97:
      if (v18) {
        goto LABEL_66;
      }
      goto LABEL_98;
    }
  }
  if (!v19)
  {
LABEL_98:
    _s15ConversationKit11ParticipantVWOhTm_6();
    goto LABEL_99;
  }
LABEL_66:
  uint64_t v66 = v9;
  unint64_t v37 = v11;
  uint64_t v38 = OUTLINED_FUNCTION_311_0();
  outlined copy of SessionActionNotice.NoticeType(v38, v39, v40);
  _s15ConversationKit11ParticipantVWOhTm_6();
  uint64_t v41 = v0[1];
  if (!v26)
  {
    if (!v37)
    {
      outlined copy of CallScreening.EndingAction(v66, v41, v10);
LABEL_116:
      uint64_t v60 = OUTLINED_FUNCTION_311_0();
      outlined consume of SessionActionNotice.NoticeType(v60, v61, v62);
      uint64_t v63 = OUTLINED_FUNCTION_284();
      outlined consume of SessionActionNotice.NoticeType(v63, v64, v65);
      goto LABEL_117;
    }
LABEL_115:
    uint64_t v57 = OUTLINED_FUNCTION_284();
    outlined copy of SessionActionNotice.NoticeType(v57, v58, v59);
    goto LABEL_116;
  }
  if (v26 != 3
    || v37 < 3
    || v23 != 5
    || v22 != 0
    || v25 != 0xC000000000000000
    || v24 != 0
    || v0[3] != 0
    || v10 != 0xC000000000000000
    || v66 != 4
    || v41 != 0)
  {
    goto LABEL_115;
  }
  outlined consume of SessionActionNotice.NoticeType(5, 0, 0xC000000000000000);
  OUTLINED_FUNCTION_273_0();
LABEL_117:
  OUTLINED_FUNCTION_28();
}

uint64_t SessionActionNotice.shouldPerformActionHandlerOnNoticeTap.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  unint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  if (v4 >> 62 != 3
    || (v4 == 0xC000000000000000 ? (BOOL v5 = (v1 | v2 | v3) == 0) : (BOOL v5 = 0),
        v5
     || (v2 == 1 ? (BOOL v6 = v1 == 0) : (BOOL v6 = 0),
         v6 ? (BOOL v7 = v4 == 0xC000000000000000) : (BOOL v7 = 0),
         v7 ? (BOOL v8 = v3 == 0) : (BOOL v8 = 0),
         v8
      || v2 == 2 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 3 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 4 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 5 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 6 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 7 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 8 && !v1 && v4 == 0xC000000000000000 && !v3
      || v2 == 9 && !v1 && v4 == 0xC000000000000000 && !v3)))
  {
    outlined copy of SessionActionNotice.NoticeType(*v0, v0[1], v0[2]);
    outlined copy of SessionActionNotice.NoticeType(v2, v1, v4);
    OUTLINED_FUNCTION_279_0();
    OUTLINED_FUNCTION_23_34(10);
    OUTLINED_FUNCTION_279_0();
    return 1;
  }
  else
  {
    outlined consume of SessionActionNotice.NoticeType(10, 0, 0xC000000000000000);
    outlined consume of SessionActionNotice.NoticeType(10, 0, 0xC000000000000000);
    outlined consume of SessionActionNotice.NoticeType(10, 0, 0xC000000000000000);
    return 0;
  }
}

uint64_t SessionActionNotice.isSharePlayActivitySupported.getter()
{
  uint64_t v1 = type metadata accessor for SessionActionNotice(0);
  uint64_t v2 = OUTLINED_FUNCTION_61_9((void *)(v0 + *(int *)(v1 + 28)));
  unint64_t v4 = (void *)v3(v2);
  if (!v4) {
    return 1;
  }
  BOOL v5 = v4;
  id v6 = objc_msgSend(v4, sel_activity);

  id v7 = objc_msgSend(v6, sel_isSupported);
  return (uint64_t)v7;
}

uint64_t SessionActionNotice.actionDescription.getter()
{
  uint64_t v2 = (uint64_t)v0;
  uint64_t v4 = *v0;
  unint64_t v3 = v0[1];
  unint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  switch(v6 >> 62)
  {
    case 1uLL:
      if (!*(void *)(v2 + 16))
      {
        OUTLINED_FUNCTION_26_29();
        id v34 = objc_msgSend(self, sel_conversationKit);
        uint64_t v35 = OUTLINED_FUNCTION_34_9();
        OUTLINED_FUNCTION_19_1(v35, v36);
        swift_bridgeObjectRelease();

        static String.localizedStringWithFormat(_:_:)();
        OUTLINED_FUNCTION_36_9();
        goto LABEL_73;
      }
      return OUTLINED_FUNCTION_35();
    case 2uLL:
      uint64_t v11 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0) {
        uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v11) {
        goto LABEL_48;
      }
      OUTLINED_FUNCTION_268_0(0);
      if (v12) {
        uint64_t v2 = 0xD000000000000013;
      }
      else {
        uint64_t v2 = 0xD000000000000021;
      }
      if (v12) {
        unint64_t v10 = 0x80000001C37A97B0;
      }
      else {
        unint64_t v10 = 0x80000001C37A9780;
      }
      goto LABEL_19;
    case 3uLL:
      OUTLINED_FUNCTION_82_3();
      BOOL v17 = v17 && v16 == 0;
      if (v17)
      {
        uint64_t v24 = OUTLINED_FUNCTION_75_2();
        unint64_t v26 = (void *)v25(v24);
        if (v26)
        {
          uint64_t v27 = v26;
          id v28 = objc_msgSend(v26, sel_activity);
          unsigned int v29 = objc_msgSend(v28, sel_isScreenSharingActivity);

          if (v29)
          {
            OUTLINED_FUNCTION_305_0();
            if (v31)
            {
              uint64_t v32 = v30 - 7;
              uint64_t v33 = 0x80000001C37A9AB0;
            }
            else
            {
              uint64_t v73 = OUTLINED_FUNCTION_296();
              uint64_t v32 = String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v73, v75, v74 + 7, 0x80000001C379D530);
              uint64_t v33 = v76;
            }
            goto LABEL_83;
          }
        }
        OUTLINED_FUNCTION_253();
        OUTLINED_FUNCTION_244_0();
        id v37 = objc_msgSend(self, sel_conversationKit);
LABEL_64:
        uint64_t v53 = (objc_class *)v37;
        uint64_t v54 = OUTLINED_FUNCTION_77_4();
        v55.super.Class isa = v53;
        OUTLINED_FUNCTION_2_29(v54, v56, v57, v58, v55);
        OUTLINED_FUNCTION_230();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v59 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v59 + 16) = xmmword_1C3769620;
        uint64_t v60 = __swift_project_boxed_opaque_existential_1((void *)v4, *(void *)(v4 + 24));
        OUTLINED_FUNCTION_60_7();
        v61();
        OUTLINED_FUNCTION_47_6();
        *(void *)(v59 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v59 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v59 + 32) = v60;
        *(void *)(v59 + 40) = v4;
        OUTLINED_FUNCTION_124_1();
        static String.localizedStringWithFormat(_:_:)();
        goto LABEL_65;
      }
      if (v4 == 1 && v3 == 0 && v6 == v15 && v5 == 0)
      {
        uint64_t v45 = OUTLINED_FUNCTION_75_2();
        uint64_t v47 = (void *)v46(v45);
        if (v47)
        {
          unint64_t v48 = v47;
          id v49 = objc_msgSend(v47, sel_activity);
          unsigned int v50 = objc_msgSend(v49, sel_isScreenSharingActivity);

          if (v50)
          {
            OUTLINED_FUNCTION_305_0();
            if (v52)
            {
              uint64_t v32 = v51 - 9;
              uint64_t v33 = 0x80000001C37A9A60;
            }
            else
            {
              uint64_t v77 = OUTLINED_FUNCTION_296();
              uint64_t v32 = String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v77, v79, v78 + 5, 0x80000001C379D560);
              uint64_t v33 = v80;
            }
LABEL_83:
            int v81 = (objc_class *)objc_msgSend(self, sel_conversationKit);
            OUTLINED_FUNCTION_13_11();
            v82.super.Class isa = v81;
            OUTLINED_FUNCTION_2_29(v32, v33, 0x61737265766E6F43, 0xEF74694B6E6F6974, v82);
            swift_bridgeObjectRelease();

            goto LABEL_72;
          }
        }
        OUTLINED_FUNCTION_253();
        OUTLINED_FUNCTION_243();
        id v37 = objc_msgSend(self, sel_conversationKit);
        goto LABEL_64;
      }
      BOOL v23 = v4 == 2 && v3 == 0 && v6 == v15 && v5 == 0;
      if (v23 || v4 == 3 && !v3 && v6 == v15 && !v5)
      {
LABEL_48:
        OUTLINED_FUNCTION_268_0(0);
        goto LABEL_70;
      }
      if (v4 == 4 && !v3 && v6 == v15 && !v5) {
        goto LABEL_81;
      }
      if (v4 == 5 && !v3 && v6 == v15 && !v5)
      {
        uint64_t v83 = type metadata accessor for SessionActionNotice(0);
        uint64_t v84 = (objc_class *)objc_msgSend(self, sel_conversationKit);
        OUTLINED_FUNCTION_13_11();
        uint64_t v85 = OUTLINED_FUNCTION_69_0();
        v86.super.Class isa = v84;
        OUTLINED_FUNCTION_2_29(v85, v87, 0x61737265766E6F43, 0xEF74694B6E6F6974, v86);
        OUTLINED_FUNCTION_178_0();
        swift_bridgeObjectRelease();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v88 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v88 + 16) = xmmword_1C3769620;
        uint64_t v89 = *(int *)(v83 + 28);
        goto LABEL_89;
      }
      if (v4 == 6 && !v3 && v6 == v15 && !v5)
      {
LABEL_81:
        OUTLINED_FUNCTION_26_29();
        OUTLINED_FUNCTION_244_0();
        id v65 = objc_msgSend(self, sel_conversationKit);
LABEL_71:
        uint64_t v66 = (objc_class *)v65;
        uint64_t v67 = OUTLINED_FUNCTION_77_4();
        v68.super.Class isa = v66;
        OUTLINED_FUNCTION_2_29(v67, v69, v70, v71, v68);
        OUTLINED_FUNCTION_230();

LABEL_72:
        static String.localizedStringWithFormat(_:_:)();
        OUTLINED_FUNCTION_36_9();
        goto LABEL_73;
      }
      if (v4 == 7 && !v3 && v6 == v15 && !v5)
      {
        id v94 = (objc_class *)objc_msgSend(self, sel_conversationKit);
        OUTLINED_FUNCTION_13_11();
        v95.super.Class isa = v94;
        OUTLINED_FUNCTION_2_29(v96, 0x80000001C37A9710, 0x61737265766E6F43, 0xEF74694B6E6F6974, v95);
        OUTLINED_FUNCTION_178_0();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v88 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v88 + 16) = xmmword_1C3769620;
        uint64_t v89 = *(int *)(type metadata accessor for SessionActionNotice(0) + 28);
LABEL_89:
        uint64_t v90 = (void *)(v2 + v89);
        uint64_t v91 = *(void *)(v2 + v89 + 24);
        uint64_t v92 = __swift_project_boxed_opaque_existential_1(v90, v91);
        OUTLINED_FUNCTION_60_7();
        v93();
        OUTLINED_FUNCTION_36_9();
        *(void *)(v88 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v88 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v88 + 32) = v91;
        *(void *)(v88 + 40) = v92;
LABEL_68:
        static String.localizedStringWithFormat(_:_:)();
        OUTLINED_FUNCTION_229_0();
        goto LABEL_65;
      }
      if (v4 == 8 && !v3 && v6 == v15 && !v5)
      {
        uint64_t v97 = type metadata accessor for SessionActionNotice(0);
        __swift_project_boxed_opaque_existential_1((void *)(v2 + *(int *)(v97 + 28)), *(void *)(v2 + *(int *)(v97 + 28) + 24));
        OUTLINED_FUNCTION_60_7();
        v110._uint64_t countAndFlagsBits = v98();
        OUTLINED_FUNCTION_270_0(v110);
        swift_bridgeObjectRelease();
        v99._uint64_t countAndFlagsBits = 10322146;
        v99._object = (void *)0xA300000000000000;
        String.append(_:)(v99);
        return OUTLINED_FUNCTION_35();
      }
      if (v4 == 9 && !v3 && v6 == v15 && !v5)
      {
LABEL_69:
        OUTLINED_FUNCTION_26_29();
LABEL_70:
        id v65 = objc_msgSend(self, sel_conversationKit);
        goto LABEL_71;
      }
      uint64_t v100 = type metadata accessor for SessionActionNotice(0);
      char v101 = *(unsigned char *)(v2 + *(int *)(v100 + 32));
      id v102 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_11();
      if (v101) {
        uint64_t v104 = "You Started Quoted_%@";
      }
      else {
        uint64_t v104 = "%@_Collaboration_Title_Quoted";
      }
      OUTLINED_FUNCTION_19_1(v103, (unint64_t)(v104 - 32) | 0x8000000000000000);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v105 = OUTLINED_FUNCTION_25_15();
      *(_OWORD *)(v105 + 16) = xmmword_1C3769620;
      uint64_t v106 = (void *)(v2 + *(int *)(v100 + 28));
      uint64_t v107 = v106[3];
      id v108 = __swift_project_boxed_opaque_existential_1(v106, v107);
      OUTLINED_FUNCTION_60_7();
      v109();
      OUTLINED_FUNCTION_36_9();
      *(void *)(v105 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v105 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v105 + 32) = v107;
      *(void *)(v105 + 40) = v108;
      OUTLINED_FUNCTION_227_0();
      static String.localizedStringWithFormat(_:_:)();
      OUTLINED_FUNCTION_229_0();
LABEL_65:
      swift_bridgeObjectRelease();
LABEL_73:
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_35();
    default:
      if (*(void *)(v2 + 16))
      {
        if (*(void *)(v2 + 16) != 1) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_314_0();
        if (!v7) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_26_29();
        OUTLINED_FUNCTION_243();
        if (v17) {
          unint64_t v10 = v9 | 0x8000000000000000;
        }
        else {
          unint64_t v10 = v8 | 0x8000000000000000;
        }
LABEL_19:
        self;
        OUTLINED_FUNCTION_216_0();
        id v13 = objc_msgSend(v1, sel_conversationKit);
        OUTLINED_FUNCTION_19_1(v2, v10);
        swift_bridgeObjectRelease();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v14 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v14 + 16) = xmmword_1C3769620;
        *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v14 + 32) = v4;
        *(void *)(v14 + 40) = v3;
        static String.localizedStringWithFormat(_:_:)();
        OUTLINED_FUNCTION_36_9();
        goto LABEL_65;
      }
      if (v5 == 1)
      {
        OUTLINED_FUNCTION_314_0();
        if (!v38) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_26_29();
        OUTLINED_FUNCTION_243();
        uint64_t v39 = self;
        outlined copy of SessionActionNotice.NoticeType(v4, v3, v6);
        unint64_t v40 = (objc_class *)objc_msgSend(v39, sel_conversationKit);
        uint64_t v41 = OUTLINED_FUNCTION_124_1();
        v42.super.Class isa = v40;
        OUTLINED_FUNCTION_2_29(v41, v43, 0x61737265766E6F43, 0xEF74694B6E6F6974, v42);
        swift_bridgeObjectRelease();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v44 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v44 + 16) = xmmword_1C3769620;
        *(void *)(v44 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v44 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v44 + 32) = v4;
        *(void *)(v44 + 40) = v3;
        static String.localizedStringWithFormat(_:_:)();
        OUTLINED_FUNCTION_36_9();
        goto LABEL_65;
      }
      if (v5 < 2) {
        goto LABEL_69;
      }
      OUTLINED_FUNCTION_47();
      String.localizedConversationControls.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v62 = OUTLINED_FUNCTION_25_15();
      uint64_t v63 = MEMORY[0x1E4FBB550];
      *(_OWORD *)(v62 + 16) = xmmword_1C3769620;
      uint64_t v64 = MEMORY[0x1E4FBB5C8];
      *(void *)(v62 + 56) = v63;
      *(void *)(v62 + 64) = v64;
      *(void *)(v62 + 32) = v5;
      goto LABEL_68;
  }
}

void SessionActionNotice.attributionDescription.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_19_20();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_225();
  unint64_t v8 = v1[2];
  if (v8 >> 62 != 3) {
    goto LABEL_28;
  }
  uint64_t v9 = v1[3];
  uint64_t v11 = *v1;
  uint64_t v10 = v1[1];
  if (!v9)
  {
    OUTLINED_FUNCTION_254_0();
    BOOL v12 = v12 && v11 == 7;
    if (v12 && !v10)
    {
      id v13 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      v14.super.Class isa = v13;
      OUTLINED_FUNCTION_2_29(0x726F4620796C6E4FLL, 0xEC000000756F5920, 0x61737265766E6F43, 0xEF74694B6E6F6974, v14);

LABEL_18:
      OUTLINED_FUNCTION_41_0();
      goto LABEL_45;
    }
  }
  if (!v9)
  {
    OUTLINED_FUNCTION_254_0();
    BOOL v15 = v12 && v11 == 8;
    if (v15 && !v10)
    {
      id v16 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      OUTLINED_FUNCTION_19_1(0x40252068746957, 0xE700000000000000);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v17 = OUTLINED_FUNCTION_25_15();
      *(_OWORD *)(v17 + 16) = xmmword_1C3769620;
      char v18 = (void *)((char *)v1 + *(int *)(type metadata accessor for SessionActionNotice(0) + 24));
      __swift_project_boxed_opaque_existential_1(v18, v18[3]);
      OUTLINED_FUNCTION_219();
      OUTLINED_FUNCTION_228();
      uint64_t v20 = v19();
      uint64_t v22 = v21;
      *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v17 + 32) = v20;
      *(void *)(v17 + 40) = v22;
      OUTLINED_FUNCTION_30_15();
      String.init(format:_:)();
      OUTLINED_FUNCTION_47_6();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  if (v9 || (v8 == 0xC000000000000000 ? (BOOL v23 = v11 == 10) : (BOOL v23 = 0), !v23 || v10))
  {
LABEL_28:
    uint64_t v31 = type metadata accessor for SessionActionNotice(0);
    uint64_t v32 = v31;
    if (*((unsigned char *)v1 + *(int *)(v31 + 32)))
    {
LABEL_31:
      uint64_t v35 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      v36.super.Class isa = v35;
      OUTLINED_FUNCTION_2_29(0x402520726F46, 0xE600000000000000, 0x61737265766E6F43, 0xEF74694B6E6F6974, v36);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v37 = OUTLINED_FUNCTION_25_15();
      *(_OWORD *)(v37 + 16) = xmmword_1C3769620;
      uint64_t v38 = (void *)((char *)v1 + *(int *)(v32 + 24));
      uint64_t v39 = v38[3];
      __swift_project_boxed_opaque_existential_1(v38, v39);
      OUTLINED_FUNCTION_219();
      OUTLINED_FUNCTION_228();
      v40();
      OUTLINED_FUNCTION_238_0();
      *(void *)(v37 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v37 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v37 + 32) = v1;
      *(void *)(v37 + 40) = v39;
      String.init(format:_:)();
      swift_bridgeObjectRelease();
LABEL_44:
      OUTLINED_FUNCTION_45_4();
      goto LABEL_45;
    }
    outlined init with copy of Participant?((uint64_t)v1 + *(int *)(v31 + 20), v2, &demangling cache variable for type metadata for Participant?);
    uint64_t v33 = OUTLINED_FUNCTION_70_3();
    if (__swift_getEnumTagSinglePayload(v33, v34, v5) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for Participant?);
      goto LABEL_31;
    }
    OUTLINED_FUNCTION_193_0();
    uint64_t v41 = *(void **)(v0 + *(int *)(v5 + 28));
    if (v41)
    {
      id v42 = v41;
      outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v42);
      if (v43)
      {
        OUTLINED_FUNCTION_178_0();
        if (objc_msgSend(v42, sel_shouldHideContact))
        {
          type metadata accessor for PersonNameComponents();
          uint64_t v50 = (uint64_t)&v50;
          OUTLINED_FUNCTION_4();
          MEMORY[0x1F4188790](v44);
          OUTLINED_FUNCTION_47_12();
          PersonNameComponents.init()();
          OUTLINED_FUNCTION_180_0();
          OUTLINED_FUNCTION_179_0();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          OUTLINED_FUNCTION_2();
          id v45 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v47 = objc_msgSend(v45, sel_stringFromPersonNameComponents_, isa);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_139();
          v48();
          OUTLINED_FUNCTION_242_0();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          id v49 = 0;
          goto LABEL_43;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    _s15ConversationKit11ParticipantVWOcTm_9();
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v49 = OUTLINED_FUNCTION_176_0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_43:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_246_0();
    OUTLINED_FUNCTION_175_1();
    _s15ConversationKit11ParticipantVWOhTm_6();
    goto LABEL_44;
  }
  uint64_t v24 = type metadata accessor for SessionActionNotice(0);
  int v25 = *((unsigned __int8 *)v1 + *(int *)(v24 + 32));
  id v26 = objc_msgSend(self, sel_conversationKit);
  if (v25 == 1)
  {
    OUTLINED_FUNCTION_19_1(0x402520726F46, 0xE600000000000000);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v27 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v27 + 16) = xmmword_1C3769620;
    id v28 = (void *)((char *)v1 + *(int *)(v24 + 24));
    uint64_t v29 = v28[3];
    __swift_project_boxed_opaque_existential_1(v28, v29);
    OUTLINED_FUNCTION_219();
    OUTLINED_FUNCTION_228();
    v30();
    OUTLINED_FUNCTION_36_9();
    *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v27 + 32) = v29;
    *(void *)(v27 + 40) = v1;
    OUTLINED_FUNCTION_227_0();
    String.init(format:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_19_1(0xD000000000000014, 0x80000001C37A9AD0);
    OUTLINED_FUNCTION_36_9();
  }
  OUTLINED_FUNCTION_35();
LABEL_45:
  OUTLINED_FUNCTION_28();
}

uint64_t SessionActionNotice.fullSentence(for:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v135 = a2;
  uint64_t v139 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v136 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = (int *)type metadata accessor for Participant(0);
  uint64_t v7 = MEMORY[0x1F4188790](v137);
  uint64_t v129 = (int **)((char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v134 = (char *)&v123 - v9;
  uint64_t v10 = *(void **)(a1 + 8);
  v138._uint64_t countAndFlagsBits = *(void *)a1;
  v138._object = v10;
  LODWORD(v140) = *(unsigned __int8 *)(a1 + 16);
  uint64_t v11 = type metadata accessor for AttributedString();
  BOOL v12 = *(int ***)(v11 - 8);
  uint64_t v141 = (char *)v11;
  uint64_t v142 = v12;
  id v13 = v12[8];
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  BOOL v15 = (char *)&v123 - v14;
  id v16 = (int *)type metadata accessor for SessionActionNotice(0);
  uint64_t v17 = (void *)(v3 + v16[6]);
  uint64_t v18 = v17[3];
  uint64_t v19 = v17[4];
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*(void (**)(uint64_t, uint64_t))(v19 + 224))(v18, v19);
  if (one-time initialization token for subjectContainer != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for AttributeContainer();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  MEMORY[0x1F4188790](v21);
  uint64_t v131 = v22;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v132 = v25;
  uint64_t v133 = v20;
  uint64_t v130 = v24;
  ((void (*)(char *))v24)((char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = AttributedString.init(_:attributes:)();
  uint64_t v27 = &v123;
  MEMORY[0x1F4188790](v26);
  id v28 = (char *)&v123 - v14;
  uint64_t v29 = v16[8];
  uint64_t v30 = v16;
  if (*(unsigned char *)(v3 + v29)) {
    goto LABEL_6;
  }
  uint64_t v127 = v16[8];
  uint64_t v126 = v13;
  uint64_t v31 = v15;
  uint64_t v32 = v3 + v16[5];
  uint64_t v33 = v136;
  outlined init with copy of Participant?(v32, v136, &demangling cache variable for type metadata for Participant?);
  uint64_t v34 = v137;
  if (__swift_getEnumTagSinglePayload(v33, 1, (uint64_t)v137) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v33, &demangling cache variable for type metadata for Participant?);
    BOOL v15 = v31;
    id v13 = v126;
    uint64_t v29 = v127;
LABEL_6:
    uint64_t v35 = v141;
    NSBundle v36 = v142;
    uint64_t v37 = ((uint64_t (*)(char *, char *, char *))v142[2])(v28, v15, v141);
    goto LABEL_17;
  }
  uint64_t v38 = v134;
  _s15ConversationKit11ParticipantVWObTm_3();
  uint64_t v39 = *(void **)&v38[v34[7]];
  uint64_t v125 = &v123;
  uint64_t v128 = v28;
  uint64_t v124 = v3;
  uint64_t v123 = v30;
  if (v39)
  {
    id v40 = v39;
    uint64_t v41 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v40);
    if (v42)
    {
      uint64_t v136 = v41;
      if (objc_msgSend(v40, sel_shouldHideContact))
      {
        uint64_t v137 = (int *)v40;
        uint64_t v43 = type metadata accessor for PersonNameComponents();
        uint64_t v129 = &v123;
        uint64_t v44 = *(void *)(v43 - 8);
        MEMORY[0x1F4188790](v43);
        uint64_t v46 = (char *)&v123 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
        swift_bridgeObjectRetain();
        PersonNameComponents.init()();
        PersonNameComponents.givenName.setter();
        PersonNameComponents.familyName.setter();
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v47 = (id)static NSPersonNameComponentsFormatter.initials;
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v49 = objc_msgSend(v47, sel_stringFromPersonNameComponents_, isa);

        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
        uint64_t v143 = v50;
        uint64_t v144 = v52;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        id v53 = 0;
        goto LABEL_16;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  _s15ConversationKit11ParticipantVWOcTm_9();
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:)();
  id v53 = v145;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v54 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v54);
  v130((char *)&v123 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0), v132, v133);
  id v28 = v128;
  AttributedString.init(_:attributes:)();
  uint64_t v37 = _s15ConversationKit11ParticipantVWOhTm_6();
  uint64_t v35 = v141;
  NSBundle v36 = v142;
  BOOL v15 = v31;
  uint64_t v27 = v125;
  uint64_t v3 = v124;
  uint64_t v30 = v123;
  id v13 = v126;
  uint64_t v29 = v127;
LABEL_17:
  if (v140)
  {
    if (v140 == 1)
    {
      unint64_t v56 = ((unint64_t)v138._object >> 56) & 0xF;
      if (((uint64_t)v138._object & 0x2000000000000000) == 0) {
        unint64_t v56 = v138._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v56)
      {
        uint64_t v128 = v28;
        uint64_t v125 = v27;
        Swift::String v140 = v15;
        uint64_t v137 = (int *)&v123;
        MEMORY[0x1F4188790](v37);
        uint64_t v141 = (char *)&v123 - (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v57 = v3;
        int v58 = *(unsigned __int8 *)(v3 + v29);
        uint64_t v59 = type metadata accessor for String.LocalizationValue.StringInterpolation();
        v138._object = &v123;
        MEMORY[0x1F4188790](v59 - 8);
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
        if (v58 == 1)
        {
          v60._uint64_t countAndFlagsBits = 0x80E2206465646441;
          v60._object = (void *)0xA90000000000009CLL;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v60);
          uint64_t v61 = (void *)(v57 + v30[7]);
          uint64_t v62 = v61[3];
          uint64_t v63 = v61[4];
          __swift_project_boxed_opaque_existential_1(v61, v62);
          v64._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 80))(v62, v63);
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v64);
          swift_bridgeObjectRelease();
          v65._uint64_t countAndFlagsBits = 0x20726F66209D80E2;
          v65._object = (void *)0xA800000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v65);
          uint64_t v66 = type metadata accessor for AttributedString.InterpolationOptions();
          uint64_t v67 = *(void *)(v66 - 8);
          MEMORY[0x1F4188790](v66);
          uint64_t v69 = (char *)&v123 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v143 = MEMORY[0x1E4FBC860];
          lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          uint64_t v70 = v140;
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
          v71._uint64_t countAndFlagsBits = 0;
          v71._object = (void *)0xE000000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v71);
          uint64_t v72 = type metadata accessor for String.LocalizationValue();
          MEMORY[0x1F4188790](v72 - 8);
          String.LocalizationValue.init(stringInterpolation:)();
          uint64_t v73 = v141;
          AttributedString.init(cnkLocalized:)();
          uint64_t v74 = v142;
          char v75 = v142[1];
          ((void (*)(char *, char *))v75)(v128, v35);
          uint64_t v76 = v70;
        }
        else
        {
          v105._uint64_t countAndFlagsBits = 0;
          v105._object = (void *)0xE000000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v105);
          uint64_t v106 = type metadata accessor for AttributedString.InterpolationOptions();
          v138._uint64_t countAndFlagsBits = (uint64_t)&v123;
          uint64_t v107 = *(void *)(v106 - 8);
          MEMORY[0x1F4188790](v106);
          unsigned int v109 = v30;
          Swift::String v110 = (char *)&v123 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v143 = MEMORY[0x1E4FBC860];
          lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          uint64_t v111 = v128;
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v110, v106);
          v112._uint64_t countAndFlagsBits = 0xE220646564646120;
          v112._object = (void *)0xAA00000000009C80;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v112);
          uint64_t v113 = (void *)(v57 + v109[7]);
          uint64_t v114 = v113[3];
          uint64_t v115 = v113[4];
          __swift_project_boxed_opaque_existential_1(v113, v114);
          v116._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 80))(v114, v115);
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v116);
          swift_bridgeObjectRelease();
          v117._uint64_t countAndFlagsBits = 10322146;
          v117._object = (void *)0xA300000000000000;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v117);
          uint64_t v118 = type metadata accessor for String.LocalizationValue();
          MEMORY[0x1F4188790](v118 - 8);
          String.LocalizationValue.init(stringInterpolation:)();
          uint64_t v73 = v141;
          AttributedString.init(cnkLocalized:)();
          uint64_t v74 = v142;
          char v75 = v142[1];
          ((void (*)(char *, char *))v75)(v111, v35);
          uint64_t v76 = v140;
        }
        ((void (*)(char *, char *))v75)(v76, v35);
        return ((uint64_t (*)(uint64_t, char *, char *))v74[4])(v139, v73, v35);
      }
    }
    goto LABEL_30;
  }
  unint64_t v77 = ((unint64_t)v138._object >> 56) & 0xF;
  if (((uint64_t)v138._object & 0x2000000000000000) == 0) {
    unint64_t v77 = v138._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v77)
  {
LABEL_30:
    MEMORY[0x1F4188790](v37);
    uint64_t v92 = (char *)&v123 - (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned char *)(v3 + v29) == 1)
    {
      uint64_t v93 = type metadata accessor for String.LocalizationValue();
      MEMORY[0x1F4188790](v93 - 8);
      String.LocalizationValue.init(stringLiteral:)();
      AttributedString.init(cnkLocalized:)();
      id v94 = v36[1];
      ((void (*)(char *, char *))v94)(v28, v35);
      ((void (*)(char *, char *))v94)(v15, v35);
    }
    else
    {
      uint64_t v95 = type metadata accessor for String.LocalizationValue.StringInterpolation();
      v138._object = &v123;
      MEMORY[0x1F4188790](v95 - 8);
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v96._uint64_t countAndFlagsBits = 0;
      v96._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v96);
      uint64_t v97 = type metadata accessor for AttributedString.InterpolationOptions();
      Swift::String v140 = v15;
      uint64_t v98 = v97;
      v138._uint64_t countAndFlagsBits = (uint64_t)&v123;
      uint64_t v99 = *(void *)(v97 - 8);
      MEMORY[0x1F4188790](v97);
      uint64_t v137 = (int *)&v123;
      char v101 = (char *)&v123 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v143 = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
      uint64_t v35 = v141;
      NSBundle v36 = v142;
      v102._uint64_t countAndFlagsBits = 0x646564646120;
      v102._object = (void *)0xE600000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v102);
      uint64_t v103 = type metadata accessor for String.LocalizationValue();
      MEMORY[0x1F4188790](v103 - 8);
      String.LocalizationValue.init(stringInterpolation:)();
      AttributedString.init(cnkLocalized:)();
      uint64_t v104 = v36[1];
      ((void (*)(char *, char *))v104)(v28, v35);
      ((void (*)(char *, char *))v104)(v140, v35);
    }
    return ((uint64_t (*)(uint64_t, char *, char *))v36[4])(v139, v92, v35);
  }
  char v78 = *(unsigned char *)(v3 + v29);
  uint64_t v79 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x1F4188790](v79 - 8);
  if ((v78 & 1) != 0 || v135 >= 2)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v119._uint64_t countAndFlagsBits = 0x206465646441;
    v119._object = (void *)0xE600000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v119);
    uint64_t v143 = v135;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
    v120._uint64_t countAndFlagsBits = 0x73676E6F7320;
    v120._object = (void *)0xE600000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v120);
    uint64_t v121 = type metadata accessor for String.LocalizationValue();
    MEMORY[0x1F4188790](v121 - 8);
    String.LocalizationValue.init(stringInterpolation:)();
    AttributedString.init(conversationControlsLocalized:comment:)();
    uint64_t v122 = v36[1];
    ((void (*)(char *, char *))v122)(v28, v35);
    return ((uint64_t (*)(char *, char *))v122)(v15, v35);
  }
  else
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v80._uint64_t countAndFlagsBits = 0;
    v80._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v80);
    uint64_t v81 = type metadata accessor for AttributedString.InterpolationOptions();
    uint64_t v142 = &v123;
    uint64_t v82 = *(void *)(v81 - 8);
    uint64_t v128 = v28;
    uint64_t v83 = v82;
    MEMORY[0x1F4188790](v81);
    Swift::String v140 = v15;
    uint64_t v85 = (char *)&v123 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v143 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x1F418B288]);
    uint64_t v137 = (int *)&v123;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.InterpolationOptions]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    NSBundle v86 = v128;
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v81);
    v87._uint64_t countAndFlagsBits = 0xE220646564646120;
    v87._object = (void *)0xAA00000000009C80;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v87);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v138);
    v88._uint64_t countAndFlagsBits = 10322146;
    v88._object = (void *)0xA300000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v88);
    uint64_t v89 = type metadata accessor for String.LocalizationValue();
    MEMORY[0x1F4188790](v89 - 8);
    String.LocalizationValue.init(stringInterpolation:)();
    AttributedString.init(cnkLocalized:)();
    uint64_t v90 = v36[1];
    ((void (*)(char *, char *))v90)(v86, v35);
    return ((uint64_t (*)(char *, char *))v90)(v140, v35);
  }
}

unint64_t SessionActionNotice.description.getter()
{
  unint64_t v1 = (unint64_t)v0;
  uint64_t v2 = type metadata accessor for SessionActionNotice(0);
  if (*((unsigned char *)&v0->_countAndFlagsBits + *(int *)(v2 + 32))) {
    uint64_t v3 = 0x296C61636F4C28;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*((unsigned char *)&v0->_countAndFlagsBits + *(int *)(v2 + 32))) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE000000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v0->_countAndFlagsBits;
  unint64_t object = (unint64_t)v0->_object;
  unint64_t v8 = (unint64_t)v0[1]._object;
  switch((unint64_t)v0[1]._countAndFlagsBits >> 62)
  {
    case 1uLL:
      OUTLINED_FUNCTION_113();
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_292_0();
      if (v18)
      {
        OUTLINED_FUNCTION_127_1(v21, v22, v23, v24, v25, v26, v27, v28, v50, v51);
        uint64_t v30 = OUTLINED_FUNCTION_161_0();
        goto LABEL_32;
      }
      if (v29 == 1)
      {
        uint64_t v30 = OUTLINED_FUNCTION_95_3();
LABEL_32:
        String.append(_:)(*(Swift::String *)&v30);
        uint64_t v40 = v50;
        unint64_t v1 = v51;
        goto LABEL_45;
      }
      uint64_t v40 = OUTLINED_FUNCTION_212_0();
      goto LABEL_45;
    case 2uLL:
      v52._uint64_t countAndFlagsBits = 0x2D2074636165725BLL;
      v52._unint64_t object = (void *)0xE900000000000020;
      String.append(_:)(*v0);
      goto LABEL_47;
    case 3uLL:
      OUTLINED_FUNCTION_67_6();
      if (v18 && !(object | countAndFlagsBits | v8))
      {
        uint64_t v32 = 0x74726174735BLL;
LABEL_19:
        uint64_t v33 = v32 & 0xFFFFFFFFFFFFLL | 0x2D20000000000000;
        unint64_t v34 = 0xE900000000000020;
LABEL_41:
        v52._uint64_t countAndFlagsBits = v33;
        v52._unint64_t object = (void *)v34;
        goto LABEL_42;
      }
      if (countAndFlagsBits == 1 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            uint64_t v35 = 1869902683;
LABEL_26:
            unint64_t v36 = v35 & 0xFFFF0000FFFFFFFFLL | 0x207000000000;
LABEL_40:
            uint64_t v33 = v36 & 0xFFFFFFFFFFFFLL | 0x202D000000000000;
            unint64_t v34 = 0xE800000000000000;
            goto LABEL_41;
          }
        }
      }
      if (countAndFlagsBits == 2 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            unint64_t v36 = 0x2079616C705BLL;
            goto LABEL_40;
          }
        }
      }
      if (countAndFlagsBits == 3 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            uint64_t v32 = 0x65737561705BLL;
            goto LABEL_19;
          }
        }
      }
      if (countAndFlagsBits == 4 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            unint64_t v36 = 0x206B6565735BLL;
            goto LABEL_40;
          }
        }
      }
      if (countAndFlagsBits == 5 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            uint64_t v35 = 1768649563;
            goto LABEL_26;
          }
        }
      }
      if (countAndFlagsBits == 6 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            v48._uint64_t countAndFlagsBits = 0x646574616470755BLL;
            v48._unint64_t object = (void *)0xEE005D6575657551;
            String.append(_:)(v48);
            return 0xD000000000000013;
          }
        }
      }
      if (countAndFlagsBits == 7 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            OUTLINED_FUNCTION_113();
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            uint64_t v33 = 0xD000000000000011;
            id v49 = "[localPlayback - ";
LABEL_92:
            unint64_t v34 = (unint64_t)(v49 - 32) | 0x8000000000000000;
            goto LABEL_41;
          }
        }
      }
      if (countAndFlagsBits == 8 && !object)
      {
        OUTLINED_FUNCTION_67_6();
        if (v18)
        {
          if (!v8)
          {
            uint64_t v33 = 0x65646E696D65725BLL;
            unint64_t v34 = 0xEC000000202D2072;
            goto LABEL_41;
          }
        }
      }
      if (countAndFlagsBits != 9 || object || (OUTLINED_FUNCTION_67_6(), !v18) || v8)
      {
        OUTLINED_FUNCTION_113();
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        uint64_t v33 = 0xD000000000000017;
        id v49 = "[collaboration added - ";
        goto LABEL_92;
      }
      OUTLINED_FUNCTION_113();
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v52._uint64_t countAndFlagsBits = 0xD000000000000013;
      v52._unint64_t object = (void *)0x80000001C37A9B10;
LABEL_42:
      __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)&v0->_countAndFlagsBits + *(int *)(v2 + 28)), *(uint64_t *)((char *)&v0[1]._object + *(int *)(v2 + 28)));
      uint64_t v42 = OUTLINED_FUNCTION_92_0();
      v43(v42);
      if (v44)
      {
        uint64_t v40 = String.init<A>(reflecting:)();
        unint64_t v1 = v45;
      }
      else
      {
        uint64_t v40 = 7104878;
        unint64_t v1 = 0xE300000000000000;
      }
LABEL_45:
      unint64_t v41 = v1;
      goto LABEL_46;
    default:
      OUTLINED_FUNCTION_113();
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_292_0();
      if (v18)
      {
        OUTLINED_FUNCTION_127_1(v9, v10, v11, v12, v13, v14, v15, v16, v50, v51);
        uint64_t v19 = OUTLINED_FUNCTION_161_0();
        goto LABEL_28;
      }
      if (v17 == 1)
      {
        uint64_t v19 = OUTLINED_FUNCTION_95_3();
LABEL_28:
        String.append(_:)(*(Swift::String *)&v19);
        uint64_t v37 = v50;
        unint64_t v1 = v51;
        goto LABEL_30;
      }
      uint64_t v37 = OUTLINED_FUNCTION_212_0();
LABEL_30:
      unint64_t v38 = v1;
      String.append(_:)(*(Swift::String *)&v37);
      swift_bridgeObjectRelease();
      v39._uint64_t countAndFlagsBits = 0x3A746E756F63202CLL;
      v39._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v39);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_46:
      String.append(_:)(*(Swift::String *)&v40);
      swift_bridgeObjectRelease();
LABEL_47:
      v46._uint64_t countAndFlagsBits = 93;
      v46._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v46);
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      return 0xD000000000000013;
  }
}

void SessionActionNotice.noticeAccessory.getter()
{
  OUTLINED_FUNCTION_31();
  unint64_t v3 = (unint64_t)v0;
  unint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = OUTLINED_FUNCTION_221();
  uint64_t v9 = type metadata accessor for Collaboration(v8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  uint64_t v12 = *v0;
  uint64_t v11 = v0[1];
  uint64_t v13 = *(void *)(v3 + 24);
  if (*(void *)(v3 + 16) >> 62 != 3) {
    goto LABEL_50;
  }
  OUTLINED_FUNCTION_33_24();
  if (v14)
  {
    if (!(v11 | v12 | v13)) {
      goto LABEL_50;
    }
  }
  if (v12 == 1 && !v11)
  {
    OUTLINED_FUNCTION_33_24();
    if (v14)
    {
      if (!v13) {
        goto LABEL_50;
      }
    }
  }
  if (v12 == 2 && !v11)
  {
    OUTLINED_FUNCTION_33_24();
    if (v14)
    {
      if (!v13) {
        goto LABEL_50;
      }
    }
  }
  if ((v12 != 3 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13)
    && (v12 != 4 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13)
    && (v12 != 5 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13)
    && (v12 != 6 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13)
    && (v12 != 7 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13)
    && (v12 != 8 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13)
    && (v12 != 9 || v11 || (OUTLINED_FUNCTION_33_24(), !v14) || v13))
  {
    OUTLINED_FUNCTION_97_3();
    int v21 = __swift_project_boxed_opaque_existential_1((void *)(v3 + v22), *(void *)(v3 + v22 + 24));
    uint64_t v23 = OUTLINED_FUNCTION_260_0();
    v24(v23);
    if (__swift_getEnumTagSinglePayload(v2, 1, v9) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for Collaboration?);
    }
    else
    {
      _s15ConversationKit11ParticipantVWObTm_3();
      if (*(unsigned char *)(v1 + 16) != 2 && (*(unsigned char *)(v1 + *(int *)(v9 + 48)) & 1) == 0)
      {
        int v25 = (objc_class *)objc_msgSend(self, sel_conversationKit);
        OUTLINED_FUNCTION_13_22();
        v26.super.Class isa = v25;
        OUTLINED_FUNCTION_2_29(1852141647, 0xE400000000000000, 0x61737265766E6F43, 0xEF74694B6E6F6974, v26);
        OUTLINED_FUNCTION_47_6();

        _s15ConversationKit11ParticipantVWOhTm_6();
        goto LABEL_52;
      }
      _s15ConversationKit11ParticipantVWOhTm_6();
    }
  }
  else
  {
LABEL_50:
    uint64_t v15 = OUTLINED_FUNCTION_259_0();
    outlined copy of SessionActionNotice.NoticeType(v15, v16, v17);
    uint64_t v18 = OUTLINED_FUNCTION_259_0();
    outlined consume of SessionActionNotice.NoticeType(v18, v19, v20);
    OUTLINED_FUNCTION_23_34(10);
  }
  int v21 = 0;
  unint64_t v3 = *(void *)(v3 + *(int *)(type metadata accessor for SessionActionNotice(0) + 56)) != 0;
LABEL_52:
  void *v5 = v21;
  v5[1] = v3;
  OUTLINED_FUNCTION_28();
}

uint64_t SessionActionNotice.equalTo(notice:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionActionNotice?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_46_15();
  type metadata accessor for SessionActionNotice(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_16_0();
  outlined init with copy of IDSLookupManager(a1, (uint64_t)&v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (OUTLINED_FUNCTION_146_0())
  {
    OUTLINED_FUNCTION_54_8(v1);
    _s15ConversationKit11ParticipantVWObTm_3();
    static SessionActionNotice.NoticeType.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18, v9, v10, v11, v12, v13, v14, *(void *)v3, *(void *)(v3 + 8), *(_OWORD *)(v3 + 16), *(void *)(v3 + 24), *v2, v2[1], v2[2], v2[3], v20, v21, v22,
      v23,
      v24,
      v25,
      v26,
      v27,
      vars0,
      vars8);
    char v16 = v15;
    _s15ConversationKit11ParticipantVWOhTm_6();
  }
  else
  {
    OUTLINED_FUNCTION_53(v1);
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for SessionActionNotice?);
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t (*protocol witness for Notice.uuid.modify in conformance SessionActionNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*protocol witness for Notice.actionHandler.modify in conformance SessionActionNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*protocol witness for Notice.dismissHandler.modify in conformance SessionActionNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t (*AppLaunchNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AppLaunchNotice.date.getter()
{
  return AppLaunchNotice.date.getter();
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t vars8;

  uint64_t v1 = OUTLINED_FUNCTION_159();
  v2(v1);
  uint64_t v3 = OUTLINED_FUNCTION_164_0();
  v0(v3);
  OUTLINED_FUNCTION_0();
  unint64_t v4 = OUTLINED_FUNCTION_4_18();
  return v5(v4);
}

uint64_t AppLaunchNotice.date.setter(uint64_t a1)
{
  return AppLaunchNotice.date.setter(a1, (void (*)(void))type metadata accessor for AppLaunchNotice, MEMORY[0x1F418B9D8]);
}

uint64_t (*AppLaunchNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void AppLaunchNotice.priority.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 24));
}

uint64_t AppLaunchNotice.priority.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for AppLaunchNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*AppLaunchNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id AppLaunchNotice.app.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 28));
  return v1;
}

void AppLaunchNotice.app.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_58_8() + 28);

  *(void *)(v1 + v2) = v0;
}

uint64_t (*AppLaunchNotice.app.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id AppLaunchNotice.conversation.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 32));
  return v1;
}

void AppLaunchNotice.conversation.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_58_8() + 32);

  *(void *)(v1 + v2) = v0;
}

uint64_t (*AppLaunchNotice.conversation.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AppLaunchNotice.supportsCollaboration.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 36));
}

uint64_t AppLaunchNotice.supportsCollaboration.setter()
{
  uint64_t v0 = type metadata accessor for AppLaunchNotice(0);
  return OUTLINED_FUNCTION_276_0(v0);
}

uint64_t (*AppLaunchNotice.supportsCollaboration.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double AppLaunchNotice.dismissalDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 40));
}

uint64_t AppLaunchNotice.dismissalDuration.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_272_0();
  uint64_t result = type metadata accessor for AppLaunchNotice(v2);
  *(void *)(v0 + *(int *)(result + 40)) = v1;
  return result;
}

uint64_t (*AppLaunchNotice.dismissalDuration.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AppLaunchNotice.description.getter()
{
  OUTLINED_FUNCTION_208();
  uint64_t v7 = v1;
  uint64_t v2 = *(void **)(v0 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 28));
  v3._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x68))();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 2108704;
  v4._unint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_270_0(v8);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 93;
  v5._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7;
}

void AppLaunchNotice.style.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 44));
}

uint64_t AppLaunchNotice.style.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for AppLaunchNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = v2;
  return result;
}

uint64_t (*AppLaunchNotice.style.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AppLaunchNotice.shouldTransitionToHUD.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 48));
}

uint64_t AppLaunchNotice.shouldTransitionToHUD.setter(char a1)
{
  uint64_t result = type metadata accessor for AppLaunchNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*AppLaunchNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for AppLaunchNotice.actionHandler : AppLaunchNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  Swift::String v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 52));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for AppLaunchNotice.actionHandler : AppLaunchNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 52));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t AppLaunchNotice.actionHandler.getter()
{
  uint64_t v0 = type metadata accessor for AppLaunchNotice(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v0 + 52));
}

uint64_t AppLaunchNotice.actionHandler.setter()
{
  uint64_t v0 = type metadata accessor for AppLaunchNotice(0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v0 + 52));
}

uint64_t (*AppLaunchNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for AppLaunchNotice.dismissHandler : AppLaunchNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 56));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for AppLaunchNotice.dismissHandler : AppLaunchNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AppLaunchNotice(0) + 56));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t AppLaunchNotice.dismissHandler.getter()
{
  uint64_t v0 = type metadata accessor for AppLaunchNotice(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v0 + 56));
}

uint64_t AppLaunchNotice.dismissHandler.setter()
{
  uint64_t v0 = type metadata accessor for AppLaunchNotice(0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v0 + 56));
}

uint64_t (*AppLaunchNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void AppLaunchNotice.shouldReplace(notice:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppLaunchNotice?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_80();
  uint64_t v8 = type metadata accessor for AppLaunchNotice(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_63();
  outlined init with copy of IDSLookupManager((uint64_t)v4, (uint64_t)&v15);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  OUTLINED_FUNCTION_252_0();
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_150(v1, 0);
    OUTLINED_FUNCTION_163();
    _s15ConversationKit11ParticipantVWObTm_3();
    uint64_t v10 = *(int *)(v8 + 24);
    int v11 = *(unsigned __int8 *)(v0 + v10);
    int v12 = *(unsigned __int8 *)(v2 + v10);
    _s15ConversationKit11ParticipantVWOhTm_6();
    if (v11 == v12) {
      goto LABEL_6;
    }
  }
  else
  {
    OUTLINED_FUNCTION_150(v1, 1);
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for AppLaunchNotice?);
  }
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  uint64_t v13 = OUTLINED_FUNCTION_40_15();
  v14(v13);
LABEL_6:
  OUTLINED_FUNCTION_15_0();
}

uint64_t one-time initialization function for bundleIDToItemType()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static AppLaunchNotice.bundleIDToItemType = result;
  return result;
}

uint64_t static AppLaunchNotice.bundleIDToItemType.getter()
{
  if (one-time initialization token for bundleIDToItemType != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_2();
  return swift_bridgeObjectRetain();
}

uint64_t static AppLaunchNotice.bundleIDToItemType.setter(uint64_t a1)
{
  if (one-time initialization token for bundleIDToItemType != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AppLaunchNotice.bundleIDToItemType = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AppLaunchNotice.bundleIDToItemType.modify())()
{
  if (one-time initialization token for bundleIDToItemType != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t AppLaunchNotice.appItemTypeString.getter()
{
  type metadata accessor for AppLaunchNotice(0);
  if (one-time initialization token for bundleIDToItemType != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (!*(void *)(static AppLaunchNotice.bundleIDToItemType + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v0 = OUTLINED_FUNCTION_30_15();
  specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
  if ((v2 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_endAccess();
    return OUTLINED_FUNCTION_4_18();
  }
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_4_18();
}

uint64_t AppLaunchNotice.noticeContent.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppLaunchNotice(0);
  uint64_t v3 = *(void *)(v0 + *(int *)(v2 + 28));
  OUTLINED_FUNCTION_269_0();
  v23._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(v4 + 104))();
  OUTLINED_FUNCTION_270_0(v23);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 10322146;
  v5._unint64_t object = (void *)0xA300000000000000;
  String.append(_:)(v5);
  int v6 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_type);
  OUTLINED_FUNCTION_269_0();
  uint64_t v8 = (*(uint64_t (**)(void))(v7 + 112))();
  int v9 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  char v10 = static Platform.current.getter();
  if (!v6)
  {
    if (v10 == 2)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v11 = unk_1EA37DFA0;
      uint64_t v12 = qword_1EA37DFA8;
      uint64_t v13 = (objc_class *)(id)static LocalizationSource.conversationKit;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_47();
      uint64_t v14 = 0xD000000000000025;
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    if (v8)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
    }
    else if (one-time initialization token for conversationKit != -1)
    {
      swift_once();
    }
LABEL_30:
    OUTLINED_FUNCTION_265((void **)&static LocalizationSource.conversationKit);
    OUTLINED_FUNCTION_301_0();
    OUTLINED_FUNCTION_263_0();
    OUTLINED_FUNCTION_47();
    v19.super.Class isa = (Class)10256610;
    OUTLINED_FUNCTION_2_29(v20, v21, 0xA300000000000000, v8, v19);
    OUTLINED_FUNCTION_230();

    OUTLINED_FUNCTION_124_1();
    String.splitForTitleAndSubtitle()();
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_30_15();
  }
  if (v6 == 1)
  {
    if (v10 == 2)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v11 = unk_1EA37DFA0;
      uint64_t v12 = qword_1EA37DFA8;
      uint64_t v13 = (objc_class *)(id)static LocalizationSource.conversationKit;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_47();
LABEL_11:
      v16.super.Class isa = v13;
      OUTLINED_FUNCTION_2_29(v14, v15, v11, v12, v16);
      OUTLINED_FUNCTION_238_0();
      swift_bridgeObjectRelease();

      return OUTLINED_FUNCTION_30_15();
    }
    swift_bridgeObjectRelease();
    if (v8)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
    }
    else if (one-time initialization token for conversationKit != -1)
    {
      swift_once();
    }
    goto LABEL_30;
  }
  if (v9)
  {
    if (v10 == 2)
    {
      AppLaunchNotice.collaborationTitle(withLineBreak:)(0);
      OUTLINED_FUNCTION_238_0();
    }
    else
    {
      swift_bridgeObjectRelease();
      AppLaunchNotice.collaborationTitle(withLineBreak:)(1);
      String.splitForTitleAndSubtitle()();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    unint64_t v17 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_11();
    v18.super.Class isa = v17;
    OUTLINED_FUNCTION_2_29(0x55534E555F505041, 0xEF444554524F5050, 0x61737265766E6F43, 0xEF74694B6E6F6974, v18);
    OUTLINED_FUNCTION_238_0();
  }
  return OUTLINED_FUNCTION_30_15();
}

uint64_t AppLaunchNotice.attributedCollaborationTitle()()
{
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = AppLaunchNotice.appItemTypeString.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._unint64_t object = (void *)0x80000001C37A9DA0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1EA37DFA0;
  uint64_t v3 = (void *)qword_1EA37DFA8;
  id v4 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v10._unint64_t object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x5F45534F4F4843;
  v5._unint64_t object = (void *)0xE700000000000000;
  v6.value._uint64_t countAndFlagsBits = v2;
  v6.value._unint64_t object = v3;
  v7._uint64_t countAndFlagsBits = 0;
  v7._unint64_t object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v8 - 8);
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

uint64_t AppLaunchNotice.collaborationTitle(withLineBreak:)(char a1)
{
  if (a1)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = AppLaunchNotice.appItemTypeString.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    unint64_t v2 = 0xD00000000000001FLL;
    unint64_t v3 = 0x80000001C37A9DC0;
  }
  else
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = AppLaunchNotice.appItemTypeString.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    unint64_t v3 = 0x80000001C37A9DA0;
    unint64_t v2 = 0xD000000000000015;
  }
  String.append(_:)(*(Swift::String *)&v2);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v5 = unk_1EA37DFA0;
  Swift::String_optional v6 = (void *)qword_1EA37DFA8;
  id v7 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v13._unint64_t object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0x5F45534F4F4843;
  v8._unint64_t object = (void *)0xE700000000000000;
  v9.value._uint64_t countAndFlagsBits = v5;
  v9.value._unint64_t object = v6;
  v10._uint64_t countAndFlagsBits = 0;
  v10._unint64_t object = (void *)0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v13)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return countAndFlagsBits;
}

void AppLaunchNotice.subtitleStyle.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 60));
}

uint64_t AppLaunchNotice.subtitleStyle.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for AppLaunchNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 60)) = v2;
  return result;
}

uint64_t (*AppLaunchNotice.subtitleStyle.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AppLaunchNotice.noticeAccessory.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_303_0();
  uint64_t v1 = OUTLINED_FUNCTION_148_2(*(int *)(v0 + 64));
  return outlined copy of NoticeAccessory(v1, v2);
}

uint64_t AppLaunchNotice.noticeAccessory.setter()
{
  uint64_t v0 = type metadata accessor for AppLaunchNotice(0);
  return OUTLINED_FUNCTION_168_1(*(int *)(v0 + 64));
}

uint64_t (*AppLaunchNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AppLaunchNotice.equalTo(notice:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppLaunchNotice?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_30_0();
  uint64_t v6 = type metadata accessor for AppLaunchNotice(v5);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_70_4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (OUTLINED_FUNCTION_107_3())
  {
    char v8 = 1;
    OUTLINED_FUNCTION_54_8(v2);
    OUTLINED_FUNCTION_193_0();
    uint64_t v9 = *(int *)(v6 + 28);
    Swift::String v10 = (void *)(*(void *)(v1 + v9) + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier);
    uint64_t v11 = (void *)(*(void *)(v0 + v9) + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier);
    if (*v10 != *v11 || v10[1] != v11[1]) {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    _s15ConversationKit11ParticipantVWOhTm_6();
  }
  else
  {
    OUTLINED_FUNCTION_53(v2);
    outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for AppLaunchNotice?);
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t protocol witness for Notice.date.getter in conformance AppLaunchNotice()
{
  return protocol witness for Notice.date.getter in conformance AppLaunchNotice();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_164_0();
  v1(v0);
  OUTLINED_FUNCTION_0();
  uint64_t v2 = OUTLINED_FUNCTION_35();
  return v3(v2);
}

double protocol witness for Notice.dismissalDuration.getter in conformance AppLaunchNotice(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 40));
}

void protocol witness for Notice.priority.getter in conformance AppLaunchNotice(unsigned char *a1@<X8>)
{
}

uint64_t protocol witness for Notice.style.getter in conformance AppLaunchNotice@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 44));
  return result;
}

uint64_t protocol witness for Notice.subtitleStyle.getter in conformance AppLaunchNotice@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 60));
  return result;
}

uint64_t protocol witness for Notice.noticeAccessory.getter in conformance AppLaunchNotice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 64));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return outlined copy of NoticeAccessory(v4, v5);
}

uint64_t protocol witness for Notice.shouldTransitionToHUD.getter in conformance AppLaunchNotice(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t protocol witness for Notice.actionHandler.getter in conformance AppLaunchNotice(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  return v2;
}

uint64_t protocol witness for Notice.actionHandler.setter in conformance AppLaunchNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 52));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for Notice.dismissHandler.getter in conformance AppLaunchNotice(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v2);
  return v2;
}

uint64_t protocol witness for Notice.dismissHandler.setter in conformance AppLaunchNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 56));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

void static PushToTalkNotice.NoticeType.== infix(_:_:)()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_36();
  uint64_t v4 = (unsigned __int8 *)(v2 - v3);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (uint64_t *)((char *)v78 - v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PushToTalkNotice.NoticeType, PushToTalkNotice.NoticeType));
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_17_0();
  uint64_t v11 = (uint64_t *)(v0 + *(int *)(v10 + 56));
  _s15ConversationKit11ParticipantVWOcTm_9();
  OUTLINED_FUNCTION_43();
  _s15ConversationKit11ParticipantVWOcTm_9();
  OUTLINED_FUNCTION_35();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_124_1();
    _s15ConversationKit11ParticipantVWOcTm_9();
    uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                 + 48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v13 = *v4;
      int v14 = *(unsigned __int8 *)v11;
      uint64_t v15 = (uint64_t)v11 + v12;
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v83 = v78;
      uint64_t v17 = OUTLINED_FUNCTION_8(v16);
      uint64_t v19 = *(void *)(v18 + 64);
      MEMORY[0x1F4188790](v17);
      unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v21 = (char *)v78 - v20;
      uint64_t v22 = OUTLINED_FUNCTION_227_0();
      uint64_t v25 = outlined init with take of AspectRatio?(v22, v23, v24);
      MEMORY[0x1F4188790](v25);
      uint64_t v26 = (char *)v78 - v20;
      outlined init with take of AspectRatio?(v15, (uint64_t)v78 - v20, &demangling cache variable for type metadata for URL?);
      if (v13 == v14)
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
        uint64_t v46 = OUTLINED_FUNCTION_8(v45);
        MEMORY[0x1F4188790](v46);
        OUTLINED_FUNCTION_62();
        Swift::String v48 = (char *)&demangling cache variable for type metadata for URL? + *(int *)(v47 + 56);
        outlined init with copy of Participant?((uint64_t)v21, (uint64_t)&demangling cache variable for type metadata for URL?, &demangling cache variable for type metadata for URL?);
        uint64_t v49 = OUTLINED_FUNCTION_278();
        outlined init with copy of Participant?(v49, v50, &demangling cache variable for type metadata for URL?);
        type metadata accessor for URL();
        uint64_t v51 = OUTLINED_FUNCTION_69((uint64_t)&demangling cache variable for type metadata for URL?);
        if (v43)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v26, &demangling cache variable for type metadata for URL?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v21, &demangling cache variable for type metadata for URL?);
          OUTLINED_FUNCTION_69((uint64_t)v48);
          if (v43)
          {
            outlined destroy of SystemUpdateNotice?((uint64_t)&demangling cache variable for type metadata for URL?, &demangling cache variable for type metadata for URL?);
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v82 = v78;
          MEMORY[0x1F4188790](v51);
          OUTLINED_FUNCTION_224();
          outlined init with copy of Participant?((uint64_t)&demangling cache variable for type metadata for URL?, v19, &demangling cache variable for type metadata for URL?);
          OUTLINED_FUNCTION_69((uint64_t)v48);
          if (!v62)
          {
            Swift::String v80 = v78;
            uint64_t v81 = v78;
            OUTLINED_FUNCTION_5_3();
            uint64_t v73 = v72;
            MEMORY[0x1F4188790](v74);
            OUTLINED_FUNCTION_61();
            uint64_t v75 = OUTLINED_FUNCTION_184_0();
            v76(v75);
            lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1F418B868]);
            LODWORD(v79) = OUTLINED_FUNCTION_297_0();
            unint64_t v77 = *(void (**)(void))(v73 + 8);
            OUTLINED_FUNCTION_10_6();
            v77();
            outlined destroy of SystemUpdateNotice?((uint64_t)v26, &demangling cache variable for type metadata for URL?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v21, &demangling cache variable for type metadata for URL?);
            OUTLINED_FUNCTION_10_6();
            v77();
            outlined destroy of SystemUpdateNotice?((uint64_t)&demangling cache variable for type metadata for URL?, &demangling cache variable for type metadata for URL?);
            goto LABEL_34;
          }
          uint64_t v63 = OUTLINED_FUNCTION_278();
          outlined destroy of SystemUpdateNotice?(v63, v64);
          outlined destroy of SystemUpdateNotice?((uint64_t)v21, &demangling cache variable for type metadata for URL?);
          OUTLINED_FUNCTION_26_2();
          v65();
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)&demangling cache variable for type metadata for URL?, &demangling cache variable for type metadata for (URL?, URL?));
        goto LABEL_34;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v78 - v20, &demangling cache variable for type metadata for URL?);
      uint64_t v27 = OUTLINED_FUNCTION_4_18();
      outlined destroy of SystemUpdateNotice?(v27, v28);
LABEL_34:
      _s15ConversationKit11ParticipantVWOhTm_6();
      goto LABEL_35;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)&v4[v12], &demangling cache variable for type metadata for URL?);
  }
  else
  {
    _s15ConversationKit11ParticipantVWOcTm_9();
    uint64_t v30 = *v7;
    uint64_t v29 = v7[1];
    uint64_t v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                 + 48);
    uint64_t v32 = (uint64_t)v7 + v31;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v34 = *v11;
      uint64_t v33 = v11[1];
      uint64_t v35 = (uint64_t)v11 + v31;
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v82 = v78;
      uint64_t v37 = OUTLINED_FUNCTION_8(v36);
      uint64_t v39 = *(void *)(v38 + 64);
      MEMORY[0x1F4188790](v37);
      unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v83 = (_DWORD *)((char *)v78 - v40);
      uint64_t v41 = outlined init with take of AspectRatio?(v32, (uint64_t)v78 - v40, &demangling cache variable for type metadata for URL?);
      uint64_t v81 = v78;
      MEMORY[0x1F4188790](v41);
      uint64_t v42 = (char *)v78 - v40;
      outlined init with take of AspectRatio?(v35, (uint64_t)v78 - v40, &demangling cache variable for type metadata for URL?);
      BOOL v43 = v30 == v34 && v29 == v33;
      if (v43)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        OUTLINED_FUNCTION_257_0();
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v44 & 1) == 0)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v78 - v40, &demangling cache variable for type metadata for URL?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v83, &demangling cache variable for type metadata for URL?);
          goto LABEL_34;
        }
      }
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
      uint64_t v53 = OUTLINED_FUNCTION_8(v52);
      MEMORY[0x1F4188790](v53);
      OUTLINED_FUNCTION_63();
      uint64_t v55 = v29 + *(int *)(v54 + 56);
      uint64_t v56 = (uint64_t)v83;
      uint64_t v57 = OUTLINED_FUNCTION_69_0();
      outlined init with copy of Participant?(v57, v58, &demangling cache variable for type metadata for URL?);
      outlined init with copy of Participant?((uint64_t)v42, v55, &demangling cache variable for type metadata for URL?);
      type metadata accessor for URL();
      uint64_t v59 = OUTLINED_FUNCTION_69(v29);
      if (v43)
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v42, &demangling cache variable for type metadata for URL?);
        outlined destroy of SystemUpdateNotice?(v56, &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_69(v55);
        if (v43)
        {
          outlined destroy of SystemUpdateNotice?(v29, &demangling cache variable for type metadata for URL?);
          goto LABEL_34;
        }
      }
      else
      {
        MEMORY[0x1F4188790](v59);
        OUTLINED_FUNCTION_224();
        outlined init with copy of Participant?(v29, v39, &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_69(v55);
        if (!v60)
        {
          Swift::String v80 = v78;
          OUTLINED_FUNCTION_5_3();
          uint64_t v67 = v66;
          MEMORY[0x1F4188790](v68);
          uint64_t v79 = v78;
          uint64_t v69 = OUTLINED_FUNCTION_184_0();
          v70(v69);
          lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1F418B868]);
          v78[1] = OUTLINED_FUNCTION_297_0();
          Swift::String v71 = *(void (**)(void))(v67 + 8);
          OUTLINED_FUNCTION_139();
          v71();
          outlined destroy of SystemUpdateNotice?((uint64_t)v42, &demangling cache variable for type metadata for URL?);
          outlined destroy of SystemUpdateNotice?(v56, &demangling cache variable for type metadata for URL?);
          OUTLINED_FUNCTION_139();
          v71();
          outlined destroy of SystemUpdateNotice?(v29, &demangling cache variable for type metadata for URL?);
          goto LABEL_34;
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)v42, &demangling cache variable for type metadata for URL?);
        outlined destroy of SystemUpdateNotice?(v56, &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_26_2();
        v61();
      }
      outlined destroy of SystemUpdateNotice?(v29, &demangling cache variable for type metadata for (URL?, URL?));
      goto LABEL_34;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v7 + v31, &demangling cache variable for type metadata for URL?);
    swift_bridgeObjectRelease();
  }
  outlined destroy of SystemUpdateNotice?(v0, &demangling cache variable for type metadata for (PushToTalkNotice.NoticeType, PushToTalkNotice.NoticeType));
LABEL_35:
  OUTLINED_FUNCTION_28();
}

uint64_t AppLaunchNotice.uuid.setter()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*PushToTalkNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.type.getter()
{
  return _s15ConversationKit11ParticipantVWOcTm_9();
}

uint64_t PushToTalkNotice.type.setter()
{
  return outlined assign with take of SessionActionNotice();
}

uint64_t (*PushToTalkNotice.type.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.date.getter()
{
  return PushToTalkNotice.date.getter((uint64_t)type metadata accessor for PushToTalkNotice, MEMORY[0x1F418B9F8]);
}

uint64_t PushToTalkNotice.date.setter(uint64_t a1)
{
  return PushToTalkNotice.date.setter(a1, (uint64_t)type metadata accessor for PushToTalkNotice, MEMORY[0x1F418B9F8]);
}

uint64_t (*PushToTalkNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void PushToTalkNotice.priority.getter()
{
  uint64_t v0 = type metadata accessor for PushToTalkNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 28));
}

uint64_t PushToTalkNotice.priority.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for PushToTalkNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*PushToTalkNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t PushToTalkNotice.bundleIdentifier.setter()
{
  uint64_t v3 = OUTLINED_FUNCTION_81_5();
  type metadata accessor for PushToTalkNotice(v3);
  uint64_t result = OUTLINED_FUNCTION_192();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*PushToTalkNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.description.getter()
{
  int v0 = type metadata accessor for PushToTalkNotice.NoticeType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_103_2();
  _s15ConversationKit11ParticipantVWOcTm_9();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?));
    OUTLINED_FUNCTION_251_0();
    _StringGuts.grow(_:)(24);
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?));
    OUTLINED_FUNCTION_251_0();
    _StringGuts.grow(_:)(23);
  }
  swift_bridgeObjectRelease();
  outlined destroy of SystemUpdateNotice?((uint64_t)&v3[v0], &demangling cache variable for type metadata for URL?);
  return OUTLINED_FUNCTION_35();
}

double PushToTalkNotice.dismissalDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for PushToTalkNotice(0) + 36));
}

uint64_t PushToTalkNotice.dismissalDuration.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_272_0();
  uint64_t result = type metadata accessor for PushToTalkNotice(v2);
  *(void *)(v0 + *(int *)(result + 36)) = v1;
  return result;
}

uint64_t (*PushToTalkNotice.dismissalDuration.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.shouldTransitionToHUD.getter()
{
  uint64_t v0 = type metadata accessor for PushToTalkNotice(0);
  return protocol witness for Notice.shouldTransitionToHUD.getter in conformance PushToTalkNotice(v0);
}

uint64_t PushToTalkNotice.shouldTransitionToHUD.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_49_2();
  uint64_t v1 = type metadata accessor for PushToTalkNotice(v0);
  return OUTLINED_FUNCTION_275_0(v1);
}

uint64_t (*PushToTalkNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for PushToTalkNotice.actionHandler : PushToTalkNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PushToTalkNotice(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for PushToTalkNotice.actionHandler : PushToTalkNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for PushToTalkNotice(0) + 44));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t PushToTalkNotice.actionHandler.getter()
{
  return PushToTalkNotice.actionHandler.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_145_1();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v2 + 44));
}

uint64_t PushToTalkNotice.actionHandler.setter()
{
  return PushToTalkNotice.actionHandler.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_145_1();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v2 + 44));
}

uint64_t (*PushToTalkNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for PushToTalkNotice.dismissHandler : PushToTalkNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PushToTalkNotice(0) + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for PushToTalkNotice.dismissHandler : PushToTalkNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for PushToTalkNotice(0) + 48));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t PushToTalkNotice.dismissHandler.getter()
{
  return PushToTalkNotice.dismissHandler.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_145_1();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v2 + 48));
}

uint64_t PushToTalkNotice.dismissHandler.setter()
{
  return PushToTalkNotice.dismissHandler.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_145_1();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v2 + 48));
}

uint64_t (*PushToTalkNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.image.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_103_2();
  _s15ConversationKit11ParticipantVWOcTm_9();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = &demangling cache variable for type metadata for (enabled: Bool, image: URL?);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?);
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(v5);
  return outlined init with take of AspectRatio?((uint64_t)&v4[*(int *)(v6 + 48)], a1, &demangling cache variable for type metadata for URL?);
}

void PushToTalkNotice.subtitleStyle.getter()
{
  uint64_t v0 = type metadata accessor for PushToTalkNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 52));
}

uint64_t PushToTalkNotice.subtitleStyle.setter()
{
  uint64_t v0 = type metadata accessor for PushToTalkNotice(0);
  return OUTLINED_FUNCTION_274(v0);
}

uint64_t (*PushToTalkNotice.subtitleStyle.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t PushToTalkNotice.noticeAccessory.getter()
{
  return PushToTalkNotice.noticeAccessory.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_145_1();
  uint64_t v2 = v1(v0);
  uint64_t v3 = OUTLINED_FUNCTION_148_2(*(int *)(v2 + 56));
  return outlined copy of NoticeAccessory(v3, v4);
}

uint64_t PushToTalkNotice.noticeAccessory.setter()
{
  return PushToTalkNotice.noticeAccessory.setter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_145_1();
  uint64_t v2 = v1(v0);
  return OUTLINED_FUNCTION_168_1(*(int *)(v2 + 56));
}

uint64_t (*PushToTalkNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void PushToTalkNotice.shouldReplace(notice:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_14();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v4);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_5_1();
  uint64_t v10 = v3(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v19 - v12;
  outlined init with copy of IDSLookupManager((uint64_t)v7, (uint64_t)&v20);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  OUTLINED_FUNCTION_252_0();
  if (OUTLINED_FUNCTION_146_0())
  {
    OUTLINED_FUNCTION_54_8(v1);
    OUTLINED_FUNCTION_260_0();
    _s15ConversationKit11ParticipantVWObTm_3();
    int v14 = *(int *)(v10 + 28);
    uint64_t v15 = *(unsigned __int8 *)(v0 + v14);
    uint64_t v16 = v13[v14];
    _s15ConversationKit11ParticipantVWOhTm_6();
    if (v15 == v16) {
      goto LABEL_6;
    }
  }
  else
  {
    OUTLINED_FUNCTION_53(v1);
    outlined destroy of SystemUpdateNotice?(v1, v5);
  }
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  uint64_t v17 = OUTLINED_FUNCTION_40_15();
  v18(v17);
LABEL_6:
  OUTLINED_FUNCTION_15_0();
}

uint64_t PushToTalkNotice.equalTo(notice:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PushToTalkNotice?);
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PushToTalkNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_70_4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (!OUTLINED_FUNCTION_107_3())
  {
    OUTLINED_FUNCTION_53((uint64_t)v3);
    outlined destroy of SystemUpdateNotice?((uint64_t)v3, &demangling cache variable for type metadata for PushToTalkNotice?);
LABEL_10:
    char v11 = 0;
    return v11 & 1;
  }
  OUTLINED_FUNCTION_54_8((uint64_t)v3);
  OUTLINED_FUNCTION_193_0();
  static PushToTalkNotice.NoticeType.== infix(_:_:)();
  if ((v5 & 1) == 0)
  {
    _s15ConversationKit11ParticipantVWOhTm_6();
    goto LABEL_10;
  }
  uint64_t v6 = PushToTalkNotice.title.getter();
  uint64_t v8 = v7;
  if (v6 == PushToTalkNotice.title.getter() && v8 == v9)
  {
    char v11 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_43();
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s15ConversationKit11ParticipantVWOhTm_6();
  return v11 & 1;
}

uint64_t protocol witness for Notice.date.getter in conformance PushToTalkNotice(uint64_t a1, uint64_t a2)
{
  return protocol witness for Notice.date.getter in conformance PushToTalkNotice(a1, a2, MEMORY[0x1F418B9E8]);
}

uint64_t protocol witness for Notice.isExpired.getter in conformance PushToTalkNotice()
{
  specialized Notice.isExpired.getter();
  return v0 & 1;
}

double protocol witness for Notice.dismissalDuration.getter in conformance PushToTalkNotice(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

void protocol witness for Notice.priority.getter in conformance PushToTalkNotice(unsigned char *a1@<X8>)
{
}

uint64_t protocol witness for Notice.subtitle.getter in conformance PushToTalkNotice()
{
  return specialized Notice.subtitle.getter();
}

uint64_t protocol witness for Notice.subtitleStyle.getter in conformance PushToTalkNotice@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 52));
  return result;
}

uint64_t protocol witness for Notice.shouldTransitionToHUD.getter in conformance PushToTalkNotice(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

void static SystemUpdateNotice.NoticeType.== infix(_:_:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v6 = v5;
  if (!v2 || !v5) {
    goto LABEL_35;
  }
  uint64_t v7 = v4;
  uint64_t v8 = v2;
  uint64_t v9 = v1;
  uint64_t v10 = 1852403562;
  int v11 = v0;
  if (v0)
  {
    if (v0 == 1) {
      uint64_t v12 = 1702260589;
    }
    else {
      uint64_t v12 = 0x50646E416E696F6ALL;
    }
    if (v11 == 1) {
      unint64_t v13 = 0xE400000000000000;
    }
    else {
      unint64_t v13 = 0xEB0000000079616CLL;
    }
  }
  else
  {
    unint64_t v13 = 0xE400000000000000;
    uint64_t v12 = 1852403562;
  }
  if (v3)
  {
    if (v3 == 1) {
      uint64_t v10 = 1702260589;
    }
    else {
      uint64_t v10 = 0x50646E416E696F6ALL;
    }
    if (v3 == 1) {
      unint64_t v14 = 0xE400000000000000;
    }
    else {
      unint64_t v14 = 0xEB0000000079616CLL;
    }
  }
  else
  {
    unint64_t v14 = 0xE400000000000000;
  }
  if (v12 == v10 && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
LABEL_35:
      OUTLINED_FUNCTION_15_0();
      return;
    }
  }
  if (v9 == v7 && v8 == v6) {
    goto LABEL_35;
  }
  OUTLINED_FUNCTION_15_0();
  _stringCompareWithSmolCheck(_:_:expecting:)();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SystemUpdateNotice.NoticeType()
{
  static SystemUpdateNotice.NoticeType.== infix(_:_:)();
}

ConversationKit::SystemUpdateNotice::HandoffType_optional __swiftcall SystemUpdateNotice.HandoffType.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SystemUpdateNotice.HandoffType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (ConversationKit::SystemUpdateNotice::HandoffType_optional)3;
  }
  else {
    return (ConversationKit::SystemUpdateNotice::HandoffType_optional)v3;
  }
}

uint64_t SystemUpdateNotice.HandoffType.rawValue.getter(char a1)
{
  if (!a1) {
    return 1852403562;
  }
  if (a1 == 1) {
    return 1702260589;
  }
  return 0x50646E416E696F6ALL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SystemUpdateNotice.HandoffType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemUpdateNotice.HandoffType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SystemUpdateNotice.HandoffType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemUpdateNotice.HandoffType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::SystemUpdateNotice::HandoffType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SystemUpdateNotice.HandoffType@<W0>(Swift::String *a1@<X0>, ConversationKit::SystemUpdateNotice::HandoffType_optional *a2@<X8>)
{
  result.ConversationKit::VideoReaction value = SystemUpdateNotice.HandoffType.init(rawValue:)(*a1).value;
  a2->ConversationKit::VideoReaction value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SystemUpdateNotice.HandoffType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SystemUpdateNotice.HandoffType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t SystemUpdateNotice.type.getter()
{
  return OUTLINED_FUNCTION_34_9();
}

uint64_t SystemUpdateNotice.type.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*SystemUpdateNotice.type.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SystemUpdateNotice.activity.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Participant?(v1 + 24, a1, &demangling cache variable for type metadata for Activity?);
}

uint64_t SystemUpdateNotice.activity.setter(uint64_t a1)
{
  return _s15ConversationKit11ParticipantVSgWOdTm_0(a1, v1 + 24, &demangling cache variable for type metadata for Activity?);
}

uint64_t (*SystemUpdateNotice.activity.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

unint64_t SystemUpdateNotice.description.getter()
{
  unint64_t v1 = 0xD00000000000001DLL;
  if (*((void *)v0 + 2))
  {
    int v2 = *v0;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v3 = 0xE400000000000000;
    uint64_t v4 = 1702260589;
    if (v2 != 1)
    {
      uint64_t v4 = 0x50646E416E696F6ALL;
      unint64_t v3 = 0xEB0000000079616CLL;
    }
    if (v2) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 1852403562;
    }
    if (v2) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = 0xE400000000000000;
    }
    unint64_t v7 = v6;
    String.append(_:)(*(Swift::String *)&v5);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_161_0();
    String.append(_:)(v8);
    return 0xD000000000000024;
  }
  else
  {
    OUTLINED_FUNCTION_47();
  }
  return v1;
}

uint64_t SystemUpdateNotice.uuid.getter()
{
  return PushToTalkNotice.date.getter((uint64_t)type metadata accessor for SystemUpdateNotice, MEMORY[0x1F418BB80]);
}

uint64_t PushToTalkNotice.date.getter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_145_1();
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_267_0();
  a2(v5);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = OUTLINED_FUNCTION_4_18();
  return v7(v6);
}

uint64_t SystemUpdateNotice.uuid.setter(uint64_t a1)
{
  return PushToTalkNotice.date.setter(a1, (uint64_t)type metadata accessor for SystemUpdateNotice, MEMORY[0x1F418BB80]);
}

uint64_t PushToTalkNotice.date.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = OUTLINED_FUNCTION_145_1();
  v5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_267_0();
  a3(v6);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = OUTLINED_FUNCTION_41_0();
  return v8(v7);
}

uint64_t (*SystemUpdateNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SystemUpdateNotice.date.getter()
{
  type metadata accessor for SystemUpdateNotice(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t SystemUpdateNotice.date.setter()
{
  type metadata accessor for SystemUpdateNotice(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*SystemUpdateNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SystemUpdateNotice.priority.getter()
{
  uint64_t updated = type metadata accessor for SystemUpdateNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(updated + 32));
}

uint64_t SystemUpdateNotice.priority.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for SystemUpdateNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*SystemUpdateNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SystemUpdateNotice.dismissalDuration.getter()
{
  if (*(void *)(v0 + 16))
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    return (*(uint64_t (**)(void))(v1 + 936))();
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    return (*(uint64_t (**)(void))(v3 + 984))();
  }
}

uint64_t SystemUpdateNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SystemUpdateNotice.bundleIdentifier.setter()
{
  uint64_t v3 = OUTLINED_FUNCTION_81_5();
  type metadata accessor for SystemUpdateNotice(v3);
  uint64_t result = OUTLINED_FUNCTION_192();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SystemUpdateNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SystemUpdateNotice.shouldTransitionToHUD.getter()
{
  uint64_t updated = type metadata accessor for SystemUpdateNotice(0);
  return protocol witness for Notice.shouldTransitionToHUD.getter in conformance PushToTalkNotice(updated);
}

uint64_t SystemUpdateNotice.shouldTransitionToHUD.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_49_2();
  uint64_t updated = type metadata accessor for SystemUpdateNotice(v0);
  return OUTLINED_FUNCTION_275_0(updated);
}

uint64_t (*SystemUpdateNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SystemUpdateNotice.actionHandler : SystemUpdateNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SystemUpdateNotice(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for SystemUpdateNotice.actionHandler : SystemUpdateNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SystemUpdateNotice(0) + 44));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t SystemUpdateNotice.actionHandler.getter()
{
  return PushToTalkNotice.actionHandler.getter();
}

uint64_t SystemUpdateNotice.actionHandler.setter()
{
  return PushToTalkNotice.actionHandler.setter();
}

uint64_t (*SystemUpdateNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SystemUpdateNotice.dismissHandler : SystemUpdateNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SystemUpdateNotice(0) + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for SystemUpdateNotice.dismissHandler : SystemUpdateNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SystemUpdateNotice(0) + 48));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t SystemUpdateNotice.dismissHandler.getter()
{
  return PushToTalkNotice.dismissHandler.getter();
}

uint64_t SystemUpdateNotice.dismissHandler.setter()
{
  return PushToTalkNotice.dismissHandler.setter();
}

uint64_t (*SystemUpdateNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SystemUpdateNotice.subtitleStyle.getter()
{
  uint64_t updated = type metadata accessor for SystemUpdateNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(updated + 52));
}

uint64_t SystemUpdateNotice.subtitleStyle.setter()
{
  uint64_t updated = type metadata accessor for SystemUpdateNotice(0);
  return OUTLINED_FUNCTION_274(updated);
}

uint64_t (*SystemUpdateNotice.subtitleStyle.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SystemUpdateNotice.noticeAccessory.getter()
{
  return PushToTalkNotice.noticeAccessory.getter();
}

uint64_t SystemUpdateNotice.noticeAccessory.setter()
{
  return PushToTalkNotice.noticeAccessory.setter();
}

uint64_t (*SystemUpdateNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SystemUpdateNotice.equalTo(notice:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SystemUpdateNotice?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_80();
  uint64_t updated = type metadata accessor for SystemUpdateNotice(v5);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_171_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_150(v2, 0);
    _s15ConversationKit11ParticipantVWObTm_3();
    swift_bridgeObjectRetain();
    static SystemUpdateNotice.NoticeType.== infix(_:_:)();
    char v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
LABEL_11:
      _s15ConversationKit11ParticipantVWOhTm_6();
      goto LABEL_12;
    }
    uint64_t v10 = *(int *)(updated + 36);
    int v11 = (void *)(v1 + v10);
    uint64_t v12 = *(void *)(v1 + v10 + 8);
    unint64_t v13 = (void *)(v0 + v10);
    uint64_t v14 = v13[1];
    if (v12)
    {
      if (v14)
      {
        if (*v11 != *v13 || v12 != v14) {
          _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
    _s15ConversationKit11ParticipantVWOhTm_6();
    if (v14) {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    OUTLINED_FUNCTION_150(v2, 1);
    outlined destroy of SystemUpdateNotice?(v2, (uint64_t *)&demangling cache variable for type metadata for SystemUpdateNotice?);
  }
LABEL_12:
  OUTLINED_FUNCTION_28();
}

uint64_t protocol witness for Notice.uuid.getter in conformance SystemUpdateNotice(uint64_t a1, uint64_t a2)
{
  return protocol witness for Notice.date.getter in conformance PushToTalkNotice(a1, a2, MEMORY[0x1F418BBC8]);
}

uint64_t protocol witness for Notice.uuid.setter in conformance SystemUpdateNotice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Notice.date.getter in conformance SystemUpdateNotice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

void protocol witness for Notice.priority.getter in conformance SystemUpdateNotice(unsigned char *a1@<X8>)
{
}

uint64_t protocol witness for Notice.bundleIdentifier.getter in conformance SystemUpdateNotice(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for Notice.subtitle.getter in conformance SystemUpdateNotice()
{
  return specialized Notice.subtitle.getter();
}

uint64_t ReactionNotice.description.getter()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ParticipantReaction]);
  v1._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  OUTLINED_FUNCTION_270_0(v1);
  swift_bridgeObjectRelease();
  return 0x6E6F697463616552;
}

uint64_t ReactionNotice.reactions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReactionNotice.reactions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ReactionNotice.reactions.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ReactionNotice.uuid.getter()
{
  type metadata accessor for ReactionNotice(0);
  OUTLINED_FUNCTION_281_0();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t ReactionNotice.uuid.setter()
{
  type metadata accessor for ReactionNotice(0);
  OUTLINED_FUNCTION_281_0();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*ReactionNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ReactionNotice.date.getter()
{
  return SessionActivationRequestNotice.uuid.getter();
}

uint64_t ReactionNotice.date.setter(uint64_t a1)
{
  return SessionActivationRequestNotice.uuid.setter(a1, (void (*)(void))type metadata accessor for ReactionNotice, MEMORY[0x1F418BA00]);
}

uint64_t (*ReactionNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ReactionNotice.priority.getter()
{
  uint64_t v0 = type metadata accessor for ReactionNotice(0);
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 28));
}

uint64_t ReactionNotice.priority.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ReactionNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*ReactionNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ReactionNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReactionNotice.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ReactionNotice(0);
  uint64_t result = OUTLINED_FUNCTION_192();
  *char v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReactionNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ReactionNotice.shouldTransitionToHUD.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ReactionNotice(0) + 36));
}

uint64_t ReactionNotice.shouldTransitionToHUD.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_49_2();
  uint64_t v1 = type metadata accessor for ReactionNotice(v0);
  return OUTLINED_FUNCTION_276_0(v1);
}

uint64_t (*ReactionNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for ReactionNotice.actionHandler : ReactionNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ReactionNotice(0) + 40));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for ReactionNotice.actionHandler : ReactionNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ReactionNotice(0) + 40));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t ReactionNotice.actionHandler.getter()
{
  uint64_t v0 = type metadata accessor for ReactionNotice(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v0 + 40));
}

uint64_t ReactionNotice.actionHandler.setter()
{
  uint64_t v0 = type metadata accessor for ReactionNotice(0);
  return OUTLINED_FUNCTION_21_35(*(int *)(v0 + 40));
}

uint64_t (*ReactionNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for ReactionNotice.dismissHandler : ReactionNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ReactionNotice(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for ReactionNotice.dismissHandler : ReactionNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ReactionNotice(0) + 44));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t ReactionNotice.dismissHandler.getter()
{
  return AccountUpdateNotice.actionHandler.getter(type metadata accessor for ReactionNotice);
}

uint64_t AccountUpdateNotice.actionHandler.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = a1(0);
  return OUTLINED_FUNCTION_7_81(*(int *)(v1 + 44));
}

uint64_t ReactionNotice.dismissHandler.setter()
{
  return AccountUpdateNotice.actionHandler.setter();
}

uint64_t (*ReactionNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double ReactionNotice.dismissalDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for ReactionNotice(0) + 48));
}

uint64_t ReactionNotice.dismissalDuration.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_272_0();
  uint64_t result = type metadata accessor for ReactionNotice(v2);
  *(void *)(v0 + *(int *)(result + 48)) = v1;
  return result;
}

uint64_t (*ReactionNotice.dismissalDuration.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ReactionNotice.coalesce(with:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = OUTLINED_FUNCTION_264_0();
  uint64_t v67 = type metadata accessor for ParticipantReaction(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  uint64_t v60 = v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantReaction?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v61 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReactionNotice?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ReactionNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_17_0();
  outlined init with copy of IDSLookupManager(v2, (uint64_t)&v71);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  int v18 = swift_dynamicCast();
  if (!v18)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v16);
    outlined destroy of SystemUpdateNotice?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for ReactionNotice?);
LABEL_48:
    OUTLINED_FUNCTION_28();
    return;
  }
  int v58 = v18;
  OUTLINED_FUNCTION_31_13();
  __swift_storeEnumTagSinglePayload(v19, v20, v21, v16);
  _s15ConversationKit11ParticipantVWObTm_3();
  uint64_t v22 = *(int *)(v16 + 24);
  uint64_t v23 = (uint64_t)v0 + v22;
  uint64_t v24 = (char *)v1 + v22;
  int v66 = static Date.> infix(_:_:)();
  if (v66)
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_0();
    (*(void (**)(char *, uint64_t))(v25 + 24))(v24, v23);
  }
  uint64_t v26 = *v0;
  uint64_t v65 = *(void *)(*v0 + 16);
  if (!v65)
  {
LABEL_47:
    _s15ConversationKit11ParticipantVWOhTm_6();
    goto LABEL_48;
  }
  v57[0] = v26;
  v57[1] = v0;
  unint64_t v68 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v64 = v26 + v68;
  uint64_t v27 = *(void *)(v5 + 72);
  uint64_t updated = swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  uint64_t v63 = 0;
  uint64_t v59 = v1;
  uint64_t v70 = v27;
  while (1)
  {
    uint64_t v69 = v64 + v27 * v29;
    if ((v66 & 1) == 0)
    {
      uint64_t v45 = *(void *)(*v1 + 16);
      if (v45)
      {
        unint64_t v46 = *v1 + v68;
        type metadata accessor for Participant(0);
        swift_bridgeObjectRetain();
        while (1)
        {
          OUTLINED_FUNCTION_257_0();
          _s15ConversationKit11ParticipantVWOcTm_9();
          if (static UUID.== infix(_:_:)()) {
            break;
          }
          _s15ConversationKit11ParticipantVWOhTm_6();
          v46 += v27;
          if (!--v45) {
            goto LABEL_30;
          }
        }
        _s15ConversationKit11ParticipantVWObTm_3();
        uint64_t v47 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_30:
        uint64_t v47 = 1;
      }
      uint64_t v48 = v61;
      uint64_t v49 = v67;
      __swift_storeEnumTagSinglePayload(v61, v47, 1, v67);
      swift_bridgeObjectRelease();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v48, 1, v49);
      uint64_t updated = outlined destroy of SystemUpdateNotice?(v48, &demangling cache variable for type metadata for ParticipantReaction?);
      uint64_t v27 = v70;
      if (EnumTagSinglePayload != 1) {
        goto LABEL_44;
      }
      goto LABEL_39;
    }
    MEMORY[0x1F4188790](updated);
    uint64_t v30 = v63;
    uint64_t v31 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))partial apply for closure #1 in ParticipantGridViewController.updateProminenceEMA(withParticipant:ema:audioPriority:videoPriority:));
    uint64_t v32 = *v1;
    uint64_t v33 = *(void *)(*v1 + 16);
    uint64_t v34 = v33 - v31;
    if (v33 < v31) {
      break;
    }
    uint64_t v35 = v31;
    if (v31 < 0) {
      goto LABEL_50;
    }
    uint64_t v36 = v31 - v33;
    uint64_t v37 = v31;
    if (__OFADD__(v33, v31 - v33)) {
      goto LABEL_51;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v62 = v57;
    uint64_t v63 = v30;
    if (!isUniquelyReferenced_nonNull_native || v37 > *(void *)(v32 + 24) >> 1)
    {
      if (v33 <= v37) {
        uint64_t v39 = v33 - v34;
      }
      else {
        uint64_t v39 = v33;
      }
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v39, 1, v32);
    }
    unint64_t v40 = v32 + v68;
    uint64_t v41 = v35 * v70;
    unint64_t v42 = v32 + v68 + v35 * v70;
    swift_arrayDestroy();
    if (v33 != v35)
    {
      uint64_t v43 = *(void *)(v32 + 16) - v33;
      if (v43 < 0) {
        goto LABEL_53;
      }
      if (v41 < v33 * v70 || v42 >= v40 + v33 * v70 + v43 * v70)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v41 != v33 * v70)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v51 = *(void *)(v32 + 16);
      BOOL v52 = __OFADD__(v51, v36);
      uint64_t v53 = v51 - v34;
      if (v52) {
        goto LABEL_52;
      }
      *(void *)(v32 + 16) = v53;
    }
    OUTLINED_FUNCTION_234();
    uint64_t v1 = v59;
    *uint64_t v59 = v32;
LABEL_39:
    _s15ConversationKit11ParticipantVWOcTm_9();
    uint64_t v54 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v54 + 16) + 1, 1, v54);
    }
    unint64_t v56 = *(void *)(v54 + 16);
    unint64_t v55 = *(void *)(v54 + 24);
    if (v56 >= v55 >> 1) {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1, v54);
    }
    *(void *)(v54 + 16) = v56 + 1;
    uint64_t v27 = v70;
    uint64_t updated = _s15ConversationKit11ParticipantVWObTm_3();
    uint64_t *v1 = v54;
LABEL_44:
    if (++v29 == v65)
    {
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

id ReactionNotice.reactionSymbols.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  AttributedString.init()();
  uint64_t v1 = ReactionNotice.uniqueReactions.getter();
  uint64_t v36 = *(void *)(v1 + 16);
  if (v36)
  {
    unint64_t v35 = type metadata accessor for UIImage();
    uint64_t v2 = type metadata accessor for AttributedString();
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v2 - 8);
    uint64_t v31 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
    uint64_t v32 = v2;
    uint64_t v5 = *(void *)(v4 + 64);
    uint64_t v33 = v1;
    uint64_t v34 = v5;
    while (1)
    {
      uint64_t v43 = &v30;
      uint64_t v44 = *(char *)(v1 + v3 + 32);
      MEMORY[0x1F4188790](v2);
      uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v45 = 12369903;
      uint64_t v8 = MEMORY[0x1C87731A0](&v45, 3);
      uint64_t v41 = v9;
      uint64_t v42 = v8;
      uint64_t v10 = type metadata accessor for AttributeContainer();
      unint64_t v40 = &v30;
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = MEMORY[0x1F4188790](v10);
      uint64_t v39 = &v30;
      MEMORY[0x1F4188790](v12);
      uint64_t v14 = (char *)&v30 - v13;
      AttributeContainer.init()();
      uint64_t KeyPath = swift_getKeyPath();
      *(&v30 - 2) = MEMORY[0x1F4188790](KeyPath);
      swift_getKeyPath();
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributeContainer.Builder<AttributeScopes.UIKitAttributes.AttachmentAttribute>);
      uint64_t v38 = &v30;
      uint64_t v17 = *(void *)(v16 - 8);
      MEMORY[0x1F4188790](v16);
      uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute();
      AttributeContainer.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      uint64_t v20 = objc_retainAutoreleasedReturnValue(AVCaptureReactionSystemImageNameForType(**((AVCaptureReactionType **)&unk_1E64847C0
                                                                                        + v44)));
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id result = @nonobjc UIImage.__allocating_init(systemName:)();
      if (!result) {
        break;
      }
      uint64_t v22 = result;
      ++v3;
      id v23 = objc_msgSend(self, sel_textAttachmentWithImage_, result);

      uint64_t v45 = (uint64_t)v23;
      AttributeContainer.Builder.callAsFunction(_:)();

      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      AttributedString.init(_:attributes:)();
      lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1F418B350]);
      uint64_t v24 = v32;
      AttributedString.append<A>(_:)();
      uint64_t v2 = (*v31)(v7, v24);
      uint64_t v1 = v33;
      if (v36 == v3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    if (one-time initialization token for subjectContainer != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for AttributeContainer();
    __swift_project_value_buffer(v25, (uint64_t)static AttributedStrings.Notices.subjectContainer);
    uint64_t v26 = type metadata accessor for AttributedString.AttributeMergePolicy();
    uint64_t v27 = *(void *)(v26 - 8);
    MEMORY[0x1F4188790](v26);
    uint64_t v29 = (char *)&v30 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v29, *MEMORY[0x1E4F272B8], v26);
    AttributedString.mergeAttributes(_:mergePolicy:)();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  }
  return result;
}

uint64_t ReactionNotice.noticeAccessory.getter()
{
  return AccountUpdateNotice.noticeAccessory.getter(type metadata accessor for ReactionNotice);
}

uint64_t AccountUpdateNotice.noticeAccessory.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = a1(0);
  uint64_t v2 = OUTLINED_FUNCTION_148_2(*(int *)(v1 + 52));
  return outlined copy of NoticeAccessory(v2, v3);
}

uint64_t ReactionNotice.noticeAccessory.setter(uint64_t a1)
{
  return AccountUpdateNotice.noticeAccessory.setter(a1, type metadata accessor for ReactionNotice);
}

uint64_t AccountUpdateNotice.noticeAccessory.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  return OUTLINED_FUNCTION_168_1(*(int *)(v2 + 52));
}

uint64_t (*ReactionNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ReactionNotice.equalTo(notice:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReactionNotice?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_46_15();
  type metadata accessor for ReactionNotice(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_16_0();
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (OUTLINED_FUNCTION_146_0())
  {
    OUTLINED_FUNCTION_54_8(v1);
    _s15ConversationKit11ParticipantVWObTm_3();
    char v9 = 0;
    if (*(void *)(*(void *)v2 + 16) == *(void *)(*(void *)v3 + 16))
    {
      specialized static Array<A>.== infix(_:_:)();
      char v9 = v10;
    }
    _s15ConversationKit11ParticipantVWOhTm_6();
  }
  else
  {
    OUTLINED_FUNCTION_53(v1);
    outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for ReactionNotice?);
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t ReactionNotice.uniqueReactions.getter()
{
  uint64_t v14 = MEMORY[0x1E4FBC870];
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    uint64_t v3 = type metadata accessor for ParticipantReaction(0);
    uint64_t v4 = v1
       + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
    uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 72);
    swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x1E4FBC860];
    do
    {
      char v7 = *(unsigned char *)(v4 + *(int *)(v3 + 20));
      if (specialized Set._Variant.insert(_:)(&v13, v7))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, v6);
          uint64_t v6 = v10;
        }
        unint64_t v9 = *(void *)(v6 + 16);
        unint64_t v8 = *(void *)(v6 + 24);
        if (v9 >= v8 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1, v6);
          uint64_t v6 = v11;
        }
        *(void *)(v6 + 16) = v9 + 1;
        *(unsigned char *)(v6 + v9 + 32) = v7;
      }
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.AttachmentAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.AttachmentAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.UIKitAttributes.AttachmentAttribute()
{
}

uint64_t (*protocol witness for Notice.uuid.modify in conformance ReactionNotice())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for Notice.subtitle.getter in conformance ReactionNotice()
{
  return specialized Notice.subtitle.getter();
}

uint64_t ParticipantReaction.participant.getter()
{
  return _s15ConversationKit11ParticipantVWOcTm_9();
}

uint64_t ParticipantReaction.reaction.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantReaction(0) + 20));
}

uint64_t ParticipantReaction.init(participant:videoReaction:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  _s15ConversationKit11ParticipantVWObTm_3();
  uint64_t result = type metadata accessor for ParticipantReaction(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t ParticipantReaction.description.getter()
{
  Participant.contactDetails.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_41_0();
  Participant.name(_:)();
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_163();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 8250;
  v1._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  type metadata accessor for ParticipantReaction(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

void static ParticipantReaction.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_14();
  a17 = v19;
  a18 = v20;
  uint64_t v21 = type metadata accessor for ParticipantReaction(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_196();
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&a9 - v24;
  type metadata accessor for Participant(0);
  char v26 = static UUID.== infix(_:_:)();
  _s15ConversationKit11ParticipantVWOcTm_9();
  _s15ConversationKit11ParticipantVWOcTm_9();
  if (v26) {
    specialized == infix<A>(_:_:)(v25[*(int *)(v21 + 20)], *(unsigned __int8 *)(v18 + *(int *)(v21 + 20)));
  }
  _s15ConversationKit11ParticipantVWOhTm_6();
  OUTLINED_FUNCTION_45_4();
  _s15ConversationKit11ParticipantVWOhTm_6();
  OUTLINED_FUNCTION_15_0();
}

uint64_t FaceIDUnavailableNotice.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t FaceIDUnavailableNotice.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FaceIDUnavailableNotice.bundleIdentifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t FaceIDUnavailableNotice.uuid.getter()
{
  return AppLaunchNotice.date.getter();
}

uint64_t FaceIDUnavailableNotice.uuid.setter(uint64_t a1)
{
  return AppLaunchNotice.date.setter(a1, (void (*)(void))type metadata accessor for FaceIDUnavailableNotice, MEMORY[0x1F418BBC0]);
}

uint64_t AppLaunchNotice.date.setter(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t))
{
  a2(0);
  uint64_t v4 = OUTLINED_FUNCTION_164_0();
  a3(v4);
  OUTLINED_FUNCTION_0();
  uint64_t v5 = OUTLINED_FUNCTION_41_0();
  return v6(v5);
}

uint64_t (*FaceIDUnavailableNotice.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t FaceIDUnavailableNotice.date.getter()
{
  return PushToTalkNotice.date.getter((uint64_t)type metadata accessor for FaceIDUnavailableNotice, MEMORY[0x1F418B9F8]);
}

uint64_t FaceIDUnavailableNotice.date.setter(uint64_t a1)
{
  return PushToTalkNotice.date.setter(a1, (uint64_t)type metadata accessor for FaceIDUnavailableNotice, MEMORY[0x1F418B9F8]);
}

uint64_t (*FaceIDUnavailableNotice.date.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void FaceIDUnavailableNotice.priority.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_302_0();
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 28));
}

uint64_t FaceIDUnavailableNotice.priority.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for FaceIDUnavailableNotice(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*FaceIDUnavailableNotice.priority.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double FaceIDUnavailableNotice.dismissalDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for FaceIDUnavailableNotice(0) + 32));
}

uint64_t FaceIDUnavailableNotice.dismissalDuration.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_272_0();
  uint64_t result = type metadata accessor for FaceIDUnavailableNotice(v2);
  *(void *)(v0 + *(int *)(result + 32)) = v1;
  return result;
}

uint64_t (*FaceIDUnavailableNotice.dismissalDuration.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

unint64_t FaceIDUnavailableNotice.description.getter()
{
  return OUTLINED_FUNCTION_291_0();
}

void FaceIDUnavailableNotice.style.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_302_0();
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 36));
}

uint64_t FaceIDUnavailableNotice.style.setter()
{
  uint64_t v0 = type metadata accessor for FaceIDUnavailableNotice(0);
  return OUTLINED_FUNCTION_276_0(v0);
}

uint64_t (*FaceIDUnavailableNotice.style.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t FaceIDUnavailableNotice.shouldTransitionToHUD.getter()
{
  uint64_t v0 = type metadata accessor for FaceIDUnavailableNotice(0);
  return protocol witness for Notice.shouldTransitionToHUD.getter in conformance PushToTalkNotice(v0);
}

uint64_t FaceIDUnavailableNotice.shouldTransitionToHUD.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_49_2();
  uint64_t v1 = type metadata accessor for FaceIDUnavailableNotice(v0);
  return OUTLINED_FUNCTION_275_0(v1);
}

uint64_t (*FaceIDUnavailableNotice.shouldTransitionToHUD.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for FaceIDUnavailableNotice.actionHandler : FaceIDUnavailableNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for FaceIDUnavailableNotice(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    char v7 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    char v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for FaceIDUnavailableNotice.actionHandler : FaceIDUnavailableNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  char v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for FaceIDUnavailableNotice(0) + 44));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t FaceIDUnavailableNotice.actionHandler.getter()
{
  return PushToTalkNotice.actionHandler.getter();
}

uint64_t FaceIDUnavailableNotice.actionHandler.setter()
{
  return PushToTalkNotice.actionHandler.setter();
}

uint64_t (*FaceIDUnavailableNotice.actionHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for FaceIDUnavailableNotice.dismissHandler : FaceIDUnavailableNotice@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for FaceIDUnavailableNotice(0) + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    char v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    char v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for FaceIDUnavailableNotice.dismissHandler : FaceIDUnavailableNotice(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  char v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for FaceIDUnavailableNotice(0) + 48));
  uint64_t v8 = *v7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t FaceIDUnavailableNotice.dismissHandler.getter()
{
  return PushToTalkNotice.dismissHandler.getter();
}

uint64_t FaceIDUnavailableNotice.dismissHandler.setter()
{
  return PushToTalkNotice.dismissHandler.setter();
}

uint64_t (*FaceIDUnavailableNotice.dismissHandler.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void FaceIDUnavailableNotice.shouldReplace(notice:)()
{
}

void FaceIDUnavailableNotice.subtitleStyle.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_302_0();
  OUTLINED_FUNCTION_59_7(*(int *)(v0 + 52));
}

uint64_t FaceIDUnavailableNotice.subtitleStyle.setter()
{
  uint64_t v0 = type metadata accessor for FaceIDUnavailableNotice(0);
  return OUTLINED_FUNCTION_274(v0);
}

uint64_t (*FaceIDUnavailableNotice.subtitleStyle.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t FaceIDUnavailableNotice.noticeAccessory.getter()
{
  return PushToTalkNotice.noticeAccessory.getter();
}

uint64_t FaceIDUnavailableNotice.noticeAccessory.setter()
{
  return PushToTalkNotice.noticeAccessory.setter();
}

uint64_t (*FaceIDUnavailableNotice.noticeAccessory.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t FaceIDUnavailableNotice.equalTo(notice:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FaceIDUnavailableNotice?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_46_15();
  type metadata accessor for FaceIDUnavailableNotice(v5);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_150(v1, 0);
    OUTLINED_FUNCTION_124_1();
    _s15ConversationKit11ParticipantVWObTm_3();
    char v7 = static UUID.== infix(_:_:)();
    _s15ConversationKit11ParticipantVWOhTm_6();
  }
  else
  {
    OUTLINED_FUNCTION_150(v1, 1);
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for FaceIDUnavailableNotice?);
    char v7 = 0;
  }
  return v7 & 1;
}

void FaceIDUnavailableNotice.init()()
{
  uint64_t v1 = (int *)OUTLINED_FUNCTION_302_0();
  void *v0 = 0;
  v0[1] = 0;
  UUID.init()();
  Date.init()();
  *((unsigned char *)v0 + v1[7]) = 0;
  uint64_t v2 = v1[8];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  *(double *)((char *)v0 + v2) = (*(double (**)(void))(v3 + 984))();
  *((unsigned char *)v0 + v1[9]) = 1;
  *((unsigned char *)v0 + v1[10]) = 1;
  uint64_t v4 = (void *)((char *)v0 + v1[11]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (void *)((char *)v0 + v1[12]);
  void *v5 = 0;
  v5[1] = 0;
  *((unsigned char *)v0 + v1[13]) = 0;
  uint64_t v6 = (void *)((char *)v0 + v1[14]);
  *uint64_t v6 = 0;
  v6[1] = 0;
}

uint64_t default argument 1 of FaceIDUnavailableNotice.init(bundleIdentifier:uuid:date:priority:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  return UUID.init()();
}

uint64_t default argument 2 of FaceIDUnavailableNotice.init(bundleIdentifier:uuid:date:priority:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  return Date.init()();
}

uint64_t default argument 5 of PushToTalkNotice.init(uuid:type:date:priority:bundleIdentifier:dismissalDuration:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 984))();
}

void default argument 5 of FaceIDUnavailableNotice.init(bundleIdentifier:uuid:date:priority:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(unsigned char *a1@<X8>)
{
}

void FaceIDUnavailableNotice.init(bundleIdentifier:uuid:date:priority:dismissalDuration:style:shouldTransitionToHUD:actionHandler:dismissHandler:subtitleStyle:noticeAccessory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t *a13)
{
  OUTLINED_FUNCTION_154_1();
  uint64_t v35 = v13;
  char v34 = v14;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  char v20 = *v19;
  char v22 = *v21;
  char v23 = *a12;
  uint64_t v32 = a13[1];
  uint64_t v33 = *a13;
  *uint64_t v17 = v24;
  v17[1] = v25;
  char v26 = (int *)type metadata accessor for FaceIDUnavailableNotice(0);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_46();
  v27();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v28();
  *((unsigned char *)v18 + v26[7]) = v20;
  *(void *)((char *)v18 + v26[8]) = v16;
  *((unsigned char *)v18 + v26[9]) = v22;
  *((unsigned char *)v18 + v26[10]) = v34;
  uint64_t v29 = (void *)((char *)v18 + v26[11]);
  *uint64_t v29 = v35;
  v29[1] = a9;
  uint64_t v30 = (void *)((char *)v18 + v26[12]);
  void *v30 = a10;
  v30[1] = a11;
  *((unsigned char *)v18 + v26[13]) = v23;
  OUTLINED_FUNCTION_158_1(v26[14], v31, v32, v33);
  OUTLINED_FUNCTION_151_2();
}

uint64_t protocol witness for Notice.uuid.getter in conformance FaceIDUnavailableNotice()
{
  return protocol witness for Notice.date.getter in conformance AppLaunchNotice();
}

uint64_t protocol witness for Notice.uuid.setter in conformance FaceIDUnavailableNotice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Notice.date.getter in conformance PushToTalkNotice(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_35();
  return v4(v3);
}

uint64_t protocol witness for Notice.isExpired.getter in conformance FaceIDUnavailableNotice()
{
  specialized Notice.isExpired.getter();
  return v0 & 1;
}

double protocol witness for Notice.dismissalDuration.getter in conformance FaceIDUnavailableNotice(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 32));
}

uint64_t protocol witness for Notice.style.getter in conformance FaceIDUnavailableNotice@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 36));
  return result;
}

uint64_t protocol witness for Notice.title.getter in conformance FaceIDUnavailableNotice()
{
  return FaceIDUnavailableNotice.title.getter();
}

uint64_t protocol witness for Notice.attributedSubtitle.getter in conformance FaceIDUnavailableNotice()
{
  return FaceIDUnavailableNotice.attributedSubtitle.getter();
}

uint64_t protocol witness for Notice.fullSentence.getter in conformance FaceIDUnavailableNotice()
{
  return FaceIDUnavailableNotice.fullSentence.getter();
}

unint64_t protocol witness for Notice.description.getter in conformance FaceIDUnavailableNotice()
{
  return 0xD00000000000002BLL;
}

uint64_t protocol witness for Notice.noticeAccessory.getter in conformance PushToTalkNotice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 56));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return outlined copy of NoticeAccessory(v4, v5);
}

uint64_t protocol witness for Notice.actionHandler.getter in conformance PushToTalkNotice(uint64_t a1)
{
  return OUTLINED_FUNCTION_7_81(*(int *)(a1 + 44));
}

uint64_t protocol witness for Notice.actionHandler.setter in conformance PushToTalkNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OUTLINED_FUNCTION_21_35(*(int *)(a3 + 44));
}

uint64_t protocol witness for Notice.dismissHandler.getter in conformance PushToTalkNotice(uint64_t a1)
{
  return OUTLINED_FUNCTION_7_81(*(int *)(a1 + 48));
}

uint64_t protocol witness for Notice.dismissHandler.setter in conformance PushToTalkNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OUTLINED_FUNCTION_21_35(*(int *)(a3 + 48));
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(Swift::Int *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Participant(0);
  uint64_t v165 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v161 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v172 = (char *)&v152 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v152 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v173 = (char *)&v152 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v166 = (char *)&v152 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v163 = (char *)&v152 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v159 = (char *)&v152 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v158 = (char *)&v152 - v20;
  uint64_t v175 = a1;
  Swift::Int v21 = a1[1];
  Swift::Int v22 = _minimumMergeRunLength(_:)(v21);
  if (v22 >= v21)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      if (v21) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v21, 1, v175);
      }
      return;
    }
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  Swift::Int v23 = v22;
  uint64_t v155 = specialized static Array._allocateUninitialized(_:)(v21 / 2);
  uint64_t v156 = v21;
  unint64_t v164 = v24;
  if (v21 <= 0)
  {
    char v26 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v94 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_136:
    if (v94 < 2) {
      goto LABEL_150;
    }
    Swift::Int v144 = *v175;
    while (1)
    {
      unint64_t v145 = v94 - 2;
      if (v94 < 2) {
        break;
      }
      if (!v144) {
        goto LABEL_182;
      }
      uint64_t v146 = v26;
      uint64_t v147 = v26 + 32;
      uint64_t v148 = *(void *)&v26[16 * v145 + 32];
      uint64_t v149 = *(void *)&v26[16 * v94 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v144 + *(void *)(v165 + 72) * v148, v144 + *(void *)(v165 + 72) * *(void *)&v147[16 * v94 - 16], (char *)(v144 + *(void *)(v165 + 72) * v149), v164);
      if (v2) {
        goto LABEL_148;
      }
      if (v149 < v148) {
        goto LABEL_169;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v146 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v146);
      }
      if (v145 >= *((void *)v146 + 2)) {
        goto LABEL_170;
      }
      double v150 = &v146[16 * v145 + 32];
      *(void *)double v150 = v148;
      *((void *)v150 + 1) = v149;
      unint64_t v151 = *((void *)v146 + 2);
      if (v94 > v151) {
        goto LABEL_171;
      }
      char v26 = v146;
      memmove(&v146[16 * v94 + 16], &v146[16 * v94 + 32], 16 * (v151 - v94));
      *((void *)v146 + 2) = v151 - 1;
      unint64_t v94 = v151 - 1;
      if (v151 <= 2) {
        goto LABEL_150;
      }
    }
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  Swift::Int v154 = v23;
  Swift::Int v25 = 0;
  char v26 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v27 = v21;
  uint64_t v170 = v11;
  uint64_t v171 = v4;
  while (1)
  {
    Swift::Int v28 = v25 + 1;
    Swift::Int v162 = v25;
    if (v25 + 1 >= v27)
    {
      Swift::Int v38 = v25 + 1;
    }
    else
    {
      Swift::Int v169 = v27;
      Swift::Int v29 = *v175;
      uint64_t v30 = *(void *)(v165 + 72);
      uint64_t v31 = v158;
      _s15ConversationKit11ParticipantVWOcTm_9();
      Swift::Int v160 = v29;
      uint64_t v174 = v30;
      _s15ConversationKit11ParticipantVWOcTm_9();
      uint64_t v32 = *(int *)(v4 + 28);
      uint64_t v33 = *(void **)&v31[v32];
      if (v33)
      {
        id v34 = objc_msgSend(v33, sel_value);
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;

        uint64_t v32 = *(int *)(v4 + 28);
      }
      else
      {
        uint64_t v35 = 0;
        unint64_t v37 = 0xE000000000000000;
      }
      uint64_t v39 = *(void **)&v159[v32];
      if (v39)
      {
        id v40 = objc_msgSend(v39, sel_value);
        unint64_t v168 = v37;
        uint64_t v41 = v35;
        id v42 = v40;
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v45 = v44;

        uint64_t v35 = v41;
        Swift::Int v28 = v25 + 1;
        unint64_t v37 = v168;
      }
      else
      {
        uint64_t v43 = 0;
        unint64_t v45 = 0xE000000000000000;
      }
      if (v43 == v35 && v45 == v37) {
        LODWORD(v168) = 0;
      }
      else {
        LODWORD(v168) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v11 = v170;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s15ConversationKit11ParticipantVWOhTm_6();
      _s15ConversationKit11ParticipantVWOhTm_6();
      Swift::Int v38 = v25 + 2;
      Swift::Int v27 = v169;
      if (v25 + 2 < v169)
      {
        uint64_t v157 = v26;
        uint64_t v167 = v174 * v28;
        Swift::Int v47 = v160;
        while (1)
        {
          Swift::Int v48 = v38;
          uint64_t v49 = v163;
          _s15ConversationKit11ParticipantVWOcTm_9();
          _s15ConversationKit11ParticipantVWOcTm_9();
          uint64_t v50 = *(int *)(v4 + 28);
          uint64_t v51 = *(void **)&v49[v50];
          if (v51)
          {
            id v52 = objc_msgSend(v51, sel_value);
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v55 = v54;

            uint64_t v50 = *(int *)(v4 + 28);
          }
          else
          {
            uint64_t v53 = 0;
            unint64_t v55 = 0xE000000000000000;
          }
          unint64_t v56 = *(void **)&v166[v50];
          if (v56)
          {
            id v57 = objc_msgSend(v56, sel_value);
            uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v60 = v59;
          }
          else
          {
            uint64_t v58 = 0;
            unint64_t v60 = 0xE000000000000000;
          }
          BOOL v61 = v58 == v53 && v60 == v55;
          int v62 = v61 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v11 = v170;
          uint64_t v4 = v171;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _s15ConversationKit11ParticipantVWOhTm_6();
          _s15ConversationKit11ParticipantVWOhTm_6();
          if ((v168 ^ v62)) {
            break;
          }
          Swift::Int v38 = v48 + 1;
          v47 += v174;
          Swift::Int v27 = v169;
          if (v48 + 1 >= v169)
          {
            Swift::Int v38 = v169;
            char v26 = v157;
            Swift::Int v25 = v162;
            goto LABEL_36;
          }
        }
        char v26 = v157;
        Swift::Int v38 = v48;
        Swift::Int v25 = v162;
        Swift::Int v27 = v169;
      }
LABEL_36:
      if (v168)
      {
        if (v38 < v25) {
          goto LABEL_175;
        }
        if (v25 < v38)
        {
          uint64_t v157 = v26;
          uint64_t v63 = 0;
          uint64_t v64 = v174 * (v38 - 1);
          uint64_t v65 = v38 * v174;
          Swift::Int v66 = v25;
          uint64_t v67 = v25 * v174;
          do
          {
            if (v66 != v38 + v63 - 1)
            {
              uint64_t v68 = v2;
              Swift::Int v69 = v160;
              if (!v160) {
                goto LABEL_181;
              }
              unint64_t v70 = v160 + v67;
              unint64_t v168 = v160 + v64;
              _s15ConversationKit11ParticipantVWObTm_3();
              if (v67 < v64 || v70 >= v69 + v65)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v2 = v68;
              }
              else
              {
                uint64_t v2 = v68;
                if (v67 != v64) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              _s15ConversationKit11ParticipantVWObTm_3();
              Swift::Int v25 = v162;
            }
            ++v66;
            --v63;
            v64 -= v174;
            v65 -= v174;
            v67 += v174;
          }
          while (v66 < v38 + v63);
          char v26 = v157;
          uint64_t v11 = v170;
          uint64_t v4 = v171;
          Swift::Int v27 = v169;
        }
      }
    }
    if (v38 < v27)
    {
      if (__OFSUB__(v38, v25)) {
        goto LABEL_173;
      }
      if (v38 - v25 < v154)
      {
        if (__OFADD__(v25, v154)) {
          goto LABEL_176;
        }
        if (v25 + v154 >= v27) {
          Swift::Int v72 = v27;
        }
        else {
          Swift::Int v72 = v25 + v154;
        }
        if (v72 < v25) {
          goto LABEL_177;
        }
        if (v38 != v72)
        {
          uint64_t v157 = v26;
          uint64_t v153 = v2;
          uint64_t v73 = *(void *)(v165 + 72);
          uint64_t v174 = v73 * (v38 - 1);
          uint64_t v167 = v73;
          unint64_t v74 = v38 * v73;
          Swift::Int v160 = v72;
          do
          {
            uint64_t v75 = 0;
            unint64_t v168 = v74;
            Swift::Int v169 = v38;
            while (1)
            {
              uint64_t v76 = v173;
              _s15ConversationKit11ParticipantVWOcTm_9();
              _s15ConversationKit11ParticipantVWOcTm_9();
              uint64_t v77 = *(int *)(v4 + 28);
              char v78 = *(void **)&v76[v77];
              if (v78)
              {
                id v79 = objc_msgSend(v78, sel_value);
                uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v82 = v81;

                uint64_t v77 = *(int *)(v4 + 28);
              }
              else
              {
                uint64_t v80 = 0;
                unint64_t v82 = 0xE000000000000000;
              }
              uint64_t v83 = *(void **)&v11[v77];
              if (v83)
              {
                id v84 = objc_msgSend(v83, sel_value);
                uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v87 = v86;
              }
              else
              {
                uint64_t v85 = 0;
                unint64_t v87 = 0xE000000000000000;
              }
              if (v85 == v80 && v87 == v82) {
                break;
              }
              char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v11 = v170;
              _s15ConversationKit11ParticipantVWOhTm_6();
              _s15ConversationKit11ParticipantVWOhTm_6();
              if ((v89 & 1) == 0) {
                goto LABEL_79;
              }
              unint64_t v90 = v168;
              if (!*v175) {
                goto LABEL_179;
              }
              _s15ConversationKit11ParticipantVWObTm_3();
              uint64_t v4 = v171;
              swift_arrayInitWithTakeFrontToBack();
              _s15ConversationKit11ParticipantVWObTm_3();
              v75 -= v167;
              ++v25;
              Swift::Int v91 = v169;
              if (v169 == v25) {
                goto LABEL_80;
              }
            }
            swift_bridgeObjectRelease_n();
            uint64_t v11 = v170;
            _s15ConversationKit11ParticipantVWOhTm_6();
            _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_79:
            uint64_t v4 = v171;
            unint64_t v90 = v168;
            Swift::Int v91 = v169;
LABEL_80:
            Swift::Int v38 = v91 + 1;
            v174 += v167;
            unint64_t v74 = v90 + v167;
            Swift::Int v25 = v162;
          }
          while (v38 != v160);
          Swift::Int v38 = v160;
          uint64_t v2 = v153;
          char v26 = v157;
        }
      }
    }
    if (v38 < v25) {
      goto LABEL_172;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v93 = *((void *)v26 + 2);
    unint64_t v92 = *((void *)v26 + 3);
    unint64_t v94 = v93 + 1;
    Swift::Int v169 = v38;
    if (v93 >= v92 >> 1) {
      char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v94;
    uint64_t v95 = v26 + 32;
    Swift::String v96 = &v26[16 * v93 + 32];
    Swift::Int v97 = v169;
    *(void *)Swift::String v96 = v25;
    *((void *)v96 + 1) = v97;
    if (v93) {
      break;
    }
    unint64_t v94 = 1;
LABEL_130:
    Swift::Int v27 = v175[1];
    Swift::Int v25 = v169;
    if (v169 >= v27) {
      goto LABEL_136;
    }
  }
  while (1)
  {
    unint64_t v98 = v94 - 1;
    if (v94 >= 4)
    {
      uint64_t v103 = &v95[16 * v94];
      uint64_t v104 = *((void *)v103 - 8);
      uint64_t v105 = *((void *)v103 - 7);
      BOOL v109 = __OFSUB__(v105, v104);
      uint64_t v106 = v105 - v104;
      if (v109) {
        goto LABEL_157;
      }
      uint64_t v108 = *((void *)v103 - 6);
      uint64_t v107 = *((void *)v103 - 5);
      BOOL v109 = __OFSUB__(v107, v108);
      uint64_t v101 = v107 - v108;
      char v102 = v109;
      if (v109) {
        goto LABEL_158;
      }
      unint64_t v110 = v94 - 2;
      uint64_t v111 = &v95[16 * v94 - 32];
      uint64_t v113 = *(void *)v111;
      uint64_t v112 = *((void *)v111 + 1);
      BOOL v109 = __OFSUB__(v112, v113);
      uint64_t v114 = v112 - v113;
      if (v109) {
        goto LABEL_159;
      }
      BOOL v109 = __OFADD__(v101, v114);
      uint64_t v115 = v101 + v114;
      if (v109) {
        goto LABEL_161;
      }
      if (v115 >= v106)
      {
        uint64_t v133 = &v95[16 * v98];
        uint64_t v135 = *(void *)v133;
        uint64_t v134 = *((void *)v133 + 1);
        BOOL v109 = __OFSUB__(v134, v135);
        uint64_t v136 = v134 - v135;
        if (v109) {
          goto LABEL_167;
        }
        BOOL v126 = v101 < v136;
        goto LABEL_119;
      }
    }
    else
    {
      if (v94 != 3)
      {
        uint64_t v127 = *((void *)v26 + 4);
        uint64_t v128 = *((void *)v26 + 5);
        BOOL v109 = __OFSUB__(v128, v127);
        uint64_t v120 = v128 - v127;
        char v121 = v109;
        goto LABEL_113;
      }
      uint64_t v100 = *((void *)v26 + 4);
      uint64_t v99 = *((void *)v26 + 5);
      BOOL v109 = __OFSUB__(v99, v100);
      uint64_t v101 = v99 - v100;
      char v102 = v109;
    }
    if (v102) {
      goto LABEL_160;
    }
    unint64_t v110 = v94 - 2;
    Swift::String v116 = &v95[16 * v94 - 32];
    uint64_t v118 = *(void *)v116;
    uint64_t v117 = *((void *)v116 + 1);
    BOOL v119 = __OFSUB__(v117, v118);
    uint64_t v120 = v117 - v118;
    char v121 = v119;
    if (v119) {
      goto LABEL_162;
    }
    uint64_t v122 = &v95[16 * v98];
    uint64_t v124 = *(void *)v122;
    uint64_t v123 = *((void *)v122 + 1);
    BOOL v109 = __OFSUB__(v123, v124);
    uint64_t v125 = v123 - v124;
    if (v109) {
      goto LABEL_164;
    }
    if (__OFADD__(v120, v125)) {
      goto LABEL_166;
    }
    if (v120 + v125 >= v101)
    {
      BOOL v126 = v101 < v125;
LABEL_119:
      if (v126) {
        unint64_t v98 = v110;
      }
      goto LABEL_121;
    }
LABEL_113:
    if (v121) {
      goto LABEL_163;
    }
    uint64_t v129 = &v95[16 * v98];
    uint64_t v131 = *(void *)v129;
    uint64_t v130 = *((void *)v129 + 1);
    BOOL v109 = __OFSUB__(v130, v131);
    uint64_t v132 = v130 - v131;
    if (v109) {
      goto LABEL_165;
    }
    if (v132 < v120) {
      goto LABEL_130;
    }
LABEL_121:
    unint64_t v137 = v98 - 1;
    if (v98 - 1 >= v94)
    {
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    if (!*v175) {
      goto LABEL_180;
    }
    Swift::String v138 = v26;
    uint64_t v139 = &v95[16 * v137];
    uint64_t v140 = *(void *)v139;
    uint64_t v141 = &v95[16 * v98];
    uint64_t v142 = *((void *)v141 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(*v175 + *(void *)(v165 + 72) * *(void *)v139, *v175 + *(void *)(v165 + 72) * *(void *)v141, (char *)(*v175 + *(void *)(v165 + 72) * v142), v164);
    if (v2) {
      break;
    }
    if (v142 < v140) {
      goto LABEL_154;
    }
    if (v98 > *((void *)v138 + 2)) {
      goto LABEL_155;
    }
    *(void *)uint64_t v139 = v140;
    *(void *)&v95[16 * v137 + 8] = v142;
    unint64_t v143 = *((void *)v138 + 2);
    if (v98 >= v143) {
      goto LABEL_156;
    }
    char v26 = v138;
    unint64_t v94 = v143 - 1;
    memmove(&v95[16 * v98], v141 + 16, 16 * (v143 - 1 - v98));
    *((void *)v138 + 2) = v143 - 1;
    BOOL v126 = v143 > 2;
    uint64_t v11 = v170;
    uint64_t v4 = v171;
    if (!v126) {
      goto LABEL_130;
    }
  }
LABEL_148:
  swift_bridgeObjectRelease();
  if (v156 >= -1) {
    goto LABEL_151;
  }
  __break(1u);
LABEL_150:
  swift_bridgeObjectRelease();
  if (v156 >= -1)
  {
LABEL_151:
    *(void *)(v155 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Participant(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  id v79 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v76 = (char *)&v71 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  char v78 = (char *)&v71 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v75 = (uint64_t)&v71 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  int64_t v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_98;
  }
  uint64_t v20 = &a3[-a2];
  if (&a3[-a2] == (char *)0x8000000000000000 && v17 == -1) {
    goto LABEL_99;
  }
  uint64_t v22 = v18 / v17;
  uint64_t v23 = (uint64_t)v20 / v17;
  uint64_t v73 = v8;
  uint64_t v74 = v17;
  if (v18 / v17 >= (uint64_t)v20 / v17)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)v20 / v17, a4);
    unint64_t v24 = (char *)(a4 + v23 * v17);
    if (v23 * v17 >= 1 && a1 < a2)
    {
      uint64_t v27 = -v17;
      unint64_t v72 = a4;
      uint64_t v75 = -v17;
      do
      {
        unint64_t v28 = (unint64_t)a3;
        unint64_t v77 = (unint64_t)v24;
        char v78 = &v24[v27];
        Swift::Int v29 = v76;
        _s15ConversationKit11ParticipantVWOcTm_9();
        unint64_t v30 = a2 + v27;
        _s15ConversationKit11ParticipantVWOcTm_9();
        uint64_t v31 = *(int *)(v8 + 28);
        uint64_t v32 = *(void **)&v29[v31];
        if (v32)
        {
          id v33 = objc_msgSend(v32, sel_value);
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;

          uint64_t v31 = *(int *)(v8 + 28);
        }
        else
        {
          uint64_t v34 = 0;
          unint64_t v36 = 0xE000000000000000;
        }
        unint64_t v37 = *(void **)&v79[v31];
        if (v37)
        {
          id v38 = objc_msgSend(v37, sel_value);
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v41 = v40;
        }
        else
        {
          uint64_t v39 = 0;
          unint64_t v41 = 0xE000000000000000;
        }
        if (v39 == v34 && v41 == v36) {
          char v43 = 0;
        }
        else {
          char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        uint64_t v17 = v74;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v27 = v75;
        a3 = (char *)(v28 + v75);
        _s15ConversationKit11ParticipantVWOhTm_6();
        _s15ConversationKit11ParticipantVWOhTm_6();
        if (v43)
        {
          BOOL v44 = v28 < a2 || (unint64_t)a3 >= a2;
          uint64_t v8 = v73;
          if (v44)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v28 != a2)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v30;
          a4 = v72;
          unint64_t v24 = (char *)v77;
        }
        else
        {
          BOOL v45 = v28 < v77 || (unint64_t)a3 >= v77;
          uint64_t v8 = v73;
          if (v45)
          {
            unint64_t v46 = v78;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v24 = v46;
            a4 = v72;
          }
          else
          {
            a4 = v72;
            if (v28 == v77)
            {
              unint64_t v24 = v78;
            }
            else
            {
              Swift::Int v47 = v78;
              swift_arrayInitWithTakeBackToFront();
              unint64_t v24 = v47;
            }
          }
        }
      }
      while ((unint64_t)v24 > a4 && a2 > a1);
    }
  }
  else
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v18 / v17, a4);
    unint64_t v24 = (char *)(a4 + v22 * v17);
    if (v22 * v17 >= 1 && a2 < (unint64_t)a3)
    {
      unint64_t v77 = a4 + v22 * v17;
      while (1)
      {
        uint64_t v51 = (char *)v75;
        _s15ConversationKit11ParticipantVWOcTm_9();
        _s15ConversationKit11ParticipantVWOcTm_9();
        uint64_t v52 = *(int *)(v8 + 28);
        uint64_t v53 = *(void **)&v51[v52];
        if (v53)
        {
          id v54 = objc_msgSend(v53, sel_value);
          uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v57 = v56;

          uint64_t v52 = *(int *)(v8 + 28);
        }
        else
        {
          uint64_t v55 = 0;
          unint64_t v57 = 0xE000000000000000;
        }
        unint64_t v58 = a4;
        unint64_t v59 = *(void **)&v78[v52];
        if (v59)
        {
          id v60 = objc_msgSend(v59, sel_value);
          uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v63 = v62;
        }
        else
        {
          uint64_t v61 = 0;
          unint64_t v63 = 0xE000000000000000;
        }
        if (v61 == v55 && v63 == v57) {
          break;
        }
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _s15ConversationKit11ParticipantVWOhTm_6();
        _s15ConversationKit11ParticipantVWOhTm_6();
        if ((v65 & 1) == 0) {
          goto LABEL_80;
        }
        uint64_t v17 = v74;
        unint64_t v66 = a2 + v74;
        BOOL v67 = a1 < a2 || a1 >= v66;
        a4 = v58;
        if (v67)
        {
          uint64_t v8 = v73;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v8 = v73;
          if (a1 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_89:
        unint64_t v24 = (char *)v77;
        a1 += v17;
        BOOL v70 = a4 >= v77 || v66 >= (unint64_t)a3;
        a2 = v66;
        if (v70) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease_n();
      _s15ConversationKit11ParticipantVWOhTm_6();
      _s15ConversationKit11ParticipantVWOhTm_6();
LABEL_80:
      unint64_t v68 = v58;
      uint64_t v17 = v74;
      a4 = v58 + v74;
      if (a1 < v58 || a1 >= a4)
      {
        uint64_t v8 = v73;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        uint64_t v8 = v73;
        if (a1 != v68) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v66 = a2;
      goto LABEL_89;
    }
LABEL_16:
    a2 = a1;
  }
  uint64_t v49 = &v24[-a4];
  if (v17 != -1 || v49 != (char *)0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, (uint64_t)v49 / v17, a2);
    return;
  }
LABEL_100:
  __break(1u);
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Participant(0) - 8;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v31 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v30 = (char *)v28 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v32 = (char *)v28 - v11;
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  v28[1] = v14;
  while (1)
  {
    OUTLINED_FUNCTION_189();
    char v17 = a1();
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    v28[0] = v1;
    uint64_t v29 = v15;
    while (v21 < v19)
    {
      uint64_t v33 = v20;
      _s15ConversationKit11ParticipantVWOcTm_9();
      OUTLINED_FUNCTION_189();
      char v22 = a1();
      uint64_t result = _s15ConversationKit11ParticipantVWOhTm_6();
      if (v22)
      {
        uint64_t v23 = v29;
      }
      else
      {
        uint64_t v23 = v29;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(*v3 + 16);
          if (v16 >= v25) {
            goto LABEL_33;
          }
          uint64_t result = _s15ConversationKit11ParticipantVWOcTm_9();
          if (v21 >= v25) {
            goto LABEL_34;
          }
          _s15ConversationKit11ParticipantVWOcTm_9();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = (uint64_t *)v28[0];
          *(void *)v28[0] = v24;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()();
            uint64_t v24 = result;
            *uint64_t v3 = result;
          }
          if (v16 >= *(void *)(v24 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = outlined assign with take of SessionActionNotice();
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = outlined assign with take of SessionActionNotice();
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v27 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v33 + v23;
      if (v27 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(void))
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = 0;
    uint64_t v7 = 48;
    while (1)
    {
      OUTLINED_FUNCTION_189();
      char v8 = a1();
      if (v2)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return;
      }
      if (v8) {
        break;
      }
      ++v6;
      v7 += 16;
      if (v4 == v6) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    if (!__OFADD__(v6, 1))
    {
      unint64_t v9 = *(void *)(v3 + 16);
      if (v6 + 1 == v9) {
        return;
      }
      for (unint64_t i = v6 + 1; i < v9; ++i)
      {
        outlined init with copy of WeakPlatformDisplayLinkObserver(v3 + v7, (uint64_t)v19);
        OUTLINED_FUNCTION_189();
        char v11 = a1();
        outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v19);
        if ((v11 & 1) == 0)
        {
          if (i != v6)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_30;
            }
            uint64_t v12 = *v1;
            unint64_t v13 = *(void *)(*v1 + 16);
            if (v6 >= v13) {
              goto LABEL_31;
            }
            outlined init with copy of WeakPlatformDisplayLinkObserver(v12 + 16 * v6 + 32, (uint64_t)v19);
            if (i >= v13) {
              goto LABEL_32;
            }
            outlined init with copy of WeakPlatformDisplayLinkObserver(v12 + v7, (uint64_t)v18);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t *v1 = v12;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              uint64_t v12 = v17;
              uint64_t *v1 = v17;
            }
            if (v6 >= *(void *)(v12 + 16)) {
              goto LABEL_33;
            }
            outlined assign with take of WeakPlatformDisplayLinkObserver((uint64_t)v18, v12 + 16 * v6 + 32);
            if (i >= *(void *)(*v1 + 16)) {
              goto LABEL_34;
            }
            outlined assign with take of WeakPlatformDisplayLinkObserver((uint64_t)v19, *v1 + v7);
          }
          if (__OFADD__(v6++, 1)) {
            goto LABEL_29;
          }
        }
        unint64_t v16 = i + 1;
        if (__OFADD__(i, 1)) {
          goto LABEL_28;
        }
        uint64_t v3 = *v1;
        unint64_t v9 = *(void *)(*v1 + 16);
        v7 += 16;
        if (v16 == v9) {
          return;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)()
{
  uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(*v0 + 16);
  if (!v4) {
    return 0;
  }
  OUTLINED_FUNCTION_264_0();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  unint64_t v7 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v9 = *(void *)(v8 + 72);
  swift_bridgeObjectRetain();
  unint64_t v10 = 0;
  unint64_t v37 = v7;
  while (1)
  {
    OUTLINED_FUNCTION_189();
    char v11 = v2();
    if (v1)
    {
      swift_bridgeObjectRelease();
      return v10;
    }
    if (v11) {
      break;
    }
    ++v10;
    v7 += v9;
    if (v4 == v10)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v10, 1))
  {
    unint64_t v13 = *(void *)(v3 + 16);
    if (v10 + 1 == v13) {
      return v10;
    }
    uint64_t v14 = v9 + v7;
    unint64_t v15 = v10 + 1;
    id v38 = v2;
    unint64_t v35 = (uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 40);
    uint64_t v39 = v9;
    while (v15 < v13)
    {
      unint64_t v44 = v15;
      uint64_t v43 = v14;
      MEMORY[0x1F4188790](result);
      OUTLINED_FUNCTION_222_0();
      uint64_t v17 = *(uint64_t (**)(void))(v16 + 16);
      ((void (*)(uint64_t))v17)(v18 - v19);
      OUTLINED_FUNCTION_189();
      char v20 = v2();
      OUTLINED_FUNCTION_26_2();
      uint64_t result = v21();
      if (v20)
      {
        uint64_t v2 = v38;
        uint64_t v22 = v39;
        unint64_t v23 = v44;
      }
      else
      {
        unint64_t v23 = v44;
        if (v44 != v10)
        {
          MEMORY[0x1F4188790](result);
          OUTLINED_FUNCTION_222_0();
          uint64_t result = v24 - v25;
          if ((v10 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v26 = *v42;
          unint64_t v27 = *(void *)(*v42 + 16);
          if (v10 >= v27) {
            goto LABEL_33;
          }
          uint64_t v36 = v24 - v25;
          uint64_t result = v17();
          if (v44 >= v27) {
            goto LABEL_34;
          }
          MEMORY[0x1F4188790](result);
          OUTLINED_FUNCTION_222_0();
          uint64_t v30 = v28 - v29;
          ((void (*)(uint64_t))v17)(v28 - v29);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *id v42 = v26;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()();
            uint64_t v26 = result;
            *id v42 = result;
          }
          if (v10 >= *(void *)(v26 + 16)) {
            goto LABEL_35;
          }
          uint64_t v31 = *v35;
          uint64_t result = (*v35)(v26 + v37 + v10 * v39, v30, v41);
          uint64_t v32 = *v42;
          *id v42 = *v42;
          if (v44 >= *(void *)(v32 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = v31(v32 + v43, v36, v41);
          unint64_t v23 = v44;
        }
        BOOL v33 = __OFADD__(v10++, 1);
        uint64_t v2 = v38;
        uint64_t v22 = v39;
        if (v33) {
          goto LABEL_31;
        }
      }
      unint64_t v34 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(*v42 + 16);
      unint64_t v15 = v23 + 1;
      uint64_t v14 = v43 + v22;
      if (v34 == v13) {
        return v10;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for ParticipantReaction(0) - 8;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  BOOL v33 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v32 = (char *)v30 - v9;
  MEMORY[0x1F4188790](v8);
  unint64_t v34 = (char *)v30 - v11;
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  v30[1] = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    v30[0] = v1;
    uint64_t v31 = v15;
    while (v21 < v19)
    {
      uint64_t v22 = v3;
      uint64_t v35 = v20;
      unint64_t v23 = v34;
      _s15ConversationKit11ParticipantVWOcTm_9();
      char v24 = a1((unint64_t)v23);
      uint64_t result = _s15ConversationKit11ParticipantVWOhTm_6();
      if (v24)
      {
        uint64_t v3 = v22;
        uint64_t v25 = v31;
      }
      else
      {
        uint64_t v3 = v22;
        uint64_t v25 = v31;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(*v3 + 16);
          if (v16 >= v27) {
            goto LABEL_33;
          }
          uint64_t result = _s15ConversationKit11ParticipantVWOcTm_9();
          if (v21 >= v27) {
            goto LABEL_34;
          }
          _s15ConversationKit11ParticipantVWOcTm_9();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = (uint64_t *)v30[0];
          *(void *)v30[0] = v26;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()();
            uint64_t v26 = result;
            *uint64_t v3 = result;
          }
          if (v16 >= *(void *)(v26 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = outlined assign with take of SessionActionNotice();
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = outlined assign with take of SessionActionNotice();
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v35 + v25;
      if (v29 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ParticipantReaction(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantReaction);
}

uint64_t sub_1C334D830@<X0>(void *a1@<X8>)
{
  uint64_t result = AttributeScopes.conversationKit.getter();
  *a1 = &type metadata for AttributeScopes.ConversationKitAttributes;
  return result;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_9()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_89_0();
  v4(v3);
  return v0;
}

uint64_t _s15ConversationKit11ParticipantVWOhTm_6()
{
  uint64_t v1 = OUTLINED_FUNCTION_49_2();
  v2(v1);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return v0;
}

uint64_t type metadata accessor for SessionActionNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for SessionActionNotice);
}

uint64_t type metadata accessor for AppLaunchNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for AppLaunchNotice);
}

uint64_t type metadata accessor for PushToTalkNotice.NoticeType(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for PushToTalkNotice.NoticeType);
}

uint64_t type metadata accessor for PushToTalkNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for PushToTalkNotice);
}

uint64_t type metadata accessor for AccountUpdateNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for AccountUpdateNotice);
}

uint64_t type metadata accessor for ReactionNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ReactionNotice);
}

uint64_t outlined bridged method (pb) of @objc TUConversationNotice.item.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_item);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t _s15ConversationKit11ParticipantVWObTm_3()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v3();
  return v0;
}

uint64_t type metadata accessor for SystemUpdateNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for SystemUpdateNotice);
}

uint64_t outlined copy of NoticeAccessory(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined assign with take of SessionActionNotice()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_309();
  v4(v3);
  return v0;
}

uint64_t type metadata accessor for FaceIDUnavailableNotice(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for FaceIDUnavailableNotice);
}

unint64_t lazy protocol witness table accessor for type NoticePriority and conformance NoticePriority()
{
  unint64_t result = lazy protocol witness table cache variable for type NoticePriority and conformance NoticePriority;
  if (!lazy protocol witness table cache variable for type NoticePriority and conformance NoticePriority)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoticePriority and conformance NoticePriority);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NoticePriority and conformance NoticePriority;
  if (!lazy protocol witness table cache variable for type NoticePriority and conformance NoticePriority)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoticePriority and conformance NoticePriority);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationNoticeStyle and conformance ConversationNoticeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationNoticeStyle and conformance ConversationNoticeStyle;
  if (!lazy protocol witness table cache variable for type ConversationNoticeStyle and conformance ConversationNoticeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationNoticeStyle and conformance ConversationNoticeStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationNoticeSubtitleStyle and conformance ConversationNoticeSubtitleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationNoticeSubtitleStyle and conformance ConversationNoticeSubtitleStyle;
  if (!lazy protocol witness table cache variable for type ConversationNoticeSubtitleStyle and conformance ConversationNoticeSubtitleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationNoticeSubtitleStyle and conformance ConversationNoticeSubtitleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccountUpdateNotice.NoticeType and conformance AccountUpdateNotice.NoticeType()
{
  unint64_t result = lazy protocol witness table cache variable for type AccountUpdateNotice.NoticeType and conformance AccountUpdateNotice.NoticeType;
  if (!lazy protocol witness table cache variable for type AccountUpdateNotice.NoticeType and conformance AccountUpdateNotice.NoticeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccountUpdateNotice.NoticeType and conformance AccountUpdateNotice.NoticeType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemUpdateNotice.HandoffType and conformance SystemUpdateNotice.HandoffType()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemUpdateNotice.HandoffType and conformance SystemUpdateNotice.HandoffType;
  if (!lazy protocol witness table cache variable for type SystemUpdateNotice.HandoffType and conformance SystemUpdateNotice.HandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemUpdateNotice.HandoffType and conformance SystemUpdateNotice.HandoffType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NoticePriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C334DDF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for NoticePriority()
{
}

unsigned char *storeEnumTagSinglePayload for ConversationNoticeStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C334DEF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConversationNoticeStyle()
{
}

void type metadata accessor for ConversationNoticeSubtitleStyle()
{
}

unint64_t destroy for NoticeAccessory(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NoticeAccessory(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for NoticeAccessory(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NoticeAccessory(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NoticeAccessory(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NoticeAccessory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for NoticeAccessory()
{
}

uint64_t dispatch thunk of Notice.uuid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Notice.uuid.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Notice.uuid.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Notice.date.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Notice.isExpired.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Notice.dismissalDuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Notice.priority.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Notice.style.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Notice.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of Notice.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of Notice.subtitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Notice.attributedSubtitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of Notice.subtitleStyle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of Notice.fullSentence.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of Notice.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of Notice.noticeAccessory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of Notice.shouldTransitionToHUD.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of Notice.isSticky.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of Notice.shouldPerformActionHandlerOnNoticeTap.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of Notice.actionHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of Notice.actionHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of Notice.actionHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of Notice.dismissHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of Notice.dismissHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of Notice.dismissHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of Notice.coalesce(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 208))();
}

uint64_t dispatch thunk of Notice.shouldReplace(notice:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of Notice.equalTo(notice:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

void *initializeBufferWithCopyOfBuffer for SessionActivationRequestNotice(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v9 = a2[1];
    uint64_t v8 = a2[2];
    *a1 = v5;
    a1[1] = v9;
    a1[2] = v8;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    unint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_retain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[7];
    unint64_t v16 = (char *)a1 + v15;
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    unint64_t v21 = (void *)((char *)a1 + v20);
    uint64_t v22 = (void *)((char *)a2 + v20);
    unint64_t v23 = v22[1];
    if (v23 >= 2)
    {
      *unint64_t v21 = *v22;
      v21[1] = v23;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
    }
    uint64_t v24 = a3[12];
    uint64_t v25 = (void *)((char *)a1 + v24);
    uint64_t v26 = (void *)((char *)a2 + v24);
    if (*v26)
    {
      uint64_t v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    uint64_t v28 = a3[13];
    unint64_t v29 = (void *)((char *)a1 + v28);
    uint64_t v30 = (void *)((char *)a2 + v28);
    if (*v30)
    {
      uint64_t v31 = v30[1];
      *unint64_t v29 = *v30;
      v29[1] = v31;
      swift_retain();
    }
    else
    {
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
    }
    uint64_t v32 = a3[14];
    uint64_t v33 = a3[15];
    unint64_t v34 = (void *)((char *)a1 + v32);
    uint64_t v35 = (void *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    *unint64_t v34 = *v35;
    v34[1] = v36;
    unint64_t v37 = (char *)a1 + v33;
    id v38 = (char *)a2 + v33;
    long long v39 = *(_OWORD *)(v38 + 24);
    *(_OWORD *)((char *)a1 + v33 + 24) = v39;
    uint64_t v40 = v39;
    uint64_t v41 = **(void (***)(char *, char *, uint64_t))(v39 - 8);
    swift_bridgeObjectRetain();
    v41(v37, v38, v40);
  }
  return a1;
}

uint64_t destroy for SessionActivationRequestNotice(uint64_t a1, int *a2)
{
  swift_release();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  if (*(void *)(a1 + a2[11] + 8) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[12])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[13])) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[15];
  return __swift_destroy_boxed_opaque_existential_1(v8);
}

void *initializeWithCopy for SessionActivationRequestNotice(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
  uint64_t v17 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >= 2)
  {
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)((char *)a1 + v21);
  unint64_t v23 = (void *)((char *)a2 + v21);
  if (*v23)
  {
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  uint64_t v25 = a3[13];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  if (*v27)
  {
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }
  uint64_t v29 = a3[14];
  uint64_t v30 = a3[15];
  uint64_t v31 = (void *)((char *)a1 + v29);
  uint64_t v32 = (void *)((char *)a2 + v29);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  unint64_t v34 = (char *)a1 + v30;
  uint64_t v35 = (char *)a2 + v30;
  long long v36 = *(_OWORD *)(v35 + 24);
  *(_OWORD *)((char *)a1 + v30 + 24) = v36;
  uint64_t v37 = v36;
  id v38 = **(void (***)(char *, char *, uint64_t))(v36 - 8);
  swift_bridgeObjectRetain();
  v38(v34, v35, v37);
  return a1;
}

void *assignWithCopy for SessionActivationRequestNotice(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  unint64_t v18 = *(void *)((char *)a1 + v15 + 8);
  unint64_t v19 = *(void *)((char *)a2 + v15 + 8);
  if (v18 < 2)
  {
    if (v19 >= 2)
    {
      void *v16 = *v17;
      v16[1] = v17[1];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v19 < 2)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v16, &demangling cache variable for type metadata for (title: String));
LABEL_6:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_8;
  }
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(void *)((char *)a1 + v20);
  uint64_t v24 = *(void *)((char *)a2 + v20);
  if (v23)
  {
    if (v24)
    {
      uint64_t v25 = *((void *)v22 + 1);
      *uint64_t v21 = v24;
      v21[1] = v25;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v26 = *((void *)v22 + 1);
    *uint64_t v21 = v24;
    v21[1] = v26;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
LABEL_15:
  uint64_t v27 = a3[13];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = *(void *)((char *)a1 + v27);
  uint64_t v31 = *(void *)((char *)a2 + v27);
  if (!v30)
  {
    if (v31)
    {
      uint64_t v33 = *((void *)v29 + 1);
      *uint64_t v28 = v31;
      v28[1] = v33;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }
  if (!v31)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v32 = *((void *)v29 + 1);
  *uint64_t v28 = v31;
  v28[1] = v32;
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v34 = a3[14];
  uint64_t v35 = (void *)((char *)a1 + v34);
  long long v36 = (void *)((char *)a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((void *)((char *)a1 + a3[15]), (void *)((char *)a2 + a3[15]));
  return a1;
}

uint64_t initializeWithTake for SessionActivationRequestNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[12];
  uint64_t v17 = (void *)(a1 + v16);
  unint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  if (*v18)
  {
    uint64_t v20 = v18[1];
    *uint64_t v17 = v19;
    v17[1] = v20;
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  uint64_t v21 = a3[13];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  if (*v23)
  {
    uint64_t v25 = v23[1];
    *uint64_t v22 = v24;
    v22[1] = v25;
  }
  else
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  uint64_t v26 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  long long v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(void *)(v27 + 32) = *(void *)(v28 + 32);
  return a1;
}

uint64_t assignWithTake for SessionActivationRequestNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  if (*(void *)(a1 + v15 + 8) < 2uLL) {
    goto LABEL_4;
  }
  unint64_t v18 = *(void *)(v17 + 8);
  if (v18 < 2)
  {
    outlined destroy of SystemUpdateNotice?(a1 + v15, &demangling cache variable for type metadata for (title: String));
LABEL_4:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_6;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = v18;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v19 = a3[12];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a1 + v19);
  uint64_t v23 = *(void *)(a2 + v19);
  if (v22)
  {
    if (v23)
    {
      uint64_t v24 = *(void *)(v21 + 8);
      *uint64_t v20 = v23;
      v20[1] = v24;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v23)
  {
    uint64_t v25 = *(void *)(v21 + 8);
    *uint64_t v20 = v23;
    v20[1] = v25;
    goto LABEL_13;
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
LABEL_13:
  uint64_t v26 = a3[13];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a1 + v26);
  uint64_t v30 = *(void *)(a2 + v26);
  if (!v29)
  {
    if (v30)
    {
      uint64_t v32 = *(void *)(v28 + 8);
      *uint64_t v27 = v30;
      v27[1] = v32;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    goto LABEL_20;
  }
  if (!v30)
  {
    swift_release();
    goto LABEL_19;
  }
  uint64_t v31 = *(void *)(v28 + 8);
  *uint64_t v27 = v30;
  v27[1] = v31;
  swift_release();
LABEL_20:
  uint64_t v33 = a3[14];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[15];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  __swift_destroy_boxed_opaque_existential_1(a1 + v38);
  long long v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(void *)(v39 + 32) = *(void *)(v40 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionActivationRequestNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C334EF38);
}

uint64_t sub_1C334EF38()
{
  OUTLINED_FUNCTION_173();
  if (v3) {
    return OUTLINED_FUNCTION_46_0(*v1);
  }
  OUTLINED_FUNCTION_105_2();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    OUTLINED_FUNCTION_185();
  }
  else
  {
    type metadata accessor for Date();
    uint64_t v6 = *(int *)(v2 + 28);
  }
  uint64_t v7 = OUTLINED_FUNCTION_188(v6);
  return __swift_getEnumTagSinglePayload(v7, v8, v9);
}

uint64_t storeEnumTagSinglePayload for SessionActivationRequestNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C334EFD0);
}

void sub_1C334EFD0()
{
  OUTLINED_FUNCTION_5();
  if (v4)
  {
    void *v1 = (v0 - 1);
  }
  else
  {
    OUTLINED_FUNCTION_117_0();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v5 + 84) == v3)
    {
      OUTLINED_FUNCTION_202();
    }
    else
    {
      type metadata accessor for Date();
      uint64_t v6 = *(int *)(v2 + 28);
    }
    uint64_t v7 = OUTLINED_FUNCTION_85_5(v6);
    __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  }
}

uint64_t type metadata completion function for SessionActivationRequestNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccountUpdateNotice(void *a1, void *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *char v4 = *a2;
    char v4 = (void *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v17 = (void *)((char *)v4 + v16);
    unint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = a3[10];
    uint64_t v22 = a3[11];
    char v23 = *((unsigned char *)a2 + v21);
    *uint64_t v17 = v20;
    v17[1] = v19;
    *((unsigned char *)v4 + v21) = v23;
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (char *)a2 + v22;
    uint64_t v26 = *(void *)((char *)a2 + v22);
    swift_bridgeObjectRetain();
    if (v26)
    {
      uint64_t v27 = *((void *)v25 + 1);
      *uint64_t v24 = v26;
      v24[1] = v27;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    }
    uint64_t v29 = a3[12];
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    if (*v31)
    {
      uint64_t v32 = v31[1];
      void *v30 = *v31;
      v30[1] = v32;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    }
    uint64_t v33 = a3[13];
    uint64_t v34 = (void *)((char *)v4 + v33);
    uint64_t v35 = (void *)((char *)a2 + v33);
    unint64_t v36 = v35[1];
    if (v36 >= 2)
    {
      *uint64_t v34 = *v35;
      v34[1] = v36;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    }
  }
  return v4;
}

unint64_t destroy for AccountUpdateNotice(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[11])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[12])) {
    swift_release();
  }
  unint64_t result = *(void *)(a1 + a2[13] + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccountUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  char v22 = *(unsigned char *)(a2 + v20);
  void *v16 = v19;
  v16[1] = v18;
  *(unsigned char *)(a1 + v20) = v22;
  char v23 = (void *)(a1 + v21);
  uint64_t v24 = a2 + v21;
  uint64_t v25 = *(void *)(a2 + v21);
  swift_bridgeObjectRetain();
  if (v25)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    *char v23 = v25;
    v23[1] = v26;
    swift_retain();
  }
  else
  {
    *(_OWORD *)char v23 = *(_OWORD *)v24;
  }
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  if (*v29)
  {
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  uint64_t v31 = a3[13];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  unint64_t v34 = v33[1];
  if (v34 >= 2)
  {
    void *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  return a1;
}

uint64_t assignWithCopy for AccountUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a1 + v17);
  uint64_t v21 = *(void *)(a2 + v17);
  if (v20)
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(v19 + 8);
      *uint64_t v18 = v21;
      v18[1] = v22;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *(void *)(v19 + 8);
    *uint64_t v18 = v21;
    v18[1] = v23;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
LABEL_8:
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a1 + v24);
  uint64_t v28 = *(void *)(a2 + v24);
  if (v27)
  {
    if (v28)
    {
      uint64_t v29 = *(void *)(v26 + 8);
      *uint64_t v25 = v28;
      v25[1] = v29;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v28)
  {
    uint64_t v30 = *(void *)(v26 + 8);
    *uint64_t v25 = v28;
    v25[1] = v30;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_15:
  uint64_t v31 = a3[13];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  unint64_t v34 = *(void *)(a1 + v31 + 8);
  unint64_t v35 = v33[1];
  if (v34 >= 2)
  {
    if (v35 >= 2)
    {
      void *v32 = *v33;
      v32[1] = v33[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v32, &demangling cache variable for type metadata for (title: String));
    goto LABEL_20;
  }
  if (v35 < 2)
  {
LABEL_20:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    return a1;
  }
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithTake for AccountUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v19 = v17[1];
    void *v16 = v18;
    v16[1] = v19;
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  if (*v22)
  {
    uint64_t v24 = v22[1];
    *uint64_t v21 = v23;
    v21[1] = v24;
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for AccountUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a2 + v19);
  if (*(void *)(a1 + v19))
  {
    if (v22)
    {
      uint64_t v23 = *(void *)(v21 + 8);
      *uint64_t v20 = v22;
      v20[1] = v23;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v22)
  {
    uint64_t v24 = *(void *)(v21 + 8);
    *uint64_t v20 = v22;
    v20[1] = v24;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
LABEL_8:
  uint64_t v25 = a3[12];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a1 + v25);
  uint64_t v29 = *(void *)(a2 + v25);
  if (v28)
  {
    if (v29)
    {
      uint64_t v30 = *(void *)(v27 + 8);
      *uint64_t v26 = v29;
      v26[1] = v30;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v29)
  {
    uint64_t v31 = *(void *)(v27 + 8);
    *uint64_t v26 = v29;
    v26[1] = v31;
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
LABEL_15:
  uint64_t v32 = a3[13];
  uint64_t v33 = (void *)(a1 + v32);
  unint64_t v34 = (void *)(a2 + v32);
  if (*(void *)(a1 + v32 + 8) >= 2uLL)
  {
    unint64_t v35 = v34[1];
    if (v35 >= 2)
    {
      *uint64_t v33 = *v34;
      v33[1] = v35;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v33, &demangling cache variable for type metadata for (title: String));
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountUpdateNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C334FC00);
}

uint64_t sub_1C334FC00()
{
  OUTLINED_FUNCTION_173();
  if (v3) {
    return OUTLINED_FUNCTION_46_0(*(void *)(v1 + 8));
  }
  OUTLINED_FUNCTION_105_2();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    OUTLINED_FUNCTION_185();
  }
  else
  {
    type metadata accessor for Date();
    uint64_t v6 = *(int *)(v2 + 28);
  }
  uint64_t v7 = OUTLINED_FUNCTION_188(v6);
  return __swift_getEnumTagSinglePayload(v7, v8, v9);
}

uint64_t storeEnumTagSinglePayload for AccountUpdateNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C334FC98);
}

void sub_1C334FC98()
{
  OUTLINED_FUNCTION_5();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    OUTLINED_FUNCTION_117_0();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v5 + 84) == v3)
    {
      OUTLINED_FUNCTION_202();
    }
    else
    {
      type metadata accessor for Date();
      uint64_t v6 = *(int *)(v2 + 28);
    }
    uint64_t v7 = OUTLINED_FUNCTION_85_5(v6);
    __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  }
}

uint64_t type metadata completion function for AccountUpdateNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for AccountUpdateNotice.NoticeType()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionActionNotice(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    uint64_t v10 = a2[3];
    outlined copy of SessionActionNotice.NoticeType(*a2, v8, v9);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = (int *)type metadata accessor for Participant(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, (uint64_t)v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for Participant.State(0);
      uint64_t v106 = (uint64_t)v12;
      uint64_t v107 = (uint64_t)v14;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v18 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v12, v13, v18);
          goto LABEL_21;
        case 4u:
          uint64_t v19 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v12, v13, v19);
          uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v20 = *(int *)(v105 + 48);
          uint64_t v21 = &v12[v20];
          uint64_t v22 = &v13[v20];
          *(_OWORD *)uint64_t v21 = *(_OWORD *)&v13[v20];
          uint64_t v23 = *(void *)&v13[v20 + 16];
          uint64_t v24 = *(void *)&v13[v20 + 24];
          *((void *)v21 + 2) = v23;
          *((void *)v21 + 3) = v24;
          *((_WORD *)v21 + 16) = *((_WORD *)v22 + 16);
          *((void *)v21 + 5) = *((void *)v22 + 5);
          v21[48] = v22[48];
          *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
          *(_OWORD *)(v21 + 72) = *(_OWORD *)(v22 + 72);
          v21[88] = v22[88];
          v21[89] = v22[89];
          uint64_t v25 = *((void *)v22 + 15);
          swift_bridgeObjectRetain();
          if (v25)
          {
            if (v25 == 1)
            {
              uint64_t v26 = v21 + 96;
              uint64_t v27 = v22 + 96;
              size_t v28 = 209;
              goto LABEL_14;
            }
            uint64_t v30 = *((void *)v22 + 16);
            *((void *)v21 + 15) = v25;
            *((void *)v21 + 16) = v30;
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8))((uint64_t)(v21 + 96), (uint64_t)(v22 + 96), v25);
          }
          else
          {
            long long v29 = *((_OWORD *)v22 + 7);
            *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
            *((_OWORD *)v21 + 7) = v29;
            *((void *)v21 + 16) = *((void *)v22 + 16);
          }
          *((_DWORD *)v21 + 34) = *((_DWORD *)v22 + 34);
          long long v31 = *((_OWORD *)v22 + 10);
          *((_OWORD *)v21 + 9) = *((_OWORD *)v22 + 9);
          *((_OWORD *)v21 + 10) = v31;
          *((_OWORD *)v21 + 11) = *((_OWORD *)v22 + 11);
          v21[192] = v22[192];
          uint64_t v26 = v21 + 208;
          uint64_t v27 = v22 + 208;
          *((void *)v21 + 25) = *((void *)v22 + 25);
          size_t v28 = 97;
LABEL_14:
          memcpy(v26, v27, v28);
          uint64_t v32 = *((void *)v22 + 39);
          if (v32)
          {
            uint64_t v33 = *((void *)v22 + 40);
            uint64_t v34 = *((void *)v22 + 41);
            *((void *)v21 + 39) = v32;
            *((void *)v21 + 40) = v33;
            *((void *)v21 + 41) = v34;
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v21 + 312) = *(_OWORD *)(v22 + 312);
            *((void *)v21 + 41) = *((void *)v22 + 41);
          }
          uint64_t v12 = (char *)v106;
          uint64_t v35 = *(int *)(v105 + 64);
          uint64_t v36 = v106 + v35;
          uint64_t v37 = &v13[v35];
          uint64_t v38 = *((void *)v37 + 1);
          if (v38)
          {
            *(void *)uint64_t v36 = *(void *)v37;
            *(void *)(v36 + 8) = v38;
            uint64_t v39 = *((void *)v37 + 3);
            *(void *)(v36 + 16) = *((void *)v37 + 2);
            *(void *)(v36 + 24) = v39;
            *(unsigned char *)(v36 + 32) = v37[32];
            *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 40);
            *(void *)(v36 + 56) = *((void *)v37 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v40 = *((_OWORD *)v37 + 1);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
            *(_OWORD *)(v36 + 16) = v40;
            long long v41 = *((_OWORD *)v37 + 3);
            *(_OWORD *)(v36 + 32) = *((_OWORD *)v37 + 2);
            *(_OWORD *)(v36 + 48) = v41;
          }
          uint64_t v14 = (int *)v107;
LABEL_21:
          swift_storeEnumTagMultiPayload();
LABEL_22:
          uint64_t v42 = v14[5];
          uint64_t v43 = &v12[v42];
          unint64_t v44 = &v13[v42];
          uint64_t v45 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
          uint64_t v46 = v14[6];
          Swift::Int v47 = &v12[v46];
          Swift::Int v48 = &v13[v46];
          v47[4] = v48[4];
          *(_DWORD *)Swift::Int v47 = *(_DWORD *)v48;
          uint64_t v49 = v14[7];
          uint64_t v50 = &v12[v49];
          uint64_t v51 = &v13[v49];
          uint64_t v52 = *(void **)v51;
          if (*(void *)v51)
          {
            uint64_t v53 = *((void *)v51 + 1);
            *(void *)uint64_t v50 = v52;
            *((void *)v50 + 1) = v53;
            v50[16] = v51[16];
            uint64_t v54 = *((void *)v51 + 4);
            *((void *)v50 + 3) = *((void *)v51 + 3);
            *((void *)v50 + 4) = v54;
            id v55 = v52;
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v56 = *((_OWORD *)v51 + 1);
            *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
            *((_OWORD *)v50 + 1) = v56;
            *((void *)v50 + 4) = *((void *)v51 + 4);
          }
          *(void *)&v12[v14[8]] = *(void *)&v13[v14[8]];
          uint64_t v57 = v14[9];
          unint64_t v58 = &v12[v57];
          unint64_t v59 = &v13[v57];
          uint64_t v60 = *((void *)v59 + 1);
          *(void *)unint64_t v58 = *(void *)v59;
          *((void *)v58 + 1) = v60;
          v12[v14[10]] = v13[v14[10]];
          *(void *)&v12[v14[11]] = *(void *)&v13[v14[11]];
          uint64_t v61 = v14[12];
          unint64_t v62 = *(void **)&v13[v61];
          *(void *)&v12[v61] = v62;
          v12[v14[13]] = v13[v14[13]];
          uint64_t v63 = v14[14];
          uint64_t v64 = &v12[v63];
          uint64_t v104 = v13;
          char v65 = &v13[v63];
          uint64_t v66 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v67 = v62;
          if (__swift_getEnumTagSinglePayload((uint64_t)v65, 1, v66))
          {
            uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
            __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v66);
          }
          uint64_t v69 = type metadata accessor for Participant.CountdownInfo(0);
          uint64_t v70 = *(int *)(v69 + 20);
          uint64_t v71 = &v64[v70];
          unint64_t v72 = &v65[v70];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v65[v70], 1, v66))
          {
            uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v71, v72, v66);
            __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v66);
          }
          v64[*(int *)(v69 + 24)] = v65[*(int *)(v69 + 24)];
          *(unsigned char *)(v106 + *(int *)(v107 + 60)) = v104[*(int *)(v107 + 60)];
          *(void *)(v106 + *(int *)(v107 + 64)) = *(void *)&v104[*(int *)(v107 + 64)];
          swift_retain();
          __swift_storeEnumTagSinglePayload(v106, 0, 1, v107);
          break;
        default:
          memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
          goto LABEL_22;
      }
    }
    uint64_t v74 = a3[6];
    long long v75 = *(_OWORD *)((char *)a2 + v74 + 24);
    *(_OWORD *)((char *)a1 + v74 + 24) = v75;
    (**(void (***)(void))(v75 - 8))();
    uint64_t v76 = a3[7];
    long long v77 = *(_OWORD *)((char *)a2 + v76 + 24);
    *(_OWORD *)((char *)a1 + v76 + 24) = v77;
    (**(void (***)(void))(v77 - 8))();
    uint64_t v78 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    id v79 = (char *)a1 + v78;
    uint64_t v80 = (char *)a2 + v78;
    *(void *)id v79 = *(void *)v80;
    v79[8] = v80[8];
    uint64_t v81 = a3[10];
    unint64_t v82 = (char *)a1 + v81;
    uint64_t v83 = (char *)a2 + v81;
    uint64_t v84 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 16))(v82, v83, v84);
    uint64_t v85 = a3[11];
    unint64_t v86 = (char *)a1 + v85;
    unint64_t v87 = (char *)a2 + v85;
    uint64_t v88 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v86, v87, v88);
    uint64_t v89 = a3[12];
    uint64_t v90 = a3[13];
    Swift::Int v91 = (uint64_t *)((char *)a1 + v89);
    unint64_t v92 = (uint64_t *)((char *)a2 + v89);
    uint64_t v93 = v92[1];
    *Swift::Int v91 = *v92;
    v91[1] = v93;
    *((unsigned char *)a1 + v90) = *((unsigned char *)a2 + v90);
    uint64_t v94 = a3[14];
    uint64_t v95 = (uint64_t *)((char *)a1 + v94);
    Swift::String v96 = (char *)a2 + v94;
    uint64_t v97 = *(uint64_t *)((char *)a2 + v94);
    swift_bridgeObjectRetain();
    if (v97)
    {
      uint64_t v98 = *((void *)v96 + 1);
      *uint64_t v95 = v97;
      v95[1] = v98;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
    }
    uint64_t v99 = a3[15];
    uint64_t v100 = (char *)a1 + v99;
    uint64_t v101 = (char *)a2 + v99;
    if (!*(void *)v101)
    {
      *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
      return a1;
    }
    uint64_t v102 = *((void *)v101 + 1);
    *(void *)uint64_t v100 = *(void *)v101;
    *((void *)v100 + 1) = v102;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for SessionActionNotice(uint64_t a1, int *a2)
{
  outlined consume of SessionActionNotice.NoticeType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[5];
  int v5 = (int *)type metadata accessor for Participant(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, (uint64_t)v5))
  {
    type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
        break;
      case 4u:
        uint64_t v18 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v4, v18);
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v20 = v4 + *(int *)(v19 + 48);
        swift_bridgeObjectRelease();
        if (*(void *)(v20 + 120) >= 2uLL) {
          __swift_destroy_boxed_opaque_existential_1(v20 + 96);
        }
        if (*(void *)(v20 + 312))
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v4 + *(int *)(v19 + 64) + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
      default:
        break;
    }
    uint64_t v7 = v4 + v5[5];
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    unint64_t v9 = (id *)(v4 + v5[7]);
    if (*v9)
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v10 = v4 + v5[14];
    uint64_t v11 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    }
    uint64_t v12 = v10 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
    if (!__swift_getEnumTagSinglePayload(v12, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v12, v11);
    }
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[6]);
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[7]);
  uint64_t v13 = a1 + a2[10];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = a1 + a2[11];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[14])) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + a2[15]))
  {
    return swift_release();
  }
  return result;
}

uint64_t *initializeWithCopy for SessionActionNotice(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  outlined copy of SessionActionNotice.NoticeType(*a2, v7, v8);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for Participant(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, (uint64_t)v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Participant.State(0);
    uint64_t v104 = (uint64_t)v11;
    uint64_t v105 = (uint64_t)v13;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
        goto LABEL_19;
      case 4u:
        uint64_t v17 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v11, v12, v17);
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v18 = *(int *)(v103 + 48);
        uint64_t v19 = &v11[v18];
        uint64_t v20 = &v12[v18];
        *(_OWORD *)uint64_t v19 = *(_OWORD *)&v12[v18];
        uint64_t v21 = *(void *)&v12[v18 + 16];
        uint64_t v22 = *(void *)&v12[v18 + 24];
        *((void *)v19 + 2) = v21;
        *((void *)v19 + 3) = v22;
        *((_WORD *)v19 + 16) = *((_WORD *)v20 + 16);
        *((void *)v19 + 5) = *((void *)v20 + 5);
        v19[48] = v20[48];
        *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
        *(_OWORD *)(v19 + 72) = *(_OWORD *)(v20 + 72);
        v19[88] = v20[88];
        v19[89] = v20[89];
        uint64_t v23 = *((void *)v20 + 15);
        swift_bridgeObjectRetain();
        if (v23)
        {
          if (v23 == 1)
          {
            uint64_t v24 = v19 + 96;
            uint64_t v25 = v20 + 96;
            size_t v26 = 209;
            goto LABEL_12;
          }
          uint64_t v28 = *((void *)v20 + 16);
          *((void *)v19 + 15) = v23;
          *((void *)v19 + 16) = v28;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8))((uint64_t)(v19 + 96), (uint64_t)(v20 + 96), v23);
        }
        else
        {
          long long v27 = *((_OWORD *)v20 + 7);
          *((_OWORD *)v19 + 6) = *((_OWORD *)v20 + 6);
          *((_OWORD *)v19 + 7) = v27;
          *((void *)v19 + 16) = *((void *)v20 + 16);
        }
        *((_DWORD *)v19 + 34) = *((_DWORD *)v20 + 34);
        long long v29 = *((_OWORD *)v20 + 10);
        *((_OWORD *)v19 + 9) = *((_OWORD *)v20 + 9);
        *((_OWORD *)v19 + 10) = v29;
        *((_OWORD *)v19 + 11) = *((_OWORD *)v20 + 11);
        v19[192] = v20[192];
        uint64_t v24 = v19 + 208;
        uint64_t v25 = v20 + 208;
        *((void *)v19 + 25) = *((void *)v20 + 25);
        size_t v26 = 97;
LABEL_12:
        memcpy(v24, v25, v26);
        uint64_t v30 = *((void *)v20 + 39);
        if (v30)
        {
          uint64_t v31 = *((void *)v20 + 40);
          uint64_t v32 = *((void *)v20 + 41);
          *((void *)v19 + 39) = v30;
          *((void *)v19 + 40) = v31;
          *((void *)v19 + 41) = v32;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v19 + 312) = *(_OWORD *)(v20 + 312);
          *((void *)v19 + 41) = *((void *)v20 + 41);
        }
        uint64_t v11 = (char *)v104;
        uint64_t v33 = *(int *)(v103 + 64);
        uint64_t v34 = v104 + v33;
        uint64_t v35 = &v12[v33];
        uint64_t v36 = *((void *)v35 + 1);
        if (v36)
        {
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v36;
          uint64_t v37 = *((void *)v35 + 3);
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = v37;
          *(unsigned char *)(v34 + 32) = v35[32];
          *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
          *(void *)(v34 + 56) = *((void *)v35 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v38 = *((_OWORD *)v35 + 1);
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(_OWORD *)(v34 + 16) = v38;
          long long v39 = *((_OWORD *)v35 + 3);
          *(_OWORD *)(v34 + 32) = *((_OWORD *)v35 + 2);
          *(_OWORD *)(v34 + 48) = v39;
        }
        uint64_t v13 = (int *)v105;
LABEL_19:
        swift_storeEnumTagMultiPayload();
LABEL_20:
        uint64_t v40 = v13[5];
        long long v41 = &v11[v40];
        uint64_t v42 = &v12[v40];
        uint64_t v43 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
        uint64_t v44 = v13[6];
        uint64_t v45 = &v11[v44];
        uint64_t v46 = &v12[v44];
        uint64_t v45[4] = v46[4];
        *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
        uint64_t v47 = v13[7];
        Swift::Int v48 = &v11[v47];
        uint64_t v49 = &v12[v47];
        uint64_t v50 = *(void **)v49;
        if (*(void *)v49)
        {
          uint64_t v51 = *((void *)v49 + 1);
          *(void *)Swift::Int v48 = v50;
          *((void *)v48 + 1) = v51;
          v48[16] = v49[16];
          uint64_t v52 = *((void *)v49 + 4);
          *((void *)v48 + 3) = *((void *)v49 + 3);
          *((void *)v48 + 4) = v52;
          id v53 = v50;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v54 = *((_OWORD *)v49 + 1);
          *(_OWORD *)Swift::Int v48 = *(_OWORD *)v49;
          *((_OWORD *)v48 + 1) = v54;
          *((void *)v48 + 4) = *((void *)v49 + 4);
        }
        *(void *)&v11[v13[8]] = *(void *)&v12[v13[8]];
        uint64_t v55 = v13[9];
        long long v56 = &v11[v55];
        uint64_t v57 = &v12[v55];
        uint64_t v58 = *((void *)v57 + 1);
        *(void *)long long v56 = *(void *)v57;
        *((void *)v56 + 1) = v58;
        v11[v13[10]] = v12[v13[10]];
        *(void *)&v11[v13[11]] = *(void *)&v12[v13[11]];
        uint64_t v59 = v13[12];
        uint64_t v60 = *(void **)&v12[v59];
        *(void *)&v11[v59] = v60;
        v11[v13[13]] = v12[v13[13]];
        uint64_t v61 = v13[14];
        unint64_t v62 = &v11[v61];
        uint64_t v102 = v12;
        uint64_t v63 = &v12[v61];
        uint64_t v64 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v65 = v60;
        if (__swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
          __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
        }
        uint64_t v67 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v68 = *(int *)(v67 + 20);
        uint64_t v69 = &v62[v68];
        uint64_t v70 = &v63[v68];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v63[v68], 1, v64))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v69, v70, v64);
          __swift_storeEnumTagSinglePayload((uint64_t)v69, 0, 1, v64);
        }
        v62[*(int *)(v67 + 24)] = v63[*(int *)(v67 + 24)];
        *(unsigned char *)(v104 + *(int *)(v105 + 60)) = v102[*(int *)(v105 + 60)];
        *(void *)(v104 + *(int *)(v105 + 64)) = *(void *)&v102[*(int *)(v105 + 64)];
        swift_retain();
        __swift_storeEnumTagSinglePayload(v104, 0, 1, v105);
        break;
      default:
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
        goto LABEL_20;
    }
  }
  uint64_t v72 = a3[6];
  long long v73 = *(_OWORD *)((char *)a2 + v72 + 24);
  *(_OWORD *)((char *)a1 + v72 + 24) = v73;
  (**(void (***)(void))(v73 - 8))();
  uint64_t v74 = a3[7];
  long long v75 = *(_OWORD *)((char *)a2 + v74 + 24);
  *(_OWORD *)((char *)a1 + v74 + 24) = v75;
  (**(void (***)(void))(v75 - 8))();
  uint64_t v76 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  long long v77 = (char *)a1 + v76;
  uint64_t v78 = (char *)a2 + v76;
  *(void *)long long v77 = *(void *)v78;
  v77[8] = v78[8];
  uint64_t v79 = a3[10];
  uint64_t v80 = (char *)a1 + v79;
  uint64_t v81 = (char *)a2 + v79;
  uint64_t v82 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16))(v80, v81, v82);
  uint64_t v83 = a3[11];
  uint64_t v84 = (char *)a1 + v83;
  uint64_t v85 = (char *)a2 + v83;
  uint64_t v86 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
  uint64_t v87 = a3[12];
  uint64_t v88 = a3[13];
  uint64_t v89 = (uint64_t *)((char *)a1 + v87);
  uint64_t v90 = (uint64_t *)((char *)a2 + v87);
  uint64_t v91 = v90[1];
  *uint64_t v89 = *v90;
  v89[1] = v91;
  *((unsigned char *)a1 + v88) = *((unsigned char *)a2 + v88);
  uint64_t v92 = a3[14];
  uint64_t v93 = (uint64_t *)((char *)a1 + v92);
  uint64_t v94 = (char *)a2 + v92;
  uint64_t v95 = *(uint64_t *)((char *)a2 + v92);
  swift_bridgeObjectRetain();
  if (v95)
  {
    uint64_t v96 = *((void *)v94 + 1);
    *uint64_t v93 = v95;
    v93[1] = v96;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
  }
  uint64_t v97 = a3[15];
  uint64_t v98 = (uint64_t *)((char *)a1 + v97);
  uint64_t v99 = (uint64_t *)((char *)a2 + v97);
  if (*v99)
  {
    uint64_t v100 = v99[1];
    *uint64_t v98 = *v99;
    v98[1] = v100;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
  }
  return a1;
}

uint64_t *assignWithCopy for SessionActionNotice(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  outlined copy of SessionActionNotice.NoticeType(*a2, v7, v8);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  unint64_t v12 = a1[2];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  outlined consume of SessionActionNotice.NoticeType(v10, v11, v12);
  uint64_t v13 = a3[5];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for Participant(0);
  LODWORD(v7) = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v16);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, (uint64_t)v16);
  if (!v7)
  {
    if (EnumTagSinglePayload)
    {
      _s15ConversationKit11ParticipantVWOhTm_6();
      goto LABEL_7;
    }
    uint64_t v186 = v16;
    if (a1 != a2)
    {
      _s15ConversationKit11ParticipantVWOhTm_6();
      uint64_t v21 = type metadata accessor for Participant.State(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v22 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v14, v15, v22);
          goto LABEL_48;
        case 4u:
          uint64_t v34 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v14, v15, v34);
          __srca = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v184 = v15;
          uint64_t v35 = __srca[12];
          uint64_t v36 = &v14[v35];
          uint64_t v37 = &v15[v35];
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
          *((void *)v36 + 2) = *((void *)v37 + 2);
          uint64_t v38 = *((void *)v37 + 3);
          *((_WORD *)v36 + 16) = *((_WORD *)v37 + 16);
          *((void *)v36 + 3) = v38;
          *((void *)v36 + 5) = *((void *)v37 + 5);
          v36[48] = v37[48];
          long long v39 = *(_OWORD *)(v37 + 72);
          long long v40 = *(_OWORD *)(v37 + 56);
          v36[88] = v37[88];
          *(_OWORD *)(v36 + 56) = v40;
          *(_OWORD *)(v36 + 72) = v39;
          v36[89] = v37[89];
          uint64_t v41 = *((void *)v37 + 15);
          swift_bridgeObjectRetain();
          if (v41)
          {
            if (v41 == 1)
            {
              uint64_t v42 = v36 + 96;
              uint64_t v43 = v37 + 96;
              size_t v44 = 209;
              goto LABEL_42;
            }
            *((void *)v36 + 15) = v41;
            *((void *)v36 + 16) = *((void *)v37 + 16);
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v41 - 8))((uint64_t)(v36 + 96), (uint64_t)(v37 + 96), v41);
          }
          else
          {
            long long v91 = *((_OWORD *)v37 + 6);
            long long v92 = *((_OWORD *)v37 + 7);
            *((void *)v36 + 16) = *((void *)v37 + 16);
            *((_OWORD *)v36 + 6) = v91;
            *((_OWORD *)v36 + 7) = v92;
          }
          *((_DWORD *)v36 + 34) = *((_DWORD *)v37 + 34);
          *((void *)v36 + 18) = *((void *)v37 + 18);
          *((void *)v36 + 19) = *((void *)v37 + 19);
          long long v93 = *((_OWORD *)v37 + 10);
          long long v94 = *((_OWORD *)v37 + 11);
          v36[192] = v37[192];
          *((_OWORD *)v36 + 10) = v93;
          *((_OWORD *)v36 + 11) = v94;
          *((void *)v36 + 25) = *((void *)v37 + 25);
          uint64_t v42 = v36 + 208;
          uint64_t v43 = v37 + 208;
          size_t v44 = 97;
LABEL_42:
          memcpy(v42, v43, v44);
          uint64_t v16 = v186;
          uint64_t v95 = *((void *)v37 + 39);
          if (v95)
          {
            uint64_t v96 = *((void *)v37 + 40);
            *((void *)v36 + 39) = v95;
            *((void *)v36 + 40) = v96;
            *((void *)v36 + 41) = *((void *)v37 + 41);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v97 = *(_OWORD *)(v37 + 312);
            *((void *)v36 + 41) = *((void *)v37 + 41);
            *(_OWORD *)(v36 + 312) = v97;
          }
          uint64_t v15 = v184;
          uint64_t v98 = __srca[16];
          uint64_t v99 = &v14[v98];
          uint64_t v100 = &v184[v98];
          if (*((void *)v100 + 1))
          {
            *(void *)uint64_t v99 = *(void *)v100;
            *((void *)v99 + 1) = *((void *)v100 + 1);
            *((void *)v99 + 2) = *((void *)v100 + 2);
            *((void *)v99 + 3) = *((void *)v100 + 3);
            v99[32] = v100[32];
            *((void *)v99 + 5) = *((void *)v100 + 5);
            *((void *)v99 + 6) = *((void *)v100 + 6);
            *((void *)v99 + 7) = *((void *)v100 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v101 = *(_OWORD *)v100;
            long long v102 = *((_OWORD *)v100 + 1);
            long long v103 = *((_OWORD *)v100 + 3);
            *((_OWORD *)v99 + 2) = *((_OWORD *)v100 + 2);
            *((_OWORD *)v99 + 3) = v103;
            *(_OWORD *)uint64_t v99 = v101;
            *((_OWORD *)v99 + 1) = v102;
          }
LABEL_48:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
          break;
      }
    }
    uint64_t v104 = v16[5];
    uint64_t v105 = &v14[v104];
    uint64_t v106 = &v15[v104];
    uint64_t v107 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 24))(v105, v106, v107);
    uint64_t v108 = v16[6];
    BOOL v109 = &v14[v108];
    unint64_t v110 = &v15[v108];
    *BOOL v109 = *v110;
    v109[1] = v110[1];
    v109[2] = v110[2];
    v109[3] = v110[3];
    v109[4] = v110[4];
    uint64_t v111 = v16[7];
    uint64_t v112 = (uint64_t)&v14[v111];
    uint64_t v113 = &v15[v111];
    uint64_t v114 = *(void **)&v14[v111];
    uint64_t v115 = *(void **)&v15[v111];
    if (v114)
    {
      if (v115)
      {
        *(void *)uint64_t v112 = v115;
        id v116 = v115;

        uint64_t v117 = *((void *)v113 + 1);
        *(unsigned char *)(v112 + 16) = v113[16];
        *(void *)(v112 + 8) = v117;
        *(void *)(v112 + 24) = *((void *)v113 + 3);
        *(void *)(v112 + 32) = *((void *)v113 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Participant.RemoteIdentifiers(v112);
        uint64_t v120 = *((void *)v113 + 4);
        long long v121 = *((_OWORD *)v113 + 1);
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
        *(_OWORD *)(v112 + 16) = v121;
        *(void *)(v112 + 32) = v120;
      }
    }
    else if (v115)
    {
      *(void *)uint64_t v112 = v115;
      uint64_t v118 = *((void *)v113 + 1);
      *(unsigned char *)(v112 + 16) = v113[16];
      *(void *)(v112 + 8) = v118;
      *(void *)(v112 + 24) = *((void *)v113 + 3);
      *(void *)(v112 + 32) = *((void *)v113 + 4);
      id v119 = v115;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v122 = *(_OWORD *)v113;
      long long v123 = *((_OWORD *)v113 + 1);
      *(void *)(v112 + 32) = *((void *)v113 + 4);
      *(_OWORD *)uint64_t v112 = v122;
      *(_OWORD *)(v112 + 16) = v123;
    }
    *(void *)&v14[v16[8]] = *(void *)&v15[v16[8]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v124 = v16[9];
    uint64_t v125 = &v14[v124];
    BOOL v126 = &v15[v124];
    *(void *)uint64_t v125 = *(void *)v126;
    *((void *)v125 + 1) = *((void *)v126 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14[v16[10]] = v15[v16[10]];
    *(void *)&v14[v16[11]] = *(void *)&v15[v16[11]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v127 = v16[12];
    uint64_t v128 = *(void **)&v14[v127];
    uint64_t v129 = *(void **)&v15[v127];
    *(void *)&v14[v127] = v129;
    id v130 = v129;

    v14[v16[13]] = v15[v16[13]];
    uint64_t v131 = v16[14];
    uint64_t v132 = &v14[v131];
    uint64_t v133 = (uint64_t)&v15[v131];
    uint64_t v134 = type metadata accessor for Date();
    LODWORD(v128) = __swift_getEnumTagSinglePayload((uint64_t)v132, 1, v134);
    __srcc = (unsigned char *)v133;
    int v135 = __swift_getEnumTagSinglePayload(v133, 1, v134);
    if (v128)
    {
      uint64_t v136 = v15;
      if (!v135)
      {
        unint64_t v137 = __srcc;
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v134 - 8) + 16))(v132, __srcc, v134);
        __swift_storeEnumTagSinglePayload((uint64_t)v132, 0, 1, v134);
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v138 = *(void *)(v134 - 8);
      uint64_t v136 = v15;
      if (!v135)
      {
        unint64_t v137 = __srcc;
        (*(void (**)(char *, unsigned char *, uint64_t))(v138 + 24))(v132, __srcc, v134);
LABEL_62:
        uint64_t v140 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v141 = *(int *)(v140 + 20);
        Swift::String v178 = v132;
        uint64_t v142 = &v132[v141];
        unint64_t v143 = &v137[v141];
        int v144 = __swift_getEnumTagSinglePayload((uint64_t)v142, 1, v134);
        int v145 = __swift_getEnumTagSinglePayload((uint64_t)v143, 1, v134);
        if (v144)
        {
          if (!v145)
          {
            (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v134 - 8) + 16))(v142, v143, v134);
            __swift_storeEnumTagSinglePayload((uint64_t)v142, 0, 1, v134);
LABEL_68:
            v178[*(int *)(v140 + 24)] = __srcc[*(int *)(v140 + 24)];
            v14[v186[15]] = v136[v186[15]];
            *(void *)&v14[v186[16]] = *(void *)&v136[v186[16]];
            swift_retain();
            swift_release();
            goto LABEL_69;
          }
        }
        else
        {
          uint64_t v146 = *(void *)(v134 - 8);
          if (!v145)
          {
            (*(void (**)(char *, unsigned char *, uint64_t))(v146 + 24))(v142, v143, v134);
            goto LABEL_68;
          }
          (*(void (**)(char *, uint64_t))(v146 + 8))(v142, v134);
        }
        uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v142, v143, *(void *)(*(void *)(v147 - 8) + 64));
        goto LABEL_68;
      }
      (*(void (**)(char *, uint64_t))(v138 + 8))(v132, v134);
    }
    uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    unint64_t v137 = __srcc;
    memcpy(v132, __srcc, *(void *)(*(void *)(v139 - 8) + 64));
    goto LABEL_62;
  }
  if (EnumTagSinglePayload)
  {
LABEL_7:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_69;
  }
  uint64_t v18 = type metadata accessor for Participant.State(0);
  uint64_t v183 = v15;
  uint64_t v185 = (uint64_t)v16;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v14, v15, v19);
      goto LABEL_28;
    case 4u:
      uint64_t v23 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v14, v15, v23);
      __src = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v24 = __src[12];
      uint64_t v25 = &v14[v24];
      size_t v26 = &v15[v24];
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *((void *)v25 + 2) = *((void *)v26 + 2);
      uint64_t v27 = *((void *)v26 + 3);
      *((_WORD *)v25 + 16) = *((_WORD *)v26 + 16);
      *((void *)v25 + 3) = v27;
      *((void *)v25 + 5) = *((void *)v26 + 5);
      v25[48] = v26[48];
      long long v28 = *(_OWORD *)(v26 + 72);
      long long v29 = *(_OWORD *)(v26 + 56);
      v25[88] = v26[88];
      *(_OWORD *)(v25 + 56) = v29;
      *(_OWORD *)(v25 + 72) = v28;
      v25[89] = v26[89];
      uint64_t v30 = *((void *)v26 + 15);
      swift_bridgeObjectRetain();
      if (v30)
      {
        if (v30 == 1)
        {
          uint64_t v31 = v25 + 96;
          uint64_t v32 = v26 + 96;
          size_t v33 = 209;
          goto LABEL_22;
        }
        *((void *)v25 + 15) = v30;
        *((void *)v25 + 16) = *((void *)v26 + 16);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(v25 + 96), (uint64_t)(v26 + 96), v30);
      }
      else
      {
        long long v45 = *((_OWORD *)v26 + 6);
        long long v46 = *((_OWORD *)v26 + 7);
        *((void *)v25 + 16) = *((void *)v26 + 16);
        *((_OWORD *)v25 + 6) = v45;
        *((_OWORD *)v25 + 7) = v46;
      }
      *((_DWORD *)v25 + 34) = *((_DWORD *)v26 + 34);
      *((void *)v25 + 18) = *((void *)v26 + 18);
      *((void *)v25 + 19) = *((void *)v26 + 19);
      long long v47 = *((_OWORD *)v26 + 10);
      long long v48 = *((_OWORD *)v26 + 11);
      v25[192] = v26[192];
      *((_OWORD *)v25 + 10) = v47;
      *((_OWORD *)v25 + 11) = v48;
      *((void *)v25 + 25) = *((void *)v26 + 25);
      uint64_t v31 = v25 + 208;
      uint64_t v32 = v26 + 208;
      size_t v33 = 97;
LABEL_22:
      memcpy(v31, v32, v33);
      uint64_t v16 = (int *)v185;
      uint64_t v49 = *((void *)v26 + 39);
      if (v49)
      {
        uint64_t v50 = *((void *)v26 + 40);
        *((void *)v25 + 39) = v49;
        *((void *)v25 + 40) = v50;
        *((void *)v25 + 41) = *((void *)v26 + 41);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v51 = *(_OWORD *)(v26 + 312);
        *((void *)v25 + 41) = *((void *)v26 + 41);
        *(_OWORD *)(v25 + 312) = v51;
      }
      uint64_t v52 = __src[16];
      id v53 = &v14[v52];
      uint64_t v15 = v183;
      long long v54 = &v183[v52];
      if (*((void *)v54 + 1))
      {
        *(void *)id v53 = *(void *)v54;
        *((void *)v53 + 1) = *((void *)v54 + 1);
        *((void *)v53 + 2) = *((void *)v54 + 2);
        *((void *)v53 + 3) = *((void *)v54 + 3);
        v53[32] = v54[32];
        *((void *)v53 + 5) = *((void *)v54 + 5);
        *((void *)v53 + 6) = *((void *)v54 + 6);
        *((void *)v53 + 7) = *((void *)v54 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v55 = *(_OWORD *)v54;
        long long v56 = *((_OWORD *)v54 + 1);
        long long v57 = *((_OWORD *)v54 + 3);
        *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
        *((_OWORD *)v53 + 3) = v57;
        *(_OWORD *)id v53 = v55;
        *((_OWORD *)v53 + 1) = v56;
      }
LABEL_28:
      swift_storeEnumTagMultiPayload();
LABEL_29:
      uint64_t v58 = v16[5];
      uint64_t v59 = &v14[v58];
      uint64_t v60 = &v15[v58];
      uint64_t v61 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
      uint64_t v62 = v16[6];
      uint64_t v63 = &v14[v62];
      uint64_t v64 = &v15[v62];
      int v65 = *(_DWORD *)v64;
      v63[4] = v64[4];
      *(_DWORD *)uint64_t v63 = v65;
      uint64_t v66 = v16[7];
      uint64_t v67 = &v14[v66];
      uint64_t v68 = &v15[v66];
      uint64_t v69 = *(void **)v68;
      if (*(void *)v68)
      {
        *(void *)uint64_t v67 = v69;
        uint64_t v70 = *((void *)v68 + 1);
        v67[16] = v68[16];
        *((void *)v67 + 1) = v70;
        *((void *)v67 + 3) = *((void *)v68 + 3);
        *((void *)v67 + 4) = *((void *)v68 + 4);
        id v71 = v69;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v72 = *(_OWORD *)v68;
        long long v73 = *((_OWORD *)v68 + 1);
        *((void *)v67 + 4) = *((void *)v68 + 4);
        *(_OWORD *)uint64_t v67 = v72;
        *((_OWORD *)v67 + 1) = v73;
      }
      *(void *)&v14[v16[8]] = *(void *)&v15[v16[8]];
      uint64_t v74 = v16[9];
      long long v75 = &v14[v74];
      uint64_t v76 = &v15[v74];
      *(void *)long long v75 = *(void *)v76;
      *((void *)v75 + 1) = *((void *)v76 + 1);
      v14[v16[10]] = v15[v16[10]];
      *(void *)&v14[v16[11]] = *(void *)&v15[v16[11]];
      uint64_t v77 = v16[12];
      uint64_t v78 = v14;
      uint64_t v79 = *(void **)&v15[v77];
      *(void *)&v78[v77] = v79;
      v78[v16[13]] = v15[v16[13]];
      uint64_t v80 = v16[14];
      __srcb = v78;
      uint64_t v81 = &v78[v80];
      uint64_t v82 = &v15[v80];
      uint64_t v83 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v84 = v79;
      if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83))
      {
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
        __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v83);
      }
      uint64_t v86 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v87 = *(int *)(v86 + 20);
      uint64_t v88 = &v81[v87];
      uint64_t v89 = &v82[v87];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v82[v87], 1, v83))
      {
        uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v88, v89, v83);
        __swift_storeEnumTagSinglePayload((uint64_t)v88, 0, 1, v83);
      }
      v81[*(int *)(v86 + 24)] = v82[*(int *)(v86 + 24)];
      __srcb[*(int *)(v185 + 60)] = v183[*(int *)(v185 + 60)];
      *(void *)&__srcb[*(int *)(v185 + 64)] = *(void *)&v183[*(int *)(v185 + 64)];
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)__srcb, 0, 1, v185);
      break;
    default:
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      goto LABEL_29;
  }
LABEL_69:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]));
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v148 = a3[9];
  uint64_t v149 = (char *)a1 + v148;
  double v150 = (char *)a2 + v148;
  char v151 = v150[8];
  *(void *)uint64_t v149 = *(void *)v150;
  v149[8] = v151;
  uint64_t v152 = a3[10];
  uint64_t v153 = (char *)a1 + v152;
  Swift::Int v154 = (char *)a2 + v152;
  uint64_t v155 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 24))(v153, v154, v155);
  uint64_t v156 = a3[11];
  uint64_t v157 = (char *)a1 + v156;
  uint64_t v158 = (char *)a2 + v156;
  uint64_t v159 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 24))(v157, v158, v159);
  uint64_t v160 = a3[12];
  uint64_t v161 = (uint64_t *)((char *)a1 + v160);
  Swift::Int v162 = (uint64_t *)((char *)a2 + v160);
  *uint64_t v161 = *v162;
  v161[1] = v162[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v163 = a3[14];
  unint64_t v164 = (uint64_t *)((char *)a1 + v163);
  uint64_t v165 = (char *)a2 + v163;
  uint64_t v166 = *(uint64_t *)((char *)a1 + v163);
  uint64_t v167 = *(uint64_t *)((char *)a2 + v163);
  if (v166)
  {
    if (v167)
    {
      uint64_t v168 = *((void *)v165 + 1);
      *unint64_t v164 = v167;
      v164[1] = v168;
      swift_retain();
      swift_release();
      goto LABEL_76;
    }
    swift_release();
  }
  else if (v167)
  {
    uint64_t v169 = *((void *)v165 + 1);
    *unint64_t v164 = v167;
    v164[1] = v169;
    swift_retain();
    goto LABEL_76;
  }
  *(_OWORD *)unint64_t v164 = *(_OWORD *)v165;
LABEL_76:
  uint64_t v170 = a3[15];
  uint64_t v171 = (uint64_t *)((char *)a1 + v170);
  uint64_t v172 = (uint64_t *)((char *)a2 + v170);
  uint64_t v173 = *(uint64_t *)((char *)a1 + v170);
  uint64_t v174 = *v172;
  if (!v173)
  {
    if (v174)
    {
      uint64_t v176 = v172[1];
      *uint64_t v171 = v174;
      v171[1] = v176;
      swift_retain();
      return a1;
    }
LABEL_82:
    *(_OWORD *)uint64_t v171 = *(_OWORD *)v172;
    return a1;
  }
  if (!v174)
  {
    swift_release();
    goto LABEL_82;
  }
  uint64_t v175 = v172[1];
  *uint64_t v171 = v174;
  v171[1] = v175;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for SessionActionNotice(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for Participant(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v20 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v8, v9, v20);
        goto LABEL_7;
      case 4u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v8[*(int *)(v14 + 48)], &v9[*(int *)(v14 + 48)], 0x150uLL);
        uint64_t v15 = *(int *)(v14 + 64);
        uint64_t v16 = &v8[v15];
        uint64_t v17 = &v9[v15];
        long long v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v18;
        long long v19 = *((_OWORD *)v17 + 3);
        *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
        *((_OWORD *)v16 + 3) = v19;
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        break;
    }
    uint64_t v21 = v10[5];
    uint64_t v22 = &v8[v21];
    uint64_t v23 = &v9[v21];
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    uint64_t v25 = v10[6];
    size_t v26 = &v8[v25];
    uint64_t v27 = &v9[v25];
    *(_DWORD *)size_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    uint64_t v28 = v10[7];
    long long v29 = &v8[v28];
    uint64_t v30 = &v9[v28];
    long long v31 = *((_OWORD *)v30 + 1);
    *(_OWORD *)long long v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v31;
    *((void *)v29 + 4) = *((void *)v30 + 4);
    *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
    *(_OWORD *)&v8[v10[9]] = *(_OWORD *)&v9[v10[9]];
    v8[v10[10]] = v9[v10[10]];
    *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
    *(void *)&v8[v10[12]] = *(void *)&v9[v10[12]];
    v8[v10[13]] = v9[v10[13]];
    uint64_t v32 = v10[14];
    size_t v33 = &v8[v32];
    uint64_t v34 = &v9[v32];
    uint64_t v35 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
    }
    uint64_t v37 = type metadata accessor for Participant.CountdownInfo(0);
    uint64_t v38 = *(int *)(v37 + 20);
    long long v75 = v34;
    uint64_t v76 = v33;
    long long v39 = &v33[v38];
    long long v40 = &v34[v38];
    if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v35))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v39, v40, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v35);
    }
    v76[*(int *)(v37 + 24)] = v75[*(int *)(v37 + 24)];
    v8[v10[15]] = v9[v10[15]];
    *(void *)&v8[v10[16]] = *(void *)&v9[v10[16]];
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
  }
  uint64_t v42 = a3[6];
  uint64_t v43 = a3[7];
  size_t v44 = (char *)a1 + v42;
  long long v45 = (char *)a2 + v42;
  long long v46 = *((_OWORD *)v45 + 1);
  *(_OWORD *)size_t v44 = *(_OWORD *)v45;
  *((_OWORD *)v44 + 1) = v46;
  *((void *)v44 + 4) = *((void *)v45 + 4);
  long long v47 = (char *)a1 + v43;
  long long v48 = (char *)a2 + v43;
  *((void *)v47 + 4) = *((void *)v48 + 4);
  long long v50 = *(_OWORD *)v48;
  long long v49 = *((_OWORD *)v48 + 1);
  uint64_t v51 = a3[8];
  uint64_t v52 = a3[9];
  char v53 = *((unsigned char *)a2 + v51);
  *(_OWORD *)long long v47 = v50;
  *((_OWORD *)v47 + 1) = v49;
  *((unsigned char *)a1 + v51) = v53;
  long long v54 = (char *)a1 + v52;
  *(void *)long long v54 = *(void *)((char *)a2 + v52);
  v54[8] = *((unsigned char *)a2 + v52 + 8);
  uint64_t v55 = a3[10];
  long long v56 = (char *)a1 + v55;
  long long v57 = (char *)a2 + v55;
  uint64_t v58 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v56, v57, v58);
  uint64_t v59 = a3[11];
  uint64_t v60 = (char *)a1 + v59;
  uint64_t v61 = (char *)a2 + v59;
  uint64_t v62 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
  uint64_t v63 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *((unsigned char *)a1 + v63) = *((unsigned char *)a2 + v63);
  uint64_t v64 = a3[14];
  int v65 = (void *)((char *)a1 + v64);
  uint64_t v66 = (uint64_t *)((char *)a2 + v64);
  uint64_t v67 = *v66;
  if (*v66)
  {
    uint64_t v68 = v66[1];
    *int v65 = v67;
    v65[1] = v68;
  }
  else
  {
    *(_OWORD *)int v65 = *(_OWORD *)v66;
  }
  uint64_t v69 = a3[15];
  uint64_t v70 = (void *)((char *)a1 + v69);
  id v71 = (uint64_t *)((char *)a2 + v69);
  uint64_t v72 = *v71;
  if (*v71)
  {
    uint64_t v73 = v71[1];
    *uint64_t v70 = v72;
    v70[1] = v73;
  }
  else
  {
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
  }
  return a1;
}

uint64_t *assignWithTake for SessionActionNotice(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  long long v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  outlined consume of SessionActionNotice.NoticeType(v6, v7, v8);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for Participant(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, (uint64_t)v13);
  if (!EnumTagSinglePayload)
  {
    if (v15)
    {
      _s15ConversationKit11ParticipantVWOhTm_6();
      goto LABEL_6;
    }
    if (a1 != a2)
    {
      _s15ConversationKit11ParticipantVWOhTm_6();
      uint64_t v18 = type metadata accessor for Participant.State(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v55 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v11, v12, v55);
          goto LABEL_23;
        case 4u:
          uint64_t v48 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v11, v12, v48);
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          memcpy(&v11[*(int *)(v49 + 48)], &v12[*(int *)(v49 + 48)], 0x150uLL);
          uint64_t v50 = *(int *)(v49 + 64);
          uint64_t v51 = &v11[v50];
          uint64_t v52 = &v12[v50];
          long long v53 = *((_OWORD *)v52 + 1);
          *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
          *((_OWORD *)v51 + 1) = v53;
          long long v54 = *((_OWORD *)v52 + 3);
          *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
          *((_OWORD *)v51 + 3) = v54;
LABEL_23:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
          break;
      }
    }
    uint64_t v56 = v13[5];
    long long v57 = &v11[v56];
    uint64_t v58 = &v12[v56];
    uint64_t v59 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 40))(v57, v58, v59);
    uint64_t v60 = v13[6];
    uint64_t v61 = &v11[v60];
    uint64_t v62 = &v12[v60];
    *uint64_t v61 = *v62;
    v61[1] = v62[1];
    v61[2] = v62[2];
    v61[3] = v62[3];
    v61[4] = v62[4];
    uint64_t v63 = v13[7];
    uint64_t v64 = (uint64_t)&v11[v63];
    int v65 = &v12[v63];
    uint64_t v66 = *(void **)&v11[v63];
    if (v66)
    {
      if (*(void *)v65)
      {
        *(void *)uint64_t v64 = *(void *)v65;

        *(void *)(v64 + 8) = *((void *)v65 + 1);
        *(unsigned char *)(v64 + 16) = v65[16];
        uint64_t v67 = *((void *)v65 + 4);
        *(void *)(v64 + 24) = *((void *)v65 + 3);
        *(void *)(v64 + 32) = v67;
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      outlined destroy of Participant.RemoteIdentifiers(v64);
    }
    long long v68 = *((_OWORD *)v65 + 1);
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    *(_OWORD *)(v64 + 16) = v68;
    *(void *)(v64 + 32) = *((void *)v65 + 4);
LABEL_29:
    *(void *)&v11[v13[8]] = *(void *)&v12[v13[8]];
    swift_bridgeObjectRelease();
    uint64_t v69 = v13[9];
    uint64_t v70 = &v11[v69];
    id v71 = &v12[v69];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)uint64_t v70 = v73;
    *((void *)v70 + 1) = v72;
    swift_bridgeObjectRelease();
    v11[v13[10]] = v12[v13[10]];
    *(void *)&v11[v13[11]] = *(void *)&v12[v13[11]];
    swift_bridgeObjectRelease();
    uint64_t v74 = v13[12];
    long long v75 = *(void **)&v11[v74];
    *(void *)&v11[v74] = *(void *)&v12[v74];

    v11[v13[13]] = v12[v13[13]];
    uint64_t v76 = v13[14];
    uint64_t v77 = &v11[v76];
    uint64_t v78 = &v12[v76];
    uint64_t v79 = type metadata accessor for Date();
    int v80 = __swift_getEnumTagSinglePayload((uint64_t)v77, 1, v79);
    __srca = v78;
    int v81 = __swift_getEnumTagSinglePayload((uint64_t)v78, 1, v79);
    uint64_t v138 = v12;
    if (v80)
    {
      if (!v81)
      {
        uint64_t v82 = v78;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 32))(v77, v78, v79);
        __swift_storeEnumTagSinglePayload((uint64_t)v77, 0, 1, v79);
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v83 = *(void *)(v79 - 8);
      if (!v81)
      {
        uint64_t v82 = v78;
        (*(void (**)(char *, char *, uint64_t))(v83 + 40))(v77, v78, v79);
LABEL_35:
        uint64_t v85 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v86 = *(int *)(v85 + 20);
        uint64_t v134 = v77;
        uint64_t v87 = &v77[v86];
        uint64_t v88 = &v82[v86];
        int v89 = __swift_getEnumTagSinglePayload((uint64_t)v87, 1, v79);
        int v90 = __swift_getEnumTagSinglePayload((uint64_t)v88, 1, v79);
        if (v89)
        {
          if (!v90)
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 32))(v87, v88, v79);
            __swift_storeEnumTagSinglePayload((uint64_t)v87, 0, 1, v79);
LABEL_41:
            v134[*(int *)(v85 + 24)] = __srca[*(int *)(v85 + 24)];
            v11[v13[15]] = v138[v13[15]];
            *(void *)&v11[v13[16]] = *(void *)&v138[v13[16]];
            swift_release();
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v91 = *(void *)(v79 - 8);
          if (!v90)
          {
            (*(void (**)(char *, char *, uint64_t))(v91 + 40))(v87, v88, v79);
            goto LABEL_41;
          }
          (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v79);
        }
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64));
        goto LABEL_41;
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v77, v79);
    }
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v82 = v78;
    memcpy(v77, v78, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_35;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_42;
  }
  uint64_t v16 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v26 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v11, v12, v26);
      goto LABEL_12;
    case 4u:
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v11, v12, v19);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&v11[*(int *)(v20 + 48)], &v12[*(int *)(v20 + 48)], 0x150uLL);
      uint64_t v21 = *(int *)(v20 + 64);
      uint64_t v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      long long v24 = *((_OWORD *)v23 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v24;
      long long v25 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v25;
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
      break;
  }
  uint64_t v27 = v13[5];
  uint64_t v28 = &v11[v27];
  long long v29 = &v12[v27];
  uint64_t v30 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
  uint64_t v31 = v13[6];
  uint64_t v32 = &v11[v31];
  size_t v33 = &v12[v31];
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  v32[4] = v33[4];
  uint64_t v34 = v13[7];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  long long v37 = *((_OWORD *)v36 + 1);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v37;
  *((void *)v35 + 4) = *((void *)v36 + 4);
  *(void *)&v11[v13[8]] = *(void *)&v12[v13[8]];
  *(_OWORD *)&v11[v13[9]] = *(_OWORD *)&v12[v13[9]];
  v11[v13[10]] = v12[v13[10]];
  *(void *)&v11[v13[11]] = *(void *)&v12[v13[11]];
  *(void *)&v11[v13[12]] = *(void *)&v12[v13[12]];
  v11[v13[13]] = v12[v13[13]];
  uint64_t v38 = v13[14];
  long long v39 = &v11[v38];
  unint64_t v137 = v12;
  long long v40 = &v12[v38];
  uint64_t v41 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
    __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
  }
  uint64_t v43 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v44 = *(int *)(v43 + 20);
  __src = v39;
  long long v45 = &v39[v44];
  long long v46 = &v40[v44];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v40[v44], 1, v41))
  {
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v45, v46, v41);
    __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v41);
  }
  __src[*(int *)(v43 + 24)] = v40[*(int *)(v43 + 24)];
  v11[v13[15]] = v137[v13[15]];
  *(void *)&v11[v13[16]] = *(void *)&v137[v13[16]];
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, (uint64_t)v13);
LABEL_42:
  uint64_t v93 = a3[6];
  long long v94 = (char *)a1 + v93;
  uint64_t v95 = (char *)a2 + v93;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v93);
  long long v96 = *((_OWORD *)v95 + 1);
  *(_OWORD *)long long v94 = *(_OWORD *)v95;
  *((_OWORD *)v94 + 1) = v96;
  *((void *)v94 + 4) = *((void *)v95 + 4);
  uint64_t v97 = a3[7];
  uint64_t v98 = (char *)a1 + v97;
  uint64_t v99 = (char *)a2 + v97;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v97);
  long long v100 = *(_OWORD *)v99;
  long long v101 = *((_OWORD *)v99 + 1);
  *((void *)v98 + 4) = *((void *)v99 + 4);
  uint64_t v102 = a3[8];
  uint64_t v103 = a3[9];
  char v104 = *((unsigned char *)a2 + v102);
  *(_OWORD *)uint64_t v98 = v100;
  *((_OWORD *)v98 + 1) = v101;
  *((unsigned char *)a1 + v102) = v104;
  uint64_t v105 = (char *)a1 + v103;
  uint64_t v106 = (char *)a2 + v103;
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v106[8];
  uint64_t v107 = a3[10];
  uint64_t v108 = (char *)a1 + v107;
  BOOL v109 = (char *)a2 + v107;
  uint64_t v110 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 40))(v108, v109, v110);
  uint64_t v111 = a3[11];
  uint64_t v112 = (char *)a1 + v111;
  uint64_t v113 = (char *)a2 + v111;
  uint64_t v114 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 40))(v112, v113, v114);
  uint64_t v115 = a3[12];
  id v116 = (uint64_t *)((char *)a1 + v115);
  uint64_t v117 = (uint64_t *)((char *)a2 + v115);
  uint64_t v119 = *v117;
  uint64_t v118 = v117[1];
  *id v116 = v119;
  v116[1] = v118;
  swift_bridgeObjectRelease();
  uint64_t v120 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  long long v121 = (uint64_t *)((char *)a1 + v120);
  long long v122 = (char *)a2 + v120;
  uint64_t v123 = *(uint64_t *)((char *)a2 + v120);
  if (*(uint64_t *)((char *)a1 + v120))
  {
    if (v123)
    {
      uint64_t v124 = *((void *)v122 + 1);
      *long long v121 = v123;
      v121[1] = v124;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v123)
  {
    uint64_t v125 = *((void *)v122 + 1);
    *long long v121 = v123;
    v121[1] = v125;
    goto LABEL_49;
  }
  *(_OWORD *)long long v121 = *(_OWORD *)v122;
LABEL_49:
  uint64_t v126 = a3[15];
  uint64_t v127 = (uint64_t *)((char *)a1 + v126);
  uint64_t v128 = (uint64_t *)((char *)a2 + v126);
  uint64_t v129 = *(uint64_t *)((char *)a1 + v126);
  uint64_t v130 = *v128;
  if (!v129)
  {
    if (v130)
    {
      uint64_t v132 = v128[1];
      *uint64_t v127 = v130;
      v127[1] = v132;
      return a1;
    }
LABEL_55:
    *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
    return a1;
  }
  if (!v130)
  {
    swift_release();
    goto LABEL_55;
  }
  uint64_t v131 = v128[1];
  *uint64_t v127 = v130;
  v127[1] = v131;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionActionNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3353CEC);
}

uint64_t sub_1C3353CEC()
{
  OUTLINED_FUNCTION_173();
  if (v3)
  {
    if ((*(void *)(v0 + 16) >> 2) > 0x80000000) {
      return -(*(void *)(v0 + 16) >> 2);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = v2;
    int v6 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v7 + 84) == v6)
    {
      OUTLINED_FUNCTION_211_0();
    }
    else
    {
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_1_5();
      if (*(_DWORD *)(v9 + 84) == v6)
      {
        uint64_t v8 = *(int *)(v5 + 40);
      }
      else
      {
        type metadata accessor for Date();
        uint64_t v8 = *(int *)(v5 + 44);
      }
    }
    uint64_t v10 = OUTLINED_FUNCTION_188(v8);
    return __swift_getEnumTagSinglePayload(v10, v11, v12);
  }
}

uint64_t storeEnumTagSinglePayload for SessionActionNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3353DC4);
}

void sub_1C3353DC4()
{
  OUTLINED_FUNCTION_5();
  if (v4)
  {
    void *v1 = 0;
    v1[1] = 0;
    v1[2] = 4 * -v0;
    v1[3] = 0;
  }
  else
  {
    uint64_t v5 = v3;
    int v6 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v7 + 84) == v6)
    {
      OUTLINED_FUNCTION_241_0();
    }
    else
    {
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_1_5();
      if (*(_DWORD *)(v9 + 84) == v6)
      {
        uint64_t v8 = *(int *)(v5 + 40);
      }
      else
      {
        type metadata accessor for Date();
        uint64_t v8 = *(int *)(v5 + 44);
      }
    }
    uint64_t v10 = OUTLINED_FUNCTION_85_5(v8);
    __swift_storeEnumTagSinglePayload(v10, v11, v12, v13);
  }
}

void type metadata completion function for SessionActionNotice()
{
  _s15ConversationKit11ParticipantVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Participant?, (void (*)(uint64_t))type metadata accessor for Participant);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t destroy for SessionActionNotice.NoticeType(uint64_t a1)
{
  return outlined consume of SessionActionNotice.NoticeType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t *initializeWithCopy for SessionActionNotice.NoticeType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of SessionActionNotice.NoticeType(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for SessionActionNotice.NoticeType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of SessionActionNotice.NoticeType(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of SessionActionNotice.NoticeType(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for SessionActionNotice.NoticeType(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of SessionActionNotice.NoticeType(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionActionNotice.NoticeType(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 16) >> 2;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionActionNotice.NoticeType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 4 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for SessionActionNotice.NoticeType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for SessionActionNotice.NoticeType(uint64_t result)
{
  *(void *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for SessionActionNotice.NoticeType(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 3 | (a2 << 62);
  }
  else
  {
    *(void *)uint64_t result = (a2 - 3);
    *(_OWORD *)(result + 8) = xmmword_1C377B500;
    *(void *)(result + 24) = 0;
  }
  return result;
}

void type metadata accessor for SessionActionNotice.NoticeType()
{
}

uint64_t initializeBufferWithCopyOfBuffer for SessionActionNotice.QueueItemType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unsigned __int8 v5 = *((unsigned char *)a2 + 16);
  uint64_t v6 = OUTLINED_FUNCTION_41_0();
  outlined copy of CallScreening.EndingAction(v6, v7, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SessionActionNotice.QueueItemType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CallScreening.EndingAction(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CallScreening.EndingAction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SessionActionNotice.QueueItemType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CallScreening.EndingAction(v4, v5, v6);
  return a1;
}

void type metadata accessor for SessionActionNotice.QueueItemType()
{
}

void *initializeBufferWithCopyOfBuffer for AppLaunchNotice(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v13 = *(void **)((char *)a2 + v12);
    *(void *)((char *)a1 + v12) = v13;
    uint64_t v14 = a3[8];
    uint64_t v15 = a3[9];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(void *)((char *)a1 + v14) = v16;
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
    uint64_t v17 = a3[11];
    *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
    uint64_t v18 = a3[13];
    *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)((char *)a2 + v18);
    id v22 = v13;
    id v23 = v16;
    if (v21)
    {
      uint64_t v24 = *((void *)v20 + 1);
      *uint64_t v19 = v21;
      v19[1] = v24;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
    uint64_t v26 = a3[14];
    uint64_t v27 = (void *)((char *)a1 + v26);
    uint64_t v28 = (void *)((char *)a2 + v26);
    if (*v28)
    {
      uint64_t v29 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v29;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    }
    uint64_t v30 = a3[16];
    *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v31 = (void *)((char *)a1 + v30);
    uint64_t v32 = (void *)((char *)a2 + v30);
    unint64_t v33 = v32[1];
    if (v33 >= 2)
    {
      *uint64_t v31 = *v32;
      v31[1] = v33;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    }
  }
  return a1;
}

unint64_t destroy for AppLaunchNotice(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  if (*(void *)(a1 + a2[13])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[14])) {
    swift_release();
  }
  unint64_t result = *(void *)(a1 + a2[16] + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AppLaunchNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = *(void **)(a2 + v11);
  *(void *)(a1 + v11) = v12;
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v15;
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v16 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a2 + v17);
  id v21 = v12;
  id v22 = v15;
  if (v20)
  {
    uint64_t v23 = *(void *)(v19 + 8);
    *uint64_t v18 = v20;
    v18[1] = v23;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  uint64_t v24 = a3[14];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  if (*v26)
  {
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  }
  uint64_t v28 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  unint64_t v31 = v30[1];
  if (v31 >= 2)
  {
    *uint64_t v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  }
  return a1;
}

uint64_t assignWithCopy for AppLaunchNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a2 + v11);
  uint64_t v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  uint64_t v15 = a3[8];
  uint64_t v16 = *(void **)(a2 + v15);
  uint64_t v17 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = v16;
  id v18 = v16;

  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v19 = a3[13];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a1 + v19);
  uint64_t v23 = *(void *)(a2 + v19);
  if (v22)
  {
    if (v23)
    {
      uint64_t v24 = *(void *)(v21 + 8);
      *uint64_t v20 = v23;
      v20[1] = v24;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v23)
  {
    uint64_t v25 = *(void *)(v21 + 8);
    *uint64_t v20 = v23;
    v20[1] = v25;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
LABEL_8:
  uint64_t v26 = a3[14];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a1 + v26);
  uint64_t v30 = *(void *)(a2 + v26);
  if (v29)
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(v28 + 8);
      *uint64_t v27 = v30;
      v27[1] = v31;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v30)
  {
    uint64_t v32 = *(void *)(v28 + 8);
    *uint64_t v27 = v30;
    v27[1] = v32;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
LABEL_15:
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v33 = a3[16];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  unint64_t v36 = *(void *)(a1 + v33 + 8);
  unint64_t v37 = v35[1];
  if (v36 >= 2)
  {
    if (v37 >= 2)
    {
      *uint64_t v34 = *v35;
      v34[1] = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v34, &demangling cache variable for type metadata for (title: String));
    goto LABEL_20;
  }
  if (v37 < 2)
  {
LABEL_20:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    return a1;
  }
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithTake for AppLaunchNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = v16[1];
    *uint64_t v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  uint64_t v19 = a3[14];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  if (*v21)
  {
    uint64_t v23 = v21[1];
    *uint64_t v20 = v22;
    v20[1] = v23;
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  }
  uint64_t v24 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  return a1;
}

uint64_t assignWithTake for AppLaunchNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);

  uint64_t v15 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[13];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a1 + v17);
  uint64_t v21 = *(void *)(a2 + v17);
  if (v20)
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(v19 + 8);
      *uint64_t v18 = v21;
      v18[1] = v22;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *(void *)(v19 + 8);
    *uint64_t v18 = v21;
    v18[1] = v23;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
LABEL_8:
  uint64_t v24 = a3[14];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a1 + v24);
  uint64_t v28 = *(void *)(a2 + v24);
  if (v27)
  {
    if (v28)
    {
      uint64_t v29 = *(void *)(v26 + 8);
      *uint64_t v25 = v28;
      v25[1] = v29;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v28)
  {
    uint64_t v30 = *(void *)(v26 + 8);
    *uint64_t v25 = v28;
    v25[1] = v30;
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_15:
  uint64_t v31 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  if (*(void *)(a1 + v31 + 8) >= 2uLL)
  {
    unint64_t v34 = v33[1];
    if (v34 >= 2)
    {
      void *v32 = *v33;
      v32[1] = v34;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?(a1 + v31, &demangling cache variable for type metadata for (title: String));
  }
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  return a1;
}

uint64_t getEnumTagSinglePayload for AppLaunchNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3354D8C);
}

uint64_t sub_1C3354D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == v3)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v10 + 84) != v3) {
      return OUTLINED_FUNCTION_46_0(*(void *)(v4 + *(int *)(a3 + 28)));
    }
    OUTLINED_FUNCTION_211_0();
    uint64_t v9 = v4 + v11;
  }
  return __swift_getEnumTagSinglePayload(v9, v3, v8);
}

uint64_t storeEnumTagSinglePayload for AppLaunchNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3354E38);
}

void sub_1C3354E38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v5;
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v12 + 84) != a3)
    {
      *(void *)(v5 + *(int *)(a4 + 28)) = (v4 - 1);
      return;
    }
    OUTLINED_FUNCTION_241_0();
    uint64_t v11 = v5 + v13;
  }
  __swift_storeEnumTagSinglePayload(v11, v4, v4, v10);
}

uint64_t type metadata completion function for AppLaunchNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PushToTalkNotice(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v17 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v17;
    swift_bridgeObjectRetain();
    uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                 + 48);
    uint64_t v12 = (char *)v9 + v18;
    uint64_t v13 = (char *)v10 + v18;
    uint64_t v14 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14)) {
      goto LABEL_4;
    }
LABEL_7:
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    goto LABEL_8;
  }
  *(unsigned char *)uint64_t v9 = *(unsigned char *)v10;
  uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
               + 48);
  uint64_t v12 = (char *)v9 + v11;
  uint64_t v13 = (char *)v10 + v11;
  uint64_t v14 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14)) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_8:
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v27) = *((unsigned char *)a2 + v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = *(void *)((char *)a2 + v28);
  swift_bridgeObjectRetain();
  if (v31)
  {
    uint64_t v32 = *((void *)v30 + 1);
    *uint64_t v29 = v31;
    v29[1] = v32;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  }
  uint64_t v33 = a3[12];
  unint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  if (*v35)
  {
    uint64_t v36 = v35[1];
    *unint64_t v34 = *v35;
    v34[1] = v36;
    swift_retain();
  }
  else
  {
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
  }
  uint64_t v37 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v38 = (void *)((char *)a1 + v37);
  long long v39 = (void *)((char *)a2 + v37);
  unint64_t v40 = v39[1];
  if (v40 >= 2)
  {
    *uint64_t v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  }
  return a1;
}

unint64_t destroy for PushToTalkNotice(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = &demangling cache variable for type metadata for (enabled: Bool, image: URL?);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?);
  }
  uint64_t v7 = v5 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v6) + 48);
  uint64_t v8 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + a2[6];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[11])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[12])) {
    swift_release();
  }
  unint64_t result = *(void *)(a1 + a2[14] + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PushToTalkNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                 + 48);
    uint64_t v11 = (void *)(v8 + v10);
    uint64_t v12 = (const void *)(v9 + v10);
    uint64_t v13 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
LABEL_3:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v9 + 8);
    *(void *)uint64_t v8 = *(void *)v9;
    *(void *)(v8 + 8) = v15;
    swift_bridgeObjectRetain();
    uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                 + 48);
    uint64_t v11 = (void *)(v8 + v16);
    uint64_t v12 = (const void *)(v9 + v16);
    uint64_t v13 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13)) {
      goto LABEL_3;
    }
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_6:
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a2 + v26);
  swift_bridgeObjectRetain();
  if (v29)
  {
    uint64_t v30 = *(void *)(v28 + 8);
    *uint64_t v27 = v29;
    v27[1] = v30;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  }
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  if (*v33)
  {
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  uint64_t v35 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  unint64_t v38 = v37[1];
  if (v38 >= 2)
  {
    *uint64_t v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  return a1;
}

uint64_t assignWithCopy for PushToTalkNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    _s15ConversationKit11ParticipantVWOhTm_6();
    type metadata accessor for PushToTalkNotice.NoticeType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                   + 48);
      uint64_t v11 = (void *)(v8 + v10);
      uint64_t v12 = (const void *)(v9 + v10);
      uint64_t v13 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
LABEL_4:
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        goto LABEL_8;
      }
    }
    else
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(void *)(v8 + 8) = *(void *)(v9 + 8);
      swift_bridgeObjectRetain();
      uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                   + 48);
      uint64_t v11 = (void *)(v8 + v15);
      uint64_t v12 = (const void *)(v9 + v15);
      uint64_t v13 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13)) {
        goto LABEL_4;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v23 = a3[11];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a1 + v23);
  uint64_t v27 = *(void *)(a2 + v23);
  if (v26)
  {
    if (v27)
    {
      uint64_t v28 = *(void *)(v25 + 8);
      *uint64_t v24 = v27;
      v24[1] = v28;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v27)
  {
    uint64_t v29 = *(void *)(v25 + 8);
    *uint64_t v24 = v27;
    v24[1] = v29;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
LABEL_15:
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = a2 + v30;
  uint64_t v33 = *(void *)(a1 + v30);
  uint64_t v34 = *(void *)(a2 + v30);
  if (v33)
  {
    if (v34)
    {
      uint64_t v35 = *(void *)(v32 + 8);
      *uint64_t v31 = v34;
      v31[1] = v35;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v34)
  {
    uint64_t v36 = *(void *)(v32 + 8);
    *uint64_t v31 = v34;
    v31[1] = v36;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
LABEL_22:
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v37 = a3[14];
  unint64_t v38 = (void *)(a1 + v37);
  long long v39 = (void *)(a2 + v37);
  unint64_t v40 = *(void *)(a1 + v37 + 8);
  unint64_t v41 = v39[1];
  if (v40 >= 2)
  {
    if (v41 >= 2)
    {
      *unint64_t v38 = *v39;
      v38[1] = v39[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v38, &demangling cache variable for type metadata for (title: String));
    goto LABEL_27;
  }
  if (v41 < 2)
  {
LABEL_27:
    *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
    return a1;
  }
  *unint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithTake for PushToTalkNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  type metadata accessor for PushToTalkNotice.NoticeType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v8 = *v9;
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                 + 48);
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v9[v10];
    uint64_t v13 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
LABEL_3:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      goto LABEL_6;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                 + 48);
    uint64_t v11 = &v8[v15];
    uint64_t v12 = &v9[v15];
    uint64_t v13 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13)) {
      goto LABEL_3;
    }
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_6:
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  uint64_t v21 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[11];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  if (*v24)
  {
    uint64_t v26 = v24[1];
    *uint64_t v23 = v25;
    v23[1] = v26;
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  if (*v29)
  {
    uint64_t v31 = v29[1];
    *uint64_t v28 = v30;
    v28[1] = v31;
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  uint64_t v32 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v32) = *(_OWORD *)(a2 + v32);
  return a1;
}

uint64_t assignWithTake for PushToTalkNotice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (unsigned char *)(a1 + v7);
    uint64_t v9 = (unsigned char *)(a2 + v7);
    _s15ConversationKit11ParticipantVWOhTm_6();
    type metadata accessor for PushToTalkNotice.NoticeType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                   + 48);
      uint64_t v11 = &v8[v10];
      uint64_t v12 = &v9[v10];
      uint64_t v13 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
LABEL_4:
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        goto LABEL_8;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                   + 48);
      uint64_t v11 = &v8[v15];
      uint64_t v12 = &v9[v15];
      uint64_t v13 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13)) {
        goto LABEL_4;
      }
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a1 + v26);
  uint64_t v30 = *(void *)(a2 + v26);
  if (v29)
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(v28 + 8);
      *uint64_t v27 = v30;
      v27[1] = v31;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v30)
  {
    uint64_t v32 = *(void *)(v28 + 8);
    *uint64_t v27 = v30;
    v27[1] = v32;
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
LABEL_15:
  uint64_t v33 = a3[12];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = a2 + v33;
  uint64_t v36 = *(void *)(a1 + v33);
  uint64_t v37 = *(void *)(a2 + v33);
  if (v36)
  {
    if (v37)
    {
      uint64_t v38 = *(void *)(v35 + 8);
      *uint64_t v34 = v37;
      v34[1] = v38;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v37)
  {
    uint64_t v39 = *(void *)(v35 + 8);
    *uint64_t v34 = v37;
    v34[1] = v39;
    goto LABEL_22;
  }
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
LABEL_22:
  uint64_t v40 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  unint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (void *)(a2 + v40);
  if (*(void *)(a1 + v40 + 8) >= 2uLL)
  {
    unint64_t v43 = v42[1];
    if (v43 >= 2)
    {
      *unint64_t v41 = *v42;
      v41[1] = v43;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?(a1 + v40, &demangling cache variable for type metadata for (title: String));
  }
  *(_OWORD *)unint64_t v41 = *(_OWORD *)v42;
  return a1;
}

uint64_t getEnumTagSinglePayload for PushToTalkNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C33563CC);
}

uint64_t sub_1C33563CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == v3)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
  }
  else
  {
    type metadata accessor for PushToTalkNotice.NoticeType(0);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v10 + 84) == v3)
    {
      OUTLINED_FUNCTION_211_0();
    }
    else
    {
      type metadata accessor for Date();
      OUTLINED_FUNCTION_1_5();
      if (*(_DWORD *)(v12 + 84) != v3) {
        return OUTLINED_FUNCTION_63_4(*(void *)(v4 + *(int *)(a3 + 32) + 8));
      }
      OUTLINED_FUNCTION_185();
    }
    uint64_t v9 = v4 + v11;
  }
  return __swift_getEnumTagSinglePayload(v9, v3, v8);
}

uint64_t storeEnumTagSinglePayload for PushToTalkNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C335649C);
}

void sub_1C335649C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v5;
  }
  else
  {
    type metadata accessor for PushToTalkNotice.NoticeType(0);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v12 + 84) == a3)
    {
      OUTLINED_FUNCTION_241_0();
    }
    else
    {
      type metadata accessor for Date();
      OUTLINED_FUNCTION_1_5();
      if (*(_DWORD *)(v14 + 84) != a3)
      {
        *(void *)(v5 + *(int *)(a4 + 32) + 8) = v4;
        return;
      }
      OUTLINED_FUNCTION_202();
    }
    uint64_t v11 = v5 + v13;
  }
  __swift_storeEnumTagSinglePayload(v11, v4, v4, v10);
}

uint64_t type metadata completion function for PushToTalkNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PushToTalkNotice.NoticeType(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Date();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PushToTalkNotice.NoticeType(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                  + 48);
      uint64_t v7 = (void *)(a1 + v6);
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9)) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v11 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v11;
      swift_bridgeObjectRetain();
      uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                   + 48);
      uint64_t v7 = (void *)(a1 + v12);
      uint64_t v8 = (char *)a2 + v12;
      uint64_t v9 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
      {
LABEL_7:
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_9:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    goto LABEL_9;
  }
  uint64_t v10 = *a2;
  *(void *)a1 = *a2;
  a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for PushToTalkNotice.NoticeType(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v2 = &demangling cache variable for type metadata for (enabled: Bool, image: URL?);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?);
  }
  uint64_t v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v2) + 48);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(v3, 1, v4);
  if (!result)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v6(v3, v4);
  }
  return result;
}

void *initializeWithCopy for PushToTalkNotice.NoticeType(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_bridgeObjectRetain();
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                 + 48);
    int v5 = (char *)a1 + v10;
    uint64_t v6 = (char *)a2 + v10;
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7)) {
      goto LABEL_3;
    }
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
    goto LABEL_6;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
              + 48);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_6:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for PushToTalkNotice.NoticeType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_6();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                  + 48);
      int v5 = (void *)(a1 + v4);
      uint64_t v6 = (const void *)(a2 + v4);
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
      {
LABEL_4:
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                  + 48);
      int v5 = (void *)(a1 + v9);
      uint64_t v6 = (const void *)(a2 + v9);
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7)) {
        goto LABEL_4;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
    goto LABEL_7;
  }
  return a1;
}

_OWORD *initializeWithTake for PushToTalkNotice.NoticeType(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                + 48);
    int v5 = (char *)a1 + v9;
    uint64_t v6 = (char *)a2 + v9;
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7)) {
      goto LABEL_3;
    }
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
    goto LABEL_6;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
              + 48);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_6:
  swift_storeEnumTagMultiPayload();
  return a1;
}

unsigned char *assignWithTake for PushToTalkNotice.NoticeType(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_6();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enabled: Bool, image: URL?))
                  + 48);
      int v5 = &a1[v4];
      uint64_t v6 = &a2[v4];
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
      {
LABEL_4:
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_7:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (speaker: String, image: URL?))
                  + 48);
      int v5 = &a1[v9];
      uint64_t v6 = &a2[v9];
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7)) {
        goto LABEL_4;
      }
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
    goto LABEL_7;
  }
  return a1;
}

void type metadata completion function for PushToTalkNotice.NoticeType()
{
  _s15ConversationKit11ParticipantVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1F418B878]);
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v3 = &v2;
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v1;
    swift_initEnumMetadataMultiPayload();
  }
}

void _s15ConversationKit11ParticipantVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for SystemUpdateNotice(unsigned char *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)unint64_t v4 = *a2;
    unint64_t v4 = (unsigned char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    uint64_t v8 = a2 + 3;
    uint64_t v9 = a2[6];
    swift_bridgeObjectRetain();
    if (v9)
    {
      uint64_t v10 = a2[7];
      *((void *)v4 + 6) = v9;
      *((void *)v4 + 7) = v10;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))((uint64_t)(v4 + 24), (uint64_t)(a2 + 3), v9);
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v4 + 24) = *v8;
      *(_OWORD *)(v4 + 40) = v12;
      *((void *)v4 + 7) = a2[7];
    }
    uint64_t v13 = a3[6];
    uint64_t v14 = &v4[v13];
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[7];
    uint64_t v18 = &v4[v17];
    uint64_t v19 = (uint64_t)a2 + v17;
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[9];
    v4[a3[8]] = *((unsigned char *)a2 + a3[8]);
    uint64_t v22 = &v4[v21];
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v26 = a3[10];
    uint64_t v27 = a3[11];
    char v28 = *((unsigned char *)a2 + v26);
    *uint64_t v22 = v25;
    v22[1] = v24;
    v4[v26] = v28;
    uint64_t v29 = &v4[v27];
    uint64_t v30 = (uint64_t)a2 + v27;
    uint64_t v31 = *(uint64_t *)((char *)a2 + v27);
    swift_bridgeObjectRetain();
    if (v31)
    {
      uint64_t v32 = *(void *)(v30 + 8);
      *uint64_t v29 = v31;
      v29[1] = v32;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    }
    uint64_t v33 = a3[12];
    uint64_t v34 = &v4[v33];
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    if (*v35)
    {
      uint64_t v36 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v36;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    }
    uint64_t v37 = a3[14];
    v4[a3[13]] = *((unsigned char *)a2 + a3[13]);
    uint64_t v38 = &v4[v37];
    uint64_t v39 = (uint64_t *)((char *)a2 + v37);
    unint64_t v40 = v39[1];
    if (v40 >= 2)
    {
      *uint64_t v38 = *v39;
      v38[1] = v40;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    }
  }
  return v4;
}

unint64_t destroy for SystemUpdateNotice(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[11])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[12])) {
    swift_release();
  }
  unint64_t result = *(void *)(a1 + a2[14] + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SystemUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2 + 24;
  uint64_t v8 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 24, v7, v8);
  }
  else
  {
    long long v10 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 40) = v10;
    *(void *)(a1 + 56) = *(void *)(v7 + 32);
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = a3[10];
  uint64_t v25 = a3[11];
  char v26 = *(unsigned char *)(a2 + v24);
  *uint64_t v20 = v23;
  v20[1] = v22;
  *(unsigned char *)(a1 + v24) = v26;
  uint64_t v27 = (void *)(a1 + v25);
  uint64_t v28 = a2 + v25;
  uint64_t v29 = *(void *)(a2 + v25);
  swift_bridgeObjectRetain();
  if (v29)
  {
    uint64_t v30 = *(void *)(v28 + 8);
    *uint64_t v27 = v29;
    v27[1] = v30;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  }
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  if (*v33)
  {
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  uint64_t v35 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  unint64_t v38 = v37[1];
  if (v38 >= 2)
  {
    *uint64_t v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  return a1;
}

uint64_t assignWithCopy for SystemUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
    goto LABEL_8;
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 40) = v8;
LABEL_8:
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a1 + v20);
  uint64_t v24 = *(void *)(a2 + v20);
  if (v23)
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(v22 + 8);
      *uint64_t v21 = v24;
      v21[1] = v25;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v26 = *(void *)(v22 + 8);
    *uint64_t v21 = v24;
    v21[1] = v26;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
LABEL_15:
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = a2 + v27;
  uint64_t v30 = *(void *)(a1 + v27);
  uint64_t v31 = *(void *)(a2 + v27);
  if (v30)
  {
    if (v31)
    {
      uint64_t v32 = *(void *)(v29 + 8);
      *uint64_t v28 = v31;
      v28[1] = v32;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v31)
  {
    uint64_t v33 = *(void *)(v29 + 8);
    *uint64_t v28 = v31;
    v28[1] = v33;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
LABEL_22:
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v34 = a3[14];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  unint64_t v37 = *(void *)(a1 + v34 + 8);
  unint64_t v38 = v36[1];
  if (v37 >= 2)
  {
    if (v38 >= 2)
    {
      void *v35 = *v36;
      v35[1] = v36[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v35, &demangling cache variable for type metadata for (title: String));
    goto LABEL_27;
  }
  if (v38 < 2)
  {
LABEL_27:
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    return a1;
  }
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithTake for SystemUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v19 = v17[1];
    void *v16 = v18;
    v16[1] = v19;
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  if (*v22)
  {
    uint64_t v24 = v22[1];
    *uint64_t v21 = v23;
    v21[1] = v24;
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  uint64_t v25 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for SystemUpdateNotice(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)(a2 + v21);
  if (*(void *)(a1 + v21))
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(v23 + 8);
      *uint64_t v22 = v24;
      v22[1] = v25;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v26 = *(void *)(v23 + 8);
    *uint64_t v22 = v24;
    v22[1] = v26;
    goto LABEL_10;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
LABEL_10:
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = a2 + v27;
  uint64_t v30 = *(void *)(a1 + v27);
  uint64_t v31 = *(void *)(a2 + v27);
  if (v30)
  {
    if (v31)
    {
      uint64_t v32 = *(void *)(v29 + 8);
      *uint64_t v28 = v31;
      v28[1] = v32;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v31)
  {
    uint64_t v33 = *(void *)(v29 + 8);
    *uint64_t v28 = v31;
    v28[1] = v33;
    goto LABEL_17;
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
LABEL_17:
  uint64_t v34 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  if (*(void *)(a1 + v34 + 8) >= 2uLL)
  {
    unint64_t v37 = v36[1];
    if (v37 >= 2)
    {
      void *v35 = *v36;
      v35[1] = v37;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?(a1 + v34, &demangling cache variable for type metadata for (title: String));
  }
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemUpdateNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3357EC0);
}

uint64_t sub_1C3357EC0(uint64_t a1, int a2)
{
  if (a2 == 2147483646) {
    return OUTLINED_FUNCTION_63_4(*(void *)(a1 + 16));
  }
  OUTLINED_FUNCTION_105_2();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v5 + 84) == v2)
  {
    OUTLINED_FUNCTION_185();
  }
  else
  {
    type metadata accessor for Date();
    uint64_t v6 = *(int *)(v3 + 28);
  }
  uint64_t v7 = OUTLINED_FUNCTION_188(v6);
  return __swift_getEnumTagSinglePayload(v7, v8, v9);
}

uint64_t storeEnumTagSinglePayload for SystemUpdateNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3357F60);
}

void sub_1C3357F60()
{
  OUTLINED_FUNCTION_255_0();
  if (v4)
  {
    *(void *)(v1 + 16) = v0;
  }
  else
  {
    OUTLINED_FUNCTION_117_0();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v5 + 84) == v3)
    {
      OUTLINED_FUNCTION_202();
    }
    else
    {
      type metadata accessor for Date();
      uint64_t v6 = *(int *)(v2 + 28);
    }
    uint64_t v7 = OUTLINED_FUNCTION_85_5(v6);
    __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  }
}

uint64_t type metadata completion function for SystemUpdateNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t assignWithCopy for SystemUpdateNotice.NoticeType(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SystemUpdateNotice.NoticeType(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemUpdateNotice.NoticeType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SystemUpdateNotice.NoticeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SystemUpdateNotice.NoticeType(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for SystemUpdateNotice.NoticeType(void *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[2] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for SystemUpdateNotice.NoticeType()
{
}

unsigned char *storeEnumTagSinglePayload for ConversationNoticeSubtitleStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3358338);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for SystemUpdateNotice.HandoffType()
{
}

void *initializeBufferWithCopyOfBuffer for ReactionNotice(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[8];
    *((unsigned char *)v7 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v18 = (void *)((char *)v7 + v17);
    uint64_t v19 = (void *)((char *)a2 + v17);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    char v24 = *((unsigned char *)a2 + v22);
    *uint64_t v18 = v21;
    v18[1] = v20;
    *((unsigned char *)v7 + v22) = v24;
    uint64_t v25 = (void *)((char *)v7 + v23);
    uint64_t v26 = (char *)a2 + v23;
    uint64_t v27 = *(void *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    if (v27)
    {
      uint64_t v28 = *((void *)v26 + 1);
      *uint64_t v25 = v27;
      v25[1] = v28;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    uint64_t v29 = a3[11];
    uint64_t v30 = (void *)((char *)v7 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    if (*v31)
    {
      uint64_t v32 = v31[1];
      void *v30 = *v31;
      v30[1] = v32;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    }
    uint64_t v33 = a3[13];
    *(void *)((char *)v7 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    uint64_t v34 = (void *)((char *)v7 + v33);
    uint64_t v35 = (void *)((char *)a2 + v33);
    unint64_t v36 = v35[1];
    if (v36 >= 2)
    {
      *uint64_t v34 = *v35;
      v34[1] = v36;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    }
  }
  return v7;
}

unint64_t destroy for ReactionNotice(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[10])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[11])) {
    swift_release();
  }
  unint64_t result = *(void *)(a1 + a2[13] + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for ReactionNotice(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  char v22 = *((unsigned char *)a2 + v20);
  void *v16 = v19;
  v16[1] = v18;
  *((unsigned char *)a1 + v20) = v22;
  uint64_t v23 = (void *)((char *)a1 + v21);
  char v24 = (char *)a2 + v21;
  uint64_t v25 = *(void *)((char *)a2 + v21);
  swift_bridgeObjectRetain();
  if (v25)
  {
    uint64_t v26 = *((void *)v24 + 1);
    *uint64_t v23 = v25;
    v23[1] = v26;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  if (*v29)
  {
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  uint64_t v31 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  unint64_t v34 = v33[1];
  if (v34 >= 2)
  {
    void *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  return a1;
}

void *assignWithCopy for ReactionNotice(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)((char *)a1 + v17);
  uint64_t v21 = *(void *)((char *)a2 + v17);
  if (v20)
  {
    if (v21)
    {
      uint64_t v22 = *((void *)v19 + 1);
      *uint64_t v18 = v21;
      v18[1] = v22;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *((void *)v19 + 1);
    *uint64_t v18 = v21;
    v18[1] = v23;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
LABEL_8:
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a1 + v24);
  uint64_t v28 = *(void *)((char *)a2 + v24);
  if (v27)
  {
    if (v28)
    {
      uint64_t v29 = *((void *)v26 + 1);
      *uint64_t v25 = v28;
      v25[1] = v29;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v28)
  {
    uint64_t v30 = *((void *)v26 + 1);
    *uint64_t v25 = v28;
    v25[1] = v30;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_15:
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v31 = a3[13];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  unint64_t v34 = *(void *)((char *)a1 + v31 + 8);
  unint64_t v35 = v33[1];
  if (v34 >= 2)
  {
    if (v35 >= 2)
    {
      void *v32 = *v33;
      v32[1] = v33[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v32, &demangling cache variable for type metadata for (title: String));
    goto LABEL_20;
  }
  if (v35 < 2)
  {
LABEL_20:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    return a1;
  }
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  return a1;
}

void *initializeWithTake for ReactionNotice(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  uint64_t v15 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v19 = v17[1];
    void *v16 = v18;
    v16[1] = v19;
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  if (*v22)
  {
    uint64_t v24 = v22[1];
    *uint64_t v21 = v23;
    v21[1] = v24;
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  uint64_t v25 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v25) = *(_OWORD *)((char *)a2 + v25);
  return a1;
}

void *assignWithTake for ReactionNotice(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)((char *)a2 + v19);
  if (*(void *)((char *)a1 + v19))
  {
    if (v22)
    {
      uint64_t v23 = *((void *)v21 + 1);
      *uint64_t v20 = v22;
      v20[1] = v23;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v22)
  {
    uint64_t v24 = *((void *)v21 + 1);
    *uint64_t v20 = v22;
    v20[1] = v24;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
LABEL_8:
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)((char *)a1 + v25);
  uint64_t v29 = *(void *)((char *)a2 + v25);
  if (v28)
  {
    if (v29)
    {
      uint64_t v30 = *((void *)v27 + 1);
      *uint64_t v26 = v29;
      v26[1] = v30;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v29)
  {
    uint64_t v31 = *((void *)v27 + 1);
    *uint64_t v26 = v29;
    v26[1] = v31;
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
LABEL_15:
  uint64_t v32 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v33 = (void *)((char *)a1 + v32);
  unint64_t v34 = (void *)((char *)a2 + v32);
  if (*(void *)((char *)a1 + v32 + 8) >= 2uLL)
  {
    unint64_t v35 = v34[1];
    if (v35 >= 2)
    {
      *uint64_t v33 = *v34;
      v33[1] = v35;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)a1 + v32, &demangling cache variable for type metadata for (title: String));
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for ReactionNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3358DFC);
}

uint64_t sub_1C3358DFC()
{
  OUTLINED_FUNCTION_173();
  if (v2) {
    return OUTLINED_FUNCTION_46_0(*v1);
  }
  OUTLINED_FUNCTION_105_2();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    OUTLINED_FUNCTION_211_0();
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_185();
  }
  uint64_t v6 = OUTLINED_FUNCTION_188(v5);
  return __swift_getEnumTagSinglePayload(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for ReactionNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3358E90);
}

void sub_1C3358E90()
{
  OUTLINED_FUNCTION_5();
  if (v3)
  {
    void *v1 = (v0 - 1);
  }
  else
  {
    OUTLINED_FUNCTION_117_0();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v4 + 84) == v2)
    {
      OUTLINED_FUNCTION_241_0();
    }
    else
    {
      type metadata accessor for Date();
      OUTLINED_FUNCTION_202();
    }
    uint64_t v6 = OUTLINED_FUNCTION_85_5(v5);
    __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
  }
}

uint64_t type metadata completion function for ReactionNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ParticipantReaction(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Participant.State(0);
    uint64_t v68 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_18;
      case 4u:
        uint64_t v10 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)a2 + v12);
        uint64_t v15 = *(void *)((char *)a2 + v12 + 16);
        uint64_t v16 = *(void *)((char *)a2 + v12 + 24);
        *((void *)v13 + 2) = v15;
        *((void *)v13 + 3) = v16;
        *((_WORD *)v13 + 16) = *((_WORD *)v14 + 16);
        *((void *)v13 + 5) = *((void *)v14 + 5);
        v13[48] = v14[48];
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
        v13[88] = v14[88];
        v13[89] = v14[89];
        uint64_t v17 = *((void *)v14 + 15);
        swift_bridgeObjectRetain();
        if (v17)
        {
          if (v17 == 1)
          {
            uint64_t v18 = v13 + 96;
            uint64_t v19 = v14 + 96;
            size_t v20 = 209;
            goto LABEL_12;
          }
          uint64_t v22 = *((void *)v14 + 16);
          *((void *)v13 + 15) = v17;
          *((void *)v13 + 16) = v22;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8))((uint64_t)(v13 + 96), (uint64_t)(v14 + 96), v17);
        }
        else
        {
          long long v21 = *((_OWORD *)v14 + 7);
          *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
          *((_OWORD *)v13 + 7) = v21;
          *((void *)v13 + 16) = *((void *)v14 + 16);
        }
        *((_DWORD *)v13 + 34) = *((_DWORD *)v14 + 34);
        long long v23 = *((_OWORD *)v14 + 10);
        *((_OWORD *)v13 + 9) = *((_OWORD *)v14 + 9);
        *((_OWORD *)v13 + 10) = v23;
        *((_OWORD *)v13 + 11) = *((_OWORD *)v14 + 11);
        v13[192] = v14[192];
        uint64_t v18 = v13 + 208;
        uint64_t v19 = v14 + 208;
        *((void *)v13 + 25) = *((void *)v14 + 25);
        size_t v20 = 97;
LABEL_12:
        memcpy(v18, v19, v20);
        uint64_t v24 = *((void *)v14 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v14 + 40);
          uint64_t v26 = *((void *)v14 + 41);
          *((void *)v13 + 39) = v24;
          *((void *)v13 + 40) = v25;
          *((void *)v13 + 41) = v26;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
          *((void *)v13 + 41) = *((void *)v14 + 41);
        }
        uint64_t v27 = *(int *)(v11 + 64);
        uint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = *((void *)v29 + 1);
        if (v30)
        {
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = v30;
          uint64_t v31 = *((void *)v29 + 3);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = v31;
          v28[32] = v29[32];
          *(_OWORD *)(v28 + 40) = *(_OWORD *)(v29 + 40);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v32 = *((_OWORD *)v29 + 1);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          *((_OWORD *)v28 + 1) = v32;
          long long v33 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v33;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        unint64_t v34 = (int *)type metadata accessor for Participant(0);
        uint64_t v35 = v34[5];
        unint64_t v36 = (char *)a1 + v35;
        unint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
        uint64_t v39 = v34[6];
        unint64_t v40 = (char *)a1 + v39;
        unint64_t v41 = (char *)a2 + v39;
        v40[4] = v41[4];
        *(_DWORD *)unint64_t v40 = *(_DWORD *)v41;
        uint64_t v42 = v34[7];
        unint64_t v43 = (char *)a1 + v42;
        uint64_t v44 = (char *)a2 + v42;
        long long v45 = *(void **)v44;
        if (*(void *)v44)
        {
          uint64_t v46 = *((void *)v44 + 1);
          *(void *)unint64_t v43 = v45;
          *((void *)v43 + 1) = v46;
          v43[16] = v44[16];
          uint64_t v47 = *((void *)v44 + 4);
          *((void *)v43 + 3) = *((void *)v44 + 3);
          *((void *)v43 + 4) = v47;
          id v48 = v45;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v49 = *((_OWORD *)v44 + 1);
          *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
          *((_OWORD *)v43 + 1) = v49;
          *((void *)v43 + 4) = *((void *)v44 + 4);
        }
        *(void *)((char *)a1 + v34[8]) = *(void *)((char *)a2 + v34[8]);
        uint64_t v50 = v34[9];
        uint64_t v51 = (void *)((char *)a1 + v50);
        uint64_t v52 = (void *)((char *)a2 + v50);
        uint64_t v53 = v52[1];
        *uint64_t v51 = *v52;
        v51[1] = v53;
        *((unsigned char *)a1 + v34[10]) = *((unsigned char *)a2 + v34[10]);
        *(void *)((char *)a1 + v34[11]) = *(void *)((char *)a2 + v34[11]);
        uint64_t v54 = v34[12];
        uint64_t v55 = *(void **)((char *)a2 + v54);
        *(void *)((char *)a1 + v54) = v55;
        *((unsigned char *)a1 + v34[13]) = *((unsigned char *)a2 + v34[13]);
        uint64_t v56 = v34[14];
        long long v57 = (char *)a1 + v56;
        uint64_t v58 = (char *)a2 + v56;
        uint64_t v59 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v60 = v55;
        if (__swift_getEnumTagSinglePayload((uint64_t)v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v59);
        }
        uint64_t v62 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v63 = *(int *)(v62 + 20);
        uint64_t v64 = &v57[v63];
        int v65 = &v58[v63];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v58[v63], 1, v59))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v64, v65, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v59);
        }
        v57[*(int *)(v62 + 24)] = v58[*(int *)(v62 + 24)];
        *((unsigned char *)a1 + v34[15]) = *((unsigned char *)a2 + v34[15]);
        *(void *)((char *)a1 + v34[16]) = *(void *)((char *)a2 + v34[16]);
        *((unsigned char *)a1 + *(int *)(v68 + 20)) = *((unsigned char *)a2 + *(int *)(v68 + 20));
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_19;
    }
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ParticipantReaction(uint64_t a1)
{
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v2 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      break;
    case 4u:
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v13 = a1 + *(int *)(v12 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v13 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v13 + 96);
      }
      if (*(void *)(v13 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + *(int *)(v12 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  char v3 = (int *)type metadata accessor for Participant(0);
  uint64_t v4 = a1 + v3[5];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (id *)(a1 + v3[7]);
  if (*v6)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v7 = a1 + v3[14];
  uint64_t v8 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = v7 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v9, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v9, v8);
  }
  return swift_release();
}

unsigned char *initializeWithCopy for ParticipantReaction(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant.State(0);
  uint64_t v66 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_16;
    case 4u:
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v10 = *(int *)(v9 + 48);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(_OWORD *)uint64_t v11 = *(_OWORD *)&a2[v10];
      uint64_t v13 = *(void *)&a2[v10 + 16];
      uint64_t v14 = *(void *)&a2[v10 + 24];
      *((void *)v11 + 2) = v13;
      *((void *)v11 + 3) = v14;
      *((_WORD *)v11 + 16) = *((_WORD *)v12 + 16);
      *((void *)v11 + 5) = *((void *)v12 + 5);
      v11[48] = v12[48];
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
      v11[88] = v12[88];
      v11[89] = v12[89];
      uint64_t v15 = *((void *)v12 + 15);
      swift_bridgeObjectRetain();
      if (v15)
      {
        if (v15 == 1)
        {
          uint64_t v16 = v11 + 96;
          uint64_t v17 = v12 + 96;
          size_t v18 = 209;
          goto LABEL_10;
        }
        uint64_t v20 = *((void *)v12 + 16);
        *((void *)v11 + 15) = v15;
        *((void *)v11 + 16) = v20;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8))((uint64_t)(v11 + 96), (uint64_t)(v12 + 96), v15);
      }
      else
      {
        long long v19 = *((_OWORD *)v12 + 7);
        *((_OWORD *)v11 + 6) = *((_OWORD *)v12 + 6);
        *((_OWORD *)v11 + 7) = v19;
        *((void *)v11 + 16) = *((void *)v12 + 16);
      }
      *((_DWORD *)v11 + 34) = *((_DWORD *)v12 + 34);
      long long v21 = *((_OWORD *)v12 + 10);
      *((_OWORD *)v11 + 9) = *((_OWORD *)v12 + 9);
      *((_OWORD *)v11 + 10) = v21;
      *((_OWORD *)v11 + 11) = *((_OWORD *)v12 + 11);
      v11[192] = v12[192];
      uint64_t v16 = v11 + 208;
      uint64_t v17 = v12 + 208;
      *((void *)v11 + 25) = *((void *)v12 + 25);
      size_t v18 = 97;
LABEL_10:
      memcpy(v16, v17, v18);
      uint64_t v22 = *((void *)v12 + 39);
      if (v22)
      {
        uint64_t v23 = *((void *)v12 + 40);
        uint64_t v24 = *((void *)v12 + 41);
        *((void *)v11 + 39) = v22;
        *((void *)v11 + 40) = v23;
        *((void *)v11 + 41) = v24;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v11 + 312) = *(_OWORD *)(v12 + 312);
        *((void *)v11 + 41) = *((void *)v12 + 41);
      }
      uint64_t v25 = *(int *)(v9 + 64);
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = *((void *)v27 + 1);
      if (v28)
      {
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = *((void *)v27 + 3);
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *((void *)v26 + 3) = v29;
        v26[32] = v27[32];
        *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
        *((void *)v26 + 7) = *((void *)v27 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v30 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v30;
        long long v31 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v31;
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_17:
      long long v32 = (int *)type metadata accessor for Participant(0);
      uint64_t v33 = v32[5];
      unint64_t v34 = &a1[v33];
      uint64_t v35 = &a2[v33];
      uint64_t v36 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
      uint64_t v37 = v32[6];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      v38[4] = v39[4];
      *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
      uint64_t v40 = v32[7];
      unint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      unint64_t v43 = *(void **)v42;
      if (*(void *)v42)
      {
        uint64_t v44 = *((void *)v42 + 1);
        *(void *)unint64_t v41 = v43;
        *((void *)v41 + 1) = v44;
        v41[16] = v42[16];
        uint64_t v45 = *((void *)v42 + 4);
        *((void *)v41 + 3) = *((void *)v42 + 3);
        *((void *)v41 + 4) = v45;
        id v46 = v43;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v47 = *((_OWORD *)v42 + 1);
        *(_OWORD *)unint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v47;
        *((void *)v41 + 4) = *((void *)v42 + 4);
      }
      *(void *)&a1[v32[8]] = *(void *)&a2[v32[8]];
      uint64_t v48 = v32[9];
      long long v49 = &a1[v48];
      uint64_t v50 = &a2[v48];
      uint64_t v51 = v50[1];
      *long long v49 = *v50;
      v49[1] = v51;
      a1[v32[10]] = a2[v32[10]];
      *(void *)&a1[v32[11]] = *(void *)&a2[v32[11]];
      uint64_t v52 = v32[12];
      uint64_t v53 = *(void **)&a2[v52];
      *(void *)&a1[v52] = v53;
      a1[v32[13]] = a2[v32[13]];
      uint64_t v54 = v32[14];
      uint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      uint64_t v57 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v58 = v53;
      if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v60 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v61 = *(int *)(v60 + 20);
      uint64_t v62 = &v55[v61];
      uint64_t v63 = &v56[v61];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v56[v61], 1, v57))
      {
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v62, v63, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v57);
      }
      v55[*(int *)(v60 + 24)] = v56[*(int *)(v60 + 24)];
      a1[v32[15]] = a2[v32[15]];
      *(void *)&a1[v32[16]] = *(void *)&a2[v32[16]];
      a1[*(int *)(v66 + 20)] = a2[*(int *)(v66 + 20)];
      swift_retain();
      return a1;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_17;
  }
}

char *assignWithCopy for ParticipantReaction(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_6();
    uint64_t v6 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_17;
      case 4u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        *(_OWORD *)uint64_t v11 = *(_OWORD *)&a2[v10];
        *((void *)v11 + 2) = *(void *)&a2[v10 + 16];
        uint64_t v13 = *(void *)&a2[v10 + 24];
        *((_WORD *)v11 + 16) = *((_WORD *)v12 + 16);
        *((void *)v11 + 3) = v13;
        *((void *)v11 + 5) = *((void *)v12 + 5);
        v11[48] = v12[48];
        long long v14 = *(_OWORD *)(v12 + 72);
        long long v15 = *(_OWORD *)(v12 + 56);
        v11[88] = v12[88];
        *(_OWORD *)(v11 + 56) = v15;
        *(_OWORD *)(v11 + 72) = v14;
        v11[89] = v12[89];
        uint64_t v16 = *((void *)v12 + 15);
        swift_bridgeObjectRetain();
        if (v16)
        {
          if (v16 == 1)
          {
            uint64_t v17 = v11 + 96;
            size_t v18 = v12 + 96;
            size_t v19 = 209;
            goto LABEL_11;
          }
          *((void *)v11 + 15) = v16;
          *((void *)v11 + 16) = *((void *)v12 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8))((uint64_t)(v11 + 96), (uint64_t)(v12 + 96), v16);
        }
        else
        {
          long long v20 = *((_OWORD *)v12 + 6);
          long long v21 = *((_OWORD *)v12 + 7);
          *((void *)v11 + 16) = *((void *)v12 + 16);
          *((_OWORD *)v11 + 6) = v20;
          *((_OWORD *)v11 + 7) = v21;
        }
        *((_DWORD *)v11 + 34) = *((_DWORD *)v12 + 34);
        *((void *)v11 + 18) = *((void *)v12 + 18);
        *((void *)v11 + 19) = *((void *)v12 + 19);
        long long v22 = *((_OWORD *)v12 + 10);
        long long v23 = *((_OWORD *)v12 + 11);
        v11[192] = v12[192];
        *((_OWORD *)v11 + 10) = v22;
        *((_OWORD *)v11 + 11) = v23;
        *((void *)v11 + 25) = *((void *)v12 + 25);
        uint64_t v17 = v11 + 208;
        size_t v18 = v12 + 208;
        size_t v19 = 97;
LABEL_11:
        memcpy(v17, v18, v19);
        uint64_t v24 = *((void *)v12 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v12 + 40);
          *((void *)v11 + 39) = v24;
          *((void *)v11 + 40) = v25;
          *((void *)v11 + 41) = *((void *)v12 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v26 = *(_OWORD *)(v12 + 312);
          *((void *)v11 + 41) = *((void *)v12 + 41);
          *(_OWORD *)(v11 + 312) = v26;
        }
        uint64_t v27 = *(int *)(v9 + 64);
        uint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        if (*((void *)v29 + 1))
        {
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = *((void *)v29 + 1);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = *((void *)v29 + 3);
          v28[32] = v29[32];
          *((void *)v28 + 5) = *((void *)v29 + 5);
          *((void *)v28 + 6) = *((void *)v29 + 6);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v30 = *(_OWORD *)v29;
          long long v31 = *((_OWORD *)v29 + 1);
          long long v32 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v32;
          *(_OWORD *)uint64_t v28 = v30;
          *((_OWORD *)v28 + 1) = v31;
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v33 = (int *)type metadata accessor for Participant(0);
  uint64_t v34 = v33[5];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  uint64_t v38 = v33[6];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  char *v39 = *v40;
  v39[1] = v40[1];
  long long v39[2] = v40[2];
  v39[3] = v40[3];
  v39[4] = v40[4];
  uint64_t v41 = v33[7];
  uint64_t v42 = (uint64_t)&a1[v41];
  unint64_t v43 = &a2[v41];
  uint64_t v44 = *(void **)&a1[v41];
  uint64_t v45 = *(void **)&a2[v41];
  if (v44)
  {
    if (v45)
    {
      *(void *)uint64_t v42 = v45;
      id v46 = v45;

      uint64_t v47 = *((void *)v43 + 1);
      *(unsigned char *)(v42 + 16) = v43[16];
      *(void *)(v42 + 8) = v47;
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      *(void *)(v42 + 32) = *((void *)v43 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v42);
      uint64_t v50 = *((void *)v43 + 4);
      long long v51 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v51;
      *(void *)(v42 + 32) = v50;
    }
  }
  else if (v45)
  {
    *(void *)uint64_t v42 = v45;
    uint64_t v48 = *((void *)v43 + 1);
    *(unsigned char *)(v42 + 16) = v43[16];
    *(void *)(v42 + 8) = v48;
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    id v49 = v45;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)v43;
    long long v53 = *((_OWORD *)v43 + 1);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    *(_OWORD *)uint64_t v42 = v52;
    *(_OWORD *)(v42 + 16) = v53;
  }
  *(void *)&a1[v33[8]] = *(void *)&a2[v33[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v33[9];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v33[10]] = a2[v33[10]];
  *(void *)&a1[v33[11]] = *(void *)&a2[v33[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v33[12];
  id v58 = *(void **)&a1[v57];
  uint64_t v59 = *(void **)&a2[v57];
  *(void *)&a1[v57] = v59;
  id v60 = v59;

  a1[v33[13]] = a2[v33[13]];
  uint64_t v61 = v33[14];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v64 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v62, 1, v64);
  int v66 = __swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64);
  uint64_t v78 = a3;
  if (EnumTagSinglePayload)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v67 = *(void *)(v64 - 8);
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v64);
LABEL_30:
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v62, v63, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v62, v63, v64);
LABEL_31:
  uint64_t v69 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v70 = *(int *)(v69 + 20);
  id v71 = &v62[v70];
  uint64_t v72 = &v63[v70];
  int v73 = __swift_getEnumTagSinglePayload((uint64_t)&v62[v70], 1, v64);
  int v74 = __swift_getEnumTagSinglePayload((uint64_t)v72, 1, v64);
  if (!v73)
  {
    uint64_t v75 = *(void *)(v64 - 8);
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v71, v72, v64);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v71, v64);
    goto LABEL_36;
  }
  if (v74)
  {
LABEL_36:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v71, v72, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v71, v72, v64);
  __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v64);
LABEL_37:
  v62[*(int *)(v69 + 24)] = v63[*(int *)(v69 + 24)];
  a1[v33[15]] = a2[v33[15]];
  *(void *)&a1[v33[16]] = *(void *)&a2[v33[16]];
  swift_retain();
  swift_release();
  a1[*(int *)(v78 + 20)] = a2[*(int *)(v78 + 20)];
  return a1;
}

char *initializeWithTake for ParticipantReaction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      goto LABEL_5;
    case 4u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], 0x150uLL);
      uint64_t v9 = *(int *)(v8 + 64);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      long long v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v12;
      long long v13 = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 3) = v13;
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  long long v15 = (int *)type metadata accessor for Participant(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = &a1[v16];
  size_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = v15[6];
  long long v21 = &a1[v20];
  long long v22 = &a2[v20];
  *(_DWORD *)long long v21 = *(_DWORD *)v22;
  _OWORD v21[4] = v22[4];
  uint64_t v23 = v15[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *(void *)&a1[v15[8]] = *(void *)&a2[v15[8]];
  *(_OWORD *)&a1[v15[9]] = *(_OWORD *)&a2[v15[9]];
  a1[v15[10]] = a2[v15[10]];
  *(void *)&a1[v15[11]] = *(void *)&a2[v15[11]];
  *(void *)&a1[v15[12]] = *(void *)&a2[v15[12]];
  a1[v15[13]] = a2[v15[13]];
  uint64_t v27 = v15[14];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v32 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = &v28[v33];
  uint64_t v35 = &v29[v33];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v29[v33], 1, v30))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v34, v35, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v30);
  }
  v28[*(int *)(v32 + 24)] = v29[*(int *)(v32 + 24)];
  a1[v15[15]] = a2[v15[15]];
  *(void *)&a1[v15[16]] = *(void *)&a2[v15[16]];
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for ParticipantReaction(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_6();
    uint64_t v5 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        goto LABEL_5;
      case 4u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&a1[*(int *)(v7 + 48)], &a2[*(int *)(v7 + 48)], 0x150uLL);
        uint64_t v8 = *(int *)(v7 + 64);
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        long long v11 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *((_OWORD *)v9 + 1) = v11;
        long long v12 = *((_OWORD *)v10 + 3);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
        *((_OWORD *)v9 + 3) = v12;
LABEL_5:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        break;
    }
  }
  uint64_t v14 = (int *)type metadata accessor for Participant(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = v14[6];
  uint64_t v20 = &a1[v19];
  long long v21 = &a2[v19];
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  v20[3] = v21[3];
  v20[4] = v21[4];
  uint64_t v22 = v14[7];
  uint64_t v23 = (uint64_t)&a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void **)&a1[v22];
  if (v25)
  {
    if (*(void *)v24)
    {
      *(void *)uint64_t v23 = *(void *)v24;

      *(void *)(v23 + 8) = *((void *)v24 + 1);
      *(unsigned char *)(v23 + 16) = v24[16];
      uint64_t v26 = *((void *)v24 + 4);
      *(void *)(v23 + 24) = *((void *)v24 + 3);
      *(void *)(v23 + 32) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Participant.RemoteIdentifiers(v23);
  }
  long long v27 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v27;
  *(void *)(v23 + 32) = *((void *)v24 + 4);
LABEL_11:
  *(void *)&a1[v14[8]] = *(void *)&a2[v14[8]];
  swift_bridgeObjectRelease();
  uint64_t v28 = v14[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  a1[v14[10]] = a2[v14[10]];
  *(void *)&a1[v14[11]] = *(void *)&a2[v14[11]];
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[12];
  uint64_t v34 = *(void **)&a1[v33];
  *(void *)&a1[v33] = *(void *)&a2[v33];

  a1[v14[13]] = a2[v14[13]];
  uint64_t v35 = v14[14];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38);
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38);
  if (EnumTagSinglePayload)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v41 = *(void *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_16:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v36, v37, v38);
LABEL_17:
  uint64_t v43 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = &v36[v44];
  id v46 = &v37[v44];
  int v47 = __swift_getEnumTagSinglePayload((uint64_t)&v36[v44], 1, v38);
  int v48 = __swift_getEnumTagSinglePayload((uint64_t)v46, 1, v38);
  if (!v47)
  {
    uint64_t v49 = *(void *)(v38 - 8);
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v45, v46, v38);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v38);
    goto LABEL_22;
  }
  if (v48)
  {
LABEL_22:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v45, v46, v38);
  __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v38);
LABEL_23:
  v36[*(int *)(v43 + 24)] = v37[*(int *)(v43 + 24)];
  a1[v14[15]] = a2[v14[15]];
  *(void *)&a1[v14[16]] = *(void *)&a2[v14[16]];
  swift_release();
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantReaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C335B650);
}

uint64_t sub_1C335B650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_49_2();
  type metadata accessor for Participant(v6);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(v3, a2, v7);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(v3 + *(int *)(a3 + 20));
    if (v10 >= 8) {
      return v10 - 7;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantReaction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C335B6E8);
}

void sub_1C335B6E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 7;
  }
}

uint64_t type metadata completion function for ParticipantReaction()
{
  uint64_t result = type metadata accessor for Participant(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FaceIDUnavailableNotice(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    long long v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    uint64_t v18 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[11];
    uint64_t v20 = (void *)((char *)v4 + v19);
    long long v21 = (void *)((char *)a2 + v19);
    if (*v21)
    {
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    }
    uint64_t v24 = a3[12];
    uint64_t v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = (void *)((char *)a2 + v24);
    if (*v26)
    {
      uint64_t v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    uint64_t v28 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = (void *)((char *)a2 + v28);
    unint64_t v31 = v30[1];
    if (v31 >= 2)
    {
      *uint64_t v29 = *v30;
      v29[1] = v31;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    }
  }
  return v4;
}

unint64_t destroy for FaceIDUnavailableNotice(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  if (*(void *)(a1 + a2[11])) {
    swift_release();
  }
  if (*(void *)(a1 + a2[12])) {
    swift_release();
  }
  unint64_t result = *(void *)(a1 + a2[14] + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for FaceIDUnavailableNotice(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  uint64_t v17 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  if (*v20)
  {
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  uint64_t v22 = a3[12];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  if (*v24)
  {
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  uint64_t v26 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  unint64_t v29 = v28[1];
  if (v29 >= 2)
  {
    *uint64_t v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  }
  return a1;
}

void *assignWithCopy for FaceIDUnavailableNotice(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v14 = a3[11];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)((char *)a1 + v14);
  uint64_t v18 = *(void *)((char *)a2 + v14);
  if (v17)
  {
    if (v18)
    {
      uint64_t v19 = *((void *)v16 + 1);
      *uint64_t v15 = v18;
      v15[1] = v19;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v18)
  {
    uint64_t v20 = *((void *)v16 + 1);
    *uint64_t v15 = v18;
    v15[1] = v20;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
LABEL_8:
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)((char *)a1 + v21);
  uint64_t v25 = *(void *)((char *)a2 + v21);
  if (v24)
  {
    if (v25)
    {
      uint64_t v26 = *((void *)v23 + 1);
      *uint64_t v22 = v25;
      v22[1] = v26;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v25)
  {
    uint64_t v27 = *((void *)v23 + 1);
    *uint64_t v22 = v25;
    v22[1] = v27;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
LABEL_15:
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v28 = a3[14];
  unint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  unint64_t v31 = *(void *)((char *)a1 + v28 + 8);
  unint64_t v32 = v30[1];
  if (v31 >= 2)
  {
    if (v32 >= 2)
    {
      *unint64_t v29 = *v30;
      v29[1] = v30[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v29, &demangling cache variable for type metadata for (title: String));
    goto LABEL_20;
  }
  if (v32 < 2)
  {
LABEL_20:
    *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
    return a1;
  }
  *unint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  return a1;
}

_OWORD *initializeWithTake for FaceIDUnavailableNotice(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v19 = *v18;
  if (*v18)
  {
    uint64_t v20 = v18[1];
    *uint64_t v17 = v19;
    v17[1] = v20;
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = *v23;
  if (*v23)
  {
    uint64_t v25 = v23[1];
    *uint64_t v22 = v24;
    v22[1] = v25;
  }
  else
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  uint64_t v26 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *(_OWORD *)((char *)a1 + v26) = *(_OWORD *)((char *)a2 + v26);
  return a1;
}

void *assignWithTake for FaceIDUnavailableNotice(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v16 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)((char *)a1 + v17);
  uint64_t v21 = *(void *)((char *)a2 + v17);
  if (v20)
  {
    if (v21)
    {
      uint64_t v22 = *((void *)v19 + 1);
      *uint64_t v18 = v21;
      v18[1] = v22;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *((void *)v19 + 1);
    *uint64_t v18 = v21;
    v18[1] = v23;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
LABEL_8:
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a1 + v24);
  uint64_t v28 = *(void *)((char *)a2 + v24);
  if (v27)
  {
    if (v28)
    {
      uint64_t v29 = *((void *)v26 + 1);
      *uint64_t v25 = v28;
      v25[1] = v29;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v28)
  {
    uint64_t v30 = *((void *)v26 + 1);
    *uint64_t v25 = v28;
    v25[1] = v30;
    goto LABEL_15;
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_15:
  uint64_t v31 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  unint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  if (*(void *)((char *)a1 + v31 + 8) >= 2uLL)
  {
    unint64_t v34 = v33[1];
    if (v34 >= 2)
    {
      void *v32 = *v33;
      v32[1] = v34;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)a1 + v31, &demangling cache variable for type metadata for (title: String));
  }
  *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
  return a1;
}

uint64_t getEnumTagSinglePayload for FaceIDUnavailableNotice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C335C284);
}

uint64_t sub_1C335C284(uint64_t a1, int a2)
{
  if (a2 == 2147483646) {
    return OUTLINED_FUNCTION_63_4(*(void *)(a1 + 8));
  }
  OUTLINED_FUNCTION_105_2();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v4 + 84) == v2)
  {
    OUTLINED_FUNCTION_211_0();
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_185();
  }
  uint64_t v6 = OUTLINED_FUNCTION_188(v5);
  return __swift_getEnumTagSinglePayload(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for FaceIDUnavailableNotice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C335C320);
}

void sub_1C335C320()
{
  OUTLINED_FUNCTION_255_0();
  if (v3)
  {
    *(void *)(v1 + 8) = v0;
  }
  else
  {
    OUTLINED_FUNCTION_117_0();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v4 + 84) == v2)
    {
      OUTLINED_FUNCTION_241_0();
    }
    else
    {
      type metadata accessor for Date();
      OUTLINED_FUNCTION_202();
    }
    uint64_t v6 = OUTLINED_FUNCTION_85_5(v5);
    __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
  }
}

uint64_t type metadata completion function for FaceIDUnavailableNotice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C335C4B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out Bool)()
{
  return thunk for @escaping @callee_guaranteed () -> (@out Bool)(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Bool)(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_1C335C4F8()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute);
  }
  return result;
}

uint64_t sub_1C335C55C()
{
  return 8;
}

uint64_t sub_1C335C568()
{
  return swift_release();
}

uint64_t sub_1C335C570(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C335C584(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_41_17()
{
  outlined copy of SessionActionNotice.NoticeType(v1, v0, v3);
  outlined copy of SessionActionNotice.NoticeType(v5, v4, v2);
  outlined consume of SessionActionNotice.NoticeType(v1, v0, v3);
  return outlined consume of SessionActionNotice.NoticeType(v5, v4, v2);
}

uint64_t OUTLINED_FUNCTION_75_2()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for SessionActionNotice(0) + 28));
  uint64_t v2 = v1[3];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

void OUTLINED_FUNCTION_80_3()
{
  uint64_t v1 = 0x20646E6120;
  unint64_t v2 = 0xE500000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_81_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_83_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 288) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t OUTLINED_FUNCTION_86_4()
{
  return AttributeContainer.init()();
}

uint64_t OUTLINED_FUNCTION_95_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_97_3()
{
  return type metadata accessor for SessionActionNotice(0);
}

uint64_t OUTLINED_FUNCTION_99_3()
{
  return type metadata accessor for FaceIDUnavailableNotice(0);
}

uint64_t OUTLINED_FUNCTION_105_2()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_106_2()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_107_3()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_115_1()
{
  return type metadata accessor for PushToTalkNotice(0);
}

uint64_t OUTLINED_FUNCTION_116_0()
{
  return type metadata accessor for SessionActivationRequestNotice(0);
}

uint64_t OUTLINED_FUNCTION_118_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return type metadata accessor for AttributedString.AttributeMergePolicy();
}

uint64_t OUTLINED_FUNCTION_119_1()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

void OUTLINED_FUNCTION_125_1()
{
  uint64_t v1 = 0x2064657472617453;
  unint64_t v2 = 0xAB000000009C80E2;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_126_1()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void *OUTLINED_FUNCTION_139_1()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_142_1()
{
  return type metadata accessor for SystemUpdateNotice(0);
}

uint64_t OUTLINED_FUNCTION_148_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + a1);
  uint64_t result = *v3;
  uint64_t v5 = v3[1];
  uint64_t *v1 = *v3;
  v1[1] = v5;
  return result;
}

uint64_t OUTLINED_FUNCTION_152()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_158_1(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)(v4 + a1);
  void *v5 = a4;
  v5[1] = a3;
}

uint64_t OUTLINED_FUNCTION_159()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_160_0()
{
  return outlined consume of SessionActionNotice.NoticeType(1, 0, 0xC000000000000000);
}

uint64_t OUTLINED_FUNCTION_164_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_171_0()
{
  return outlined init with copy of IDSLookupManager(v0, v1 - 120);
}

uint64_t OUTLINED_FUNCTION_175_1()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_176_0()
{
  uint64_t v2 = *(void **)(v0 - 136);
  return v2;
}

uint64_t OUTLINED_FUNCTION_182_0()
{
  outlined copy of SessionActionNotice.NoticeType(v1, v0, v3);
  return outlined copy of SessionActionNotice.NoticeType(v5, v4, v2);
}

uint64_t OUTLINED_FUNCTION_184_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_186_0()
{
  return AttributeContainer.init()();
}

uint64_t OUTLINED_FUNCTION_191_0()
{
  return type metadata accessor for SessionActionNotice(0);
}

void OUTLINED_FUNCTION_195_0(Swift::String a1)
{
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_200()
{
  return type metadata accessor for Calendar();
}

uint64_t OUTLINED_FUNCTION_204()
{
  return 0;
}

void OUTLINED_FUNCTION_205_1()
{
  uint64_t v1 = 0;
  unint64_t v2 = 0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_206()
{
  return type metadata accessor for SessionActionNotice(0);
}

uint64_t OUTLINED_FUNCTION_207_0()
{
  return *(void *)(v0 - 256);
}

uint64_t OUTLINED_FUNCTION_209_0()
{
  return v0;
}

void OUTLINED_FUNCTION_210_0()
{
  *(void *)(v0 - 168) = *(void *)(v0 - 296);
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  return 0x6E776F6E6B6E75;
}

uint64_t OUTLINED_FUNCTION_215()
{
  return type metadata accessor for SessionActionNotice(0);
}

uint64_t OUTLINED_FUNCTION_216_0()
{
  return outlined copy of SessionActionNotice.NoticeType(v1, v0, v2);
}

void OUTLINED_FUNCTION_218_0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t OUTLINED_FUNCTION_227_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_229_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_230()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_231_0()
{
  return AttributedString.mergeAttributes(_:mergePolicy:)();
}

unint64_t OUTLINED_FUNCTION_235_0()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_239_0()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_242_0()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_245_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_246_0()
{
  Participant.name(_:)();
}

uint64_t OUTLINED_FUNCTION_248_1()
{
  return v0 + *(int *)(*(void *)(v1 - 288) + 28);
}

uint64_t OUTLINED_FUNCTION_250_1()
{
  return 0x20656C706F657020;
}

void OUTLINED_FUNCTION_251_0()
{
  *(void *)(v0 - 48) = 0;
  *(void *)(v0 - 40) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_257_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_258()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_259_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_260_0()
{
  return v0;
}

void OUTLINED_FUNCTION_261_0(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  *a1 = a2;
}

void OUTLINED_FUNCTION_262()
{
  AttributedString.init(cnkLocalized:)();
}

uint64_t OUTLINED_FUNCTION_264_0()
{
  return 0;
}

id OUTLINED_FUNCTION_265@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_266_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_267_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_268_0(uint64_t a1)
{
  return type metadata accessor for SessionActionNotice(a1);
}

void OUTLINED_FUNCTION_270_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_272_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_273_0()
{
  return outlined consume of SessionActionNotice.NoticeType(4, 0, 0xC000000000000000);
}

uint64_t OUTLINED_FUNCTION_274(uint64_t result)
{
  *(unsigned char *)(v2 + *(int *)(result + 52)) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_275_0(uint64_t result)
{
  *(unsigned char *)(v2 + *(int *)(result + 40)) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_276_0(uint64_t result)
{
  *(unsigned char *)(v2 + *(int *)(result + 36)) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_279_0()
{
  return outlined consume of SessionActionNotice.NoticeType(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_280_0()
{
  return AttributedString.init(_:attributes:)();
}

uint64_t OUTLINED_FUNCTION_281_0()
{
  return type metadata accessor for UUID();
}

void OUTLINED_FUNCTION_282(uint64_t a1)
{
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
  unint64_t v3 = 0xAC0000009C80E220;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v2);
}

uint64_t OUTLINED_FUNCTION_283_0()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t OUTLINED_FUNCTION_284()
{
  return v0;
}

void OUTLINED_FUNCTION_285_0()
{
  AttributedString.init(conversationControlsLocalized:comment:)();
}

void OUTLINED_FUNCTION_287_0()
{
  AttributedString.init(cnkLocalized:)();
}

uint64_t OUTLINED_FUNCTION_288()
{
  return AttributedString.init(_:attributes:)();
}

unint64_t OUTLINED_FUNCTION_291_0()
{
  return 0xD00000000000002BLL;
}

uint64_t OUTLINED_FUNCTION_296()
{
  return *(void *)(v0 + *(int *)(v1 + 36));
}

uint64_t OUTLINED_FUNCTION_297_0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_300_0()
{
  return v0 + *(int *)(type metadata accessor for SessionActivationRequestNotice(0) + 60);
}

uint64_t OUTLINED_FUNCTION_301_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_302_0()
{
  return type metadata accessor for FaceIDUnavailableNotice(0);
}

uint64_t OUTLINED_FUNCTION_303_0()
{
  return type metadata accessor for AppLaunchNotice(0);
}

unint64_t OUTLINED_FUNCTION_306_0()
{
  return 0xD000000000000015;
}

uint64_t OUTLINED_FUNCTION_311_0()
{
  return v0;
}

uint64_t dispatch thunk of InCallControlsParticipantCellDelegate.inCallControlsParticipantCell(_:didTapAction:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t CallRecordingViewModel.__allocating_init(service:)(uint64_t a1)
{
  return CallRecordingViewModel.__allocating_init(service:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized CallRecordingViewModel.__allocating_init(service:));
}

uint64_t CallRecordingViewModel.$presentedView.getter()
{
  return swift_endAccess();
}

uint64_t CallRecordingViewModel.presentedView.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t CallRecordingViewModel.countdownDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  CallRecordingViewModel.countdownDelegate.didset();
  return swift_unknownObjectRelease();
}

uint64_t CallRecordingViewModel.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_service;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of IDSLookupManager(v3, a1);
}

uint64_t CallRecordingViewModel.service.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_service;
  OUTLINED_FUNCTION_6_1();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of Notice(a1, v3);
  return swift_endAccess();
}

uint64_t (*CallRecordingViewModel.service.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t CallRecordingViewModel.countdownDelegate.getter()
{
  return ConversationControlsManager.systemBannerPresenter.getter();
}

uint64_t key path setter for CallRecordingViewModel.countdownDelegate : CallRecordingViewModel(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  return CallRecordingViewModel.countdownDelegate.setter(v2, v1);
}

uint64_t CallRecordingViewModel.countdownDelegate.didset()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v3 + 8))(0, 1, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void (*CallRecordingViewModel.countdownDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return CallRecordingViewModel.countdownDelegate.modify;
}

void CallRecordingViewModel.countdownDelegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  OUTLINED_FUNCTION_378();
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    CallRecordingViewModel.countdownDelegate.didset();
  }
  free(v3);
}

uint64_t key path setter for CallRecordingViewModel.recordingDelegate : CallRecordingViewModel(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CallRecordingViewModel.recordingDelegate.getter()
{
  return ConversationControlsManager.systemBannerPresenter.getter();
}

uint64_t CallRecordingViewModel.recordingDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CallRecordingViewModel.recordingDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return CallRecordingViewModel.recordingDelegate.modify;
}

void CallRecordingViewModel.recordingDelegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  OUTLINED_FUNCTION_378();
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

unint64_t CallRecordingViewModel.recordingState.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
}

uint64_t key path getter for CallRecordingViewModel.recordingState : CallRecordingViewModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(unsigned char *)(a2 + 4) = v5;
  return result;
}

void key path setter for CallRecordingViewModel.recordingState : CallRecordingViewModel(unsigned int *a1)
{
}

void CallRecordingViewModel.recordingState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState;
  OUTLINED_FUNCTION_11_0();
  *(_DWORD *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 4) = BYTE4(a1) & 1;
  CallRecordingViewModel.update()();
}

Swift::Void __swiftcall CallRecordingViewModel.update()()
{
  OUTLINED_FUNCTION_5_4();
  if (*(unsigned char *)(v0 + 4)) {
    goto LABEL_6;
  }
  if ((*(_DWORD *)v0 - 1) < 2)
  {
    CallRecordingViewModel.presentedView.setter();
    return;
  }
  if (*(_DWORD *)v0 != 3)
  {
LABEL_6:
    CallRecordingViewModel.reset()();
  }
  else
  {
    CallRecordingViewModel.presentedView.setter();
    CallRecordingViewModel.observeAudioSpectrum()();
    CallRecordingViewModel.startStopwatch()();
  }
}

void (*CallRecordingViewModel.recordingState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_6_1();
  return CallRecordingViewModel.recordingState.modify;
}

void CallRecordingViewModel.recordingState.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    CallRecordingViewModel.update()();
  }
}

BOOL static CallRecordingViewModel.PresentedView.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void CallRecordingViewModel.PresentedView.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CallRecordingViewModel.PresentedView.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CallRecordingViewModel.PresentedView(char *a1, char *a2)
{
  return static CallRecordingViewModel.PresentedView.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CallRecordingViewModel.PresentedView()
{
  return CallRecordingViewModel.PresentedView.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CallRecordingViewModel.PresentedView(uint64_t a1)
{
  CallRecordingViewModel.PresentedView.hash(into:)(a1, *v1);
}

uint64_t key path getter for CallRecordingViewModel.presentedView : CallRecordingViewModel@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CallRecordingViewModel.presentedView.getter();
  *a1 = result;
  return result;
}

void key path setter for CallRecordingViewModel.presentedView : CallRecordingViewModel()
{
}

void CallRecordingViewModel.presentedView.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  static Published.subscript.setter();
  CallRecordingViewModel.presentedView.didset(v2);
}

void CallRecordingViewModel.presentedView.didset(char a1)
{
  if (CallRecordingViewModel.presentedView.getter() == 3 && a1 != 2)
  {
    id v3 = objc_msgSend(self, sel_defaultCenter);
    id v4 = v3;
    if (one-time initialization token for startCallRecordingStateCancelledNotification != -1)
    {
      swift_once();
      id v3 = v4;
    }
    objc_msgSend(v3, sel_postNotificationName_object_, static NSNotificationName.startCallRecordingStateCancelledNotification, 0);
  }
}

void (*CallRecordingViewModel.presentedView.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CallRecordingViewModel.presentedView.getter();
  return CallRecordingViewModel.presentedView.modify;
}

void CallRecordingViewModel.presentedView.modify()
{
}

uint64_t key path setter for CallRecordingViewModel.$presentedView : CallRecordingViewModel(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>.Publisher);
  MEMORY[0x1F4188790](v2);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return CallRecordingViewModel.$presentedView.setter((uint64_t)v4);
}

uint64_t CallRecordingViewModel.$presentedView.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>.Publisher);
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

void (*CallRecordingViewModel.$presentedView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>.Publisher);
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[5] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[6] = malloc(v6);
  v3[7] = malloc(v6);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return CallRecordingViewModel.$presentedView.modify;
}

void CallRecordingViewModel.$presentedView.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    CallRecordingViewModel.$presentedView.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CallRecordingViewModel.$presentedView.setter(*(void *)(*(void *)a1 + 56));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CallRecordingViewModel.stopwatchFormattedValue.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_stopwatchValue);
  uint64_t v2 = v1 % 3600 / 60;
  uint64_t v3 = v1 % 60;
  if (v1 < 3600)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C37696D0;
    uint64_t v9 = MEMORY[0x1E4FBB550];
    uint64_t v10 = MEMORY[0x1E4FBB5C8];
    *(void *)(v8 + 56) = MEMORY[0x1E4FBB550];
    *(void *)(v8 + 64) = v10;
    *(void *)(v8 + 32) = v2;
    *(void *)(v8 + 96) = v9;
    *(void *)(v8 + 104) = v10;
    *(void *)(v8 + 72) = v3;
  }
  else
  {
    unint64_t v4 = v1 / 0xE10uLL;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = MEMORY[0x1E4FBB550];
    *(_OWORD *)(v5 + 16) = xmmword_1C376BA10;
    uint64_t v7 = MEMORY[0x1E4FBB5C8];
    *(void *)(v5 + 56) = v6;
    *(void *)(v5 + 64) = v7;
    *(void *)(v5 + 32) = v4;
    *(void *)(v5 + 96) = v6;
    *(void *)(v5 + 104) = v7;
    *(void *)(v5 + 72) = v2;
    *(void *)(v5 + 136) = v6;
    *(void *)(v5 + 144) = v7;
    *(void *)(v5 + 112) = v3;
  }
  return String.init(format:_:)();
}

uint64_t CallRecordingViewModel.init(service:)(uint64_t a1)
{
  return CallRecordingViewModel.__allocating_init(service:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized CallRecordingViewModel.init(service:));
}

uint64_t CallRecordingViewModel.__allocating_init(service:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  (*(void (**)(uint64_t))(v9 + 16))(v3);
  uint64_t v10 = a2(v3, v2, v6, v7);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

Swift::Void __swiftcall CallRecordingViewModel.observeCountdownNotifications()()
{
  if (one-time initialization token for recordingSession != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.recordingSession);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (_WORD *)swift_slowAlloc();
    *unint64_t v4 = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v5, v6, "Observing countdown notification");
    MEMORY[0x1C87760E0](v4, -1, -1);
  }

  id v23[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  v23[3] = v23;
  OUTLINED_FUNCTION_5_3();
  v23[1] = v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = OUTLINED_FUNCTION_11_47();
  v23[0] = v23;
  OUTLINED_FUNCTION_5_3();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_64();
  id v13 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for startCallRecordingCountdownNotification != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v24 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  uint64_t v15 = OUTLINED_FUNCTION_8(v14);
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  OUTLINED_FUNCTION_25_1(v18, v20, v21, v19);
  _sSo20NSNotificationCenterC10FoundationE9PublisherVAE7CombineAdCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1F418C1D0]);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)();
  outlined destroy of SystemUpdateNotice?(v18, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v9);
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v22();
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
}

Swift::Void __swiftcall CallRecordingViewModel.observeRecordingStateNotifications()()
{
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  OUTLINED_FUNCTION_5_3();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = OUTLINED_FUNCTION_11_47();
  OUTLINED_FUNCTION_5_3();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  id v11 = objc_msgSend(self, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  OUTLINED_FUNCTION_25_1(v16, v18, v19, v17);
  _sSo20NSNotificationCenterC10FoundationE9PublisherVAE7CombineAdCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1F418C1D0]);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)();
  outlined destroy of SystemUpdateNotice?(v16, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v20);
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
}

uint64_t CallRecordingViewModel.observeAudioSpectrum()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  type metadata accessor for MainActor();
  id v5 = v0;
  uint64_t v6 = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = MEMORY[0x1E4FBCFD8];
  v7[2] = v6;
  v7[3] = v8;
  v7[4] = v5;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

Swift::Void __swiftcall CallRecordingViewModel.startStopwatch()()
{
  uint64_t v2 = v0;
  if (one-time initialization token for recordingSession != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.recordingSession);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (_WORD *)swift_slowAlloc();
    *uint64_t v6 = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v7, v8, "Start recording stopwatch");
    MEMORY[0x1C87760E0](v6, -1, -1);
  }

  CallRecordingViewModel.updateStopwatch()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTimer);
  id v9 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_3_103(v12);

  outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  type metadata accessor for NSTimer.TimerPublisher();
  _sSo20NSNotificationCenterC10FoundationE9PublisherVAE7CombineAdCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, MEMORY[0x1F418C230]);
  ConnectablePublisher.autoconnect()();
  swift_release();
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_timeSink) = v13;
  swift_release();
}

Swift::Void __swiftcall CallRecordingViewModel.reset()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  CallRecordingViewModel.presentedView.setter();
  CallRecordingViewModel.stopStopwatch()();
  CallRecordingViewModel.stopWaveform()();
  uint64_t v6 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_25_1(v5, v7, v8, v6);
  type metadata accessor for MainActor();
  id v9 = v0;
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = MEMORY[0x1E4FBCFD8];
  void v11[2] = v10;
  void v11[3] = v12;
  void v11[4] = v9;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
}

uint64_t CallRecordingViewModel.stopStopwatch()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_timeSink))
  {
    swift_retain();
    AnyCancellable.cancel()();
    return swift_release();
  }
  return result;
}

void CallRecordingViewModel.stopWaveform()()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_waveformViewModel);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = *(void (**)(uint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x238);
    uint64_t v4 = v2;
    v3(0x65766157706F7473, 0xEE0029286D726F66);

    uint64_t v2 = *v1;
  }
  unsigned __int8 *v1 = 0;
}

uint64_t closure #1 in CallRecordingViewModel.reset()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in CallRecordingViewModel.reset(), v6, v5);
}

uint64_t closure #1 in CallRecordingViewModel.reset()()
{
  OUTLINED_FUNCTION_17_2();
  swift_release();
  CallRecordingViewModel.stopRecording()();
  OUTLINED_FUNCTION_6();
  return v0();
}

void *CallRecordingViewModel.stopRecording()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_avAudioPlayer);
  if (v1) {
    objc_msgSend(v1, sel_stop);
  }
  uint64_t v2 = CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isRecording);
  if (v2 || (result = CallRecordingViewModel.disclosingCall.getter(), (uint64_t v2 = result) != 0))
  {
    uint64_t v4 = v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_service;
    swift_beginAccess();
    outlined init with copy of IDSLookupManager(v4, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(void *, void (*)(uint64_t), void, uint64_t, uint64_t))(v6 + 16))(v2, closure #1 in CallRecordingViewModel.stopRecording(), 0, v5, v6);

    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

void closure #1 in CallRecordingViewModel.observeCountdownNotifications()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if (one-time initialization token for recordingSession != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.recordingSession);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1C2F90000, v6, v7, "Start pre-recording countdown", v8, 2u);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    CallRecordingViewModel.startCountdown()();
  }
}

Swift::Void __swiftcall CallRecordingViewModel.startCountdown()()
{
  uint64_t v2 = v0;
  CallRecordingViewModel.presentedView.setter();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue) = 3;
  uint64_t v3 = v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 8))(3, 0, ObjectType, v4);
    swift_unknownObjectRelease();
  }
  CallRecordingViewModel.playCountdownTone()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTimer);
  id v6 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_3_103(v9);

  outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  type metadata accessor for NSTimer.TimerPublisher();
  _sSo20NSNotificationCenterC10FoundationE9PublisherVAE7CombineAdCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, MEMORY[0x1F418C230]);
  ConnectablePublisher.autoconnect()();
  swift_release();
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  uint64_t v10 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_timeSink) = v10;
  swift_release();
}

void closure #1 in CallRecordingViewModel.observeRecordingStateNotifications()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)type metadata accessor for HUDActivityManager.BannerUpdate(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  id v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v45 - v7;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x1C8776240](a2 + 16);
  if (v9)
  {
    uint64_t v10 = (char *)v9;
    Notification.object.getter();
    if ((void)v50)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
      if (swift_dynamicCast())
      {
        uint64_t v11 = (void *)v52;
        if (one-time initialization token for recordingSession != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.recordingSession);
        id v13 = v11;
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        BOOL v16 = os_log_type_enabled(v14, v15);
        id v47 = v13;
        if (v16)
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          id v46 = (void *)swift_slowAlloc();
          int v48 = v46;
          *(_DWORD *)uint64_t v17 = 136315138;
          id v18 = objc_msgSend(v13, sel_recordingSession);
          if (v18)
          {
            uint64_t v19 = v18;
            unsigned int v20 = objc_msgSend(v18, sel_recordingState);

            LODWORD(v52) = v20;
            type metadata accessor for TUCallRecordingState(0);
            uint64_t v21 = String.init<A>(reflecting:)();
            unint64_t v23 = v22;
          }
          else
          {
            unint64_t v23 = 0xE300000000000000;
            uint64_t v21 = 7104878;
          }
          uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, (uint64_t *)&v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v24 = v47;

          id v13 = v24;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, v14, v15, "TUCallRecordingState changed to: %s.", v17, 0xCu);
          uint64_t v25 = v46;
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v25, -1, -1);
          MEMORY[0x1C87760E0](v17, -1, -1);
        }
        else
        {
        }
        uint64_t v26 = &v10[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState];
        swift_beginAccess();
        int v27 = *(_DWORD *)v26;
        int v28 = v26[4];
        id v29 = objc_msgSend(v13, sel_recordingSession);
        uint64_t v30 = v29;
        if (v29)
        {
          unsigned int v31 = objc_msgSend(v29, sel_recordingState);
        }
        else
        {
          unsigned int v31 = 0;
        }
        *(_DWORD *)uint64_t v26 = v31;
        v26[4] = v30 == 0;
        CallRecordingViewModel.update()();
        if (v27 == 3) {
          int v32 = v28;
        }
        else {
          int v32 = 1;
        }
        if (v32 == 1 && ((v26[4] & 1) != 0 || *(_DWORD *)v26 != 3))
        {
        }
        else
        {
          id v33 = objc_msgSend(v13, sel_provider);
          unsigned int v34 = objc_msgSend(v33, sel_isTelephonyProvider);

          uint64_t v35 = 7;
          if (!v34) {
            uint64_t v35 = 0;
          }
          int v48 = (void *)v35;
          long long v49 = 0u;
          long long v50 = 0u;
          char v51 = 6;
          uint64_t v36 = type metadata accessor for UUID();
          id v46 = v45;
          uint64_t v37 = *(void *)(v36 - 8);
          MEMORY[0x1F4188790](v36);
          uint64_t v39 = (char *)v45 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
          UUID.init()();
          int v40 = &v6[v3[11]];
          *((void *)v40 + 1) = 0;
          swift_unknownObjectWeakInit();
          *(void *)id v6 = 0x4089000000000000;
          outlined init with copy of ConversationControlsType((uint64_t)&v48, (uint64_t)(v6 + 8));
          *((void *)v6 + 7) = 0;
          v6[64] = 1;
          *((void *)v40 + 1) = 0;
          swift_unknownObjectWeakAssign();
          v6[65] = 1;
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(&v6[v3[8]], v39, v36);
          uint64_t v41 = type metadata accessor for Date();
          v45[1] = v45;
          uint64_t v42 = *(void *)(v41 - 8);
          MEMORY[0x1F4188790](v41);
          uint64_t v44 = (char *)v45 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
          static Date.now.getter();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
          outlined destroy of ConversationControlsType((uint64_t)&v48);
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v6[v3[9]], v44, v41);
          *(void *)&v6[v3[10]] = 0;
          outlined init with take of HUDActivityManager.BannerUpdate((uint64_t)v6, (uint64_t)v8);
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          objc_release((id)(*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & *(void *)static HUDActivityManager.shared)
                                                             + 0xF0))(v8));

          swift_release();
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v8);
        }
      }
      else
      {
      }
    }
    else
    {

      outlined destroy of SystemUpdateNotice?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    }
  }
}

uint64_t CallRecordingViewModel.playCountdownTone()()
{
  uint64_t v1 = v0;
  v46[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (char *)v46 - v4 + 32;
  id v6 = objc_msgSend(self, sel_conversationKit);
  id v7 = outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(0xD000000000000018, 0x80000001C37A9EF0, 6709603, 0xE300000000000000, v6);

  MEMORY[0x1F4188790](v8);
  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = (char *)v46 - v4 + 32;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = (char *)v46 - v4 + 32;
    uint64_t v11 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v10, v11, 1, v9);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v46 - v4 + 32, (uint64_t)v46 - v4 + 32, &demangling cache variable for type metadata for URL?);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  unint64_t v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (char *)v46 - v16 + 32;
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 32;
  outlined init with copy of URL?((uint64_t)v5, (uint64_t)v18);
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v9) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
    return outlined destroy of SystemUpdateNotice?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))((char *)v46 - v16 + 32, v18, v9);
    MEMORY[0x1F4188790](v20);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)v46 - v16 + 32, (char *)v46 - v16 + 32, v9);
    id v21 = objc_allocWithZone(MEMORY[0x1E4F153C0]);
    id v22 = @nonobjc AVAudioPlayer.init(contentsOf:)((uint64_t)v46 - v16 + 32);
    objc_msgSend(v22, sel_setNumberOfLoops_, 0);
    LODWORD(v23) = 1.0;
    objc_msgSend(v22, sel_setVolume_, v23);
    id v24 = objc_msgSend(self, sel_auxiliarySession);
    uint64_t v25 = *MEMORY[0x1E4F14F98];
    uint64_t v26 = *MEMORY[0x1E4F15050];
    v46[0] = 0;
    if (objc_msgSend(v24, sel_setCategory_mode_options_error_, v25, v26, 128, v46))
    {
      id v27 = v46[0];
      objc_msgSend(v22, sel_setAudioSession_, v24);
      int v28 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_avAudioPlayer);
      *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_avAudioPlayer) = v22;
      id v29 = v22;

      if (one-time initialization token for recordingSession != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.recordingSession);
      unsigned int v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        id v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v33 = 0;
        _os_log_impl(&dword_1C2F90000, v31, v32, "Playing countdown tone.", v33, 2u);
        MEMORY[0x1C87760E0](v33, -1, -1);
      }

      objc_msgSend(v29, sel_play);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v9);
      return outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      id v34 = v46[0];
      uint64_t v35 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v9);
      if (one-time initialization token for recordingSession != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.recordingSession);
      id v37 = v35;
      id v38 = v35;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = (void *)swift_slowAlloc();
        v46[0] = v42;
        *(_DWORD *)uint64_t v41 = 136315138;
        swift_getErrorValue();
        uint64_t v43 = Error.localizedDescription.getter();
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2F90000, v39, v40, "Error playing countdown tone: %s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v42, -1, -1);
        MEMORY[0x1C87760E0](v41, -1, -1);
      }
      else
      {
      }
      return outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
    }
  }
}

uint64_t closure #1 in CallRecordingViewModel.startCountdown()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a2 + 16);
  if (result)
  {
    id v7 = (void *)result;
    uint64_t v8 = *(void *)(result + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue);
    BOOL v9 = __OFSUB__(v8, 1);
    uint64_t v10 = v8 - 1;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      *(void *)(result + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue) = v10;
      uint64_t v11 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v11);
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = 0;
      v12[3] = 0;
      void v12[4] = v7;
      id v13 = v7;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();

      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in CallRecordingViewModel.startCountdown()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in CallRecordingViewModel.startCountdown(), 0, 0);
}

uint64_t closure #1 in closure #1 in CallRecordingViewModel.startCountdown()()
{
  OUTLINED_FUNCTION_17_2();
  v0[3] = *(void *)(v0[2] + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue);
  type metadata accessor for MainActor();
  v0[4] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in CallRecordingViewModel.startCountdown(), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  CallRecordingViewModel.handleCountdownValue(_:)(v1);
  OUTLINED_FUNCTION_6();
  return v2();
}

void *CallRecordingViewModel.handleCountdownValue(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue;
  if (*(uint64_t *)(v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue) < 1)
  {
    if (one-time initialization token for recordingSession != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.recordingSession);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1C2F90000, v17, v18, "Countdown value is 0", v19, 2u);
      MEMORY[0x1C87760E0](v19, -1, -1);
    }

    if (*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_timeSink))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    uint64_t result = CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isActive);
    if (result)
    {
      uint64_t v20 = result;
      id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1840]), sel_initWithStyle_, 1);
      objc_msgSend(v21, sel_impactOccurred);
      uint64_t v22 = v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_service;
      swift_beginAccess();
      outlined init with copy of IDSLookupManager(v22, (uint64_t)v27);
      uint64_t v23 = v28;
      uint64_t v24 = v29;
      __swift_project_boxed_opaque_existential_1(v27, v28);
      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v26 = *(void (**)(void *, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v24 + 8);
      swift_retain();
      v26(v20, partial apply for closure #1 in CallRecordingViewModel.handleCountdownValue(_:), v25, v23, v24);
      swift_release_n();

      return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    }
  }
  else
  {
    if (one-time initialization token for recordingSession != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.recordingSession);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v27[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v30 = a1;
      uint64_t v10 = String.init<A>(reflecting:)();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v6, v7, "Countdown value: %s.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v9, -1, -1);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    uint64_t v12 = v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate;
    swift_beginAccess();
    uint64_t result = (void *)MEMORY[0x1C8776240](v12);
    if (result)
    {
      uint64_t v14 = *(void *)(v12 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void, void, uint64_t, uint64_t))(v14 + 8))(*(void *)(v2 + v3), 0, ObjectType, v14);
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

void closure #1 in CallRecordingViewModel.handleCountdownValue(_:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a2 + 16;
    if (one-time initialization token for recordingSession != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.recordingSession);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl(&dword_1C2F90000, v4, v5, "Handling error: start recording failed", v6, 2u);
      MEMORY[0x1C87760E0](v6, -1, -1);
    }

    swift_beginAccess();
    uint64_t v7 = MEMORY[0x1C8776240](v2);
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      uint64_t v9 = v7 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState;
      swift_beginAccess();
      *(_DWORD *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 4) = 1;
      CallRecordingViewModel.update()();
    }
  }
}

uint64_t CallRecordingViewModel.timeIntervalSinceRecordingStartedDate.getter()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v0 - 8);
  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v28 + 64);
  MEMORY[0x1F4188790](v0);
  id v27 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(self, sel_sharedInstance);
  id v6 = objc_msgSend(v5, sel_currentCalls);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
LABEL_11:
    __swift_storeEnumTagSinglePayload((uint64_t)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v29);
    goto LABEL_12;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v9 = 4;
  while (1)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v10 = (id)MEMORY[0x1C87744F0](v9 - 4, v7);
    }
    else {
      id v10 = *(id *)(v7 + 8 * v9);
    }
    unint64_t v11 = v10;
    uint64_t v12 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    if (objc_msgSend(v10, sel_isRecording)) {
      break;
    }

    ++v9;
    if (v12 == v8) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
  id v14 = objc_msgSend(v11, sel_recordingSession);

  if (!v14) {
    goto LABEL_11;
  }
  id v15 = objc_msgSend(v14, sel_recordingStartedDate);

  MEMORY[0x1F4188790](v16);
  uint64_t v17 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 1;
  }
  uint64_t v19 = v29;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, v18, 1, v29);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v17, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v19) != 1)
  {
    id v21 = v27;
    uint64_t v20 = v28;
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v27, v4, v19);
    MEMORY[0x1F4188790](v22);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    uint64_t v24 = v23;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v20 + 8);
    v25((char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    v25(v21, v19);
    return v24;
  }
LABEL_12:
  outlined destroy of SystemUpdateNotice?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return 0;
}

uint64_t CallRecordingViewModel.updateStopwatch()()
{
  *(double *)&uint64_t result = COERCE_DOUBLE(CallRecordingViewModel.timeIntervalSinceRecordingStartedDate.getter());
  if ((v2 & 1) == 0)
  {
    if ((~result & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        if (*(double *)&result < 9.22337204e18)
        {
          *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_stopwatchValue) = (uint64_t)*(double *)&result;
          uint64_t v3 = v0 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate;
          swift_beginAccess();
          *(double *)&uint64_t result = COERCE_DOUBLE(MEMORY[0x1C8776240](v3));
          if (*(double *)&result != 0.0)
          {
            uint64_t v4 = *(void *)(v3 + 8);
            swift_getObjectType();
            uint64_t v5 = CallRecordingViewModel.stopwatchFormattedValue.getter();
            (*(void (**)(uint64_t))(v4 + 8))(v5);
            swift_bridgeObjectRelease();
            *(double *)&uint64_t result = COERCE_DOUBLE(swift_unknownObjectRelease());
          }
          return result;
        }
LABEL_10:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

void closure #1 in CallRecordingViewModel.startStopwatch()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    CallRecordingViewModel.updateStopwatch()();
  }
}

void CallRecordingViewModel.openNotes()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for recordingSession != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.recordingSession);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, "Open notes", v6, 2u);
    MEMORY[0x1C87760E0](v6, -1, -1);
  }

  unint64_t v7 = CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isRecording);
  if (v7
    && (uint64_t v8 = v7, v9 = objc_msgSend(v7, sel_recordingSession), v8, v9))
  {
    uint64_t v64 = (uint64_t *)v3;
    uint64_t v10 = type metadata accessor for URL();
    int v66 = &v62;
    uint64_t v63 = *(void *)(v10 - 8);
    MEMORY[0x1F4188790](v10);
    uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v13 = (uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_service;
    swift_beginAccess();
    outlined init with copy of IDSLookupManager(v13, (uint64_t)&v68);
    uint64_t v14 = v70;
    uint64_t v15 = v71;
    __swift_project_boxed_opaque_existential_1(&v68, v70);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
    MEMORY[0x1F4188790](v16 - 8);
    unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v19 = *(void (**)(id, uint64_t, uint64_t))(v15 + 24);
    id v65 = v9;
    v19(v9, v14, v15);
    if (__swift_getEnumTagSinglePayload((uint64_t)&v62 - v18, 1, v10) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v62 - v18, &demangling cache variable for type metadata for URL?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
LABEL_17:
      id v37 = v65;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v20, v38))
      {

        return;
      }
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      int v66 = (uint64_t *)swift_slowAlloc();
      uint64_t v68 = (uint64_t)v66;
      *(_DWORD *)uint64_t v39 = 136315138;
      id v65 = v39 + 4;
      uint64_t v40 = type metadata accessor for UUID();
      uint64_t v64 = &v62;
      uint64_t v41 = *(void *)(v40 - 8);
      MEMORY[0x1F4188790](v40);
      uint64_t v43 = (char *)&v62 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v44 = objc_msgSend(v37, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      _sSo20NSNotificationCenterC10FoundationE9PublisherVAE7CombineAdCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB98]);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v47 = v46;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v20, v38, "Attempting to open notes. Url for recording session %s is nil.", v39, 0xCu);
      int v48 = v66;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v48, -1, -1);
      MEMORY[0x1C87760E0](v39, -1, -1);

      goto LABEL_22;
    }
    uint64_t v33 = v63;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v12, (char *)&v62 - v18, v10);
    uint64_t v34 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    MEMORY[0x1F4188790](v34);
    v35._uint64_t countAndFlagsBits = URL.absoluteString.getter();
    uint64_t v68 = 0x656C69626F6DLL;
    unint64_t v69 = 0xE600000000000000;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = v33;
    if (__swift_getEnumTagSinglePayload((uint64_t)&v62 - v18, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
      outlined destroy of SystemUpdateNotice?((uint64_t)&v62 - v18, &demangling cache variable for type metadata for URL?);
      goto LABEL_17;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)&v62 - v18, &demangling cache variable for type metadata for URL?);
    long long v49 = self;
    id v50 = objc_msgSend(v49, sel_sharedApplication);
    URL._bridgeToObjectiveC()(v51);
    long long v53 = v52;
    unsigned int v54 = objc_msgSend(v50, sel_canOpenURL_, v52);

    if (v54)
    {
      id v55 = objc_msgSend(v49, sel_sharedApplication);
      URL._bridgeToObjectiveC()(v56);
      id v58 = v57;
      objc_msgSend(v55, sel_openURL_withCompletionHandler_, v57, 0);
    }
    else
    {
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl(&dword_1C2F90000, v59, v60, "Cannot open url", v61, 2u);
        MEMORY[0x1C87760E0](v61, -1, -1);
      }
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v10);
  }
  else
  {
    int v66 = v1;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v72[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v24 = CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isRecording);
      if (v24)
      {
        uint64_t v25 = v24;
        id v26 = objc_msgSend(v24, sel_callUUID);

        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;

        uint64_t v68 = v27;
        unint64_t v69 = v29;
        uint64_t v30 = String.init<A>(reflecting:)();
        unint64_t v32 = v31;
      }
      else
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v30 = 7104878;
      }
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v20, v21, "Attempting to open notes. Not recording session for recordedCall %s.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v23, -1, -1);
      MEMORY[0x1C87760E0](v22, -1, -1);
LABEL_22:

      return;
    }
  }
}

void *CallRecordingViewModel.activeCall.getter(SEL *a1)
{
  id v2 = objc_msgSend(self, sel_sharedInstance);
  id v3 = objc_msgSend(v2, sel_currentCalls);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v6 - 4, v4) : *(id *)(v4 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      if ([v7 *a1])
      {
        swift_bridgeObjectRelease_n();
        return v8;
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

void *CallRecordingViewModel.waveformViewModel.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void CallRecordingViewModel.waveformViewModel.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_waveformViewModel);
  OUTLINED_FUNCTION_11_0();
  unint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*CallRecordingViewModel.waveformViewModel.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t closure #1 in CallRecordingViewModel.observeAudioSpectrum()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[Float]>.Publisher>);
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[23] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in CallRecordingViewModel.observeAudioSpectrum(), v8, v7);
}

uint64_t closure #1 in CallRecordingViewModel.observeAudioSpectrum()()
{
  swift_release();
  uint64_t v1 = CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isActive);
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)(v0 + 128);
    unint64_t v4 = self;
    id v5 = v2;
    id v6 = objc_msgSend(v4, sel_sharedInstance);
    id v7 = objc_msgSend(self, sel_defaultCenter);
    id v8 = objc_allocWithZone((Class)type metadata accessor for AudioPowerSpectrumViewModel());
    AudioPowerSpectrumViewModel.init(call:callCenter:notificationCenter:)();
    uint64_t v10 = v9;
    uint64_t v11 = (void **)(v3 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_waveformViewModel);
    OUTLINED_FUNCTION_11_0();
    uint64_t v12 = *v11;
    *uint64_t v11 = v10;

    uint64_t v13 = *v11;
    if (*v11)
    {
      id v39 = v5;
      uint64_t v14 = *(void *)(v0 + 176);
      uint64_t v41 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 152);
      uint64_t v37 = *(void *)(v0 + 160);
      uint64_t v16 = *(void *)(v0 + 136);
      uint64_t v17 = *(void *)(v0 + 144);
      uint64_t v42 = *(void *)(v0 + 128);
      unint64_t v18 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x230);
      uint64_t v19 = v13;
      v18();
      uint64_t v40 = v19;
      OUTLINED_FUNCTION_5_18();
      (*(void (**)(void))(v20 + 264))();
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<[Float]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Float]>.Publisher);
      lazy protocol witness table accessor for type [Float] and conformance <A> [A]();
      Publisher<>.removeDuplicates()();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      OUTLINED_FUNCTION_20();
      swift_unknownObjectWeakInit();
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<[Float]>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[Float]>.Publisher>);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      os_log_type_t v21 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v21(v14, v37);
      OUTLINED_FUNCTION_6_1();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      OUTLINED_FUNCTION_5_18();
      (*(void (**)(void))(v22 + 312))();
      Publisher<>.removeDuplicates()();
      OUTLINED_FUNCTION_26_2();
      v23();
      OUTLINED_FUNCTION_20();
      swift_unknownObjectWeakInit();
      Publisher<>.sink(receiveValue:)();
      swift_release();
      v21(v14, v37);
      OUTLINED_FUNCTION_6_1();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
      OUTLINED_FUNCTION_5_3();
      swift_task_alloc();
      *(void *)(v0 + 112) = *(void *)(v42
                                        + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_animateUpdatesPassthrough);
      uint64_t v38 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
      OUTLINED_FUNCTION_5_3();
      uint64_t v25 = v24;
      uint64_t v26 = swift_task_alloc();
      swift_retain();
      static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)();
      *(void *)(v0 + 120) = objc_msgSend(self, sel_mainRunLoop);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
      OUTLINED_FUNCTION_8(v27);
      uint64_t v28 = swift_task_alloc();
      uint64_t v29 = type metadata accessor for NSRunLoop.SchedulerOptions();
      OUTLINED_FUNCTION_25_1(v28, v30, v31, v29);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
      Publisher.debounce<A>(for:scheduler:options:)();
      outlined destroy of SystemUpdateNotice?(v28, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v38);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = OUTLINED_FUNCTION_20();
      swift_unknownObjectWeakInit();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = partial apply for closure #3 in closure #1 in CallRecordingViewModel.observeAudioSpectrum();
      *(void *)(v33 + 24) = v32;
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop> and conformance Publishers.Debounce<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      OUTLINED_FUNCTION_26_2();
      v34();
      id v5 = v39;
      swift_task_dealloc();
      OUTLINED_FUNCTION_6_1();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v35();
}

uint64_t closure #1 in closure #1 in CallRecordingViewModel.observeAudioSpectrum()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v2);
  if (result)
  {
    unint64_t v4 = (void *)result;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    Subject<>.send()();

    return swift_release();
  }
  return result;
}

void closure #3 in closure #1 in CallRecordingViewModel.observeAudioSpectrum()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState;
    swift_beginAccess();
    if ((*(unsigned char *)(v4 + 4) & 1) == 0 && *(_DWORD *)v4 == 3)
    {
      id v5 = &v3[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_waveformViewModel];
      swift_beginAccess();
      id v6 = *(void **)v5;
      if (*(void *)v5)
      {
        id v7 = (void *)MEMORY[0x1E4FBC8C8];
        id v8 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x120);
        uint64_t v9 = v6;
        uint64_t v10 = v8();

        uint64_t v11 = *(void **)v5;
        if (*(void *)v5)
        {
          uint64_t v12 = *(uint64_t (**)(void))((*v7 & *v11) + 0xF0);
          uint64_t v13 = v11;
          uint64_t v14 = v12();

          uint64_t v15 = &v3[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate];
          swift_beginAccess();
          if (MEMORY[0x1C8776240](v15))
          {
            uint64_t v16 = *((void *)v15 + 1);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(v10, v14, ObjectType, v16);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          return;
        }
        swift_bridgeObjectRelease();
      }
    }
  }
}

void *CallRecordingViewModel.disclosingCall.getter()
{
  uint64_t result = CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isActive);
  if (result)
  {
    uint64_t v1 = result;
    id v2 = objc_msgSend(result, sel_recordingSession);

    if (v2 && (unsigned int v3 = objc_msgSend(v2, sel_recordingState), v2, v3 == 2)) {
      return CallRecordingViewModel.activeCall.getter((SEL *)&selRef_isActive);
    }
    else {
      return 0;
    }
  }
  return result;
}

void closure #1 in CallRecordingViewModel.stopRecording()(uint64_t a1)
{
  if (a1)
  {
    if (one-time initialization token for recordingSession != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.recordingSession);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      unsigned int v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v3 = 0;
      _os_log_impl(&dword_1C2F90000, oslog, v2, "Handling error: stop recording failed", v3, 2u);
      MEMORY[0x1C87760E0](v3, -1, -1);
    }
  }
}

id CallRecordingViewModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CallRecordingViewModel.init()()
{
}

id CallRecordingViewModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for CallRecordingViewModelProtocol.recordingState.getter in conformance CallRecordingViewModel()
{
  unint64_t v0 = CallRecordingViewModel.recordingState.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

void protocol witness for CallRecordingViewModelProtocol.recordingState.setter in conformance CallRecordingViewModel(unint64_t a1)
{
}

void (*protocol witness for CallRecordingViewModelProtocol.recordingState.modify in conformance CallRecordingViewModel(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return CallRecordingViewModel.recordingState.modify;
}

void protocol witness for CallRecordingViewModelProtocol.startCountdown() in conformance CallRecordingViewModel()
{
}

void protocol witness for CallRecordingViewModelProtocol.startStopwatch() in conformance CallRecordingViewModel()
{
}

void protocol witness for CallRecordingViewModelProtocol.observeCountdownNotifications() in conformance CallRecordingViewModel()
{
}

void protocol witness for CallRecordingViewModelProtocol.observeRecordingStateNotifications() in conformance CallRecordingViewModel()
{
}

Swift::Void __swiftcall CallRecordingViewModel.tapClose()()
{
}

Swift::Void __swiftcall CallRecordingViewModel.tapStopRecording()()
{
}

Swift::Void __swiftcall CallRecordingViewModel.tapContainer()()
{
}

uint64_t CallRecordingViewModel.tapClose()(const char *a1, uint64_t (*a2)(void))
{
  if (one-time initialization token for recordingSession != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.recordingSession);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, a1, v6, 2u);
    MEMORY[0x1C87760E0](v6, -1, -1);
  }

  return a2();
}

char *specialized CallRecordingViewModel.__allocating_init(service:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v12 = specialized CallRecordingViewModel.init(service:)((uint64_t)v9, v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v12;
}

uint64_t sub_1C3362D84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CallRecordingViewModel.presentedView.getter();
  *a1 = result;
  return result;
}

void sub_1C3362DB0()
{
}

char *specialized CallRecordingViewModel.init(service:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27[3] = a3;
  v27[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(void *)&a2[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_cancellables] = MEMORY[0x1E4FBC870];
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_animateUpdatesPassthrough;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  uint64_t v15 = a2;
  *(void *)&a2[v14] = PassthroughSubject.init()();
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_timeSink] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownValue] = 3;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_avAudioPlayer] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = &v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState];
  *(_DWORD *)uint64_t v16 = 0;
  char v17 = 1;
  v16[4] = 1;
  unint64_t v18 = &v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel__presentedView];
  v25[0] = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallRecordingViewModel.PresentedView?);
  Published.init(initialValue:)();
  (*(void (**)(char *, unsigned char *, uint64_t))(v10 + 32))(v18, v12, v9);
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_stopwatchValue] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_waveformViewModel] = 0;
  outlined init with copy of IDSLookupManager((uint64_t)v27, (uint64_t)&v15[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_service]);

  v26.receiver = v15;
  v26.super_class = ObjectType;
  uint64_t v19 = (char *)objc_msgSendSuper2(&v26, sel_init);
  CallRecordingViewModel.observeCountdownNotifications()();
  CallRecordingViewModel.observeRecordingStateNotifications()();
  id v20 = objc_msgSend(self, sel_sharedInstance);
  id v21 = objc_msgSend(v20, sel_frontmostCall);

  if (v21)
  {
    id v22 = objc_msgSend(v21, sel_recordingSession);

    if (v22)
    {
      LODWORD(v21) = objc_msgSend(v22, sel_recordingState);

      char v17 = 0;
    }
    else
    {
      LODWORD(v21) = 0;
    }
  }
  uint64_t v23 = &v19[OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingState];
  swift_beginAccess();
  *(_DWORD *)uint64_t v23 = v21;
  void v23[4] = v17;
  CallRecordingViewModel.update()();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v19;
}

uint64_t sub_1C3363108()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallRecordingViewModel.observeCountdownNotifications()(uint64_t a1)
{
  closure #1 in CallRecordingViewModel.observeCountdownNotifications()(a1, v1);
}

void partial apply for closure #1 in CallRecordingViewModel.observeRecordingStateNotifications()(uint64_t a1)
{
  closure #1 in CallRecordingViewModel.observeRecordingStateNotifications()(a1, v1);
}

uint64_t _sSo20NSNotificationCenterC10FoundationE9PublisherVAE7CombineAdCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in CallRecordingViewModel.startStopwatch()(uint64_t a1)
{
  closure #1 in CallRecordingViewModel.startStopwatch()(a1, v1);
}

uint64_t partial apply for closure #1 in CallRecordingViewModel.reset()()
{
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  void *v1 = v2;
  v1[1] = partial apply for closure #1 in CallRecordingViewModel.reset();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in CallRecordingViewModel.reset()(v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in CallRecordingViewModel.startCountdown()(uint64_t a1)
{
  return closure #1 in CallRecordingViewModel.startCountdown()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type CallRecordingViewModel.PresentedView and conformance CallRecordingViewModel.PresentedView()
{
  unint64_t result = lazy protocol witness table cache variable for type CallRecordingViewModel.PresentedView and conformance CallRecordingViewModel.PresentedView;
  if (!lazy protocol witness table cache variable for type CallRecordingViewModel.PresentedView and conformance CallRecordingViewModel.PresentedView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallRecordingViewModel.PresentedView and conformance CallRecordingViewModel.PresentedView);
  }
  return result;
}

uint64_t sub_1C3363290@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_countdownDelegate, a2);
}

uint64_t sub_1C33632B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit22CallRecordingViewModel_recordingDelegate, a2);
}

uint64_t sub_1C33632E0()
{
  return CallRecordingViewModel.$presentedView.getter();
}

uint64_t ObjC metadata update function for CallRecordingViewModel()
{
  return type metadata accessor for CallRecordingViewModel();
}

uint64_t type metadata accessor for CallRecordingViewModel()
{
  uint64_t result = type metadata singleton initialization cache for CallRecordingViewModel;
  if (!type metadata singleton initialization cache for CallRecordingViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CallRecordingViewModel()
{
  type metadata accessor for Published<CallRecordingViewModel.PresentedView?>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CallRecordingViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallRecordingViewModel);
}

uint64_t dispatch thunk of CallRecordingViewModel.__allocating_init(service:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

void type metadata accessor for Published<CallRecordingViewModel.PresentedView?>()
{
  if (!lazy cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CallRecordingViewModel.PresentedView?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CallRecordingViewModel.PresentedView?>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CallRecordingViewModel.PresentedView(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C336359CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallRecordingViewModel.PresentedView()
{
  return &type metadata for CallRecordingViewModel.PresentedView;
}

uint64_t partial apply for closure #1 in closure #1 in CallRecordingViewModel.startCountdown()()
{
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  void *v1 = v2;
  v1[1] = partial apply for closure #1 in closure #1 in CallRecordingViewModel.startCountdown();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #1 in CallRecordingViewModel.startCountdown()(v3, v4, v5, v6);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

void partial apply for closure #1 in CallRecordingViewModel.handleCountdownValue(_:)(uint64_t a1)
{
  closure #1 in CallRecordingViewModel.handleCountdownValue(_:)(a1, v1);
}

uint64_t objectdestroy_6Tm()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CallRecordingViewModel.observeAudioSpectrum()()
{
  OUTLINED_FUNCTION_120();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  void *v1 = v2;
  v1[1] = partial apply for closure #1 in CallRecordingViewModel.reset();
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in CallRecordingViewModel.observeAudioSpectrum()(v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in CallRecordingViewModel.observeAudioSpectrum()(uint64_t a1)
{
  return closure #1 in closure #1 in CallRecordingViewModel.observeAudioSpectrum()(a1, v1);
}

void partial apply for closure #3 in closure #1 in CallRecordingViewModel.observeAudioSpectrum()()
{
  closure #3 in closure #1 in CallRecordingViewModel.observeAudioSpectrum()(v0);
}

uint64_t sub_1C336385C()
{
  swift_release();
  return swift_deallocObject();
}

BOOL CameraEffectState.isSupported.getter()
{
  return *v0 != 2;
}

uint64_t CameraEffectState.isEnabled.getter()
{
  return *v0 & 1;
}

void CameraEffectState.init(isSupported:isEnabled:)(unsigned char *a1@<X8>)
{
}

void CameraEffectState.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt8 v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
}

uint64_t static CameraEffectState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

Swift::Int CameraEffectState.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    OUTLINED_FUNCTION_1_112();
  }
  else
  {
    OUTLINED_FUNCTION_2_101();
    OUTLINED_FUNCTION_3_104(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CameraEffectState()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

void LocalParticipantCameraEffectsState.cinematicFramingEffectState.getter(unsigned char *a1@<X8>)
{
}

unsigned char *LocalParticipantCameraEffectsState.cinematicFramingEffectState.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*LocalParticipantCameraEffectsState.cinematicFramingEffectState.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void LocalParticipantCameraEffectsState.cameraBlurEffectState.getter(unsigned char *a1@<X8>)
{
}

unsigned char *LocalParticipantCameraEffectsState.cameraBlurEffectState.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*LocalParticipantCameraEffectsState.cameraBlurEffectState.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void LocalParticipantCameraEffectsState.studioLightEffectState.getter(unsigned char *a1@<X8>)
{
}

unsigned char *LocalParticipantCameraEffectsState.studioLightEffectState.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*LocalParticipantCameraEffectsState.studioLightEffectState.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void LocalParticipantCameraEffectsState.reactionsEffectState.getter(unsigned char *a1@<X8>)
{
}

unsigned char *LocalParticipantCameraEffectsState.reactionsEffectState.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 3) = *result;
  return result;
}

uint64_t (*LocalParticipantCameraEffectsState.reactionsEffectState.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void LocalParticipantCameraEffectsState.hash(into:)()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt8 v5 = v1 & 1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v5);
  }
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2 & 1);
  }
  if (v3 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3 & 1);
  }
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v4 & 1);
  }
}

uint64_t static LocalParticipantCameraEffectsState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  int v5 = a1[3];
  int v6 = *a2;
  int v7 = a2[1];
  int v8 = a2[2];
  int v9 = a2[3];
  if (v2 == 2)
  {
    if (v6 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v11 = (v2 & 1) == 0;
    if (v6 == 2 || ((v11 ^ v6) & 1) == 0) {
      return result;
    }
  }
  if (v3 == 2)
  {
    if (v7 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v12 = (v3 & 1) == 0;
    if (v7 == 2 || ((v12 ^ v7) & 1) == 0) {
      return result;
    }
  }
  if (v4 == 2)
  {
    if (v8 != 2) {
      return 0;
    }
LABEL_16:
    if (v5 == 2)
    {
      if (v9 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL v14 = (v5 & 1) == 0;
      if (v9 == 2 || ((v14 ^ v9) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  uint64_t result = 0;
  BOOL v13 = (v4 & 1) == 0;
  if (v8 != 2 && ((v13 ^ v8) & 1) != 0) {
    goto LABEL_16;
  }
  return result;
}

Swift::Int LocalParticipantCameraEffectsState.hashValue.getter()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    OUTLINED_FUNCTION_1_112();
  }
  else
  {
    OUTLINED_FUNCTION_2_101();
    OUTLINED_FUNCTION_3_104(v5, v6, v7, v8, v9, v10, v11, v12, v38, v39);
  }
  if (v2 == 2)
  {
    OUTLINED_FUNCTION_1_112();
  }
  else
  {
    OUTLINED_FUNCTION_2_101();
    OUTLINED_FUNCTION_3_104(v13, v14, v15, v16, v17, v18, v19, v20, v38, v39);
  }
  if (v3 == 2)
  {
    OUTLINED_FUNCTION_1_112();
  }
  else
  {
    OUTLINED_FUNCTION_2_101();
    OUTLINED_FUNCTION_3_104(v21, v22, v23, v24, v25, v26, v27, v28, v38, v39);
  }
  if (v4 == 2)
  {
    OUTLINED_FUNCTION_1_112();
  }
  else
  {
    OUTLINED_FUNCTION_2_101();
    OUTLINED_FUNCTION_3_104(v29, v30, v31, v32, v33, v34, v35, v36, v38, v39);
  }
  return Hasher._finalize()();
}

unsigned char *LocalParticipantCameraEffectsState.init(cinematicFramingEffectState:cameraBlurEffectState:studioLightEffectState:reactionsEffectState:)@<X0>(unsigned char *result@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, unsigned char *a5@<X8>)
{
  char v5 = *a2;
  char v6 = *a3;
  char v7 = *a4;
  *a5 = *result;
  a5[1] = v5;
  a5[2] = v6;
  a5[3] = v7;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalParticipantCameraEffectsState()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2 & 1);
  }
  if (v3 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3 & 1);
  }
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v4 & 1);
  }
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CameraEffectState and conformance CameraEffectState()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraEffectState and conformance CameraEffectState;
  if (!lazy protocol witness table cache variable for type CameraEffectState and conformance CameraEffectState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraEffectState and conformance CameraEffectState);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CameraEffectState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C3363FE8);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for CameraEffectState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1C33640D0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for CameraEffectState(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraEffectState()
{
  return &type metadata for CameraEffectState;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LocalParticipantCameraEffectsState(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && a1[4])
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *a1;
      if (v3 >= 2) {
        int v2 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
      }
      else {
        int v2 = -2;
      }
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalParticipantCameraEffectsState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalParticipantCameraEffectsState()
{
  return &type metadata for LocalParticipantCameraEffectsState;
}

uint64_t key path getter for DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay : DisplayLayerVisibilityObserver@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay : DisplayLayerVisibilityObserver()
{
  return DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay.setter();
}

uint64_t DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1C33642C0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C3364310()
{
  return DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay.setter();
}

uint64_t DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay.setter()
{
  return static Published.subscript.setter();
}

uint64_t key path setter for DisplayLayerVisibilityObserver.$isHidingLayersFromClonedDisplay : DisplayLayerVisibilityObserver(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  MEMORY[0x1F4188790](v2);
  int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return DisplayLayerVisibilityObserver.$isHidingLayersFromClonedDisplay.setter((uint64_t)v4);
}

uint64_t DisplayLayerVisibilityObserver.$isHidingLayersFromClonedDisplay.getter()
{
  return swift_endAccess();
}

uint64_t DisplayLayerVisibilityObserver.$isHidingLayersFromClonedDisplay.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 - v6, a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t DisplayLayerVisibilityObserver.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  DisplayLayerVisibilityObserver.init()();
  return v0;
}

uint64_t DisplayLayerVisibilityObserver.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver__isHidingLayersFromClonedDisplay;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, v8, v2);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_display) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_screenShareAttributes) = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  int v10 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingInteractionController.shared)
                                       + 0x1C8);
  uint64_t v11 = swift_retain();
  v10(v11);
  swift_release();
  return v1;
}

Swift::Void __swiftcall DisplayLayerVisibilityObserver.checkHiddenLayers()()
{
  id v1 = objc_msgSend(self, sel_displays);
  v37[2] = MEMORY[0x1E4FBC840] + 8;
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v38 = v0;
  if (!v3)
  {
LABEL_27:
    long long aBlock = 0u;
    long long v44 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v4 = v2 + 32;
  uint64_t v40 = OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_screenShareAttributes;
  v37[1] = v2;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v4, (uint64_t)v48);
    outlined init with copy of Any((uint64_t)v48, (uint64_t)&aBlock);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CADisplay);
    if (swift_dynamicCast())
    {
      uint64_t v5 = outlined bridged method (ob) of @objc CADisplay.uniqueId.getter(v47);
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void **)(v0 + v40);
    if (v8)
    {
      uint64_t v42 = v5;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v41 = v37;
      uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
      MEMORY[0x1F4188790](v9 - 8);
      unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      int v12 = (char *)v37 - v11;
      id v13 = objc_msgSend(v8, sel_windowUUID);
      if (MEMORY[0x1F4188790](v13))
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v14 = type metadata accessor for UUID();
        int v15 = (char *)v37 - v11;
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v14 = type metadata accessor for UUID();
        int v15 = (char *)v37 - v11;
        uint64_t v16 = 1;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v15, v16, 1, v14);
      outlined init with take of UUID?((uint64_t)v37 - v11, (uint64_t)v37 - v11);
      type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)v37 - v11, 1, v14))
      {
        outlined destroy of UUID?((uint64_t)v37 - v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v17 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        char v39 = v37;
        OUTLINED_FUNCTION_5_3();
        uint64_t v20 = v19;
        MEMORY[0x1F4188790](v21);
        OUTLINED_FUNCTION_21();
        uint64_t v24 = v23 - v22;
        (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v23 - v22, v12, v14);
        outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v17 = UUID.uuidString.getter();
        uint64_t v18 = v25;
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v14);
        uint64_t v0 = v38;
      }
      uint64_t v5 = v42;
      if (!v7)
      {
LABEL_10:
        if (!v18) {
          goto LABEL_30;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if (!v7) {
        goto LABEL_10;
      }
    }
    if (!v18) {
      goto LABEL_24;
    }
    if (v5 == v17 && v7 == v18) {
      break;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_30;
    }
LABEL_25:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    v4 += 32;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  outlined init with take of Any(v48, &aBlock);
  swift_bridgeObjectRelease();
LABEL_31:
  if (*((void *)&v44 + 1))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CADisplay);
    int v28 = swift_dynamicCast();
    uint64_t v29 = *(void *)&v48[0];
    if (!v28) {
      uint64_t v29 = 0;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&aBlock, &demangling cache variable for type metadata for Any?);
    uint64_t v29 = 0;
  }
  uint64_t v30 = OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_display;
  uint64_t v31 = v38;
  int v32 = *(void **)(v38 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_display);
  *(void *)(v38 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_display) = v29;

  int v33 = *(void **)(v31 + v30);
  if (v33)
  {
    uint64_t v34 = swift_allocObject();
    swift_weakInit();
    uint64_t v45 = partial apply for closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers();
    uint64_t v46 = v34;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v44 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *((void *)&v44 + 1) = &block_descriptor_59;
    int v35 = _Block_copy(&aBlock);
    id v36 = v33;
    swift_release();
    objc_msgSend(v36, sel_setDisallowedLayersCallback_, v35);
    _Block_release(v35);
  }
}

uint64_t closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers()(char a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v4 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers();
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_19_1;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C8773BA0](0, v10, v14, v6);
  _Block_release(v6);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t closure #1 in closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers()()
{
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.screenSharing);
  swift_retain_n();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v9[0] = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      type metadata accessor for DisplayLayerVisibilityObserver();
      uint64_t v5 = String.init<A>(reflecting:)();
      unint64_t v7 = v6;
    }
    else
    {
      unint64_t v7 = 0xE300000000000000;
      uint64_t v5 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v1, v2, "%s Display callback for containing layers inhibited from cloning: %{BOOL}d", (uint8_t *)v3, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v4, -1, -1);
    MEMORY[0x1C87760E0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay.setter();
    return swift_release();
  }
  return result;
}

uint64_t DisplayLayerVisibilityObserver.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver__isHidingLayersFromClonedDisplay;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);

  return v0;
}

uint64_t DisplayLayerVisibilityObserver.__deallocating_deinit()
{
  DisplayLayerVisibilityObserver.deinit();
  return swift_deallocClassInstance();
}

void DisplayLayerVisibilityObserver.screenSharingStateMonitor(_:didUpdateScreenSharingBroadcastingState:)()
{
  uint64_t v1 = v0;
  v57[1] = *MEMORY[0x1E4F143B8];
  type metadata accessor for ScreenSharingStateMonitor();
  uint64_t v2 = (void *)swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x128);
    uint64_t v4 = swift_unknownObjectRetain();
    uint64_t v5 = (void *)v3(v4);
    if (v5)
    {
      unint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_screenShareAttributes);
      uint64_t v8 = OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_screenShareAttributes;
      uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_screenShareAttributes);
      *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_screenShareAttributes) = v7;

      if (one-time initialization token for screenSharing != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Log.screenSharing);
      swift_retain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        v57[0] = v55;
        *(_DWORD *)uint64_t v13 = 136315394;
        type metadata accessor for DisplayLayerVisibilityObserver();
        swift_retain();
        uint64_t v14 = String.init<A>(reflecting:)();
        uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v57);
        OUTLINED_FUNCTION_2_102(v16, v17, v18, v13 + 12, v19, v20, v21, v22, v50, v52, v55, v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v23 = swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2112;
        uint64_t v30 = *(void **)(v1 + v8);
        if (v30)
        {
          id v31 = v30;
          OUTLINED_FUNCTION_2_102((uint64_t)v31, v32, v33, v34, v35, v36, v37, v38, v51, v53, v56, (char)v30);
        }
        else
        {
          OUTLINED_FUNCTION_2_102(v23, v24, v25, v13 + 22, v26, v27, v28, v29, v51, v53, v56, 0);
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unsigned int v54 = v30;
        swift_release_n();
        _os_log_impl(&dword_1C2F90000, v11, v12, "%s DisplayLayerVisibilityObserver did update the current screenShareAttributes to: %@", (uint8_t *)v13, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        uint64_t v49 = swift_release_n();
      }
      (*(void (**)(uint64_t))(*(void *)v1 + 208))(v49);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.conversationKit);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        int v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v48 = 0;
        _os_log_impl(&dword_1C2F90000, v46, v47, "Couldn't find active call, not updating screen sharing view.", v48, 2u);
        OUTLINED_FUNCTION_3();
      }

      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationKit);
    swift_unknownObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v57[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_getObjectType();
      uint64_t v43 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v40, v41, "didUpdateScreenSharingBroadcastingState(_:) was unexpectedly passed a %s", v42, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t DisplayLayerVisibilityObserver.screenSharingInteractionController(_:didUpdateRemoteControlStatus:)()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30DisplayLayerVisibilityObserver_screenShareAttributes))
  {
    if (one-time initialization token for sharedMonitor != -1) {
      swift_once();
    }
    return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingStateMonitor.sharedMonitor)
                                              + 0x140))(v0);
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1C3365980()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers()(char a1)
{
  return closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers()(a1, v1);
}

uint64_t outlined bridged method (ob) of @objc CADisplay.uniqueId.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_uniqueId);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for DisplayLayerVisibilityObserver()
{
  uint64_t result = type metadata singleton initialization cache for DisplayLayerVisibilityObserver;
  if (!type metadata singleton initialization cache for DisplayLayerVisibilityObserver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3365A78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))();
}

uint64_t ObjC metadata update function for DisplayLayerVisibilityObserver()
{
  return type metadata accessor for DisplayLayerVisibilityObserver();
}

void type metadata completion function for DisplayLayerVisibilityObserver()
{
  type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for DisplayLayerVisibilityObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DisplayLayerVisibilityObserver);
}

uint64_t dispatch thunk of DisplayLayerVisibilityObserver.isHidingLayersFromClonedDisplay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of DisplayLayerVisibilityObserver.$isHidingLayersFromClonedDisplay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DisplayLayerVisibilityObserver.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of DisplayLayerVisibilityObserver.checkHiddenLayers()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_1C3365BFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers()()
{
  return closure #1 in closure #2 in DisplayLayerVisibilityObserver.checkHiddenLayers()();
}

void static PeoplePickerViewControllerProvider.makePeoplePickerViewController(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  char v13 = *a1;
  objc_allocWithZone((Class)type metadata accessor for PeoplePickerViewController());
  id v11 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  os_log_type_t v12 = a3;
  PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(&v13, a2, a3, a4, a5, a6);
}

ValueMetadata *type metadata accessor for PeoplePickerViewControllerProvider()
{
  return &type metadata for PeoplePickerViewControllerProvider;
}

BOOL static CallScreeningTrackingState.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = a1[5];
  uint64_t v6 = a2[5];
  return specialized static CKStateMachineContainer.== infix(_:_:)(v5, v6);
}

uint64_t CallScreeningTrackingState.init(prevState:callUUID:trackingService:canScreenCall:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, void *a6@<X8>)
{
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
  uint64_t v12 = swift_allocObject();
  uint64_t result = swift_weakInit();
  *a6 = a4;
  a6[1] = a5;
  a6[2] = a1;
  a6[3] = a2;
  a6[4] = a3;
  a6[5] = v12;
  return result;
}

uint64_t CallScreeningTrackingService.deinit()
{
  return v0;
}

uint64_t CallScreeningTrackingService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CallScreeningTrackingService.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t CallScreeningTrackingService.init()()
{
  return v0;
}

BOOL static CallScreeningTrackingStateResult.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CallScreeningTrackingStateResult.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int CallScreeningTrackingStateResult.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CallScreeningTrackingStateResult(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CallScreeningTrackingStateResult.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CallScreeningTrackingStateResult()
{
  return CallScreeningTrackingStateResult.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CallScreeningTrackingStateResult(uint64_t a1)
{
  CallScreeningTrackingStateResult.hash(into:)(a1, *v1);
}

uint64_t CallScreeningTrackingState.canScreenCall.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t CallScreeningTrackingState.callUUID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallScreeningTrackingState.stateMachineContainer.getter()
{
  return swift_retain();
}

uint64_t CallScreeningTrackingState.willExit(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_6_85();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = CallScreeningState.stateMachine.getter(a2, WitnessTable);
  if (result)
  {
    uint64_t v34 = v7;
    uint64_t v35 = v5;
    uint64_t v32 = v2[2];
    uint64_t v33 = result;
    uint64_t v13 = v2[3];
    uint64_t v14 = v2[4];
    (*(void (**)(void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 16));
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    swift_retain();
    uint64_t v36 = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      int v29 = v17;
      uint64_t v19 = v18;
      uint64_t v30 = swift_slowAlloc();
      v37[0] = v30;
      *(_DWORD *)uint64_t v19 = 136446466;
      v27[1] = v19 + 4;
      os_log_t v28 = v15;
      unint64_t v20 = CallScreeningTrackingState.description.getter();
      unint64_t v22 = v21;
      swift_release();
      id v31 = v10;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      *(_WORD *)(v19 + 12) = 2082;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
      unint64_t v23 = CallScreening.State.description.getter();
      unint64_t v25 = v24;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      os_log_t v26 = v28;
      _os_log_impl(&dword_1C2F90000, v28, (os_log_type_t)v29, "%{public}s Exiting to %{public}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v35);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v35);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 96))(v32, v36);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CallScreeningTrackingState.enteredState()()
{
  id v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v31 = v5;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_6_85();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = CallScreeningState.stateMachine.getter(v3, WitnessTable);
  if (v10)
  {
    uint64_t v29 = v1[2];
    uint64_t v30 = v10;
    uint64_t v11 = v1[3];
    uint64_t v12 = v1[4];
    uint64_t v13 = v1[5];
    (*(void (**)(void))(*(void *)(v3 + 24) + 16))(*(void *)(v3 + 16));
    swift_retain();
    uint64_t v28 = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v27 = v13;
    swift_retain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      os_log_t v24 = v14;
      int v17 = (uint8_t *)v16;
      uint64_t v25 = swift_slowAlloc();
      *(void *)&v32[0] = v25;
      *(_DWORD *)int v17 = 136446210;
      uint64_t v26 = v4;
      unint64_t v18 = CallScreeningTrackingState.description.getter();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v20 = v28;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      os_log_t v21 = v24;
      _os_log_impl(&dword_1C2F90000, v24, v15, "EnteredState %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v26);
    }
    else
    {
      swift_release();
      uint64_t v20 = v28;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v4);
    }
    long long v22 = v2[1];
    v32[0] = *v2;
    v32[1] = v22;
    v32[2] = v2[2];
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)v12 + 88))(v32, v29, v20);
    swift_unknownObjectRelease();
  }
}

uint64_t CallScreeningTrackingState.update(with:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[11] = v2;
  v1[12] = v0;
  v1[10] = v3;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CKStateMachineActor.shared;
  v1[13] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](CallScreeningTrackingState.update(with:), v4, 0);
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  long long v3;
  long long v4;
  uint64_t WitnessTable;
  uint64_t v6;
  long long *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  int *v24;
  void *v25;
  uint64_t (*v26)(void);
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);

  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(_OWORD **)(v0 + 96);
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = CallScreeningState.stateMachine.getter(v2, WitnessTable);
  *(void *)(v0 + 112) = v6;
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(long long **)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 80);
    *(void *)(v0 + 120) = *(void *)v7;
    *(void *)(v0 + 128) = *((void *)v7 + 1);
    *(_OWORD *)(v0 + 64) = v7[1];
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 136) = v10;
    uint64_t v11 = *(void *)(v8 + 16);
    *(void *)(v0 + 144) = v11;
    *(void *)(v10 + 16) = v11;
    uint64_t v12 = *(void *)(v8 + 24);
    *(void *)(v0 + 152) = v12;
    *(void *)(v10 + 24) = v12;
    uint64_t v13 = *v7;
    uint64_t v14 = v7[2];
    *(_OWORD *)(v10 + 48) = v7[1];
    *(_OWORD *)(v10 + 64) = v14;
    *(_OWORD *)(v10 + 32) = v13;
    os_log_type_t v15 = *(unsigned char *)(v9 + 33);
    *(unsigned char *)(v0 + 216) = v15;
    if (v15)
    {
      *(void *)(v0 + 160) = *(void *)(v9 + 16);
      *(void *)(v0 + 168) = *(void *)(v9 + 24);
      os_log_t v24 = *(int **)(v12 + 32);
      swift_retain();
      outlined retain of String(v0 + 64);
      uint64_t v27 = (char *)v24 + *v24;
      swift_retain();
      swift_retain();
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v25;
      *uint64_t v25 = v0;
      v25[1] = CallScreeningTrackingState.update(with:);
      __asm { BRAA            X9, X16 }
    }
    swift_retain();
    outlined retain of String(v0 + 64);
    int v17 = *(void *)(v9 + 16);
    uint64_t v16 = *(void *)(v9 + 24);
    unint64_t v18 = *(void *)(v0 + 64);
    unint64_t v19 = *(void *)(v0 + 72);
    swift_retain();
    swift_retain();
    uint64_t v20 = v17 == v18 && v16 == v19;
    if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v29 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 120) + **(int **)(v0 + 120));
      os_log_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v21;
      *os_log_t v21 = v0;
      v21[1] = CallScreeningTrackingState.update(with:);
      long long v22 = OUTLINED_FUNCTION_8_58();
      return v29(v22);
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_7_4();
  return v26();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 104);
  if (v0) {
    uint64_t v6 = CallScreeningTrackingState.update(with:);
  }
  else {
    uint64_t v6 = CallScreeningTrackingState.update(with:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  void *v0;
  BOOL v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = v0[20] == v0[8] && v0[21] == v0[9];
  if (v1 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))(v0[15] + *(int *)v0[15]);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[24] = v2;
    *uint64_t v2 = v0;
    v2[1] = CallScreeningTrackingState.update(with:);
    uint64_t v3 = OUTLINED_FUNCTION_8_58();
    return v6(v3);
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_7_4();
    return v5();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 104);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  *(unsigned char *)(v8 + 217) = v7;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CallScreeningTrackingState.update(with:), v4, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  if (*(unsigned char *)(v0 + 217) != 1 && (*(unsigned char *)(v0 + 216) & 1) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)(v0 + 152) + 32) + **(int **)(*(void *)(v0 + 152) + 32);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v1;
    void *v1 = v0;
    v1[1] = CallScreeningTrackingState.update(with:);
    __asm { BRAA            X9, X16 }
  }
  swift_release();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_7_4();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 104);
  if (v0) {
    uint64_t v6 = CallScreeningTrackingState.update(with:);
  }
  else {
    uint64_t v6 = CallScreeningTrackingState.update(with:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in CallScreeningTrackingState.update(with:)(long long *a1, uint64_t a2)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v6);
  if (v9 >> 61 == 2)
  {
    v9 &= 0x1FFFFFFFFFFFFFFFuLL;
    if (v7 == *(void *)(a2 + 16) && v8 == *(void *)(a2 + 24)) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v3 = 0;
    v9 &= 0x1FFFFFFFFFFFFFFFuLL;
  }
  lazy protocol witness table accessor for type CKStateMachineError and conformance CKStateMachineError();
  uint64_t v4 = (void *)swift_allocError();
  if (v3) {

  }
  else {
    swift_willThrow();
  }
}

uint64_t protocol witness for CallScreeningState.stateMachineContainer.getter in conformance CallScreeningTrackingState<A>()
{
  return swift_retain();
}

uint64_t protocol witness for CallScreeningState.willExit(to:) in conformance CallScreeningTrackingState<A>(void *a1, uint64_t a2)
{
  return CallScreeningTrackingState.willExit(to:)(a1, a2);
}

void protocol witness for CallScreeningState.enteredState() in conformance CallScreeningTrackingState<A>()
{
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningTrackingState<A>()
{
  long long v2 = v0[1];
  *(_OWORD *)(v1 + 16) = *v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = v0[2];
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v3;
  *char v3 = v1;
  v3[1] = protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningTrackingState<A>;
  return CallScreeningTrackingState.update(with:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_13_1();
  *long long v2 = v1;
  swift_task_dealloc();
  char v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

unint64_t CallScreeningTrackingState.description.getter()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._unint64_t object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000018;
}

uint64_t sub_1C33674D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallScreeningTrackingState.update(with:)(long long *a1)
{
  closure #1 in CallScreeningTrackingState.update(with:)(a1, v1 + 32);
}

unint64_t lazy protocol witness table accessor for type CallScreeningTrackingStateResult and conformance CallScreeningTrackingStateResult()
{
  unint64_t result = lazy protocol witness table cache variable for type CallScreeningTrackingStateResult and conformance CallScreeningTrackingStateResult;
  if (!lazy protocol witness table cache variable for type CallScreeningTrackingStateResult and conformance CallScreeningTrackingStateResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallScreeningTrackingStateResult and conformance CallScreeningTrackingStateResult);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CallScreeningTrackingState<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata completion function for CallScreeningTrackingService()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CallScreeningTrackingService()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CallScreeningTrackingService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallScreeningTrackingService);
}

uint64_t dispatch thunk of CallScreeningTrackingService.startTrackingCall(requester:callUUID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of CallScreeningTrackingService.stopTrackingCall(callUUID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of CallScreeningTrackingService.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for CallScreeningTrackingStateResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C336775CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallScreeningTrackingStateResult()
{
  return &type metadata for CallScreeningTrackingStateResult;
}

uint64_t destroy for CallScreeningTrackingState()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for CallScreeningTrackingState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CallScreeningTrackingState(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CallScreeningTrackingState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CallScreeningTrackingState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AttributedStrings.Notices.subjectContainer.unsafeMutableAddressor()
{
  return AttributedStrings.Notices.subjectContainer.unsafeMutableAddressor(&one-time initialization token for subjectContainer, (uint64_t)static AttributedStrings.Notices.subjectContainer);
}

uint64_t AttributedStrings.Notices.foregroundContainer.unsafeMutableAddressor()
{
  return AttributedStrings.Notices.subjectContainer.unsafeMutableAddressor(&one-time initialization token for foregroundContainer, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
}

uint64_t AttributedStrings.Notices.subjectContainer.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for AttributeContainer();
  return __swift_project_value_buffer(v3, a2);
}

id one-time initialization function for foregroundContainer()
{
  uint64_t v0 = type metadata accessor for AttributeContainer();
  __swift_allocate_value_buffer(v0, static AttributedStrings.Notices.foregroundContainer);
  __swift_project_value_buffer(v0, (uint64_t)static AttributedStrings.Notices.foregroundContainer);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  uint64_t v2 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB0700];
  uint64_t v3 = one-time initialization token for foregroundColor;
  id v4 = v2;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)static Colors.Notices.foregroundColor;
  uint64_t v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  uint64_t v7 = (void **)MEMORY[0x1E4FB06F8];
  *(void *)(inited + 40) = v5;
  uint64_t v8 = *v7;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = v8;
  unint64_t v9 = self;
  uint64_t v10 = *MEMORY[0x1E4FB2950];
  id v11 = v5;
  id v12 = v8;
  id result = objc_msgSend(v9, sel__preferredFontForTextStyle_variant_, v10, 264);
  if (result)
  {
    id v14 = result;
    *(void *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
    *(void *)(inited + 80) = v14;
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    Dictionary.init(dictionaryLiteral:)();
    return (id)AttributeContainer.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AttributedStrings.Notices.foregroundContainer.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttributedStrings.Notices.foregroundContainer.getter(&one-time initialization token for foregroundContainer, (uint64_t)static AttributedStrings.Notices.foregroundContainer, a1);
}

id one-time initialization function for subjectContainer()
{
  uint64_t v0 = type metadata accessor for AttributeContainer();
  __swift_allocate_value_buffer(v0, static AttributedStrings.Notices.subjectContainer);
  __swift_project_value_buffer(v0, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  uint64_t v2 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB0700];
  uint64_t v3 = one-time initialization token for subjectColor;
  id v4 = v2;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)static Colors.Notices.subjectColor;
  uint64_t v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  uint64_t v7 = (void **)MEMORY[0x1E4FB06F8];
  *(void *)(inited + 40) = v5;
  uint64_t v8 = *v7;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = v8;
  unint64_t v9 = self;
  uint64_t v10 = *MEMORY[0x1E4FB2950];
  id v11 = v5;
  id v12 = v8;
  id result = objc_msgSend(v9, sel__preferredFontForTextStyle_variant_, v10, 256);
  if (result)
  {
    id v14 = result;
    *(void *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
    *(void *)(inited + 80) = v14;
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    Dictionary.init(dictionaryLiteral:)();
    return (id)AttributeContainer.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AttributedStrings.Notices.subjectContainer.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttributedStrings.Notices.foregroundContainer.getter(&one-time initialization token for subjectContainer, (uint64_t)static AttributedStrings.Notices.subjectContainer, a1);
}

uint64_t static AttributedStrings.Notices.foregroundContainer.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for AttributeContainer();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

ValueMetadata *type metadata accessor for AttributedStrings()
{
  return &type metadata for AttributedStrings;
}

ValueMetadata *type metadata accessor for AttributedStrings.Notices()
{
  return &type metadata for AttributedStrings.Notices;
}

void *ParticipantMonogramViewLayout.__allocating_init(audioVisualizer:contactView:titleView:subtitleView:glowView:ringButton:)()
{
  OUTLINED_FUNCTION_1_113();
  swift_allocObject();
  id v0 = closure #1 in variable initialization expression of ParticipantMonogramViewLayout.bellIcon();
  return OUTLINED_FUNCTION_3_105((uint64_t)v0);
}

Swift::Void __swiftcall ParticipantMonogramViewLayout.layout(in:inRoster:)(__C::CGRect in, Swift::Bool inRoster)
{
  uint64_t v3 = v2;
  double height = in.size.height;
  double width = in.size.width;
  double y = in.origin.y;
  double x = in.origin.x;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shortSizeBoundary != -1) {
    swift_once();
  }
  double v13 = *(double *)&static Layout.ParticipantViews.shortSizeBoundary;
  if (one-time initialization token for microSizeBoundary != -1) {
    swift_once();
  }
  double v14 = *(double *)&static Layout.ParticipantViews.microSizeBoundary;
  double v15 = *(double *)(v2 + 56);
  double v119 = v15;
  if (inRoster)
  {
    unsigned int v16 = 0;
    unsigned int v17 = 0;
LABEL_18:
    double v25 = 0.0;
    goto LABEL_19;
  }
  id v18 = *(id *)(*(void *)&v15 + OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label);
  BOOL v19 = UILabel.isEmpty.getter();

  char v20 = 0;
  if (!v19 && v14 <= height) {
    char v20 = objc_msgSend(*(id *)&v119, sel_isHidden) ^ 1;
  }
  os_log_t v21 = *(char **)(v3 + 64);
  id v22 = *(id *)&v21[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label];
  BOOL v23 = UILabel.isEmpty.getter();

  unsigned int v17 = 0;
  if (!v23 && v13 <= height && v14 <= height) {
    unsigned int v17 = objc_msgSend(v21, sel_isHidden) ^ 1;
  }
  unsigned int v16 = objc_msgSend(*(id *)(v3 + 40), sel_isHidden) ^ 1;
  double v25 = 1.0;
  double v15 = v119;
  if ((v20 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_19:
  objc_msgSend(*(id *)&v15, sel_setAlpha_, v25);
  uint64_t v26 = *(void **)(v3 + 64);
  if (v17) {
    double v27 = 1.0;
  }
  else {
    double v27 = 0.0;
  }
  double v114 = *(double *)(v3 + 64);
  objc_msgSend(v26, sel_setAlpha_, v27);
  uint64_t v28 = *(void **)(v3 + 40);
  LODWORD(v112) = v16;
  if (v16) {
    double v29 = 1.0;
  }
  else {
    double v29 = 0.0;
  }
  double v115 = *(double *)&v28;
  objc_msgSend(v28, sel_setAlpha_, v29);
  double v30 = OUTLINED_FUNCTION_0_89();
  double v34 = ParticipantMonogramViewLayout.totalLabelHeight(in:isInRoster:)(inRoster, v30, v31, v32, v33);
  double v35 = OUTLINED_FUNCTION_0_89();
  double v40 = closure #1 in ParticipantMonogramViewLayout.layout(in:inRoster:)(v36, v14 > height, v3, v35, v37, v38, v39, v34);
  v121.origin.double x = OUTLINED_FUNCTION_0_89();
  CGFloat MidX = CGRectGetMidX(v121);
  CGFloat v118 = v40;
  double v42 = v40 * 0.5;
  double v43 = MidX - v40 * 0.5;
  unint64_t v44 = *(void (**)(uint64_t))(v10 + 104);
  uint64_t v45 = OUTLINED_FUNCTION_2_103();
  v44(v45);
  double v113 = *(double *)&v3;
  uint64_t v46 = *(void **)(v3 + 48);
  id v47 = objc_msgSend(v46, sel_traitCollection);
  objc_msgSend(v47, sel_displayScale);
  double v117 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v48, v43);

  uint64_t v49 = *(void (**)(uint64_t))(v10 + 8);
  uint64_t v50 = OUTLINED_FUNCTION_4_88();
  v49(v50);
  v122.origin.double x = OUTLINED_FUNCTION_0_89();
  double v51 = CGRectGetMidY(v122) - v42;
  uint64_t v52 = OUTLINED_FUNCTION_2_103();
  v44(v52);
  id v108 = v46;
  id v53 = objc_msgSend(v46, sel_traitCollection);
  objc_msgSend(v53, sel_displayScale);
  double v116 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v54, v51);

  uint64_t v55 = OUTLINED_FUNCTION_4_88();
  v49(v55);
  if (one-time initialization token for ringButton != -1) {
    swift_once();
  }
  objc_msgSend((id)static Fonts.ParticipantViews.ringButton, sel_lineHeight);
  double v57 = ceil(v56) + 16.0;
  double v58 = width * 0.25;
  if (width * 0.25 >= 50.0)
  {
    double v60 = v115;
    objc_msgSend(*(id *)&v115, sel_setImage_forState_, 0, 0, v58);
    id v64 = objc_msgSend(self, sel_conversationKit);
    v120._unint64_t object = (void *)0xE000000000000000;
    v65._unint64_t object = (void *)0x80000001C37A89F0;
    v65._uint64_t countAndFlagsBits = 0xD000000000000015;
    v66.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v66.value._unint64_t object = (void *)0xEF74694B6E6F6974;
    v67._uint64_t countAndFlagsBits = 0;
    v67._unint64_t object = (void *)0xE000000000000000;
    v120._uint64_t countAndFlagsBits = 0;
    Swift::String v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v65, v66, (NSBundle)v64, v67, v120);

    outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(v68._countAndFlagsBits, (uint64_t)v68._object, 0, *(void **)&v60);
    CGFloat v61 = 50.0;
    double v62 = v119;
    uint64_t v59 = *(void *)&v113;
  }
  else
  {
    uint64_t v59 = *(void *)&v113;
    double v60 = v115;
    objc_msgSend(*(id *)&v115, sel_setImage_forState_, *(void *)(*(void *)&v113 + 32), 0, v58);
    outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(0, 0xE000000000000000, 0, *(void **)&v60);
    CGFloat v61 = v57;
    double v62 = v119;
  }
  double v63 = v114;
  int v69 = LODWORD(v112);
  objc_msgSend(*(id *)&v60, sel_sizeToFit);
  double v106 = v34;
  double v70 = closure #2 in ParticipantMonogramViewLayout.layout(in:inRoster:)(v59, v61, v57, x, y, width);
  double v114 = v71;
  double v115 = v70;
  double v112 = v73;
  double v113 = v72;
  double v74 = width + -13.0;
  if (v69)
  {
    type metadata accessor for AppUtilities();
    if (static AppUtilities.isRTL.getter())
    {
      v123.origin.double y = v114;
      v123.origin.double x = v115;
      v123.size.double height = v112;
      v123.size.double width = v113;
      double v75 = CGRectGetMaxX(v123) + 13.0;
    }
    else
    {
      v124.origin.double y = v114;
      v124.origin.double x = v115;
      v124.size.double height = v112;
      v124.size.double width = v113;
      double v77 = width - CGRectGetMinX(v124);
      objc_msgSend(*(id *)&v60, sel_alignmentRectInsets);
      double v75 = v77 + v78;
    }
    double v76 = v74 - v75;
  }
  else
  {
    double v76 = v74 + -13.0;
  }
  double v119 = v76;
  ParticipantViewLabelContainerView.intrinsicContentSize.getter();
  CGFloat v80 = v79;
  type metadata accessor for AppUtilities();
  BOOL v81 = static AppUtilities.isRTL.getter();
  CGFloat v110 = y;
  double v111 = v80;
  CGFloat v109 = x;
  double v107 = v57;
  if (v81)
  {
    v125.origin.double x = 13.0;
    v125.origin.double y = 0.0;
    v125.size.double width = v119;
    v125.size.double height = v80;
    double v82 = v74 - CGRectGetWidth(v125);
    if ((v69 & 1) == 0)
    {
LABEL_38:
      v126.origin.double x = OUTLINED_FUNCTION_0_89();
      double v83 = CGRectGetHeight(v126);
      CGFloat v85 = v116;
      CGFloat v84 = v117;
      v127.origin.double x = v117;
      v127.origin.double y = v116;
      CGFloat v86 = v118;
      v127.size.double width = v118;
      v127.size.double height = v118;
      double v87 = ceil((v83 - CGRectGetMaxY(v127) - v106) * 0.5);
      v128.origin.double x = v84;
      v128.origin.double y = v85;
      v128.size.double width = v86;
      v128.size.double height = v86;
      v129.origin.double y = CGRectGetMaxY(v128) + v87;
      v129.origin.double x = v82;
      CGFloat v105 = v129.origin.y;
      v129.size.double width = v119;
      v129.size.double height = v111;
      double MaxY = CGRectGetMaxY(v129);
      goto LABEL_41;
    }
  }
  else
  {
    double v82 = 13.0;
    if (!v69) {
      goto LABEL_38;
    }
  }
  CGFloat v105 = height - v106 + -13.0;
  ParticipantViewLabelContainerView.intrinsicContentSize.getter();
  double MaxY = height - v89 + -13.0;
LABEL_41:
  ParticipantViewLabelContainerView.intrinsicContentSize.getter();
  CGFloat v91 = v90;
  double v92 = 13.0;
  if (static AppUtilities.isRTL.getter())
  {
    v130.origin.double x = 13.0;
    v130.origin.double y = MaxY;
    v130.size.double width = v119;
    v130.size.double height = v91;
    double v92 = v74 - CGRectGetWidth(v130);
  }
  CGFloat v103 = v91;
  double v104 = MaxY;
  double v106 = v82;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (height >= width) {
    double v93 = width;
  }
  else {
    double v93 = height;
  }
  long long v94 = (double (**)(void))(*(void *)static Defaults.shared + 400);
  uint64_t v95 = *v94;
  CGFloat v96 = floor(v93 * (1.0 - (*v94)()));
  CGFloat v97 = floor(v93 * (1.0 - v95()));
  v131.origin.double x = v109;
  v131.origin.double y = v110;
  v131.size.double width = width;
  v131.size.double height = height;
  CGRect v132 = CGRectInset(v131, v96, v97);
  double v98 = v132.origin.x;
  double v99 = v132.origin.y;
  double v100 = v132.size.width;
  double v101 = v132.size.height;
  OUTLINED_FUNCTION_5_93(v108, sel_setFrame_);
  OUTLINED_FUNCTION_5_93(*(id *)(v59 + 24), sel_setFrame_);
  objc_msgSend(*(id *)(v59 + 16), sel_setFrame_, v98, v99, v100, v101);
  double v102 = v119;
  objc_msgSend(*(id *)&v62, sel_setFrame_, v106, v105, v119, v111);
  objc_msgSend(*(id *)&v63, sel_setFrame_, v92, v104, v102, v103);
  objc_msgSend(*(id *)&v60, sel_setFrame_, v115, v114, v113, v112);
  objc_msgSend(*(id *)&v60, sel__setCornerRadius_, v107 * 0.5);
}

id closure #1 in variable initialization expression of ParticipantMonogramViewLayout.bellIcon()
{
  type metadata accessor for UIImage();
  id v0 = (void *)*MEMORY[0x1E4FB2998];
  uint64_t v7 = 0x6C69662E6C6C6562;
  unint64_t v8 = 0xE90000000000006CLL;
  uint64_t v9 = -1;
  uint64_t v10 = v0;
  LOWORD(v11) = 0;
  uint64_t v12 = 4;
  LOBYTE(v13) = 0;
  uint64_t v14 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)&v7);

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v3 = self;
    id v4 = v2;
    id v5 = objc_msgSend(v3, sel_whiteColor, v7, v8, v9, v10, v11, v12, v13, v14);
    id v2 = objc_msgSend(v4, sel_imageWithTintColor_renderingMode_, v5, 1);
  }
  return v2;
}

void *ParticipantMonogramViewLayout.init(audioVisualizer:contactView:titleView:subtitleView:glowView:ringButton:)()
{
  OUTLINED_FUNCTION_1_113();
  id v0 = closure #1 in variable initialization expression of ParticipantMonogramViewLayout.bellIcon();
  return OUTLINED_FUNCTION_3_105((uint64_t)v0);
}

BOOL UILabel.isEmpty.getter()
{
  uint64_t v1 = outlined bridged method (pb) of @objc UILabel.text.getter(v0);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = v1;
  unint64_t v4 = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
  }
  return v5 == 0;
}

double ParticipantMonogramViewLayout.totalLabelHeight(in:isInRoster:)(char a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = v5;
  if (one-time initialization token for shortSizeBoundary != -1) {
    swift_once();
  }
  double v9 = *(double *)&static Layout.ParticipantViews.shortSizeBoundary;
  if (one-time initialization token for microSizeBoundary != -1) {
    swift_once();
  }
  double v10 = 0.0;
  if ((a1 & 1) == 0 && *(double *)&static Layout.ParticipantViews.microSizeBoundary <= a5)
  {
    id v11 = objc_retain(*(id *)(*(void *)(v6 + 56)
                            + OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label));
    BOOL v12 = UILabel.isEmpty.getter();

    if (!v12)
    {
      ParticipantViewLabelContainerView.intrinsicContentSize.getter();
      double v10 = v13 + 0.0;
    }
    if (v9 <= a5)
    {
      id v14 = objc_retain(*(id *)(*(void *)(v6 + 64)
                              + OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label));
      BOOL v15 = UILabel.isEmpty.getter();

      if (!v15)
      {
        ParticipantViewLabelContainerView.intrinsicContentSize.getter();
        double v10 = v10 + v16;
      }
    }
  }
  return ceil(v10);
}

double closure #1 in ParticipantMonogramViewLayout.layout(in:inRoster:)(char a1, char a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unsigned int v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a7 >= a6) {
    double v18 = a6;
  }
  else {
    double v18 = a7;
  }
  if (a1)
  {
    double v19 = v18 * 0.55;
    double v20 = v18 + -28.0;
  }
  else
  {
    if (a7 - (a8 + a8) >= a6) {
      double v21 = a6;
    }
    else {
      double v21 = a7 - (a8 + a8);
    }
    if (a2)
    {
      double v19 = v18 * 0.55;
      double v22 = -20.0;
    }
    else
    {
      double v19 = v18 * 0.4;
      double v22 = -28.0;
    }
    double v20 = v21 + v22;
  }
  if (v20 >= v19) {
    double v20 = v19;
  }
  if (v20 <= 168.0) {
    double v23 = v20;
  }
  else {
    double v23 = 168.0;
  }
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4FBBEA8], v14);
  id v24 = objc_msgSend(*(id *)(a3 + 48), sel_traitCollection);
  objc_msgSend(v24, sel_displayScale);
  double v26 = CGFloat.rounded(_:toScale:)((uint64_t)v17, v25, v23);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v26;
}

double closure #2 in ParticipantMonogramViewLayout.layout(in:inRoster:)(uint64_t a1, CGFloat a2, CGFloat a3, double a4, double a5, double a6)
{
  double v9 = *(void **)(a1 + 40);
  objc_msgSend(v9, sel_frame);
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  type metadata accessor for AppUtilities();
  double v14 = 10.0;
  if (!static AppUtilities.isRTL.getter())
  {
    v18.origin.double x = v11;
    v18.origin.double y = v13;
    v18.size.double width = a2;
    v18.size.double height = a3;
    double v15 = a6 + -10.0 - CGRectGetWidth(v18);
    objc_msgSend(v9, sel_alignmentRectInsets);
    double v14 = v15 + v16;
  }
  objc_msgSend(v9, sel_alignmentRectInsets);
  objc_msgSend(v9, sel_alignmentRectInsets);
  return v14;
}

id *ParticipantMonogramViewLayout.deinit()
{
  return v0;
}

uint64_t ParticipantMonogramViewLayout.__deallocating_deinit()
{
  ParticipantMonogramViewLayout.deinit();
  return swift_deallocClassInstance();
}

uint64_t outlined bridged method (pb) of @objc UILabel.text.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_text);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for ParticipantMonogramViewLayout()
{
  return self;
}

uint64_t method lookup function for ParticipantMonogramViewLayout(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantMonogramViewLayout);
}

uint64_t dispatch thunk of ParticipantMonogramViewLayout.__allocating_init(audioVisualizer:contactView:titleView:subtitleView:glowView:ringButton:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t LetMeInCountdownViewModel.__allocating_init(service:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  LetMeInCountdownViewModel.init(service:)(a1);
  return v2;
}

Swift::Void __swiftcall LetMeInCountdownViewModel.resetCountdown()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.sidebar);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)swift_slowAlloc();
    _WORD *v5 = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "Reset let me in countdown.");
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  unint64_t v8 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_shouldShowCountdown);
  OUTLINED_FUNCTION_11_0();
  *unint64_t v8 = 1;
  type metadata accessor for ConversationControlsJoinCountdownActionController();
  swift_allocObject();
  uint64_t v9 = ConversationControlsJoinCountdownActionController.init()();
  LetMeInCountdownViewModel.countdownController.setter(v9);
}

uint64_t LetMeInCountdownViewModel.init(service:)(long long *a1)
{
  *(unsigned char *)(v1 + 16) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_currentVoucher;
  uint64_t v4 = type metadata accessor for CountdownVoucher(0);
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_shouldShowCountdown) = 1;
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel____lazy_storage___countdownController) = 0;
  outlined init with take of Notice(a1, v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service);
  return v1;
}

uint64_t LetMeInCountdownViewModel.willShowCountdown.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t (*LetMeInCountdownViewModel.controlType.getter())()
{
  return partial apply for implicit closure #2 in implicit closure #1 in LetMeInCountdownViewModel.controlType.getter;
}

uint64_t LetMeInCountdownViewModel.buildView()()
{
  uint64_t v1 = type metadata accessor for PlainButtonStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v31 = v1;
  uint64_t v32 = v2;
  MEMORY[0x1F4188790](v1);
  uint64_t v28 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<LetMeInCountdownView>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x1F4188790](v26);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v10 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  double v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout>);
  MEMORY[0x1F4188790](v29);
  double v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type LetMeInCountdownView and conformance LetMeInCountdownView();
  uint64_t v27 = v0;
  swift_retain();
  swift_retain();
  Button.init(action:label:)();
  swift_release();
  uint64_t v15 = static Color.clear.getter();
  char v16 = static Edge.Set.all.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v7, v4);
  unsigned int v17 = &v9[*(int *)(v26 + 36)];
  *(void *)unsigned int v17 = v15;
  v17[8] = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  CGRect v18 = v28;
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  uint64_t v19 = v31;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v19);
  outlined destroy of Conversation?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v20 = v30;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v30);
  double v21 = &v14[*(int *)(v29 + 36)];
  long long v22 = v34;
  *(_OWORD *)double v21 = v33;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v35;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  uint64_t v23 = AnyView.init<A>(_:)();
  swift_release();
  return v23;
}

uint64_t LetMeInCountdownViewModel.enabled(for:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((BYTE4(a1) & 0xE0) == 0x60 && (BYTE4(a1) == 96 ? (BOOL v5 = a2 == 3) : (BOOL v5 = 0), v5))
  {
    if (a3)
    {
      OUTLINED_FUNCTION_5_4();
      uint64_t v6 = *v3;
    }
    else
    {
      uint64_t v6 = 0;
    }
    OUTLINED_FUNCTION_11_0();
    *(unsigned char *)(v4 + 16) = v6;
    uint64_t v7 = (unsigned char *)(v4 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_shouldShowCountdown);
    OUTLINED_FUNCTION_11_0();
    unsigned char *v7 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_11_0();
    uint64_t v6 = 0;
    *(unsigned char *)(v4 + 16) = 0;
  }
  return v6;
}

Swift::Void __swiftcall LetMeInCountdownViewModel.onDisappear()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  uint64_t v4 = v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_currentVoucher;
  swift_beginAccess();
  outlined init with copy of CountdownVoucher?(v4, v1);
  uint64_t v5 = type metadata accessor for CountdownVoucher(0);
  LODWORD(v4) = __swift_getEnumTagSinglePayload(v1, 1, v5);
  outlined destroy of Conversation?(v1, &demangling cache variable for type metadata for CountdownVoucher?);
  if (v4 != 1) {
    LetMeInCountdownViewModel.cancelCountdown()();
  }
}

uint64_t LetMeInCountdownViewModel.cancelCountdown()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service + 24);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service), v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 160))(v4, v5);
  uint64_t v6 = *(void *)LetMeInCountdownViewModel.countdownController.getter();
  (*(void (**)(void))(v6 + 264))();
  swift_release();
  uint64_t v7 = type metadata accessor for CountdownVoucher(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v7);
  return LetMeInCountdownViewModel.currentVoucher.setter((uint64_t)v3);
}

Swift::Void __swiftcall LetMeInCountdownViewModel.skipCountdown()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.sidebar);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)swift_slowAlloc();
    _WORD *v5 = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "Skip let me in countdown.");
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  uint64_t v8 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_shouldShowCountdown);
  OUTLINED_FUNCTION_11_0();
  *uint64_t v8 = 0;
}

uint64_t LetMeInCountdownViewModel.countdownController.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel____lazy_storage___countdownController) = a1;
  return swift_release();
}

Swift::Void __swiftcall LetMeInCountdownViewModel.initializeCountdownView(with:fullValue:)(Swift::Double with, Swift::Double fullValue)
{
  if (MEMORY[0x1C8776240](v2 + 24))
  {
    OUTLINED_FUNCTION_3_14();
    v3();
  }
}

Swift::Void __swiftcall LetMeInCountdownViewModel.startCountdown()()
{
  if (MEMORY[0x1C8776240](v0 + 24))
  {
    OUTLINED_FUNCTION_3_14();
    v1();
  }
}

Swift::Void __swiftcall LetMeInCountdownViewModel.tick()()
{
  if (MEMORY[0x1C8776240](v0 + 24))
  {
    OUTLINED_FUNCTION_3_14();
    v1();
  }
}

Swift::Void __swiftcall LetMeInCountdownViewModel.countdownEnded()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  uint64_t v4 = *(void *)LetMeInCountdownViewModel.countdownController.getter();
  (*(void (**)(void))(v4 + 264))();
  swift_release();
  uint64_t v5 = type metadata accessor for CountdownVoucher(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  LetMeInCountdownViewModel.currentVoucher.setter(v1);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service + 24);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service), v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 144))(v6, v7);
}

uint64_t LetMeInCountdownViewModel.countdownController.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel____lazy_storage___countdownController;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel____lazy_storage___countdownController))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel____lazy_storage___countdownController);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for ConversationControlsJoinCountdownActionController();
    swift_allocObject();
    uint64_t v2 = ConversationControlsJoinCountdownActionController.init()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t LetMeInCountdownViewModel.currentVoucher.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_currentVoucher;
  swift_beginAccess();
  outlined init with copy of CountdownVoucher?(v6, (uint64_t)v5);
  swift_beginAccess();
  outlined assign with copy of CountdownVoucher?(a1, v6);
  swift_endAccess();
  LetMeInCountdownViewModel.currentVoucher.didset((uint64_t)v5);
  outlined destroy of Conversation?(a1, &demangling cache variable for type metadata for CountdownVoucher?);
  return outlined destroy of Conversation?((uint64_t)v5, &demangling cache variable for type metadata for CountdownVoucher?);
}

uint64_t LetMeInCountdownViewModel.setVoucher(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  outlined init with copy of CountdownVoucher(a1, v1);
  uint64_t v5 = type metadata accessor for CountdownVoucher(0);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v5);
  return LetMeInCountdownViewModel.currentVoucher.setter(v1);
}

uint64_t LetMeInCountdownViewModel.currentVoucher.didset(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CountdownVoucher(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CountdownVoucher?(a1, (uint64_t)v4);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1) {
    return outlined destroy of Conversation?((uint64_t)v4, &demangling cache variable for type metadata for CountdownVoucher?);
  }
  outlined init with take of CountdownVoucher((uint64_t)v4, (uint64_t)v7);
  uint64_t v9 = *(void *)LetMeInCountdownViewModel.countdownController.getter();
  (*(void (**)(char *))(v9 + 256))(v7);
  swift_release();
  return outlined destroy of CountdownVoucher((uint64_t)v7);
}

uint64_t LetMeInCountdownViewModel.countdownViewCreated(_:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  swift_unknownObjectWeakAssign();
  uint64_t v4 = LetMeInCountdownViewModel.countdownController.getter();
  (*(void (**)(uint64_t, _UNKNOWN **))(*(void *)v4 + 248))(v0, &protocol witness table for LetMeInCountdownViewModel);
  swift_release();
  uint64_t v5 = type metadata accessor for CountdownVoucher(0);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v5);
  return LetMeInCountdownViewModel.currentVoucher.setter(v1);
}

uint64_t LetMeInCountdownViewModel.shouldShowCountdown.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t closure #1 in LetMeInCountdownViewModel.buildView()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    LetMeInCountdownViewModel.cancelCountdown()();
    return swift_release();
  }
  return result;
}

uint64_t LetMeInCountdownViewModel.deinit()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of Conversation?(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_currentVoucher, &demangling cache variable for type metadata for CountdownVoucher?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC15ConversationKit25LetMeInCountdownViewModel_service);
  swift_release();
  return v0;
}

uint64_t LetMeInCountdownViewModel.__deallocating_deinit()
{
  LetMeInCountdownViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CallControlsInCallButtonViewModel.enabled(for:) in conformance LetMeInCountdownViewModel(uint64_t a1, uint64_t a2, char a3)
{
  return LetMeInCountdownViewModel.enabled(for:)(a1 & 0xFFFFFFFFFFLL, a2, a3) & 1;
}

uint64_t (*protocol witness for CallControlsButtonViewModel.controlType.getter in conformance LetMeInCountdownViewModel())()
{
  return partial apply for implicit closure #2 in implicit closure #1 in LetMeInCountdownViewModel.controlType.getter;
}

void protocol witness for CallControlsButtonViewModel.onDisappear() in conformance LetMeInCountdownViewModel()
{
}

void *LetMeInCountdownView.makeUIView(context:)()
{
  type metadata accessor for ConversationControlsJoinCallCountdownView();
  uint64_t v0 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  double v1 = static Layout.ConversationControls.values.getter((uint64_t)v5);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void, void, double))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))(v5[37], 0, v1);
  id v3 = objc_msgSend(self, sel_secondarySystemFillColor);
  (*(void (**)(id))((*v2 & *v0) + 0xB8))(v3);
  LetMeInCountdownViewModel.countdownViewCreated(_:)();
  return v0;
}

uint64_t LetMeInCountdownView.sizeThatFits(_:uiView:context:)()
{
  return 0x4042000000000000;
}

void *protocol witness for UIViewRepresentable.makeUIView(context:) in conformance LetMeInCountdownView()
{
  return LetMeInCountdownView.makeUIView(context:)();
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance LetMeInCountdownView(uint64_t a1)
{
  return TPNumberPadCharacter.rawValue.getter(a1);
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance LetMeInCountdownView()
{
  return LetMeInCountdownView.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LetMeInCountdownView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LetMeInCountdownView and conformance LetMeInCountdownView();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LetMeInCountdownView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LetMeInCountdownView and conformance LetMeInCountdownView();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance LetMeInCountdownView()
{
}

uint64_t outlined init with copy of CountdownVoucher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CountdownVoucher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for LetMeInCountdownViewModel()
{
  return type metadata accessor for LetMeInCountdownViewModel();
}

uint64_t type metadata accessor for LetMeInCountdownViewModel()
{
  uint64_t result = type metadata singleton initialization cache for LetMeInCountdownViewModel;
  if (!type metadata singleton initialization cache for LetMeInCountdownViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for LetMeInCountdownViewModel()
{
  type metadata accessor for CountdownVoucher?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LetMeInCountdownViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LetMeInCountdownViewModel);
}

uint64_t dispatch thunk of LetMeInCountdownViewModel.__allocating_init(service:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t outlined assign with copy of CountdownVoucher?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C336A578()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LetMeInCountdownViewModel.buildView()()
{
  return closure #1 in LetMeInCountdownViewModel.buildView()();
}

unint64_t lazy protocol witness table accessor for type LetMeInCountdownView and conformance LetMeInCountdownView()
{
  unint64_t result = lazy protocol witness table cache variable for type LetMeInCountdownView and conformance LetMeInCountdownView;
  if (!lazy protocol witness table cache variable for type LetMeInCountdownView and conformance LetMeInCountdownView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LetMeInCountdownView and conformance LetMeInCountdownView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LetMeInCountdownView and conformance LetMeInCountdownView;
  if (!lazy protocol witness table cache variable for type LetMeInCountdownView and conformance LetMeInCountdownView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LetMeInCountdownView and conformance LetMeInCountdownView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<LetMeInCountdownView> and conformance Button<A>, &demangling cache variable for type metadata for Button<LetMeInCountdownView>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    type metadata accessor for PlainButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>>);
    type metadata accessor for PlainButtonStyle();
    lazy protocol witness table accessor for type ModifiedContent<Button<LetMeInCountdownView>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *type metadata accessor for LetMeInCountdownView()
{
  return &unk_1F1EA9688;
}

id TPBadgeView.init(telephonyCall:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 160);
  uint64_t v5 = (void *)v4(ObjectType, a2);
  unsigned int v6 = objc_msgSend(v5, sel_isTelephonyProvider);

  if (!v6)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationControls);
    char v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      CGRect v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v23 = v19;
      *(_DWORD *)CGRect v18 = 136446210;
      uint64_t v20 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v16, v17, "[%{public}s] Non-telephony call passed into telephony initalizer", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v19, -1, -1);
      MEMORY[0x1C87760E0](v18, -1, -1);
    }

    goto LABEL_12;
  }
  uint64_t v7 = (void *)v4(ObjectType, a2);
  id v8 = objc_msgSend(v7, sel_prioritizedSenderIdentities);

  uint64_t v9 = (uint64_t)objc_msgSend(v8, sel_count);
  if (v9 < 2 || (uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 256))(ObjectType, a2)) == 0)
  {
LABEL_12:
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v11 = v10;
  id v12 = objc_msgSend(v10, sel_localizedShortName);
  if (!v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = (id)MEMORY[0x1C87730B0](v13);
    swift_bridgeObjectRelease();
  }
  id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithTitle_theme_, v12, 1);

  swift_unknownObjectRelease();
  return v14;
}

uint64_t destroy for CallControlsType(uint64_t a1)
{
  return outlined consume of CallControlsType(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for CallControlsType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CallControlsType(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CallControlsType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CallControlsType(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CallControlsType(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CallControlsType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CallControlsType(v4, v5, v6);
  return a1;
}

uint64_t destructiveInjectEnumTag for CallControlsType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CallControlsType()
{
  return &type metadata for CallControlsType;
}

uint64_t dispatch thunk of CallControlsButtonViewModel.controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallControlsButtonViewModel.onAppear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallControlsButtonViewModel.onDisappear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CallControlsInCallButtonViewModel.enabled(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t))(a5 + 16))(a1 & 0xFFFFFFFFFFLL);
}

uint64_t dispatch thunk of CallControlsPreCallButtonDelegate.didTapCancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallControlsPreCallButtonDelegate.didPerformAction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallControlsPreCallButtonViewModel.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallControlsPreCallButtonViewModel.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CallControlsPreCallButtonViewModel.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CallControlsPreCallButtonViewModel.enabled(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  unint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v15 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v4 == v3)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (v3 >= *(void *)(a1 + 16)) {
      break;
    }
    char v5 = *(unsigned char *)(a1 + v3++ + 32);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
    uint64_t v7 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v16, v6);
    uint64_t v10 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    LOBYTE(v9) = specialized Sequence<>.contains(_:)(v5, v10);
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v11 = v15;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v17;
      }
      unint64_t v13 = *(void *)(v11 + 16);
      if (v13 >= *(void *)(v11 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v17;
      }
      *(void *)(v11 + 16) = v13 + 1;
      uint64_t v15 = v11;
      *(unsigned char *)(v11 + v13 + 32) = v5;
    }
  }
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t, __n128);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t EnumTagSinglePayload;
  __n128 v22;
  uint64_t v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  void (**v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, char *, uint64_t);
  uint64_t (**v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;

  unint64_t v3 = a1;
  uint64_t v55 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v51 = v7;
  double v54 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v43 = v4;
  if (v4)
  {
    id v12 = 0;
    id v53 = (uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    double v48 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v49 = v6 + 16;
    os_log_type_t v41 = a2;
    double v42 = v3;
    double v40 = v6;
    while (v12 < *(void *)(v3 + 16))
    {
      unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v46 = v12;
      id v47 = v13;
      uint64_t v50 = *(void *)(v6 + 72);
      uint64_t v14 = v3 + v13 + v50 * v12;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
      v15(v11, v14, v5, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v5);
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v5) == 1) {
        goto LABEL_22;
      }
      uint64_t v45 = &v39;
      uint64_t v52 = *v53;
      uint64_t v16 = v52(v54, v11, v5);
      unint64_t v44 = &v39;
      MEMORY[0x1F4188790](v16);
      uint64_t v17 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      CGRect v18 = a2;
      uint64_t v19 = *(void *)(a2 + 16);
      if (v19)
      {
        uint64_t v20 = v18 + v47;
        swift_bridgeObjectRetain();
        while (1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v15)(v17, v20, v5);
          __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v5);
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v5);
          if (EnumTagSinglePayload == 1) {
            break;
          }
          long long v22 = MEMORY[0x1F4188790](EnumTagSinglePayload);
          id v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, char *, uint64_t, __n128))v52)(v24, v17, v5, v22);
          _s10Foundation4UUIDVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC30]);
          uint64_t v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v26 = *v48;
          (*v48)(v24, v5);
          if (v25)
          {
            a2 = v41;
            swift_bridgeObjectRelease();
            long long v34 = ((uint64_t (*)(char *, uint64_t))v26)(v54, v5);
            goto LABEL_19;
          }
          v20 += v50;
          if (!--v19) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_12:
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v5);
      }
      a2 = v41;
      uint64_t v27 = swift_bridgeObjectRelease();
      uint64_t v28 = MEMORY[0x1F4188790](v27);
      uint64_t v30 = (char *)&v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, uint64_t, __n128))v52)(v30, v54, v5, v28);
      uint64_t v31 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v55;
      }
      long long v33 = *(void *)(v31 + 16);
      uint64_t v32 = *(void *)(v31 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v31 = v55;
      }
      *(void *)(v31 + 16) = v33 + 1;
      long long v34 = v52((char *)(v31 + v47 + v33 * v50), v30, v5);
      uint64_t v55 = v31;
LABEL_19:
      long long v35 = v46 + 1;
      MEMORY[0x1F4188790](v34);
      double v54 = (char *)&v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      double v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v9 = *(void *)(*(void *)(v37 - 8) + 64);
      uint64_t v10 = MEMORY[0x1F4188790](v37 - 8);
      id v12 = v35;
      uint64_t v11 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      double v38 = v35 == v43;
      unint64_t v3 = v42;
      uint64_t v6 = v40;
      if (v38) {
        goto LABEL_21;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_21:
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v5);
LABEL_22:
    swift_bridgeObjectRelease();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease();
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t EnumTagSinglePayload;
  char v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  double v38 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  double v43 = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10_5();
  unint64_t v44 = v8;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v37 - v10;
  double v54 = MEMORY[0x1E4FBC860];
  double v42 = *(void *)(a1 + 16);
  if (v42)
  {
    id v12 = 0;
    double v39 = (char *)&v37 - v10;
    double v40 = a2;
    os_log_type_t v41 = a1;
    while (v12 < *(void *)(a1 + 16))
    {
      OUTLINED_FUNCTION_22_0();
      uint64_t v45 = *(void *)(v13 + 72);
      uint64_t v46 = v14;
      double v48 = v15;
      _s15ConversationKit11ParticipantVWOcTm_18(a1 + v14 + v45 * v15, (uint64_t)v11);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      id v47 = &v37;
      uint64_t v17 = OUTLINED_FUNCTION_8(v16);
      MEMORY[0x1F4188790](v17);
      OUTLINED_FUNCTION_36_4();
      CGRect v18 = *(void *)(a2 + 16);
      if (v18)
      {
        double v51 = &v11[*(int *)(v38 + 20)];
        uint64_t v19 = type metadata accessor for UUID();
        OUTLINED_FUNCTION_4();
        unint64_t v21 = v20;
        long long v22 = a2 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
        uint64_t v49 = *(void *)(v23 + 72);
        uint64_t v25 = v23 + 16;
        id v24 = *(void *)(v23 + 16);
        uint64_t v52 = v25;
        id v53 = v24;
        uint64_t v50 = v21 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          OUTLINED_FUNCTION_124();
          v26();
          OUTLINED_FUNCTION_31_13();
          __swift_storeEnumTagSinglePayload(v27, v28, v29, v19);
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, v19);
          if (EnumTagSinglePayload == 1) {
            break;
          }
          MEMORY[0x1F4188790](EnumTagSinglePayload);
          OUTLINED_FUNCTION_5_1();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v2, v3, v19);
          _s10Foundation4UUIDVACSHAAWlTm_6((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
          uint64_t v31 = dispatch thunk of static Equatable.== infix(_:_:)();
          OUTLINED_FUNCTION_205_0();
          OUTLINED_FUNCTION_50_1();
          v32();
          if (v31)
          {
            a2 = v40;
            swift_bridgeObjectRelease();
            uint64_t v11 = v39;
            _s15ConversationKit11ParticipantVWOhTm_12((uint64_t)v39, (void (*)(void))type metadata accessor for Participant);
            goto LABEL_18;
          }
          v22 += v49;
          if (!--v18) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_11:
        long long v33 = type metadata accessor for UUID();
        __swift_storeEnumTagSinglePayload(v3, 1, 1, v33);
      }
      a2 = v40;
      swift_bridgeObjectRelease();
      uint64_t v11 = v39;
      outlined init with take of Participant((uint64_t)v39, v44);
      long long v34 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
        long long v34 = v54;
      }
      char v36 = *(void *)(v34 + 16);
      long long v35 = *(void *)(v34 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        long long v34 = v54;
      }
      *(void *)(v34 + 16) = v36 + 1;
      outlined init with take of Participant(v44, v34 + v46 + v36 * v45);
LABEL_18:
      id v12 = v48 + 1;
      a1 = v41;
      if (v48 + 1 == v42) {
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return specialized Collection.firstIndex(where:)(a1, a2, a3, type metadata accessor for Participant);
}

{
  return specialized Collection.firstIndex(where:)(a1, a2, a3, type metadata accessor for ParticipantGridView.ParticipantTileInfo);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
  uint64_t v8 = 0;
  OUTLINED_FUNCTION_1(v7);
  uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  id v12 = *(void *)(v11 + 72);
  while (1)
  {
    unint64_t v13 = a1(v10);
    if (v3 || (v13 & 1) != 0) {
      break;
    }
    ++v8;
    v10 += v12;
    if (v4 == v8) {
      return 0;
    }
  }
  return v8;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = a4(0);
  uint64_t v9 = 0;
  OUTLINED_FUNCTION_1(v8);
  uint64_t v11 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v13 = *(void *)(v12 + 72);
  while (1)
  {
    char v14 = a1(v11);
    if (v4 || (v14 & 1) != 0) {
      break;
    }
    ++v9;
    v11 += v13;
    if (v5 == v9) {
      return 0;
    }
  }
  return v9;
}

uint64_t InCallControlsCollectionViewController.isOnScreen.setter(char a1)
{
  InCallControlsCollectionViewController.isOnScreen.willset(a1);
  unint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *unint64_t v3 = a1;
  return result;
}

void InCallControlsCollectionViewController.__allocating_init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)()
{
  OUTLINED_FUNCTION_31();
  objc_allocWithZone(v0);
  InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)();
  OUTLINED_FUNCTION_28();
}

uint64_t InCallControlsCollectionViewController.activity.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
  OUTLINED_FUNCTION_6_1();
  outlined assign with copy of Activity?(a1, v3);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Subject<>.send()();
  InCallControlsCollectionViewController.updateActivityHeader()();
  return outlined destroy of SystemUpdateNotice?(a1, &demangling cache variable for type metadata for Activity?);
}

Swift::Void __swiftcall InCallControlsCollectionViewController.refreshTitleCell()()
{
}

void InCallControlsCollectionViewController.conversation.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  OUTLINED_FUNCTION_11_0();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Subject<>.send()();
}

Swift::Void __swiftcall InCallControlsCollectionViewController.refreshToggleIgnoreLMIRequestsRowCell()()
{
}

void InCallControlsCollectionViewController.refreshTitleCell()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
    uint64_t v6 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v8 = v7;
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
    unint64_t v11 = v10 + v9;
    uint64_t v12 = *a1;
    id v13 = v3;
    if (v12 != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_52_10(v6, a2);
    (*(void (**)(unint64_t))(v8 + 16))(v11);
    InCallControlsCollectionViewController.reconfigure(_:cellIdentifiers:in:animatingDifferences:)(0, v10, v13, 1);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
}

uint64_t InCallControlsCollectionViewController.mode.setter(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  OUTLINED_FUNCTION_11_0();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = a1;
  return InCallControlsCollectionViewController.mode.didset(v4);
}

uint64_t InCallControlsCollectionViewController.gridLayoutStyle.setter(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle);
  OUTLINED_FUNCTION_11_0();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v6 = v4;
  return InCallControlsCollectionViewController.gridLayoutStyle.didset(&v6);
}

void InCallControlsCollectionViewController.update(participant:broadcastingState:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  swift_getObjectType();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_62();
  uint64_t v6 = type metadata accessor for Participant.State(0);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v51 - v11;
  id v13 = &v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants];
  OUTLINED_FUNCTION_2();
  uint64_t v14 = *(void *)v13;
  uint64_t v57[2] = v3;
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in ParticipantGridViewController.updateProminenceEMA(withParticipant:ema:audioPriority:videoPriority:), (uint64_t)v57, v14, type metadata accessor for Participant);
  char v17 = v16;
  swift_bridgeObjectRelease();
  if (v17)
  {
    if (one-time initialization token for conversationKit == -1)
    {
LABEL_17:
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v40 = OUTLINED_FUNCTION_11_7();
      *(_OWORD *)(v40 + 16) = xmmword_1C37696D0;
      OUTLINED_FUNCTION_50_11(v40, v41, (void (*)(void))type metadata accessor for Participant);
      uint64_t v42 = type metadata accessor for Participant(0);
      uint64_t v43 = OUTLINED_FUNCTION_60_8(v42);
      uint64_t v45 = v44;
      outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Participant?);
      uint64_t v46 = MEMORY[0x1E4FBB1A0];
      *(void *)(v40 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v47 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v40 + 64) = v47;
      *(void *)(v40 + 32) = v43;
      *(void *)(v40 + 40) = v45;
      double v58 = v0;
      double v48 = v0;
      uint64_t v49 = String.init<A>(reflecting:)();
      *(void *)(v40 + 96) = v46;
      *(void *)(v40 + 104) = v47;
      *(void *)(v40 + 72) = v49;
      *(void *)(v40 + 80) = v50;
      OUTLINED_FUNCTION_46_16();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
LABEL_21:
    swift_once();
    goto LABEL_17;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v18 = *(void *)v13;
  if (v15 >= *(void *)(*(void *)v13 + 16))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(type metadata accessor for Participant(0) - 8);
  uint64_t v54 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v56 = (v54 + 32) & ~v54;
  uint64_t v53 = *(void *)(v19 + 72);
  unint64_t v55 = v53 * v15;
  _s15ConversationKit11ParticipantVWOcTm_10(v18 + v56 + v53 * v15, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant.State);
  _s15ConversationKit11ParticipantVWOcTm_10(v3, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant.State);
  static Participant.State.== infix(_:_:)();
  char v21 = v20;
  outlined destroy of Participant.State((uint64_t)v10, (void (*)(void))type metadata accessor for Participant.State);
  outlined destroy of Participant.State((uint64_t)v12, (void (*)(void))type metadata accessor for Participant.State);
  if (v21) {
    goto LABEL_18;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v52 = static OS_os_log.conversationKit;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v22 = OUTLINED_FUNCTION_11_7();
  long long v51 = xmmword_1C37696D0;
  *(_OWORD *)(v22 + 16) = xmmword_1C37696D0;
  double v58 = (char *)v15;
  uint64_t v23 = String.init<A>(reflecting:)();
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v22 + 64) = v26;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  OUTLINED_FUNCTION_50_11(v26, v27, (void (*)(void))type metadata accessor for Participant);
  uint64_t v28 = OUTLINED_FUNCTION_64_5();
  uint64_t v30 = v29;
  outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Participant?);
  *(void *)(v22 + 96) = MEMORY[0x1E4FBB1A0];
  *(void *)(v22 + 104) = v26;
  *(void *)(v22 + 72) = v28;
  *(void *)(v22 + 80) = v30;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_1();
  uint64_t v31 = *(void **)v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)id v13 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v31 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()();
    *(void *)id v13 = v31;
  }
  if (v15 >= v31[2])
  {
    __break(1u);
LABEL_23:
    swift_once();
    goto LABEL_13;
  }
  outlined assign with copy of Participant(v3, (uint64_t)v31 + v56 + v55);
  swift_endAccess();
  InCallControlsCollectionViewController.participants.didset();
  if (!objc_msgSend(v0, sel_isViewLoaded)) {
    goto LABEL_18;
  }
  long long v33 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
  if (!v33) {
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
  uint64_t v34 = v56;
  unint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C3769620;
  _s15ConversationKit11ParticipantVWOcTm_10(v3, v15 + v34, (void (*)(void))type metadata accessor for Participant);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  unint64_t v26 = v35;
  id v13 = (char *)swift_allocObject();
  *((_OWORD *)v13 + 1) = v51;
  uint64_t v36 = one-time initialization token for shareLinkRowIdentifier;
  uint64_t v31 = v33;
  if (v36 != -1) {
    goto LABEL_23;
  }
LABEL_13:
  OUTLINED_FUNCTION_52_10(v3, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier);
  double v37 = *(void (**)(uint64_t))(v26 + 16);
  uint64_t v38 = OUTLINED_FUNCTION_65_6();
  v37(v38);
  if (one-time initialization token for toggleCaptionsRowIdentifier != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_52_10(v3, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier);
  uint64_t v39 = OUTLINED_FUNCTION_65_6();
  v37(v39);
  InCallControlsCollectionViewController.reconfigure(_:cellIdentifiers:in:animatingDifferences:)(v15, (uint64_t)v13, v31, 1);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();

LABEL_18:
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall InCallControlsCollectionViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(Swift::OpaquePointer a1, Swift::Bool isLocalMemberAuthorizedToChangeGroupMembership)
{
  rawValue = a1._rawValue;
  uint64_t v90 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_10_5();
  uint64_t v88 = v5;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v75 - v7;
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_10_5();
  uint64_t v84 = v12;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v91 = (uint64_t)&v75 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v20 = (char *)&v75 - v19;
  char v21 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
  if (!v21)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    return;
  }
  uint64_t v82 = v18;
  uint64_t v83 = v17;
  id v79 = v2;
  uint64_t v22 = one-time initialization token for conversationKit;
  id v76 = v21;
  if (v22 != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v23 = OUTLINED_FUNCTION_25_15();
  long long v75 = xmmword_1C3769620;
  *(_OWORD *)(v23 + 16) = xmmword_1C3769620;
  Swift::Bool v93 = isLocalMemberAuthorizedToChangeGroupMembership;
  uint64_t v24 = String.init<A>(reflecting:)();
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (!objc_msgSend(v79, sel_isViewLoaded))
  {

    return;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v92 = MEMORY[0x1E4FBC860];
  uint64_t v28 = rawValue[2];
  swift_bridgeObjectRetain();
  if (!v28) {
    goto LABEL_37;
  }
  CGFloat v80 = v8;
  uint64_t v81 = v91 + 3;
  OUTLINED_FUNCTION_22_0();
  uint64_t v29 = *(void *)(v10 + 72);
  CGFloat v86 = v20;
  uint64_t v87 = v29;
  uint64_t v77 = v30;
  uint64_t v32 = v31 + v30;
  while (2)
  {
    _s15ConversationKit11ParticipantVWOcTm_10(v32, (uint64_t)v20, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOcTm_10((uint64_t)v20, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v34 = v88;
    switch(EnumCaseMultiPayload)
    {
      case 2:
        type metadata accessor for Date();
        OUTLINED_FUNCTION_0();
        OUTLINED_FUNCTION_26_2();
        v35();
        uint64_t v36 = v91;
        _s15ConversationKit11ParticipantVWOcTm_10((uint64_t)v20, v91, (void (*)(void))type metadata accessor for Participant);
        outlined destroy of Participant.State(v36, (void (*)(void))type metadata accessor for Participant);
        goto LABEL_21;
      case 4:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v38 = &v8[*(int *)(v37 + 48)];
        OUTLINED_FUNCTION_8_2((uint64_t *)&v8[*(int *)(v37 + 64)]);
        uint64_t v39 = (uint64_t)v38;
        uint64_t v34 = v88;
        outlined destroy of Participant.MediaInfo(v39);
        goto LABEL_10;
      case 6:
        goto LABEL_11;
      default:
LABEL_10:
        type metadata accessor for Date();
        OUTLINED_FUNCTION_0();
        (*(void (**)(char *))(v40 + 8))(v8);
LABEL_11:
        uint64_t v41 = (uint64_t)v20;
        uint64_t v42 = v91;
        _s15ConversationKit11ParticipantVWOcTm_10(v41, v91, (void (*)(void))type metadata accessor for Participant);
        uint64_t v43 = type metadata accessor for Date();
        double v89 = &v75;
        OUTLINED_FUNCTION_4();
        uint64_t v45 = v44;
        uint64_t v47 = *(void *)(v46 + 64);
        MEMORY[0x1F4188790](v48);
        _s15ConversationKit11ParticipantVWOcTm_10(v42, v34, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
          outlined destroy of Participant.State(v34, (void (*)(void))type metadata accessor for Participant.State);
          char v20 = v86;
LABEL_27:
          outlined destroy of Participant.State(v91, (void (*)(void))type metadata accessor for Participant);
LABEL_28:
          outlined destroy of Participant.State((uint64_t)v20, (void (*)(void))type metadata accessor for Participant);
          goto LABEL_29;
        }
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v50 = v34 + *(int *)(v49 + 48);
        OUTLINED_FUNCTION_8_2((uint64_t *)(v34 + *(int *)(v49 + 64)));
        OUTLINED_FUNCTION_68_9();
        OUTLINED_FUNCTION_63_0();
        v51();
        outlined destroy of Participant.MediaInfo(v50);
        uint64_t v52 = Date.timeIntervalSinceNow.getter();
        double v54 = v53;
        MEMORY[0x1F4188790](v52);
        unint64_t v55 = (char *)&v75 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        OUTLINED_FUNCTION_2_1();
        v56();
        char v20 = v86;
        CGFloat v85 = &v75;
        if (v54 <= 0.0)
        {
          Date.timeIntervalSinceNow.getter();
          double v59 = v58;
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          OUTLINED_FUNCTION_50();
          BOOL v57 = -v59 <= (double)(*(uint64_t (**)(void))(v60 + 696))();
        }
        else
        {
          BOOL v57 = 0;
        }
        uint64_t v8 = v80;
        CGFloat v61 = *(void (**)(char *, uint64_t))(v45 + 8);
        v61(v55, v43);
        uint64_t v62 = OUTLINED_FUNCTION_69_3();
        ((void (*)(uint64_t))v61)(v62);
        uint64_t v64 = v82;
        uint64_t v63 = v83;
        LODWORD(v61) = *(unsigned __int8 *)(v81 + *(int *)(v83 + 24));
        _s15ConversationKit11ParticipantVWOcTm_10(v91, v82, (void (*)(void))type metadata accessor for Participant);
        if (v61 != 1)
        {
          outlined destroy of Participant.State(v64, (void (*)(void))type metadata accessor for Participant);
          goto LABEL_27;
        }
        uint64_t v65 = *(void *)(v64 + *(int *)(v63 + 28));
        outlined destroy of Participant.State(v64, (void (*)(void))type metadata accessor for Participant);
        if (!v65) {
          goto LABEL_27;
        }
        outlined destroy of Participant.State(v91, (void (*)(void))type metadata accessor for Participant);
        if (!v57) {
          goto LABEL_28;
        }
LABEL_21:
        outlined init with take of Participant((uint64_t)v20, v84);
        uint64_t v66 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v66 + 16) + 1, 1);
          uint64_t v66 = v92;
        }
        unint64_t v68 = *(void *)(v66 + 16);
        unint64_t v67 = *(void *)(v66 + 24);
        if (v68 >= v67 >> 1)
        {
          char v69 = OUTLINED_FUNCTION_57_5(v67);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69, v68 + 1, 1);
          uint64_t v66 = v92;
        }
        *(void *)(v66 + 16) = v68 + 1;
        outlined init with take of Participant(v84, v66 + v77 + v68 * v87);
LABEL_29:
        v32 += v87;
        if (--v28) {
          continue;
        }
        uint64_t v27 = v92;
LABEL_37:
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
        uint64_t v70 = type metadata accessor for UUID();
        OUTLINED_FUNCTION_4();
        uint64_t v72 = v71;
        OUTLINED_FUNCTION_54_9();
        uint64_t v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = v75;
        if (one-time initialization token for addParticipantRowIdentifier != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_52_10(v70, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier);
        (*(void (**)(uint64_t))(v72 + 16))(v73 + v28);
        double v74 = v76;
        InCallControlsCollectionViewController.reconfigure(_:cellIdentifiers:in:animatingDifferences:)(v27, v73, v76, 1);

        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        swift_release();
        return;
    }
  }
}

void InCallControlsCollectionViewController.update(participant:isKickingAvailable:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  swift_getObjectType();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_62();
  uint64_t v6 = (uint64_t *)&v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants];
  OUTLINED_FUNCTION_2();
  uint64_t v7 = *v6;
  v34[2] = v3;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in ParticipantGridViewController.update(participant:broadcastingState:), (uint64_t)v34, v7, type metadata accessor for Participant);
  LOBYTE(v6) = v9;
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v23 = OUTLINED_FUNCTION_11_7();
    *(_OWORD *)(v23 + 16) = xmmword_1C37696D0;
    OUTLINED_FUNCTION_50_11(v23, v24, (void (*)(void))type metadata accessor for Participant);
    uint64_t v25 = type metadata accessor for Participant(0);
    uint64_t v26 = OUTLINED_FUNCTION_60_8(v25);
    uint64_t v28 = v27;
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Participant?);
    uint64_t v29 = MEMORY[0x1E4FBB1A0];
    *(void *)(v23 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v23 + 64) = v30;
    *(void *)(v23 + 32) = v26;
    *(void *)(v23 + 40) = v28;
    unint64_t v35 = v0;
    uint64_t v31 = v0;
    uint64_t v32 = String.init<A>(reflecting:)();
    *(void *)(v23 + 96) = v29;
    *(void *)(v23 + 104) = v30;
    *(void *)(v23 + 72) = v32;
    *(void *)(v23 + 80) = v33;
    OUTLINED_FUNCTION_46_16();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = OUTLINED_FUNCTION_11_7();
    *(_OWORD *)(v10 + 16) = xmmword_1C37696D0;
    unint64_t v35 = (char *)v8;
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v13 = v12;
    uint64_t v14 = MEMORY[0x1E4FBB1A0];
    *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v15 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v10 + 64) = v15;
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    OUTLINED_FUNCTION_50_11(v15, v16, (void (*)(void))type metadata accessor for Participant);
    type metadata accessor for Participant(0);
    uint64_t v17 = OUTLINED_FUNCTION_64_5();
    uint64_t v19 = v18;
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Participant?);
    *(void *)(v10 + 96) = v14;
    *(void *)(v10 + 104) = v15;
    *(void *)(v10 + 72) = v17;
    *(void *)(v10 + 80) = v19;
    static os_log_type_t.default.getter();
    OUTLINED_FUNCTION_46_16();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (objc_msgSend(v0, sel_isViewLoaded))
    {
      char v20 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
      if (v20)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
        OUTLINED_FUNCTION_54_9();
        uint64_t v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_1C3769620;
        _s15ConversationKit11ParticipantVWOcTm_10(v3, v21 + v10, (void (*)(void))type metadata accessor for Participant);
        id v22 = v20;
        InCallControlsCollectionViewController.reconfigure(_:cellIdentifiers:in:animatingDifferences:)(v21, 0, v22, 1);
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
      }
    }
  }
  OUTLINED_FUNCTION_28();
}

void InCallControlsCollectionViewController.update(with:updateReason:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v57 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_63();
  Array<A>.filterAndSortForInCallControls()();
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v50 = v5;
  uint64_t v51 = v0;
  uint64_t v52 = v3;
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v59 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    OUTLINED_FUNCTION_22_0();
    uint64_t v9 = v7 + v8;
    uint64_t v10 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v13 = v12;
    uint64_t v56 = *(void **)(v14 + 64);
    uint64_t v15 = *(void *)(v3 + 72);
    double v54 = (void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    uint64_t v55 = v15;
    double v53 = (void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    do
    {
      MEMORY[0x1F4188790](v11);
      OUTLINED_FUNCTION_5_10();
      uint64_t v18 = v16 - v17;
      _s15ConversationKit11ParticipantVWOcTm_10(v9, v1, (void (*)(void))type metadata accessor for Participant);
      (*v54)(v18, v1 + *(int *)(v57 + 20), v10);
      outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for Participant);
      uint64_t v19 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1);
        uint64_t v19 = v59;
      }
      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        char v23 = OUTLINED_FUNCTION_57_5(v20);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23, v21 + 1, 1);
        uint64_t v19 = v59;
      }
      *(void *)(v19 + 16) = v21 + 1;
      OUTLINED_FUNCTION_22_0();
      uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v19 + v22 + *(void *)(v13 + 72) * v21, v18, v10);
      uint64_t v59 = v19;
      v9 += v55;
      --v6;
    }
    while (v6);
    uint64_t v0 = v51;
  }
  uint64_t v24 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
  OUTLINED_FUNCTION_2();
  v49[1] = v24;
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 16);
  if (v26)
  {
    uint64_t v58 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    OUTLINED_FUNCTION_22_0();
    v49[0] = v25;
    uint64_t v28 = v25 + v27;
    uint64_t v29 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v32 = v31;
    uint64_t v55 = *(void *)(v33 + 64);
    uint64_t v34 = *(void (***)(uint64_t, uint64_t, uint64_t))(v52 + 72);
    double v53 = (void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
    double v54 = v34;
    uint64_t v52 = v31 + 32;
    do
    {
      uint64_t v56 = v49;
      MEMORY[0x1F4188790](v30);
      OUTLINED_FUNCTION_5_10();
      uint64_t v37 = v35 - v36;
      _s15ConversationKit11ParticipantVWOcTm_10(v28, v1, (void (*)(void))type metadata accessor for Participant);
      (*v53)(v37, v1 + *(int *)(v57 + 20), v29);
      outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for Participant);
      uint64_t v38 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
        uint64_t v38 = v58;
      }
      unint64_t v40 = *(void *)(v38 + 16);
      unint64_t v39 = *(void *)(v38 + 24);
      if (v40 >= v39 >> 1)
      {
        char v42 = OUTLINED_FUNCTION_57_5(v39);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42, v40 + 1, 1);
        uint64_t v38 = v58;
      }
      *(void *)(v38 + 16) = v40 + 1;
      OUTLINED_FUNCTION_22_0();
      uint64_t v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v32 + 32))(v38 + v41 + *(void *)(v32 + 72) * v40, v37, v29);
      uint64_t v58 = v38;
      v28 += (uint64_t)v54;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v0 = v51;
  }
  OUTLINED_FUNCTION_233();
  specialized static Array<A>.== infix(_:_:)();
  char v44 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  InCallControlsCollectionViewController.participants.setter(v50);
  InCallControlsCollectionViewController.updateDataSource(shouldRefreshParticipants:animatingDifferences:)(1, 1);
  if ((v44 & 1) == 0)
  {
    uint64_t v45 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen);
    OUTLINED_FUNCTION_2();
    if (*v45 == 1)
    {
      OUTLINED_FUNCTION_50();
      uint64_t v47 = *(void (**)(uint64_t))(v46 + 232);
      uint64_t v48 = swift_bridgeObjectRetain();
      v47(v48);
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall InCallControlsCollectionViewController.captioningStateDidChange()()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_63();
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (!v10)
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v4);
LABEL_12:
    outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for IndexPath?);
    return;
  }
  uint64_t v11 = one-time initialization token for toggleCaptionsRowIdentifier;
  id v12 = v10;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for UUID();
  __swift_project_value_buffer(v13, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier);
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)();

  OUTLINED_FUNCTION_33_0(v2, 1, v4);
  if (v14) {
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_63_0();
  v15();
  uint64_t v16 = (id *)(v3 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
  OUTLINED_FUNCTION_2();
  if (*v16)
  {
    id v17 = *v16;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v19 = objc_msgSend(v17, sel_cellForItemAtIndexPath_, isa);

    if (v19)
    {
      type metadata accessor for InCallControlsToggleCaptionsCell();
      unint64_t v20 = (void *)swift_dynamicCastClass();
      if (v20) {
        InCallControlsCollectionViewController.configureToggleCaptionsCell(_:)(v20);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
}

uint64_t *InCallControlsCollectionViewController.separatorStyle.unsafeMutableAddressor()
{
  if (one-time initialization token for separatorStyle != -1) {
    swift_once();
  }
  return &static InCallControlsCollectionViewController.separatorStyle;
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.singleRowIdentifier.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
    case 2:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1C336E694);
    case 3:
      if (one-time initialization token for shareLinkRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier;
      break;
    case 4:
      if (one-time initialization token for toggleCaptionsRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier;
      break;
    case 5:
      if (one-time initialization token for toggleIgnoreLMIRequestsRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier;
      break;
    case 6:
      if (one-time initialization token for openMessagesRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier;
      break;
    case 7:
      if (one-time initialization token for blockUnkownRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier;
      break;
    case 8:
      if (one-time initialization token for pttTitleRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier;
      break;
    case 9:
      if (one-time initialization token for leavePTTChannelRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier;
      break;
    case 10:
      if (one-time initialization token for openPTTAppRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier;
      break;
    default:
      if (one-time initialization token for titleRowIdentifier != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = v3;
      uint64_t v5 = static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier;
      break;
  }
  uint64_t v6 = __swift_project_value_buffer(v3, (uint64_t)v5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v7(a2, v6, v4);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for titleRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for shareLinkRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for toggleCaptionsRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for toggleIgnoreLMIRequestsRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for openMessagesRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for blockUnkownRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for pttTitleRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for leavePTTChannelRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for openPTTAppRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier);
}

uint64_t one-time initialization function for titleRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for titleRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier, a1);
}

uint64_t one-time initialization function for statusRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.statusRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.statusRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for statusRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.statusRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.statusRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for statusRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.statusRowIdentifier, a1);
}

uint64_t one-time initialization function for addParticipantRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for addParticipantRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for addParticipantRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier, a1);
}

uint64_t one-time initialization function for shareLinkRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for shareLinkRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier, a1);
}

uint64_t one-time initialization function for toggleIgnoreLMIRequestsRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for toggleIgnoreLMIRequestsRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier, a1);
}

uint64_t one-time initialization function for toggleCaptionsRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for toggleCaptionsRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier, a1);
}

uint64_t one-time initialization function for openMessagesRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for openMessagesRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier, a1);
}

uint64_t one-time initialization function for blockUnkownRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for blockUnkownRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier, a1);
}

uint64_t one-time initialization function for reportUnknownRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier.unsafeMutableAddressor()
{
  return InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(&one-time initialization token for reportUnknownRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier);
}

uint64_t InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for UUID();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for reportUnknownRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier, a1);
}

uint64_t one-time initialization function for pttTitleRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for pttTitleRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier, a1);
}

uint64_t one-time initialization function for leavePTTChannelRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for leavePTTChannelRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier, a1);
}

uint64_t one-time initialization function for openPTTAppRowIdentifier(uint64_t a1)
{
  return one-time initialization function for titleRowIdentifier(a1, static InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier);
}

uint64_t one-time initialization function for titleRowIdentifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  __swift_allocate_value_buffer(v3, a2);
  uint64_t v4 = OUTLINED_FUNCTION_23_0();
  __swift_project_value_buffer(v4, v5);
  return UUID.init()();
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter(&one-time initialization token for openPTTAppRowIdentifier, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier, a1);
}

uint64_t static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_52_10(v5, a2);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a3);
}

ConversationKit::InCallControlsCollectionViewController::CollectionViewSection_optional __swiftcall InCallControlsCollectionViewController.CollectionViewSection.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InCallControlsCollectionViewController.CollectionViewSection.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return (ConversationKit::InCallControlsCollectionViewController::CollectionViewSection_optional)11;
  }
  else {
    return (ConversationKit::InCallControlsCollectionViewController::CollectionViewSection_optional)v3;
  }
}

void *static InCallControlsCollectionViewController.CollectionViewSection.allCases.getter()
{
  return &outlined read-only object #0 of static InCallControlsCollectionViewController.CollectionViewSection.allCases.getter;
}

unint64_t InCallControlsCollectionViewController.CollectionViewSection.rawValue.getter(char a1)
{
  unint64_t result = 0x656C746974;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x41746E6572727563;
      break;
    case 2:
      unint64_t result = 0x7069636974726170;
      break;
    case 3:
      unint64_t result = 0x6572616873;
      break;
    case 4:
      unint64_t result = 0x6143656C67676F74;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0x7373654D6E65706FLL;
      break;
    case 7:
      unint64_t result = 0x646E416B636F6C62;
      break;
    case 8:
      unint64_t result = 0x656C746954747470;
      break;
    case 9:
      unint64_t result = 0x545450657661656CLL;
      break;
    case 10:
      unint64_t result = 0x415454506E65706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InCallControlsCollectionViewController.CollectionViewSection(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InCallControlsCollectionViewController.CollectionViewSection()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InCallControlsCollectionViewController.CollectionViewSection(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InCallControlsCollectionViewController.CollectionViewSection(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

ConversationKit::InCallControlsCollectionViewController::CollectionViewSection_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InCallControlsCollectionViewController.CollectionViewSection@<W0>(Swift::String *a1@<X0>, ConversationKit::InCallControlsCollectionViewController::CollectionViewSection_optional *a2@<X8>)
{
  result.ConversationKit::VideoReaction value = InCallControlsCollectionViewController.CollectionViewSection.init(rawValue:)(*a1).value;
  a2->ConversationKit::VideoReaction value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InCallControlsCollectionViewController.CollectionViewSection@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = InCallControlsCollectionViewController.CollectionViewSection.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance InCallControlsCollectionViewController.CollectionViewSection(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static InCallControlsCollectionViewController.CollectionViewSection.allCases.getter;
}

uint64_t InCallControlsCollectionViewController.participants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for InCallControlsCollectionViewController.participants : InCallControlsCollectionViewController@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

void key path setter for InCallControlsCollectionViewController.participants : InCallControlsCollectionViewController()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  InCallControlsCollectionViewController.participants.setter(v0);
}

void InCallControlsCollectionViewController.participants.setter(uint64_t a1)
{
  unint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
  OUTLINED_FUNCTION_11_0();
  *unint64_t v3 = a1;
  swift_bridgeObjectRelease();
  InCallControlsCollectionViewController.participants.didset();
}

void InCallControlsCollectionViewController.participants.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (v1)
  {
    id v2 = v1;
    InCallControlsCollectionViewController.reloadSections(_:in:animatingDifferences:)((uint64_t)&outlined read-only object #0 of InCallControlsCollectionViewController.participants.didset, (uint64_t)v2, 1, specialized _ArrayProtocol.filter(_:), MEMORY[0x1E4FB0FD0]);
  }
}

id one-time initialization function for separatorStyle()
{
  uint64_t v0 = self;
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id result = objc_msgSend(v0, sel__effectForBlurEffect_vibrancyStyle_, static Colors.InCallControls.backgroundBlurEffect, 120);
  static InCallControlsCollectionViewController.separatorStyle = (uint64_t)result;
  return result;
}

id static InCallControlsCollectionViewController.separatorStyle.getter()
{
  if (one-time initialization token for separatorStyle != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static InCallControlsCollectionViewController.separatorStyle;
  return v0;
}

id InCallControlsCollectionViewController.featureFlags.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController____lazy_storage___featureFlags;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController____lazy_storage___featureFlags);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController____lazy_storage___featureFlags);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t InCallControlsCollectionViewController.activity.getter()
{
  OUTLINED_FUNCTION_2();
  uint64_t v0 = OUTLINED_FUNCTION_23_0();
  return outlined init with copy of FeatureEligibility?(v0, v1, v2);
}

uint64_t key path getter for InCallControlsCollectionViewController.activity : InCallControlsCollectionViewController@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
  swift_beginAccess();
  return outlined init with copy of FeatureEligibility?(v3, a2, &demangling cache variable for type metadata for Activity?);
}

uint64_t key path setter for InCallControlsCollectionViewController.activity : InCallControlsCollectionViewController(uint64_t a1)
{
  outlined init with copy of FeatureEligibility?(a1, (uint64_t)v2, &demangling cache variable for type metadata for Activity?);
  return InCallControlsCollectionViewController.activity.setter((uint64_t)v2);
}

uint64_t InCallControlsCollectionViewController.updateDataSource(shouldRefreshParticipants:animatingDifferences:)(char a1, char a2)
{
  if (a1) {
    *(unsigned char *)(v2
  }
             + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsRefreshParticipants) = 1;
  if (a2) {
    *(unsigned char *)(v2
  }
             + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsAnimatedDifferences) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  return Subject<>.send()();
}

void InCallControlsCollectionViewController.updateActivityHeader()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
  swift_beginAccess();
  outlined init with copy of FeatureEligibility?(v2, (uint64_t)&v32, &demangling cache variable for type metadata for Activity?);
  if (!v33)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v32, &demangling cache variable for type metadata for Activity?);
    goto LABEL_11;
  }
  outlined init with take of Notice(&v32, (uint64_t)v34);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (!v7) {
    goto LABEL_9;
  }
  id v8 = v7;
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  uint64_t v9 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  while (2)
  {
    switch(*(unsigned char *)(v9 + v11 + 32))
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      default:
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
        {
          if (v10 == ++v11) {
            goto LABEL_8;
          }
          continue;
        }
LABEL_17:
        swift_bridgeObjectRelease();
        id v17 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
        swift_beginAccess();
        uint64_t v18 = *v17;
        if (*v17)
        {
          id v19 = (void *)*MEMORY[0x1E4FB2770];
          uint64_t v20 = type metadata accessor for IndexPath();
          uint64_t v21 = *(void *)(v20 - 8);
          MEMORY[0x1F4188790](v20);
          char v23 = &v31[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
          id v24 = v19;
          id v25 = v18;
          MEMORY[0x1C876F250](0, v11);
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v23, v20);
          id v27 = objc_msgSend(v25, sel_supplementaryViewForElementKind_atIndexPath_, v24, isa);

          if (v27)
          {
            type metadata accessor for InCallControlsSectionHeaderView();
            uint64_t v28 = swift_dynamicCastClass();
            if (v28)
            {
              uint64_t v29 = (void *)v28;
              outlined init with copy of IDSLookupManager((uint64_t)v34, (uint64_t)&v32);
              uint64_t v30 = InCallControlsActivitySectionHeaderViewModel.init(activity:)(&v32);
              (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v29) + 0x58))(v30);
              swift_bridgeObjectRelease();

              __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
              return;
            }
          }
        }
LABEL_9:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
LABEL_11:
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
        char v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl(&dword_1C2F90000, v14, v15, "Can't find activity header or remote participant count didn't change, skip updating activity header", v16, 2u);
          MEMORY[0x1C87760E0](v16, -1, -1);
        }

        return;
    }
  }
}

void (*InCallControlsCollectionViewController.activity.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return InCallControlsCollectionViewController.activity.modify;
}

void InCallControlsCollectionViewController.activity.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    Subject<>.send()();
    InCallControlsCollectionViewController.updateActivityHeader()();
  }
}

void *InCallControlsCollectionViewController.conversation.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

id key path getter for InCallControlsCollectionViewController.conversation : InCallControlsCollectionViewController@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  id v3 = (void **)(*a1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}

void key path setter for InCallControlsCollectionViewController.conversation : InCallControlsCollectionViewController(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  InCallControlsCollectionViewController.conversation.setter(v1);
}

uint64_t (*InCallControlsCollectionViewController.conversation.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return InCallControlsCollectionViewController.conversation.modify;
}

uint64_t InCallControlsCollectionViewController.conversation.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    return Subject<>.send()();
  }
  return result;
}

uint64_t InCallControlsCollectionViewController.mode.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t key path getter for InCallControlsCollectionViewController.mode : InCallControlsCollectionViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t InCallControlsCollectionViewController.mode.didset(unsigned __int8 a1)
{
  int v3 = a1;
  uint64_t v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  uint64_t result = swift_beginAccess();
  unsigned int v6 = *v4;
  switch(a1 >> 5)
  {
    case 1:
      if ((v6 & 0xE0) != 0x20) {
        goto LABEL_19;
      }
      goto LABEL_10;
    case 2:
      if ((v6 & 0xE0) != 0x40) {
        goto LABEL_19;
      }
LABEL_10:
      if ((((v3 & 1) == 0) ^ v6)) {
        return result;
      }
      goto LABEL_19;
    case 3:
      if (v3 == 96)
      {
        if (v6 != 96) {
          goto LABEL_19;
        }
      }
      else if (v6 != 97)
      {
        goto LABEL_19;
      }
      return result;
    case 4:
      if (v3 == 128)
      {
        if (v6 == 128) {
          return result;
        }
      }
      else if (v6 == 129)
      {
        return result;
      }
LABEL_19:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
      return Subject<>.send()();
    case 5:
      if (v3 == 160 || v6 != 161) {
        goto LABEL_19;
      }
      return result;
    default:
      if (v6 < 0x20) {
        return result;
      }
      goto LABEL_19;
  }
}

void (*InCallControlsCollectionViewController.mode.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return InCallControlsCollectionViewController.mode.modify;
}

void InCallControlsCollectionViewController.mode.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  InCallControlsCollectionViewController.mode.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t InCallControlsCollectionViewController.gridLayoutStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle);
  uint64_t result = OUTLINED_FUNCTION_2();
  *a1 = *v3;
  return result;
}

uint64_t key path getter for InCallControlsCollectionViewController.gridLayoutStyle : InCallControlsCollectionViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t key path setter for InCallControlsCollectionViewController.gridLayoutStyle : InCallControlsCollectionViewController(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return InCallControlsCollectionViewController.gridLayoutStyle.setter(&v2);
}

uint64_t InCallControlsCollectionViewController.gridLayoutStyle.didset(unsigned __int8 *a1)
{
  int v2 = *a1;
  int v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle);
  uint64_t result = swift_beginAccess();
  if (v2 != *v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    return Subject<>.send()();
  }
  return result;
}

void (*InCallControlsCollectionViewController.gridLayoutStyle.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle);
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return InCallControlsCollectionViewController.gridLayoutStyle.modify;
}

void InCallControlsCollectionViewController.gridLayoutStyle.modify(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  if (a2)
  {
    char v4 = *(unsigned char *)(*(void *)a1 + 32);
    int v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = *(unsigned char *)(*(void *)a1 + 32);
    int v3 = (unsigned __int8 *)&v5;
  }
  InCallControlsCollectionViewController.gridLayoutStyle.setter(v3);
  free(v2);
}

uint64_t InCallControlsCollectionViewController.isOnScreen.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t key path getter for InCallControlsCollectionViewController.isOnScreen : InCallControlsCollectionViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void InCallControlsCollectionViewController.isOnScreen.willset(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  char v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen);
  OUTLINED_FUNCTION_2();
  if (*v4 != v3)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v8 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v6, v7, "InCallControlsCollectionViewController isOnScreen %{BOOL}d", v8, 8u);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    uint64_t v9 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updatedCapabilitiesWithParticipants;
    if ((*(unsigned char *)(v2
                   + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updatedCapabilitiesWithParticipants) & 1) == 0)
    {
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        char v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v12 = 0;
        _os_log_impl(&dword_1C2F90000, v10, v11, "InCallControlsCollectionViewController updating capabilities with first participant list", v12, 2u);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }

      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_50();
      char v14 = *(void (**)(uint64_t))(v13 + 232);
      uint64_t v15 = swift_bridgeObjectRetain();
      v14(v15);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v2 + v9) = 1;
    }
  }
}

void (*InCallControlsCollectionViewController.isOnScreen.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen;
  v3[3] = v1;
  v3[4] = v4;
  uint64_t v5 = (unsigned char *)(v1 + v4);
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_11_0();
  *((unsigned char *)v3 + 40) = *v5;
  return InCallControlsCollectionViewController.isOnScreen.modify;
}

void InCallControlsCollectionViewController.isOnScreen.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 40);
  InCallControlsCollectionViewController.isOnScreen.willset(v4);
  *(unsigned char *)(v2 + v3) = v4;
  free(v1);
}

void *InCallControlsCollectionViewController.controlsManager.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void InCallControlsCollectionViewController.controlsManager.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  OUTLINED_FUNCTION_11_0();
  char v4 = *v3;
  *id v3 = a1;
}

uint64_t (*InCallControlsCollectionViewController.controlsManager.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t InCallControlsCollectionViewController.remoteAudioPaused.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_remoteAudioPaused);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t InCallControlsCollectionViewController.remoteAudioPaused.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_remoteAudioPaused);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *id v3 = a1;
  return result;
}

uint64_t (*InCallControlsCollectionViewController.remoteAudioPaused.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t InCallControlsCollectionViewController.participantsViewControllerDelegate.getter()
{
  return ParticipantGridViewController.participantsViewControllerDelegate.getter(&OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate);
}

uint64_t InCallControlsCollectionViewController.participantsViewControllerDelegate.setter(uint64_t a1, uint64_t a2)
{
  return InCallControlsCollectionViewController.participantsViewControllerDelegate.setter(a1, a2, &OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate);
}

uint64_t (*InCallControlsCollectionViewController.participantsViewControllerDelegate.modify(void *a1))()
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ParticipantGridViewController.participantsViewControllerDelegate.modify;
}

uint64_t key path setter for InCallControlsCollectionViewController.participantsViewControllerDelegate : InCallControlsCollectionViewController(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *a2 + *a5;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v6 + 8) = v5;
  OUTLINED_FUNCTION_23_0();
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallControlsCollectionViewController.inCallControlsCollectionViewControllerDelegate.getter()
{
  return ParticipantGridViewController.participantsViewControllerDelegate.getter(&OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate);
}

uint64_t InCallControlsCollectionViewController.inCallControlsCollectionViewControllerDelegate.setter(uint64_t a1, uint64_t a2)
{
  return InCallControlsCollectionViewController.participantsViewControllerDelegate.setter(a1, a2, &OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate);
}

uint64_t InCallControlsCollectionViewController.participantsViewControllerDelegate.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3 + *a3;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v5 + 8) = a2;
  OUTLINED_FUNCTION_41_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*InCallControlsCollectionViewController.inCallControlsCollectionViewControllerDelegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ParticipantGridViewController.participantsViewControllerDelegate.modify;
}

void *InCallControlsCollectionViewController.collectionView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t InCallControlsCollectionViewController.isAddingParticipantsAllowed.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  OUTLINED_FUNCTION_2();
  if ((*v2 & 0xE0) == 0x20) {
    return 0;
  }
  id v3 = (id *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  OUTLINED_FUNCTION_2();
  if (*v3)
  {
    if (objc_msgSend(*v3, sel_state) != (id)3) {
      return 0;
    }
  }
  if ((InCallControlsCollectionViewController.isLocalMemberAuthorizedToChangeGroupMembership.getter() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = self;
  uint64_t result = (uint64_t)objc_msgSend(v4, sel_supportsConversations);
  if (!result) {
    return result;
  }
  uint64_t v6 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_remoteAudioPaused);
  uint64_t v7 = OUTLINED_FUNCTION_2();
  if (*v6) {
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1
                                                                                 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_features))
                                           + 0xB8))(v7) & 1) != 0)
  {
    if (!*v3) {
      goto LABEL_19;
    }
    id v8 = *v3;
    if (objc_msgSend(v8, sel_state) == (id)3)
    {
      unsigned __int8 v9 = objc_msgSend(v8, sel_isOneToOneFaceTimeMyself);

      if (v9) {
        return 0;
      }
    }
    else
    {
    }
  }
  if (!*v3) {
    goto LABEL_19;
  }
  id v10 = *v3;
  if (objc_msgSend(v10, sel_isVideo))
  {

    goto LABEL_19;
  }
  unsigned __int8 v11 = objc_msgSend(v10, sel_isBackedByGroupSession);

  if ((v11 & 1) == 0) {
    return 0;
  }
LABEL_19:
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isLegacy) == 1) {
    return (uint64_t)objc_msgSend(v4, sel_isAddPersonEnabled);
  }
  else {
    return 1;
  }
}

uint64_t InCallControlsCollectionViewController.isLocalMemberAuthorizedToChangeGroupMembership.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  if (*v1)
  {
    id v2 = *v1;
    char v3 = specialized Conversation.isLocalMemberAuthorizedToChangeGroupMembership()();
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t InCallControlsCollectionViewController.isLinkSharingAllowed.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Participant.State(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Participant(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  unsigned __int8 v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unsigned __int8 v11 = (char *)v27 - v10;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkEnabled) != 1) {
    return 0;
  }
  if (!objc_msgSend(self, sel_supportsConversations)) {
    return 0;
  }
  char v12 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  if (!*v12) {
    return 0;
  }
  id v13 = *v12;
  BOOL v14 = specialized Conversation.isLinkSharingSupported.getter();

  if (!v14) {
    return 0;
  }
  uint64_t v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(*v15 + 16);
  if (!v17) {
    return 1;
  }
  v27[0] = *v15;
  v27[1] = v2;
  uint64_t v18 = v16 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v19 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    _s15ConversationKit11ParticipantVWOcTm_10(v18, (uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
    char v20 = v11[*(int *)(v5 + 24) + 2];
    _s15ConversationKit11ParticipantVWOcTm_10((uint64_t)v11, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    if ((v20 & 1) == 0) {
      break;
    }
LABEL_10:
    outlined destroy of Participant.State((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of Participant.State((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
    v18 += v19;
    if (!--v17)
    {
      uint64_t v22 = 1;
      goto LABEL_12;
    }
  }
  _s15ConversationKit11ParticipantVWOcTm_10((uint64_t)v9, (uint64_t)v4, (void (*)(void))type metadata accessor for Participant.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v25 = (uint64_t)&v4[*(int *)(v24 + 48)];
      outlined consume of Participant.CopresenceInfo?(*(void *)&v4[*(int *)(v24 + 64)], *(void *)&v4[*(int *)(v24 + 64) + 8]);
      outlined destroy of Participant.MediaInfo(v25);
      uint64_t v26 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v4, v26);
      outlined destroy of Participant.State((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of Participant.State((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
      uint64_t v22 = 0;
      break;
    case 6u:
      goto LABEL_10;
    default:
      uint64_t v21 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v4, v21);
      goto LABEL_10;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  return v22;
}

BOOL specialized Conversation.isLinkSharingSupported.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  @nonobjc TUConversation.messagesGroupUUID.getter();
  uint64_t v3 = type metadata accessor for UUID();
  BOOL v4 = __swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1;
  outlined destroy of SystemUpdateNotice?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return v4;
}

uint64_t specialized Conversation.isLocalMemberAuthorizedToChangeGroupMembership()()
{
  id v1 = objc_msgSend(v0, sel_localMember);

  if (!v1) {
    return (uint64_t)objc_msgSend(v0, sel_isOneToOneModeEnabled);
  }
  id v2 = objc_msgSend(v0, sel_link);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = v2;
  id v4 = objc_msgSend(v2, sel_canCreateConversations);

  return (uint64_t)v4;
}

uint64_t InCallControlsCollectionViewController.isLiveCaptionsAllowed.getter()
{
  if (static Platform.current.getter() != 2) {
    return 1;
  }
  if (static Platform.current.getter() != 2) {
    return 0;
  }
  id v0 = InCallControlsCollectionViewController.featureFlags.getter();
  id v1 = objc_msgSend(v0, sel_lagunaLiveCaptionsEnabled);

  return (uint64_t)v1;
}

void InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v91 = v1;
  id v95 = v2;
  LODWORD(v90) = v3;
  LODWORD(v89) = v4;
  uint64_t v6 = v5;
  int v88 = v7;
  unsigned __int8 v9 = v8;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  LODWORD(v87) = *v6;
  v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updatedCapabilitiesWithParticipants] = 0;
  uint64_t v10 = &v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants] = MEMORY[0x1E4FBC860];
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_features;
  uint64_t v12 = one-time initialization token for shared;
  id v13 = v0;
  if (v12 != -1) {
    swift_once();
  }
  BOOL v14 = static Features.shared;
  *(void *)&v0[v11] = static Features.shared;
  uint64_t v15 = &v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_menuHostViewController];
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_menuHostViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController____lazy_storage___featureFlags] = 0;
  uint64_t v16 = &v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity];
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((void *)v16 + 4) = 0;
  uint64_t v17 = (void **)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation];
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation] = 0;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen] = 0;
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager] = 0;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_remoteAudioPaused] = 0;
  OUTLINED_FUNCTION_7_0((uint64_t)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate]);
  OUTLINED_FUNCTION_7_0((uint64_t)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate]);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView] = 0;
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource] = 0;
  uint64_t v18 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkEnabled;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkEnabled] = 0;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsRefreshParticipants] = 0;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsAnimatedDifferences] = 0;
  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceSubject;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  id v20 = v14;
  *(void *)&v13[v19] = PassthroughSubject.init()();
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceDebouncer] = 0;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>);
  OUTLINED_FUNCTION_13_18(v21);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>);
  OUTLINED_FUNCTION_13_18(v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>);
  OUTLINED_FUNCTION_13_18(v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>);
  OUTLINED_FUNCTION_13_18(v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>);
  OUTLINED_FUNCTION_13_18(v25);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>);
  OUTLINED_FUNCTION_13_18(v26);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>);
  OUTLINED_FUNCTION_13_18(v27);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>);
  OUTLINED_FUNCTION_13_18(v28);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>);
  OUTLINED_FUNCTION_13_18(v29);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>);
  OUTLINED_FUNCTION_13_18(v30);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>);
  OUTLINED_FUNCTION_13_18(v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>);
  OUTLINED_FUNCTION_13_18(v32);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>);
  OUTLINED_FUNCTION_13_18(v33);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>);
  OUTLINED_FUNCTION_13_18(v34);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>);
  OUTLINED_FUNCTION_13_18(v35);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>);
  OUTLINED_FUNCTION_13_18(v36);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>);
  OUTLINED_FUNCTION_13_18(v37);
  OUTLINED_FUNCTION_11_0();
  uint64_t v38 = *v17;
  *uint64_t v17 = v9;
  id v92 = v9;

  Array<A>.filterAndSortForInCallControls()();
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_0();
  *uint64_t v10 = v40;
  swift_bridgeObjectRelease();
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode] = v88;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle] = v87;
  v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isLegacy] = v89 & 1;
  v13[v18] = v90 & 1;
  id v41 = objc_msgSend(self, sel_sharedManager);
  type metadata accessor for IDSCapabilitiesChecker();
  char v42 = (void *)swift_allocObject();
  v98[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUIDSLookupManager);
  v98[4] = &protocol witness table for TUIDSLookupManager;
  v98[0] = v41;
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v43 = MEMORY[0x1E4FBC860];
  v42[2] = Dictionary.init(dictionaryLiteral:)();
  v42[3] = Dictionary.init(dictionaryLiteral:)();
  id v42[5] = 0;
  swift_unknownObjectWeakInit();
  v42[6] = v43;
  outlined init with copy of IDSLookupManager((uint64_t)v98, (uint64_t)(v42 + 7));
  char v44 = self;
  id v45 = objc_msgSend(v44, sel_defaultCenter);
  objc_msgSend(v45, sel_addObserver_selector_name_object_, v42, sel_handleLookupManagerDidChangeNotification_, *MEMORY[0x1E4FADEC0], v98[0]);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_capabilitiesChecker] = v42;
  *((void *)v15 + 1) = v91;
  swift_unknownObjectWeakAssign();

  v97.receiver = v13;
  v97.super_class = ObjectType;
  uint64_t v46 = (char *)objc_msgSendSuper2(&v97, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v47 = *(void *)&v46[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_capabilitiesChecker];
  uint64_t v48 = *(void (**)(char *, _UNKNOWN **))(*(void *)v47 + 176);
  uint64_t v49 = v46;
  swift_retain();
  v48(v46, &protocol witness table for InCallControlsCollectionViewController);
  swift_release();
  id v50 = objc_msgSend(v44, sel_defaultCenter);
  objc_msgSend(v50, sel_addObserver_selector_name_object_, v49, sel_handleContentSizeCategoryDidChange_, *MEMORY[0x1E4FB27A8], 0);

  id v51 = objc_msgSend(v44, sel_defaultCenter);
  objc_msgSend(v51, sel_addObserver_selector_name_object_, v49, sel_blockStatusDidUpdate, *MEMORY[0x1E4FADEC8], 0);

  InCallControlsCollectionViewController.configureCellRegistrations()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  uint64_t v91 = &v87;
  OUTLINED_FUNCTION_4();
  uint64_t v89 = v52;
  uint64_t v90 = v53;
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_64();
  v98[0] = *(void *)&v49[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceSubject];
  uint64_t v54 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  OUTLINED_FUNCTION_37_15(v54, v55, v56, v57, v58, v59, v60, v61, v87);
  OUTLINED_FUNCTION_4();
  uint64_t v63 = v62;
  MEMORY[0x1F4188790](v64);
  uint64_t v66 = (char *)&v87 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v96 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  OUTLINED_FUNCTION_39_18(v67, v68, v69, v70, v71, v72, v73, v74, v87);
  uint64_t v76 = OUTLINED_FUNCTION_8(v75);
  MEMORY[0x1F4188790](v76);
  OUTLINED_FUNCTION_63();
  uint64_t v77 = type metadata accessor for NSRunLoop.SchedulerOptions();
  OUTLINED_FUNCTION_68_0(v77);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of SystemUpdateNotice?(v47, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v54);
  swift_release();
  OUTLINED_FUNCTION_14_48();
  uint64_t v78 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = partial apply for closure #1 in InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:);
  *(void *)(v79 + 24) = v78;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop> and conformance Publishers.Debounce<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  uint64_t v80 = Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v81();
  *(void *)&v49[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceDebouncer] = v80;
  swift_release();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v82 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v82 + 16) = xmmword_1C3769620;
  v98[0] = v49;
  uint64_t v83 = v49;
  uint64_t v84 = String.init<A>(reflecting:)();
  uint64_t v86 = v85;
  *(void *)(v82 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v82 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v82 + 32) = v84;
  *(void *)(v82 + 40) = v86;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_28();
}

uint64_t InCallControlsCollectionViewController.configureCellRegistrations()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>?);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  InCallControlsCollectionViewController.createSectionHeaderViewRegistration()();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  uint64_t v8 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_sectionHeaderViewRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v6, v8, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>?);
  swift_endAccess();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  InCallControlsCollectionViewController.createActivityCellRegistration()((void (*)(void))type metadata accessor for InCallControlsActivityCell);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activityCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v11, v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>?);
  swift_endAccess();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  InCallControlsCollectionViewController.createActivityCellRegistration()((void (*)(void))type metadata accessor for InCallControlsParticipantCell);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v17);
  uint64_t v18 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v16, v18, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>?);
  swift_endAccess();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsTitleCell();
  type metadata accessor for UUID();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v22);
  uint64_t v23 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_titleCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v21, v23, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>?);
  swift_endAccess();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>?);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsStatusCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v27);
  uint64_t v28 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_statusCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v26, v28, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>?);
  swift_endAccess();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>?);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v31 = (char *)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsAddParticipantCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v32);
  uint64_t v33 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_addParticipantCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v31, v33, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>?);
  swift_endAccess();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>?);
  MEMORY[0x1F4188790](v34 - 8);
  uint64_t v36 = (char *)&v87 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsShareLinkCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v37);
  uint64_t v38 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v36, v38, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>?);
  swift_endAccess();
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>?);
  MEMORY[0x1F4188790](v39 - 8);
  id v41 = (char *)&v87 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsIgnoreLMIRequestsCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v42);
  uint64_t v43 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_ignoreLMIRequestsCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v41, v43, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>?);
  swift_endAccess();
  if (InCallControlsCollectionViewController.isLiveCaptionsAllowed.getter())
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>?);
    MEMORY[0x1F4188790](v44 - 8);
    uint64_t v46 = (char *)&v87 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for InCallControlsToggleCaptionsCell();
    UICollectionView.CellRegistration.init(handler:)();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>);
    __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v47);
    uint64_t v48 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_toggleCaptionsCellRegistration;
    swift_beginAccess();
    outlined assign with take of CompactPresentable?((uint64_t)v46, v48, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>?);
    swift_endAccess();
  }
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>?);
  MEMORY[0x1F4188790](v49 - 8);
  id v51 = (char *)&v87 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsOpenMessagesCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v51, 0, 1, v52);
  uint64_t v53 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_openMessagesCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v51, v53, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>?);
  swift_endAccess();
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?);
  MEMORY[0x1F4188790](v54 - 8);
  uint64_t v56 = (char *)&v87 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsBlockCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v56, 0, 1, v57);
  uint64_t v58 = v0
      + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_blockUnknownCallerCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v56, v58, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?);
  swift_endAccess();
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>?);
  MEMORY[0x1F4188790](v59 - 8);
  uint64_t v61 = (char *)&v87 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsReportCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v61, 0, 1, v62);
  uint64_t v63 = v0
      + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_reportUnknownCallerCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v61, v63, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>?);
  swift_endAccess();
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>?);
  MEMORY[0x1F4188790](v64 - 8);
  uint64_t v66 = (char *)&v87 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewListCell);
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v66, 0, 1, v67);
  uint64_t v68 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_fallbackCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v66, v68, &demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>?);
  swift_endAccess();
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>?);
  MEMORY[0x1F4188790](v69 - 8);
  uint64_t v71 = (char *)&v87 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsPTTTitleCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v72);
  uint64_t v73 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_pttTitleCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v71, v73, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>?);
  swift_endAccess();
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>?);
  MEMORY[0x1F4188790](v74 - 8);
  uint64_t v76 = (char *)&v87 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsPTTLeaveChannelCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v76, 0, 1, v77);
  uint64_t v78 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_leavePTTChannelCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v76, v78, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>?);
  swift_endAccess();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for InCallControlsPTTLeaveChannelFooterView();
  UICollectionView.SupplementaryRegistration.init(elementKind:handler:)();
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v79);
  uint64_t v80 = v0
      + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_leaveChannelFooterViewRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v3, v80, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>?);
  swift_endAccess();
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>?);
  MEMORY[0x1F4188790](v81 - 8);
  uint64_t v83 = (char *)&v87 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsPTTOpenAppCell();
  UICollectionView.CellRegistration.init(handler:)();
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>);
  __swift_storeEnumTagSinglePayload((uint64_t)v83, 0, 1, v84);
  uint64_t v85 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_openPTTAppCellRegistration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v83, v85, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>?);
  return swift_endAccess();
}

void closure #1 in InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    int v3 = (unsigned char *)v2;
    uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
    if (v4)
    {
      uint64_t v5 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsRefreshParticipants;
      int v6 = *(unsigned __int8 *)(v2
                              + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsRefreshParticipants);
      uint64_t v7 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsAnimatedDifferences;
      int v8 = *(unsigned __int8 *)(v2
                              + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsAnimatedDifferences);
      id v9 = v4;
      InCallControlsCollectionViewController.reallyUpdateDataSource(_:shouldRefreshParticipants:animatingDifferences:)(v9, v6, v8);

      v3[v5] = 0;
      v3[v7] = 0;
    }
  }
}

uint64_t InCallControlsCollectionViewController.reallyUpdateDataSource(_:shouldRefreshParticipants:animatingDifferences:)(void *a1, int a2, int a3)
{
  int v268 = a2;
  uint64_t v288 = type metadata accessor for Participant.State(0);
  uint64_t v6 = MEMORY[0x1F4188790](v288);
  uint64_t v270 = (char *)&v261 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v279 = (char *)&v261 - v8;
  uint64_t v292 = type metadata accessor for Participant(0);
  uint64_t v281 = *(void *)(v292 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v292);
  uint64_t v271 = (uint64_t)&v261 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v275 = (char *)&v261 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v291 = (uint64_t)&v261 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v287 = (uint64_t)&v261 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v278 = (char *)&v261 - v17;
  uint64_t v274 = v3;
  uint64_t v18 = (void *)InCallControlsCollectionViewController.visibleCollectionViewSections()();
  v299._rawValue = (void *)MEMORY[0x1E4FBC860];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  uint64_t v269 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v261 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  lazy protocol witness table accessor for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  NSDiffableDataSourceSnapshot.init()();
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)v18);
  uint64_t v23 = v18[2];
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_221;
  }
  int v266 = a3;
  swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  unint64_t v286 = (unint64_t)"e";
  uint64_t v272 = v19;
  uint64_t v277 = v21;
  uint64_t v284 = v22;
  Swift::String v285 = v18;
  uint64_t v273 = v23;
  uint64_t v267 = a1;
  uint64_t v25 = (_OWORD *)&protocol conformance descriptor for RejectedRemoteControlRequesetContext;
  while (2)
  {
    uint64_t v26 = (char *)v18 + v24++;
    uint64_t v27 = 0xEF79746976697463;
    switch(v26[32])
    {
      case 1:
        goto LABEL_13;
      case 2:
        uint64_t v27 = 0xEC00000073746E61;
        goto LABEL_13;
      case 3:
        uint64_t v27 = 0xE500000000000000;
        goto LABEL_13;
      case 4:
        uint64_t v27 = 0xEE00736E6F697470;
        goto LABEL_13;
      case 5:
        uint64_t v27 = v286 | 0x8000000000000000;
        goto LABEL_13;
      case 6:
        uint64_t v27 = 0xEC00000073656761;
        goto LABEL_13;
      case 7:
        uint64_t v27 = 0xEE0074726F706552;
        goto LABEL_13;
      case 8:
        uint64_t v27 = 0xE800000000000000;
        goto LABEL_13;
      case 9:
        uint64_t v27 = 0xEF6C656E6E616843;
        goto LABEL_13;
      case 10:
        uint64_t v27 = 0xEA00000000007070;
LABEL_13:
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_17;
        }
        if (v23 != v24) {
          continue;
        }
        swift_bridgeObjectRelease();
        break;
      default:
        swift_bridgeObjectRelease();
LABEL_17:
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
        unint64_t v29 = *(void *)(v22 - 8);
        uint64_t v23 = *(void *)(v29 + 72);
        uint64_t v18 = (void *)((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_1C3769620;
        uint64_t v27 = (uint64_t)v18 + v30;
        if (one-time initialization token for titleRowIdentifier == -1) {
          goto LABEL_18;
        }
        goto LABEL_245;
    }
    break;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v39 = 0;
  while (1)
  {
    unint64_t v29 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      swift_once();
LABEL_18:
      uint64_t v31 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.titleRowIdentifier);
      uint64_t v32 = v22;
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
      v33(v27, v31, v32);
      LOBYTE(v295) = 0;
      NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
      uint64_t v34 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v34);
      uint64_t v27 = (uint64_t)&v261 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
      v33(v27, v31, v32);
      rawValue = v299._rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, (uint64_t)rawValue);
      }
      unint64_t v38 = rawValue[2];
      unint64_t v37 = rawValue[3];
      uint64_t v22 = v284;
      if (v38 >= v37 >> 1) {
        rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, (uint64_t)rawValue);
      }
      rawValue[2] = v38 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))((char *)v18 + (void)rawValue + v38 * v23, v27, v22);
      v299._rawValue = rawValue;
      uint64_t v19 = v272;
      uint64_t v18 = v285;
      uint64_t v23 = v273;
      uint64_t v25 = &protocol conformance descriptor for RejectedRemoteControlRequesetContext;
      goto LABEL_23;
    }
    uint64_t v27 = 0xE500000000000000;
    switch(*((unsigned char *)v18 + v39 + 32))
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_37;
      case 2:
        uint64_t v27 = 0xEC00000073746E61;
        break;
      case 4:
        uint64_t v27 = 0xEE00736E6F697470;
        break;
      case 5:
        uint64_t v27 = v286 | 0x8000000000000000;
        break;
      case 6:
        uint64_t v27 = 0xEC00000073656761;
        break;
      case 7:
        uint64_t v27 = 0xEE0074726F706552;
        break;
      case 8:
        uint64_t v27 = 0xE800000000000000;
        break;
      case 9:
        uint64_t v27 = 0xEF6C656E6E616843;
        break;
      case 0xA:
        uint64_t v27 = 0xEA00000000007070;
        break;
      default:
        break;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v40) {
      break;
    }
    ++v39;
    if (v29 == v23)
    {
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
  }
LABEL_37:
  swift_bridgeObjectRelease();
  uint64_t v41 = v274 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
  swift_beginAccess();
  outlined init with copy of FeatureEligibility?(v41, (uint64_t)&v293, &demangling cache variable for type metadata for Activity?);
  if (v294)
  {
    uint64_t v42 = outlined init with take of Notice(&v293, (uint64_t)&v295);
    uint64_t v290 = &v261;
    uint64_t v43 = *(void *)(v22 - 8);
    MEMORY[0x1F4188790](v42);
    uint64_t v45 = (char *)&v261 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    MEMORY[0x1F4188790](v46 - 8);
    uint64_t v48 = (char *)&v261 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v49 = v296;
    uint64_t v50 = v297;
    __swift_project_boxed_opaque_existential_1(&v295, v296);
    unint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 96))(v49, v50);
    UUID.init(hash:)(v51, (uint64_t)v48);
    if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v22) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.conversationControls);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      BOOL v55 = os_log_type_enabled(v53, v54);
      uint64_t v19 = v272;
      uint64_t v18 = v285;
      if (v55)
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl(&dword_1C2F90000, v53, v54, "Unable to create activityMetadataUUID", v56, 2u);
        MEMORY[0x1C87760E0](v56, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
      *(_OWORD *)(swift_allocObject() + 16) = v25[98];
      UUID.init()();
      LOBYTE(v293) = 1;
      uint64_t v27 = (uint64_t)v277;
      NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v45, v48, v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
      unint64_t v57 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = v25[98];
      (*(void (**)(unint64_t, char *, uint64_t))(v43 + 16))(v58 + v57, v45, v22);
      LOBYTE(v293) = 1;
      uint64_t v59 = v272;
      uint64_t v27 = (uint64_t)v277;
      NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = v45;
      uint64_t v19 = v59;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v60, v22);
      uint64_t v18 = v285;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v295);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v293, &demangling cache variable for type metadata for Activity?);
  }
LABEL_47:
  swift_bridgeObjectRetain();
  uint64_t v61 = 0;
  while (2)
  {
    unint64_t v29 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      goto LABEL_234;
    }
    uint64_t v27 = 0xE500000000000000;
    switch(*((unsigned char *)v18 + v61 + 32))
    {
      case 1:
        uint64_t v27 = 0xEF79746976697463;
        goto LABEL_58;
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_61;
      case 4:
        uint64_t v27 = 0xEE00736E6F697470;
        goto LABEL_58;
      case 5:
        uint64_t v27 = v286 | 0x8000000000000000;
        goto LABEL_58;
      case 6:
        uint64_t v27 = 0xEC00000073656761;
        goto LABEL_58;
      case 7:
        uint64_t v27 = 0xEE0074726F706552;
        goto LABEL_58;
      case 8:
        uint64_t v27 = 0xE800000000000000;
        goto LABEL_58;
      case 9:
        uint64_t v27 = 0xEF6C656E6E616843;
        goto LABEL_58;
      case 0xA:
        uint64_t v27 = 0xEA00000000007070;
        goto LABEL_58;
      default:
LABEL_58:
        char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v62 & 1) == 0)
        {
          ++v61;
          if (v29 == v23)
          {
            swift_bridgeObjectRelease();
            goto LABEL_119;
          }
          continue;
        }
LABEL_61:
        swift_bridgeObjectRelease();
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
        uint64_t v64 = *(void *)(v22 - 8);
        uint64_t v65 = *(unsigned __int8 *)(v64 + 80);
        uint64_t v66 = (v65 + 32) & ~v65;
        uint64_t v282 = *(void *)(v64 + 72);
        uint64_t v264 = v63;
        uint64_t v263 = v66 + v282;
        uint64_t v262 = v65 | 7;
        uint64_t v67 = swift_allocObject();
        long long v261 = xmmword_1C3769620;
        *(_OWORD *)(v67 + 16) = xmmword_1C3769620;
        uint64_t v283 = v66;
        uint64_t v68 = v67 + v66;
        if (one-time initialization token for statusRowIdentifier != -1) {
          swift_once();
        }
        uint64_t v69 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.statusRowIdentifier);
        uint64_t v23 = v64 + 16;
        uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
        v70(v68, v69, v22);
        LOBYTE(v295) = 2;
        NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
        uint64_t v71 = swift_bridgeObjectRelease();
        uint64_t v72 = *(void *)(v64 + 64);
        MEMORY[0x1F4188790](v71);
        uint64_t v289 = (void (*)(char *, uint64_t, uint64_t))v70;
        uint64_t v290 = (long long *)(v64 + 16);
        v70((uint64_t)&v261 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0), v69, v22);
        uint64_t v73 = v299._rawValue;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v73 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, (uint64_t)v73);
        }
        unint64_t v75 = v73[2];
        unint64_t v74 = v73[3];
        if (v75 >= v74 >> 1) {
          uint64_t v73 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1, (uint64_t)v73);
        }
        v73[2] = v75 + 1;
        uint64_t v76 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v64 + 32);
        unint64_t v29 = v64 + 32;
        uint64_t v276 = v64 + 32;
        uint64_t v280 = v76;
        v76((unint64_t)v73 + v283 + v75 * v282, (char *)&v261 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
        v299._rawValue = v73;
        uint64_t v77 = MEMORY[0x1E4FBC860];
        uint64_t v295 = MEMORY[0x1E4FBC860];
        uint64_t v78 = (uint64_t *)(v274 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
        swift_beginAccess();
        v265 = v78;
        uint64_t v18 = (void *)*v78;
        uint64_t v298 = v77;
        uint64_t v79 = v18[2];
        swift_bridgeObjectRetain();
        if (!v79)
        {
          uint64_t v91 = v77;
          uint64_t v81 = v281;
          goto LABEL_82;
        }
        unint64_t v80 = 0;
        uint64_t v81 = v281;
        uint64_t v27 = (uint64_t)v279;
        uint64_t v82 = (uint64_t)v278;
        while (2)
        {
          if (v80 >= v18[2]) {
            goto LABEL_243;
          }
          unint64_t v83 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
          uint64_t v23 = *(void *)(v81 + 72);
          unint64_t v29 = v80 + 1;
          _s15ConversationKit11ParticipantVWOcTm_10((uint64_t)v18 + v83 + v23 * v80, v82, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_10(v82, v27, (void (*)(void))type metadata accessor for Participant.State);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 2u:
              uint64_t v84 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v27, v84);
              outlined destroy of Participant.State(v82, (void (*)(void))type metadata accessor for Participant);
              goto LABEL_79;
            case 4u:
              uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              uint64_t v86 = v27 + *(int *)(v85 + 48);
              outlined consume of Participant.CopresenceInfo?(*(void *)(v27 + *(int *)(v85 + 64)), *(void *)(v27 + *(int *)(v85 + 64) + 8));
              outlined destroy of Participant.MediaInfo(v86);
              goto LABEL_73;
            case 6u:
              goto LABEL_74;
            default:
LABEL_73:
              uint64_t v87 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v87 - 8) + 8))(v27, v87);
LABEL_74:
              outlined init with take of Participant(v82, v287);
              uint64_t v88 = v298;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v88 + 16) + 1, 1);
                uint64_t v88 = v298;
              }
              unint64_t v90 = *(void *)(v88 + 16);
              unint64_t v89 = *(void *)(v88 + 24);
              if (v90 >= v89 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
                uint64_t v88 = v298;
              }
              *(void *)(v88 + 16) = v90 + 1;
              outlined init with take of Participant(v287, v88 + v83 + v90 * v23);
              uint64_t v81 = v281;
              uint64_t v27 = (uint64_t)v279;
              uint64_t v82 = (uint64_t)v278;
LABEL_79:
              unint64_t v80 = v29;
              if (v79 != v29) {
                continue;
              }
              uint64_t v91 = v298;
              break;
          }
          break;
        }
LABEL_82:
        swift_bridgeObjectRelease();
        uint64_t v92 = *(void *)(v91 + 16);
        if (v92)
        {
          uint64_t v298 = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 0);
          uint64_t v94 = *(unsigned __int8 *)(v81 + 80);
          uint64_t v287 = v91;
          uint64_t v95 = v91 + ((v94 + 32) & ~v94);
          unint64_t v29 = *(void *)(v81 + 72);
          do
          {
            MEMORY[0x1F4188790](v93);
            uint64_t v96 = v291;
            _s15ConversationKit11ParticipantVWOcTm_10(v95, v291, (void (*)(void))type metadata accessor for Participant);
            v289((char *)&v261 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0), v96 + *(int *)(v292 + 20), v22);
            outlined destroy of Participant.State(v96, (void (*)(void))type metadata accessor for Participant);
            uint64_t v97 = v298;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v97 + 16) + 1, 1);
              uint64_t v97 = v298;
            }
            unint64_t v99 = *(void *)(v97 + 16);
            unint64_t v98 = *(void *)(v97 + 24);
            if (v99 >= v98 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
              uint64_t v97 = v298;
            }
            *(void *)(v97 + 16) = v99 + 1;
            unint64_t v100 = v97 + v283 + v99 * v282;
            uint64_t v22 = v284;
            uint64_t v93 = v280(v100, (char *)&v261 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0), v284);
            uint64_t v298 = v97;
            v95 += v29;
            --v92;
          }
          while (v92);
        }
        swift_release();
        specialized Array.append<A>(contentsOf:)();
        uint64_t v23 = *v265;
        uint64_t v101 = MEMORY[0x1E4FBC860];
        uint64_t v298 = MEMORY[0x1E4FBC860];
        uint64_t v102 = *(void *)(v23 + 16);
        swift_bridgeObjectRetain();
        uint64_t v103 = (uint64_t)v275;
        if (!v102)
        {
          uint64_t v116 = v101;
          uint64_t v105 = v281;
          goto LABEL_104;
        }
        unint64_t v104 = 0;
        uint64_t v18 = &demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?);
        uint64_t v105 = v281;
        uint64_t v27 = (uint64_t)v270;
        while (2)
        {
          if (v104 >= *(void *)(v23 + 16)) {
            goto LABEL_244;
          }
          unint64_t v106 = v104 + 1;
          _s15ConversationKit11ParticipantVWOcTm_10(v23+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v104, v103, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_10(v103, v27, (void (*)(void))type metadata accessor for Participant.State);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 2u:
              uint64_t v107 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v27, v107);
              outlined init with take of Participant(v103, v271);
              uint64_t v108 = v298;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v108 + 16) + 1, 1);
                uint64_t v108 = v298;
              }
              unint64_t v110 = *(void *)(v108 + 16);
              unint64_t v109 = *(void *)(v108 + 24);
              if (v110 >= v109 >> 1) {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
              }
              uint64_t v111 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v110);
              TPNumberPadCharacter.rawValue.getter(v111);
              uint64_t v27 = (uint64_t)v270;
              uint64_t v103 = (uint64_t)v275;
              goto LABEL_101;
            case 4u:
              uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              uint64_t v113 = v27 + *(int *)(v112 + 48);
              outlined consume of Participant.CopresenceInfo?(*(void *)(v27 + *(int *)(v112 + 64)), *(void *)(v27 + *(int *)(v112 + 64) + 8));
              uint64_t v114 = v113;
              uint64_t v103 = (uint64_t)v275;
              outlined destroy of Participant.MediaInfo(v114);
              goto LABEL_99;
            case 6u:
              goto LABEL_100;
            default:
LABEL_99:
              uint64_t v115 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(v27, v115);
LABEL_100:
              outlined destroy of Participant.State(v103, (void (*)(void))type metadata accessor for Participant);
LABEL_101:
              unint64_t v104 = v106;
              if (v102 != v106) {
                continue;
              }
              uint64_t v116 = v298;
              break;
          }
          break;
        }
LABEL_104:
        swift_bridgeObjectRelease();
        uint64_t v117 = *(void *)(v116 + 16);
        uint64_t v18 = v285;
        if (v117)
        {
          uint64_t v298 = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v117, 0);
          uint64_t v119 = v116 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
          uint64_t v120 = *(void *)(v105 + 72);
          do
          {
            MEMORY[0x1F4188790](v118);
            uint64_t v121 = v291;
            _s15ConversationKit11ParticipantVWOcTm_10(v119, v291, (void (*)(void))type metadata accessor for Participant);
            v289((char *)&v261 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0), v121 + *(int *)(v292 + 20), v22);
            outlined destroy of Participant.State(v121, (void (*)(void))type metadata accessor for Participant);
            uint64_t v122 = v298;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v122 + 16) + 1, 1);
              uint64_t v122 = v298;
            }
            uint64_t v123 = *(void *)(v122 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v123);
            uint64_t v124 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v123);
            uint64_t v118 = TPNumberPadCharacter.rawValue.getter(v124);
            v119 += v120;
            --v117;
            uint64_t v18 = v285;
          }
          while (v117);
        }
        swift_release();
        specialized Array.append<A>(contentsOf:)();
        LOBYTE(v298) = 2;
        swift_bridgeObjectRetain();
        NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
        swift_bridgeObjectRelease();
        uint64_t v125 = swift_allocObject();
        *(_OWORD *)(v125 + 16) = v261;
        uint64_t v126 = v125 + v283;
        if (one-time initialization token for addParticipantRowIdentifier != -1) {
          swift_once();
        }
        uint64_t v127 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier);
        v289((char *)v126, v127, v22);
        LOBYTE(v298) = 2;
        NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
        swift_bridgeObjectRelease();
        if (v268) {
          specialized Array.append<A>(contentsOf:)();
        }
        else {
          uint64_t v128 = swift_bridgeObjectRelease();
        }
        uint64_t v23 = v273;
        MEMORY[0x1F4188790](v128);
        CGRect v129 = (char *)&v261 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
        v289(v129, v127, v22);
        uint64_t v27 = (uint64_t)v299._rawValue;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, v27);
        }
        uint64_t v19 = v272;
        unint64_t v131 = *(void *)(v27 + 16);
        unint64_t v130 = *(void *)(v27 + 24);
        if (v131 >= v130 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v130 > 1, v131 + 1, 1, v27);
        }
        *(void *)(v27 + 16) = v131 + 1;
        v280(v27 + v283 + v131 * v282, v129, v22);
        v299._rawValue = (void *)v27;
        uint64_t v25 = &protocol conformance descriptor for RejectedRemoteControlRequesetContext;
LABEL_119:
        swift_bridgeObjectRetain();
        uint64_t v132 = 0;
        while (2)
        {
          unint64_t v29 = v132 + 1;
          if (__OFADD__(v132, 1)) {
            goto LABEL_235;
          }
          switch(*((unsigned char *)v18 + v132 + 32))
          {
            case 3:
              swift_bridgeObjectRelease();
              goto LABEL_125;
            default:
              uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v27 & 1) == 0)
              {
                ++v132;
                if (v29 == v23)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_132;
                }
                continue;
              }
LABEL_125:
              swift_bridgeObjectRelease();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
              uint64_t v133 = *(void *)(v22 - 8);
              uint64_t v134 = *(void *)(v133 + 72);
              unint64_t v135 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
              uint64_t v136 = swift_allocObject();
              *(_OWORD *)(v136 + 16) = v25[98];
              unint64_t v137 = v136 + v135;
              if (one-time initialization token for shareLinkRowIdentifier != -1) {
                swift_once();
              }
              uint64_t v138 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.shareLinkRowIdentifier);
              uint64_t v139 = *(void (**)(unint64_t, uint64_t, uint64_t))(v133 + 16);
              v139(v137, v138, v22);
              LOBYTE(v295) = 3;
              NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
              uint64_t v140 = swift_bridgeObjectRelease();
              MEMORY[0x1F4188790](v140);
              uint64_t v142 = (char *)&v261 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
              v139((unint64_t)v142, v138, v22);
              uint64_t v27 = (uint64_t)v299._rawValue;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, v27);
              }
              unint64_t v144 = *(void *)(v27 + 16);
              unint64_t v143 = *(void *)(v27 + 24);
              uint64_t v18 = v285;
              if (v144 >= v143 >> 1) {
                uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v143 > 1, v144 + 1, 1, v27);
              }
              *(void *)(v27 + 16) = v144 + 1;
              unint64_t v145 = v27 + v135 + v144 * v134;
              uint64_t v22 = v284;
              (*(void (**)(unint64_t, char *, uint64_t))(v133 + 32))(v145, v142, v284);
              v299._rawValue = (void *)v27;
              uint64_t v19 = v272;
              uint64_t v23 = v273;
LABEL_132:
              swift_bridgeObjectRetain();
              uint64_t v146 = 0;
              while (2)
              {
                unint64_t v29 = v146 + 1;
                if (__OFADD__(v146, 1)) {
                  goto LABEL_236;
                }
                switch(*((unsigned char *)v18 + v146 + 32))
                {
                  case 4:
                    swift_bridgeObjectRelease();
                    goto LABEL_138;
                  default:
                    uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v27 & 1) == 0)
                    {
                      ++v146;
                      if (v29 == v23)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_145;
                      }
                      continue;
                    }
LABEL_138:
                    swift_bridgeObjectRelease();
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                    uint64_t v147 = *(void *)(v22 - 8);
                    uint64_t v148 = *(void *)(v147 + 72);
                    unint64_t v149 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
                    uint64_t v150 = swift_allocObject();
                    *(_OWORD *)(v150 + 16) = xmmword_1C3769620;
                    unint64_t v151 = v150 + v149;
                    if (one-time initialization token for toggleCaptionsRowIdentifier != -1) {
                      swift_once();
                    }
                    uint64_t v152 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleCaptionsRowIdentifier);
                    uint64_t v153 = *(void (**)(unint64_t, uint64_t, uint64_t))(v147 + 16);
                    v153(v151, v152, v22);
                    LOBYTE(v295) = 4;
                    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                    uint64_t v154 = swift_bridgeObjectRelease();
                    MEMORY[0x1F4188790](v154);
                    uint64_t v156 = (char *)&v261 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
                    v153((unint64_t)v156, v152, v22);
                    uint64_t v27 = (uint64_t)v299._rawValue;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, v27);
                    }
                    unint64_t v158 = *(void *)(v27 + 16);
                    unint64_t v157 = *(void *)(v27 + 24);
                    uint64_t v18 = v285;
                    if (v158 >= v157 >> 1) {
                      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v158 + 1, 1, v27);
                    }
                    *(void *)(v27 + 16) = v158 + 1;
                    unint64_t v159 = v27 + v149 + v158 * v148;
                    uint64_t v22 = v284;
                    (*(void (**)(unint64_t, char *, uint64_t))(v147 + 32))(v159, v156, v284);
                    v299._rawValue = (void *)v27;
                    uint64_t v19 = v272;
                    uint64_t v23 = v273;
LABEL_145:
                    swift_bridgeObjectRetain();
                    unint64_t v29 = 0;
                    while (2)
                    {
                      unint64_t v160 = v29 + 1;
                      if (__OFADD__(v29, 1)) {
                        goto LABEL_237;
                      }
                      uint64_t v27 = 0xE500000000000000;
                      switch(*((unsigned char *)v18 + v29 + 32))
                      {
                        case 1:
                          uint64_t v27 = 0xEF79746976697463;
                          goto LABEL_156;
                        case 2:
                          uint64_t v27 = 0xEC00000073746E61;
                          goto LABEL_156;
                        case 4:
                          uint64_t v27 = 0xEE00736E6F697470;
                          goto LABEL_156;
                        case 5:
                          swift_bridgeObjectRelease();
                          goto LABEL_159;
                        case 6:
                          uint64_t v27 = 0xEC00000073656761;
                          goto LABEL_156;
                        case 7:
                          uint64_t v27 = 0xEE0074726F706552;
                          goto LABEL_156;
                        case 8:
                          uint64_t v27 = 0xE800000000000000;
                          goto LABEL_156;
                        case 9:
                          uint64_t v27 = 0xEF6C656E6E616843;
                          goto LABEL_156;
                        case 0xA:
                          uint64_t v27 = 0xEA00000000007070;
                          goto LABEL_156;
                        default:
LABEL_156:
                          char v161 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          if ((v161 & 1) == 0)
                          {
                            ++v29;
                            if (v160 == v23)
                            {
                              swift_bridgeObjectRelease();
                              goto LABEL_164;
                            }
                            continue;
                          }
LABEL_159:
                          swift_bridgeObjectRelease();
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                          uint64_t v162 = *(void *)(v22 - 8);
                          unint64_t v163 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
                          uint64_t v164 = swift_allocObject();
                          *(_OWORD *)(v164 + 16) = xmmword_1C3769620;
                          unint64_t v165 = v164 + v163;
                          if (one-time initialization token for toggleIgnoreLMIRequestsRowIdentifier != -1) {
                            swift_once();
                          }
                          uint64_t v166 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.toggleIgnoreLMIRequestsRowIdentifier);
                          uint64_t v167 = *(void (**)(unint64_t, uint64_t, uint64_t))(v162 + 16);
                          v167(v165, v166, v22);
                          LOBYTE(v295) = 5;
                          NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                          uint64_t v168 = swift_bridgeObjectRelease();
                          MEMORY[0x1F4188790](v168);
                          uint64_t v170 = (char *)&v261 - ((v169 + 15) & 0xFFFFFFFFFFFFFFF0);
                          v167((unint64_t)v170, v166, v22);
                          uint64_t v171 = v299._rawValue;
                          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          {
                            uint64_t v171 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v171[2] + 1, 1, (uint64_t)v171);
                            v299._rawValue = v171;
                          }
                          uint64_t v23 = v273;
                          uint64_t v172 = v171[2];
                          uint64_t v27 = (uint64_t)&v299;
                          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v172);
                          uint64_t v173 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v172, (uint64_t)v170);
                          TPNumberPadCharacter.rawValue.getter(v173);
LABEL_164:
                          uint64_t v21 = v277;
                          swift_bridgeObjectRetain();
                          uint64_t v174 = 0;
                          while (2)
                          {
                            unint64_t v29 = v174 + 1;
                            if (__OFADD__(v174, 1)) {
                              goto LABEL_238;
                            }
                            switch(*((unsigned char *)v18 + v174 + 32))
                            {
                              case 6:
                                swift_bridgeObjectRelease();
                                goto LABEL_170;
                              default:
                                uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                if ((v27 & 1) == 0)
                                {
                                  ++v174;
                                  if (v29 == v23) {
                                    goto LABEL_173;
                                  }
                                  continue;
                                }
LABEL_170:
                                swift_bridgeObjectRelease();
                                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                                uint64_t v175 = *(void *)(v22 - 8);
                                uint64_t v176 = swift_allocObject();
                                uint64_t v177 = specialized static Array._adoptStorage(_:count:)(v176, 1);
                                uint64_t v179 = v178;
                                if (one-time initialization token for openMessagesRowIdentifier != -1) {
                                  swift_once();
                                }
                                uint64_t v180 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.openMessagesRowIdentifier);
                                (*(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 16))(v179, v180, v22);
                                TPNumberPadCharacter.rawValue.getter(v177);
                                LOBYTE(v295) = 6;
                                uint64_t v27 = (uint64_t)v21;
                                NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
LABEL_173:
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRetain();
                                uint64_t v181 = 0;
                                while (2)
                                {
                                  unint64_t v29 = v181 + 1;
                                  if (__OFADD__(v181, 1)) {
                                    goto LABEL_239;
                                  }
                                  switch(*((unsigned char *)v18 + v181 + 32))
                                  {
                                    case 7:
                                      swift_bridgeObjectRelease();
                                      goto LABEL_179;
                                    default:
                                      uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      swift_bridgeObjectRelease();
                                      if ((v27 & 1) == 0)
                                      {
                                        ++v181;
                                        if (v29 == v23)
                                        {
                                          swift_bridgeObjectRelease();
                                          goto LABEL_193;
                                        }
                                        continue;
                                      }
LABEL_179:
                                      swift_bridgeObjectRelease();
                                      uint64_t v182 = (id *)(v274
                                                  + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
                                      swift_beginAccess();
                                      if (*v182)
                                      {
                                        id v183 = *v182;
                                        BOOL v184 = specialized Conversation.isInitiatorContact.getter();

                                        if (!v184)
                                        {
                                          id v185 = v183;
                                          BOOL v186 = specialized Conversation.hasExactlyOneRemoteParticipant.getter();

                                          if (!v186)
                                          {
                                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                                            uint64_t v187 = *(void *)(v22 - 8);
                                            uint64_t v188 = swift_allocObject();
                                            uint64_t v189 = specialized static Array._adoptStorage(_:count:)(v188, 1);
                                            uint64_t v191 = v190;
                                            if (one-time initialization token for reportUnknownRowIdentifier != -1) {
                                              swift_once();
                                            }
                                            uint64_t v192 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier);
                                            double v193 = *(void (**)(uint64_t, uint64_t, uint64_t))(v187 + 16);
                                            v193(v191, v192, v22);
                                            TPNumberPadCharacter.rawValue.getter(v189);
                                            LOBYTE(v298) = 7;
                                            Swift::String v194 = v277;
                                            NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                                            uint64_t v195 = swift_bridgeObjectRelease();
                                            MEMORY[0x1F4188790](v195);
                                            uint64_t v197 = (char *)&v261 - ((v196 + 15) & 0xFFFFFFFFFFFFFFF0);
                                            v193((uint64_t)v197, v192, v22);
                                            uint64_t v21 = v194;
                                            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                                            uint64_t v198 = *((void *)v299._rawValue + 2);
                                            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v198);
                                            uint64_t v199 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v198, (uint64_t)v197);
                                            TPNumberPadCharacter.rawValue.getter(v199);
                                            uint64_t v19 = v272;
                                            uint64_t v23 = v273;
                                          }
                                        }
                                        id v200 = InCallControlsCollectionViewController.featureFlags.getter();
                                        LODWORD(v201) = objc_msgSend(v200, sel_unknownInitiatorReportEnabled);

                                        if (v201)
                                        {
                                          id v202 = v183;
                                          Swift::Int v201 = specialized Conversation.unknownHandles.getter();

                                          uint64_t v203 = specialized Array.count.getter(v201);
                                          swift_bridgeObjectRelease();
                                          LOBYTE(v201) = v203 != 0;
                                        }
                                        id v204 = v183;
                                        uint64_t v27 = specialized Conversation.allParticipantsAreUnknownContacts.getter();

                                        if (v201 & 1) != 0 || (v27)
                                        {
                                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                                          uint64_t v205 = *(void *)(v22 - 8);
                                          uint64_t v206 = swift_allocObject();
                                          uint64_t v207 = specialized static Array._adoptStorage(_:count:)(v206, 1);
                                          uint64_t v209 = v208;
                                          if (one-time initialization token for blockUnkownRowIdentifier != -1) {
                                            swift_once();
                                          }
                                          uint64_t v210 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier);
                                          uint64_t v211 = *(void (**)(uint64_t, uint64_t, uint64_t))(v205 + 16);
                                          v211(v209, v210, v22);
                                          TPNumberPadCharacter.rawValue.getter(v207);
                                          LOBYTE(v298) = 7;
                                          uint64_t v212 = v277;
                                          NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                                          uint64_t v213 = swift_bridgeObjectRelease();
                                          MEMORY[0x1F4188790](v213);
                                          uint64_t v215 = (char *)&v261 - ((v214 + 15) & 0xFFFFFFFFFFFFFFF0);
                                          v211((uint64_t)v215, v210, v22);
                                          uint64_t v21 = v212;
                                          uint64_t v27 = (uint64_t)&v299;
                                          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                                          uint64_t v216 = *((void *)v299._rawValue + 2);
                                          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v216);
                                          uint64_t v217 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v216, (uint64_t)v215);
                                          TPNumberPadCharacter.rawValue.getter(v217);

                                          uint64_t v19 = v272;
                                          uint64_t v23 = v273;
                                        }
                                        else
                                        {
                                        }
                                      }
LABEL_193:
                                      swift_bridgeObjectRetain();
                                      uint64_t v218 = 0;
                                      while (2)
                                      {
                                        unint64_t v29 = v218 + 1;
                                        if (__OFADD__(v218, 1)) {
                                          goto LABEL_240;
                                        }
                                        switch(*((unsigned char *)v18 + v218 + 32))
                                        {
                                          case 8:
                                            swift_bridgeObjectRelease();
                                            goto LABEL_199;
                                          default:
                                            uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            swift_bridgeObjectRelease();
                                            if ((v27 & 1) == 0)
                                            {
                                              ++v218;
                                              if (v29 == v23)
                                              {
                                                swift_bridgeObjectRelease();
                                                goto LABEL_202;
                                              }
                                              continue;
                                            }
LABEL_199:
                                            swift_bridgeObjectRelease();
                                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                                            uint64_t v219 = *(void *)(v22 - 8);
                                            uint64_t v220 = swift_allocObject();
                                            uint64_t v221 = specialized static Array._adoptStorage(_:count:)(v220, 1);
                                            uint64_t v223 = v222;
                                            if (one-time initialization token for pttTitleRowIdentifier != -1) {
                                              swift_once();
                                            }
                                            uint64_t v224 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.pttTitleRowIdentifier);
                                            uint64_t v225 = *(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 16);
                                            v225(v223, v224, v22);
                                            TPNumberPadCharacter.rawValue.getter(v221);
                                            LOBYTE(v298) = 8;
                                            uint64_t v226 = v277;
                                            NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                                            uint64_t v227 = swift_bridgeObjectRelease();
                                            MEMORY[0x1F4188790](v227);
                                            unint64_t v229 = (char *)&v261 - ((v228 + 15) & 0xFFFFFFFFFFFFFFF0);
                                            v225((uint64_t)v229, v224, v22);
                                            uint64_t v21 = v226;
                                            uint64_t v27 = (uint64_t)&v299;
                                            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                                            uint64_t v230 = *((void *)v299._rawValue + 2);
                                            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v230);
                                            uint64_t v231 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v230, (uint64_t)v229);
                                            TPNumberPadCharacter.rawValue.getter(v231);
                                            uint64_t v23 = v273;
LABEL_202:
                                            swift_bridgeObjectRetain();
                                            uint64_t v232 = 0;
                                            while (2)
                                            {
                                              unint64_t v29 = v232 + 1;
                                              if (__OFADD__(v232, 1)) {
                                                goto LABEL_241;
                                              }
                                              switch(*((unsigned char *)v18 + v232 + 32))
                                              {
                                                case 9:
                                                  swift_bridgeObjectRelease();
                                                  goto LABEL_208;
                                                default:
                                                  uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  swift_bridgeObjectRelease();
                                                  if ((v27 & 1) == 0)
                                                  {
                                                    ++v232;
                                                    if (v29 == v23)
                                                    {
                                                      swift_bridgeObjectRelease();
                                                      goto LABEL_211;
                                                    }
                                                    continue;
                                                  }
LABEL_208:
                                                  swift_bridgeObjectRelease();
                                                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                                                  uint64_t v233 = *(void *)(v22 - 8);
                                                  uint64_t v234 = swift_allocObject();
                                                  uint64_t v235 = specialized static Array._adoptStorage(_:count:)(v234, 1);
                                                  uint64_t v237 = v236;
                                                  if (one-time initialization token for leavePTTChannelRowIdentifier != -1) {
                                                    swift_once();
                                                  }
                                                  uint64_t v238 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.leavePTTChannelRowIdentifier);
                                                  uint64_t v239 = *(void (**)(uint64_t, uint64_t, uint64_t))(v233 + 16);
                                                  v239(v237, v238, v22);
                                                  TPNumberPadCharacter.rawValue.getter(v235);
                                                  LOBYTE(v298) = 9;
                                                  uint64_t v240 = v277;
                                                  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                                                  uint64_t v241 = swift_bridgeObjectRelease();
                                                  MEMORY[0x1F4188790](v241);
                                                  Swift::String v243 = (char *)&v261 - ((v242 + 15) & 0xFFFFFFFFFFFFFFF0);
                                                  v239((uint64_t)v243, v238, v22);
                                                  uint64_t v21 = v240;
                                                  uint64_t v27 = (uint64_t)&v299;
                                                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                                                  uint64_t v244 = *((void *)v299._rawValue + 2);
                                                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v244);
                                                  uint64_t v245 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v244, (uint64_t)v243);
                                                  TPNumberPadCharacter.rawValue.getter(v245);
                                                  uint64_t v23 = v273;
LABEL_211:
                                                  swift_bridgeObjectRetain();
                                                  uint64_t v246 = 0;
                                                  while (2)
                                                  {
                                                    unint64_t v29 = v246 + 1;
                                                    if (__OFADD__(v246, 1)) {
                                                      goto LABEL_242;
                                                    }
                                                    switch(*((unsigned char *)v18 + v246 + 32))
                                                    {
                                                      case 0xA:
                                                        swift_bridgeObjectRelease();
                                                        goto LABEL_217;
                                                      default:
                                                        uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        swift_bridgeObjectRelease();
                                                        if ((v27 & 1) == 0)
                                                        {
                                                          ++v246;
                                                          if (v29 == v23)
                                                          {
                                                            swift_bridgeObjectRelease_n();
                                                            goto LABEL_220;
                                                          }
                                                          continue;
                                                        }
LABEL_217:
                                                        swift_bridgeObjectRelease();
                                                        swift_bridgeObjectRelease();
                                                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
                                                        uint64_t v247 = *(void *)(v22 - 8);
                                                        uint64_t v248 = swift_allocObject();
                                                        uint64_t v249 = specialized static Array._adoptStorage(_:count:)(v248, 1);
                                                        uint64_t v251 = v250;
                                                        if (one-time initialization token for openPTTAppRowIdentifier != -1) {
                                                          swift_once();
                                                        }
                                                        uint64_t v252 = __swift_project_value_buffer(v22, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.openPTTAppRowIdentifier);
                                                        v253 = *(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 16);
                                                        v253(v251, v252, v22);
                                                        TPNumberPadCharacter.rawValue.getter(v249);
                                                        LOBYTE(v298) = 10;
                                                        uint64_t v254 = v277;
                                                        NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
                                                        uint64_t v255 = swift_bridgeObjectRelease();
                                                        MEMORY[0x1F4188790](v255);
                                                        v257 = (char *)&v261 - ((v256 + 15) & 0xFFFFFFFFFFFFFFF0);
                                                        v253((uint64_t)v257, v252, v22);
                                                        uint64_t v21 = v254;
                                                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                                                        uint64_t v258 = *((void *)v299._rawValue + 2);
                                                        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v258);
                                                        uint64_t v259 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v258, (uint64_t)v257);
                                                        TPNumberPadCharacter.rawValue.getter(v259);
LABEL_220:
                                                        a1 = v267;
                                                        LOBYTE(a3) = v266;
LABEL_221:
                                                        NSDiffableDataSourceSnapshot.reconfigureItems(_:)(v299);
                                                        swift_bridgeObjectRelease();
                                                        InCallControlsCollectionViewController.apply(_:to:animatingDifferences:)((uint64_t)v21, a1, a3 & 1);
                                                        return (*(uint64_t (**)(char *, uint64_t))(v269 + 8))(v21, v19);
                                                    }
                                                  }
                                              }
                                            }
                                        }
                                      }
                                  }
                                }
                            }
                          }
                      }
                    }
                }
              }
          }
        }
    }
  }
}

id InCallControlsCollectionViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsCollectionViewController.init(coder:)()
{
  uint64_t v1 = v0;
  v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updatedCapabilitiesWithParticipants] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants] = MEMORY[0x1E4FBC860];
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_features;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v3 = static Features.shared;
  *(void *)&v1[v2] = static Features.shared;
  OUTLINED_FUNCTION_7_0((uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_menuHostViewController]);
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController____lazy_storage___featureFlags] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity];
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((void *)v4 + 4) = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_remoteAudioPaused] = 0;
  OUTLINED_FUNCTION_7_0((uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate]);
  OUTLINED_FUNCTION_7_0((uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate]);
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkEnabled] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsRefreshParticipants] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceNeedsAnimatedDifferences] = 0;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  id v6 = v3;
  *(void *)&v1[v5] = PassthroughSubject.init()();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_updateDataSourceDebouncer] = 0;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>);
  OUTLINED_FUNCTION_13_18(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>);
  OUTLINED_FUNCTION_13_18(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>);
  OUTLINED_FUNCTION_13_18(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>);
  OUTLINED_FUNCTION_13_18(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>);
  OUTLINED_FUNCTION_13_18(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>);
  OUTLINED_FUNCTION_13_18(v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>);
  OUTLINED_FUNCTION_13_18(v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>);
  OUTLINED_FUNCTION_13_18(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>);
  OUTLINED_FUNCTION_13_18(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>);
  OUTLINED_FUNCTION_13_18(v16);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>);
  OUTLINED_FUNCTION_13_18(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>);
  OUTLINED_FUNCTION_13_18(v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>);
  OUTLINED_FUNCTION_13_18(v19);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>);
  OUTLINED_FUNCTION_13_18(v20);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>);
  OUTLINED_FUNCTION_13_18(v21);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>);
  OUTLINED_FUNCTION_13_18(v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>);
  OUTLINED_FUNCTION_13_18(v23);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall InCallControlsCollectionViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v48._object - v8;
  v47.receiver = v0;
  v47.super_class = ObjectType;
  objc_msgSendSuper2(&v47, sel_viewDidLoad);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v9, *MEMORY[0x1E4FB10C0], v3);
  uint64_t v10 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  OUTLINED_FUNCTION_2_1();
  v11();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  OUTLINED_FUNCTION_63_0();
  v13();
  id v14 = objc_allocWithZone(MEMORY[0x1E4FB1580]);
  id v15 = @nonobjc UICollectionViewCompositionalLayout.init(sectionProvider:)((uint64_t)partial apply for closure #1 in InCallControlsCollectionViewController.viewDidLoad(), v12);
  id v16 = objc_msgSend(v0, sel_view);
  if (!v16)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v17 = v16;
  objc_msgSend(v16, sel_bounds);
  double v19 = v18;
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;

  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1568]), sel_initWithFrame_collectionViewLayout_, v15, v19, v21, v23, v25);
  objc_msgSend(v26, sel_setAutoresizingMask_, 18);
  id v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  char v28 = v27;
  objc_msgSend(v27, sel_addSubview_, v26);

  uint64_t v29 = one-time initialization token for tableViewBackground;
  id v30 = v26;
  if (v29 != -1) {
    swift_once();
  }
  objc_msgSend(v30, sel_setBackgroundColor_, static Colors.InCallControls.tableViewBackground);

  objc_msgSend(v30, sel_setDelegate_, v1);
  uint64_t v31 = self;
  id v32 = v30;
  id v33 = objc_msgSend(v31, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  OUTLINED_FUNCTION_4_6();
  v34._uint64_t countAndFlagsBits = 0;
  v34._unint64_t object = (void *)0xE000000000000000;
  v48._uint64_t countAndFlagsBits = 0;
  Swift::String v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v33, v34, v48);

  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v37._countAndFlagsBits, (uint64_t)v37._object, v32);
  unint64_t v38 = (void **)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView];
  OUTLINED_FUNCTION_11_0();
  uint64_t v39 = *v38;
  *unint64_t v38 = v32;
  id v40 = v32;

  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionViewDiffableDataSource<InCallControlsCollectionViewController.CollectionViewSection, UUID>));
  id v41 = v40;
  uint64_t v42 = (void *)UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)();
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  swift_retain();
  dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter();
  swift_release();
  InCallControlsCollectionViewController.reallyUpdateDataSource(_:shouldRefreshParticipants:animatingDifferences:)(v42, 0, 0);
  uint64_t v43 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource] = v42;
  id v44 = v42;

  id v45 = objc_msgSend(v1, sel_view);
  if (v45)
  {
    uint64_t v46 = v45;
    objc_msgSend(v45, sel_setBackgroundColor_, static Colors.InCallControls.tableViewBackground);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
    return;
  }
LABEL_9:
  __break(1u);
}

void *closure #1 in InCallControlsCollectionViewController.viewDidLoad()(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a2;
  unint64_t v51 = a1;
  uint64_t v6 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1F4188790](v6);
  objc_super v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v52 = *(void *)(v16 - 8);
  uint64_t v53 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  double v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  double v21 = (char *)&v45 - v20;
  swift_beginAccess();
  double v22 = (char *)MEMORY[0x1C8776240](a3 + 16);
  if (!v22) {
    return 0;
  }
  double v23 = *(void **)&v22[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
  if (!v23)
  {

    return 0;
  }
  id v46 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  id v45 = v23;
  UICollectionLayoutListConfiguration.init(appearance:)();
  if (one-time initialization token for tableViewBackground != -1) {
    swift_once();
  }
  id v24 = (id)static Colors.InCallControls.tableViewBackground;
  UICollectionLayoutListConfiguration.backgroundColor.setter();
  char v25 = InCallControlsCollectionViewController.visibleCollectionViewSection(atIndex:)(v51);
  char v26 = v25;
  if (v25 == 11) {
    goto LABEL_11;
  }
  if (InCallControlsCollectionViewController.CollectionViewSection.rawValue.getter(v25) == 0x41746E6572727563
    && v27 == 0xEF79746976697463)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
LABEL_11:
      id v30 = (unsigned int *)MEMORY[0x1E4FB1118];
      goto LABEL_16;
    }
  }
  id v30 = (unsigned int *)MEMORY[0x1E4FB1108];
LABEL_16:
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *v30, v8);
  UICollectionLayoutListConfiguration.headerMode.setter();
  uint64_t v32 = v52;
  if (v26 != 11)
  {
    if (InCallControlsCollectionViewController.CollectionViewSection.rawValue.getter(v26) == 0x545450657661656CLL
      && v33 == 0xEF6C656E6E616843)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0) {
        goto LABEL_22;
      }
    }
    Swift::String_optional v36 = (unsigned int *)MEMORY[0x1E4FB10F8];
    goto LABEL_25;
  }
LABEL_22:
  Swift::String_optional v36 = (unsigned int *)MEMORY[0x1E4FB1100];
LABEL_25:
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, *v36, v49);
  UICollectionLayoutListConfiguration.footerMode.setter();
  id v37 = objc_msgSend(self, sel_tertiaryLabelColor);
  unint64_t v38 = (void (*)(char *, void))UICollectionLayoutListConfiguration.separatorConfiguration.modify();
  UIListSeparatorConfiguration.color.setter();
  v38(v54, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutSection);
  uint64_t v39 = v53;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v19, v21, v53);
  uint64_t v31 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
  id v40 = *(void (**)(char *, uint64_t))(v32 + 8);
  v40(v19, v39);
  objc_msgSend(v31, sel_contentInsets);
  objc_msgSend(v31, sel_setContentInsets_, 0.0);
  id v41 = v45;
  dispatch thunk of UICollectionViewDiffableDataSource.sectionIdentifier(for:)();
  if (v54[0] != 11)
  {
    if (InCallControlsCollectionViewController.CollectionViewSection.rawValue.getter(v54[0]) == 0x656C746974
      && v42 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  objc_msgSend(v31, sel_contentInsets);
  objc_msgSend(v31, sel_setContentInsets_);

  v40(v21, v39);
  return v31;
}

uint64_t InCallControlsCollectionViewController.visibleCollectionViewSection(atIndex:)(unint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (!v2) {
    return 11;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = v2;
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
  uint64_t v9 = *(void *)(NSDiffableDataSourceSnapshot.sectionIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  if (v9 <= (uint64_t)a1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    return 11;
  }
  uint64_t result = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(result + 16) > a1)
  {
    uint64_t v11 = *(unsigned __int8 *)(result + a1 + 32);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in InCallControlsCollectionViewController.viewDidLoad()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](v6);
  if (v7)
  {
    id v8 = (void *)v7;
    unint64_t v9 = IndexPath.section.getter();
    switch(InCallControlsCollectionViewController.visibleCollectionViewSection(atIndex:)(v9))
    {
      case 1u:
        uint64_t v19 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activityCellRegistration;
        swift_beginAccess();
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v20 - 8);
        uint64_t v13 = (char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v19, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1) {
          goto LABEL_54;
        }
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v22 - 8);
        uint64_t v17 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v17, a3, v24);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v24);
        type metadata accessor for InCallControlsActivityCell();
        goto LABEL_48;
      case 2u:
        if (one-time initialization token for addParticipantRowIdentifier != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for UUID();
        __swift_project_value_buffer(v25, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier);
        if ((static UUID.== infix(_:_:)() & 1) == 0)
        {
          if (!IndexPath.row.getter())
          {
            uint64_t v114 = (uint64_t)v8
                 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_statusCellRegistration;
            swift_beginAccess();
            uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>?);
            uint64_t v120 = &v119;
            MEMORY[0x1F4188790](v115 - 8);
            char v29 = (char *)&v119 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of FeatureEligibility?(v114, (uint64_t)v29, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>?);
            uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>);
            if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30) != 1)
            {
              uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
              MEMORY[0x1F4188790](v117 - 8);
              uint64_t v33 = (char *)&v119 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v33, a3, v25);
              __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v25);
              type metadata accessor for InCallControlsStatusCell();
              goto LABEL_52;
            }
LABEL_67:
            __break(1u);
            JUMPOUT(0x1C3378F58);
          }
          uint64_t v98 = (uint64_t)v8
              + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantCellRegistration;
          swift_beginAccess();
          uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>?);
          uint64_t v120 = &v119;
          MEMORY[0x1F4188790](v99 - 8);
          char v29 = (char *)&v119 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of FeatureEligibility?(v98, (uint64_t)v29, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>?);
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>);
          if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30) != 1)
          {
            uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
            MEMORY[0x1F4188790](v101 - 8);
            uint64_t v33 = (char *)&v119 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v33, a3, v25);
            __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v25);
            type metadata accessor for InCallControlsParticipantCell();
            goto LABEL_52;
          }
          goto LABEL_64;
        }
        uint64_t v26 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_addParticipantCellRegistration;
        swift_beginAccess();
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v27 - 8);
        char v29 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v26, (uint64_t)v29, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>?);
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30) != 1)
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          MEMORY[0x1F4188790](v31 - 8);
          uint64_t v33 = (char *)&v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v33, a3, v25);
          __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v25);
          type metadata accessor for InCallControlsAddParticipantCell();
LABEL_52:
          uint64_t v97 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

          outlined destroy of SystemUpdateNotice?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
          return v97;
        }
        goto LABEL_62;
      case 3u:
        uint64_t v34 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkCellRegistration;
        swift_beginAccess();
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v35 - 8);
        uint64_t v13 = (char *)&v119 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v34, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1) {
          goto LABEL_55;
        }
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v37 - 8);
        uint64_t v17 = (char *)&v119 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v39 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v17, a3, v39);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v39);
        type metadata accessor for InCallControlsShareLinkCell();
        goto LABEL_48;
      case 4u:
        if (InCallControlsCollectionViewController.isLiveCaptionsAllowed.getter())
        {
          uint64_t v40 = (uint64_t)v8
              + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_toggleCaptionsCellRegistration;
          swift_beginAccess();
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>?);
          uint64_t v120 = &v119;
          MEMORY[0x1F4188790](v41 - 8);
          uint64_t v13 = (char *)&v119 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of FeatureEligibility?(v40, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>?);
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>);
          if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) != 1)
          {
            uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
            MEMORY[0x1F4188790](v43 - 8);
            uint64_t v17 = (char *)&v119 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v45 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v17, a3, v45);
            __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v45);
            type metadata accessor for InCallControlsToggleCaptionsCell();
            goto LABEL_48;
          }
          goto LABEL_63;
        }

        break;
      case 5u:
        uint64_t v46 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_ignoreLMIRequestsCellRegistration;
        swift_beginAccess();
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v47 - 8);
        uint64_t v13 = (char *)&v119 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v46, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1) {
          goto LABEL_56;
        }
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v49 - 8);
        uint64_t v17 = (char *)&v119 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v51 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v17, a3, v51);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v51);
        type metadata accessor for InCallControlsIgnoreLMIRequestsCell();
        goto LABEL_48;
      case 6u:
        uint64_t v52 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_openMessagesCellRegistration;
        swift_beginAccess();
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v53 - 8);
        uint64_t v13 = (char *)&v119 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v52, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1) {
          goto LABEL_57;
        }
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v55 - 8);
        uint64_t v17 = (char *)&v119 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v57 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v17, a3, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v57);
        type metadata accessor for InCallControlsOpenMessagesCell();
        goto LABEL_48;
      case 7u:
        if (one-time initialization token for blockUnkownRowIdentifier != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for UUID();
        __swift_project_value_buffer(v58, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier);
        if (static UUID.== infix(_:_:)())
        {
          uint64_t v59 = (uint64_t)v8
              + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_blockUnknownCallerCellRegistration;
          swift_beginAccess();
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?);
          uint64_t v120 = &v119;
          MEMORY[0x1F4188790](v60 - 8);
          uint64_t v13 = (char *)&v119 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of FeatureEligibility?(v59, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?);
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>);
          if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1)
          {
            __break(1u);
LABEL_26:
            uint64_t v62 = (uint64_t)v8
                + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_pttTitleCellRegistration;
            swift_beginAccess();
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>?);
            uint64_t v120 = &v119;
            MEMORY[0x1F4188790](v63 - 8);
            uint64_t v13 = (char *)&v119 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of FeatureEligibility?(v62, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>?);
            uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>);
            if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) != 1)
            {
              uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
              MEMORY[0x1F4188790](v65 - 8);
              uint64_t v17 = (char *)&v119 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v67 = type metadata accessor for UUID();
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v17, a3, v67);
              __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v67);
              type metadata accessor for InCallControlsPTTTitleCell();
              goto LABEL_48;
            }
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
        }
        else
        {
          if (one-time initialization token for reportUnknownRowIdentifier != -1) {
            swift_once();
          }
          __swift_project_value_buffer(v58, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v103 = (uint64_t)v8
                 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_reportUnknownCallerCellRegistration;
            swift_beginAccess();
            uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>?);
            uint64_t v120 = &v119;
            MEMORY[0x1F4188790](v104 - 8);
            uint64_t v13 = (char *)&v119 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of FeatureEligibility?(v103, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>?);
            uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>);
            if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1)
            {
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
            uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
            MEMORY[0x1F4188790](v106 - 8);
            uint64_t v17 = (char *)&v119 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v17, a3, v58);
            __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v58);
            type metadata accessor for InCallControlsReportCell();
            goto LABEL_48;
          }
          uint64_t v108 = (uint64_t)v8
               + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_blockUnknownCallerCellRegistration;
          swift_beginAccess();
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?);
          uint64_t v120 = &v119;
          MEMORY[0x1F4188790](v109 - 8);
          uint64_t v13 = (char *)&v119 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of FeatureEligibility?(v108, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?);
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>);
          if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1)
          {
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
        }
        uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v111 - 8);
        uint64_t v17 = (char *)&v119 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v17, a3, v58);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v58);
        type metadata accessor for InCallControlsBlockCell();
        goto LABEL_48;
      case 8u:
        goto LABEL_26;
      case 9u:
        uint64_t v68 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_leavePTTChannelCellRegistration;
        swift_beginAccess();
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v69 - 8);
        uint64_t v13 = (char *)&v119 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v68, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1) {
          goto LABEL_59;
        }
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v71 - 8);
        uint64_t v17 = (char *)&v119 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v73 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16))(v17, a3, v73);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v73);
        type metadata accessor for InCallControlsPTTLeaveChannelCell();
        goto LABEL_48;
      case 0xAu:
        uint64_t v74 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_openPTTAppCellRegistration;
        swift_beginAccess();
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v75 - 8);
        uint64_t v13 = (char *)&v119 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v74, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1) {
          goto LABEL_60;
        }
        uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v77 - 8);
        uint64_t v17 = (char *)&v119 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v79 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v17, a3, v79);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v79);
        type metadata accessor for InCallControlsPTTOpenAppCell();
        goto LABEL_48;
      case 0xBu:
        uint64_t v119 = a3;
        uint64_t v120 = a1;
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = xmmword_1C37696D0;
        IndexPath.section.getter();
        uint64_t v81 = String.init<A>(reflecting:)();
        uint64_t v83 = v82;
        uint64_t v84 = MEMORY[0x1E4FBB1A0];
        *(void *)(v80 + 56) = MEMORY[0x1E4FBB1A0];
        unint64_t v85 = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v80 + 64) = v85;
        *(void *)(v80 + 32) = v81;
        *(void *)(v80 + 40) = v83;
        uint64_t v121 = IndexPath.item.getter();
        uint64_t v86 = String.init<A>(reflecting:)();
        *(void *)(v80 + 96) = v84;
        *(void *)(v80 + 104) = v85;
        *(void *)(v80 + 72) = v86;
        *(void *)(v80 + 80) = v87;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        uint64_t v88 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_fallbackCellRegistration;
        swift_beginAccess();
        uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>?);
        MEMORY[0x1F4188790](v89 - 8);
        uint64_t v91 = (char *)&v119 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v88, (uint64_t)v91, &demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>?);
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v91, 1, v92) == 1) {
          goto LABEL_61;
        }
        uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v93 - 8);
        uint64_t v95 = (char *)&v119 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v96 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v95, v119, v96);
        __swift_storeEnumTagSinglePayload((uint64_t)v95, 0, 1, v96);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewListCell);
        uint64_t v97 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

        outlined destroy of SystemUpdateNotice?((uint64_t)v95, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        (*(void (**)(char *, uint64_t))(*(void *)(v92 - 8) + 8))(v91, v92);
        return v97;
      default:
        uint64_t v10 = (uint64_t)v8
            + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_titleCellRegistration;
        swift_beginAccess();
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>?);
        uint64_t v120 = &v119;
        MEMORY[0x1F4188790](v11 - 8);
        uint64_t v13 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of FeatureEligibility?(v10, (uint64_t)v13, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>?);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) != 1)
        {
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          MEMORY[0x1F4188790](v15 - 8);
          uint64_t v17 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v18 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, a3, v18);
          __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v18);
          type metadata accessor for InCallControlsTitleCell();
LABEL_48:
          uint64_t v97 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();

          outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
          return v97;
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
    }
  }
  return 0;
}

uint64_t closure #3 in InCallControlsCollectionViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1C8776240](a5 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = (void *)v12;
  unint64_t v14 = IndexPath.section.getter();
  int v15 = InCallControlsCollectionViewController.visibleCollectionViewSection(atIndex:)(v14);
  if (v15 == 11) {
    goto LABEL_7;
  }
  if (v15 == 9)
  {
    uint64_t v20 = (uint64_t)v13
        + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_leaveChannelFooterViewRegistration;
    swift_beginAccess();
    outlined init with copy of FeatureEligibility?(v20, (uint64_t)v8, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>?);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v21);
    if (result != 1)
    {
      type metadata accessor for InCallControlsPTTLeaveChannelFooterView();
      uint64_t v19 = UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)();

      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v21 - 8) + 8))(v8, v21);
      return v19;
    }
    goto LABEL_13;
  }
  if (v15 != 1)
  {
LABEL_7:

    return 0;
  }
  uint64_t v16 = (uint64_t)v13
      + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_sectionHeaderViewRegistration;
  swift_beginAccess();
  outlined init with copy of FeatureEligibility?(v16, (uint64_t)v11, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>?);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>);
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v17);
  if (result != 1)
  {
    type metadata accessor for InCallControlsSectionHeaderView();
    uint64_t v19 = UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)();

    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v17 - 8) + 8))(v11, v17);
    return v19;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall InCallControlsCollectionViewController._canShowWhileLocked()()
{
  return 1;
}

void InCallControlsCollectionViewController.blockStatusDidUpdate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(v2 - 1);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, void *))(v3 + 104))(v5, *MEMORY[0x1E4FBCBE8], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, void *))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (!v7) {
    return;
  }
  uint64_t v8 = one-time initialization token for conversationKit;
  uint64_t v2 = v7;
  if (v8 != -1) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationKit);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1C2F90000, v10, v11, "InCallControlsBlockCell.blockStatusDidUpdate", v12, 2u);
    MEMORY[0x1C87760E0](v12, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1C3769620;
  unint64_t v17 = v16 + v15;
  if (one-time initialization token for blockUnkownRowIdentifier != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v13, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v18, v13);
  InCallControlsCollectionViewController.reloadSections(_:in:animatingDifferences:)(v16, (uint64_t)v2, 1, (void (*)(uint64_t, uint64_t))specialized _ArrayProtocol.filter(_:), MEMORY[0x1E4FB0FB0]);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
}

uint64_t InCallControlsCollectionViewController.reloadSections(_:in:animatingDifferences:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_5_1();
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
  uint64_t v12 = swift_bridgeObjectRetain();
  a4(v12, v5);
  a5();
  swift_bridgeObjectRelease();
  dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v5, v8);
}

void InCallControlsCollectionViewController.handleContentSizeCategoryDidChange(_:)()
{
  type metadata accessor for InCallControlsParticipantCell();
  static InCallControlsParticipantCell.invalidateCalculatedHeights()();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource);
  if (v1)
  {
    id v2 = v1;
    InCallControlsCollectionViewController.reloadSections(_:in:animatingDifferences:)((uint64_t)&outlined read-only object #0 of InCallControlsCollectionViewController.handleContentSizeCategoryDidChange(_:), (uint64_t)v2, 0, specialized _ArrayProtocol.filter(_:), MEMORY[0x1E4FB0FD0]);
  }
}

uint64_t InCallControlsCollectionViewController.configureToggleCaptionsCell(_:)(void *a1)
{
  uint64_t v3 = v1
     + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, ObjectType, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    char v6 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xD8))(v6 & 1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, _UNKNOWN **))((*v7 & *a1) + 0x78);
  uint64_t v9 = swift_unknownObjectRetain();
  return v8(v9, &protocol witness table for InCallControlsCollectionViewController);
}

uint64_t InCallControlsCollectionViewController.visibleCollectionViewSections()()
{
  uint64_t v1 = v0;
  id v2 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  if (*v2)
  {
    id v3 = objc_msgSend(*v2, sel_remoteMembers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    char v5 = specialized Set.isEmpty.getter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  char v6 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if ((*v6 & 0xE0) != 0x40 && (v5 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    uint64_t v7 = v8;
    unint64_t v10 = *(void *)(v8 + 16);
    unint64_t v9 = *(void *)(v8 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, v8);
      uint64_t v7 = v58;
    }
    *(void *)(v7 + 16) = v10 + 1;
    *(unsigned char *)(v7 + v10 + 32) = 0;
    if (static Platform.current.getter() != 2
      && (InCallControlsCollectionViewController.messagesAppInstalled()() & 1) != 0)
    {
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, v7);
        uint64_t v7 = v70;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(unsigned char *)(v7 + v12 + 32) = 6;
    }
  }
  uint64_t v13 = v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
  swift_beginAccess();
  outlined init with copy of FeatureEligibility?(v13, (uint64_t)v73, &demangling cache variable for type metadata for Activity?);
  uint64_t v14 = v73[3];
  outlined destroy of SystemUpdateNotice?((uint64_t)v73, &demangling cache variable for type metadata for Activity?);
  if (v14)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
      uint64_t v7 = v56;
    }
    unint64_t v16 = *(void *)(v7 + 16);
    unint64_t v15 = *(void *)(v7 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v7);
      uint64_t v7 = v57;
    }
    *(void *)(v7 + 16) = v16 + 1;
    *(unsigned char *)(v7 + v16 + 32) = 1;
  }
  if ((*v6 & 0xE0) != 0x40)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
      uint64_t v7 = v59;
    }
    unint64_t v18 = *(void *)(v7 + 16);
    unint64_t v17 = *(void *)(v7 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v7);
      uint64_t v7 = v60;
    }
    *(void *)(v7 + 16) = v18 + 1;
    *(unsigned char *)(v7 + v18 + 32) = 2;
  }
  uint64_t v19 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = (void *)MEMORY[0x1E4FBC8C8];
  if (!*v19
    || (uint64_t v22 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v20) + 0x320),
        uint64_t v23 = v20,
        LOBYTE(v22) = v22(),
        v23,
        (v22 & 1) == 0))
  {
    if (static Platform.current.getter() != 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
        uint64_t v7 = v61;
      }
      unint64_t v25 = *(void *)(v7 + 16);
      unint64_t v24 = *(void *)(v7 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v7);
        uint64_t v7 = v62;
      }
      *(void *)(v7 + 16) = v25 + 1;
      *(unsigned char *)(v7 + v25 + 32) = 3;
    }
    if ((InCallControlsCollectionViewController.isLiveCaptionsAllowed.getter() & 1) != 0 && *v2)
    {
      uint64_t v26 = one-time initialization token for shared;
      id v27 = *v2;
      if (v26 != -1) {
        swift_once();
      }
      if ((*(uint64_t (**)(void))((*v21 & *(void *)static ConversationCapabilities.shared) + 0x70))())
      {
        if (objc_msgSend(v27, sel_resolvedAudioVideoMode) != (id)1
          || (id v28 = objc_msgSend(v27, sel_remoteMembers),
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember), lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember), uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)(), v28, v30 = specialized Set.count.getter(v29), swift_bridgeObjectRelease(), v30 >= 2))
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
            uint64_t v7 = v71;
          }
          unint64_t v32 = *(void *)(v7 + 16);
          unint64_t v31 = *(void *)(v7 + 24);
          if (v32 >= v31 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v7);
            uint64_t v7 = v72;
          }
          *(void *)(v7 + 16) = v32 + 1;
          *(unsigned char *)(v7 + v32 + 32) = 4;
        }
      }
    }
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_shareLinkEnabled) == 1
      && static Platform.current.getter() != 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
        uint64_t v7 = v68;
      }
      unint64_t v34 = *(void *)(v7 + 16);
      unint64_t v33 = *(void *)(v7 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v7);
        uint64_t v7 = v69;
      }
      *(void *)(v7 + 16) = v34 + 1;
      *(unsigned char *)(v7 + v34 + 32) = 5;
    }
  }
  uint64_t v35 = *v19;
  if (*v19)
  {
    uint64_t v36 = *(void (**)(void))((*v21 & *v35) + 0x270);
    uint64_t v37 = v35;
    v36();
    uint64_t v39 = v38;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v39) = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 120))(ObjectType, v39);
    swift_unknownObjectRelease();
    if ((v39 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
        uint64_t v7 = v63;
      }
      unint64_t v42 = *(void *)(v7 + 16);
      unint64_t v41 = *(void *)(v7 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v7);
        uint64_t v7 = v64;
      }
      *(void *)(v7 + 16) = v42 + 1;
      *(unsigned char *)(v7 + v42 + 32) = 7;
    }

    uint64_t v43 = *v19;
    if (*v19)
    {
      uint64_t v44 = *(void (**)(void))((*v21 & *v43) + 0x270);
      uint64_t v45 = v43;
      v44();
      uint64_t v47 = v46;

      uint64_t v48 = swift_getObjectType();
      LOBYTE(v45) = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 216))(v48, v47);
      swift_unknownObjectRelease();
      if (v45)
      {
        swift_bridgeObjectRelease();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
        uint64_t v7 = v49;
        unint64_t v51 = *(void *)(v49 + 16);
        unint64_t v50 = *(void *)(v49 + 24);
        int64_t v52 = v50 >> 1;
        unint64_t v53 = v51 + 1;
        if (v50 >> 1 <= v51)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v49);
          uint64_t v7 = v65;
          unint64_t v50 = *(void *)(v65 + 24);
          int64_t v52 = v50 >> 1;
        }
        *(void *)(v7 + 16) = v53;
        *(unsigned char *)(v7 + v51 + 32) = 8;
        unint64_t v54 = v51 + 2;
        if (v52 < (uint64_t)(v51 + 2))
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 2, 1, v7);
          uint64_t v7 = v66;
          unint64_t v50 = *(void *)(v66 + 24);
          int64_t v52 = v50 >> 1;
        }
        *(void *)(v7 + 16) = v54;
        *(unsigned char *)(v7 + v53 + 32) = 9;
        if (v52 < (uint64_t)(v51 + 3))
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 3, 1, v7);
          uint64_t v7 = v67;
        }
        *(void *)(v7 + 16) = v51 + 3;
        *(unsigned char *)(v7 + v54 + 32) = 10;
      }
    }
  }
  return v7;
}

uint64_t UUID.init(hash:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v6[2] = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  v6[1] = 0;
  size_t v5 = bswap64(a1);
  size_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v5, (unint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  DataProtocol.copyBytes(to:)();
  swift_release();
  UUID.init(uuid:)();
  uint64_t v3 = type metadata accessor for UUID();
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v3);
}

BOOL specialized Conversation.isInitiatorContact.getter()
{
  type metadata accessor for ReportSpamManager();
  id v1 = objc_msgSend(v0, sel_initiator);
  unint64_t v2 = static ReportSpamManager.getContact(forHandle:)(v1);

  if (!v2) {
    return 0;
  }
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v3 != 0;
}

BOOL specialized Conversation.hasExactlyOneRemoteParticipant.getter()
{
  id v1 = objc_msgSend(v0, sel_mergedRemoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Set.count.getter(v2);
  swift_bridgeObjectRelease();
  if (v3 != 1) {
    return 0;
  }
  id v4 = objc_msgSend(v0, sel_mergedActiveRemoteParticipants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = specialized Set.count.getter(v5);
  swift_bridgeObjectRelease();
  return v6 < 2;
}

Swift::Int specialized Conversation.unknownHandles.getter()
{
  id v1 = objc_msgSend(v0, sel_mergedRemoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v2 & 0xC000000000000001) == 0)
  {
    uint64_t v3 = specialized _NativeSet.filter(_:)(v2);
    goto LABEL_36;
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v38 = MEMORY[0x1E4FBC870];
  __CocoaSet.makeIterator()();
  uint64_t v4 = __CocoaSet.Iterator.next()();
  if (!v4)
  {
LABEL_34:
    swift_release();
LABEL_36:
    specialized Sequence.compactMap<A>(_:)(v3);
    uint64_t v34 = v33;
    swift_release();
    return v34;
  }
  uint64_t v5 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v36 = v4;
    swift_dynamicCast();
    id v6 = objc_msgSend(v37, sel_handle);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    uint64_t v36 = Set.init(minimumCapacity:)();
    id v7 = v6;
    specialized Set._Variant.insert(_:)(&v35, v7);
    uint64_t v8 = v35;

    uint64_t v9 = v36;
    if (one-time initialization token for faceTime != -1) {
      swift_once();
    }
    unint64_t v10 = static ParticipantContactDetailsCache.faceTime;
    swift_retain();
    specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v10);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v36 = v5;
    uint64_t v13 = v5;
    uint64_t v14 = *(void *)(v12 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = 32;
      do
      {
        unint64_t v16 = *(void **)(v12 + v15);
        if (v16)
        {
          id v17 = v16;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v15 += 56;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      unint64_t v18 = v36;
    }
    else
    {
      unint64_t v18 = v13;
    }
    uint64_t v5 = v13;
    swift_bridgeObjectRelease();
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v20 = v37;
    if (!v19) {
      break;
    }

LABEL_31:
    uint64_t v4 = __CocoaSet.Iterator.next()();
    if (!v4)
    {
      uint64_t v3 = v38;
      goto LABEL_34;
    }
  }
  uint64_t v21 = v38;
  unint64_t v22 = *(void *)(v38 + 16);
  if (*(void *)(v38 + 24) <= v22)
  {
    specialized _NativeSet.resize(capacity:)(v22 + 1);
    uint64_t v21 = v38;
  }
  Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v21 + 40));
  uint64_t v24 = v21 + 56;
  uint64_t v25 = -1 << *(unsigned char *)(v21 + 32);
  unint64_t v26 = result & ~v25;
  unint64_t v27 = v26 >> 6;
  if (((-1 << v26) & ~*(void *)(v21 + 56 + 8 * (v26 >> 6))) != 0)
  {
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v21 + 56 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    *(void *)(*(void *)(v21 + 48) + 8 * v28) = v20;
    ++*(void *)(v21 + 16);
    goto LABEL_31;
  }
  char v29 = 0;
  unint64_t v30 = (unint64_t)(63 - v25) >> 6;
  while (++v27 != v30 || (v29 & 1) == 0)
  {
    BOOL v31 = v27 == v30;
    if (v27 == v30) {
      unint64_t v27 = 0;
    }
    v29 |= v31;
    uint64_t v32 = *(void *)(v24 + 8 * v27);
    if (v32 != -1)
    {
      unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

BOOL specialized Conversation.allParticipantsAreUnknownContacts.getter()
{
  id v1 = objc_msgSend(v0, sel_mergedRemoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  return v5 == 0;
}

void InCallControlsCollectionViewController.apply(_:to:animatingDifferences:)(uint64_t a1, void *a2, int a3)
{
  unint64_t v26 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v9((char *)&v24 - v8, a1, v5);
  int v25 = a3;
  if (a3)
  {
    uint64_t v10 = *(void *)(NSDiffableDataSourceSnapshot.reconfiguredItemIdentifiers.getter() + 16);
    swift_bridgeObjectRelease();
    BOOL v24 = v10 != 0;
  }
  else
  {
    BOOL v24 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v12 = v11((char *)&v24 - v8, v5);
  unint64_t v28 = &v24;
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = (char *)&v24 - v8;
  uint64_t v14 = ((uint64_t (*)(char *, uint64_t, uint64_t))v9)((char *)&v24 - v8, a1, v5);
  unint64_t v27 = &v24;
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = (char *)&v24 - v8;
  v9((char *)&v24 - v8, (uint64_t)&v24 - v8, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = v16 + v7;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v26;
  *(void *)(v18 + 16) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v16, v13, v5);
  *(unsigned char *)(v18 + v17) = v25 & 1;
  id v20 = v19;
  if (v24)
  {
    v11(v15, v5);
    uint64_t v21 = self;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = partial apply for closure #1 in InCallControlsCollectionViewController.apply(_:to:animatingDifferences:);
    *(void *)(v22 + 24) = v18;
    aBlock[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_60;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_animateWithDuration_delay_options_animations_completion_, 0, v23, 0, 0.3, 0.0);
    swift_release();
    _Block_release(v23);
  }
  else
  {
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();
    swift_release();
    v11(v15, v5);
  }
}

uint64_t closure #1 in InCallControlsCollectionViewController.apply(_:to:animatingDifferences:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();
}

uint64_t InCallControlsCollectionViewController.reconfigure(_:cellIdentifiers:in:animatingDifferences:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v36 = a4;
  uint64_t v8 = type metadata accessor for Participant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x1E4FBC860];
  if (a1)
  {
    uint64_t v35 = a3;
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13)
    {
      uint64_t v33 = a2;
      uint64_t v34 = v4;
      uint64_t v43 = MEMORY[0x1E4FBC860];
      uint64_t v37 = v10;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
      uint64_t v14 = v37;
      uint64_t v15 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)(v16 - 8);
      uint64_t v41 = *(void *)(v18 + 64);
      uint64_t v42 = v16;
      uint64_t v19 = *(void *)(v9 + 72);
      uint64_t v39 = (void (**)(char *, char *, uint64_t))(v18 + 16);
      uint64_t v40 = v19;
      uint64_t v38 = v18 + 32;
      do
      {
        MEMORY[0x1F4188790](v16);
        uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
        _s15ConversationKit11ParticipantVWOcTm_10(v15, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
        (*v39)(v21, &v12[*(int *)(v14 + 20)], v17);
        outlined destroy of Participant.State((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
        uint64_t v22 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
          uint64_t v14 = v37;
          uint64_t v22 = v43;
        }
        unint64_t v24 = *(void *)(v22 + 16);
        unint64_t v23 = *(void *)(v22 + 24);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v14 = v37;
          uint64_t v22 = v43;
        }
        *(void *)(v22 + 16) = v24 + 1;
        uint64_t v17 = v42;
        uint64_t v16 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(v22+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v24, v21, v42);
        uint64_t v43 = v22;
        v15 += v40;
        --v13;
      }
      while (v13);
      a2 = v33;
    }
    specialized Array.append<A>(contentsOf:)();
    a3 = v35;
  }
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
  }
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  unint64_t v28 = (char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
  uint64_t v29 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter();
  uint64_t v30 = specialized _ArrayProtocol.filter(_:)(v44, v29);
  if (*(void *)(v30 + 16))
  {
    NSDiffableDataSourceSnapshot.reconfigureItems(_:)((Swift::OpaquePointer)v30);
    swift_bridgeObjectRelease();
    InCallControlsCollectionViewController.apply(_:to:animatingDifferences:)((uint64_t)v28, a3, v36 & 1);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    return swift_bridgeObjectRelease();
  }
}

uint64_t InCallControlsCollectionViewController.messagesAppInstalled()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static Features.shared) + 0x90))() & 1) == 0) {
    return 1;
  }
  uint64_t result = (uint64_t)objc_msgSend(self, sel_defaultWorkspace);
  if (result)
  {
    id v1 = (void *)result;
    uint64_t v2 = (void *)MEMORY[0x1C87730B0](0xD000000000000013, 0x80000001C37AAE90);
    id v3 = objc_msgSend(v1, sel_applicationIsInstalled_, v2);

    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationControls);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v5, v6, "InCallControlsCollectionViewController: messagesAppInstalled = %{BOOL}d", v7, 8u);
      MEMORY[0x1C87760E0](v7, -1, -1);
    }

    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

id InCallControlsCollectionViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    os_log_type_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void InCallControlsCollectionViewController.init(nibName:bundle:)()
{
}

id InCallControlsCollectionViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t InCallControlsCollectionViewController.createSectionHeaderViewRegistration()()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for InCallControlsSectionHeaderView();
  return UICollectionView.SupplementaryRegistration.init(elementKind:handler:)();
}

uint64_t InCallControlsCollectionViewController.createActivityCellRegistration()(void (*a1)(void))
{
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  a1(0);
  type metadata accessor for UUID();
  return UICollectionView.CellRegistration.init(handler:)();
}

uint64_t InCallControlsCollectionViewController.configureTitleCell(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  if (!*v4)
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    goto LABEL_5;
  }
  id v5 = objc_msgSend(*v4, sel_displayName);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (!*v4)
  {
LABEL_5:
    uint64_t v9 = 0;
    unint64_t v11 = 0xF000000000000000;
    goto LABEL_6;
  }
  uint64_t v9 = outlined bridged method (ob) of @objc TUConversation.messagesGroupPhotoData.getter(*v4);
  unint64_t v11 = v10;
LABEL_6:
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v14 = (unsigned __int8 *)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode);
  swift_beginAccess();
  id v15 = *v4;
  unsigned __int8 v16 = *v14;
  id v17 = v15;
  swift_bridgeObjectRetain();
  InCallControlsTitleCellViewModel.init(groupName:groupPhotoData:participants:mode:linksEnabled:shouldUseGroupHeader:conversation:)(v6, v8, v9, v11, v13, v16, 1, v20, (char *)v15);
  InCallControlsTitleCell.configure(with:)(v20);
  outlined release of InCallControlsTitleCellViewModel(v20);
  uint64_t v18 = a1 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate;
  swift_beginAccess();
  *(void *)(v18 + 8) = &protocol witness table for InCallControlsCollectionViewController;
  return swift_unknownObjectWeakAssign();
}

void InCallControlsCollectionViewController.configureStatusCell(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  swift_beginAccess();
  id v5 = *v4;
  if (*v4)
  {
    swift_beginAccess();
    uint64_t v6 = v5;
    uint64_t v7 = swift_bridgeObjectRetain();
    InCallControlsStatusCellViewModel.init(participants:controlsManager:)(v7, v6, (uint64_t *)v12);
    uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x160))(v12);
    uint64_t v9 = v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_menuHostViewController;
    uint64_t v10 = MEMORY[0x1C8776240](v9);
    (*(void (**)(uint64_t, void))((*v8 & *a1) + 0xC0))(v10, *(void *)(v9 + 8));
    long long v15 = v12[0];
    outlined release of String((uint64_t)&v15);
    long long v14 = v12[1];
    outlined release of String((uint64_t)&v14);
    unint64_t v11 = v13;
  }
}

uint64_t InCallControlsCollectionViewController.configureAddParticipantCell(_:)(uint64_t a1)
{
  char v2 = InCallControlsCollectionViewController.isAddingParticipantsAllowed.getter();
  InCallControlsBaseCell.isEnabled.setter(v2 & 1);
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = &protocol witness table for InCallControlsCollectionViewController;
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallControlsCollectionViewController.configureLinkLayoutCell(_:)(void *a1)
{
  char v3 = InCallControlsCollectionViewController.isLinkSharingAllowed.getter();
  uint64_t v4 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_gridLayoutStyle);
  swift_beginAccess();
  char v5 = *v4;
  v7[0] = v3 & 1;
  v7[1] = v5;
  return (*(uint64_t (**)(unsigned char *, uint64_t, char **))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC0))(v7, v1, &protocol witness table for InCallControlsCollectionViewController);
}

void InCallControlsCollectionViewController.configureIgnoreLMIRequestsCell(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  if (*v4)
  {
    id v5 = *v4;
    id v6 = objc_msgSend(v5, sel_ignoreLMIRequests);
    uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xD8))(v6);
    uint64_t v8 = *(void (**)(uint64_t, _UNKNOWN **))((*v7 & *a1) + 0x78);
    uint64_t v9 = swift_unknownObjectRetain();
    v8(v9, &protocol witness table for InCallControlsCollectionViewController);
  }
}

void closure #7 in InCallControlsCollectionViewController.configureCellRegistrations()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = *(void (**)(uint64_t, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
    uint64_t v9 = swift_unknownObjectRetain();
    v8(v9, &protocol witness table for InCallControlsCollectionViewController);
  }
}

void closure #8 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    InCallControlsCollectionViewController.configureBlockUnknownCallerCell(_:)();
  }
}

void InCallControlsCollectionViewController.configureBlockUnknownCallerCell(_:)()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_conversation);
  swift_beginAccess();
  if (*v1)
  {
    char v25 = 0;
    id v2 = *v1;
    BOOL v3 = specialized Conversation.allParticipantsAreUnknownContacts.getter();

    if (v3
      && (id v4 = v2,
          BOOL v5 = specialized Conversation.hasExactlyOneRemoteParticipant.getter(),
          v4,
          !v5))
    {
      char v11 = 1;
    }
    else
    {
      id v6 = v2;
      unint64_t v7 = specialized Conversation.unknownHandles.getter();

      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_16;
      }
      id v9 = v6;
      BOOL v10 = specialized Conversation.hasExactlyOneRemoteParticipant.getter();

      if (v10) {
        goto LABEL_16;
      }
      char v11 = 2;
    }
    char v25 = v11;
LABEL_16:
    if (one-time initialization token for spam != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.spam);
    id v17 = v2;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134218496;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 1024;
      uint64_t v21 = v17;
      specialized Conversation.hasSingleUnknownContact.getter();

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 18) = 1024;
      uint64_t v22 = v21;
      specialized Conversation.hasExactlyOneRemoteParticipant.getter();

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v18, v19, "flow: %ld, conversation.hasSingleUnknownContact: %{BOOL}d, conversation.hasExactlyOneRemoteParticipant: %{BOOL}d", (uint8_t *)v20, 0x18u);
      MEMORY[0x1C87760E0](v20, -1, -1);
    }
    else
    {

      uint64_t v18 = v17;
    }

    unint64_t v23 = v17;
    Swift::Int v24 = specialized Conversation.unknownHandles.getter();

    swift_beginAccess();
    InCallControlsBlockCell.viewModel.setter(v24, v25);

    return;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationControls);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    long long v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v15 = 0;
    _os_log_impl(&dword_1C2F90000, v13, v14, "Cannot configure block unknown caller cell because conversation is nil", v15, 2u);
    MEMORY[0x1C87760E0](v15, -1, -1);
  }
}

void closure #9 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 16;
  swift_beginAccess();
}

void InCallControlsCollectionViewController.configurePTTTitleCell(_:)()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  swift_beginAccess();
  id v2 = *v1;
  if (*v1)
  {
    BOOL v3 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x270);
    uint64_t v4 = v2;
    v3();
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 216))(ObjectType, v6);
    uint64_t v8 = swift_unknownObjectRelease();
    if (v6)
    {
      ((void (*)(uint64_t))v3)(v8);
      self;
      uint64_t v9 = swift_dynamicCastObjCClass();
      if (v9)
      {
        BOOL v10 = (void *)v9;
        swift_unknownObjectRetain();
        InCallControlsPTTCallDetailsViewModel.init(pttCall:)(v10, v11);
        InCallControlsPTTTitleCell.configure(with:)(v11);
        outlined release of InCallControlsPTTCallDetailsViewModel((uint64_t)v11);
      }

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void InCallControlsCollectionViewController.configureLeavePTTChannelCell(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v7 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x270);
    uint64_t v8 = v5;
    v7();
    uint64_t v10 = v9;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 216))(ObjectType, v10);
    uint64_t v12 = swift_unknownObjectRelease();
    if (v10)
    {
      ((void (*)(uint64_t))v7)(v12);
      self;
      uint64_t v13 = swift_dynamicCastObjCClass();
      if (v13)
      {
        os_log_type_t v14 = (void *)v13;
        swift_unknownObjectRetain();
        InCallControlsPTTCallDetailsViewModel.init(pttCall:)(v14, v17);
        uint64_t v15 = (*(uint64_t (**)(uint64_t *))((*v6 & *a1) + 0xD0))(v17);
        uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))((*v6 & *a1) + 0x70))(v15);
        objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v2, sel_didTapPTTLeaveChannelButton_, 64);

        outlined release of InCallControlsPTTCallDetailsViewModel((uint64_t)v17);
      }

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v7 = a4 + 16;
  OUTLINED_FUNCTION_2();
  uint64_t v8 = MEMORY[0x1C8776240](v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    a5(a1);
  }
}

void InCallControlsCollectionViewController.configureOpenPTTAppCell(_:)(void *a1)
{
  BOOL v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v6 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x270);
    uint64_t v7 = v4;
    v6();
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 216))(ObjectType, v9);
    uint64_t v11 = swift_unknownObjectRelease();
    if (v9)
    {
      ((void (*)(uint64_t))v6)(v11);
      self;
      uint64_t v12 = swift_dynamicCastObjCClass();
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        swift_unknownObjectRetain();
        InCallControlsPTTCallDetailsViewModel.init(pttCall:)(v13, v14);
        (*(void (**)(uint64_t *))((*v5 & *a1) + 0x90))(v14);
        outlined release of InCallControlsPTTCallDetailsViewModel((uint64_t)v14);
      }

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

BOOL specialized Conversation.hasSingleUnknownContact.getter()
{
  id v1 = objc_msgSend(v0, sel_mergedRemoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection.first.getter();
  BOOL v3 = v2;
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769830;
  *(void *)(inited + 32) = objc_msgSend(v3, sel_handle);
  specialized Array._endMutation()();
  uint64_t v5 = specialized Set.init<A>(_:)(inited);
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v6 = static ParticipantContactDetailsCache.faceTime;
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v5, (uint64_t)v6);
  uint64_t v8 = v7;

  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  return v9 == 0;
}

uint64_t closure #1 in InCallControlsCollectionViewController.createSectionHeaderViewRegistration()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a5 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v6);
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = result + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
    swift_beginAccess();
    outlined init with copy of FeatureEligibility?(v9, (uint64_t)&v11, &demangling cache variable for type metadata for Activity?);
    if (v12)
    {
      outlined init with take of Notice(&v11, (uint64_t)v13);
      outlined init with copy of IDSLookupManager((uint64_t)v13, (uint64_t)&v11);
      uint64_t v10 = InCallControlsActivitySectionHeaderViewModel.init(activity:)(&v11);
      (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x58))(v10);

      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    else
    {

      return outlined destroy of SystemUpdateNotice?((uint64_t)&v11, &demangling cache variable for type metadata for Activity?);
    }
  }
  return result;
}

void closure #1 in InCallControlsCollectionViewController.createActivityCellRegistration()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InCallControlsActivityCellViewModel();
  MEMORY[0x1F4188790](v9 - 8);
  long long v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1C8776240](a4 + 16);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    os_log_type_t v14 = (void **)(v12 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
    swift_beginAccess();
    uint64_t v15 = *v14;
    if (*v14)
    {
      uint64_t v16 = (uint64_t)v13 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity;
      swift_beginAccess();
      outlined init with copy of FeatureEligibility?(v16, (uint64_t)&v31, &demangling cache variable for type metadata for Activity?);
      if (v32)
      {
        outlined init with take of Notice(&v31, (uint64_t)v33);
        id v17 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v18 = *(uint64_t (**)(void *, char **))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0);
        os_log_type_t v19 = v15;
        uint64_t v20 = v13;
        uint64_t v21 = v18(v13, &protocol witness table for InCallControlsCollectionViewController);
        uint64_t v22 = (*(uint64_t (**)(uint64_t))((*v17 & *v19) + 0x270))(v21);
        uint64_t v24 = v23;
        uint64_t v25 = outlined init with copy of IDSLookupManager((uint64_t)v33, (uint64_t)&v31);
        (*(void (**)(uint64_t))((*v17 & *v19) + 0x2B8))(v25);
        uint64_t v26 = type metadata accessor for Participant(0);
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v26);
        uint64_t v27 = (uint64_t *)&v20[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants];
        swift_beginAccess();
        uint64_t v28 = *v27;
        swift_bridgeObjectRetain();
        double v29 = InCallControlsActivityCellViewModel.init(call:activity:localParticipant:participants:)(v22, v24, (uint64_t)&v31, (uint64_t)v8, v28, v11);
        (*(void (**)(void *, double))((*v17 & *a1) + 0xB0))(v11, v29);

        outlined destroy of Participant.State((uint64_t)v11, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      }
      else
      {

        outlined destroy of SystemUpdateNotice?((uint64_t)&v31, &demangling cache variable for type metadata for Activity?);
      }
    }
    else
    {
    }
  }
}

void closure #1 in InCallControlsCollectionViewController.createParticipantCellRegistration()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for InCallControlsParticipantCellViewModel();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Participant(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v52 - v21;
  swift_beginAccess();
  uint64_t v23 = (char *)MEMORY[0x1C8776240](a4 + 16);
  if (v23)
  {
    uint64_t v55 = a2;
    uint64_t v56 = v23;
    uint64_t v24 = (uint64_t *)&v23[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants];
    swift_beginAccess();
    unint64_t v54 = v24;
    uint64_t v25 = *v24;
    uint64_t v26 = *(void *)(*v24 + 16);
    if (v26)
    {
      uint64_t v53 = a1;
      uint64_t v27 = v25 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v28 = *(void *)(v14 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        _s15ConversationKit11ParticipantVWOcTm_10(v27, (uint64_t)v20, (void (*)(void))type metadata accessor for Participant);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        outlined destroy of Participant.State((uint64_t)v20, (void (*)(void))type metadata accessor for Participant);
        v27 += v28;
        if (!--v26)
        {
          uint64_t v29 = 1;
          goto LABEL_9;
        }
      }
      outlined init with take of Participant((uint64_t)v20, (uint64_t)v12);
      uint64_t v29 = 0;
LABEL_9:
      a1 = v53;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v12, v29, 1, v13);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for Participant?);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_1C376BA10;
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      MEMORY[0x1F4188790](v31 - 8);
      uint64_t v33 = (char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v33, a3, v34);
      __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v34);
      uint64_t v35 = specialized >> prefix<A>(_:)((uint64_t)v33);
      uint64_t v37 = v36;
      outlined destroy of SystemUpdateNotice?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v38 = MEMORY[0x1E4FBB1A0];
      *(void *)(v30 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v39 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v30 + 64) = v39;
      *(void *)(v30 + 32) = v35;
      *(void *)(v30 + 40) = v37;
      uint64_t v58 = IndexPath.item.getter();
      uint64_t v40 = String.init<A>(reflecting:)();
      *(void *)(v30 + 96) = v38;
      *(void *)(v30 + 104) = v39;
      *(void *)(v30 + 72) = v40;
      *(void *)(v30 + 80) = v41;
      uint64_t v58 = *v54;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Participant]);
      uint64_t v42 = String.init<A>(reflecting:)();
      *(void *)(v30 + 136) = v38;
      *(void *)(v30 + 144) = v39;
      *(void *)(v30 + 112) = v42;
      *(void *)(v30 + 120) = v43;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of Participant((uint64_t)v12, (uint64_t)v22);
      _s15ConversationKit11ParticipantVWOcTm_10((uint64_t)v22, (uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
      uint64_t v44 = v56;
      char v45 = InCallControlsCollectionViewController.participantSupportsMultiway(_:)((uint64_t)v22);
      uint64_t v46 = (unsigned __int8 *)&v44[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_mode];
      swift_beginAccess();
      unsigned __int8 v47 = *v46;
      char v48 = InCallControlsCollectionViewController.isLocalMemberAuthorizedToChangeGroupMembership.getter();
      int v49 = v45 & 1;
      uint64_t v50 = v57;
      InCallControlsParticipantCellViewModel.init(participant:supportsMultiway:mode:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v17, v49, v47, v48 & 1, v57);
      InCallControlsParticipantCell.configure(with:)(v50);
      outlined destroy of Participant.State(v50, (void (*)(void))type metadata accessor for InCallControlsParticipantCellViewModel);
      outlined destroy of Participant.State((uint64_t)v22, (void (*)(void))type metadata accessor for Participant);
      uint64_t v51 = a1 + OBJC_IVAR____TtC15ConversationKit29InCallControlsParticipantCell_participantCellDelegate;
      swift_beginAccess();
      *(void *)(v51 + 8) = &protocol witness table for InCallControlsCollectionViewController;
      swift_unknownObjectWeakAssign();
    }
  }
}

uint64_t InCallControlsCollectionViewController.participantSupportsMultiway(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_50();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 120))();
  uint64_t v4 = type metadata accessor for Participant(0);
  unint64_t v5 = specialized Dictionary.subscript.getter(a1 + *(int *)(v4 + 20), v3);
  swift_bridgeObjectRelease();
  if (v5 == 2) {
    return 0;
  }
  if (v5 == 3) {
    return 1;
  }
  return (v5 >> 24) & 1;
}

id InCallControlsCollectionViewController.didTapPTTLeaveChannelButton(_:)(uint64_t a1)
{
  uint64_t v3 = (id *)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager);
  swift_beginAccess();
  id result = *v3;
  if (*v3) {
    return objc_msgSend(result, sel_pttLeaveButtonTappedWithButton_, a1);
  }
  return result;
}

void InCallControlsCollectionViewController.collectionView(_:didSelectItemAt:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, sel_deselectItemAtIndexPath_animated_, isa, 1);

  Class v10 = IndexPath._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v6, sel_cellForItemAtIndexPath_, v10);

  if (v11)
  {
    uint64_t v12 = &v2[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate];
    OUTLINED_FUNCTION_2();
    uint64_t v13 = MEMORY[0x1C8776240](v12);
    if (!v13)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:type:_:)();
      goto LABEL_13;
    }
    uint64_t v14 = v13;
    uint64_t v15 = *((void *)v12 + 1);
    unint64_t v16 = IndexPath.section.getter();
    id v17 = v2;
    switch(InCallControlsCollectionViewController.visibleCollectionViewSection(atIndex:)(v16))
    {
      case 1u:
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        uint64_t v32 = (uint64_t)&v2[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_activity];
        OUTLINED_FUNCTION_2();
        outlined init with copy of FeatureEligibility?(v32, (uint64_t)&v166, &demangling cache variable for type metadata for Activity?);
        if (v167)
        {
          outlined init with take of Notice(&v166, (uint64_t)v168);
          swift_getObjectType();
          outlined init with copy of IDSLookupManager((uint64_t)v168, v1);
          OUTLINED_FUNCTION_233();
          swift_storeEnumTagMultiPayload();
          uint64_t v33 = *(void (**)(uint64_t))(v15 + 8);
          id v34 = v11;
          uint64_t v35 = OUTLINED_FUNCTION_21_36();
          v33(v35);
          swift_unknownObjectRelease();

          outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v168);
        }
        else
        {
          swift_unknownObjectRelease();

          outlined destroy of SystemUpdateNotice?((uint64_t)&v166, &demangling cache variable for type metadata for Activity?);
        }
        goto LABEL_14;
      case 2u:
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v162 = &v147;
        uint64_t v37 = OUTLINED_FUNCTION_8(v36);
        MEMORY[0x1F4188790](v37);
        OUTLINED_FUNCTION_38_16();
        uint64_t v40 = v38 - v39;
        uint64_t v41 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
        if (v41)
        {
          id v42 = v41;
          dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
        }
        else
        {
          uint64_t v79 = type metadata accessor for UUID();
          uint64_t v43 = OUTLINED_FUNCTION_68_0(v79);
        }
        uint64_t v164 = (uint64_t *)v40;
        uint64_t v165 = v15;
        uint64_t v161 = (uint64_t)&v147;
        MEMORY[0x1F4188790](v43);
        OUTLINED_FUNCTION_38_16();
        uint64_t v82 = v80 - v81;
        if (one-time initialization token for addParticipantRowIdentifier != -1) {
          swift_once();
        }
        uint64_t v83 = type metadata accessor for UUID();
        __swift_project_value_buffer(v83, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.addParticipantRowIdentifier);
        OUTLINED_FUNCTION_10_0();
        uint64_t v159 = v84;
        OUTLINED_FUNCTION_2_1();
        v85();
        __swift_storeEnumTagSinglePayload(v82, 0, 1, v83);
        uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        OUTLINED_FUNCTION_37_15(v86, v87, v88, v89, v90, v91, v92, v93, v147);
        uint64_t v95 = OUTLINED_FUNCTION_8(v94);
        MEMORY[0x1F4188790](v95);
        OUTLINED_FUNCTION_5_1();
        uint64_t v97 = (uint64_t)v7 + *(int *)(v96 + 56);
        uint64_t v98 = (uint64_t)v164;
        outlined init with copy of FeatureEligibility?((uint64_t)v164, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined init with copy of FeatureEligibility?(v82, v97, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v99 = OUTLINED_FUNCTION_33_0((uint64_t)v7, 1, v83);
        if (v67)
        {
          outlined destroy of SystemUpdateNotice?(v82, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?(v98, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v97, 1, v83);
          if (v67)
          {
            outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_24_33();
            goto LABEL_55;
          }
        }
        else
        {
          MEMORY[0x1F4188790](v99);
          OUTLINED_FUNCTION_38_16();
          outlined init with copy of FeatureEligibility?((uint64_t)v7, v100 - v101, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v97, 1, v83);
          if (!v102)
          {
            unint64_t v157 = &v147;
            uint64_t v158 = (uint64_t)&v147;
            OUTLINED_FUNCTION_44_14();
            MEMORY[0x1F4188790](v109);
            OUTLINED_FUNCTION_20_38((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
            OUTLINED_FUNCTION_63_0();
            v111();
            _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            OUTLINED_FUNCTION_69_3();
            LODWORD(v156) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v112 = (void (*)(void))v148;
            OUTLINED_FUNCTION_1_19();
            v112();
            outlined destroy of SystemUpdateNotice?(v82, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v164, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_68_9();
            OUTLINED_FUNCTION_1_19();
            v112();
            OUTLINED_FUNCTION_52_0();
            OUTLINED_FUNCTION_52_0();
            outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_24_33();
            if (v156)
            {
LABEL_55:
              if (one-time initialization token for conversationKit != -1) {
                swift_once();
              }
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
              uint64_t v113 = OUTLINED_FUNCTION_25_15();
              *(_OWORD *)(v113 + 16) = xmmword_1C3769620;
              LOBYTE(v168[0]) = InCallControlsCollectionViewController.isAddingParticipantsAllowed.getter() & 1;
              uint64_t v114 = String.init<A>(reflecting:)();
              uint64_t v116 = v115;
              *(void *)(v113 + 56) = MEMORY[0x1E4FBB1A0];
              *(void *)(v113 + 64) = lazy protocol witness table accessor for type String and conformance String();
              *(void *)(v113 + 32) = v114;
              *(void *)(v113 + 40) = v116;
              static os_log_type_t.default.getter();
              os_log(_:dso:log:type:_:)();
              swift_bridgeObjectRelease();
              if (InCallControlsCollectionViewController.isAddingParticipantsAllowed.getter())
              {
                type metadata accessor for SpringBoardUtilities();
                uint64_t v117 = v2;
                OUTLINED_FUNCTION_41_0();
                specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)();
                goto LABEL_14;
              }
            }
LABEL_4:
            swift_unknownObjectRelease();
LABEL_13:

LABEL_14:
            OUTLINED_FUNCTION_28();
            return;
          }
          outlined destroy of SystemUpdateNotice?(v82, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v164, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_68_9();
          OUTLINED_FUNCTION_26_2();
          v103();
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        goto LABEL_4;
      case 7u:
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v161 = (uint64_t)&v147;
        uint64_t v20 = OUTLINED_FUNCTION_8(v19);
        uint64_t v22 = *(void *)(v21 + 64);
        MEMORY[0x1F4188790](v20);
        uint64_t v155 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource;
        uint64_t v23 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
        if (v23)
        {
          id v17 = v23;
          dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
        }
        else
        {
          uint64_t v46 = type metadata accessor for UUID();
          uint64_t v24 = __swift_storeEnumTagSinglePayload((uint64_t)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v46);
        }
        uint64_t v162 = (uint64_t *)((char *)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v163 = v14;
        uint64_t v165 = v15;
        OUTLINED_FUNCTION_37_15(v24, v25, v26, v27, v28, v29, v30, v31, v147);
        MEMORY[0x1F4188790](v47);
        uint64_t v164 = (uint64_t *)v22;
        OUTLINED_FUNCTION_56_9();
        if (one-time initialization token for blockUnkownRowIdentifier != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for UUID();
        OUTLINED_FUNCTION_52_10(v48, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.blockUnkownRowIdentifier);
        OUTLINED_FUNCTION_10_0();
        unint64_t v157 = v49;
        uint64_t v50 = (void (*)(uint64_t))v49[2];
        unint64_t v151 = v49 + 2;
        uint64_t v154 = v50;
        OUTLINED_FUNCTION_2_1();
        v51();
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v48);
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        OUTLINED_FUNCTION_39_18(v52, v53, v54, v55, v56, v57, v58, v59, v147);
        OUTLINED_FUNCTION_0();
        MEMORY[0x1F4188790](v60);
        uint64_t v153 = v61;
        OUTLINED_FUNCTION_29_27();
        uint64_t v152 = v62;
        uint64_t v63 = v15 + *(int *)(v62 + 48);
        uint64_t v64 = (uint64_t)v162;
        outlined init with copy of FeatureEligibility?((uint64_t)v162, v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v158 = v63;
        outlined init with copy of FeatureEligibility?((uint64_t)v17, v63, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v65 = OUTLINED_FUNCTION_33_0(v15, 1, v48);
        if (v67)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v158, 1, v48);
          if (v67)
          {
            outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_8_59();
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v150 = (uint64_t)v17;
          unint64_t v149 = &v147;
          uint64_t v66 = (uint64_t)v164;
          MEMORY[0x1F4188790](v65);
          OUTLINED_FUNCTION_56_9();
          outlined init with copy of FeatureEligibility?(v15, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v158, 1, v48);
          if (!v67)
          {
            uint64_t v148 = &v147;
            OUTLINED_FUNCTION_44_14();
            MEMORY[0x1F4188790](v104);
            OUTLINED_FUNCTION_21();
            uint64_t v156 = (id *)v48;
            OUTLINED_FUNCTION_20_38(v105);
            OUTLINED_FUNCTION_63_0();
            v106();
            _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            uint64_t v147 = (uint64_t)v17;
            LODWORD(v158) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v107 = *(void (**)(void))(v66 + 8);
            OUTLINED_FUNCTION_57_6();
            v107();
            outlined destroy of SystemUpdateNotice?(v150, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_57_6();
            v107();
            OUTLINED_FUNCTION_52_0();
            OUTLINED_FUNCTION_52_0();
            uint64_t v48 = (uint64_t)v156;
            outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_8_59();
            if (v158) {
              goto LABEL_72;
            }
LABEL_37:
            MEMORY[0x1F4188790](v108);
            OUTLINED_FUNCTION_29_27();
            uint64_t v68 = *(void **)&v2[v155];
            uint64_t v160 = v69;
            uint64_t v162 = (uint64_t *)v15;
            if (v68)
            {
              id v70 = v68;
              dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
            }
            else
            {
              uint64_t v71 = __swift_storeEnumTagSinglePayload(v15, 1, 1, v48);
            }
            uint64_t v118 = v152;
            OUTLINED_FUNCTION_39_18(v71, v72, v73, v74, v75, v76, v77, v78, v147);
            MEMORY[0x1F4188790](v119);
            OUTLINED_FUNCTION_29_27();
            if (one-time initialization token for reportUnknownRowIdentifier != -1) {
              swift_once();
            }
            OUTLINED_FUNCTION_52_10(v48, (uint64_t)static InCallControlsCollectionViewController.CollectionViewSection.reportUnknownRowIdentifier);
            v154(v15);
            uint64_t v120 = __swift_storeEnumTagSinglePayload(v15, 0, 1, v48);
            uint64_t v158 = (uint64_t)&v147;
            MEMORY[0x1F4188790](v120);
            OUTLINED_FUNCTION_5_10();
            uint64_t v123 = v121 - v122;
            uint64_t v124 = v121 - v122 + *(int *)(v118 + 48);
            uint64_t v125 = (uint64_t)v162;
            outlined init with copy of FeatureEligibility?((uint64_t)v162, v121 - v122, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v161 = v124;
            outlined init with copy of FeatureEligibility?(v15, v124, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v126 = OUTLINED_FUNCTION_33_0(v123, 1, v48);
            if (v67)
            {
              outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              outlined destroy of SystemUpdateNotice?(v125, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_33_0(v161, 1, v48);
              if (v67)
              {
                outlined destroy of SystemUpdateNotice?(v123, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                OUTLINED_FUNCTION_14_48();
                goto LABEL_72;
              }
            }
            else
            {
              MEMORY[0x1F4188790](v126);
              OUTLINED_FUNCTION_5_10();
              uint64_t v129 = v127 - v128;
              uint64_t v130 = OUTLINED_FUNCTION_68_9();
              outlined init with copy of FeatureEligibility?(v130, v131, v132);
              OUTLINED_FUNCTION_33_0(v161, 1, v48);
              if (!v133)
              {
                uint64_t v156 = (id *)&v147;
                uint64_t v164 = &v147;
                OUTLINED_FUNCTION_44_14();
                MEMORY[0x1F4188790](v135);
                OUTLINED_FUNCTION_21();
                OUTLINED_FUNCTION_20_38(v136);
                OUTLINED_FUNCTION_63_0();
                v137();
                _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
                uint64_t v155 = v129;
                LODWORD(v161) = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v138 = (void (*)(void))v148;
                OUTLINED_FUNCTION_1_19();
                v138();
                outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                OUTLINED_FUNCTION_1_19();
                v138();
                OUTLINED_FUNCTION_52_0();
                uint64_t v139 = OUTLINED_FUNCTION_69_3();
                outlined destroy of SystemUpdateNotice?(v139, v140);
                OUTLINED_FUNCTION_14_48();
                if ((v161 & 1) == 0) {
                  goto LABEL_4;
                }
LABEL_72:
                swift_getObjectType();
                OUTLINED_FUNCTION_233();
                swift_storeEnumTagMultiPayload();
                uint64_t v141 = *(void (**)(uint64_t))(v165 + 8);
                id v142 = v11;
                uint64_t v143 = OUTLINED_FUNCTION_21_36();
                v141(v143);
                swift_unknownObjectRelease();

                outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
                goto LABEL_14;
              }
              outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_26_2();
              v134();
            }
            outlined destroy of SystemUpdateNotice?(v123, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
            goto LABEL_4;
          }
          outlined destroy of SystemUpdateNotice?(v150, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          ((void (*)(id, uint64_t))v157[1])(v17, v48);
          OUTLINED_FUNCTION_52_0();
        }
        outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        OUTLINED_FUNCTION_8_59();
        goto LABEL_37;
      case 0xAu:
        uint64_t v44 = (id *)&v2[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager];
        OUTLINED_FUNCTION_2();
        if (*v44)
        {
          id v45 = *v44;
          ConversationControlsManager.openPTTApp()();
        }
        goto LABEL_4;
      case 0xBu:
        type metadata accessor for IndexPath();
        OUTLINED_FUNCTION_4();
        MEMORY[0x1F4188790](v144);
        OUTLINED_FUNCTION_17_0();
        (*(void (**)(id, uint64_t))(v145 + 16))(v11, v4);
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        v168[0] = 0xD00000000000001BLL;
        v168[1] = 0x80000001C37AA4A0;
        *(void *)&long long v166 = IndexPath.section.getter();
        v146._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v146);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1C337E6A8);
      default:
        goto LABEL_4;
    }
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  OUTLINED_FUNCTION_28();
  os_log(_:dso:log:type:_:)();
}

void closure #1 in InCallControlsCollectionViewController.collectionView(_:didSelectItemAt:)()
{
}

{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  unint64_t v5 = v4 - v3;
  if (v1)
  {
    swift_getObjectType();
    OUTLINED_FUNCTION_69_3();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_34_19();
    v6();
    outlined destroy of Participant.State(v5, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
    OUTLINED_FUNCTION_28();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.debug.getter();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_46_16();
    OUTLINED_FUNCTION_28();
    os_log(_:dso:log:type:_:)();
  }
}

void InCallControlsCollectionViewController.participantIdentifiers.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v25 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  unint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants);
  OUTLINED_FUNCTION_2();
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v5 + 16);
  if (v7)
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    OUTLINED_FUNCTION_22_0();
    uint64_t v9 = v6 + v8;
    uint64_t v10 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v13 = v12;
    uint64_t v24 = v11;
    uint64_t v14 = (void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    uint64_t v23 = *(void *)(v3 + 72);
    do
    {
      MEMORY[0x1F4188790](v11);
      OUTLINED_FUNCTION_5_10();
      uint64_t v17 = v15 - v16;
      _s15ConversationKit11ParticipantVWOcTm_10(v9, v1, (void (*)(void))type metadata accessor for Participant);
      (*v14)(v17, v1 + *(int *)(v25 + 20), v10);
      outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for Participant);
      uint64_t v18 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
        uint64_t v18 = v26;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        char v22 = OUTLINED_FUNCTION_57_5(v19);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22, v20 + 1, 1);
        uint64_t v18 = v26;
      }
      *(void *)(v18 + 16) = v20 + 1;
      OUTLINED_FUNCTION_22_0();
      uint64_t v10 = v24;
      uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v18 + v21 + *(void *)(v13 + 72) * v20, v17, v24);
      uint64_t v26 = v18;
      v9 += v23;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t InCallControlsCollectionViewController.participantCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participants;
  OUTLINED_FUNCTION_2();
  return *(void *)(*(void *)v1 + 16);
}

double InCallControlsCollectionViewController.spatialPosition(for:relativeTo:)()
{
  return 0.0;
}

uint64_t protocol witness for ParticipantsViewController.participantsViewControllerDelegate.getter in conformance InCallControlsCollectionViewController()
{
  return InCallControlsCollectionViewController.participantsViewControllerDelegate.getter();
}

uint64_t protocol witness for ParticipantsViewController.participantsViewControllerDelegate.setter in conformance InCallControlsCollectionViewController(uint64_t a1, uint64_t a2)
{
  return InCallControlsCollectionViewController.participantsViewControllerDelegate.setter(a1, a2);
}

uint64_t (*protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance InCallControlsCollectionViewController(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return ParticipantGridViewController.participantsViewControllerDelegate.modify;
}

void protocol witness for ParticipantsViewController.participantIdentifiers.getter in conformance InCallControlsCollectionViewController()
{
}

uint64_t protocol witness for ParticipantsViewController.participantCount.getter in conformance InCallControlsCollectionViewController()
{
  return InCallControlsCollectionViewController.participantCount.getter();
}

void protocol witness for ParticipantsViewController.update(participant:broadcastingState:) in conformance InCallControlsCollectionViewController()
{
}

void protocol witness for ParticipantsViewController.update(participant:isKickingAvailable:) in conformance InCallControlsCollectionViewController()
{
}

void protocol witness for ParticipantsViewController.update(with:updateReason:) in conformance InCallControlsCollectionViewController()
{
}

void protocol witness for ParticipantsViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:) in conformance InCallControlsCollectionViewController(Swift::OpaquePointer a1, Swift::Bool a2)
{
}

void InCallControlsCollectionViewController.inCallControlsParticipantCell(_:didTapAction:for:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  char v4 = v3;
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_17_0();
  uint64_t v6 = v0
     + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v6))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v7 = OUTLINED_FUNCTION_11_7();
    *(_OWORD *)(v7 + 16) = xmmword_1C37696D0;
    uint64_t v8 = String.init<A>(reflecting:)();
    char v25 = v4;
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v11 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v7 + 64) = v11;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v13 = OUTLINED_FUNCTION_8(v12);
    MEMORY[0x1F4188790](v13);
    OUTLINED_FUNCTION_21();
    uint64_t v16 = v15 - v14;
    uint64_t v17 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_0();
    unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v19(v16, v2, v17);
    __swift_storeEnumTagSinglePayload(v16, 0, 1, v17);
    uint64_t v20 = specialized >> prefix<A>(_:)(v16);
    uint64_t v22 = v21;
    outlined destroy of SystemUpdateNotice?(v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(void *)(v7 + 96) = MEMORY[0x1E4FBB1A0];
    *(void *)(v7 + 104) = v11;
    *(void *)(v7 + 72) = v20;
    *(void *)(v7 + 80) = v22;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    switch(v25)
    {
      case 4:
        swift_unknownObjectRelease();
        break;
      default:
        swift_getObjectType();
        uint64_t v23 = OUTLINED_FUNCTION_6_86();
        ((void (*)(uint64_t))v19)(v23);
        OUTLINED_FUNCTION_67_7();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_34_19();
        v24();
        swift_unknownObjectRelease();
        outlined destroy of Participant.State(v22, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
        break;
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    OUTLINED_FUNCTION_31_26();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t InCallControlsCollectionViewController.inCallControlsActivityCell(_:didTap:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = v2
     + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v6))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_getObjectType();
    outlined init with copy of IDSLookupManager(a2, v3);
    OUTLINED_FUNCTION_24_2();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_28_29();
    OUTLINED_FUNCTION_34_19();
    v7();
    swift_unknownObjectRelease();
    return outlined destroy of Participant.State(v3, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    return OUTLINED_FUNCTION_31_26();
  }
}

uint64_t InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:)(void *a1, uint64_t a2)
{
  return InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:)(a1, a2, (uint64_t)"User tapped copy link", 21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, void *))specialized static SpringBoardUtilities.requestPasscodeUnlock(_:));
}

void closure #1 in InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:)()
{
}

uint64_t InCallControlsCollectionViewController.inCallControlsTitleCell(_:didTap:from:)(uint64_t a1, unsigned __int8 a2)
{
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  if (a2 - 2 >= 3)
  {
    if (a2)
    {
      if (one-time initialization token for conversationKit == -1)
      {
LABEL_11:
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        OUTLINED_FUNCTION_24_2();
        swift_storeEnumTagMultiPayload();
        InCallControlsCollectionViewController.inCallControlsTitleCellDidTapButton(_:_:)();
        return outlined destroy of Participant.State(v2, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
      }
    }
    else if (one-time initialization token for conversationKit == -1)
    {
      goto LABEL_11;
    }
    swift_once();
    goto LABEL_11;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  return os_log(_:dso:log:type:_:)();
}

uint64_t InCallControlsCollectionViewController.inCallControlsTitleCellDidTapButton(_:_:)()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v1))
  {
    swift_getObjectType();
    OUTLINED_FUNCTION_28_29();
    OUTLINED_FUNCTION_34_19();
    v2();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    return OUTLINED_FUNCTION_31_26();
  }
}

void InCallControlsCollectionViewController.inCallControlsBaseCellDidTapButton(_:)(void *a1)
{
  type metadata accessor for InCallControlsAddParticipantCell();
  if (swift_dynamicCastClass())
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v3 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
    InCallControlsCollectionViewController.isAddingParticipantsAllowed.getter();
    uint64_t v4 = String.init<A>(reflecting:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    static os_log_type_t.default.getter();
    OUTLINED_FUNCTION_46_16();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = &v1[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate];
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v7))
    {
      if (InCallControlsCollectionViewController.isAddingParticipantsAllowed.getter())
      {
        type metadata accessor for SpringBoardUtilities();
        uint64_t v8 = v1;
        id v9 = a1;
        specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      OUTLINED_FUNCTION_31_26();
    }
  }
}

void InCallControlsCollectionViewController.idsCapabilitiesChecker(_:didUpdate:)()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_dataSource];
  if (v1)
  {
    id v5 = v1;
    if (objc_msgSend(v0, sel_isViewLoaded))
    {
      uint64_t v2 = swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)(v2);
      uint64_t v4 = v3;
      swift_bridgeObjectRelease();
      InCallControlsCollectionViewController.reloadSections(_:in:animatingDifferences:)(v4, (uint64_t)v5, 1, (void (*)(uint64_t, uint64_t))specialized _ArrayProtocol.filter(_:), MEMORY[0x1E4FB0FB0]);

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t InCallControlsCollectionViewController.inCallControlsDidToggleIgnoreLMIRequestsCell(_:)()
{
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v3 = v0
     + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v3))
  {
    swift_getObjectType();
    OUTLINED_FUNCTION_24_2();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_28_29();
    OUTLINED_FUNCTION_34_19();
    v4();
    swift_unknownObjectRelease();
    return outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    return OUTLINED_FUNCTION_31_26();
  }
}

void InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_63();
  id v5 = &v0[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate];
  OUTLINED_FUNCTION_2();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (!v6)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    OUTLINED_FUNCTION_31_26();
    goto LABEL_15;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)v5 + 1);
  id v9 = (void *)swift_allocObject();
  id v9[2] = v7;
  uint64_t v9[3] = v8;
  void v9[4] = v0;
  v9[5] = v3;
  uint64_t v10 = one-time initialization token for shared;
  unint64_t v11 = v3;
  uint64_t v12 = v0;
  swift_unknownObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v13 + 704))()) {
    goto LABEL_8;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static ConversationCapabilities.shared) + 0x50))())
  {
LABEL_8:
    swift_getObjectType();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_34_19();
    v14();
    outlined destroy of Participant.State(v1, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
    InCallControlsCollectionViewController.configureToggleCaptionsCell(_:)(v11);
LABEL_14:
    swift_release();
    swift_unknownObjectRelease();
LABEL_15:
    OUTLINED_FUNCTION_28();
    return;
  }
  uint64_t v15 = self;
  id v16 = objc_msgSend(v15, sel_conversationKit);
  OUTLINED_FUNCTION_13_22();
  uint64_t v37 = OUTLINED_FUNCTION_13_55(0xD00000000000001FLL, 0x80000001C37AA8B0);
  uint64_t v18 = v17;

  unint64_t v19 = (void *)MEMORY[0x1C87730B0](0xD000000000000021, 0x80000001C37AA8D0);
  id v20 = (id)TUStringKeyForProduct();

  if (v20)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v24 = objc_msgSend(v15, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    uint64_t v25 = OUTLINED_FUNCTION_13_55(v21, v23);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();

    id v28 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v37, v18, v25, v27, 1);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
    id v29 = objc_msgSend(v15, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    OUTLINED_FUNCTION_4_6();
    v30._uint64_t countAndFlagsBits = 0;
    v30._unint64_t object = (void *)0xE000000000000000;
    uint64_t v31 = 0;
    Swift::String v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v29, v30, *(Swift::String *)(&v38 - 1));

    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = partial apply for closure #1 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:);
    *(void *)(v35 + 24) = v9;
    swift_retain();
    id v36 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v34._countAndFlagsBits, (uint64_t)v34._object, 0, (uint64_t)partial apply for closure #2 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:), v35);
    objc_msgSend(v28, sel_addAction_, v36);
    objc_msgSend(v12, sel_presentViewController_animated_completion_, v28, 1, 0);

    goto LABEL_14;
  }
  __break(1u);
}

uint64_t closure #1 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for InCallControlsCollectionViewController.Action(0);
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, char *, void *, uint64_t, uint64_t))(a2 + 8))(a3, v9, a4, ObjectType, a2);
  outlined destroy of Participant.State((uint64_t)v9, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
  return InCallControlsCollectionViewController.configureToggleCaptionsCell(_:)(a4);
}

uint64_t closure #2 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)static Defaults.shared + 712))(1);
  return a2(v3);
}

uint64_t InCallControlsCollectionViewController.openMessages(cell:tappedOpenMessagesButton:)(void *a1, uint64_t a2)
{
  return InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:)(a1, a2, (uint64_t)"User tapped open messages", 25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, void *))specialized static SpringBoardUtilities.requestPasscodeUnlock(_:));
}

uint64_t InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, char *, void *))
{
  uint64_t v8 = &v5[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate];
  OUTLINED_FUNCTION_2();
  uint64_t v9 = MEMORY[0x1C8776240](v8);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *((void *)v8 + 1);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v12 = type metadata accessor for SpringBoardUtilities();
    return a5(v12, v10, v11, v5, a1);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    return OUTLINED_FUNCTION_31_26();
  }
}

void closure #1 in InCallControlsCollectionViewController.openMessages(cell:tappedOpenMessagesButton:)()
{
}

BOOL closure #1 in Conversation.unknownHandles.getter(void **a1)
{
  uint64_t v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769830;
  *(void *)(inited + 32) = objc_msgSend(v1, sel_handle);
  specialized Array._endMutation()();
  uint64_t v3 = specialized Set.init<A>(_:)(inited);
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v4 = static ParticipantContactDetailsCache.faceTime;
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v3, (uint64_t)v4);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  unint64_t v7 = MEMORY[0x1E4FBC860];
  unint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = 32;
    do
    {
      uint64_t v10 = *(void **)(v6 + v9);
      if (v10)
      {
        id v11 = v10;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += 56;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    unint64_t v7 = v14;
  }
  swift_bridgeObjectRelease();
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v12 == 0;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_10(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of Participant.State(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t sub_1C33808B0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)()
{
  closure #1 in InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)(v0);
}

uint64_t sub_1C33808F0()
{
  type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  OUTLINED_FUNCTION_4();
  swift_release();
  OUTLINED_FUNCTION_1_19();
  v0();
  OUTLINED_FUNCTION_41_0();
  return swift_deallocObject();
}

void *partial apply for closure #1 in InCallControlsCollectionViewController.viewDidLoad()(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UICollectionLayoutListConfiguration.Appearance() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return closure #1 in InCallControlsCollectionViewController.viewDidLoad()(a1, a2, v6, v7);
}

uint64_t outlined bridged method (ob) of @objc TUConversation.messagesGroupPhotoData.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_messagesGroupPhotoData);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t partial apply for closure #2 in InCallControlsCollectionViewController.viewDidLoad()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in InCallControlsCollectionViewController.viewDidLoad()(a1, a2, a3, v3);
}

uint64_t partial apply for closure #3 in InCallControlsCollectionViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #3 in InCallControlsCollectionViewController.viewDidLoad()(a1, a2, a3, a4, v4);
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(size_t result, unint64_t a2)
{
  if (!result) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x1E4FBC860];
  }
  if (v4 < 1)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v5 = (void *)swift_allocObject();
    id result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    void v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t type metadata accessor for InCallControlsCollectionViewController.Action(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for InCallControlsCollectionViewController.Action);
}

uint64_t sub_1C3380BAC()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)()
{
  return closure #1 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1C3380C00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)(uint64_t a1)
{
  return closure #2 in InCallControlsCollectionViewController.inCallControlsDidToggleCaptionsCell(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection;
  if (!lazy protocol witness table cache variable for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection;
  if (!lazy protocol witness table cache variable for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsCollectionViewController.CollectionViewSection and conformance InCallControlsCollectionViewController.CollectionViewSection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InCallControlsCollectionViewController.CollectionViewSection()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [InCallControlsCollectionViewController.CollectionViewSection] and conformance [A], &demangling cache variable for type metadata for [InCallControlsCollectionViewController.CollectionViewSection]);
}

uint64_t sub_1C3380CE8(unsigned __int8 *a1)
{
  return InCallControlsCollectionViewController.mode.setter(*a1);
}

uint64_t sub_1C3380D1C(char *a1)
{
  return InCallControlsCollectionViewController.isOnScreen.setter(*a1);
}

uint64_t sub_1C3380D44@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate, a2);
}

uint64_t sub_1C3380D64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for InCallControlsCollectionViewController.participantsViewControllerDelegate : InCallControlsCollectionViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_participantsViewControllerDelegate);
}

uint64_t sub_1C3380D84@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for ParticipantGridViewController.participantsViewControllerDelegate : ParticipantGridViewController(a1, &OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate, a2);
}

uint64_t sub_1C3380DA4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for InCallControlsCollectionViewController.participantsViewControllerDelegate : InCallControlsCollectionViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate);
}

uint64_t dispatch thunk of InCallControlsCollectionViewControllerDelegate.inCallControlsCollectionViewController(_:didTap:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of InCallControlsCollectionViewControllerDelegate.isCaptioningEnabled(inCallControlsCollectionViewController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t ObjC metadata update function for InCallControlsCollectionViewController()
{
  return type metadata accessor for InCallControlsCollectionViewController(0);
}

uint64_t type metadata accessor for InCallControlsCollectionViewController(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for InCallControlsCollectionViewController);
}

void type metadata completion function for InCallControlsCollectionViewController()
{
  type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>?, &demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsSectionHeaderView>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsActivityCell, UUID>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsTitleCell, UUID>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsStatusCell, UUID>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsParticipantCell, UUID>);
          if (v4 <= 0x3F)
          {
            type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsAddParticipantCell, UUID>);
            if (v5 <= 0x3F)
            {
              type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsShareLinkCell, UUID>);
              if (v6 <= 0x3F)
              {
                type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsIgnoreLMIRequestsCell, UUID>);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsToggleCaptionsCell, UUID>);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<UICollectionViewListCell, UUID>);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsOpenMessagesCell, UUID>);
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsBlockCell, UUID>);
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsReportCell, UUID>);
                          if (v12 <= 0x3F)
                          {
                            type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTTitleCell, UUID>);
                            if (v13 <= 0x3F)
                            {
                              type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTLeaveChannelCell, UUID>);
                              if (v14 <= 0x3F)
                              {
                                type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, (unint64_t *)&lazy cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>?, (uint64_t *)&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<InCallControlsPTTLeaveChannelFooterView>);
                                if (v15 <= 0x3F)
                                {
                                  type metadata accessor for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>?(319, &lazy cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>?, &demangling cache variable for type metadata for UICollectionView.CellRegistration<InCallControlsPTTOpenAppCell, UUID>);
                                  if (v16 <= 0x3F) {
                                    swift_updateClassMetadata2();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for InCallControlsCollectionViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsCollectionViewController);
}

uint64_t dispatch thunk of InCallControlsCollectionViewController.__allocating_init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 400))();
}

unsigned char *storeEnumTagSinglePayload for InCallControlsCollectionViewController.CollectionViewSection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C33814E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsCollectionViewController.CollectionViewSection()
{
  return &type metadata for InCallControlsCollectionViewController.CollectionViewSection;
}

char *initializeBufferWithCopyOfBuffer for InCallControlsCollectionViewController.Action(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        long long v7 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v7;
        (**(void (***)(void *, const void *))(v7 - 8))(a1, a2);
        goto LABEL_7;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for InCallControlsCollectionViewController.Action(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
      uint64_t v3 = type metadata accessor for UUID();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for InCallControlsCollectionViewController.Action(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      long long v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      goto LABEL_5;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for InCallControlsCollectionViewController.Action(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Participant.State((uint64_t)a1, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = a2[3];
        a1[3] = v6;
        a1[4] = a2[4];
        (**(void (***)(void *, void *))(v6 - 8))(a1, a2);
        goto LABEL_6;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for InCallControlsCollectionViewController.Action(void *a1, const void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithTake for InCallControlsCollectionViewController.Action(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Participant.State((uint64_t)a1, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for InCallControlsCollectionViewController.Action()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1C3382164()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  OUTLINED_FUNCTION_4();

  OUTLINED_FUNCTION_1_19();
  v1();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InCallControlsCollectionViewController.apply(_:to:animatingDifferences:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<InCallControlsCollectionViewController.CollectionViewSection, UUID>);
  OUTLINED_FUNCTION_1(v0);
  return closure #1 in InCallControlsCollectionViewController.apply(_:to:animatingDifferences:)();
}

void partial apply for closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureTitleCell(_:));
}

void partial apply for closure #2 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureStatusCell(_:));
}

void partial apply for closure #3 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureAddParticipantCell(_:));
}

void partial apply for closure #4 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureLinkLayoutCell(_:));
}

void partial apply for closure #5 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureIgnoreLMIRequestsCell(_:));
}

void partial apply for closure #7 in InCallControlsCollectionViewController.configureCellRegistrations()(void *a1, uint64_t a2, uint64_t a3)
{
  closure #7 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3);
}

void partial apply for closure #8 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #8 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3);
}

void partial apply for closure #9 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #9 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3);
}

void partial apply for closure #11 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configurePTTTitleCell(_:));
}

void partial apply for closure #12 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureLeavePTTChannelCell(_:));
}

void partial apply for closure #14 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureOpenPTTAppCell(_:));
}

void partial apply for closure #6 in InCallControlsCollectionViewController.configureCellRegistrations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.configureCellRegistrations()(a1, a2, a3, v3, (void (*)(uint64_t))InCallControlsCollectionViewController.configureToggleCaptionsCell(_:));
}

uint64_t outlined release of InCallControlsPTTCallDetailsViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *outlined release of InCallControlsTitleCellViewModel(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unsigned int v4 = (void *)a1[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v3);
  swift_bridgeObjectRelease();

  return a1;
}

void partial apply for closure #1 in InCallControlsCollectionViewController.createParticipantCellRegistration()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.createParticipantCellRegistration()(a1, a2, a3, v3);
}

void partial apply for closure #1 in InCallControlsCollectionViewController.createActivityCellRegistration()(void *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in InCallControlsCollectionViewController.createActivityCellRegistration()(a1, a2, a3, v3);
}

uint64_t partial apply for closure #1 in InCallControlsCollectionViewController.createSectionHeaderViewRegistration()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in InCallControlsCollectionViewController.createSectionHeaderViewRegistration()(a1, a2, a3, a4, v4);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVySSG_15ConversationKit22TranscriptionViewModelC7CaptionVs5NeverOTg506_sSS15f5Kit22hij2C7k12VIggr_SSAEs5L11OIegnrzr_TRSSAMIggr_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v10 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v25 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v28 = a4 >> 1;
  uint64_t v29 = a3;
  BOOL v13 = __OFSUB__(a4 >> 1, a3);
  uint64_t v14 = (a4 >> 1) - a3;
  if (v13) {
    goto LABEL_17;
  }
  if (v14)
  {
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
LABEL_18:
      __break(1u);
      return;
    }
    uint64_t v24 = v6;
    uint64_t v15 = 0;
    uint64_t v16 = v30;
    for (unint64_t i = (uint64_t *)(a2 + 16 * v29 + 8); ; i += 2)
    {
      uint64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      if (v29 + v15 >= v28 || v15 >= v14) {
        goto LABEL_16;
      }
      uint64_t v20 = *(i - 1);
      uint64_t v21 = *i;
      swift_bridgeObjectRetain();
      v26(v20, v21);
      swift_bridgeObjectRelease();
      uint64_t v30 = v16;
      unint64_t v23 = *(void *)(v16 + 16);
      unint64_t v22 = *(void *)(v16 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v16 = v30;
      }
      *(void *)(v16 + 16) = v23 + 1;
      outlined init with take of TranscriptionView((uint64_t)v12, v16+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v23, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      ++v15;
      if (v18 == v14) {
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
}

uint64_t TranscriptionView.init(viewModel:positionalData:lowConfidenceText:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0x10000;
  uint64_t v8 = (int *)type metadata accessor for TranscriptionView();
  uint64_t v9 = (uint64_t *)(a4 + v8[6]);
  *uint64_t v9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  swift_retain();
  *(void *)(a4 + 8) = ObservedObject.init(wrappedValue:)();
  *(void *)(a4 + 16) = v10;
  *(void *)(a4 + v8[7]) = a1;
  uint64_t v11 = (void *)(a4 + v8[8]);
  *uint64_t v11 = a2;
  v11[1] = a3;
  type metadata accessor for UIFont();
  uint64_t v12 = *MEMORY[0x1E4FB2988];
  swift_retain_n();
  id v13 = OUTLINED_FUNCTION_22_34(v12);
  Class isa = UIFont.withTraits(_:)(*(_DWORD *)a4).super.isa;

  [(objc_class *)isa pointSize];
  double v16 = v15;

  v17.n128_f64[0] = v16 + v16;
  (*(void (**)(__n128))(*(void *)a1 + 328))(v17);
  swift_release();
  return swift_release_n();
}

uint64_t type metadata accessor for TranscriptionView()
{
  uint64_t result = type metadata singleton initialization cache for TranscriptionView;
  if (!type metadata singleton initialization cache for TranscriptionView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Class TranscriptionView.font.getter()
{
  unint64_t v1 = v0;
  type metadata accessor for UIFont();
  id v2 = OUTLINED_FUNCTION_22_34(*MEMORY[0x1E4FB2988]);
  Class isa = UIFont.withTraits(_:)(*v1).super.isa;

  return isa;
}

void one-time initialization function for someoneIsLeavingAMessage()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  v5._unint64_t object = (void *)0xE000000000000000;
  v1._unint64_t object = (void *)0x80000001C37AAF90;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._unint64_t object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v5);

  static TranscriptionView.Strings.someoneIsLeavingAMessage = (__int128)v4;
}

long long *TranscriptionView.Strings.someoneIsLeavingAMessage.unsafeMutableAddressor()
{
  if (one-time initialization token for someoneIsLeavingAMessage != -1) {
    swift_once();
  }
  return &static TranscriptionView.Strings.someoneIsLeavingAMessage;
}

uint64_t static TranscriptionView.Strings.someoneIsLeavingAMessage.getter()
{
  return static TranscriptionView.Strings.someoneIsLeavingAMessage.getter(&one-time initialization token for someoneIsLeavingAMessage, (uint64_t *)&static TranscriptionView.Strings.someoneIsLeavingAMessage);
}

void one-time initialization function for someoneIsLeavingAMessageFormat()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  v5._unint64_t object = (void *)0xE000000000000000;
  v1._unint64_t object = (void *)0x80000001C37AAF50;
  v1._uint64_t countAndFlagsBits = 0xD000000000000017;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._unint64_t object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._unint64_t object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v5);

  static TranscriptionView.Strings.someoneIsLeavingAMessageFormat = (__int128)v4;
}

long long *TranscriptionView.Strings.someoneIsLeavingAMessageFormat.unsafeMutableAddressor()
{
  if (one-time initialization token for someoneIsLeavingAMessageFormat != -1) {
    swift_once();
  }
  return &static TranscriptionView.Strings.someoneIsLeavingAMessageFormat;
}

uint64_t static TranscriptionView.Strings.someoneIsLeavingAMessageFormat.getter()
{
  return static TranscriptionView.Strings.someoneIsLeavingAMessage.getter(&one-time initialization token for someoneIsLeavingAMessageFormat, (uint64_t *)&static TranscriptionView.Strings.someoneIsLeavingAMessageFormat);
}

uint64_t static TranscriptionView.Strings.someoneIsLeavingAMessage.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t TranscriptionView.trait.getter()
{
  return *v0;
}

double TranscriptionView.textSize.getter()
{
  Swift::String v1 = v0;
  type metadata accessor for UIFont();
  id v2 = OUTLINED_FUNCTION_22_34(*MEMORY[0x1E4FB2988]);
  Class isa = UIFont.withTraits(_:)(*v1).super.isa;

  [(objc_class *)isa pointSize];
  double v5 = v4;

  return v5;
}

void TranscriptionView.hidePrivacySensitiveContent.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_31();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = type metadata accessor for RedactionReasons();
  OUTLINED_FUNCTION_4();
  uint64_t v26 = v25;
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_36();
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&a9 - v29;
  type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_31_27();
  char v32 = TranscriptionViewModel.hidePrivacySensitiveContent.getter();
  swift_release();
  outlined init with copy of TranscriptionView(v20, v21, (void (*)(void))type metadata accessor for TranscriptionView);
  if ((v32 & 1) == 0)
  {
    specialized Environment.wrappedValue.getter();
    static RedactionReasons.privacy.getter();
    _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons, MEMORY[0x1E4F3CD58]);
    dispatch thunk of SetAlgebra.isSuperset(of:)();
    Swift::String_optional v33 = *(void (**)(uint64_t))(v26 + 8);
    uint64_t v34 = OUTLINED_FUNCTION_30_15();
    v33(v34);
    ((void (*)(char *, uint64_t))v33)(v30, v24);
  }
  outlined destroy of TranscriptionView(v21, (void (*)(void))type metadata accessor for TranscriptionView);
  OUTLINED_FUNCTION_28();
}

uint64_t TranscriptionView.viewModel.getter()
{
  return swift_retain();
}

void TranscriptionView.redactionReasons.getter()
{
}

void TranscriptionView.showTranscript.getter()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for RedactionReasons();
  OUTLINED_FUNCTION_4();
  uint64_t v37 = v3;
  uint64_t v38 = v2;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_36();
  uint64_t v6 = (char *)(v4 - v5);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v36 - v8;
  v36[1] = type metadata accessor for TranscriptionView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_36();
  uint64_t v13 = v11 - v12;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  __n128 v17 = (char *)v36 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)v36 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)v36 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)v36 - v24;
  OUTLINED_FUNCTION_31_27();
  TranscriptionViewModel.state.getter();
  OUTLINED_FUNCTION_27_31();
  if (v1 == 1)
  {
    type metadata accessor for Defaults();
    swift_allocObject();
    uint64_t v26 = Defaults.init()();
    int v1 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 232))(v26);
    swift_release();
    outlined init with copy of TranscriptionView(v0, (uint64_t)v25, (void (*)(void))type metadata accessor for TranscriptionView);
    if (v1)
    {
      outlined destroy of TranscriptionView((uint64_t)v25, (void (*)(void))type metadata accessor for TranscriptionView);
      outlined init with copy of TranscriptionView(v0, (uint64_t)v23, (void (*)(void))type metadata accessor for TranscriptionView);
LABEL_6:
      outlined destroy of TranscriptionView((uint64_t)v23, (void (*)(void))type metadata accessor for TranscriptionView);
      outlined init with copy of TranscriptionView(v0, (uint64_t)v20, (void (*)(void))type metadata accessor for TranscriptionView);
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of TranscriptionView(v0, (uint64_t)v25, (void (*)(void))type metadata accessor for TranscriptionView);
  }
  swift_retain();
  TranscriptionViewModel.state.getter();
  OUTLINED_FUNCTION_27_31();
  outlined destroy of TranscriptionView((uint64_t)v25, (void (*)(void))type metadata accessor for TranscriptionView);
  outlined init with copy of TranscriptionView(v0, (uint64_t)v23, (void (*)(void))type metadata accessor for TranscriptionView);
  if (v1 == 2) {
    goto LABEL_6;
  }
  swift_retain();
  TranscriptionViewModel.state.getter();
  OUTLINED_FUNCTION_27_31();
  outlined destroy of TranscriptionView((uint64_t)v23, (void (*)(void))type metadata accessor for TranscriptionView);
  outlined init with copy of TranscriptionView(v0, (uint64_t)v20, (void (*)(void))type metadata accessor for TranscriptionView);
  if (v1 != 3)
  {
    uint64_t v28 = (uint64_t)v20;
    goto LABEL_13;
  }
LABEL_8:
  swift_retain();
  char v27 = TranscriptionViewModel.hidePrivacySensitiveContent.getter();
  swift_release();
  outlined init with copy of TranscriptionView((uint64_t)v20, (uint64_t)v17, (void (*)(void))type metadata accessor for TranscriptionView);
  if (v27)
  {
    outlined destroy of TranscriptionView((uint64_t)v17, (void (*)(void))type metadata accessor for TranscriptionView);
    uint64_t v28 = (uint64_t)v20;
LABEL_13:
    outlined destroy of TranscriptionView(v28, (void (*)(void))type metadata accessor for TranscriptionView);
    uint64_t v34 = OUTLINED_FUNCTION_30_15();
    outlined init with copy of TranscriptionView(v34, v35, (void (*)(void))type metadata accessor for TranscriptionView);
    goto LABEL_14;
  }
  specialized Environment.wrappedValue.getter();
  static RedactionReasons.privacy.getter();
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons, MEMORY[0x1E4F3CD58]);
  uint64_t v29 = v38;
  char v30 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v37 + 8);
  v31(v6, v29);
  v31(v9, v29);
  outlined destroy of TranscriptionView((uint64_t)v17, (void (*)(void))type metadata accessor for TranscriptionView);
  outlined destroy of TranscriptionView((uint64_t)v20, (void (*)(void))type metadata accessor for TranscriptionView);
  uint64_t v32 = OUTLINED_FUNCTION_30_15();
  outlined init with copy of TranscriptionView(v32, v33, (void (*)(void))type metadata accessor for TranscriptionView);
  if ((v30 & 1) == 0)
  {
    swift_retain();
    TranscriptionViewModel.isGibberish.getter();
    swift_release();
  }
LABEL_14:
  outlined destroy of TranscriptionView(v13, (void (*)(void))type metadata accessor for TranscriptionView);
  OUTLINED_FUNCTION_28();
}

uint64_t TranscriptionView.showWaiting.getter()
{
  uint64_t v1 = type metadata accessor for TranscriptionView();
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v4 = v3 - v2;
  OUTLINED_FUNCTION_31_27();
  TranscriptionViewModel.state.getter();
  OUTLINED_FUNCTION_27_31();
  uint64_t v5 = OUTLINED_FUNCTION_30_15();
  outlined init with copy of TranscriptionView(v5, v6, v7);
  if (v0 == 1)
  {
    outlined destroy of TranscriptionView(v4, (void (*)(void))type metadata accessor for TranscriptionView);
LABEL_5:
    type metadata accessor for Defaults();
    swift_allocObject();
    uint64_t v11 = Defaults.init()();
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 232))(v11);
    swift_release();
    char v10 = v12 ^ 1;
    return v10 & 1;
  }
  swift_retain();
  uint64_t v8 = TranscriptionViewModel.captions.getter();
  swift_release();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of TranscriptionView(v4, (void (*)(void))type metadata accessor for TranscriptionView);
  if (!v9) {
    goto LABEL_5;
  }
  char v10 = 0;
  return v10 & 1;
}

uint64_t key path setter for TranscriptionView.viewModel : TranscriptionView()
{
  uint64_t v0 = swift_retain();
  return TranscriptionView.viewModel.setter(v0);
}

uint64_t TranscriptionView.viewModel.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*TranscriptionView.viewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t TranscriptionView.$viewModel.getter()
{
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  return ObservedObject.projectedValue.getter();
}

uint64_t TranscriptionView.transcriptView.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TranscriptionView();
  uint64_t v4 = OUTLINED_FUNCTION_1(v3);
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v4);
  outlined init with copy of TranscriptionView(v1, (uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for TranscriptionView);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  uint64_t result = outlined init with take of TranscriptionView((uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, (void (*)(void))type metadata accessor for TranscriptionView);
  *a1 = partial apply for closure #1 in TranscriptionView.transcriptView.getter;
  a1[1] = v10;
  return result;
}

uint64_t closure #1 in TranscriptionView.transcriptView.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TranscriptionView();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  ObservedObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v16 = v17;
  long long v15 = v18;
  double v9 = TranscriptionView.textSize.getter() * 0.8;
  uint64_t v10 = *(void *)(a1 + *(int *)(v5 + 36));
  outlined init with copy of TranscriptionView(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for TranscriptionView);
  unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = swift_allocObject();
  outlined init with take of TranscriptionView((uint64_t)v8, v12 + v11, (void (*)(void))type metadata accessor for TranscriptionView);
  outlined init with copy of TranscriptionView(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for TranscriptionView);
  uint64_t v13 = swift_allocObject();
  outlined init with take of TranscriptionView((uint64_t)v8, v13 + v11, (void (*)(void))type metadata accessor for TranscriptionView);
  *(void *)a2 = v16;
  *(_OWORD *)(a2 + 8) = v15;
  *(double *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = partial apply for closure #1 in closure #1 in TranscriptionView.transcriptView.getter;
  *(void *)(a2 + 56) = v12;
  *(void *)(a2 + 64) = partial apply for closure #2 in closure #1 in TranscriptionView.transcriptView.getter;
  *(void *)(a2 + 72) = v13;
  *(void *)(a2 + 80) = specialized implicit closure #2 in implicit closure #1 in variable initialization expression of AutoScrollingList._autoScrollViewModel;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  return swift_retain();
}

void TranscriptionView.captionRow(caption:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for ScreeningTranscriptLabel();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_80();
  type metadata accessor for UIFont();
  id v7 = OUTLINED_FUNCTION_22_34(*MEMORY[0x1E4FB2988]);
  Class isa = UIFont.withTraits(_:)(*v2).super.isa;

  uint64_t v9 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v10 = (objc_class **)(v4 + *(int *)(v9 + 28));
  uint64_t v12 = *v10;
  unint64_t v11 = v10[1];
  uint64_t v13 = (objc_class **)((char *)v2 + *(int *)(type metadata accessor for TranscriptionView() + 32));
  uint64_t v14 = *v13;
  long long v15 = v13[1];
  uint64_t v16 = *(objc_class **)(v4 + *(int *)(v9 + 36));
  Class *v1 = isa;
  v1[1] = v12;
  v1[2] = v11;
  v1[3] = v14;
  v1[4] = v15;
  v1[5] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Color.white.getter();
  uint64_t v17 = Color.opacity(_:)();
  swift_release();
  v1[6] = (Class)v17;
  long long v18 = (uint64_t *)((char *)v1 + *(int *)(v5 + 36));
  *long long v18 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  OUTLINED_FUNCTION_24_34();
  uint64_t v19 = (uint64_t *)((char *)v1 + *(int *)(v5 + 40));
  *uint64_t v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  OUTLINED_FUNCTION_24_34();
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1(&lazy protocol witness table cache variable for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel, (void (*)(uint64_t))type metadata accessor for ScreeningTranscriptLabel);
  View.privacySensitive(_:)();
  outlined destroy of TranscriptionView((uint64_t)v1, (void (*)(void))type metadata accessor for ScreeningTranscriptLabel);
  OUTLINED_FUNCTION_28();
}

uint64_t closure #2 in closure #1 in TranscriptionView.transcriptView.getter@<X0>(UIFontDescriptorSymbolicTraits *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for Defaults();
  swift_allocObject();
  uint64_t v4 = Defaults.init()();
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 232))(v4);
  swift_release();
  if (v5)
  {
    uint64_t v6 = static HorizontalAlignment.center.getter();
    uint64_t v7 = static VerticalAlignment.lastTextBaseline.getter();
    *a2 = v6;
    a2[1] = v7;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>);
    closure #1 in closure #2 in closure #1 in TranscriptionView.transcriptView.getter(a1, (uint64_t *)((char *)a2 + *(int *)(v8 + 44)));
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>);
    uint64_t v10 = (uint64_t)a2;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>)>>);
    uint64_t v10 = (uint64_t)a2;
    uint64_t v11 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v9);
}

uint64_t closure #1 in closure #2 in closure #1 in TranscriptionView.transcriptView.getter@<X0>(UIFontDescriptorSymbolicTraits *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ScreeningTranscriptLabel();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (Class *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>);
  uint64_t v9 = v8 - 8;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v25 - v13;
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  swift_retain();
  uint64_t v26 = ObservedObject.init(wrappedValue:)();
  uint64_t v16 = v15;
  type metadata accessor for UIFont();
  id v17 = static UIFont.preferredFont(textStyle:weight:maximumPointSize:)(*MEMORY[0x1E4FB2988], 0, 1);
  Class isa = UIFont.withTraits(_:)(*a1).super.isa;

  Class *v7 = isa;
  v7[1] = (Class)0x7974706D65;
  unsigned char v7[2] = (Class)0xE500000000000000;
  void v7[3] = 0;
  uint64_t v19 = (objc_class *)MEMORY[0x1E4FBC860];
  v7[4] = (Class)0xE000000000000000;
  void v7[5] = v19;
  static Color.white.getter();
  uint64_t v20 = Color.opacity(_:)();
  swift_release();
  void v7[6] = (Class)v20;
  uint64_t v21 = (uint64_t *)((char *)v7 + *(int *)(v5 + 44));
  *uint64_t v21 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = (uint64_t *)((char *)v7 + *(int *)(v5 + 48));
  *uint64_t v22 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of TranscriptionView((uint64_t)v7, (uint64_t)v12, (void (*)(void))type metadata accessor for ScreeningTranscriptLabel);
  *(void *)&v12[*(int *)(v9 + 44)] = 0;
  outlined destroy of TranscriptionView((uint64_t)v7, (void (*)(void))type metadata accessor for ScreeningTranscriptLabel);
  outlined init with take of Any?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>);
  outlined init with copy of FeatureEligibility?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>);
  *a2 = v26;
  a2[1] = v16;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LiveVoicemailIntroView, ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>));
  outlined init with copy of FeatureEligibility?((uint64_t)v12, (uint64_t)a2 + *(int *)(v23 + 48), &demangling cache variable for type metadata for ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>);
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ScreeningTranscriptLabel, _OpacityEffect>);
  return swift_release();
}