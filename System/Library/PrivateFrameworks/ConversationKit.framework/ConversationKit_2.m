#error "1C30893A4: call analysis failed (funcsize=6)"

void protocol witness for Encodable.encode(to:) in conformance RemoteControlMessage()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemoteControlMessage()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason;
  if (!lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason);
  }
  return result;
}

uint64_t type metadata accessor for RemoteControlMessage(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteControlMessage);
}

uint64_t outlined init with take of RemoteControlRequest()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_19_19();
  v3();
  return v0;
}

uint64_t outlined destroy of (RemoteControlMessage, RemoteControlMessage)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlMessage, RemoteControlMessage));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys);
  }
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t base witness table accessor for Equatable in RemoteControlRequest()
{
  return lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
}

uint64_t base witness table accessor for Equatable in RemoteControlResponse()
{
  return lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlResponse and conformance RemoteControlResponse, (void (*)(uint64_t))type metadata accessor for RemoteControlResponse);
}

uint64_t base witness table accessor for Equatable in RemoteControlSuspendRequest()
{
  return lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlSuspendRequest and conformance RemoteControlSuspendRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlSuspendRequest);
}

uint64_t base witness table accessor for Equatable in RemoteControlMessage()
{
  return lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlMessage and conformance RemoteControlMessage, (void (*)(uint64_t))type metadata accessor for RemoteControlMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteControlRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t initializeWithCopy for RemoteControlRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for RemoteControlRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for RemoteControlRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for RemoteControlRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteControlRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3089E08);
}

uint64_t sub_1C3089E08()
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v1 + 84) == v0)
  {
    uint64_t v2 = OUTLINED_FUNCTION_55_3();
  }
  else
  {
    type metadata accessor for Date();
    uint64_t v2 = OUTLINED_FUNCTION_56_2();
  }
  return __swift_getEnumTagSinglePayload(v2, v0, v3);
}

uint64_t storeEnumTagSinglePayload for RemoteControlRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3089E84);
}

uint64_t sub_1C3089E84(uint64_t a1, uint64_t a2, int a3)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a3)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
  }
  else
  {
    type metadata accessor for Date();
    uint64_t v9 = OUTLINED_FUNCTION_56_2();
  }
  return __swift_storeEnumTagSinglePayload(v9, v3, v3, v8);
}

uint64_t type metadata completion function for RemoteControlRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for RemoteControlResponse(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for RemoteControlResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

uint64_t initializeWithCopy for RemoteControlResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for RemoteControlResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for RemoteControlResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for RemoteControlResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteControlResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C308A594);
}

uint64_t sub_1C308A594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = OUTLINED_FUNCTION_55_3();
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v10 + 84) != v3)
    {
      unsigned int v12 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 28));
      if (v12 >= 2) {
        return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v9;
    uint64_t v7 = v4 + *(int *)(a3 + 24);
  }
  return __swift_getEnumTagSinglePayload(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for RemoteControlResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C308A65C);
}

void sub_1C308A65C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v5;
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(unsigned char *)(v5 + *(int *)(a4 + 28)) = v4 + 1;
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = v5 + *(int *)(a4 + 24);
  }
  __swift_storeEnumTagSinglePayload(v11, v4, v4, v10);
}

uint64_t type metadata completion function for RemoteControlResponse()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for RemoteControlSuspendRequest(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for RemoteControlRequest()
{
  OUTLINED_FUNCTION_9_21();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v2();
  uint64_t v3 = v1 + *(int *)(v0 + 20);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  return v6(v3, v4);
}

uint64_t initializeWithCopy for RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C308ACBC);
}

uint64_t sub_1C308ACBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = OUTLINED_FUNCTION_55_3();
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) != v3)
    {
      unsigned int v11 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 24));
      if (v11 >= 3) {
        return v11 - 2;
      }
      else {
        return 0;
      }
    }
    uint64_t v7 = OUTLINED_FUNCTION_56_2();
  }
  return __swift_getEnumTagSinglePayload(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C308AD6C);
}

void sub_1C308AD6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_10_22();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v5;
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v12 + 84) != a3)
    {
      *(unsigned char *)(v5 + *(int *)(a4 + 24)) = v4 + 2;
      return;
    }
    uint64_t v11 = OUTLINED_FUNCTION_56_2();
  }
  __swift_storeEnumTagSinglePayload(v11, v4, v4, v10);
}

uint64_t type metadata completion function for RemoteControlSuspendRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for RemoteControlMessage(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (void *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v21 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
        uint64_t v22 = *(int *)(type metadata accessor for RemoteControlRequest(0) + 20);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
        goto LABEL_8;
      case 1u:
        uint64_t v8 = type metadata accessor for UUID();
        uint64_t v9 = *(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        uint64_t v10 = (int *)type metadata accessor for RemoteControlResponse(0);
        v9((void *)((char *)a1 + v10[5]), (void *)((char *)a2 + v10[5]), v8);
        uint64_t v11 = v10[6];
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        *((unsigned char *)a1 + v10[7]) = *((unsigned char *)a2 + v10[7]);
        goto LABEL_8;
      case 4u:
        uint64_t v15 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        uint64_t v16 = type metadata accessor for RemoteControlSuspendRequest(0);
        uint64_t v17 = *(int *)(v16 + 20);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
        *((unsigned char *)a1 + *(int *)(v16 + 24)) = *((unsigned char *)a2 + *(int *)(v16 + 24));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for RemoteControlMessage(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
    case 5:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = type metadata accessor for RemoteControlRequest(0);
      goto LABEL_5;
    case 1:
      uint64_t v5 = type metadata accessor for UUID();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = type metadata accessor for RemoteControlResponse(0);
      v6(a1 + *(int *)(v7 + 20), v5);
      uint64_t v8 = *(int *)(v7 + 24);
      goto LABEL_6;
    case 4:
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      uint64_t v4 = type metadata accessor for RemoteControlSuspendRequest(0);
LABEL_5:
      uint64_t v8 = *(int *)(v4 + 20);
LABEL_6:
      uint64_t v10 = a1 + v8;
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      uint64_t result = v12(v10, v11);
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *initializeWithCopy for RemoteControlMessage(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v19 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      uint64_t v20 = *(int *)(type metadata accessor for RemoteControlRequest(0) + 20);
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      goto LABEL_6;
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for RemoteControlResponse(0);
      v7(&a1[v8[5]], &a2[v8[5]], v6);
      uint64_t v9 = v8[6];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      a1[v8[7]] = a2[v8[7]];
      goto LABEL_6;
    case 4u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      uint64_t v14 = type metadata accessor for RemoteControlSuspendRequest(0);
      uint64_t v15 = *(int *)(v14 + 20);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      a1[*(int *)(v14 + 24)] = a2[*(int *)(v14 + 24)];
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *assignWithCopy for RemoteControlMessage(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RemoteControlRequest((uint64_t)a1, (void (*)(void))type metadata accessor for RemoteControlMessage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v20 = *(int *)(type metadata accessor for RemoteControlRequest(0) + 20);
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        goto LABEL_6;
      case 1u:
        uint64_t v6 = type metadata accessor for UUID();
        uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)type metadata accessor for RemoteControlResponse(0);
        v7(&a1[v8[5]], &a2[v8[5]], v6);
        uint64_t v9 = v8[6];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        a1[v8[7]] = a2[v8[7]];
        goto LABEL_6;
      case 4u:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        uint64_t v14 = type metadata accessor for RemoteControlSuspendRequest(0);
        uint64_t v15 = *(int *)(v14 + 20);
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        a1[*(int *)(v14 + 24)] = a2[*(int *)(v14 + 24)];
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

unsigned char *initializeWithTake for RemoteControlMessage(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v19 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 32))(a1, a2, v19);
      uint64_t v20 = *(int *)(type metadata accessor for RemoteControlRequest(0) + 20);
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      goto LABEL_6;
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for RemoteControlResponse(0);
      v7(&a1[v8[5]], &a2[v8[5]], v6);
      uint64_t v9 = v8[6];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      a1[v8[7]] = a2[v8[7]];
      goto LABEL_6;
    case 4u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = type metadata accessor for RemoteControlSuspendRequest(0);
      uint64_t v15 = *(int *)(v14 + 20);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      a1[*(int *)(v14 + 24)] = a2[*(int *)(v14 + 24)];
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *assignWithTake for RemoteControlMessage(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RemoteControlRequest((uint64_t)a1, (void (*)(void))type metadata accessor for RemoteControlMessage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 32))(a1, a2, v19);
        uint64_t v20 = *(int *)(type metadata accessor for RemoteControlRequest(0) + 20);
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        goto LABEL_6;
      case 1u:
        uint64_t v6 = type metadata accessor for UUID();
        uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)type metadata accessor for RemoteControlResponse(0);
        v7(&a1[v8[5]], &a2[v8[5]], v6);
        uint64_t v9 = v8[6];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        a1[v8[7]] = a2[v8[7]];
        goto LABEL_6;
      case 4u:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = type metadata accessor for RemoteControlSuspendRequest(0);
        uint64_t v15 = *(int *)(v14 + 20);
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        a1[*(int *)(v14 + 24)] = a2[*(int *)(v14 + 24)];
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for RemoteControlMessage()
{
  uint64_t result = type metadata accessor for RemoteControlRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RemoteControlResponse(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for RemoteControlSuspendRequest(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RemoteControlMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RemoteControlMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C308CAA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RemoteControlMessage.CodingKeys()
{
  return &unk_1F1E98CA0;
}

void *type metadata accessor for RemoteControlMessage.RequestCodingKeys()
{
  return &unk_1F1E98D30;
}

void *type metadata accessor for RemoteControlMessage.ResponseCodingKeys()
{
  return &unk_1F1E98DC0;
}

void *type metadata accessor for RemoteControlMessage.CancelRequestCodingKeys()
{
  return &unk_1F1E98E50;
}

void *type metadata accessor for RemoteControlMessage.EndControlCodingKeys()
{
  return &unk_1F1E98EE0;
}

void *type metadata accessor for RemoteControlMessage.SuspendControlCodingKeys()
{
  return &unk_1F1E98F70;
}

unsigned char *storeEnumTagSinglePayload for RemoteControlMessage.RequestCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C308CBD0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for RemoteControlMessage.ResumeControlCodingKeys()
{
  return &unk_1F1E99000;
}

void *type metadata accessor for RemoteControlMessage.PlaybackServerMessageCodingKeys()
{
  return &unk_1F1E99020;
}

unsigned char *storeEnumTagSinglePayload for RemoteControlSuspendRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C308CCE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RemoteControlSuspendRequest.CodingKeys()
{
  return &unk_1F1E990B0;
}

unsigned char *storeEnumTagSinglePayload for RemoteControlResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C308CDE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RemoteControlResponse.CodingKeys()
{
  return &unk_1F1E99140;
}

unsigned char *storeEnumTagSinglePayload for RemoteControlRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C308CEECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RemoteControlRequest.CodingKeys()
{
  return &unk_1F1E991D0;
}

uint64_t TUConversationState.debugDescription.getter(uint64_t a1)
{
  uint64_t result = 0x64656E696F6A2ELL;
  switch(a1)
  {
    case 0:
      uint64_t v3 = 0x69746961772ELL;
      return v3 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
    case 1:
      return 0x697261706572702ELL;
    case 2:
      return 0x676E696E696F6A2ELL;
    case 3:
      return result;
    case 4:
      uint64_t v3 = 0x697661656C2ELL;
      return v3 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
    default:
      _StringGuts.grow(_:)(57);
      v4._object = (void *)0x80000001C3796740;
      v4._countAndFlagsBits = 0xD000000000000037;
      String.append(_:)(v4);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1C308DAECLL);
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TUConversationState()
{
  return TUConversationState.debugDescription.getter(*v0);
}

uint64_t PeoplePickerViewController.contextMenuConfiguration(for:recipient:)()
{
  return 0;
}

uint64_t PreCallConfirmationService.__allocating_init(callCenter:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t PreCallConfirmationService.init(callCenter:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void PreCallConfirmationService.dial(with:)(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(v1 + 16), sel_dialWithRequest_, a1);
}

id PreCallConfirmationService.dial(with:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + 16), sel_joinConversationWithRequest_, a1);
}

uint64_t PreCallConfirmationService.deinit()
{
  return v0;
}

uint64_t PreCallConfirmationService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for PreCallConfirmationServicing.dial(with:) in conformance PreCallConfirmationService(uint64_t a1)
{
}

id protocol witness for PreCallConfirmationServicing.dial(with:) in conformance PreCallConfirmationService(uint64_t a1)
{
  return PreCallConfirmationService.dial(with:)(a1);
}

uint64_t dispatch thunk of PreCallConfirmationServicing.dial(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for PreCallConfirmationService()
{
  return self;
}

uint64_t method lookup function for PreCallConfirmationService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PreCallConfirmationService);
}

uint64_t dispatch thunk of PreCallConfirmationService.__allocating_init(callCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ClarityUIDialerView.isPresented.getter()
{
  OUTLINED_FUNCTION_0_31();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x1C87728E0](&v2, v0);
  return v2;
}

uint64_t ClarityUIDialerView.isPresented.setter()
{
  return Binding.wrappedValue.setter();
}

void (*ClarityUIDialerView.isPresented.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  v3[4] = *v1;
  v3[5] = v5;
  char v6 = *((unsigned char *)v1 + 16);
  *((unsigned char *)v3 + 19) = v6;
  v3[3] = v4;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  outlined retain of AnyLocation<String>?((uint64_t)(v3 + 3));
  swift_retain();
  v3[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x1C87728E0]();
  return ClarityUIDialerView.isPresented.modify;
}

void ClarityUIDialerView.isPresented.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 24;
  char v3 = *(unsigned char *)(*(void *)a1 + 18);
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  char v5 = *(unsigned char *)(*(void *)a1 + 19);
  *uint64_t v1 = *(void *)(*(void *)a1 + 32);
  v1[1] = v4;
  *((unsigned char *)v1 + 16) = v5;
  *((unsigned char *)v1 + 17) = v3;
  Binding.wrappedValue.setter();
  outlined release of Transaction(v2);
  swift_release();
  free(v1);
}

uint64_t outlined release of Transaction(uint64_t a1)
{
  return a1;
}

uint64_t ClarityUIDialerView.$isPresented.getter()
{
  OUTLINED_FUNCTION_0_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t ClarityUIDialerView.body.getter()
{
  uint64_t v1 = type metadata accessor for AccessibilityActionKind();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t v6 = v5;
  uint64_t v7 = static HorizontalAlignment.center.getter();
  closure #1 in ClarityUIDialerView.body.getter(v0, (uint64_t)v19);
  v20[160] = 0;
  memcpy(&v20[7], v19, 0x92uLL);
  char v8 = static Edge.Set.bottom.getter();
  uint64_t v9 = static SafeAreaRegions.all.getter();
  v13[0] = v7;
  v13[1] = v6;
  LOBYTE(v13[2]) = 0;
  memcpy((char *)&v13[2] + 1, v20, 0x99uLL);
  v13[22] = v9;
  LOBYTE(v13[23]) = v8;
  static AccessibilityActionKind.escape.getter();
  uint64_t v18 = *(void *)v0;
  long long v14 = *(long long *)((char *)v0 + 24);
  uint64_t v15 = *((void *)v0 + 5);
  long long v17 = v14;
  outlined init with take of AnyLocation<String>?((uint64_t)&v15, (uint64_t)&v16);
  uint64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = v0[1];
  v10[1] = *v0;
  v10[2] = v11;
  v10[3] = v0[2];
  outlined retain of AnyLocation<String>?((uint64_t)&v18);
  swift_retain();
  outlined retain of String((uint64_t)&v17);
  outlined retain of AnyLocation<String>?((uint64_t)&v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>);
  lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
  View.accessibilityAction(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  memcpy(v21, v13, 0xB9uLL);
  return outlined release of ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>((uint64_t)v21);
}

uint64_t closure #1 in ClarityUIDialerView.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)v39 = *(long long *)((char *)a1 + 24);
  *(void *)&v39[16] = *((void *)a1 + 5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<String>);
  State.projectedValue.getter();
  uint64_t v4 = v42;
  uint64_t v37 = *((void *)&v41 + 1);
  uint64_t v38 = v41;
  uint64_t v36 = v43;
  char v35 = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  long long v41 = *a1;
  LOBYTE(v42) = *((unsigned char *)a1 + 16);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x1C87728E0](v39);
  int v14 = v39[0];
  long long v41 = *a1;
  LOBYTE(v42) = *((unsigned char *)a1 + 16);
  MEMORY[0x1C87728E0](v39, v13);
  if (v39[0] == 1)
  {
    uint64_t v34 = v4;
    *(_OWORD *)v39 = *(long long *)((char *)a1 + 24);
    *(void *)&v39[16] = *((void *)a1 + 5);
    State.projectedValue.getter();
    long long v15 = v41;
    uint64_t v16 = v42;
    uint64_t v17 = v43;
    *(_OWORD *)v39 = *a1;
    v39[16] = *((unsigned char *)a1 + 16);
    Binding.projectedValue.getter();
    long long v18 = v41;
    char v19 = v42;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    *(void *)v39 = static ClarityUIPreferences.shared;
    *(_OWORD *)&v39[8] = v15;
    *(void *)&v39[24] = v16;
    *(void *)&v39[32] = v17;
    *(_OWORD *)&v39[40] = v18;
    v39[56] = v19;
    char v40 = 0;
    lazy protocol witness table accessor for type ClarityUIDialerKeypadView and conformance ClarityUIDialerKeypadView();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = *((void *)&v41 + 1);
    uint64_t v20 = v41;
    uint64_t v23 = v42;
    uint64_t v22 = v43;
    uint64_t v24 = v44;
    uint64_t v25 = v45;
    uint64_t v26 = v46;
    uint64_t v27 = v47;
    char v28 = v48;
    uint64_t v29 = v34;
  }
  else
  {
    *(_OWORD *)v39 = xmmword_1C376E330;
    memset(&v39[16], 0, 41);
    char v40 = 1;
    lazy protocol witness table accessor for type ClarityUIDialerKeypadView and conformance ClarityUIDialerKeypadView();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = *((void *)&v41 + 1);
    uint64_t v20 = v41;
    uint64_t v23 = v42;
    uint64_t v22 = v43;
    uint64_t v24 = v44;
    uint64_t v25 = v45;
    uint64_t v26 = v46;
    uint64_t v27 = v47;
    char v28 = v48;
    uint64_t v29 = v4;
  }
  LOBYTE(v41) = 0;
  double v30 = 0.0;
  v39[0] = v28;
  if (v14) {
    double v30 = 1.0;
  }
  *(void *)a2 = v38;
  *(void *)(a2 + 8) = v37;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v36;
  char v31 = v28;
  *(unsigned char *)(a2 + 32) = v35;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v10;
  *(void *)(a2 + 64) = v12;
  *(unsigned char *)(a2 + 72) = 0;
  *(double *)(a2 + 80) = v30;
  *(void *)(a2 + 88) = v20;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v23;
  *(void *)(a2 + 112) = v22;
  *(void *)(a2 + 120) = v24;
  *(void *)(a2 + 128) = v25;
  *(void *)(a2 + 136) = v26;
  *(unsigned char *)(a2 + 144) = v27;
  *(unsigned char *)(a2 + 145) = v28;
  uint64_t v32 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of _ConditionalContent<ClarityUIDialerKeypadView, Spacer>.Storage(v32, v21, v23, v22, v24, v25, v26, v27, v31);
  outlined consume of _ConditionalContent<ClarityUIDialerKeypadView, Spacer>.Storage(v32, v21, v23, v22, v24, v25, v26, v27, v31);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in ClarityUIDialerView.body.getter()
{
  return swift_release();
}

uint64_t outlined init with take of AnyLocation<String>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyLocation<String>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C308E554()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ClarityUIDialerView.body.getter()
{
  return closure #2 in ClarityUIDialerView.body.getter();
}

uint64_t outlined retain of AnyLocation<String>?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>);
    lazy protocol witness table accessor for type VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>> and conformance VStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>> and conformance VStack<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>> and conformance VStack<A>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 144);
  uint64_t v5 = *(void *)(a1 + 152);
  uint64_t v6 = *(void *)(a1 + 160);
  char v7 = *(unsigned char *)(a1 + 169);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 168);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of _ConditionalContent<ClarityUIDialerKeypadView, Spacer>.Storage(v11, v10, v2, v3, v4, v5, v6, v8, v7);
  return a1;
}

uint64_t outlined consume of _ConditionalContent<ClarityUIDialerKeypadView, Spacer>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a9 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in ClarityUIDialerView.body.getter()
{
  return Binding.wrappedValue.setter();
}

__n128 ClarityUIDialerView.init(isPresented:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  State.init(wrappedValue:)();
  __n128 result = v9;
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  *(__n128 *)(a4 + 24) = v9;
  *(void *)(a4 + 40) = v10;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIDialerView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance ClarityUIDialerView()
{
  return ClarityUIDialerView.body.getter();
}

uint64_t sub_1C308E908@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ClarityUIDialerView.isPresented.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C308E938()
{
  return ClarityUIDialerView.isPresented.setter();
}

uint64_t destroy for ClarityUIDialerView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ClarityUIDialerView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ClarityUIDialerView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ClarityUIDialerView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClarityUIDialerView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClarityUIDialerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIDialerView()
{
  return &type metadata for ClarityUIDialerView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<EnteredNumbersView, _PaddingLayout>, _OpacityEffect>, _ConditionalContent<ClarityUIDialerKeypadView, Spacer>)>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    type metadata accessor for AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in ClarityUIDialerView.body.getter()
{
  return closure #1 in closure #2 in ClarityUIDialerView.body.getter();
}

unint64_t lazy protocol witness table accessor for type ClarityUIDialerKeypadView and conformance ClarityUIDialerKeypadView()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIDialerKeypadView and conformance ClarityUIDialerKeypadView;
  if (!lazy protocol witness table cache variable for type ClarityUIDialerKeypadView and conformance ClarityUIDialerKeypadView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIDialerKeypadView and conformance ClarityUIDialerKeypadView);
  }
  return result;
}

uint64_t outlined copy of _ConditionalContent<ClarityUIDialerKeypadView, Spacer>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a9 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      uint64_t v8 = (a1 & 0xC000000000000001) != 0
         ? (void *)MEMORY[0x1C87744F0](v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      __n128 v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v11 = (void *)CABasicAnimation.animationCopy()();
      (*(void (**)(void *, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x60))(v11, a3, a4);

      ++v7;
      if (v10 == v6) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      uint64_t v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v7 - 4, a1) : *(id *)(a1 + 8 * v7);
      __n128 v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      v11._countAndFlagsBits = 45;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      outlined bridged method (pb) of @objc CAPropertyAnimation.keyPath.getter(v9);
      if (v12)
      {
        uint64_t v13 = String.init<A>(reflecting:)();
        long long v15 = v14;
      }
      else
      {
        long long v15 = 0xE300000000000000;
        uint64_t v13 = 7104878;
      }
      uint64_t v16 = v15;
      String.append(_:)(*(Swift::String *)&v13);
      swift_bridgeObjectRelease();
      outlined bridged method (mnbnn) of @objc CALayer.add(_:forKey:)((uint64_t)v9, a3, a4, a2);

      ++v7;
      if (v10 == v6) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_15:

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id CAFilter.__allocating_init(type:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithType_, v5);

  return v6;
}

void AudioVisualizationLayer.color.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color);
  swift_beginAccess();
  id v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;

  AudioVisualizationLayer.color.didset();
}

Swift::Void __swiftcall AudioVisualizationLayer.startAnimation()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating;
  if ((v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating] & 1) == 0)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    specialized PlatformDisplayLink.add(observer:)((uint64_t)v0, static PlatformDisplayLink.shared);
    v0[v1] = 1;
    objc_msgSend(v0, sel_setMasksToBounds_, 0);
  }
}

Swift::Void __swiftcall AudioVisualizationLayer.stopAnimation()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating) == 1)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    specialized PlatformDisplayLink.remove(observer:)(v0, static PlatformDisplayLink.shared);
    *(unsigned char *)(v0 + v1) = 0;
  }
}

float AudioVisualizationLayer.scale.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale;
  OUTLINED_FUNCTION_0_32();
  return *(float *)v1;
}

uint64_t AudioVisualizationLayer.scale.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioVisualizationLayer.scale.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

void *AudioVisualizationLayer.color.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color);
  OUTLINED_FUNCTION_0_32();
  unint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

id key path getter for AudioVisualizationLayer.color : AudioVisualizationLayer@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  id v3 = (void **)(*a1 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color);
  swift_beginAccess();
  id v4 = *v3;
  *a2 = *v3;
  return v4;
}

void key path setter for AudioVisualizationLayer.color : AudioVisualizationLayer(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  AudioVisualizationLayer.color.setter(v1);
}

uint64_t AudioVisualizationLayer.color.didset()
{
  unint64_t v1 = *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_rings);
  if (v1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (i = v0; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v12 = v0;
    id v4 = (id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color);
    swift_beginAccess();
    uint64_t v5 = 4;
    uint64_t v0 = &selRef_ringButton;
    while (1)
    {
      id v6 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v5 - 4, v1) : *(id *)(v1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (*v4) {
        id v9 = objc_msgSend(*v4, sel_CGColor, v12);
      }
      else {
        id v9 = 0;
      }
      objc_msgSend(v7, sel_setBorderColor_, v9, v12);

      ++v5;
      if (v8 == v2)
      {

        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain_n();
    uint64_t v10 = v0;
  }

LABEL_16:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*AudioVisualizationLayer.color.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return AudioVisualizationLayer.color.modify;
}

uint64_t AudioVisualizationLayer.color.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return AudioVisualizationLayer.color.didset();
  }
  return result;
}

id AudioVisualizationLayer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

objc_class *AudioVisualizationLayer.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color] = 0;
  unint64_t v2 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  uint64_t v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v3 + 16) = 24;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 36) = 1;
  *(_DWORD *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 44) = 1;
  *(_DWORD *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 52) = 1;
  *(_DWORD *)(v3 + 56) = 0;
  *(unsigned char *)(v3 + 60) = 1;
  *(_DWORD *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 68) = 1;
  *(_DWORD *)(v3 + 72) = 0;
  *(unsigned char *)(v3 + 76) = 1;
  *(_DWORD *)(v3 + 80) = 0;
  *(unsigned char *)(v3 + 84) = 1;
  *(_DWORD *)(v3 + 88) = 0;
  *(unsigned char *)(v3 + 92) = 1;
  *(_DWORD *)(v3 + 96) = 0;
  *(unsigned char *)(v3 + 100) = 1;
  *(_DWORD *)(v3 + 104) = 0;
  *(unsigned char *)(v3 + 108) = 1;
  *(_DWORD *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 116) = 1;
  *(_DWORD *)(v3 + 120) = 0;
  *(unsigned char *)(v3 + 124) = 1;
  *(_DWORD *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 132) = 1;
  *(_DWORD *)(v3 + 136) = 0;
  *(unsigned char *)(v3 + 140) = 1;
  *(_DWORD *)(v3 + 144) = 0;
  *(unsigned char *)(v3 + 148) = 1;
  *(_DWORD *)(v3 + 152) = 0;
  *(unsigned char *)(v3 + 156) = 1;
  *(_DWORD *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 164) = 1;
  *(_DWORD *)(v3 + 168) = 0;
  *(unsigned char *)(v3 + 172) = 1;
  *(_DWORD *)(v3 + 176) = 0;
  *(unsigned char *)(v3 + 180) = 1;
  *(_DWORD *)(v3 + 184) = 0;
  *(unsigned char *)(v3 + 188) = 1;
  *(_DWORD *)(v3 + 192) = 0;
  *(unsigned char *)(v3 + 196) = 1;
  *(_DWORD *)(v3 + 200) = 0;
  *(unsigned char *)(v3 + 204) = 1;
  *(_DWORD *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 212) = 1;
  *(_DWORD *)(v3 + 216) = 0;
  *(unsigned char *)(v3 + 220) = 1;
  id v4 = (char *)(v2 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scaleBuffer);
  *(void *)id v4 = v3;
  *(_OWORD *)(v4 + 8) = xmmword_1C376E3C0;
  uint64_t v36 = MEMORY[0x1E4FBC860];
  uint64_t v5 = 5;
  uint64_t result = (objc_class *)specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v8) {
      goto LABEL_29;
    }
    float v9 = powf(0.75, (float)v7);
    id v10 = objc_allocWithZone((Class)type metadata accessor for AudioVisualizationRingLayer());
    AudioVisualizationRingLayer.init(opacityMultiple:)(v9);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = (objc_class *)specialized ContiguousArray._endMutation()();
    uint64_t v11 = 0;
    BOOL v8 = v7 == 4;
    if (v7 != 4)
    {
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
    }
    uint64_t v7 = v11;
    --v5;
  }
  while (v5);
  *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_rings) = v36;

  v35.receiver = (id)v2;
  v35.super_class = ObjectType;
  uint64_t result = (objc_class *)objc_msgSendSuper2(&v35, sel_init);
  ObjectType = result;
  unint64_t v2 = *(void *)((char *)result + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_rings);
  uint64_t v5 = v2 >> 62;
  if (v2 >> 62)
  {
LABEL_23:
    uint64_t v32 = ObjectType;
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (objc_class *)swift_bridgeObjectRelease();
    if (v12 < 1) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (objc_class *)swift_bridgeObjectRelease();
    if (v33 < 1) {
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (objc_class *)swift_bridgeObjectRelease();
    if (v34 >= v12) {
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v12 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v13 = result;
LABEL_9:
  if ((v2 & 0xC000000000000001) != 0 && v12 != 1)
  {
    Swift::Int v14 = 1;
    do
    {
      Swift::Int v15 = v14 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v14);
      Swift::Int v14 = v15;
    }
    while (v12 != v15);
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    uint64_t v16 = v18;
    uint64_t v17 = v19;
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v12 = v21 >> 1;
  }
  else
  {
    uint64_t v16 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
    swift_bridgeObjectRetain();
    uint64_t v17 = 1;
  }
  if (v12 == v17)
  {
LABEL_21:
    swift_unknownObjectRelease();
    double v30 = ObjectType;
    unint64_t v31 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v31, v30);

    swift_bridgeObjectRelease();
    return v30;
  }
  uint64_t result = (objc_class *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v22 = v12 - v17;
  if (v12 > v17)
  {
    swift_unknownObjectRetain();
    uint64_t v23 = (void **)(v16 + 8 * v17);
    do
    {
      uint64_t v24 = *v23++;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
      id v28 = v24;
      id v29 = CAFilter.__allocating_init(type:)(v25, v27);
      objc_msgSend(v28, sel_setCompositingFilter_, v29);

      --v22;
    }
    while (v22);
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

id AudioVisualizationLayer.__allocating_init(layer:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  id v4 = objc_msgSend(v3, sel_initWithLayer_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v4;
}

uint64_t AudioVisualizationLayer.init(layer:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color] = 0;
  outlined init with copy of Any(a1, (uint64_t)v22);
  id v4 = v1;
  if (!swift_dynamicCast()) {
    goto LABEL_15;
  }
  uint64_t v5 = v21;
  id v6 = &v21[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scaleBuffer];
  swift_beginAccess();
  uint64_t v7 = &v4[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scaleBuffer];
  long long v8 = *(_OWORD *)(v6 + 8);
  *(void *)uint64_t v7 = *(void *)v6;
  *(_OWORD *)(v7 + 8) = v8;
  float v9 = &lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys;
  unint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_rings];
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_13:
    *(void *)&v4[v9[45]] = v15;

    v19.receiver = v4;
    v19.super_class = ObjectType;
    id v16 = objc_msgSendSuper2(&v19, sel_initWithLayer_, v5);
    objc_msgSend(v16, sel_setAllowsGroupBlending_, 0);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v16;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v20 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = ObjectType;
    uint64_t v12 = type metadata accessor for AudioVisualizationRingLayer();
    uint64_t v13 = 0;
    do
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v14 = (id)MEMORY[0x1C87744F0](v13, v10);
      }
      else {
        id v14 = *(id *)(v10 + 8 * v13 + 32);
      }
      ++v13;
      v22[3] = v12;
      v22[0] = v14;
      AudioVisualizationRingLayer.__allocating_init(layer:)(v22);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v11 != v13);
    uint64_t v15 = v20;
    swift_bridgeObjectRelease();
    ObjectType = v18;
    float v9 = &lazy protocol witness table cache variable for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys;
    goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id AudioVisualizationLayer.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void AudioVisualizationLayer.init(coder:)()
{
  v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_isAnimating] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_color] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AudioVisualizationLayer.__deallocating_deinit()
{
  ObjectType = (objc_class *)swift_getObjectType();
  AudioVisualizationLayer.stopAnimation()();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id AudioVisualizationLayer.bounds.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_bounds);
}

void AudioVisualizationLayer.bounds.setter(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v10, sel_setBounds_, a1, a2, a3, a4);
  id v9 = v4;
  specialized CALayer.withoutActions(_:)((uint64_t)v9, v9);
}

void (*AudioVisualizationLayer.bounds.modify(objc_super **a1))(double **a1, char a2)
{
  objc_super v3 = (objc_super *)malloc(0x60uLL);
  *a1 = v3;
  v3[5].receiver = v1;
  uint64_t ObjectType = swift_getObjectType();
  v3[5].super_class = (Class)ObjectType;
  v3[2].receiver = v1;
  v3[2].super_class = (Class)ObjectType;
  objc_msgSendSuper2(v3 + 2, sel_bounds);
  v3->receiver = v5;
  v3->super_class = v6;
  v3[1].receiver = v7;
  v3[1].super_class = v8;
  return AudioVisualizationLayer.bounds.modify;
}

void AudioVisualizationLayer.bounds.modify(double **a1, char a2)
{
  objc_super v2 = *a1;
  double v3 = **a1;
  double v4 = (*a1)[1];
  double v5 = (*a1)[2];
  double v6 = (*a1)[3];
  long long v8 = (void *)*((void *)*a1 + 10);
  uint64_t v7 = (objc_class *)*((void *)*a1 + 11);
  id v9 = (objc_super *)*a1;
  if (a2)
  {
    v9[3].receiver = v8;
    v9[3].super_class = v7;
    objc_msgSendSuper2(v9 + 3, sel_setBounds_, v3, v4, v5, v6);
  }
  else
  {
    v9[4].receiver = v8;
    v9[4].super_class = v7;
    objc_msgSendSuper2(v9 + 4, sel_setBounds_, v3, v4, v5, v6);
    id v10 = v8;
    specialized CALayer.withoutActions(_:)((uint64_t)v10, v10);
  }
  free(v2);
}

Swift::Void __swiftcall AudioVisualizationLayer.add(_:forKey:)(CAAnimation _, Swift::String_optional forKey)
{
  double v3 = *(void **)&_._flags;
  attr = _._attr;
  Class isa = _.super.isa;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (!v7)
  {
LABEL_9:
    if (v3) {
      double v3 = (void *)MEMORY[0x1C87730B0](attr, v3);
    }
    goto LABEL_15;
  }
  long long v8 = (void *)v7;
  id v9 = isa;
  uint64_t v10 = outlined bridged method (ob) of @objc CAPropertyAnimation.keyPath.getter(v8);
  if (!v11)
  {
LABEL_8:

    goto LABEL_9;
  }
  if (v10 == 0x732E73646E756F62 && v11 == 0xEB00000000657A69)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (!v3)
  {

LABEL_15:
    v17.receiver = v2;
    v17.super_class = ObjectType;
    objc_msgSendSuper2(&v17, sel_addAnimation_forKey_, isa, v3);
    goto LABEL_16;
  }
  id v14 = v9;
  swift_bridgeObjectRetain();
  unint64_t v15 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v15, v8, (uint64_t)attr, (uint64_t)v3);
  swift_bridgeObjectRelease();

  double v3 = (void *)MEMORY[0x1C87730B0](attr, v3);
  v16.receiver = v2;
  v16.super_class = ObjectType;
  objc_msgSendSuper2(&v16, sel_addAnimation_forKey_, v14, v3);
LABEL_16:
}

Swift::Void __swiftcall AudioVisualizationLayer.displayLinkCallback(framesPerSecond:)(Swift::Int framesPerSecond)
{
  unint64_t v2 = (unint64_t)v1;
  id v4 = objc_msgSend(v1, sel_superlayer);

  if (v4)
  {
    double v5 = (float *)&v1[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale];
    OUTLINED_FUNCTION_0_32();
    float v6 = *v5;
    uint64_t v7 = &v1[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scaleBuffer];
    swift_beginAccess();
    specialized CircularBuffer.push(_:)(v6);
    swift_endAccess();
    if (one-time initialization token for shared != -1) {
      goto LABEL_38;
    }
    while (1)
    {
      char v8 = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 576))();
      unint64_t v2 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_rings);
      if (v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v9) {
          goto LABEL_31;
        }
      }
      double v10 = round((double)framesPerSecond * -0.025);
      if ((~*(void *)&v10 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v10 <= -9.22337204e18) {
        goto LABEL_42;
      }
      if (v10 >= 9.22337204e18) {
        goto LABEL_43;
      }
      if (v9 < 1) {
        goto LABEL_44;
      }
      framesPerSecond = 0;
      uint64_t v11 = (uint64_t)v10;
      while (1)
      {
        id v12 = (v2 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1C87744F0](framesPerSecond, v2)
            : *(id *)(v2 + 8 * framesPerSecond + 32);
        char v13 = v12;
        Swift::Int v14 = framesPerSecond * v11;
        if ((unsigned __int128)(framesPerSecond * (__int128)v11) >> 64 != (framesPerSecond * v11) >> 63) {
          break;
        }
        uint64_t v15 = *((void *)v7 + 1);
        BOOL v16 = __OFADD__(v15, v14);
        Swift::Int v17 = v15 + v14;
        if (v16) {
          goto LABEL_34;
        }
        uint64_t v18 = *((void *)v7 + 2);
        BOOL v16 = __OFADD__(v17, v18);
        uint64_t v19 = v17 + v18;
        if (v16) {
          goto LABEL_35;
        }
        if (!v18) {
          goto LABEL_36;
        }
        if (v18 == -1 && v19 == 0x8000000000000000) {
          goto LABEL_37;
        }
        uint64_t v21 = v19 % v18;
        if (v21 >= 1 && (unint64_t)v21 < *(void *)(*(void *)v7 + 16))
        {
          uint64_t v22 = *(void *)v7 + 8 * v21;
          if ((*(unsigned char *)(v22 + 36) & 1) == 0)
          {
            float v23 = *(float *)(v22 + 32);
            if (v8)
            {
              float v24 = 1.0;
              float v25 = 0.0;
              if (v23 <= 0.5) {
                float v24 = powf(v23 + v23, 3.0);
              }
              float v23 = 0.35;
            }
            else
            {
              float v25 = 0.35;
              float v24 = *(float *)(v22 + 32);
            }
            CGFloat v26 = (float)((float)(v23 * 0.64) + 0.98);
            float v27 = v25 + (float)((float)(1.0 - v25) * v24);
            id v28 = v13;
            CATransform3DMakeScale(&v30, v26, v26, 1.0);
            objc_msgSend(v28, sel_setTransform_, &v30);

            *(float *)&double v29 = v27;
            objc_msgSend(v28, sel_setOpacity_, v29);
          }
        }
        ++framesPerSecond;

        if (v9 == framesPerSecond) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      swift_once();
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
}

void specialized CircularBuffer.push(_:)(float a1)
{
  uint64_t v4 = v1[1];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = v1[2];
  if (!v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v6 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_16;
  }
  float v3 = a1;
  unint64_t v2 = v6 % v7;
  v1[1] = v6 % v7;
  uint64_t v9 = *v1;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v9 = v11;
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_9:
    if (v2 < *(void *)(v9 + 16))
    {
      uint64_t v10 = v9 + 8 * v2;
      *(float *)(v10 + 32) = v3;
      *(unsigned char *)(v10 + 36) = 0;
      *id v1 = v9;
      return;
    }
    goto LABEL_15;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

uint64_t outlined bridged method (ob) of @objc CAPropertyAnimation.keyPath.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_keyPath);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void specialized PlatformDisplayLink.remove(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)&v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBE8], v4);
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v9 = (uint64_t *)(a2 + 32);
  swift_beginAccess();
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of WeakPlatformDisplayLinkObserver(v12, (uint64_t)v36);
      uint64_t v13 = MEMORY[0x1C8776240](v36);
      if (v13)
      {
        uint64_t v14 = v13;
        swift_unknownObjectRelease();
        if (v14 == a1) {
          break;
        }
      }
      outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v36);
      v12 += 16;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with take of WeakPlatformDisplayLinkObserver((uint64_t)v36, (uint64_t)&v35);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_9:
    long long v35 = xmmword_1C376E330;
  }
  swift_bridgeObjectRelease();
  long long v15 = v35;
  uint64_t v16 = outlined destroy of WeakPlatformDisplayLinkObserver?((uint64_t)&v35);
  if (v15 != __PAIR128__(1, 0))
  {
    MEMORY[0x1F4188790](v16);
    *(&v33 - 2) = a1;
    *(&v33 - 1) = (uint64_t)&protocol witness table for AudioVisualizationLayer;
    swift_beginAccess();
    specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(void))partial apply for closure #2 in PlatformDisplayLink.remove(observer:));
    if (*(void *)(*v9 + 16) >= v17)
    {
      specialized Array.replaceSubrange<A>(_:with:)();
      uint64_t v18 = *v9;
      unint64_t v19 = *(void *)(*v9 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain();
        unint64_t v20 = 0;
        uint64_t v21 = 48;
        while (1)
        {
          outlined init with copy of WeakPlatformDisplayLinkObserver(v18 + v21 - 16, (uint64_t)v36);
          uint64_t v22 = MEMORY[0x1C8776240](v36);
          swift_unknownObjectRelease();
          outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v36);
          if (!v22) {
            break;
          }
          ++v20;
          v21 += 16;
          if (v19 == v20)
          {
            swift_bridgeObjectRelease();
            uint64_t v23 = *(void *)(*v9 + 16);
            unint64_t v20 = v19;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v23 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_51;
        }
        uint64_t v24 = *v9;
        unint64_t v25 = *(void *)(*v9 + 16);
        if (v23 != v25)
        {
          unint64_t v26 = v20 + 1;
          while (v26 < v25)
          {
            outlined init with copy of WeakPlatformDisplayLinkObserver(v24 + v21, (uint64_t)v36);
            uint64_t v27 = MEMORY[0x1C8776240](v36);
            swift_unknownObjectRelease();
            outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v36);
            if (v27)
            {
              if (v26 != v20)
              {
                if ((v20 & 0x8000000000000000) != 0) {
                  goto LABEL_44;
                }
                uint64_t v28 = *v9;
                unint64_t v29 = *(void *)(*v9 + 16);
                if (v20 >= v29) {
                  goto LABEL_45;
                }
                outlined init with copy of WeakPlatformDisplayLinkObserver(v28 + 16 * v20 + 32, (uint64_t)v36);
                if (v26 >= v29) {
                  goto LABEL_46;
                }
                outlined init with copy of WeakPlatformDisplayLinkObserver(v28 + v21, (uint64_t)v34);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t *v9 = v28;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized _ArrayBuffer._consumeAndCreateNew()();
                  uint64_t v28 = v32;
                  uint64_t *v9 = v32;
                }
                if (v20 >= *(void *)(v28 + 16)) {
                  goto LABEL_47;
                }
                outlined assign with take of WeakPlatformDisplayLinkObserver((uint64_t)v34, v28 + 16 * v20 + 32);
                if (v26 >= *(void *)(*v9 + 16)) {
                  goto LABEL_48;
                }
                outlined assign with take of WeakPlatformDisplayLinkObserver((uint64_t)v36, *v9 + v21);
              }
              if (__OFADD__(v20++, 1)) {
                goto LABEL_42;
              }
            }
            uint64_t v23 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_41;
            }
            uint64_t v24 = *v9;
            unint64_t v25 = *(void *)(*v9 + 16);
            ++v26;
            v21 += 16;
            if (v23 == v25) {
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
LABEL_21:
        if (v23 < (uint64_t)v20) {
          goto LABEL_50;
        }
      }
      specialized Array.replaceSubrange<A>(_:with:)();
      swift_endAccess();
      PlatformDisplayLink.cancelIfNecessary()();
      return;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
}

void specialized PlatformDisplayLink.add(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)&v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBE8], v4);
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = v9 + 32;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        outlined init with copy of WeakPlatformDisplayLinkObserver(v11, (uint64_t)v19);
        uint64_t v12 = MEMORY[0x1C8776240](v19);
        if (v12)
        {
          uint64_t v13 = v12;
          swift_unknownObjectRelease();
          if (v13 == a1) {
            break;
          }
        }
        outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v19);
        v11 += 16;
        if (!--v10)
        {
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      outlined init with take of WeakPlatformDisplayLinkObserver((uint64_t)v19, (uint64_t)&v18);
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_9:
      long long v18 = xmmword_1C376E330;
    }
    swift_bridgeObjectRelease();
    long long v14 = v18;
    outlined destroy of WeakPlatformDisplayLinkObserver?((uint64_t)&v18);
    if (v14 == __PAIR128__(1, 0))
    {
      *((void *)&v18 + 1) = 0;
      swift_unknownObjectWeakInit();
      *((void *)&v18 + 1) = &protocol witness table for AudioVisualizationLayer;
      uint64_t v15 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakPlatformDisplayLinkObserver(v15, (uint64_t)v19);
      swift_beginAccess();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v16 = *(void *)(*(void *)(a2 + 32) + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = *(void *)(a2 + 32);
      *(void *)(v17 + 16) = v16 + 1;
      outlined init with take of WeakPlatformDisplayLinkObserver((uint64_t)v19, v17 + 16 * v16 + 32);
      swift_endAccess();
      PlatformDisplayLink.startIfNecessary()();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AudioVisualizationLayer()
{
  return self;
}

uint64_t sub_1C3090FF4()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of WeakPlatformDisplayLinkObserver(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of WeakPlatformDisplayLinkObserver(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of WeakPlatformDisplayLinkObserver?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakPlatformDisplayLinkObserver?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in PlatformDisplayLink.remove(observer:)(uint64_t a1)
{
  return closure #2 in PlatformDisplayLink.remove(observer:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t outlined assign with take of WeakPlatformDisplayLinkObserver(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of WeakPlatformDisplayLinkObserver(uint64_t a1, uint64_t a2)
{
  return a2;
}

double UIFont.layoutLineHeight.getter()
{
  uint64_t v1 = v0;
  double Ascent = CTFontGetAscent(v1);
  double v3 = Ascent + fabs(CTFontGetDescent(v1));
  double Leading = CTFontGetLeading(v1);

  return ceil(Leading + v3);
}

UIFont __swiftcall UIFont.caseSensitive()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UIFontDescriptorFeatureKey : Int]>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C3769620;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorFeatureKey, Int)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  double v3 = (void *)*MEMORY[0x1E4FB28A0];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB28A0];
  *(void *)(inited + 40) = 33;
  uint64_t v4 = (void *)*MEMORY[0x1E4FB2890];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB2890];
  *(void *)(inited + 56) = 0;
  type metadata accessor for UIFontDescriptorFeatureKey(0);
  lazy protocol witness table accessor for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
  id v5 = v3;
  id v6 = v4;
  *(void *)(v1 + 32) = Dictionary.init(dictionaryLiteral:)();
  id v7 = objc_msgSend(v0, sel_fontDescriptor);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorAttributeName, Any)>);
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
  uint64_t v9 = (void *)*MEMORY[0x1E4FB0910];
  *(void *)(v8 + 32) = *MEMORY[0x1E4FB0910];
  *(void *)(v8 + 64) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[UIFontDescriptorFeatureKey : Int]]);
  *(void *)(v8 + 40) = v1;
  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  id v10 = v9;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v7, sel_fontDescriptorByAddingAttributes_, isa);

  objc_msgSend(v0, sel_pointSize);
  id v14 = objc_msgSend(self, sel_fontWithDescriptor_size_, v12, v13);

  return (UIFont)v14;
}

uint64_t lazy protocol witness table accessor for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, specialized _NativeSet.startIndex.getter, specialized Set.endIndex.getter, (void (*)(uint64_t, uint64_t, void, uint64_t))specialized Set.subscript.getter, type metadata accessor for Participant, a2);
}

{
  return specialized Collection.first.getter(a1, type metadata accessor for Participant, (void (*)(void))type metadata accessor for Participant, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))type metadata accessor for ConversationControlsAction, (void (*)(void))type metadata accessor for ConversationControlsAction, a2);
}

{
  return specialized Collection.first.getter(a1, type metadata accessor for RecentsCallItem, (void (*)(void))type metadata accessor for RecentsCallItem, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))specialized _NativeSet.startIndex.getter, specialized Set.endIndex.getter, (void (*)(uint64_t, uint64_t, void, uint64_t))specialized Set.subscript.getter, MEMORY[0x1E4F294B8], a2);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v4 = *(void *)(a1 + 16);
  id v5 = type metadata accessor for IndexPath();
  if (v4)
  {
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(a2, a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    id v7 = 0;
  }
  else
  {
    id v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v5);
}

{
  return specialized Collection.first.getter(a1, type metadata accessor for CaptionSectioner.SpeakerSection, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection, a2);
}

{
  return specialized Collection.first.getter(a1, type metadata accessor for CaptionSectioner.Caption, (void (*)(void))type metadata accessor for CaptionSectioner.Caption, a2);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of Conversation(a1 + 32, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void specialized Collection.first.getter()
{
}

{
  specialized Collection.first.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  BOOL v16;

  OUTLINED_FUNCTION_31();
  id v5 = v4;
  id v7 = v6;
  uint64_t v8 = v2;
  if ((v2 & 0xC000000000000001) != 0)
  {
    __CocoaSet.startIndex.getter();
    OUTLINED_FUNCTION_42_1();
    uint64_t v9 = 1;
  }
  else
  {
    v3(v2);
    OUTLINED_FUNCTION_42_1();
    uint64_t v9 = v10 & 1;
  }
  uint64_t v11 = v7(v8);
  double v13 = v12;
  uint64_t v15 = v14 & 1;
  uint64_t v16 = specialized static Set.Index.== infix(_:_:)(v0, v1, v9, v11, v12, v14 & 1);
  outlined consume of Set<TUHandle>.Index._Variant(v11, v13, v15);
  if (!v16) {
    v5(v0, v1, v9, v8);
  }
  outlined consume of Set<TUHandle>.Index._Variant(v0, v1, v9);
  OUTLINED_FUNCTION_28();
}

{
  specialized Collection.first.getter();
}

{
  specialized Collection.first.getter();
}

{
  specialized Collection.first.getter();
}

{
  specialized Collection.first.getter();
}

{
  specialized Collection.first.getter();
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a2(0);
  if (v7)
  {
    OUTLINED_FUNCTION_10_0();
    outlined init with copy of ConversationControlsAction(a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a4, a3);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a4, v10, 1, v8);
}

void specialized Collection.first.getter(uint64_t a1)
{
  uint64_t v2 = specialized _NativeSet.startIndex.getter(a1);
  int v4 = v3;
  int v6 = v5;
  uint64_t v7 = specialized Set.endIndex.getter(a1);
  if ((v6 | v9)) {
    goto LABEL_7;
  }
  if (v4 != v8)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  if (v2 != v7) {
    specialized Set.subscript.getter(v2);
  }
}

void *specialized Collection.first.getter(uint64_t a1)
{
  double result = (void *)specialized Dictionary.startIndex.getter(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_32_13();
  if (v13) {
    return 0;
  }
  id v14 = OUTLINED_FUNCTION_31_11(v5, v6, v7, v8, v9, v10, v11, v12, v19, v20);
  return specialized Dictionary.subscript.getter(v14, v15, v16, v17, v18);
}

{
  void *result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  double result = (void *)specialized Dictionary.startIndex.getter(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_32_13();
  if (v13) {
    return 0;
  }
  id v14 = OUTLINED_FUNCTION_31_11(v5, v6, v7, v8, v9, v10, v11, v12, v19, v20);
  return specialized Dictionary.subscript.getter(v14, v15, v16, v17, v18);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for LayoutSubviews();
  lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent((unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews, MEMORY[0x1E4F3C980]);
  OUTLINED_FUNCTION_24_2();
  dispatch thunk of Collection.startIndex.getter();
  OUTLINED_FUNCTION_24_2();
  dispatch thunk of Collection.endIndex.getter();
  if (v12[4] == v12[0])
  {
    type metadata accessor for LayoutSubview();
    uint64_t v2 = OUTLINED_FUNCTION_47_0();
  }
  else
  {
    uint64_t v6 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v8 = v7;
    uint64_t v9 = type metadata accessor for LayoutSubview();
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, v8, v9);
    v6(v12, 0);
    uint64_t v2 = a1;
    uint64_t v3 = 0;
    uint64_t v4 = 1;
    uint64_t v5 = v9;
  }
  return __swift_storeEnumTagSinglePayload(v2, v3, v4, v5);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void (*a4)(uint64_t, uint64_t, void, uint64_t)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a2();
  uint64_t v13 = v12;
  int v15 = v14;
  uint64_t result = a3(a1);
  if ((v15 | v18)) {
    goto LABEL_10;
  }
  if (v13 != v17)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (v11 == result)
  {
    uint64_t v19 = 1;
  }
  else
  {
    a4(v11, v13, 0, a1);
    uint64_t v19 = 0;
  }
  uint64_t v20 = a5(0);
  return __swift_storeEnumTagSinglePayload(a6, v19, 1, v20);
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
}

{
  specialized Sequence.first(where:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant, 0x1E4FADB90, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject);
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v7 = v6;
  uint64_t v8 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    OUTLINED_FUNCTION_35_5();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, a4);
    lazy protocol witness table accessor for type TUConversation and conformance NSObject(a6, a4);
    Set.Iterator.init(_cocoa:)();
    uint64_t v8 = v32;
    uint64_t v31 = v33;
    uint64_t v12 = v34;
    int64_t v13 = v35;
    unint64_t v14 = v36;
  }
  else
  {
    uint64_t v31 = a3 + 56;
    uint64_t v15 = ~(-1 << *(unsigned char *)(a3 + 32));
    OUTLINED_FUNCTION_50_5();
    unint64_t v14 = v16 & v17;
    swift_bridgeObjectRetain();
    uint64_t v12 = v15;
    int64_t v13 = 0;
  }
  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if (v8 < 0) {
    goto LABEL_7;
  }
LABEL_5:
  if (v14)
  {
    uint64_t v18 = (v14 - 1) & v14;
    unint64_t v19 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v20 = v13;
    goto LABEL_24;
  }
  int64_t v20 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v20 >= v30) {
      goto LABEL_36;
    }
    unint64_t v22 = *(void *)(v31 + 8 * v20);
    if (!v22)
    {
      OUTLINED_FUNCTION_49_4();
      if (v23 == v24)
      {
LABEL_36:
        outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
        return;
      }
      OUTLINED_FUNCTION_44_6();
      if (v22) {
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_49_4();
      if (v23 == v24) {
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_44_6();
      if (v22) {
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_49_4();
      if (v23 == v24) {
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_44_6();
      if (v22)
      {
LABEL_22:
        int64_t v20 = v25;
      }
      else
      {
        int64_t v20 = v13 + 5;
        if (v13 + 5 >= v30) {
          goto LABEL_36;
        }
        unint64_t v22 = *(void *)(v31 + 8 * v20);
        if (!v22)
        {
          while (1)
          {
            OUTLINED_FUNCTION_49_4();
            if (v23 == v24) {
              goto LABEL_36;
            }
            OUTLINED_FUNCTION_44_6();
            uint64_t v28 = v27 + 1;
            if (v22)
            {
              int64_t v20 = v28 - 1;
              break;
            }
          }
        }
      }
    }
    uint64_t v18 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v20 << 6);
LABEL_24:
    id v21 = *(id *)(*(void *)(v8 + 48) + 8 * v19);
    if (v21)
    {
      while (1)
      {
        id v37 = v21;
        char v26 = a1(&v37);
        if (v7) {
          break;
        }
        if (v26) {
          goto LABEL_36;
        }

        int64_t v13 = v20;
        unint64_t v14 = v18;
        if ((v8 & 0x8000000000000000) == 0) {
          goto LABEL_5;
        }
LABEL_7:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for NSObject(0, a4);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v21 = v37;
          swift_unknownObjectRelease();
          int64_t v20 = v13;
          uint64_t v18 = v14;
          if (v21) {
            continue;
          }
        }
        goto LABEL_36;
      }
    }
    goto LABEL_36;
  }
  __break(1u);
}

void *specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  return specialized Sequence.first(where:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v13;

  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      uint64_t v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v7 - 4, a3) : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      int64_t v13 = v8;
      uint64_t v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    OUTLINED_FUNCTION_35_5();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

ConversationKit::LinkSource_optional __swiftcall LinkSource.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LinkSource.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t LinkSource.rawValue.getter()
{
  uint64_t v1 = 0x64657469766E69;
  if (*v0 != 1) {
    uint64_t v1 = 0x6574736576726168;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x43796C6C61636F6CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkSource(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

ConversationKit::LinkSource_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LinkSource(Swift::String *a1)
{
  return LinkSource.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LinkSource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LinkSource.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LinkSource()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkSource()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkSource()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

id ConversationLink.tuConversationLink.getter()
{
  return *v0;
}

uint64_t ConversationLink.suggestedURLs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationLink.cache.getter()
{
  return swift_retain();
}

void ConversationLink.prevailingSuggestion.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = *(void *)(v0 + 8);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() <= 0) {
      goto LABEL_35;
    }
    uint64_t v2 = MEMORY[0x1E4FBC870];
    uint64_t v32 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    uint64_t v0 = __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v0 = v3;
      unint64_t v4 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for SGURL);
      while (1)
      {
        v30[4] = v0;
        swift_dynamicCast();
        id v5 = v31;
        if (SGURL.isValidConversationLink.getter())
        {
          uint64_t v6 = v32;
          unint64_t v7 = *(void *)(v32 + 16);
          if (*(void *)(v32 + 24) <= v7)
          {
            specialized _NativeSet.resize(capacity:)(v7 + 1);
            uint64_t v6 = v32;
          }
          Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
          uint64_t v9 = v6 + 56;
          uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
          unint64_t v11 = v8 & ~v10;
          unint64_t v12 = v11 >> 6;
          if (((-1 << v11) & ~*(void *)(v6 + 56 + 8 * (v11 >> 6))) == 0)
          {
            char v14 = 0;
            unint64_t v15 = (unint64_t)(63 - v10) >> 6;
            while (++v12 != v15 || (v14 & 1) == 0)
            {
              BOOL v16 = v12 == v15;
              if (v12 == v15) {
                unint64_t v12 = 0;
              }
              v14 |= v16;
              uint64_t v17 = *(void *)(v9 + 8 * v12);
              if (v17 != -1)
              {
                unint64_t v13 = __clz(__rbit64(~v17)) + (v12 << 6);
                goto LABEL_18;
              }
            }
            __break(1u);
LABEL_37:
            swift_bridgeObjectRetain();
            uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            if (!v23) {
              goto LABEL_32;
            }
LABEL_29:
            BOOL v24 = __OFSUB__(v23, 1);
            uint64_t v25 = v23 - 1;
            if (v24)
            {
              __break(1u);
            }
            else
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v25, (v4 & 0xC000000000000001) == 0, v4);
              if ((v4 & 0xC000000000000001) == 0)
              {
                id v26 = *(id *)(v4 + 8 * v25 + 32);
                goto LABEL_32;
              }
            }
            uint64_t v29 = OUTLINED_FUNCTION_24_2();
            MEMORY[0x1C87744F0](v29);
LABEL_32:
            swift_release();
            uint64_t v27 = OUTLINED_FUNCTION_23_0();
            v28(v27);
            goto LABEL_35;
          }
          unint64_t v13 = __clz(__rbit64((-1 << v11) & ~*(void *)(v6 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
LABEL_18:
          *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          *(void *)(*(void *)(v6 + 48) + 8 * v13) = v5;
          ++*(void *)(v6 + 16);
        }
        else
        {
        }
        uint64_t v0 = __CocoaSet.Iterator.next()();
        if (!v0)
        {
          uint64_t v2 = v32;
          break;
        }
      }
    }
    swift_release();
  }
  else
  {
    if (!*(void *)(v1 + 16)) {
      goto LABEL_35;
    }
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v2 = specialized _NativeSet.filter(_:)(v18);
  }
  if (specialized Set.count.getter(v2) > 1)
  {
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = specialized _copyCollectionToContiguousArray<A>(_:)(v19);
    swift_release();
    uint64_t v32 = v20;
    specialized MutableCollection<>.sort(by:)(&v32);
    swift_release();
    unint64_t v4 = v32;
    type metadata accessor for Date();
    OUTLINED_FUNCTION_4();
    MEMORY[0x1F4188790](v21);
    OUTLINED_FUNCTION_60();
    uint64_t v22 = static Date.now.getter();
    MEMORY[0x1F4188790](v22);
    v30[2] = v0;
    if (!specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #3 in ConversationLink.prevailingSuggestion.getter, (uint64_t)v30, v4))
    {
      if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0) {
        goto LABEL_37;
      }
      uint64_t v23 = *(void *)(v4 + 16);
      if (v23) {
        goto LABEL_29;
      }
    }
    goto LABEL_32;
  }
  specialized Collection.first.getter();
  swift_release();
LABEL_35:
  OUTLINED_FUNCTION_28();
}

uint64_t closure #3 in ConversationLink.prevailingSuggestion.getter()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  SGURL.endDate.getter((uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v0) == 1)
  {
    SGURL.recentsDate.getter();
    outlined destroy of Date?((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
  }
  char v7 = static Date.> infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v7 & 1;
}

BOOL ConversationLink.hasSuggestions.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if ((v1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  return v2 > 0;
}

uint64_t ConversationLink.displayName.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  ConversationLink.prevailingSuggestion.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(v3, (SEL *)&selRef_documentTitle);
    unint64_t v7 = v6;

    if (v7)
    {
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v8) {
        return v5;
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v9 = outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(v2, (SEL *)&selRef_displayName);
  if (v10)
  {
    uint64_t v5 = v9;
    OUTLINED_FUNCTION_43_5();
    if (v11) {
      return v5;
    }
    swift_bridgeObjectRelease();
  }
  if ((objc_msgSend(v2, sel_isLocallyCreated) & 1) != 0
    || (ConversationLink.prevailingSuggestion.getter(), !v12)
    || (v13 = v12, uint64_t v5 = SGURL.receivedFromDisplayName(using:)(), v15 = v14, v13, !v15))
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v16 = v2;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v17 = __CocoaSet.count.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = *(void *)(v1 + 16);
    }
    if (v17 < 1)
    {
      return 0;
    }
    else
    {
      id v18 = objc_msgSend(self, sel_conversationKit);
      uint64_t v5 = OUTLINED_FUNCTION_11_1(0x454D495445434146, 0xED00004B4E494C5FLL);
    }
  }
  return v5;
}

uint64_t ConversationLink.callHistoryTitle.getter()
{
  ConversationLink.displayName.getter();
  if (v0)
  {
    OUTLINED_FUNCTION_43_5();
    if (v1) {
      return OUTLINED_FUNCTION_23_0();
    }
    swift_bridgeObjectRelease();
  }
  ConversationLink.prevailingSuggestion.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(v2, (SEL *)&selRef_documentTitle);
    unint64_t v6 = v5;

    if (v6)
    {
      uint64_t v7 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v7) {
        swift_bridgeObjectRelease();
      }
    }
  }
  return OUTLINED_FUNCTION_23_0();
}

void ConversationLink.extraSubtitleStringWithDate.getter()
{
  OUTLINED_FUNCTION_31();
  ConversationLink.prevailingSuggestion.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = type metadata accessor for Date();
    OUTLINED_FUNCTION_4();
    uint64_t v5 = v4;
    MEMORY[0x1F4188790](v6);
    OUTLINED_FUNCTION_18_6();
    SGURL.recentsDate.getter();
    uint64_t v7 = static Date.faceTimeDateString(from:)();
    uint64_t v31 = v8;
    uint64_t v32 = v7;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v3);
    uint64_t v9 = self;
    id v10 = objc_msgSend(v9, sel_conversationKit);
    v33._object = (void *)0xE000000000000000;
    v11._countAndFlagsBits = 0x5050415F4D4F5246;
    v11._object = (void *)0xEC000000454D414ELL;
    v12.value._countAndFlagsBits = 0x61737265766E6F43;
    v12.value._object = (void *)0xEF74694B6E6F6974;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v33._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v33);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1C3769620;
    uint64_t v15 = SGURL.applicationLocalizedName.getter();
    uint64_t v17 = v16;
    uint64_t v18 = MEMORY[0x1E4FBB1A0];
    *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v14 + 64) = v19;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    uint64_t v20 = String.init(format:_:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    id v23 = objc_msgSend(self, sel_sharedApplication);
    id v24 = objc_msgSend(v23, sel_userInterfaceLayoutDirection);

    id v25 = objc_msgSend(v9, sel_conversationKit);
    OUTLINED_FUNCTION_11_1(0xD00000000000001CLL, 0x80000001C37968B0);

    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1C37696D0;
    *(void *)(v26 + 56) = v18;
    *(void *)(v26 + 64) = v19;
    uint64_t v28 = v31;
    uint64_t v27 = v32;
    if (v24 == (id)1) {
      uint64_t v29 = v32;
    }
    else {
      uint64_t v29 = v20;
    }
    if (v24 == (id)1) {
      uint64_t v30 = v31;
    }
    else {
      uint64_t v30 = v22;
    }
    if (v24 == (id)1)
    {
      uint64_t v27 = v20;
      uint64_t v28 = v22;
    }
    *(void *)(v26 + 32) = v29;
    *(void *)(v26 + 40) = v30;
    *(void *)(v26 + 96) = v18;
    *(void *)(v26 + 104) = v19;
    *(void *)(v26 + 72) = v27;
    *(void *)(v26 + 80) = v28;
    String.init(format:_:)();

    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t ConversationLink.extraSubtitleString.getter()
{
  OUTLINED_FUNCTION_21_14();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_11_1(0x5050415F4D4F5246, 0xEC000000454D414ELL);
  OUTLINED_FUNCTION_42_1();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = SGURL.applicationLocalizedName.getter();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  OUTLINED_FUNCTION_24_2();
  uint64_t v7 = String.init(format:_:)();

  swift_bridgeObjectRelease();
  return v7;
}

uint64_t ConversationLink.linkSources.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (objc_msgSend(v1, sel_isLocallyCreated))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    uint64_t v4 = v3;
    unint64_t v6 = *(void *)(v3 + 16);
    unint64_t v5 = *(void *)(v3 + 24);
    if (v6 >= v5 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1, v3);
      uint64_t v4 = v15;
    }
    *(void *)(v4 + 16) = v6 + 1;
    *(unsigned char *)(v4 + v6 + 32) = 0;
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  if (specialized Set.count.getter(v2) < 1)
  {
    if (*(void *)(v4 + 16)) {
      return v4;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v4);
      uint64_t v4 = v16;
    }
    unint64_t v8 = *(void *)(v4 + 16);
    unint64_t v12 = *(void *)(v4 + 24);
    unint64_t v9 = v8 + 1;
    if (v8 >= v12 >> 1)
    {
      OUTLINED_FUNCTION_23_12(v12);
      char v10 = 1;
      uint64_t v4 = v17;
    }
    else
    {
      char v10 = 1;
    }
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, v4);
      uint64_t v4 = v13;
    }
    unint64_t v8 = *(void *)(v4 + 16);
    unint64_t v7 = *(void *)(v4 + 24);
    unint64_t v9 = v8 + 1;
    if (v8 >= v7 >> 1)
    {
      OUTLINED_FUNCTION_23_12(v7);
      uint64_t v4 = v14;
    }
    char v10 = 2;
  }
  *(void *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + v8 + 32) = v10;
  return v4;
}

void ConversationLink.uniqueId.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_14_18();
  uint64_t v3 = ConversationLink.linkSources.getter();
  uint64_t v4 = *(unsigned __int8 **)(v3 + 16);
  if (v4)
  {
    long long v41 = v2;
    uint64_t v43 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v5 = 0;
    OUTLINED_FUNCTION_22_12();
    OUTLINED_FUNCTION_37_6();
    OUTLINED_FUNCTION_36_6();
    unint64_t v10 = 0xE900000000000064;
    do
    {
      int v11 = v5[v3 + 32];
      if (v11 == 1) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 0x6574736576726168;
      }
      if (v11 == 1) {
        unint64_t v13 = v8;
      }
      else {
        unint64_t v13 = v10;
      }
      if (v5[v3 + 32]) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = v7;
      }
      if (v5[v3 + 32]) {
        unint64_t v15 = v13;
      }
      else {
        unint64_t v15 = v6;
      }
      uint64_t v43 = v1;
      unint64_t v16 = *(void *)(v1 + 16);
      if (v16 >= *(void *)(v1 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_36_6();
        OUTLINED_FUNCTION_37_6();
        OUTLINED_FUNCTION_22_12();
      }
      ++v5;
      *(void *)(v1 + 16) = v16 + 1;
      uint64_t v17 = v1 + 16 * v16;
      *(void *)(v17 + 32) = v14;
      *(void *)(v17 + 40) = v15;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
    uint64_t v2 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = MEMORY[0x1E4FBC860];
  }
  uint64_t v43 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = v18;
  v44._object = v20;
  OUTLINED_FUNCTION_14_18();
  ConversationLink.prevailingSuggestion.getter();
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = objc_msgSend(v21, sel_documentIdentifier);

    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v25;

    v26._countAndFlagsBits = v24;
    v26._object = v4;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_14_18();
  uint64_t v27 = ConversationLink.displayName.getter();
  if (v28)
  {
    String.append(_:)(*(Swift::String *)&v27);
    swift_bridgeObjectRelease();
  }
  v42[0] = 0;
  v42[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 45;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  OUTLINED_FUNCTION_14_18();
  ConversationLink.timeInterval.getter();
  Double.write<A>(to:)();
  v30._countAndFlagsBits = 0x2D6B6E696C2DLL;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  id v31 = objc_msgSend(v2, sel_URL);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v32 - 8);
  OUTLINED_FUNCTION_60();
  if (v31)
  {
    uint64_t v33 = type metadata accessor for URL();
    OUTLINED_FUNCTION_4();
    uint64_t v35 = v34;
    MEMORY[0x1F4188790](v36);
    OUTLINED_FUNCTION_18_6();
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v35 + 32))(v42, v4, v33);
    __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v33);
    if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v33) != 1)
    {
      swift_bridgeObjectRelease();
      URL.absoluteString.getter();
      OUTLINED_FUNCTION_42_1();
      uint64_t v37 = OUTLINED_FUNCTION_23_0();
      v38(v37);
      v39._countAndFlagsBits = OUTLINED_FUNCTION_24_2();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_28();
      return;
    }
  }
  else
  {
    uint64_t v40 = type metadata accessor for URL();
    __swift_storeEnumTagSinglePayload((uint64_t)v42, 1, 1, v40);
  }
  __break(1u);
}

double ConversationLink.timeInterval.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  id v22 = *(id *)v0;
  uint64_t v23 = v1;
  uint64_t v24 = v2;
  id v3 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  ConversationLink.prevailingSuggestion.getter();
  if (v4)
  {
    unint64_t v5 = v4;
    char v6 = SGURL.hasEventDate.getter();
    swift_release();
    swift_bridgeObjectRelease();

    double v7 = 0.0;
    if (v6)
    {
      uint64_t v8 = type metadata accessor for Date();
      v21[2] = v21;
      uint64_t v9 = *(void *)(v8 - 8);
      MEMORY[0x1F4188790](v8);
      int v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      v21[1] = v21;
      uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
      MEMORY[0x1F4188790](v12 - 8);
      unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      id v22 = v3;
      uint64_t v23 = v1;
      uint64_t v24 = v2;
      ConversationLink.prevailingSuggestion.getter();
      if (v15)
      {
        unint64_t v16 = v15;
        SGURL.recentsDate.getter();

        __swift_storeEnumTagSinglePayload((uint64_t)v21 - v14, 0, 1, v8);
      }
      else
      {
        id v17 = objc_msgSend(v3, sel_creationDate);
        if (MEMORY[0x1F4188790](v17))
        {
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = 1;
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v21 - v14, v18, 1, v8);
        outlined init with take of Date?((uint64_t)v21 - v14, (uint64_t)v21 - v14);
      }
      if (__swift_getEnumTagSinglePayload((uint64_t)v21 - v14, 1, v8) == 1)
      {
        outlined destroy of Date?((uint64_t)v21 - v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, (char *)v21 - v14, v8);
        Date.timeIntervalSinceReferenceDate.getter();
        double v7 = v19;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();

    return 0.0;
  }
  return v7;
}

uint64_t ConversationLink.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *((void *)v1 + 2);
  long long v14 = *v1;
  long long v15 = *v1;
  uint64_t v16 = v3;
  ConversationLink.prevailingSuggestion.getter();
  if (v4)
  {
    unint64_t v5 = v4;
    SGURL.recentsDate.getter();

    uint64_t v6 = type metadata accessor for Date();
    return __swift_storeEnumTagSinglePayload(a1, 0, 1, v6);
  }
  else
  {
    id v8 = objc_msgSend((id)v14, sel_creationDate);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    MEMORY[0x1F4188790](v9 - 8);
    OUTLINED_FUNCTION_60();
    if (v8)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)&v15, v11, 1, v10);
    uint64_t v12 = OUTLINED_FUNCTION_23_0();
    return outlined init with take of Date?(v12, v13);
  }
}

void ConversationLink.endDate.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_21_14();
  if (v2)
  {
    id v7 = v2;
    SGURL.endDate.getter(a1);
  }
  else
  {
    type metadata accessor for Date();
    uint64_t v3 = OUTLINED_FUNCTION_47_0();
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void ConversationLink.hasEventDate.getter()
{
  ConversationLink.prevailingSuggestion.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    SGURL.hasEventDate.getter();
  }
}

uint64_t ConversationLink.groupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationLink.groupUUID.getter((SEL *)&selRef_groupUUID, MEMORY[0x1F418BAE8], MEMORY[0x1F418BCB8], a1);
}

uint64_t ConversationLink.invitedMemberHandles.getter()
{
  return outlined bridged method (pb) of @objc TUConversationLink.invitedMemberHandles.getter(*v0);
}

uint64_t ConversationLink.url.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationLink.groupUUID.getter((SEL *)&selRef_URL, MEMORY[0x1F418B818], MEMORY[0x1F418B830], a1);
}

uint64_t ConversationLink.groupUUID.getter@<X0>(SEL *a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  id v8 = [*v4 *a1];
  if (v8)
  {
    uint64_t v9 = v8;
    a2();

    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  uint64_t v11 = a3(0);
  return __swift_storeEnumTagSinglePayload(a4, v10, 1, v11);
}

uint64_t ConversationLink.init(tuConversationLink:suggestedURLs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v6 = static ParticipantContactDetailsCache.faceTime;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v6;
  return swift_retain();
}

uint64_t static ConversationLink.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void ConversationLink.hash(into:)()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

void ConversationLink.updated(with:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *(void **)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationLink);
  id v8 = objc_msgSend(a1, sel_url);
  uint64_t v9 = type metadata accessor for URL();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = @nonobjc TUConversationLink.init(url:)((uint64_t)v11, v12);
  if (!v13) {
    goto LABEL_7;
  }
  long long v14 = v13;
  if (!objc_msgSend(v6, sel_isEquivalentToConversationLink_, v13))
  {

LABEL_7:
    *a2 = v6;
    a2[1] = v5;
    a2[2] = v7;
    id v21 = v6;
    swift_bridgeObjectRetain();
    swift_retain();
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769830;
  *(void *)(inited + 32) = a1;
  unint64_t v22 = inited;
  specialized Array._endMutation()();
  unint64_t v16 = v22;
  id v17 = v6;
  swift_bridgeObjectRetain();
  id v18 = a1;
  unint64_t v19 = specialized Set.union<A>(_:)(v16, v5);
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v20 = static ParticipantContactDetailsCache.faceTime;
  *a2 = v17;
  a2[1] = v19;
  a2[2] = v20;
  swift_retain();
}

void specialized Set.union<A>(_:)(unint64_t a1, void *a2)
{
}

{
  specialized Set.union<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember, 0x1E4FADB80, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
}

{
  specialized Set.union<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
}

void specialized Set.union<A>(_:)(unint64_t a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, void (*a6)(id *, id))
{
  unint64_t v7 = a1;
  v28[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, a3);
    lazy protocol witness table accessor for type TUConversation and conformance NSObject(a5, a3);
    Set.Iterator.init(_cocoa:)();
    unint64_t v7 = (unint64_t)v28[2];
    uint64_t v27 = v28[3];
    id v10 = v28[4];
    id v11 = v28[5];
    unint64_t v12 = (unint64_t)v28[6];
  }
  else
  {
    id v11 = 0;
    uint64_t v27 = (void *)(a1 + 56);
    OUTLINED_FUNCTION_50_5();
    unint64_t v12 = v13 & v14;
  }
  int64_t v15 = ((unint64_t)v10 + 64) >> 6;
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v12)
    {
      uint64_t v16 = (v12 - 1) & v12;
      unint64_t v17 = __clz(__rbit64(v12)) | ((void)v11 << 6);
      id v18 = (char *)v11;
      goto LABEL_26;
    }
    uint64_t v20 = (uint64_t)v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v20 >= v15) {
      goto LABEL_29;
    }
    id v18 = (char *)v11 + 1;
    if (!v27[v20])
    {
      id v18 = (char *)v11 + 2;
      if ((uint64_t)v11 + 2 >= v15) {
        goto LABEL_29;
      }
      if (!v27[(void)v18])
      {
        id v18 = (char *)v11 + 3;
        if ((uint64_t)v11 + 3 >= v15) {
          goto LABEL_29;
        }
        if (!v27[(void)v18])
        {
          id v18 = (char *)v11 + 4;
          if ((uint64_t)v11 + 4 >= v15) {
            goto LABEL_29;
          }
          if (!v27[(void)v18])
          {
            id v18 = (char *)v11 + 5;
            if ((uint64_t)v11 + 5 >= v15) {
              goto LABEL_29;
            }
            if (!v27[(void)v18])
            {
              uint64_t v21 = (uint64_t)v11 + 6;
              while (v21 < v15)
              {
                if (v27[v21++])
                {
                  id v18 = (char *)(v21 - 1);
                  goto LABEL_25;
                }
              }
LABEL_29:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_25:
    OUTLINED_FUNCTION_25_12();
    uint64_t v16 = v24 & v23;
    unint64_t v17 = v25 + ((void)v18 << 6);
LABEL_26:
    id v19 = *(id *)(*(void *)(v7 + 48) + 8 * v17);
    if (!v19) {
      goto LABEL_29;
    }
    while (1)
    {
      a6(v28, v19);

      id v11 = v18;
      unint64_t v12 = v16;
      if ((v7 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_7:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, a3);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v19 = v28[0];
        swift_unknownObjectRelease();
        id v18 = (char *)v11;
        uint64_t v16 = v12;
        if (v19) {
          continue;
        }
      }
      goto LABEL_29;
    }
  }
  __break(1u);
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0) - 8;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  id v10 = (char *)&v15 - v9;
  uint64_t v16 = a2;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v13 = *(void *)(v8 + 72);
    do
    {
      outlined init with copy of ConversationControlsAction(v12, (uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
      specialized Set._Variant.insert(_:)();
      outlined destroy of Participant((uint64_t)v10);
      v12 += v13;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    return v16;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = a1 + 40;
    do
    {
      uint64_t v4 = swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_51_3(v4);
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return a2;
  }
  else
  {
    uint64_t v5 = a2;
    swift_bridgeObjectRelease();
  }
  return v5;
}

unint64_t specialized Set.union<A>(_:)(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  uint64_t v8 = a2;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1C87744F0](i, v3);
      }
      else {
        id v6 = *(id *)(v3 + 8 * i + 32);
      }
      specialized Set._Variant.insert(_:)(&v7, v6);
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  __break(1u);
  return result;
}

void specialized Set.union<A>(_:)(uint64_t a1)
{
  int64_t v1 = 0;
  uint64_t v2 = a1 + 56;
  OUTLINED_FUNCTION_17_19();
  uint64_t v5 = v4 & v3;
  int64_t v7 = (unint64_t)(v6 + 63) >> 6;
  if ((v4 & v3) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  for (v5 &= v5 - 1; ; uint64_t v5 = v11 & v10)
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_51_3(v12);
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v8 >= v7) {
      goto LABEL_21;
    }
    ++v1;
    if (!*(void *)(v2 + 8 * v8))
    {
      int64_t v1 = v8 + 1;
      if (v8 + 1 >= v7) {
        goto LABEL_21;
      }
      if (!*(void *)(v2 + 8 * v1))
      {
        int64_t v1 = v8 + 2;
        if (v8 + 2 >= v7) {
          goto LABEL_21;
        }
        if (!*(void *)(v2 + 8 * v1))
        {
          int64_t v1 = v8 + 3;
          if (v8 + 3 >= v7) {
            goto LABEL_21;
          }
          if (!*(void *)(v2 + 8 * v1)) {
            break;
          }
        }
      }
    }
LABEL_18:
    OUTLINED_FUNCTION_25_12();
  }
  int64_t v9 = v8 + 4;
  if (v9 >= v7)
  {
LABEL_21:
    swift_release();
    return;
  }
  if (*(void *)(v2 + 8 * v9))
  {
    int64_t v1 = v9;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v1 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v1 >= v7) {
      goto LABEL_21;
    }
    ++v9;
    if (*(void *)(v2 + 8 * v1)) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  int64_t v3 = 0;
  v17[1] = a2;
  uint64_t v4 = a1 + 56;
  OUTLINED_FUNCTION_17_19();
  unint64_t v7 = v6 & v5;
  int64_t v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = v16 + (v3 << 6))
  {
    specialized Set._Variant.insert(_:)((uint64_t)v17, *(void *)(*(void *)(a1 + 48) + 8 * i));
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    ++v3;
    if (!*(void *)(v4 + 8 * v12))
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_21;
      }
      if (!*(void *)(v4 + 8 * v3))
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_21;
        }
        if (!*(void *)(v4 + 8 * v3))
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_21;
          }
          if (!*(void *)(v4 + 8 * v3)) {
            break;
          }
        }
      }
    }
LABEL_18:
    OUTLINED_FUNCTION_25_12();
    unint64_t v7 = v15 & v14;
  }
  int64_t v13 = v12 + 4;
  if (v13 >= v9)
  {
LABEL_21:
    swift_release();
    return;
  }
  if (*(void *)(v4 + 8 * v13))
  {
    int64_t v3 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_21;
    }
    ++v13;
    if (*(void *)(v4 + 8 * v3)) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t ConversationLink.withoutSuggestedURLs.getter@<X0>(void *a1@<X8>)
{
  id v3 = *v1;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<SGURL>, specialized _ArrayBuffer._getElementSlowPath(_:), &lazy cache variable for type metadata for SGURL);
    uint64_t v4 = v7;
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC870];
  }
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v5 = static ParticipantContactDetailsCache.faceTime;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return swift_retain();
}

Swift::Int ConversationLink.hashValue.getter()
{
  int64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationLink()
{
  int64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, unint64_t a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for SGURL);
  if (a2 >> 62)
  {
    uint64_t v4 = _CocoaArrayWrapper.subscript.getter();
    self;
    if (swift_dynamicCastObjCClass()) {
      return v4;
    }
LABEL_10:
    _StringGuts.grow(_:)(85);
    unint64_t v6 = 0xD000000000000046;
    unint64_t v5 = 0x80000001C3796920;
    goto LABEL_11;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  swift_unknownObjectRetain();
  self;
  if (swift_dynamicCastObjCClass()) {
    return v4;
  }
  _StringGuts.grow(_:)(82);
  unint64_t v5 = 0x80000001C37968D0;
  unint64_t v6 = 0xD000000000000043;
LABEL_11:
  String.append(_:)(*(Swift::String *)&v6);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x756F662074756220;
  v9._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:flags:)();
  __break(1u);
  return result;
}

void specialized Set.init(_nonEmptyArrayLiteral:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v70 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v62 = v2;
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v77 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  Swift::String v8 = (char *)&v59 - v7;
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v59 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  id v19 = (char *)&v59 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v23 = (char *)&v59 - v22;
  if (*(void *)(v1 + 16)
    && (uint64_t v72 = v21,
        uint64_t v73 = v20,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Participant>),
        uint64_t v24 = static _SetStorage.allocate(capacity:)(),
        uint64_t v25 = v24,
        (uint64_t v61 = *(void *)(v1 + 16)) != 0))
  {
    unint64_t v26 = 0;
    uint64_t v75 = v24 + 56;
    uint64_t v60 = v1 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
    v71 = v8;
    uint64_t v59 = v1;
    while (v26 < *(void *)(v1 + 16))
    {
      uint64_t v27 = *(void *)(v62 + 72);
      unint64_t v63 = v26;
      uint64_t v76 = v27;
      outlined init with copy of ConversationControlsAction(v60 + v27 * v26, (uint64_t)v23, (void (*)(void))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBE8]);
      dispatch thunk of Hashable.hash(into:)();
      Swift::Int v28 = Hasher._finalize()();
      uint64_t v74 = ~(-1 << *(unsigned char *)(v25 + 32));
      uint64_t v29 = v28 & v74;
      OUTLINED_FUNCTION_20_12();
      if ((v32 & v31) != 0)
      {
        while (1)
        {
          outlined init with copy of ConversationControlsAction(*(void *)(v25 + 48) + v29 * v76, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
          static Participant.State.== infix(_:_:)();
          char v34 = v33;
          outlined init with copy of ConversationControlsAction((uint64_t)v19, (uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
          outlined init with copy of ConversationControlsAction((uint64_t)v23, (uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
          if ((v34 & 1) == 0) {
            break;
          }
          char v35 = static UUID.== infix(_:_:)();
          outlined destroy of Participant((uint64_t)v13);
          outlined destroy of Participant((uint64_t)v16);
          uint64_t v36 = v72;
          outlined init with copy of ConversationControlsAction((uint64_t)v19, v72, (void (*)(void))type metadata accessor for Participant);
          uint64_t v37 = v73;
          outlined init with copy of ConversationControlsAction((uint64_t)v23, v73, (void (*)(void))type metadata accessor for Participant);
          if ((v35 & 1) == 0) {
            goto LABEL_16;
          }
          uint64_t v38 = (uint64_t)v23;
          Swift::String v39 = v16;
          uint64_t v40 = v13;
          uint64_t v41 = v25;
          uint64_t v42 = v70;
          int v69 = *(void *)(v36 + *(int *)(v70 + 28)) != 0;
          outlined destroy of Participant(v36);
          uint64_t v43 = *(int *)(v42 + 28);
          uint64_t v25 = v41;
          int64_t v13 = v40;
          uint64_t v16 = v39;
          uint64_t v23 = (char *)v38;
          uint64_t v44 = v37;
          BOOL v45 = *(void *)(v37 + v43) == 0;
          outlined destroy of Participant(v44);
          char v46 = v69 ^ v45;
          outlined init with copy of ConversationControlsAction((uint64_t)v19, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
          outlined init with copy of ConversationControlsAction(v38, v77, (void (*)(void))type metadata accessor for Participant);
          if ((v46 & 1) == 0) {
            goto LABEL_17;
          }
          uint64_t v47 = v70;
          char v48 = (unsigned __int8 *)&v8[*(int *)(v70 + 24)];
          int v49 = *v48;
          int v68 = v48[1];
          int v69 = v49;
          int v50 = v48[2];
          int v66 = v48[3];
          int v67 = v50;
          int v64 = v48[4];
          outlined destroy of Participant((uint64_t)v8);
          v51 = (unsigned __int8 *)(v77 + *(int *)(v47 + 24));
          int v52 = *v51;
          int v53 = v51[1];
          int v54 = v51[2];
          int v65 = v51[3];
          int v55 = v51[4];
          outlined destroy of Participant(v77);
          if (v69 != v52 || ((v68 ^ v53) & 1) != 0 || ((v67 ^ v54) & 1) != 0 || ((v66 ^ v65) & 1) != 0) {
            goto LABEL_18;
          }
          outlined destroy of Participant((uint64_t)v19);
          if (v64 == v55)
          {
            outlined destroy of Participant((uint64_t)v23);
            Swift::String v8 = v71;
            goto LABEL_22;
          }
LABEL_19:
          uint64_t v29 = (v29 + 1) & v74;
          OUTLINED_FUNCTION_20_12();
          Swift::String v8 = v71;
          if ((v31 & v32) == 0) {
            goto LABEL_20;
          }
        }
        outlined destroy of Participant((uint64_t)v13);
        outlined destroy of Participant((uint64_t)v16);
        uint64_t v36 = v72;
        outlined init with copy of ConversationControlsAction((uint64_t)v19, v72, (void (*)(void))type metadata accessor for Participant);
        uint64_t v37 = v73;
        outlined init with copy of ConversationControlsAction((uint64_t)v23, v73, (void (*)(void))type metadata accessor for Participant);
LABEL_16:
        outlined destroy of Participant(v37);
        outlined destroy of Participant(v36);
        outlined init with copy of ConversationControlsAction((uint64_t)v19, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
        outlined init with copy of ConversationControlsAction((uint64_t)v23, v77, (void (*)(void))type metadata accessor for Participant);
LABEL_17:
        outlined destroy of Participant(v77);
        outlined destroy of Participant((uint64_t)v8);
LABEL_18:
        outlined destroy of Participant((uint64_t)v19);
        goto LABEL_19;
      }
LABEL_20:
      *(void *)(v75 + 8 * v30) = v32 | v31;
      outlined init with take of Participant((uint64_t)v23, *(void *)(v25 + 48) + v29 * v76);
      uint64_t v56 = *(void *)(v25 + 16);
      BOOL v57 = __OFADD__(v56, 1);
      uint64_t v58 = v56 + 1;
      if (v57) {
        goto LABEL_25;
      }
      *(void *)(v25 + 16) = v58;
LABEL_22:
      unint64_t v26 = v63 + 1;
      uint64_t v1 = v59;
      if (v63 + 1 == v61) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
LABEL_23:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt32 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_40_0();
  if (!v1
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TUCallDisconnectedReason>),
        uint64_t v5 = OUTLINED_FUNCTION_5_43(),
        (uint64_t v6 = *(void *)(v0 + 16)) == 0))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  OUTLINED_FUNCTION_28_8();
  while (v2 < *(void *)(v0 + 16))
  {
    uint64_t v7 = *(_DWORD *)(v4 + 4 * v2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._finalize()();
    OUTLINED_FUNCTION_13_17();
    if (!v13)
    {
      if (*(_DWORD *)(v9 + 4 * v8) == v7) {
        goto LABEL_12;
      }
      while (1)
      {
        OUTLINED_FUNCTION_16_17();
        if (v13) {
          break;
        }
        if (*(_DWORD *)(v9 + 4 * v8) == v7) {
          goto LABEL_12;
        }
      }
    }
    *(void *)(v3 + 8 * v10) = v12 | v11;
    *(_DWORD *)(v9 + 4 * v8) = v7;
    OUTLINED_FUNCTION_39_7();
    if (v15) {
      goto LABEL_15;
    }
    *(void *)(v5 + 16) = v14;
LABEL_12:
    if (++v2 == v6) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  void (**v33)(char *, uint64_t);
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_40_0();
  if (v1
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>),
        uint64_t v2 = OUTLINED_FUNCTION_5_43(),
        uint64_t v3 = v2,
        (uint64_t v30 = *(void *)(v0 + 16)) != 0))
  {
    uint64_t v36 = v2 + 56;
    uint64_t v4 = type metadata accessor for Calendar.Component();
    uint64_t v5 = 0;
    OUTLINED_FUNCTION_10_0();
    Swift::Int v28 = v0 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v29 = v7;
    char v35 = v7 + 16;
    char v33 = (void (**)(char *, uint64_t))(v7 + 8);
    unint64_t v26 = v0;
    uint64_t v27 = (void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    while (v5 < *(void *)(v0 + 16))
    {
      Swift::String v8 = *(void *)(v29 + 64);
      uint64_t v37 = *(void *)(v29 + 72);
      MEMORY[0x1F4188790](v6);
      char v34 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v9 = (char *)&v25 - v34;
      uint64_t v11 = *(void (**)(void))(v10 + 16);
      OUTLINED_FUNCTION_45_3();
      v11();
      _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x1F418BE78]);
      uint64_t v38 = v9;
      uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v3 + 32));
      OUTLINED_FUNCTION_30_10();
      if ((v16 & v15) != 0)
      {
        uint64_t v31 = &v25;
        uint64_t v32 = v5;
        uint64_t v18 = ~v17;
        while (1)
        {
          MEMORY[0x1F4188790](v13);
          id v19 = (char *)&v25 - v34;
          uint64_t v20 = v3;
          OUTLINED_FUNCTION_45_3();
          v11();
          _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x1F418BE78]);
          uint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v22 = *v33;
          (*v33)(v19, v4);
          if (v21) {
            break;
          }
          uint64_t v12 = (v12 + 1) & v18;
          OUTLINED_FUNCTION_30_10();
          uint64_t v3 = v20;
          if ((v15 & v16) == 0)
          {
            uint64_t v0 = v26;
            uint64_t v5 = v32;
            goto LABEL_10;
          }
        }
        uint64_t v6 = ((uint64_t (*)(char *, uint64_t))v22)(v38, v4);
        uint64_t v0 = v26;
        uint64_t v3 = v20;
        uint64_t v5 = v32;
      }
      else
      {
LABEL_10:
        *(void *)(v36 + 8 * v14) = v16 | v15;
        (*v27)(*(void *)(v3 + 48) + v12 * v37, v38, v4);
        OUTLINED_FUNCTION_46_5();
        if (v24) {
          goto LABEL_16;
        }
        *(void *)(v3 + 16) = v23;
      }
      if (++v5 == v30) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  OUTLINED_FUNCTION_40_0();
  if (!v1
    || (__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>),
        uint64_t v2 = OUTLINED_FUNCTION_5_43(),
        uint64_t v3 = v2,
        (uint64_t v24 = *(void *)(v0 + 16)) == 0))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v2 + 56;
  while (v4 < *(void *)(v0 + 16))
  {
    uint64_t v6 = (uint64_t *)(v0 + 32 + 16 * v4);
    Swift::String v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v11 = v9 & ~v10;
    uint64_t v12 = v11 >> 6;
    int64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      uint64_t v15 = *(void *)(v3 + 48);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      uint64_t v17 = *v16 == v8 && v16[1] == v7;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v18 = ~v10;
      while (1)
      {
        uint64_t v11 = (v11 + 1) & v18;
        uint64_t v12 = v11 >> 6;
        int64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
        uint64_t v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0) {
          break;
        }
        id v19 = (void *)(v15 + 16 * v11);
        uint64_t v20 = *v19 == v8 && v19[1] == v7;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_11;
        }
      }
    }
    *(void *)(v5 + 8 * v12) = v14 | v13;
    uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
    *uint64_t v21 = v8;
    v21[1] = v7;
    OUTLINED_FUNCTION_39_7();
    if (v23) {
      goto LABEL_25;
    }
    *(void *)(v3 + 16) = v22;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_40_0();
  if (!v1
    || (__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<BezelEffect>),
        uint64_t v5 = OUTLINED_FUNCTION_5_43(),
        (uint64_t v6 = *(void *)(v0 + 16)) == 0))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  OUTLINED_FUNCTION_28_8();
  while (v2 < *(void *)(v0 + 16))
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 + v2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._finalize()();
    OUTLINED_FUNCTION_13_17();
    if (!v13)
    {
      if (*(unsigned __int8 *)(v9 + v8) == v7) {
        goto LABEL_12;
      }
      while (1)
      {
        OUTLINED_FUNCTION_16_17();
        if (v13) {
          break;
        }
        if (*(unsigned __int8 *)(v9 + v8) == v7) {
          goto LABEL_12;
        }
      }
    }
    *(void *)(v3 + 8 * v10) = v12 | v11;
    *(unsigned char *)(v9 + v8) = v7;
    OUTLINED_FUNCTION_39_7();
    if (v15) {
      goto LABEL_15;
    }
    *(void *)(v5 + 16) = v14;
LABEL_12:
    if (++v2 == v6) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(void);
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_31();
  uint64_t v5 = v4;
  type metadata accessor for ControlMessageReliability();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_19_20();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_29_13(v8, v9, v10, v11, v12, v13, v14, v15, v26);
  if (v0
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ControlMessageReliability>),
        uint64_t v16 = OUTLINED_FUNCTION_5_43(),
        (uint64_t v27 = *(void *)(v5 + 16)) != 0))
  {
    OUTLINED_FUNCTION_3_51();
    while (v3 < *(void *)(v5 + 16))
    {
      uint64_t v17 = OUTLINED_FUNCTION_6_32();
      ((void (*)(uint64_t))v2)(v17);
      lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(&lazy protocol witness table cache variable for type ControlMessageReliability and conformance ControlMessageReliability, MEMORY[0x1E4F99D40]);
      OUTLINED_FUNCTION_34_5();
      OUTLINED_FUNCTION_9_25();
      if (v20)
      {
LABEL_11:
        uint64_t v22 = OUTLINED_FUNCTION_7_30(v18);
        v23(v22);
        OUTLINED_FUNCTION_46_5();
        if (v25) {
          goto LABEL_17;
        }
        *(void *)(v16 + 16) = v24;
      }
      else
      {
        uint64_t v3 = ~v19;
        while (1)
        {
          OUTLINED_FUNCTION_8_26();
          v2();
          lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(&lazy protocol witness table cache variable for type ControlMessageReliability and conformance ControlMessageReliability, MEMORY[0x1E4F99D40]);
          uint64_t v21 = OUTLINED_FUNCTION_26_11();
          uint64_t v5 = *v1;
          OUTLINED_FUNCTION_15_18();
          ((void (*)(void))v5)();
          if (v21) {
            break;
          }
          OUTLINED_FUNCTION_12_22();
          if (v20)
          {
            OUTLINED_FUNCTION_38_4();
            goto LABEL_11;
          }
        }
        OUTLINED_FUNCTION_15_18();
        ((void (*)(void))v5)();
        OUTLINED_FUNCTION_38_4();
      }
      if (++v3 == v27) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(void);
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_31();
  uint64_t v5 = v4;
  type metadata accessor for PresentationDetent();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_19_20();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_29_13(v8, v9, v10, v11, v12, v13, v14, v15, v26);
  if (v0
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PresentationDetent>),
        uint64_t v16 = OUTLINED_FUNCTION_5_43(),
        (uint64_t v27 = *(void *)(v5 + 16)) != 0))
  {
    OUTLINED_FUNCTION_3_51();
    while (v3 < *(void *)(v5 + 16))
    {
      uint64_t v17 = OUTLINED_FUNCTION_6_32();
      ((void (*)(uint64_t))v2)(v17);
      lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(&lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent, MEMORY[0x1E4F3D480]);
      OUTLINED_FUNCTION_34_5();
      OUTLINED_FUNCTION_9_25();
      if (v20)
      {
LABEL_11:
        uint64_t v22 = OUTLINED_FUNCTION_7_30(v18);
        v23(v22);
        OUTLINED_FUNCTION_46_5();
        if (v25) {
          goto LABEL_17;
        }
        *(void *)(v16 + 16) = v24;
      }
      else
      {
        uint64_t v3 = ~v19;
        while (1)
        {
          OUTLINED_FUNCTION_8_26();
          v2();
          lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(&lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent, MEMORY[0x1E4F3D480]);
          uint64_t v21 = OUTLINED_FUNCTION_26_11();
          uint64_t v5 = *v1;
          OUTLINED_FUNCTION_15_18();
          ((void (*)(void))v5)();
          if (v21) {
            break;
          }
          OUTLINED_FUNCTION_12_22();
          if (v20)
          {
            OUTLINED_FUNCTION_38_4();
            goto LABEL_11;
          }
        }
        OUTLINED_FUNCTION_15_18();
        ((void (*)(void))v5)();
        OUTLINED_FUNCTION_38_4();
      }
      if (++v3 == v27) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28();
  }
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
}

{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  uint64_t v1 = a1;
  uint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    uint64_t v3 = OUTLINED_FUNCTION_5_43();
    goto LABEL_6;
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
LABEL_6:
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_25;
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = v3 + 56;
  uint64_t v21 = v1 & 0xC000000000000001;
  uint64_t v18 = v1 + 32;
  id v19 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v20 = v1;
  while (1)
  {
    if (v21)
    {
      Swift::String v8 = MEMORY[0x1C87744F0](v6, v1);
    }
    else
    {
      if (v6 >= *(void *)(v19 + 16)) {
        goto LABEL_28;
      }
      Swift::String v8 = *(void *)(v18 + 8 * v6);
      swift_retain();
    }
    uint64_t v9 = __OFADD__(v6++, 1);
    if (v9) {
      break;
    }
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v12 = v10 & ~v11;
    int64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v7 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
      while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v12 = (v12 + 1) & v16;
        int64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v7 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0)
        {
          uint64_t v1 = v20;
          goto LABEL_21;
        }
      }
      swift_release();
      uint64_t v1 = v20;
    }
    else
    {
LABEL_21:
      *(void *)(v7 + 8 * v13) = v15 | v14;
      *(void *)(*(void *)(v3 + 48) + 8 * v12) = v8;
      OUTLINED_FUNCTION_39_7();
      if (v9) {
        goto LABEL_27;
      }
      *(void *)(v3 + 16) = v17;
    }
    if (v6 == v5) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<CNComposeRecipient>, MEMORY[0x1E4FBBA48], (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUHandle>, MEMORY[0x1E4FBBA48], (unint64_t *)&lazy cache variable for type metadata for TUHandle);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<TUConversationLink>, MEMORY[0x1E4FBBA48], (unint64_t *)&lazy cache variable for type metadata for TUConversationLink);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<SGURL>, MEMORY[0x1E4FBBA48], &lazy cache variable for type metadata for SGURL);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<TUConversationMember>, MEMORY[0x1E4FBBA48], (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, uint64_t (*a3)(unint64_t, unint64_t), unint64_t *a4)
{
  unint64_t v5 = a1;
  unint64_t v6 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = MEMORY[0x1E4FBC870];
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = static _SetStorage.allocate(capacity:)();
LABEL_6:
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9) {
      goto LABEL_26;
    }
  }
  unint64_t v10 = 0;
  uint64_t v11 = v7 + 56;
  unint64_t v33 = v5 & 0xC000000000000001;
  unint64_t v27 = v5 + 32;
  uint64_t v28 = v5 & 0xFFFFFFFFFFFFFF8;
  uint64_t v29 = v9;
  unint64_t v30 = v5;
  while (1)
  {
    if (v33)
    {
      id v12 = (id)a3(v10, v5);
    }
    else
    {
      if (v10 >= *(void *)(v28 + 16)) {
        goto LABEL_29;
      }
      id v12 = *(id *)(v27 + 8 * v10);
    }
    int64_t v13 = v12;
    BOOL v14 = __OFADD__(v10++, 1);
    if (v14) {
      break;
    }
    Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v17 = v15 & ~v16;
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = *(void *)(v11 + 8 * (v17 >> 6));
    uint64_t v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      type metadata accessor for NSObject(0, a4);
      id v21 = *(id *)(*(void *)(v7 + 48) + 8 * v17);
      char v22 = static NSObject.== infix(_:_:)();

      if (v22)
      {
LABEL_21:

        uint64_t v9 = v29;
        unint64_t v5 = v30;
        goto LABEL_25;
      }
      uint64_t v23 = ~v16;
      while (1)
      {
        unint64_t v17 = (v17 + 1) & v23;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = *(void *)(v11 + 8 * (v17 >> 6));
        uint64_t v20 = 1 << v17;
        if ((v19 & (1 << v17)) == 0) {
          break;
        }
        id v24 = *(id *)(*(void *)(v7 + 48) + 8 * v17);
        char v25 = static NSObject.== infix(_:_:)();

        if (v25) {
          goto LABEL_21;
        }
      }
      uint64_t v9 = v29;
      unint64_t v5 = v30;
    }
    *(void *)(v11 + 8 * v18) = v20 | v19;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v13;
    OUTLINED_FUNCTION_46_5();
    if (v14) {
      goto LABEL_28;
    }
    *(void *)(v7 + 16) = v26;
LABEL_25:
    if (v10 == v9) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

void specialized _NativeSet._unsafeInsertNew(_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  OUTLINED_FUNCTION_27_11(v8);
  _HashTable.nextHole(atOrAfter:)();
  OUTLINED_FUNCTION_33_12();
  *(void *)(a4 + 56 + v9) |= v10;
  uint64_t v12 = *(void *)(a4 + 48) + 24 * v11;
  *(unsigned char *)uint64_t v12 = a1;
  *(void *)(v12 + 8) = a2;
  *(void *)(v12 + 16) = a3;
  ++*(void *)(a4 + 16);
}

uint64_t partial apply for closure #3 in ConversationLink.prevailingSuggestion.getter()
{
  return closure #3 in ConversationLink.prevailingSuggestion.getter() & 1;
}

void specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(a2[5]);
  OUTLINED_FUNCTION_27_11(v4);
  _HashTable.nextHole(atOrAfter:)();
  OUTLINED_FUNCTION_33_12();
  *(void *)((char *)a2 + v5 + 56) |= v6;
  *(void *)(a2[6] + 8 * v7) = a1;
  ++a2[2];
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeSet.filter(_:)(v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    Swift::Int v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  void v11[2];

  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeSet.filter(_:)(v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    Swift::Int v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  void v11[2];

  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeSet.filter(_:)(v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    Swift::Int v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  void v11[2];

  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeSet.filter(_:)(v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    Swift::Int v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  void v11[2];

  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeSet.filter(_:)(v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    Swift::Int v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  void v11[2];

  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v11 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeSet.filter(_:)(v5, v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    Swift::Int v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  return v7;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    id v16 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    BOOL valid = SGURL.isValidConversationLink.getter();

    if (valid)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(a1, a2, v4, a3);
        return;
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  int64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  int64_t v10 = v9 & *(void *)(a3 + 56);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    unint64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    int64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      uint64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      int64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        uint64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        int64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    int64_t v10 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    if (objc_msgSend(*(id *)(*(void *)(a3 + 48) + 8 * v13), sel_audioVideoMode))
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(a1, a2, v5, a3);
        return;
      }
    }
  }
  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  int64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    int64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  int64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  int64_t v10 = v9 & *(void *)(a3 + 56);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    unint64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    int64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      uint64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      int64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        uint64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        int64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    int64_t v10 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    if (objc_msgSend(*(id *)(*(void *)(a3 + 48) + 8 * v13), sel_type) == (id)4)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(a1, a2, v5, a3);
        return;
      }
    }
  }
  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  int64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    int64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

{
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v20;
  void *v21;

  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_17:
    id v21 = *(void **)(*(void *)(a3 + 48) + 8 * v12);
    id v16 = v21;
    unint64_t v17 = closure #1 in Conversation.unknownHandles.getter(&v21);

    if (v3) {
      return;
    }
    if (v17)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = __OFADD__(v20++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  int64_t v13 = __OFADD__(v5++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v5 >= v10) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_16:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v5 + 1;
  if (v5 + 1 >= v10) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v5 + 2;
  if (v5 + 2 >= v10) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v5 + 3;
  if (v5 + 3 >= v10)
  {
LABEL_26:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v20, a3);
    return;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v5 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  id v16;
  id v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;

  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(a3 + 56);
  unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (2)
  {
    id v21 = v4;
    if (v8)
    {
LABEL_5:
      int64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v5 << 6);
      goto LABEL_20;
    }
    while (1)
    {
      unint64_t v12 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        return;
      }
      if (v12 >= v9) {
        goto LABEL_26;
      }
      int64_t v13 = *(void *)(v22 + 8 * v12);
      ++v5;
      if (!v13)
      {
        int64_t v5 = v12 + 1;
        if (v12 + 1 >= v9) {
          goto LABEL_26;
        }
        int64_t v13 = *(void *)(v22 + 8 * v5);
        if (!v13)
        {
          int64_t v5 = v12 + 2;
          if (v12 + 2 >= v9) {
            goto LABEL_26;
          }
          int64_t v13 = *(void *)(v22 + 8 * v5);
          if (!v13)
          {
            unint64_t v14 = v12 + 3;
            if (v14 >= v9) {
              goto LABEL_26;
            }
            int64_t v13 = *(void *)(v22 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v5 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_28;
                }
                if (v5 >= v9) {
                  goto LABEL_26;
                }
                int64_t v13 = *(void *)(v22 + 8 * v5);
                ++v14;
                if (v13) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v5 = v14;
          }
        }
      }
LABEL_19:
      uint64_t v8 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v5 << 6);
LABEL_20:
      int64_t v15 = *(void **)(*(void *)(a3 + 48) + 8 * v11);
      type metadata accessor for ReportSpamManager();
      id v16 = v15;
      unint64_t v17 = CHHandle.tuHandle.getter();
      unint64_t v18 = static ReportSpamManager.getContact(forHandle:)(v17);

      if (!v18) {
        break;
      }
      swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_5;
      }
    }
    *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v4 = v21 + 1;
    if (!__OFADD__(v21, 1)) {
      continue;
    }
    break;
  }
  __break(1u);
LABEL_26:
  swift_retain();
  specialized _NativeSet.extractSubset(using:count:)(a1, a2, v21, a3);
}

{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  int64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  int64_t v10 = v9 & *(void *)(a3 + 56);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    unint64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    int64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      uint64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      int64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        uint64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        int64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    int64_t v10 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    if ((objc_msgSend(*(id *)(*(void *)(a3 + 48) + 8 * v13), sel_isOtherInvitedHandle) & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(a1, a2, v5, a3);
        return;
      }
    }
  }
  id v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  int64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    int64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_129;
    }
    if (v4) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return;
  }
  Swift::Int v6 = v5;
  uint64_t v7 = specialized static Array._allocateUninitialized(_:)(v4 / 2);
  v124 = v8;
  uint64_t v132 = v7;
  v116 = a1;
  if (v4 <= 0) {
    goto LABEL_93;
  }
  Swift::Int v118 = v6;
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v115 = *a1 - 8;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v129 = v10;
  uint64_t v120 = v4;
  while (1)
  {
    uint64_t v12 = v9;
    Swift::Int v13 = v9 + 1;
    uint64_t v122 = v9;
    if (v9 + 1 < v4)
    {
      v119 = v11;
      unint64_t v14 = *(void **)(v10 + 8 * v13);
      v130 = *(uint64_t **)(v10 + 8 * v9);
      uint64_t v15 = type metadata accessor for Date();
      v131 = &v114;
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(void *)(v16 + 64);
      MEMORY[0x1F4188790](v15);
      v128 = v14;
      unint64_t v18 = v130;
      uint64_t v19 = SGURL.recentsDate.getter();
      v130 = &v114;
      uint64_t v123 = v17;
      MEMORY[0x1F4188790](v19);
      uint64_t v20 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      SGURL.recentsDate.getter();
      uint64_t v127 = Date.compare(_:)();
      id v21 = *(char **)(v16 + 8);
      ((void (*)(char *, uint64_t))v21)(v20, v15);
      v125 = (void (**)(char *, uint64_t))(v16 + 8);
      uint64_t v126 = v15;
      v121 = v21;
      ((void (*)(char *, uint64_t))v21)(v20, v15);

      Swift::Int v4 = v120;
      Swift::Int v13 = v12 + 2;
      if (v12 + 2 < v120)
      {
        uint64_t v117 = v2;
        uint64_t v23 = v12;
        while (1)
        {
          v131 = &v114;
          LODWORD(v130) = v127 == -1;
          id v24 = *(void **)(v129 + 8 * v23 + 8);
          uint64_t v25 = v123;
          MEMORY[0x1F4188790](v22);
          id v27 = v26;
          id v28 = v24;
          uint64_t v29 = SGURL.recentsDate.getter();
          v128 = &v114;
          MEMORY[0x1F4188790](v29);
          SGURL.recentsDate.getter();
          uint64_t v30 = Date.compare(_:)();
          uint64_t v31 = v126;
          uint64_t v32 = v121;
          ((void (*)(char *, uint64_t))v121)((char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v126);
          ((void (*)(char *, uint64_t))v32)((char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v31);

          if (v130 == (v30 != -1)) {
            break;
          }
          Swift::Int v33 = v23 + 3;
          ++v23;
          if (v33 >= v4)
          {
            Swift::Int v13 = v4;
            goto LABEL_11;
          }
        }
        Swift::Int v13 = v23 + 2;
LABEL_11:
        uint64_t v2 = v117;
        uint64_t v12 = v122;
      }
      unint64_t v11 = v119;
      if (v127 == -1)
      {
        uint64_t v34 = v129;
        if (v13 < v12) {
          goto LABEL_132;
        }
        if (v12 < v13)
        {
          char v35 = (uint64_t *)(v115 + 8 * v13);
          Swift::Int v36 = v13;
          uint64_t v37 = v12;
          uint64_t v38 = (uint64_t *)(v129 + 8 * v12);
          do
          {
            if (v37 != --v36)
            {
              if (!v34) {
                goto LABEL_136;
              }
              uint64_t v39 = *v38;
              *uint64_t v38 = *v35;
              *char v35 = v39;
            }
            ++v37;
            --v35;
            ++v38;
          }
          while (v37 < v36);
        }
      }
    }
    if (v13 < v4)
    {
      if (__OFSUB__(v13, v12)) {
        goto LABEL_128;
      }
      if (v13 - v12 < v118)
      {
        if (__OFADD__(v12, v118)) {
          goto LABEL_130;
        }
        if (v12 + v118 >= v4) {
          uint64_t v40 = (char *)v4;
        }
        else {
          uint64_t v40 = (char *)(v12 + v118);
        }
        if ((uint64_t)v40 < v12)
        {
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if ((char *)v13 != v40)
        {
          v119 = v11;
          uint64_t v117 = v2;
          uint64_t v41 = type metadata accessor for Date();
          uint64_t v127 = v41;
          uint64_t v42 = *(void *)(v41 - 8);
          uint64_t v126 = *(void *)(v42 + 64);
          v125 = (void (**)(char *, uint64_t))(v42 + 8);
          uint64_t v43 = v115 + 8 * v13;
          v121 = v40;
          do
          {
            uint64_t v44 = v12;
            uint64_t v123 = v43;
            v128 = (uint64_t *)v13;
            while (1)
            {
              v131 = &v114;
              BOOL v45 = *(void **)v43;
              uint64_t v46 = v126;
              MEMORY[0x1F4188790](v41);
              uint64_t v47 = (char *)&v114 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
              id v49 = v48;
              id v50 = v45;
              uint64_t v51 = SGURL.recentsDate.getter();
              v130 = &v114;
              MEMORY[0x1F4188790](v51);
              SGURL.recentsDate.getter();
              uint64_t v52 = Date.compare(_:)();
              int v53 = *v125;
              uint64_t v54 = v127;
              (*v125)(v47, v127);
              v53(v47, v54);

              if (v52 != -1) {
                break;
              }
              int v55 = (char *)v128;
              if (!v129) {
                goto LABEL_134;
              }
              uint64_t v56 = *(void **)v43;
              *(void *)uint64_t v43 = *(void *)(v43 + 8);
              *(void *)(v43 + 8) = v56;
              v43 -= 8;
              if (v55 == (char *)++v44) {
                goto LABEL_36;
              }
            }
            int v55 = (char *)v128;
LABEL_36:
            Swift::Int v13 = (Swift::Int)(v55 + 1);
            uint64_t v12 = v122;
            uint64_t v43 = v123 + 8;
          }
          while ((char *)v13 != v121);
          Swift::Int v13 = (Swift::Int)v121;
          uint64_t v2 = v117;
          unint64_t v11 = v119;
        }
      }
    }
    if (v13 < v12) {
      goto LABEL_127;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v58 = *((void *)v11 + 2);
    unint64_t v57 = *((void *)v11 + 3);
    unint64_t v59 = v58 + 1;
    uint64_t v10 = v129;
    if (v58 >= v57 >> 1)
    {
      v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v11);
      uint64_t v10 = v129;
      unint64_t v11 = v107;
    }
    *((void *)v11 + 2) = v59;
    uint64_t v60 = v11 + 32;
    uint64_t v61 = &v11[16 * v58 + 32];
    *(void *)uint64_t v61 = v12;
    *((void *)v61 + 1) = v13;
    v128 = (uint64_t *)v13;
    if (v58) {
      break;
    }
    unint64_t v59 = 1;
LABEL_86:
    Swift::Int v4 = v120;
    uint64_t v9 = (uint64_t)v128;
    if ((uint64_t)v128 >= v120) {
      goto LABEL_94;
    }
  }
  while (1)
  {
    unint64_t v62 = v59 - 1;
    if (v59 >= 4)
    {
      int v67 = &v60[16 * v59];
      uint64_t v68 = *((void *)v67 - 8);
      uint64_t v69 = *((void *)v67 - 7);
      BOOL v73 = __OFSUB__(v69, v68);
      uint64_t v70 = v69 - v68;
      if (v73) {
        goto LABEL_112;
      }
      uint64_t v72 = *((void *)v67 - 6);
      uint64_t v71 = *((void *)v67 - 5);
      BOOL v73 = __OFSUB__(v71, v72);
      uint64_t v65 = v71 - v72;
      char v66 = v73;
      if (v73) {
        goto LABEL_113;
      }
      unint64_t v74 = v59 - 2;
      uint64_t v75 = &v60[16 * v59 - 32];
      uint64_t v77 = *(void *)v75;
      uint64_t v76 = *((void *)v75 + 1);
      BOOL v73 = __OFSUB__(v76, v77);
      uint64_t v78 = v76 - v77;
      if (v73) {
        goto LABEL_114;
      }
      BOOL v73 = __OFADD__(v65, v78);
      uint64_t v79 = v65 + v78;
      if (v73) {
        goto LABEL_116;
      }
      if (v79 >= v70)
      {
        v97 = &v60[16 * v62];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v73 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v73) {
          goto LABEL_122;
        }
        BOOL v90 = v65 < v100;
        goto LABEL_75;
      }
    }
    else
    {
      if (v59 != 3)
      {
        uint64_t v91 = *((void *)v11 + 4);
        uint64_t v92 = *((void *)v11 + 5);
        BOOL v73 = __OFSUB__(v92, v91);
        uint64_t v84 = v92 - v91;
        char v85 = v73;
        goto LABEL_69;
      }
      uint64_t v64 = *((void *)v11 + 4);
      uint64_t v63 = *((void *)v11 + 5);
      BOOL v73 = __OFSUB__(v63, v64);
      uint64_t v65 = v63 - v64;
      char v66 = v73;
    }
    if (v66) {
      goto LABEL_115;
    }
    unint64_t v74 = v59 - 2;
    v80 = &v60[16 * v59 - 32];
    uint64_t v82 = *(void *)v80;
    uint64_t v81 = *((void *)v80 + 1);
    BOOL v83 = __OFSUB__(v81, v82);
    uint64_t v84 = v81 - v82;
    char v85 = v83;
    if (v83) {
      goto LABEL_117;
    }
    v86 = &v60[16 * v62];
    uint64_t v88 = *(void *)v86;
    uint64_t v87 = *((void *)v86 + 1);
    BOOL v73 = __OFSUB__(v87, v88);
    uint64_t v89 = v87 - v88;
    if (v73) {
      goto LABEL_119;
    }
    if (__OFADD__(v84, v89)) {
      goto LABEL_121;
    }
    if (v84 + v89 >= v65)
    {
      BOOL v90 = v65 < v89;
LABEL_75:
      if (v90) {
        unint64_t v62 = v74;
      }
      goto LABEL_77;
    }
LABEL_69:
    if (v85) {
      goto LABEL_118;
    }
    v93 = &v60[16 * v62];
    uint64_t v95 = *(void *)v93;
    uint64_t v94 = *((void *)v93 + 1);
    BOOL v73 = __OFSUB__(v94, v95);
    uint64_t v96 = v94 - v95;
    if (v73) {
      goto LABEL_120;
    }
    if (v96 < v84) {
      goto LABEL_86;
    }
LABEL_77:
    unint64_t v101 = v62 - 1;
    if (v62 - 1 >= v59)
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (!v10) {
      goto LABEL_135;
    }
    Swift::Int v4 = (Swift::Int)v11;
    v102 = &v60[16 * v101];
    uint64_t v103 = *(void *)v102;
    v104 = &v60[16 * v62];
    uint64_t v105 = *((void *)v104 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v10 + 8 * *(void *)v102), (void **)(v10 + 8 * *(void *)v104), (char *)(v10 + 8 * v105), v124);
    if (v2) {
      break;
    }
    if (v105 < v103) {
      goto LABEL_109;
    }
    if (v62 > *(void *)(v4 + 16)) {
      goto LABEL_110;
    }
    *(void *)v102 = v103;
    *(void *)&v60[16 * v101 + 8] = v105;
    unint64_t v106 = *(void *)(v4 + 16);
    if (v62 >= v106) {
      goto LABEL_111;
    }
    unint64_t v11 = (char *)v4;
    unint64_t v59 = v106 - 1;
    memmove(&v60[16 * v62], v104 + 16, 16 * (v106 - 1 - v62));
    *(void *)(v4 + 16) = v106 - 1;
    uint64_t v10 = v129;
    if (v106 <= 2) {
      goto LABEL_86;
    }
  }
LABEL_91:
  swift_bridgeObjectRelease();
  if (v120 >= -1) {
    goto LABEL_106;
  }
  __break(1u);
LABEL_93:
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v59 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_94:
  if (v59 >= 2)
  {
    uint64_t v108 = *v116;
    uint64_t v120 = v4;
    while (1)
    {
      unint64_t v109 = v59 - 2;
      if (v59 < 2) {
        break;
      }
      if (!v108) {
        goto LABEL_137;
      }
      uint64_t v110 = *(void *)&v11[16 * v109 + 32];
      uint64_t v111 = *(void *)&v11[16 * v59 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v108 + 8 * v110), (void **)(v108 + 8 * *(void *)&v11[16 * v59 + 16]), (char *)(v108 + 8 * v111), v124);
      if (v2) {
        goto LABEL_91;
      }
      if (v111 < v110) {
        goto LABEL_124;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
      }
      if (v109 >= *((void *)v11 + 2)) {
        goto LABEL_125;
      }
      v112 = &v11[16 * v109 + 32];
      *(void *)v112 = v110;
      *((void *)v112 + 1) = v111;
      unint64_t v113 = *((void *)v11 + 2);
      if (v59 > v113) {
        goto LABEL_126;
      }
      memmove(&v11[16 * v59 + 16], &v11[16 * v59 + 32], 16 * (v113 - v59));
      *((void *)v11 + 2) = v113 - 1;
      unint64_t v59 = v113 - 1;
      if (v113 <= 2) {
        goto LABEL_105;
      }
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  if (v4 >= -1)
  {
LABEL_106:
    *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  Swift::Int v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int EnumCaseMultiPayload;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const void *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const void *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const void *v162;
  uint64_t v163;
  char v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const void *v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  char v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  Swift::Int v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  id v275;
  void *v276;
  uint64_t v277;
  char *v278;
  unsigned char *v279;
  uint64_t v280;
  id v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void v289[27];
  unsigned char v290[336];
  void v291[28];
  uint64_t v292;

  v288 = type metadata accessor for Participant.State(0);
  uint64_t v2 = MEMORY[0x1F4188790](v288);
  Swift::Int v4 = (char *)&v240 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v5 = MEMORY[0x1F4188790](v2);
  v272 = (char *)&v240 - v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  v268 = (uint64_t)&v240 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v240 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  v253 = (uint64_t)&v240 - v13;
  unint64_t v14 = MEMORY[0x1F4188790](v12);
  v258 = (char *)&v240 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v259 = (uint64_t)&v240 - v17;
  unint64_t v18 = MEMORY[0x1F4188790](v16);
  v257 = (uint64_t)&v240 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v246 = (uint64_t)&v240 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v248 = (char *)&v240 - v23;
  id v24 = MEMORY[0x1F4188790](v22);
  v245 = (uint64_t)&v240 - v25;
  MEMORY[0x1F4188790](v24);
  v249 = (uint64_t)&v240 - v26;
  v269 = type metadata accessor for Participant(0);
  v263 = *(void *)(v269 - 8);
  id v27 = MEMORY[0x1F4188790](v269);
  v255 = (uint64_t)&v240 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v280 = (uint64_t)&v240 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  Swift::Int v33 = (char *)&v240 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  Swift::Int v36 = (char *)&v240 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  v292 = (uint64_t)&v240 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  v287 = (uint64_t)&v240 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  v260 = (char *)&v240 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  v256 = (uint64_t)&v240 - v44;
  BOOL v45 = MEMORY[0x1F4188790](v43);
  v265 = (uint64_t)&v240 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  v264 = (uint64_t)&v240 - v48;
  id v49 = MEMORY[0x1F4188790](v47);
  uint64_t v51 = (char *)&v240 - v50;
  uint64_t v52 = MEMORY[0x1F4188790](v49);
  v250 = (uint64_t)&v240 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  v252 = (uint64_t)&v240 - v55;
  MEMORY[0x1F4188790](v54);
  v251 = (uint64_t)&v240 - v56;
  v284 = a1;
  unint64_t v57 = a1[1];
  unint64_t v58 = _minimumMergeRunLength(_:)(v57);
  if (v58 >= v57)
  {
    if (v57 < 0) {
      goto LABEL_212;
    }
    if (v57) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v57, 1, v284);
    }
    return;
  }
  unint64_t v59 = v58;
  v242 = specialized static Array._allocateUninitialized(_:)(v57 / 2);
  v243 = v57;
  v262 = v60;
  if (v57 <= 0) {
    goto LABEL_176;
  }
  v241 = v59;
  v247 = v51;
  uint64_t v61 = 0;
  v276 = &v291[4];
  v279 = &v290[96];
  v270 = &v289[4];
  v271 = v11;
  unint64_t v62 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v63 = v57;
  v267 = v4;
  v285 = v33;
  v278 = v36;
  while (2)
  {
    uint64_t v64 = v61 + 1;
    v261 = v61;
    if (v61 + 1 >= v63) {
      goto LABEL_77;
    }
    v282 = v63;
    uint64_t v65 = *v284;
    char v66 = *(void *)(v263 + 72);
    v277 = v61 + 1;
    int v67 = v251;
    _s15ConversationKit11ParticipantVWOcTm_11(v65 + v66 * v64, v251, (void (*)(void))type metadata accessor for Participant);
    v254 = v65;
    v286 = v66;
    _s15ConversationKit11ParticipantVWOcTm_11(v65 + v66 * v261, v252, (void (*)(void))type metadata accessor for Participant);
    uint64_t v68 = v249;
    _s15ConversationKit11ParticipantVWOcTm_11(v67, v249, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v70 = (const void *)(v68 + *(int *)(v69 + 48));
      outlined consume of Participant.CopresenceInfo?(*(void *)(v68 + *(int *)(v69 + 64)), *(void *)(v68 + *(int *)(v69 + 64) + 8));
      memcpy(v290, v70, sizeof(v290));
      uint64_t v71 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v68, v71);
      outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v291);
      outlined destroy of Participant.MediaInfo((uint64_t)v290);
      if (v291[3] != 1)
      {
        memcpy(v290, v291, 0xD1uLL);
        uint64_t v72 = v290[40];
        outlined destroy of Participant.ScreenInfo((uint64_t)v290);
        Swift::Int v33 = v285;
        Swift::Int v36 = v278;
        goto LABEL_10;
      }
    }
    else
    {
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v68, (void (*)(void))type metadata accessor for Participant.State);
      memset(v291, 0, 24);
      v291[3] = 1;
      bzero(v276, 0xB1uLL);
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v291, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    uint64_t v72 = 2;
LABEL_10:
    BOOL v73 = v250;
    _s15ConversationKit11ParticipantVWOcTm_11(v251, v250, (void (*)(void))type metadata accessor for Participant);
    if (v72 == 2)
    {
      LODWORD(v283) = 0;
      unint64_t v74 = (uint64_t)v248;
      goto LABEL_17;
    }
    uint64_t v75 = v245;
    _s15ConversationKit11ParticipantVWOcTm_11(v73, v245, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v77 = v75;
      uint64_t v78 = (const void *)(v75 + *(int *)(v76 + 48));
      outlined consume of Participant.CopresenceInfo?(*(void *)(v77 + *(int *)(v76 + 64)), *(void *)(v77 + *(int *)(v76 + 64) + 8));
      memcpy(v290, v78, sizeof(v290));
      uint64_t v79 = type metadata accessor for Date();
      v80 = v77;
      BOOL v73 = v250;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v80, v79);
      outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v289);
      outlined destroy of Participant.MediaInfo((uint64_t)v290);
      unint64_t v74 = (uint64_t)v248;
      if (v289[3] != 1)
      {
        memcpy(v291, v289, 0xD1uLL);
        LODWORD(v283) = LOBYTE(v291[5]);
        outlined destroy of Participant.ScreenInfo((uint64_t)v291);
        goto LABEL_17;
      }
    }
    else
    {
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v75, (void (*)(void))type metadata accessor for Participant.State);
      memset(v289, 0, 24);
      v289[3] = 1;
      bzero(v270, 0xB1uLL);
      unint64_t v74 = (uint64_t)v248;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    LODWORD(v283) = 0;
LABEL_17:
    _s15ConversationKit11ParticipantV5StateOWOhTm_0(v73, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOcTm_11(v252, v74, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v82 = v74;
      BOOL v83 = (const void *)(v74 + *(int *)(v81 + 48));
      outlined consume of Participant.CopresenceInfo?(*(void *)(v82 + *(int *)(v81 + 64)), *(void *)(v82 + *(int *)(v81 + 64) + 8));
      memcpy(v290, v83, sizeof(v290));
      uint64_t v84 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v82, v84);
      outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v291);
      outlined destroy of Participant.MediaInfo((uint64_t)v290);
      if (v291[3] != 1)
      {
        memcpy(v290, v291, 0xD1uLL);
        char v85 = v290[40];
        outlined destroy of Participant.ScreenInfo((uint64_t)v290);
        Swift::Int v33 = v285;
        Swift::Int v36 = v278;
        goto LABEL_22;
      }
    }
    else
    {
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v74, (void (*)(void))type metadata accessor for Participant.State);
      memset(v291, 0, 24);
      v291[3] = 1;
      bzero(v276, 0xB1uLL);
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v291, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    char v85 = 2;
LABEL_22:
    v86 = (uint64_t)v247;
    _s15ConversationKit11ParticipantVWOcTm_11(v252, (uint64_t)v247, (void (*)(void))type metadata accessor for Participant);
    if (v85 == 2)
    {
LABEL_28:
      uint64_t v92 = 0;
      goto LABEL_29;
    }
    uint64_t v87 = v86;
    uint64_t v88 = v246;
    _s15ConversationKit11ParticipantVWOcTm_11(v87, v246, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() != 4)
    {
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v88, (void (*)(void))type metadata accessor for Participant.State);
      memset(v289, 0, 24);
      v289[3] = 1;
      bzero(v270, 0xB1uLL);
      goto LABEL_27;
    }
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
    BOOL v90 = (const void *)(v88 + *(int *)(v89 + 48));
    outlined consume of Participant.CopresenceInfo?(*(void *)(v88 + *(int *)(v89 + 64)), *(void *)(v88 + *(int *)(v89 + 64) + 8));
    memcpy(v290, v90, sizeof(v290));
    uint64_t v91 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v88, v91);
    outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v289);
    outlined destroy of Participant.MediaInfo((uint64_t)v290);
    if (v289[3] == 1)
    {
LABEL_27:
      outlined destroy of SystemUpdateNotice?((uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      goto LABEL_28;
    }
    memcpy(v291, v289, 0xD1uLL);
    uint64_t v92 = LOBYTE(v291[5]);
    outlined destroy of Participant.ScreenInfo((uint64_t)v291);
LABEL_29:
    _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v247, (void (*)(void))type metadata accessor for Participant);
    v93 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v92);
    v281 = objc_msgSend(v93, sel_integerValue);

    uint64_t v94 = objc_allocWithZone(MEMORY[0x1E4F28EC8]);
    uint64_t v95 = objc_msgSend(v94, sel_initWithBool_, v283);
    v275 = objc_msgSend(v95, sel_integerValue);

    _s15ConversationKit11ParticipantV5StateOWOhTm_0(v252, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantV5StateOWOhTm_0(v251, (void (*)(void))type metadata accessor for Participant);
    uint64_t v61 = v261;
    uint64_t v64 = v261 + 2;
    uint64_t v63 = v282;
    if (v261 + 2 >= v282) {
      goto LABEL_60;
    }
    v244 = v62;
    uint64_t v96 = v254;
    v273 = v286 * v64;
    v274 = v286 * v277;
    v97 = v266;
    while (1)
    {
      v277 = v64;
      uint64_t v98 = v264;
      _s15ConversationKit11ParticipantVWOcTm_11(v96 + v273, v264, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11(v96 + v274, v265, (void (*)(void))type metadata accessor for Participant);
      uint64_t v99 = v98;
      uint64_t v100 = v257;
      _s15ConversationKit11ParticipantVWOcTm_11(v99, v257, (void (*)(void))type metadata accessor for Participant.State);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v102 = (uint64_t)v258;
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        v104 = (const void *)(v100 + *(int *)(v103 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v100 + *(int *)(v103 + 64)), *(void *)(v100 + *(int *)(v103 + 64) + 8));
        memcpy(v290, v104, sizeof(v290));
        uint64_t v105 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v100, v105);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v291);
        outlined destroy of Participant.MediaInfo((uint64_t)v290);
        unint64_t v106 = (uint64_t)v260;
        if (v291[3] != 1)
        {
          memcpy(v290, v291, 0xD1uLL);
          v107 = v290[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v290);
          unint64_t v106 = (uint64_t)v260;
          goto LABEL_36;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v100, (void (*)(void))type metadata accessor for Participant.State);
        memset(v291, 0, 24);
        v291[3] = 1;
        bzero(v276, 0xB1uLL);
        unint64_t v106 = (uint64_t)v260;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v291, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      v107 = 2;
LABEL_36:
      uint64_t v108 = v256;
      _s15ConversationKit11ParticipantVWOcTm_11(v264, v256, (void (*)(void))type metadata accessor for Participant);
      if (v107 != 2)
      {
        unint64_t v109 = v259;
        _s15ConversationKit11ParticipantVWOcTm_11(v108, v259, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v111 = (const void *)(v259 + *(int *)(v110 + 48));
          outlined consume of Participant.CopresenceInfo?(*(void *)(v259 + *(int *)(v110 + 64)), *(void *)(v259 + *(int *)(v110 + 64) + 8));
          memcpy(v290, v111, sizeof(v290));
          v112 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v259, v112);
          outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v289);
          outlined destroy of Participant.MediaInfo((uint64_t)v290);
          if (v289[3] != 1)
          {
            memcpy(v291, v289, 0xD1uLL);
            LODWORD(v283) = LOBYTE(v291[5]);
            outlined destroy of Participant.ScreenInfo((uint64_t)v291);
            goto LABEL_43;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v109, (void (*)(void))type metadata accessor for Participant.State);
          memset(v289, 0, 24);
          v289[3] = 1;
          bzero(v270, 0xB1uLL);
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      }
      LODWORD(v283) = 0;
LABEL_43:
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v108, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_11(v265, v102, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        unint64_t v113 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v114 = (const void *)(v102 + *(int *)(v113 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v102 + *(int *)(v113 + 64)), *(void *)(v102 + *(int *)(v113 + 64) + 8));
        memcpy(v290, v114, sizeof(v290));
        uint64_t v115 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(v102, v115);
        outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v291);
        outlined destroy of Participant.MediaInfo((uint64_t)v290);
        if (v291[3] != 1)
        {
          memcpy(v290, v291, 0xD1uLL);
          v116 = v290[40];
          outlined destroy of Participant.ScreenInfo((uint64_t)v290);
          unint64_t v106 = (uint64_t)v260;
          goto LABEL_48;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v102, (void (*)(void))type metadata accessor for Participant.State);
        memset(v291, 0, 24);
        v291[3] = 1;
        bzero(v276, 0xB1uLL);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v291, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      v116 = 2;
LABEL_48:
      _s15ConversationKit11ParticipantVWOcTm_11(v265, v106, (void (*)(void))type metadata accessor for Participant);
      v266 = v97;
      if (v116 == 2)
      {
        uint64_t v117 = v96;
      }
      else
      {
        Swift::Int v118 = v253;
        _s15ConversationKit11ParticipantVWOcTm_11(v106, v253, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          v119 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v120 = (const void *)(v118 + *(int *)(v119 + 48));
          outlined consume of Participant.CopresenceInfo?(*(void *)(v118 + *(int *)(v119 + 64)), *(void *)(v118 + *(int *)(v119 + 64) + 8));
          memcpy(v290, v120, sizeof(v290));
          v121 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v121 - 8) + 8))(v118, v121);
          outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v289);
          outlined destroy of Participant.MediaInfo((uint64_t)v290);
          if (v289[3] != 1)
          {
            uint64_t v117 = v96;
            memcpy(v291, v289, 0xD1uLL);
            uint64_t v122 = LOBYTE(v291[5]);
            outlined destroy of Participant.ScreenInfo((uint64_t)v291);
            goto LABEL_56;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v118, (void (*)(void))type metadata accessor for Participant.State);
          memset(v289, 0, 24);
          v289[3] = 1;
          bzero(v270, 0xB1uLL);
        }
        uint64_t v117 = v96;
        outlined destroy of SystemUpdateNotice?((uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      }
      uint64_t v122 = 0;
LABEL_56:
      uint64_t v123 = (uint64_t)v281 < (uint64_t)v275;
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v106, (void (*)(void))type metadata accessor for Participant);
      v124 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v122);
      v125 = objc_msgSend(v124, sel_integerValue);

      uint64_t v126 = objc_allocWithZone(MEMORY[0x1E4F28EC8]);
      uint64_t v127 = objc_msgSend(v126, sel_initWithBool_, v283);
      v128 = objc_msgSend(v127, sel_integerValue);

      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v265, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v264, (void (*)(void))type metadata accessor for Participant);
      if (v123 == (uint64_t)v125 >= (uint64_t)v128) {
        break;
      }
      Swift::Int v36 = v278;
      uint64_t v64 = v277 + 1;
      Swift::Int v33 = v285;
      uint64_t v96 = v117 + v286;
      v97 = v266;
      if (v277 + 1 >= v282)
      {
        uint64_t v63 = v282;
        uint64_t v64 = v282;
        unint64_t v62 = v244;
        uint64_t v61 = v261;
        goto LABEL_60;
      }
    }
    Swift::Int v33 = v285;
    uint64_t v64 = v277;
    Swift::Int v36 = v278;
    unint64_t v62 = v244;
    uint64_t v61 = v261;
    uint64_t v63 = v282;
LABEL_60:
    if ((uint64_t)v281 < (uint64_t)v275)
    {
      if (v64 < v61) {
        goto LABEL_213;
      }
      if (v61 < v64)
      {
        v244 = v62;
        uint64_t v129 = 0;
        v130 = v286 * (v64 - 1);
        v131 = v64 * v286;
        uint64_t v132 = v61;
        v133 = v61 * v286;
        do
        {
          if (v132 != v64 + v129 - 1)
          {
            v134 = v64;
            v135 = v254;
            if (!v254) {
              goto LABEL_219;
            }
            v136 = v254 + v133;
            v283 = v254 + v130;
            _s15ConversationKit11ParticipantVWObTm_4(v254 + v133, v255, (void (*)(void))type metadata accessor for Participant);
            if (v133 < v130 || v136 >= v135 + v131)
            {
              v138 = v283;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              v138 = v283;
              if (v133 != v130) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            _s15ConversationKit11ParticipantVWObTm_4(v255, v138, (void (*)(void))type metadata accessor for Participant);
            uint64_t v64 = v134;
          }
          ++v132;
          --v129;
          v130 -= v286;
          v131 -= v286;
          v133 += v286;
        }
        while (v132 < v64 + v129);
        Swift::Int v33 = v285;
        Swift::Int v36 = v278;
        unint64_t v62 = v244;
        uint64_t v61 = v261;
        uint64_t v63 = v282;
      }
    }
LABEL_77:
    if (v64 >= v63) {
      goto LABEL_121;
    }
    if (__OFSUB__(v64, v61)) {
      goto LABEL_211;
    }
    if (v64 - v61 >= v241)
    {
LABEL_120:
      uint64_t v61 = v261;
      goto LABEL_121;
    }
    if (__OFADD__(v261, v241)) {
      goto LABEL_214;
    }
    if (v261 + v241 < v63) {
      uint64_t v63 = v261 + v241;
    }
    if (v63 < v261)
    {
LABEL_215:
      __break(1u);
      goto LABEL_216;
    }
    if (v64 != v63)
    {
      v244 = v62;
      v139 = *(void *)(v263 + 72);
      v140 = v139 * (v64 - 1);
      v273 = v139;
      v141 = v64 * v139;
      v254 = v63;
      while (1)
      {
        v142 = 0;
        v143 = v261;
        v274 = v140;
        v275 = (id)v141;
        v277 = v64;
        while (1)
        {
          v283 = v143;
          v144 = (uint64_t)v33;
          v145 = *v284;
          v282 = v141 + v142;
          v146 = v141 + v142 + v145;
          v147 = v287;
          v148 = v142;
          _s15ConversationKit11ParticipantVWOcTm_11(v146, v287, (void (*)(void))type metadata accessor for Participant);
          v286 = v148;
          v281 = (id)(v140 + v148);
          _s15ConversationKit11ParticipantVWOcTm_11(v140 + v148 + v145, v292, (void (*)(void))type metadata accessor for Participant);
          v149 = (uint64_t)v271;
          _s15ConversationKit11ParticipantVWOcTm_11(v147, (uint64_t)v271, (void (*)(void))type metadata accessor for Participant.State);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            v150 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            v151 = (const void *)(v149 + *(int *)(v150 + 48));
            outlined consume of Participant.CopresenceInfo?(*(void *)(v149 + *(int *)(v150 + 64)), *(void *)(v149 + *(int *)(v150 + 64) + 8));
            memcpy(v290, v151, sizeof(v290));
            v152 = type metadata accessor for Date();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v152 - 8) + 8))(v149, v152);
            outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v291);
            outlined destroy of Participant.MediaInfo((uint64_t)v290);
            if (v291[3] != 1)
            {
              memcpy(v290, v291, 0xD1uLL);
              v153 = v290[40];
              outlined destroy of Participant.ScreenInfo((uint64_t)v290);
              v144 = (uint64_t)v285;
              Swift::Int v36 = v278;
              goto LABEL_93;
            }
          }
          else
          {
            _s15ConversationKit11ParticipantV5StateOWOhTm_0(v149, (void (*)(void))type metadata accessor for Participant.State);
            memset(v291, 0, 24);
            v291[3] = 1;
            bzero(v276, 0xB1uLL);
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v291, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          v153 = 2;
LABEL_93:
          _s15ConversationKit11ParticipantVWOcTm_11(v287, (uint64_t)v36, (void (*)(void))type metadata accessor for Participant);
          if (v153 == 2)
          {
            v154 = 0;
            v155 = (uint64_t)v272;
            goto LABEL_100;
          }
          v156 = v268;
          _s15ConversationKit11ParticipantVWOcTm_11((uint64_t)v36, v268, (void (*)(void))type metadata accessor for Participant.State);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            v157 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            v158 = (const void *)(v156 + *(int *)(v157 + 48));
            outlined consume of Participant.CopresenceInfo?(*(void *)(v156 + *(int *)(v157 + 64)), *(void *)(v156 + *(int *)(v157 + 64) + 8));
            memcpy(v290, v158, sizeof(v290));
            v159 = type metadata accessor for Date();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v159 - 8) + 8))(v156, v159);
            outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v289);
            outlined destroy of Participant.MediaInfo((uint64_t)v290);
            v155 = (uint64_t)v272;
            if (v289[3] != 1)
            {
              memcpy(v291, v289, 0xD1uLL);
              v154 = LOBYTE(v291[5]);
              outlined destroy of Participant.ScreenInfo((uint64_t)v291);
              goto LABEL_100;
            }
          }
          else
          {
            _s15ConversationKit11ParticipantV5StateOWOhTm_0(v156, (void (*)(void))type metadata accessor for Participant.State);
            memset(v289, 0, 24);
            v289[3] = 1;
            bzero(v270, 0xB1uLL);
            v155 = (uint64_t)v272;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          v154 = 0;
LABEL_100:
          _s15ConversationKit11ParticipantV5StateOWOhTm_0((uint64_t)v36, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_11(v292, v155, (void (*)(void))type metadata accessor for Participant.State);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            v160 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
            v161 = v155;
            v162 = (const void *)(v155 + *(int *)(v160 + 48));
            outlined consume of Participant.CopresenceInfo?(*(void *)(v161 + *(int *)(v160 + 64)), *(void *)(v161 + *(int *)(v160 + 64) + 8));
            memcpy(v290, v162, sizeof(v290));
            v163 = type metadata accessor for Date();
            v144 = (uint64_t)v285;
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v163 - 8) + 8))(v161, v163);
            outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v291);
            outlined destroy of Participant.MediaInfo((uint64_t)v290);
            if (v291[3] != 1)
            {
              memcpy(v290, v291, 0xD1uLL);
              v164 = v290[40];
              outlined destroy of Participant.ScreenInfo((uint64_t)v290);
              v144 = (uint64_t)v285;
              goto LABEL_105;
            }
          }
          else
          {
            _s15ConversationKit11ParticipantV5StateOWOhTm_0(v155, (void (*)(void))type metadata accessor for Participant.State);
            memset(v291, 0, 24);
            v291[3] = 1;
            bzero(v276, 0xB1uLL);
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v291, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          v164 = 2;
LABEL_105:
          _s15ConversationKit11ParticipantVWOcTm_11(v292, v144, (void (*)(void))type metadata accessor for Participant);
          if (v164 == 2)
          {
            v165 = v284;
          }
          else
          {
            v166 = (uint64_t)v267;
            _s15ConversationKit11ParticipantVWOcTm_11(v144, (uint64_t)v267, (void (*)(void))type metadata accessor for Participant.State);
            if (swift_getEnumCaseMultiPayload() == 4)
            {
              v167 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              v168 = v166;
              v169 = (const void *)(v166 + *(int *)(v167 + 48));
              outlined consume of Participant.CopresenceInfo?(*(void *)(v168 + *(int *)(v167 + 64)), *(void *)(v168 + *(int *)(v167 + 64) + 8));
              memcpy(v290, v169, sizeof(v290));
              v170 = type metadata accessor for Date();
              v144 = (uint64_t)v285;
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v170 - 8) + 8))(v168, v170);
              outlined init with copy of Participant.ScreenInfo?((uint64_t)v279, (uint64_t)v289);
              outlined destroy of Participant.MediaInfo((uint64_t)v290);
              if (v289[3] != 1)
              {
                v165 = v284;
                memcpy(v291, v289, 0xD1uLL);
                v171 = LOBYTE(v291[5]);
                outlined destroy of Participant.ScreenInfo((uint64_t)v291);
                goto LABEL_113;
              }
            }
            else
            {
              _s15ConversationKit11ParticipantV5StateOWOhTm_0(v166, (void (*)(void))type metadata accessor for Participant.State);
              memset(v289, 0, 24);
              v289[3] = 1;
              bzero(v270, 0xB1uLL);
            }
            v165 = v284;
            outlined destroy of SystemUpdateNotice?((uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          }
          v171 = 0;
LABEL_113:
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v144, (void (*)(void))type metadata accessor for Participant);
          v172 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v171);
          v173 = objc_msgSend(v172, sel_integerValue);

          v174 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v154);
          v175 = objc_msgSend(v174, sel_integerValue);

          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v292, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantV5StateOWOhTm_0(v287, (void (*)(void))type metadata accessor for Participant);
          if ((uint64_t)v173 >= (uint64_t)v175) {
            break;
          }
          v176 = *v165;
          Swift::Int v36 = v278;
          v141 = (uint64_t)v275;
          if (!*v165) {
            goto LABEL_217;
          }
          v140 = v274;
          v177 = v176 + v274 + v286;
          _s15ConversationKit11ParticipantVWObTm_4((uint64_t)v275 + v176 + v286, v280, (void (*)(void))type metadata accessor for Participant);
          Swift::Int v33 = v285;
          swift_arrayInitWithTakeFrontToBack();
          _s15ConversationKit11ParticipantVWObTm_4(v280, v177, (void (*)(void))type metadata accessor for Participant);
          v142 = v286 - v273;
          v143 = v283 + 1;
          v178 = v277;
          if (v277 == v283 + 1) {
            goto LABEL_118;
          }
        }
        Swift::Int v33 = v285;
        v178 = v277;
        Swift::Int v36 = v278;
        v140 = v274;
        v141 = (uint64_t)v275;
LABEL_118:
        uint64_t v64 = v178 + 1;
        v140 += v273;
        v141 += v273;
        if (v64 == v254)
        {
          uint64_t v64 = v254;
          unint64_t v62 = v244;
          goto LABEL_120;
        }
      }
    }
    uint64_t v61 = v261;
LABEL_121:
    if (v64 < v61) {
      goto LABEL_210;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v277 = v64;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v62 + 2) + 1, 1, v62);
    }
    v181 = *((void *)v62 + 2);
    v180 = *((void *)v62 + 3);
    v182 = v181 + 1;
    if (v181 >= v180 >> 1) {
      unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v180 > 1), v181 + 1, 1, v62);
    }
    *((void *)v62 + 2) = v182;
    v183 = v62 + 32;
    v184 = &v62[16 * v181 + 32];
    v185 = v277;
    *(void *)v184 = v261;
    *((void *)v184 + 1) = v185;
    if (!v181)
    {
      v182 = 1;
LABEL_169:
      Swift::Int v33 = v285;
      uint64_t v63 = v284[1];
      uint64_t v61 = v277;
      if (v277 >= v63) {
        goto LABEL_177;
      }
      continue;
    }
    break;
  }
  while (2)
  {
    v186 = v182 - 1;
    if (v182 >= 4)
    {
      v191 = &v183[16 * v182];
      v192 = *((void *)v191 - 8);
      v193 = *((void *)v191 - 7);
      v197 = __OFSUB__(v193, v192);
      v194 = v193 - v192;
      if (v197) {
        goto LABEL_195;
      }
      v196 = *((void *)v191 - 6);
      v195 = *((void *)v191 - 5);
      v197 = __OFSUB__(v195, v196);
      v189 = v195 - v196;
      v190 = v197;
      if (v197) {
        goto LABEL_196;
      }
      v198 = v182 - 2;
      v199 = &v183[16 * v182 - 32];
      v201 = *(void *)v199;
      v200 = *((void *)v199 + 1);
      v197 = __OFSUB__(v200, v201);
      v202 = v200 - v201;
      if (v197) {
        goto LABEL_197;
      }
      v197 = __OFADD__(v189, v202);
      v203 = v189 + v202;
      if (v197) {
        goto LABEL_199;
      }
      if (v203 >= v194)
      {
        v221 = &v183[16 * v186];
        v223 = *(void *)v221;
        v222 = *((void *)v221 + 1);
        v197 = __OFSUB__(v222, v223);
        v224 = v222 - v223;
        if (v197) {
          goto LABEL_205;
        }
        v214 = v189 < v224;
      }
      else
      {
LABEL_140:
        if (v190) {
          goto LABEL_198;
        }
        v198 = v182 - 2;
        v204 = &v183[16 * v182 - 32];
        v206 = *(void *)v204;
        v205 = *((void *)v204 + 1);
        v207 = __OFSUB__(v205, v206);
        v208 = v205 - v206;
        v209 = v207;
        if (v207) {
          goto LABEL_200;
        }
        v210 = &v183[16 * v186];
        v212 = *(void *)v210;
        v211 = *((void *)v210 + 1);
        v197 = __OFSUB__(v211, v212);
        v213 = v211 - v212;
        if (v197) {
          goto LABEL_202;
        }
        if (__OFADD__(v208, v213)) {
          goto LABEL_204;
        }
        if (v208 + v213 < v189) {
          goto LABEL_152;
        }
        v214 = v189 < v213;
      }
      if (v214) {
        v186 = v198;
      }
    }
    else
    {
      if (v182 == 3)
      {
        v188 = *((void *)v62 + 4);
        v187 = *((void *)v62 + 5);
        v197 = __OFSUB__(v187, v188);
        v189 = v187 - v188;
        v190 = v197;
        goto LABEL_140;
      }
      v215 = *((void *)v62 + 4);
      v216 = *((void *)v62 + 5);
      v197 = __OFSUB__(v216, v215);
      v208 = v216 - v215;
      v209 = v197;
LABEL_152:
      if (v209) {
        goto LABEL_201;
      }
      v217 = &v183[16 * v186];
      v219 = *(void *)v217;
      v218 = *((void *)v217 + 1);
      v197 = __OFSUB__(v218, v219);
      v220 = v218 - v219;
      if (v197) {
        goto LABEL_203;
      }
      if (v220 < v208) {
        goto LABEL_169;
      }
    }
    v225 = v186 - 1;
    if (v186 - 1 >= v182)
    {
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
      goto LABEL_206;
    }
    if (!*v284) {
      goto LABEL_218;
    }
    v226 = v62;
    v227 = &v183[16 * v225];
    v228 = *(void *)v227;
    v229 = &v183[16 * v186];
    v230 = *((void *)v229 + 1);
    v231 = v266;
    specialized _merge<A>(low:mid:high:buffer:by:)(*v284 + *(void *)(v263 + 72) * *(void *)v227, *v284 + *(void *)(v263 + 72) * *(void *)v229, *v284 + *(void *)(v263 + 72) * v230, v262);
    v266 = v231;
    if (!v231)
    {
      if (v230 < v228) {
        goto LABEL_192;
      }
      if (v186 > *((void *)v226 + 2)) {
        goto LABEL_193;
      }
      *(void *)v227 = v228;
      *(void *)&v183[16 * v225 + 8] = v230;
      v232 = *((void *)v226 + 2);
      if (v186 >= v232) {
        goto LABEL_194;
      }
      unint64_t v62 = v226;
      v182 = v232 - 1;
      memmove(&v183[16 * v186], v229 + 16, 16 * (v232 - 1 - v186));
      *((void *)v226 + 2) = v232 - 1;
      v214 = v232 > 2;
      Swift::Int v36 = v278;
      if (!v214) {
        goto LABEL_169;
      }
      continue;
    }
    break;
  }
LABEL_174:
  swift_bridgeObjectRelease();
  if (v243 >= -1) {
    goto LABEL_189;
  }
  __break(1u);
LABEL_176:
  unint64_t v62 = (char *)MEMORY[0x1E4FBC860];
  v182 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_177:
  if (v182 >= 2)
  {
    v233 = *v284;
    while (1)
    {
      v234 = v182 - 2;
      if (v182 < 2) {
        break;
      }
      if (!v233) {
        goto LABEL_220;
      }
      v235 = *(void *)&v62[16 * v234 + 32];
      v236 = *(void *)&v62[16 * v182 + 24];
      v237 = v266;
      specialized _merge<A>(low:mid:high:buffer:by:)(v233 + *(void *)(v263 + 72) * v235, v233 + *(void *)(v263 + 72) * *(void *)&v62[16 * v182 + 16], v233 + *(void *)(v263 + 72) * v236, v262);
      v266 = v237;
      if (v237) {
        goto LABEL_174;
      }
      if (v236 < v235) {
        goto LABEL_207;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v62);
      }
      if (v234 >= *((void *)v62 + 2)) {
        goto LABEL_208;
      }
      v238 = &v62[16 * v234 + 32];
      *(void *)v238 = v235;
      *((void *)v238 + 1) = v236;
      v239 = *((void *)v62 + 2);
      if (v182 > v239) {
        goto LABEL_209;
      }
      memmove(&v62[16 * v182 + 16], &v62[16 * v182 + 32], 16 * (v239 - v182));
      *((void *)v62 + 2) = v239 - 1;
      v182 = v239 - 1;
      if (v239 <= 2) {
        goto LABEL_188;
      }
    }
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
LABEL_188:
  swift_bridgeObjectRelease();
  if (v243 >= -1)
  {
LABEL_189:
    *(void *)(v242 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  Swift::Int v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  double *v61;
  double v62;
  double *v63;
  double v64;
  uint64_t v65;
  double *v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double *v77;
  double v78;
  double *v79;
  int v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double v101;
  double v102;
  double *v103;
  BOOL v104;
  double *v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  char v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  double *v182;
  double *v183;
  uint64_t v184;
  uint64_t v185;
  Swift::Int v186;
  double *v187;
  double *v188;
  char *v189;
  double *v190;
  double *v191;
  uint64_t v192;
  double *v193;
  double *v194;
  double *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  double *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  double *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  double *v209;
  uint64_t v210;
  double *v211;
  double *v212;
  uint64_t v213;
  double *v214;
  uint64_t v215;
  double *v216;
  char *v217;
  uint64_t v218;
  uint64_t *v219;
  char v220[8];
  char v221;
  char v222;
  char v223;
  double *v224;

  v210 = type metadata accessor for HUDActivityManager.BannerUpdate(0);
  v203 = *(void *)(v210 - 8);
  MEMORY[0x1F4188790](v210);
  v197 = (uint64_t)&v179 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  v218 = (uint64_t)&v179 - v4;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v179 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v179 - v9;
  MEMORY[0x1F4188790](v11);
  v209 = (double *)((char *)&v179 - v12);
  MEMORY[0x1F4188790](v13);
  v214 = (double *)((char *)&v179 - v14);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (double *)((char *)&v179 - v16);
  MEMORY[0x1F4188790](v18);
  v224 = (double *)((char *)&v179 - v19);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v179 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v179 - v24;
  MEMORY[0x1F4188790](v26);
  id v28 = (double *)((char *)&v179 - v27);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (double *)((char *)&v179 - v30);
  MEMORY[0x1F4188790](v32);
  v205 = (double *)((char *)&v179 - v33);
  MEMORY[0x1F4188790](v34);
  v193 = (double *)((char *)&v179 - v35);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v179 - v37;
  MEMORY[0x1F4188790](v39);
  v189 = (char *)&v179 - v40;
  MEMORY[0x1F4188790](v41);
  v187 = (double *)((char *)&v179 - v42);
  MEMORY[0x1F4188790](v43);
  v188 = (double *)((char *)&v179 - v44);
  MEMORY[0x1F4188790](v45);
  v191 = (double *)((char *)&v179 - v46);
  MEMORY[0x1F4188790](v47);
  v190 = (double *)((char *)&v179 - v48);
  v219 = a1;
  id v49 = a1[1];
  id v50 = _minimumMergeRunLength(_:)(v49);
  if (v50 >= v49)
  {
    if (v49 < 0) {
      goto LABEL_176;
    }
    if (v49) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v49, 1, v219);
    }
    return;
  }
  v186 = v50;
  v184 = specialized static Array._allocateUninitialized(_:)(v49 / 2);
  v204 = v51;
  v185 = v49;
  if (v49 <= 0) {
    goto LABEL_141;
  }
  v180 = v38;
  v194 = v31;
  uint64_t v52 = 0;
  v183 = v190 + 1;
  v182 = v191 + 1;
  v217 = &v222;
  v196 = (char *)(v193 + 1);
  v195 = v205 + 1;
  v212 = v224 + 1;
  v211 = v17 + 1;
  int v53 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v54 = v49;
  v207 = v7;
  v206 = v10;
  v216 = v17;
  v202 = v25;
  v201 = v28;
  while (1)
  {
    int v55 = v52;
    uint64_t v56 = v52 + 1;
    v200 = v52;
    v199 = v54;
    if (v52 + 1 >= v54)
    {
      ++v52;
    }
    else
    {
      unint64_t v57 = *v219;
      unint64_t v58 = *(void *)(v203 + 72);
      outlined init with copy of HUDActivityManager.BannerUpdate(*v219 + v58 * v56, (uint64_t)v190);
      v192 = v57;
      v215 = v58;
      outlined init with copy of HUDActivityManager.BannerUpdate(v57 + v58 * v55, (uint64_t)v191);
      outlined init with copy of ConversationControlsType((uint64_t)v183, (uint64_t)v220);
      outlined init with copy of ConversationControlsType((uint64_t)v182, (uint64_t)v217);
      unint64_t v59 = (uint64_t)v189;
      if (v221)
      {
        uint64_t v60 = v193;
        uint64_t v61 = v188;
        if (v223)
        {
          unint64_t v62 = *v190;
          uint64_t v63 = v191;
          uint64_t v64 = *v191;
          outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v190, (uint64_t)v188);
          uint64_t v65 = (uint64_t)v63;
          char v66 = v187;
          outlined init with copy of HUDActivityManager.BannerUpdate(v65, (uint64_t)v187);
          if (v62 >= v64)
          {
            int v67 = *v61;
            uint64_t v68 = *v66;
            outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v61, v59);
            uint64_t v69 = (uint64_t)v66;
            uint64_t v70 = (uint64_t)v180;
            outlined init with copy of HUDActivityManager.BannerUpdate(v69, (uint64_t)v180);
            if (v67 == v68)
            {
              uint64_t v71 = Date.compare(_:)();
              unint64_t v59 = (uint64_t)v189;
              LODWORD(v198) = v71 == -1;
            }
            else
            {
              LODWORD(v198) = 0;
            }
            outlined destroy of HUDActivityManager.BannerUpdate(v70);
            outlined destroy of HUDActivityManager.BannerUpdate(v59);
          }
          else
          {
            LODWORD(v198) = 1;
          }
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v187);
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v188);
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v220, &demangling cache variable for type metadata for (ConversationControlsType, ConversationControlsType));
          int v55 = v200;
        }
        else
        {
          outlined destroy of ConversationControlsType((uint64_t)v217);
          outlined destroy of ConversationControlsType((uint64_t)v220);
          LODWORD(v198) = 1;
        }
      }
      else
      {
        uint64_t v60 = v193;
        if (v223)
        {
          outlined destroy of ConversationControlsType((uint64_t)v220);
          outlined destroy of ConversationControlsType((uint64_t)v217);
          LODWORD(v198) = 0;
        }
        else
        {
          LODWORD(v198) = *v190 < *v191;
          outlined destroy of ConversationControlsType((uint64_t)v217);
          outlined destroy of ConversationControlsType((uint64_t)v220);
        }
      }
      outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v191);
      outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v190);
      uint64_t v52 = v55 + 2;
      uint64_t v54 = v199;
      if (v55 + 2 < v199)
      {
        v213 = v215 * v56;
        uint64_t v72 = v192;
        BOOL v73 = v52;
        unint64_t v74 = v215 * v52;
        while (1)
        {
          outlined init with copy of HUDActivityManager.BannerUpdate(v72 + v74, (uint64_t)v60);
          outlined init with copy of HUDActivityManager.BannerUpdate(v72 + v213, (uint64_t)v205);
          outlined init with copy of ConversationControlsType((uint64_t)v196, (uint64_t)v220);
          outlined init with copy of ConversationControlsType((uint64_t)v195, (uint64_t)v217);
          if (v221)
          {
            if (v223)
            {
              uint64_t v75 = *v60;
              uint64_t v76 = (uint64_t)v60;
              uint64_t v77 = v205;
              uint64_t v78 = *v205;
              uint64_t v79 = v194;
              outlined init with copy of HUDActivityManager.BannerUpdate(v76, (uint64_t)v194);
              outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v77, (uint64_t)v28);
              if (v75 >= v78)
              {
                uint64_t v81 = *v79;
                uint64_t v82 = *v28;
                outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v79, (uint64_t)v25);
                outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v28, (uint64_t)v22);
                v80 = v81 == v82 && Date.compare(_:)() == -1;
                uint64_t v60 = v193;
                outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v22);
                outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v25);
              }
              else
              {
                v80 = 1;
                uint64_t v60 = v193;
              }
              outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
              outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v194);
              outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v220, &demangling cache variable for type metadata for (ConversationControlsType, ConversationControlsType));
            }
            else
            {
              outlined destroy of ConversationControlsType((uint64_t)v217);
              outlined destroy of ConversationControlsType((uint64_t)v220);
              v80 = 1;
            }
          }
          else if (v223)
          {
            outlined destroy of ConversationControlsType((uint64_t)v220);
            outlined destroy of ConversationControlsType((uint64_t)v217);
            v80 = 0;
          }
          else
          {
            v80 = *v60 < *v205;
            outlined destroy of ConversationControlsType((uint64_t)v217);
            outlined destroy of ConversationControlsType((uint64_t)v220);
          }
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v205);
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v60);
          if (v198 != v80) {
            break;
          }
          v72 += v215;
          ++v73;
          uint64_t v54 = v199;
          if (v73 >= v199)
          {
            uint64_t v52 = v199;
            int v55 = v200;
            goto LABEL_38;
          }
        }
        uint64_t v52 = v73;
        int v55 = v200;
        uint64_t v54 = v199;
      }
      if (!v198) {
        goto LABEL_55;
      }
LABEL_38:
      if (v52 < v55) {
        goto LABEL_177;
      }
      if (v55 < v52)
      {
        v181 = v53;
        v198 = v22;
        BOOL v83 = 0;
        uint64_t v84 = v55;
        uint64_t v17 = v216;
        char v85 = v215 * (v52 - 1);
        v86 = v52;
        uint64_t v87 = v52 * v215;
        uint64_t v88 = v84;
        uint64_t v89 = v84 * v215;
        v213 = v86;
        do
        {
          if (v88 != v86 + v83 - 1)
          {
            BOOL v90 = v192;
            if (!v192) {
              goto LABEL_183;
            }
            uint64_t v91 = v192 + v89;
            outlined init with take of HUDActivityManager.BannerUpdate(v192 + v89, v197);
            if (v89 < v85 || v91 >= v90 + v87)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v89 != v85)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            outlined init with take of HUDActivityManager.BannerUpdate(v197, v90 + v85);
            uint64_t v17 = v216;
          }
          ++v88;
          --v83;
          v86 = v213;
          v85 -= v215;
          v87 -= v215;
          v89 += v215;
        }
        while (v88 < v213 + v83);
        uint64_t v22 = v198;
        int v53 = v181;
        uint64_t v52 = v213;
        uint64_t v25 = v202;
        int v55 = v200;
        uint64_t v54 = v199;
      }
      else
      {
LABEL_55:
        uint64_t v17 = v216;
      }
    }
    if (v52 < v54)
    {
      if (__OFSUB__(v52, v55)) {
        goto LABEL_175;
      }
      if (v52 - v55 < v186) {
        break;
      }
    }
LABEL_85:
    if (v52 < v55) {
      goto LABEL_174;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v53 + 2) + 1, 1, v53);
    }
    uint64_t v115 = *((void *)v53 + 2);
    uint64_t v114 = *((void *)v53 + 3);
    v116 = v115 + 1;
    if (v115 >= v114 >> 1) {
      int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1, v53);
    }
    *((void *)v53 + 2) = v116;
    uint64_t v117 = v53 + 32;
    Swift::Int v118 = &v53[16 * v115 + 32];
    *(void *)Swift::Int v118 = v200;
    *((void *)v118 + 1) = v52;
    if (v115)
    {
      v213 = v52;
      while (1)
      {
        v119 = v116 - 1;
        if (v116 >= 4)
        {
          v124 = &v117[16 * v116];
          v125 = *((void *)v124 - 8);
          uint64_t v126 = *((void *)v124 - 7);
          v130 = __OFSUB__(v126, v125);
          uint64_t v127 = v126 - v125;
          if (v130) {
            goto LABEL_160;
          }
          uint64_t v129 = *((void *)v124 - 6);
          v128 = *((void *)v124 - 5);
          v130 = __OFSUB__(v128, v129);
          uint64_t v122 = v128 - v129;
          uint64_t v123 = v130;
          if (v130) {
            goto LABEL_161;
          }
          v131 = v116 - 2;
          uint64_t v132 = &v117[16 * v116 - 32];
          v134 = *(void *)v132;
          v133 = *((void *)v132 + 1);
          v130 = __OFSUB__(v133, v134);
          v135 = v133 - v134;
          if (v130) {
            goto LABEL_162;
          }
          v130 = __OFADD__(v122, v135);
          v136 = v122 + v135;
          if (v130) {
            goto LABEL_164;
          }
          if (v136 >= v127)
          {
            v154 = &v117[16 * v119];
            v156 = *(void *)v154;
            v155 = *((void *)v154 + 1);
            v130 = __OFSUB__(v155, v156);
            v157 = v155 - v156;
            if (v130) {
              goto LABEL_170;
            }
            v147 = v122 < v157;
            goto LABEL_123;
          }
        }
        else
        {
          if (v116 != 3)
          {
            v148 = *((void *)v53 + 4);
            v149 = *((void *)v53 + 5);
            v130 = __OFSUB__(v149, v148);
            v141 = v149 - v148;
            v142 = v130;
            goto LABEL_117;
          }
          v121 = *((void *)v53 + 4);
          uint64_t v120 = *((void *)v53 + 5);
          v130 = __OFSUB__(v120, v121);
          uint64_t v122 = v120 - v121;
          uint64_t v123 = v130;
        }
        if (v123) {
          goto LABEL_163;
        }
        v131 = v116 - 2;
        v137 = &v117[16 * v116 - 32];
        v139 = *(void *)v137;
        v138 = *((void *)v137 + 1);
        v140 = __OFSUB__(v138, v139);
        v141 = v138 - v139;
        v142 = v140;
        if (v140) {
          goto LABEL_165;
        }
        v143 = &v117[16 * v119];
        v145 = *(void *)v143;
        v144 = *((void *)v143 + 1);
        v130 = __OFSUB__(v144, v145);
        v146 = v144 - v145;
        if (v130) {
          goto LABEL_168;
        }
        if (__OFADD__(v141, v146)) {
          goto LABEL_169;
        }
        if (v141 + v146 >= v122)
        {
          v147 = v122 < v146;
LABEL_123:
          if (v147) {
            v119 = v131;
          }
          goto LABEL_125;
        }
LABEL_117:
        if (v142) {
          goto LABEL_166;
        }
        v150 = &v117[16 * v119];
        v152 = *(void *)v150;
        v151 = *((void *)v150 + 1);
        v130 = __OFSUB__(v151, v152);
        v153 = v151 - v152;
        if (v130) {
          goto LABEL_167;
        }
        if (v153 < v141) {
          goto LABEL_134;
        }
LABEL_125:
        v158 = v119 - 1;
        if (v119 - 1 >= v116)
        {
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
        if (!*v219) {
          goto LABEL_182;
        }
        v159 = v53;
        v160 = v22;
        v161 = &v117[16 * v158];
        v162 = *(void *)v161;
        v163 = v117;
        v164 = v119;
        v165 = &v117[16 * v119];
        v166 = *((void *)v165 + 1);
        v167 = v208;
        specialized _merge<A>(low:mid:high:buffer:by:)(*v219 + *(void *)(v203 + 72) * *(void *)v161, *v219 + *(void *)(v203 + 72) * *(void *)v165, *v219 + *(void *)(v203 + 72) * v166, v204);
        v208 = v167;
        if (v167) {
          goto LABEL_139;
        }
        if (v166 < v162) {
          goto LABEL_157;
        }
        if (v164 > *((void *)v159 + 2)) {
          goto LABEL_158;
        }
        *(void *)v161 = v162;
        *(void *)&v163[16 * v158 + 8] = v166;
        v168 = *((void *)v159 + 2);
        if (v164 >= v168) {
          goto LABEL_159;
        }
        int v53 = v159;
        v116 = v168 - 1;
        memmove(v165, v165 + 16, 16 * (v168 - 1 - v164));
        uint64_t v117 = v163;
        *((void *)v159 + 2) = v168 - 1;
        v147 = v168 > 2;
        uint64_t v17 = v216;
        uint64_t v22 = v160;
        uint64_t v25 = v202;
        id v28 = v201;
        uint64_t v52 = v213;
        if (!v147) {
          goto LABEL_134;
        }
      }
    }
    v116 = 1;
LABEL_134:
    uint64_t v54 = v219[1];
    if (v52 >= v54)
    {
      while (v116 >= 2)
      {
        v169 = *v219;
        v170 = v208;
        if (!*v219) {
          goto LABEL_184;
        }
        v171 = *(void *)(v203 + 72);
        while (1)
        {
          v172 = v116 - 2;
          v173 = v53;
          v174 = *(void *)&v53[16 * v116];
          v175 = *(void *)&v53[16 * v116 + 16];
          v176 = *(void *)&v53[16 * v116 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v169 + v171 * v174, v169 + v171 * v175, v169 + v171 * v176, v204);
          if (v170) {
            break;
          }
          if (v176 < v174) {
            goto LABEL_171;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v173 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v173);
          }
          if (v172 >= *((void *)v173 + 2)) {
            goto LABEL_172;
          }
          v177 = &v173[16 * v172 + 32];
          *(void *)v177 = v174;
          *((void *)v177 + 1) = v176;
          v178 = *((void *)v173 + 2);
          if (v116 > v178) {
            goto LABEL_173;
          }
          int v53 = v173;
          memmove(&v173[16 * v116 + 16], &v173[16 * v116 + 32], 16 * (v178 - v116));
          *((void *)v173 + 2) = v178 - 1;
          v116 = v178 - 1;
          if (v178 <= 2) {
            goto LABEL_154;
          }
        }
LABEL_139:
        swift_bridgeObjectRelease();
        if (v185 >= -1) {
          goto LABEL_155;
        }
        __break(1u);
LABEL_141:
        int v53 = (char *)MEMORY[0x1E4FBC860];
        v116 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      }
LABEL_154:
      swift_bridgeObjectRelease();
      if (v185 < -1) {
        goto LABEL_180;
      }
LABEL_155:
      *(void *)(v184 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  if (__OFADD__(v55, v186)) {
    goto LABEL_178;
  }
  v93 = v199;
  if (v55 + v186 < v199) {
    v93 = v55 + v186;
  }
  if (v93 >= v55)
  {
    if (v52 == v93) {
      goto LABEL_85;
    }
    v181 = v53;
    v198 = v22;
    uint64_t v94 = *(void *)(v203 + 72);
    uint64_t v95 = v94 * (v52 - 1);
    v215 = v94;
    uint64_t v96 = v52 * v94;
    v199 = v93;
    while (1)
    {
      v97 = 0;
      uint64_t v98 = v200;
      v213 = v52;
      while (1)
      {
        uint64_t v99 = *v219;
        outlined init with copy of HUDActivityManager.BannerUpdate(v96 + v97 + *v219, (uint64_t)v224);
        outlined init with copy of HUDActivityManager.BannerUpdate(v95 + v97 + v99, (uint64_t)v17);
        outlined init with copy of ConversationControlsType((uint64_t)v212, (uint64_t)v220);
        outlined init with copy of ConversationControlsType((uint64_t)v211, (uint64_t)v217);
        if (!v221) {
          break;
        }
        uint64_t v100 = v214;
        if (v223)
        {
          unint64_t v101 = *v224;
          v102 = *v17;
          outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v224, (uint64_t)v214);
          uint64_t v103 = v209;
          outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v17, (uint64_t)v209);
          if (v101 >= v102)
          {
            unint64_t v106 = *v100;
            v107 = *v103;
            uint64_t v108 = (uint64_t)v100;
            unint64_t v109 = (uint64_t)v103;
            uint64_t v110 = (uint64_t)v206;
            outlined init with copy of HUDActivityManager.BannerUpdate(v108, (uint64_t)v206);
            uint64_t v111 = (uint64_t)v207;
            outlined init with copy of HUDActivityManager.BannerUpdate(v109, (uint64_t)v207);
            v104 = v106 == v107 && Date.compare(_:)() == -1;
            outlined destroy of HUDActivityManager.BannerUpdate(v111);
            outlined destroy of HUDActivityManager.BannerUpdate(v110);
            uint64_t v103 = v209;
            uint64_t v17 = v216;
          }
          else
          {
            v104 = 1;
          }
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v103);
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v214);
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v220, &demangling cache variable for type metadata for (ConversationControlsType, ConversationControlsType));
          uint64_t v105 = v224;
LABEL_78:
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v17);
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v105);
          uint64_t v52 = v213;
          if (!v104) {
            goto LABEL_83;
          }
          goto LABEL_79;
        }
        outlined destroy of ConversationControlsType((uint64_t)v217);
        outlined destroy of ConversationControlsType((uint64_t)v220);
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v17);
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v224);
LABEL_79:
        v112 = *v219;
        if (!*v219) {
          goto LABEL_181;
        }
        unint64_t v113 = v112 + v95 + v97;
        outlined init with take of HUDActivityManager.BannerUpdate(v112 + v96 + v97, v218);
        swift_arrayInitWithTakeFrontToBack();
        outlined init with take of HUDActivityManager.BannerUpdate(v218, v113);
        uint64_t v17 = v216;
        v97 -= v215;
        if (v52 == ++v98) {
          goto LABEL_83;
        }
      }
      if (!v223) {
        break;
      }
      outlined destroy of ConversationControlsType((uint64_t)v220);
      outlined destroy of ConversationControlsType((uint64_t)v217);
      outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v17);
      outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v224);
LABEL_83:
      ++v52;
      v95 += v215;
      v96 += v215;
      if (v52 == v199)
      {
        uint64_t v52 = v199;
        uint64_t v22 = v198;
        uint64_t v25 = v202;
        id v28 = v201;
        int v53 = v181;
        int v55 = v200;
        goto LABEL_85;
      }
    }
    uint64_t v105 = v224;
    v104 = *v224 < *v17;
    outlined destroy of ConversationControlsType((uint64_t)v217);
    outlined destroy of ConversationControlsType((uint64_t)v220);
    goto LABEL_78;
  }
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int EnumTagSinglePayload;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  void *v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  id v84;
  Class isa;
  id v86;
  void *v87;
  void (*v88)(void);
  void (*v89)(void);
  id v90;
  uint64_t (*v91)(uint64_t);
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char *v98;
  uint64_t (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  id v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  void (*v108)(void);
  void *v109;
  void (*v110)(void);
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  Class v115;
  id v116;
  void *v117;
  void (*v118)(void);
  void (*v119)(void);
  id v120;
  void (*v121)(void);
  void *v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v134;
  Swift::Int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  int EnumCaseMultiPayload;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  id v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t);
  void (*v174)(void);
  uint64_t (*v175)(uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  id v180;
  Class v181;
  id v182;
  void *v183;
  void (*v184)(void);
  void (*v185)(void);
  id v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t (*v192)(char *, char *, uint64_t);
  uint64_t v193;
  char v194;
  void (*v195)(char *, uint64_t);
  uint64_t v196;
  id v197;
  uint64_t v198;
  void *v199;
  id v200;
  uint64_t v201;
  void (*v202)(void);
  void *v203;
  void (*v204)(void);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  id v209;
  Class v210;
  id v211;
  void *v212;
  void (*v213)(void);
  void (*v214)(void);
  id v215;
  char *v216;
  void *v217;
  uint64_t v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  BOOL v242;
  unint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  uint64_t v253;
  char v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  unint64_t v285;
  void (*v286)(void);
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  Swift::Int v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t (*v301)(uint64_t);
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t (*v309)(uint64_t);
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  void *v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  void (*v326)(void);
  uint64_t (*v327)(uint64_t);
  id v328;
  void (*v329)(void);
  void (*v330)(void);
  uint64_t v331;

  char v3 = type metadata accessor for Participant.State(0);
  Swift::Int v4 = MEMORY[0x1F4188790](v3);
  Swift::Int v6 = (char *)&v286 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  v310 = (uint64_t)&v286 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v286 - v10;
  MEMORY[0x1F4188790](v9);
  Swift::Int v13 = (char *)&v286 - v12;
  v312 = type metadata accessor for Participant(0);
  v300 = *(void *)(v312 - 8);
  unint64_t v14 = MEMORY[0x1F4188790](v312);
  v295 = (uint64_t)&v286 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v286 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  v331 = (uint64_t)&v286 - v20;
  id v21 = MEMORY[0x1F4188790](v19);
  v325 = (uint64_t)&v286 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v307 = (uint64_t)&v286 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v302 = (uint64_t)&v286 - v26;
  id v27 = MEMORY[0x1F4188790](v25);
  v299 = (uint64_t)&v286 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v297 = (char *)&v286 - v30;
  MEMORY[0x1F4188790](v29);
  v291 = (uint64_t)&v286 - v31;
  v324 = a1;
  uint64_t v32 = a1[1];
  Swift::Int v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if (v32 < 0) {
      goto LABEL_209;
    }
    if (v32) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v32, 1, v324);
    }
    return;
  }
  v290 = v33;
  v303 = v1;
  v288 = specialized static Array._allocateUninitialized(_:)(v32 / 2);
  v298 = v34;
  v289 = v32;
  if (v32 > 0)
  {
    char v35 = 0;
    Swift::Int v36 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v37 = v32;
    v305 = v3;
    v308 = v6;
    v293 = v11;
    v313 = v13;
    v306 = v18;
    uint64_t v38 = (uint64_t)v297;
    while (1)
    {
      uint64_t v39 = v35 + 1;
      v294 = v36;
      v296 = v35;
      if (v35 + 1 >= v37) {
        goto LABEL_63;
      }
      v319 = v37;
      uint64_t v40 = *v324;
      uint64_t v41 = *(void *)(v300 + 72);
      v322 = v35 + 1;
      uint64_t v42 = v291;
      _s15ConversationKit11ParticipantVWOcTm_17(v40 + v41 * v39, v291);
      v311 = v40;
      v323 = v41;
      uint64_t v43 = v40 + v41 * v296;
      uint64_t v44 = v296;
      _s15ConversationKit11ParticipantVWOcTm_17(v43, v38);
      BOOL v45 = v303;
      LODWORD(v317) = closure #2 in static ParticipantListViewController.filterAndSort(_:)();
      if (v45)
      {
        _s15ConversationKit11ParticipantVWOhTm_11(v38, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOhTm_11(v42, (void (*)(void))type metadata accessor for Participant);
        swift_bridgeObjectRelease();
LABEL_170:
        if (v289 < -1) {
          goto LABEL_211;
        }
        *(void *)(v288 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      v303 = 0;
      _s15ConversationKit11ParticipantVWOhTm_11(v38, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11(v42, (void (*)(void))type metadata accessor for Participant);
      uint64_t v39 = v44 + 2;
      uint64_t v37 = v319;
      if (v44 + 2 >= v319)
      {
        char v35 = v44;
        goto LABEL_46;
      }
      v316 = v323 * v322;
      uint64_t v46 = (void *)v311;
      v315 = v323 * v39;
      while (1)
      {
        v314 = v39;
        uint64_t v47 = v299;
        _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v46 + v315, v299);
        v320 = v46;
        _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v46 + v316, v302);
        id v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        v322 = (uint64_t)&v286;
        id v49 = *(void *)(*(void *)(v48 - 8) + 64);
        MEMORY[0x1F4188790](v48 - 8);
        id v50 = (char *)&v286 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
        _s15ConversationKit11ParticipantVWOcTm_17(v47, (uint64_t)v13);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v52 = (uint64_t)&v13[*(int *)(v51 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v13[*(int *)(v51 + 64)], *(void *)&v13[*(int *)(v51 + 64) + 8]);
          int v53 = type metadata accessor for Date();
          uint64_t v54 = v13;
          int v55 = v53;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 32))((char *)&v286 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0), v54, v53);
          outlined destroy of Participant.MediaInfo(v52);
          uint64_t v56 = (char *)&v286 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
          unint64_t v57 = 0;
          unint64_t v58 = v55;
        }
        else
        {
          _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v13, (void (*)(void))type metadata accessor for Participant.State);
          unint64_t v58 = type metadata accessor for Date();
          uint64_t v56 = (char *)&v286 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
          unint64_t v57 = 1;
        }
        unint64_t v59 = __swift_storeEnumTagSinglePayload((uint64_t)v56, v57, 1, v58);
        v321 = &v286;
        MEMORY[0x1F4188790](v59);
        uint64_t v60 = (char *)&v286 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v61 = (uint64_t)v293;
        _s15ConversationKit11ParticipantVWOcTm_17(v302, (uint64_t)v293);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          unint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v63 = v61 + *(int *)(v62 + 48);
          outlined consume of Participant.CopresenceInfo?(*(void *)(v61 + *(int *)(v62 + 64)), *(void *)(v61 + *(int *)(v62 + 64) + 8));
          uint64_t v64 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 32))(v60, v61, v64);
          outlined destroy of Participant.MediaInfo(v63);
          uint64_t v65 = (uint64_t)v60;
          char v66 = 0;
        }
        else
        {
          _s15ConversationKit11ParticipantVWOhTm_11(v61, (void (*)(void))type metadata accessor for Participant.State);
          uint64_t v64 = type metadata accessor for Date();
          uint64_t v65 = (uint64_t)v60;
          char v66 = 1;
        }
        __swift_storeEnumTagSinglePayload(v65, v66, 1, v64);
        int v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
        uint64_t v68 = MEMORY[0x1F4188790](v67 - 8);
        uint64_t v70 = (char *)&v286 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v71 = (uint64_t)&v70[*(int *)(v68 + 56)];
        outlined init with take of Date?((uint64_t)v50, (uint64_t)v70);
        outlined init with take of Date?((uint64_t)v60, v71);
        type metadata accessor for Date();
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v70, 1, v64);
        BOOL v73 = __swift_getEnumTagSinglePayload(v71, 1, v64);
        if (EnumTagSinglePayload == 1)
        {
          uint64_t v37 = v319;
          if (v73 != 1)
          {
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v71, (uint64_t *)&demangling cache variable for type metadata for Date?);
            uint64_t v96 = 0;
            Swift::Int v13 = v313;
            goto LABEL_40;
          }
          v318 = &v286;
          unint64_t v74 = *(void **)(v299 + *(int *)(v312 + 28));
          if (v74)
          {
            uint64_t v75 = v74;
            uint64_t v76 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v75);
            if (v77)
            {
              uint64_t v78 = (void *)v76;
              uint64_t v79 = v77;
              if (objc_msgSend(v75, sel_shouldHideContact))
              {
                v304 = v78;
                v80 = type metadata accessor for PersonNameComponents();
                v301 = (uint64_t (*)(uint64_t))&v286;
                v292 = v80;
                uint64_t v81 = *(void *)(v80 - 8);
                MEMORY[0x1F4188790](v80);
                BOOL v83 = (char *)&v286 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
                swift_bridgeObjectRetain();
                PersonNameComponents.init()();
                PersonNameComponents.givenName.setter();
                PersonNameComponents.familyName.setter();
                v309 = v79;
                if (one-time initialization token for initials != -1) {
                  swift_once();
                }
                swift_beginAccess();
                uint64_t v84 = (id)static NSPersonNameComponentsFormatter.initials;
                Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                v86 = objc_msgSend(v84, sel_stringFromPersonNameComponents_, isa);

                uint64_t v87 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v89 = v88;

                (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v292);
                v328 = v87;
                v329 = v89;
                lazy protocol witness table accessor for type String and conformance String();
                StringProtocol.localizedUppercase.getter();

                swift_bridgeObjectRelease();
                BOOL v90 = 0;
                uint64_t v91 = v309;
                uint64_t v92 = v312;
                v93 = v304;
LABEL_30:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                v326 = (void (*)(void))v93;
                v327 = v91;
                uint64_t v105 = *(void **)(v302 + *(int *)(v92 + 28));
                v309 = v91;
                if (v105)
                {
                  unint64_t v106 = v105;
                  v107 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v106);
                  if (v108)
                  {
                    unint64_t v109 = (void *)v107;
                    uint64_t v110 = v108;
                    if (objc_msgSend(v106, sel_shouldHideContact))
                    {
                      v304 = v109;
                      uint64_t v111 = type metadata accessor for PersonNameComponents();
                      v301 = (uint64_t (*)(uint64_t))&v286;
                      v292 = v111;
                      v287 = *(void *)(v111 - 8);
                      MEMORY[0x1F4188790](v111);
                      unint64_t v113 = (char *)&v286 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
                      swift_bridgeObjectRetain();
                      PersonNameComponents.init()();
                      PersonNameComponents.givenName.setter();
                      PersonNameComponents.familyName.setter();
                      uint64_t v37 = v319;
                      v286 = v110;
                      if (one-time initialization token for initials != -1) {
                        swift_once();
                      }
                      swift_beginAccess();
                      uint64_t v114 = (id)static NSPersonNameComponentsFormatter.initials;
                      uint64_t v115 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                      v116 = objc_msgSend(v114, sel_stringFromPersonNameComponents_, v115);

                      uint64_t v117 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v119 = v118;

                      (*(void (**)(char *, uint64_t))(v287 + 8))(v113, v292);
                      v328 = v117;
                      v329 = v119;
                      lazy protocol witness table accessor for type String and conformance String();
                      StringProtocol.localizedUppercase.getter();

                      swift_bridgeObjectRelease();
                      uint64_t v120 = 0;
                      v121 = v286;
                      uint64_t v122 = v304;
                      goto LABEL_39;
                    }

                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                  }
                }
                v301 = type metadata accessor for Participant;
                uint64_t v123 = v307;
                _s15ConversationKit11ParticipantVWOcTm_17(v302, v307);
                swift_retain();
                ParticipantContactDetailsCache.contactDetails(for:)();
                uint64_t v120 = v328;
                v304 = v329;
                v121 = v330;
                v124 = v328;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                uint64_t v122 = v304;
                swift_release();
                _s15ConversationKit11ParticipantVWOhTm_11(v123, (void (*)(void))v301);
                uint64_t v37 = v319;
LABEL_39:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                v328 = v122;
                v329 = v121;
                lazy protocol witness table accessor for type String and conformance String();
                v125 = StringProtocol.localizedCompare<A>(_:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v96 = v125 == 1;
                Swift::Int v13 = v313;
                unint64_t v18 = v306;
                goto LABEL_40;
              }

              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          v309 = type metadata accessor for Participant;
          v102 = v307;
          _s15ConversationKit11ParticipantVWOcTm_17(v299, v307);
          swift_retain();
          ParticipantContactDetailsCache.contactDetails(for:)();
          BOOL v90 = v328;
          v304 = v329;
          uint64_t v91 = (uint64_t (*)(uint64_t))v330;
          uint64_t v103 = v328;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v92 = v312;
          swift_release();
          v104 = v102;
          v93 = v304;
          _s15ConversationKit11ParticipantVWOhTm_11(v104, (void (*)(void))v309);
          goto LABEL_30;
        }
        v318 = &v286;
        uint64_t v94 = *(void *)(v64 - 8);
        uint64_t v95 = v94;
        if (v73 == 1)
        {
          (*(void (**)(char *, uint64_t))(v94 + 8))(v70, v64);
          uint64_t v96 = 1;
        }
        else
        {
          v309 = (uint64_t (*)(uint64_t))&v286;
          v97 = *(void *)(v94 + 64);
          MEMORY[0x1F4188790](v73);
          uint64_t v98 = (char *)&v286 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v99 = *(uint64_t (**)(char *, char *, uint64_t))(v95 + 32);
          uint64_t v100 = v99(v98, v70, v64);
          v304 = &v286;
          MEMORY[0x1F4188790](v100);
          Swift::Int v6 = v308;
          v99(v98, (char *)v71, v64);
          unint64_t v18 = v306;
          uint64_t v96 = static Date.< infix(_:_:)();
          unint64_t v101 = *(void (**)(char *, uint64_t))(v95 + 8);
          v101(v98, v64);
          v101(v98, v64);
        }
        Swift::Int v13 = v313;
        uint64_t v37 = v319;
LABEL_40:
        _s15ConversationKit11ParticipantVWOhTm_11(v302, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOhTm_11(v299, (void (*)(void))type metadata accessor for Participant);
        if ((v317 ^ v96)) {
          break;
        }
        uint64_t v39 = v314 + 1;
        uint64_t v46 = (void *)((char *)v320 + v323);
        if (v314 + 1 >= v37)
        {
          uint64_t v39 = v37;
          goto LABEL_45;
        }
      }
      uint64_t v39 = v314;
LABEL_45:
      char v35 = v296;
LABEL_46:
      if (v317)
      {
        if (v39 >= v35)
        {
          if (v35 < v39)
          {
            uint64_t v126 = 0;
            uint64_t v127 = v323 * (v39 - 1);
            v128 = v39 * v323;
            uint64_t v129 = v35;
            v130 = v35 * v323;
            v314 = v39;
            do
            {
              if (v129 != v39 + v126 - 1)
              {
                v131 = v311;
                if (!v311) {
                  goto LABEL_218;
                }
                uint64_t v132 = v311 + v130;
                v322 = v311 + v127;
                outlined init with take of Participant(v311 + v130, v295);
                if (v130 < v127 || v132 >= v131 + v128)
                {
                  v134 = v322;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  v134 = v322;
                  if (v130 != v127) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                outlined init with take of Participant(v295, v134);
                uint64_t v39 = v314;
              }
              ++v129;
              --v126;
              v127 -= v323;
              v128 -= v323;
              v130 += v323;
            }
            while (v129 < v39 + v126);
            Swift::Int v13 = v313;
            char v35 = v296;
            uint64_t v37 = v319;
          }
          goto LABEL_63;
        }
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
        return;
      }
LABEL_63:
      if (v39 < v37)
      {
        v242 = __OFSUB__(v39, v35);
        v135 = v39 - v35;
        if (v242) {
          goto LABEL_210;
        }
        if (v135 < v290)
        {
          if (__OFADD__(v296, v290)) {
            goto LABEL_212;
          }
          if (v296 + v290 >= v37) {
            v136 = v37;
          }
          else {
            v136 = v296 + v290;
          }
          if (v136 < v296)
          {
LABEL_213:
            __break(1u);
            goto LABEL_214;
          }
          if (v39 == v136)
          {
            char v35 = v296;
            goto LABEL_114;
          }
          v137 = *(void *)(v300 + 72);
          v323 = v137 * (v39 - 1);
          v311 = v137;
          v322 = v39 * v137;
          v292 = v136;
          while (2)
          {
            v138 = 0;
            v139 = v296;
            v314 = v39;
LABEL_75:
            v317 = v139;
            v140 = *v324;
            v141 = v322 + v138;
            v142 = v325;
            _s15ConversationKit11ParticipantVWOcTm_17(v322 + v138 + *v324, v325);
            v315 = v323 + v138;
            _s15ConversationKit11ParticipantVWOcTm_17(v323 + v138 + v140, v331);
            v143 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            v321 = &v286;
            v144 = *(void *)(*(void *)(v143 - 8) + 64);
            MEMORY[0x1F4188790](v143 - 8);
            v145 = (char *)&v286 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
            v146 = v310;
            _s15ConversationKit11ParticipantVWOcTm_17(v142, v310);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            v316 = v141;
            if (EnumCaseMultiPayload == 4)
            {
              v148 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              v149 = v146 + *(int *)(v148 + 48);
              outlined consume of Participant.CopresenceInfo?(*(void *)(v146 + *(int *)(v148 + 64)), *(void *)(v146 + *(int *)(v148 + 64) + 8));
              v150 = type metadata accessor for Date();
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v150 - 8) + 32))((char *)&v286 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0), v146, v150);
              outlined destroy of Participant.MediaInfo(v149);
              v151 = (char *)&v286 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
              v152 = 0;
              v153 = v150;
            }
            else
            {
              _s15ConversationKit11ParticipantVWOhTm_11(v146, (void (*)(void))type metadata accessor for Participant.State);
              v153 = type metadata accessor for Date();
              v151 = (char *)&v286 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
              v152 = 1;
            }
            v154 = __swift_storeEnumTagSinglePayload((uint64_t)v151, v152, 1, v153);
            MEMORY[0x1F4188790](v154);
            v155 = (char *)&v286 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
            _s15ConversationKit11ParticipantVWOcTm_17(v331, (uint64_t)v6);
            v156 = swift_getEnumCaseMultiPayload();
            v319 = v138;
            if (v156 == 4)
            {
              v157 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
              v158 = (uint64_t)&v6[*(int *)(v157 + 48)];
              outlined consume of Participant.CopresenceInfo?(*(void *)&v6[*(int *)(v157 + 64)], *(void *)&v6[*(int *)(v157 + 64) + 8]);
              v159 = type metadata accessor for Date();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 32))(v155, v6, v159);
              outlined destroy of Participant.MediaInfo(v158);
              v160 = (uint64_t)v155;
              v161 = 0;
            }
            else
            {
              _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v6, (void (*)(void))type metadata accessor for Participant.State);
              v159 = type metadata accessor for Date();
              v160 = (uint64_t)v155;
              v161 = 1;
            }
            __swift_storeEnumTagSinglePayload(v160, v161, 1, v159);
            v162 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
            v320 = &v286;
            v163 = MEMORY[0x1F4188790](v162 - 8);
            v165 = (char *)&v286 - ((v164 + 15) & 0xFFFFFFFFFFFFFFF0);
            v166 = (uint64_t)&v165[*(int *)(v163 + 56)];
            outlined init with take of Date?((uint64_t)v145, (uint64_t)v165);
            outlined init with take of Date?((uint64_t)v155, v166);
            type metadata accessor for Date();
            v167 = __swift_getEnumTagSinglePayload((uint64_t)v165, 1, v159);
            v168 = __swift_getEnumTagSinglePayload(v166, 1, v159);
            v318 = &v286;
            if (v167 == 1)
            {
              v169 = v312;
              if (v168 != 1)
              {
                outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v166, (uint64_t *)&demangling cache variable for type metadata for Date?);
                _s15ConversationKit11ParticipantVWOhTm_11(v331, (void (*)(void))type metadata accessor for Participant);
                _s15ConversationKit11ParticipantVWOhTm_11(v325, (void (*)(void))type metadata accessor for Participant);
                Swift::Int v13 = v313;
                unint64_t v18 = v306;
LABEL_110:
                v223 = v314;
LABEL_111:
                uint64_t v39 = v223 + 1;
                v323 += v311;
                v322 += v311;
                if (v39 == v292)
                {
                  uint64_t v39 = v292;
                  goto LABEL_113;
                }
                continue;
              }
              v170 = *(void **)(v325 + *(int *)(v312 + 28));
              if (v170)
              {
                v171 = v170;
                v172 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v171);
                if (v173)
                {
                  v174 = (void (*)(void))v172;
                  v175 = v173;
                  if (objc_msgSend(v171, sel_shouldHideContact))
                  {
                    v176 = type metadata accessor for PersonNameComponents();
                    v309 = (uint64_t (*)(uint64_t))&v286;
                    v177 = *(void *)(v176 - 8);
                    MEMORY[0x1F4188790](v176);
                    v179 = (char *)&v286 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0);
                    swift_bridgeObjectRetain();
                    PersonNameComponents.init()();
                    PersonNameComponents.givenName.setter();
                    PersonNameComponents.familyName.setter();
                    if (one-time initialization token for initials != -1) {
                      swift_once();
                    }
                    swift_beginAccess();
                    v180 = (id)static NSPersonNameComponentsFormatter.initials;
                    v181 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                    v182 = objc_msgSend(v180, sel_stringFromPersonNameComponents_, v181);

                    v183 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v185 = v184;

                    (*(void (**)(char *, uint64_t))(v177 + 8))(v179, v176);
                    v328 = v183;
                    v329 = v185;
                    lazy protocol witness table accessor for type String and conformance String();
                    StringProtocol.localizedUppercase.getter();

                    swift_bridgeObjectRelease();
                    v186 = 0;
                    v169 = v312;
LABEL_95:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    v326 = v174;
                    v327 = v175;
                    v199 = *(void **)(v331 + *(int *)(v169 + 28));
                    v309 = v175;
                    if (v199)
                    {
                      v200 = v199;
                      v201 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v200);
                      if (v202)
                      {
                        v203 = (void *)v201;
                        v204 = v202;
                        if (objc_msgSend(v200, sel_shouldHideContact))
                        {
                          v304 = v203;
                          v205 = type metadata accessor for PersonNameComponents();
                          v301 = (uint64_t (*)(uint64_t))&v286;
                          v206 = *(void *)(v205 - 8);
                          MEMORY[0x1F4188790](v205);
                          v208 = (char *)&v286 - ((v207 + 15) & 0xFFFFFFFFFFFFFFF0);
                          swift_bridgeObjectRetain();
                          PersonNameComponents.init()();
                          PersonNameComponents.givenName.setter();
                          PersonNameComponents.familyName.setter();
                          if (one-time initialization token for initials != -1) {
                            swift_once();
                          }
                          swift_beginAccess();
                          v209 = (id)static NSPersonNameComponentsFormatter.initials;
                          v210 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                          v211 = objc_msgSend(v209, sel_stringFromPersonNameComponents_, v210);

                          v212 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                          v214 = v213;

                          (*(void (**)(char *, uint64_t))(v206 + 8))(v208, v205);
                          v328 = v212;
                          v329 = v214;
                          lazy protocol witness table accessor for type String and conformance String();
                          StringProtocol.localizedUppercase.getter();

                          swift_bridgeObjectRelease();
                          v215 = 0;
                          v216 = v306;
                          v217 = v304;
LABEL_104:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();

                          v328 = v217;
                          v329 = v204;
                          lazy protocol witness table accessor for type String and conformance String();
                          v220 = StringProtocol.localizedCompare<A>(_:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v194 = v220 == 1;
                          unint64_t v18 = v216;
LABEL_105:
                          _s15ConversationKit11ParticipantVWOhTm_11(v331, (void (*)(void))type metadata accessor for Participant);
                          _s15ConversationKit11ParticipantVWOhTm_11(v325, (void (*)(void))type metadata accessor for Participant);
                          Swift::Int v6 = v308;
                          Swift::Int v13 = v313;
                          v189 = v319;
                          if ((v194 & 1) == 0) {
                            goto LABEL_110;
                          }
                          goto LABEL_106;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                      }
                    }
                    v218 = v307;
                    _s15ConversationKit11ParticipantVWOcTm_17(v331, v307);
                    swift_retain();
                    ParticipantContactDetailsCache.contactDetails(for:)();
                    v215 = v328;
                    v217 = v329;
                    v204 = v330;
                    v219 = v328;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    swift_release();
                    _s15ConversationKit11ParticipantVWOhTm_11(v218, (void (*)(void))type metadata accessor for Participant);
                    v216 = v306;
                    goto LABEL_104;
                  }

                  swift_bridgeObjectRelease();
                }
                else
                {
                }
              }
              v196 = v307;
              _s15ConversationKit11ParticipantVWOcTm_17(v325, v307);
              swift_retain();
              ParticipantContactDetailsCache.contactDetails(for:)();
              v186 = v328;
              v309 = (uint64_t (*)(uint64_t))v329;
              v175 = (uint64_t (*)(uint64_t))v330;
              v197 = v328;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_release();
              v198 = v196;
              v174 = (void (*)(void))v309;
              _s15ConversationKit11ParticipantVWOhTm_11(v198, (void (*)(void))type metadata accessor for Participant);
              goto LABEL_95;
            }
            break;
          }
          v187 = *(void *)(v159 - 8);
          v188 = v187;
          if (v168 != 1)
          {
            v309 = (uint64_t (*)(uint64_t))&v286;
            v190 = *(void *)(v187 + 64);
            MEMORY[0x1F4188790](v168);
            v191 = (v190 + 15) & 0xFFFFFFFFFFFFFFF0;
            v192 = *(uint64_t (**)(char *, char *, uint64_t))(v188 + 32);
            v193 = v192((char *)&v286 - v191, v165, v159);
            v304 = &v286;
            MEMORY[0x1F4188790](v193);
            v192((char *)&v286 - v191, (char *)v166, v159);
            unint64_t v18 = v306;
            v194 = static Date.< infix(_:_:)();
            v195 = *(void (**)(char *, uint64_t))(v188 + 8);
            v195((char *)&v286 - v191, v159);
            v195((char *)&v286 - v191, v159);
            goto LABEL_105;
          }
          (*(void (**)(char *, uint64_t))(v187 + 8))(v165, v159);
          _s15ConversationKit11ParticipantVWOhTm_11(v331, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOhTm_11(v325, (void (*)(void))type metadata accessor for Participant);
          Swift::Int v13 = v313;
          v189 = v319;
LABEL_106:
          v221 = *v324;
          if (!*v324) {
            goto LABEL_216;
          }
          v222 = v221 + v323 + v189;
          outlined init with take of Participant(v221 + v322 + v189, (uint64_t)v18);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of Participant((uint64_t)v18, v222);
          v138 = v189 - v311;
          v139 = v317 + 1;
          v223 = v314;
          if (v314 == v317 + 1) {
            goto LABEL_111;
          }
          goto LABEL_75;
        }
LABEL_113:
        char v35 = v296;
      }
LABEL_114:
      if (v39 < v35) {
        goto LABEL_208;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v314 = v39;
      if (isUniquelyReferenced_nonNull_native) {
        Swift::Int v36 = v294;
      }
      else {
        Swift::Int v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v294 + 2) + 1, 1, v294);
      }
      v226 = *((void *)v36 + 2);
      v225 = *((void *)v36 + 3);
      v227 = v226 + 1;
      if (v226 >= v225 >> 1) {
        Swift::Int v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v225 > 1), v226 + 1, 1, v36);
      }
      *((void *)v36 + 2) = v227;
      v228 = v36 + 32;
      v229 = &v36[16 * v226 + 32];
      v230 = v314;
      *(void *)v229 = v296;
      *((void *)v229 + 1) = v230;
      if (v226)
      {
        uint64_t v38 = (uint64_t)v297;
        while (1)
        {
          v231 = v227 - 1;
          if (v227 >= 4)
          {
            v236 = &v228[16 * v227];
            v237 = *((void *)v236 - 8);
            v238 = *((void *)v236 - 7);
            v242 = __OFSUB__(v238, v237);
            v239 = v238 - v237;
            if (v242) {
              goto LABEL_193;
            }
            v241 = *((void *)v236 - 6);
            v240 = *((void *)v236 - 5);
            v242 = __OFSUB__(v240, v241);
            v234 = v240 - v241;
            v235 = v242;
            if (v242) {
              goto LABEL_194;
            }
            v243 = v227 - 2;
            v244 = &v228[16 * v227 - 32];
            v246 = *(void *)v244;
            v245 = *((void *)v244 + 1);
            v242 = __OFSUB__(v245, v246);
            v247 = v245 - v246;
            if (v242) {
              goto LABEL_195;
            }
            v242 = __OFADD__(v234, v247);
            v248 = v234 + v247;
            if (v242) {
              goto LABEL_197;
            }
            if (v248 >= v239)
            {
              v266 = &v228[16 * v231];
              v268 = *(void *)v266;
              v267 = *((void *)v266 + 1);
              v242 = __OFSUB__(v267, v268);
              v269 = v267 - v268;
              if (v242) {
                goto LABEL_203;
              }
              v259 = v234 < v269;
              goto LABEL_152;
            }
          }
          else
          {
            if (v227 != 3)
            {
              v260 = *((void *)v36 + 4);
              v261 = *((void *)v36 + 5);
              v242 = __OFSUB__(v261, v260);
              v253 = v261 - v260;
              v254 = v242;
              goto LABEL_146;
            }
            v233 = *((void *)v36 + 4);
            v232 = *((void *)v36 + 5);
            v242 = __OFSUB__(v232, v233);
            v234 = v232 - v233;
            v235 = v242;
          }
          if (v235) {
            goto LABEL_196;
          }
          v243 = v227 - 2;
          v249 = &v228[16 * v227 - 32];
          v251 = *(void *)v249;
          v250 = *((void *)v249 + 1);
          v252 = __OFSUB__(v250, v251);
          v253 = v250 - v251;
          v254 = v252;
          if (v252) {
            goto LABEL_198;
          }
          v255 = &v228[16 * v231];
          v257 = *(void *)v255;
          v256 = *((void *)v255 + 1);
          v242 = __OFSUB__(v256, v257);
          v258 = v256 - v257;
          if (v242) {
            goto LABEL_200;
          }
          if (__OFADD__(v253, v258)) {
            goto LABEL_202;
          }
          if (v253 + v258 >= v234)
          {
            v259 = v234 < v258;
LABEL_152:
            if (v259) {
              v231 = v243;
            }
            goto LABEL_154;
          }
LABEL_146:
          if (v254) {
            goto LABEL_199;
          }
          v262 = &v228[16 * v231];
          v264 = *(void *)v262;
          v263 = *((void *)v262 + 1);
          v242 = __OFSUB__(v263, v264);
          v265 = v263 - v264;
          if (v242) {
            goto LABEL_201;
          }
          if (v265 < v253) {
            goto LABEL_163;
          }
LABEL_154:
          v270 = v231 - 1;
          if (v231 - 1 >= v227)
          {
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
            goto LABEL_213;
          }
          if (!*v324) {
            goto LABEL_217;
          }
          v271 = v36;
          v272 = &v228[16 * v270];
          v273 = *(void *)v272;
          v274 = &v228[16 * v231];
          v275 = *((void *)v274 + 1);
          v276 = v303;
          specialized _merge<A>(low:mid:high:buffer:by:)(*v324 + *(void *)(v300 + 72) * *(void *)v272, *v324 + *(void *)(v300 + 72) * *(void *)v274, *v324 + *(void *)(v300 + 72) * v275, v298);
          v303 = v276;
          if (v276)
          {
LABEL_169:
            swift_bridgeObjectRelease();
            goto LABEL_170;
          }
          if (v275 < v273) {
            goto LABEL_190;
          }
          if (v231 > *((void *)v271 + 2)) {
            goto LABEL_191;
          }
          *(void *)v272 = v273;
          *(void *)&v228[16 * v270 + 8] = v275;
          v277 = *((void *)v271 + 2);
          if (v231 >= v277) {
            goto LABEL_192;
          }
          v227 = v277 - 1;
          memmove(&v228[16 * v231], v274 + 16, 16 * (v277 - 1 - v231));
          Swift::Int v36 = v271;
          *((void *)v271 + 2) = v277 - 1;
          v259 = v277 > 2;
          Swift::Int v6 = v308;
          Swift::Int v13 = v313;
          uint64_t v38 = (uint64_t)v297;
          if (!v259) {
            goto LABEL_163;
          }
        }
      }
      v227 = 1;
      uint64_t v38 = (uint64_t)v297;
LABEL_163:
      uint64_t v37 = v324[1];
      char v35 = v314;
      if (v314 >= v37) {
        goto LABEL_173;
      }
    }
  }
  Swift::Int v36 = (char *)MEMORY[0x1E4FBC860];
  v227 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_173:
  if (v227 >= 2)
  {
    v278 = *v324;
    do
    {
      v279 = v227 - 2;
      if (v227 < 2) {
        goto LABEL_204;
      }
      if (!v278) {
        goto LABEL_219;
      }
      v280 = v36;
      v281 = *(void *)&v36[16 * v279 + 32];
      v282 = *(void *)&v36[16 * v227 + 24];
      v283 = v303;
      specialized _merge<A>(low:mid:high:buffer:by:)(v278 + *(void *)(v300 + 72) * v281, v278 + *(void *)(v300 + 72) * *(void *)&v36[16 * v227 + 16], v278 + *(void *)(v300 + 72) * v282, v298);
      v303 = v283;
      if (v283) {
        goto LABEL_169;
      }
      if (v282 < v281) {
        goto LABEL_205;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v280 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v280);
      }
      if (v279 >= *((void *)v280 + 2)) {
        goto LABEL_206;
      }
      v284 = &v280[16 * v279 + 32];
      *(void *)v284 = v281;
      *((void *)v284 + 1) = v282;
      v285 = *((void *)v280 + 2);
      if (v227 > v285) {
        goto LABEL_207;
      }
      memmove(&v280[16 * v227 + 16], &v280[16 * v227 + 32], 16 * (v285 - v227));
      Swift::Int v36 = v280;
      *((void *)v280 + 2) = v285 - 1;
      v227 = v285 - 1;
    }
    while (v285 > 2);
  }
  swift_bridgeObjectRelease();
  if (v289 < -1) {
    goto LABEL_215;
  }
  *(void *)(v288 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::Int *v14;
  Swift::Int *v15;
  Swift::Int *v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  void *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::Int *v28;
  char *v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  Swift::Int *v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v44)(void);
  char *v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void (*v50)(char *);
  uint64_t v51;
  Swift::Int v52;
  char *v53;
  uint64_t v54;
  Swift::Int *v55;
  char *v56;
  void (*v57)(char *);
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  Swift::Int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  Swift::Int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  Swift::Int v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *);
  uint64_t v142;
  void *v143;
  Swift::Int v144;
  uint64_t (**v145)(char *, uint64_t, uint64_t);
  uint64_t (*v146)(void);
  void (*v147)(char *, char *, uint64_t);
  Swift::Int *v148;
  Swift::Int *v149;
  Swift::Int *v150;
  uint64_t *v151;
  uint64_t v152;

  uint64_t v2 = v1;
  char v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, v3);
      }
      return;
    }
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  Swift::Int v6 = v5;
  uint64_t v132 = specialized static Array._allocateUninitialized(_:)(v4 / 2);
  v133 = v4;
  v138 = v7;
  if (v4 < 1)
  {
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v69 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_103:
    if (v69 < 2) {
      goto LABEL_117;
    }
    uint64_t v123 = *v3;
    while (1)
    {
      v124 = v69 - 2;
      if (v69 < 2) {
        break;
      }
      if (!v123) {
        goto LABEL_149;
      }
      v125 = *(void *)&v9[16 * v124 + 32];
      uint64_t v126 = *(void *)&v9[16 * v69 + 24];
      uint64_t v127 = *(void *)&v9[16 * v69 + 16];
      v128 = type metadata accessor for IndexPath();
      specialized _merge<A>(low:mid:high:buffer:by:)(v123 + *(void *)(*(void *)(v128 - 8) + 72) * v125, v123 + *(void *)(*(void *)(v128 - 8) + 72) * v127, v123 + *(void *)(*(void *)(v128 - 8) + 72) * v126, v138);
      if (v2) {
        goto LABEL_115;
      }
      if (v126 < v125) {
        goto LABEL_136;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
      }
      if (v124 >= *((void *)v9 + 2)) {
        goto LABEL_137;
      }
      uint64_t v129 = &v9[16 * v124 + 32];
      *(void *)uint64_t v129 = v125;
      *((void *)v129 + 1) = v126;
      v130 = *((void *)v9 + 2);
      if (v69 > v130) {
        goto LABEL_138;
      }
      memmove(&v9[16 * v69 + 16], &v9[16 * v69 + 32], 16 * (v130 - v69));
      *((void *)v9 + 2) = v130 - 1;
      uint64_t v69 = v130 - 1;
      if (v130 <= 2) {
        goto LABEL_117;
      }
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  v131 = v6;
  uint64_t v8 = 0;
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  v151 = v3;
  while (1)
  {
    uint64_t v10 = (void (*)(char *))(v8 + 1);
    v137 = v8;
    if ((uint64_t)(v8 + 1) >= v4)
    {
      id v26 = (uint64_t)v8;
    }
    else
    {
      v134 = v9;
      v135 = v2;
      unint64_t v11 = *v3;
      uint64_t v12 = type metadata accessor for IndexPath();
      v152 = (uint64_t)&v131;
      v136 = *(char **)(v12 - 8);
      Swift::Int v13 = v136;
      unint64_t v14 = (Swift::Int *)*((void *)v136 + 9);
      v141 = v10;
      uint64_t v15 = v14;
      v139 = (char *)v11;
      uint64_t v16 = (Swift::Int *)*((void *)v136 + 8);
      MEMORY[0x1F4188790](v12);
      uint64_t v17 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF0;
      v144 = (Swift::Int)&v131 - v17;
      unint64_t v18 = (uint64_t (*)(void))*((void *)v13 + 2);
      uint64_t v19 = v18();
      v149 = &v131;
      v150 = v16;
      MEMORY[0x1F4188790](v19);
      uint64_t v20 = (char *)&v131 - v17;
      v146 = v18;
      v147 = (void (*)(char *, char *, uint64_t))(v13 + 16);
      ((void (*)(char *))v18)((char *)&v131 - v17);
      id v21 = _s10Foundation4UUIDVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF68]);
      uint64_t v22 = v144;
      v145 = (uint64_t (**)(char *, uint64_t, uint64_t))v21;
      LODWORD(v148) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = v136 + 8;
      id v24 = (void (*)(char *, uint64_t))*((void *)v136 + 1);
      v24(v20, v12);
      v142 = (uint64_t)v24;
      v143 = v23;
      uint64_t v25 = ((uint64_t (*)(Swift::Int, uint64_t))v24)(v22, v12);
      id v26 = (uint64_t)v137;
      v149 = v15;
      v144 = (Swift::Int)(v137 + 2);
      if ((uint64_t)(v137 + 2) < v4)
      {
        id v27 = v139;
        v140 = (void)v15 * (void)(v137 + 2);
        v141 = (void (*)(char *))((void)v15 * (void)v141);
        while (1)
        {
          v152 = (uint64_t)&v131;
          id v28 = v150;
          MEMORY[0x1F4188790](v25);
          uint64_t v29 = (char *)&v131 - (((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v30 = v146;
          uint64_t v31 = ((uint64_t (*)(char *))v146)(v29);
          MEMORY[0x1F4188790](v31);
          ((void (*)(char *))v30)(v29);
          LODWORD(v28) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v32 = (uint64_t (*)(char *, uint64_t))v142;
          ((void (*)(char *, uint64_t))v142)(v29, v12);
          uint64_t v25 = v32(v29, v12);
          if ((v148 ^ v28)) {
            break;
          }
          id v27 = (char *)v149 + (void)v27;
          if (++v144 >= v4)
          {
            v144 = v4;
            break;
          }
        }
        char v3 = v151;
        id v26 = (uint64_t)v137;
      }
      uint64_t v9 = v134;
      uint64_t v2 = v135;
      if (v148)
      {
        uint64_t v10 = (void (*)(char *))v144;
        if (v144 < v26) {
          goto LABEL_142;
        }
        if (v26 < v144)
        {
          v145 = (uint64_t (**)(char *, uint64_t, uint64_t))v4;
          Swift::Int v33 = 0;
          v152 = (uint64_t)(v136 + 32);
          uint64_t v34 = v149;
          char v35 = (void)v149 * (v144 - 1);
          Swift::Int v36 = v144 * (void)v149;
          uint64_t v37 = (uint64_t (*)(void))v26;
          uint64_t v38 = v26 * (void)v149;
          do
          {
            if ((char *)v37 != (char *)((char *)v10 + v33 - 1))
            {
              uint64_t v39 = v139;
              if (!v139) {
                goto LABEL_148;
              }
              v148 = &v131;
              uint64_t v40 = &v139[v38];
              v146 = (uint64_t (*)(void))&v139[v35];
              MEMORY[0x1F4188790](v25);
              uint64_t v42 = (char *)&v131 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
              v147 = *(void (**)(char *, char *, uint64_t))v152;
              v147(v42, &v39[v38], v12);
              if (v38 < v35 || v40 >= &v39[v36])
              {
                uint64_t v44 = v146;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v44 = v146;
                if (v38 != v35) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              uint64_t v25 = ((uint64_t (*)(uint64_t (*)(void), char *, uint64_t))v147)(v44, v42, v12);
              uint64_t v34 = v149;
              uint64_t v10 = (void (*)(char *))v144;
            }
            uint64_t v37 = (uint64_t (*)(void))((char *)v37 + 1);
            --v33;
            v35 -= (uint64_t)v34;
            v36 -= (uint64_t)v34;
            v38 += (uint64_t)v34;
          }
          while ((uint64_t)v37 < (uint64_t)v10 + v33);
          uint64_t v9 = v134;
          uint64_t v2 = v135;
          char v3 = v151;
          id v26 = (uint64_t)v137;
          Swift::Int v4 = (Swift::Int)v145;
        }
      }
      else
      {
        uint64_t v10 = (void (*)(char *))v144;
      }
    }
    v144 = (Swift::Int)v10;
    if ((uint64_t)v10 < v4)
    {
      if (__OFSUB__(v10, v26)) {
        goto LABEL_140;
      }
      if ((uint64_t)v10 - v26 < v131)
      {
        if (__OFADD__(v26, v131)) {
          goto LABEL_143;
        }
        if (v26 + v131 >= v4) {
          BOOL v45 = (char *)v4;
        }
        else {
          BOOL v45 = (char *)(v26 + v131);
        }
        if ((uint64_t)v45 < v26) {
          goto LABEL_144;
        }
        uint64_t v46 = v144;
        if ((char *)v144 != v45)
        {
          v134 = v9;
          v135 = v2;
          uint64_t v47 = type metadata accessor for IndexPath();
          id v48 = v47;
          id v49 = *(void **)(v47 - 8);
          id v50 = (void (*)(char *))v49[2];
          v140 = (uint64_t)(v49 + 2);
          v141 = v50;
          uint64_t v51 = v49[9];
          v148 = (Swift::Int *)v49[8];
          v139 = (char *)(v49 + 1);
          v145 = (uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 4);
          v152 = v51 * (v46 - 1);
          v142 = v51;
          uint64_t v52 = v46 * v51;
          int v53 = (char *)v46;
          v136 = v45;
          do
          {
            uint64_t v54 = 0;
            v143 = (void *)v52;
            v144 = (Swift::Int)v53;
            while (1)
            {
              v147 = (void (*)(char *, char *, uint64_t))v26;
              v150 = &v131;
              v146 = (uint64_t (*)(void))(v52 + v54);
              int v55 = v148;
              MEMORY[0x1F4188790](v47);
              uint64_t v56 = (char *)&v131 - (((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF0);
              unint64_t v57 = v141;
              unint64_t v58 = ((uint64_t (*)(char *))v141)(v56);
              v149 = &v131;
              MEMORY[0x1F4188790](v58);
              v57(v56);
              _s10Foundation4UUIDVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF68]);
              LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)();
              unint64_t v59 = *(uint64_t (**)(char *, uint64_t))v139;
              (*(void (**)(char *, uint64_t))v139)(v56, v48);
              uint64_t v47 = v59(v56, v48);
              if ((v57 & 1) == 0) {
                break;
              }
              uint64_t v60 = *v151;
              if (!*v151) {
                goto LABEL_146;
              }
              uint64_t v52 = (Swift::Int)v143;
              uint64_t v61 = (uint64_t)v143 + v60 + v54;
              unint64_t v62 = (char *)(v60 + v152 + v54);
              MEMORY[0x1F4188790](v47);
              uint64_t v64 = (char *)&v131 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v65 = *v145;
              (*v145)(v64, v61, v48);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v47 = v65(v62, (uint64_t)v64, v48);
              v54 -= v142;
              id v26 = (uint64_t)v147 + 1;
              char v66 = v144;
              char v3 = v151;
              if ((void (*)(char *, char *, uint64_t))v144 == (void (*)(char *, char *, uint64_t))((char *)v147 + 1)) {
                goto LABEL_46;
              }
            }
            char v3 = v151;
            uint64_t v52 = (Swift::Int)v143;
            char v66 = v144;
LABEL_46:
            int v53 = (char *)(v66 + 1);
            v152 += v142;
            v52 += v142;
            id v26 = (uint64_t)v137;
          }
          while (v53 != v136);
          v144 = (Swift::Int)v136;
          uint64_t v9 = v134;
          uint64_t v2 = v135;
        }
      }
    }
    if (v144 < v26) {
      goto LABEL_139;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    uint64_t v68 = *((void *)v9 + 2);
    int v67 = *((void *)v9 + 3);
    uint64_t v69 = v68 + 1;
    if (v68 >= v67 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v69;
    uint64_t v70 = v9 + 32;
    uint64_t v71 = &v9[16 * v68 + 32];
    uint64_t v72 = v144;
    *(void *)uint64_t v71 = v26;
    *((void *)v71 + 1) = v72;
    if (v68) {
      break;
    }
    uint64_t v69 = 1;
LABEL_97:
    Swift::Int v4 = v3[1];
    uint64_t v8 = (char *)v144;
    if (v144 >= v4) {
      goto LABEL_103;
    }
  }
  v150 = (Swift::Int *)(v9 + 32);
  while (1)
  {
    BOOL v73 = v69 - 1;
    if (v69 >= 4)
    {
      uint64_t v78 = &v70[16 * v69];
      uint64_t v79 = *((void *)v78 - 8);
      v80 = *((void *)v78 - 7);
      uint64_t v84 = __OFSUB__(v80, v79);
      uint64_t v81 = v80 - v79;
      if (v84) {
        goto LABEL_124;
      }
      BOOL v83 = *((void *)v78 - 6);
      uint64_t v82 = *((void *)v78 - 5);
      uint64_t v84 = __OFSUB__(v82, v83);
      uint64_t v76 = v82 - v83;
      uint64_t v77 = v84;
      if (v84) {
        goto LABEL_125;
      }
      char v85 = v69 - 2;
      v86 = &v70[16 * v69 - 32];
      uint64_t v88 = *(void *)v86;
      uint64_t v87 = *((void *)v86 + 1);
      uint64_t v84 = __OFSUB__(v87, v88);
      uint64_t v89 = v87 - v88;
      if (v84) {
        goto LABEL_126;
      }
      uint64_t v84 = __OFADD__(v76, v89);
      BOOL v90 = v76 + v89;
      if (v84) {
        goto LABEL_128;
      }
      if (v90 >= v81)
      {
        uint64_t v108 = &v70[16 * v73];
        uint64_t v110 = *(void *)v108;
        unint64_t v109 = *((void *)v108 + 1);
        uint64_t v84 = __OFSUB__(v109, v110);
        uint64_t v111 = v109 - v110;
        if (v84) {
          goto LABEL_134;
        }
        unint64_t v101 = v76 < v111;
        goto LABEL_86;
      }
    }
    else
    {
      if (v69 != 3)
      {
        v102 = *((void *)v9 + 4);
        uint64_t v103 = *((void *)v9 + 5);
        uint64_t v84 = __OFSUB__(v103, v102);
        uint64_t v95 = v103 - v102;
        uint64_t v96 = v84;
        goto LABEL_80;
      }
      uint64_t v75 = *((void *)v9 + 4);
      unint64_t v74 = *((void *)v9 + 5);
      uint64_t v84 = __OFSUB__(v74, v75);
      uint64_t v76 = v74 - v75;
      uint64_t v77 = v84;
    }
    if (v77) {
      goto LABEL_127;
    }
    char v85 = v69 - 2;
    uint64_t v91 = &v70[16 * v69 - 32];
    v93 = *(void *)v91;
    uint64_t v92 = *((void *)v91 + 1);
    uint64_t v94 = __OFSUB__(v92, v93);
    uint64_t v95 = v92 - v93;
    uint64_t v96 = v94;
    if (v94) {
      goto LABEL_129;
    }
    v97 = &v70[16 * v73];
    uint64_t v99 = *(void *)v97;
    uint64_t v98 = *((void *)v97 + 1);
    uint64_t v84 = __OFSUB__(v98, v99);
    uint64_t v100 = v98 - v99;
    if (v84) {
      goto LABEL_131;
    }
    if (__OFADD__(v95, v100)) {
      goto LABEL_133;
    }
    if (v95 + v100 >= v76)
    {
      unint64_t v101 = v76 < v100;
LABEL_86:
      if (v101) {
        BOOL v73 = v85;
      }
      goto LABEL_88;
    }
LABEL_80:
    if (v96) {
      goto LABEL_130;
    }
    v104 = &v70[16 * v73];
    unint64_t v106 = *(void *)v104;
    uint64_t v105 = *((void *)v104 + 1);
    uint64_t v84 = __OFSUB__(v105, v106);
    v107 = v105 - v106;
    if (v84) {
      goto LABEL_132;
    }
    if (v107 < v95) {
      goto LABEL_97;
    }
LABEL_88:
    v112 = v73 - 1;
    if (v73 - 1 >= v69)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    unint64_t v113 = v2;
    uint64_t v114 = *v3;
    if (!*v3) {
      goto LABEL_147;
    }
    uint64_t v115 = &v70[16 * v112];
    v116 = v70;
    uint64_t v117 = *(void *)v115;
    Swift::Int v118 = v73;
    v119 = (uint64_t *)&v116[16 * v73];
    uint64_t v120 = v119[1];
    v152 = *v119;
    v121 = type metadata accessor for IndexPath();
    specialized _merge<A>(low:mid:high:buffer:by:)(v114 + *(void *)(*(void *)(v121 - 8) + 72) * v117, v114 + *(void *)(*(void *)(v121 - 8) + 72) * v152, v114 + *(void *)(*(void *)(v121 - 8) + 72) * v120, v138);
    uint64_t v2 = v113;
    if (v113) {
      break;
    }
    if (v120 < v117) {
      goto LABEL_121;
    }
    if (v118 > *((void *)v9 + 2)) {
      goto LABEL_122;
    }
    *(void *)uint64_t v115 = v117;
    uint64_t v70 = (char *)v150;
    v150[2 * v112 + 1] = v120;
    uint64_t v122 = *((void *)v9 + 2);
    if (v118 >= v122) {
      goto LABEL_123;
    }
    uint64_t v69 = v122 - 1;
    memmove(v119, v119 + 2, 16 * (v122 - 1 - v118));
    *((void *)v9 + 2) = v122 - 1;
    char v3 = v151;
    if (v122 <= 2) {
      goto LABEL_97;
    }
  }
LABEL_115:
  swift_bridgeObjectRelease();
  if (v133 >= -1) {
    goto LABEL_118;
  }
  __break(1u);
LABEL_117:
  swift_bridgeObjectRelease();
  if (v133 >= -1)
  {
LABEL_118:
    *(void *)(v132 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  void **v7;
  Swift::Int v8;
  char *v9;
  char **v10;
  Swift::Int v11;
  Swift::Int v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::Int v31;
  uint64_t v32;
  Swift::Int v33;
  void *v34;
  id v35;
  id v36;
  char v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  Swift::Int v97;
  Swift::Int v98;
  int v99;
  Swift::Int v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;

  char v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_128;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return;
  }
  Swift::Int v5 = v4;
  Swift::Int v6 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v102 = v3;
  uint64_t v103 = v7;
  uint64_t v105 = v6;
  uint64_t v96 = a1;
  if (v3 <= 0) {
    goto LABEL_92;
  }
  v97 = v5;
  uint64_t v8 = 0;
  v104 = *a1;
  uint64_t v95 = *a1 - 8;
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v10 = &selRef_lagunaPullBackEnabled;
  while (1)
  {
    unint64_t v11 = v8;
    uint64_t v12 = v8 + 1;
    if (v8 + 1 < v3)
    {
      Swift::Int v13 = *(void **)(v104 + 8 * v8);
      unint64_t v14 = *(id *)(v104 + 8 * v12);
      uint64_t v15 = v13;
      uint64_t v10 = &selRef_lagunaPullBackEnabled;
      uint64_t v16 = v15;
      objc_msgSend(v14, sel_windowLevel);
      objc_msgSend(v16, sel_windowLevel);
      type metadata accessor for UIWindowLevel(0);
      lazy protocol witness table accessor for type UIWindowLevel and conformance UIWindowLevel();
      uint64_t v99 = dispatch thunk of static Comparable.< infix(_:_:)();

      uint64_t v12 = v11 + 2;
      if (v11 + 2 < v3)
      {
        uint64_t v17 = v11;
        while (1)
        {
          unint64_t v18 = v104 + 8 * v17;
          uint64_t v19 = *(void **)(v18 + 8);
          uint64_t v20 = *(id *)(v18 + 16);
          id v21 = v19;
          objc_msgSend(v20, sel_windowLevel);
          objc_msgSend(v21, sel_windowLevel);
          uint64_t v22 = dispatch thunk of static Comparable.< infix(_:_:)();

          if ((v99 ^ v22)) {
            break;
          }
          uint64_t v23 = v17 + 3;
          ++v17;
          char v3 = v102;
          if (v23 >= v102)
          {
            uint64_t v12 = v102;
            goto LABEL_11;
          }
        }
        uint64_t v12 = v17 + 2;
        char v3 = v102;
LABEL_11:
        uint64_t v10 = &selRef_lagunaPullBackEnabled;
      }
      if (v99)
      {
        if (v12 < v11) {
          goto LABEL_129;
        }
        if (v11 < v12)
        {
          id v24 = (uint64_t *)(v95 + 8 * v12);
          uint64_t v25 = v12;
          id v26 = v11;
          id v27 = (uint64_t *)(v104 + 8 * v11);
          do
          {
            if (v26 != --v25)
            {
              if (!v104) {
                goto LABEL_135;
              }
              id v28 = *v27;
              *id v27 = *v24;
              void *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
      }
    }
    if (v12 < v3)
    {
      if (__OFSUB__(v12, v11)) {
        goto LABEL_127;
      }
      if (v12 - v11 < v97)
      {
        if (__OFADD__(v11, v97)) {
          goto LABEL_130;
        }
        if (v11 + v97 < v3) {
          char v3 = v11 + v97;
        }
        if (v3 < v11)
        {
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        if (v12 != v3)
        {
          uint64_t v94 = v9;
          type metadata accessor for UIWindowLevel(0);
          uint64_t v29 = v95 + 8 * v12;
          uint64_t v98 = v11;
          uint64_t v100 = v3;
          do
          {
            uint64_t v30 = *(void **)(v104 + 8 * v12);
            uint64_t v31 = v11;
            uint64_t v32 = v29;
            while (1)
            {
              Swift::Int v33 = v12;
              uint64_t v34 = *(void **)v32;
              char v35 = v30;
              Swift::Int v36 = v34;
              [v35 v10[30]];
              [v36 v10[30]];
              lazy protocol witness table accessor for type UIWindowLevel and conformance UIWindowLevel();
              uint64_t v37 = dispatch thunk of static Comparable.< infix(_:_:)();

              if ((v37 & 1) == 0) {
                break;
              }
              if (!v104) {
                goto LABEL_133;
              }
              uint64_t v12 = v33;
              uint64_t v38 = *(void **)v32;
              uint64_t v30 = *(void **)(v32 + 8);
              *(void *)uint64_t v32 = v30;
              *(void *)(v32 + 8) = v38;
              v32 -= 8;
              if (v33 == ++v31) {
                goto LABEL_35;
              }
            }
            uint64_t v12 = v33;
LABEL_35:
            ++v12;
            v29 += 8;
            unint64_t v11 = v98;
          }
          while (v12 != v100);
          uint64_t v12 = v100;
          uint64_t v9 = v94;
        }
      }
    }
    if (v12 < v11) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    uint64_t v40 = *((void *)v9 + 2);
    uint64_t v39 = *((void *)v9 + 3);
    uint64_t v41 = v40 + 1;
    if (v40 >= v39 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v41;
    uint64_t v42 = v9 + 32;
    uint64_t v43 = &v9[16 * v40 + 32];
    *(void *)uint64_t v43 = v11;
    *((void *)v43 + 1) = v12;
    unint64_t v101 = v12;
    if (v40) {
      break;
    }
    uint64_t v41 = 1;
LABEL_85:
    uint64_t v8 = v101;
    char v3 = v102;
    if (v101 >= v102) {
      goto LABEL_93;
    }
  }
  while (1)
  {
    uint64_t v44 = v41 - 1;
    if (v41 >= 4)
    {
      id v49 = &v42[16 * v41];
      id v50 = *((void *)v49 - 8);
      uint64_t v51 = *((void *)v49 - 7);
      int v55 = __OFSUB__(v51, v50);
      uint64_t v52 = v51 - v50;
      if (v55) {
        goto LABEL_111;
      }
      uint64_t v54 = *((void *)v49 - 6);
      int v53 = *((void *)v49 - 5);
      int v55 = __OFSUB__(v53, v54);
      uint64_t v47 = v53 - v54;
      id v48 = v55;
      if (v55) {
        goto LABEL_112;
      }
      uint64_t v56 = v41 - 2;
      unint64_t v57 = &v42[16 * v41 - 32];
      unint64_t v59 = *(void *)v57;
      unint64_t v58 = *((void *)v57 + 1);
      int v55 = __OFSUB__(v58, v59);
      uint64_t v60 = v58 - v59;
      if (v55) {
        goto LABEL_113;
      }
      int v55 = __OFADD__(v47, v60);
      uint64_t v61 = v47 + v60;
      if (v55) {
        goto LABEL_115;
      }
      if (v61 >= v52)
      {
        uint64_t v79 = &v42[16 * v44];
        uint64_t v81 = *(void *)v79;
        v80 = *((void *)v79 + 1);
        int v55 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v55) {
          goto LABEL_121;
        }
        uint64_t v72 = v47 < v82;
        goto LABEL_74;
      }
    }
    else
    {
      if (v41 != 3)
      {
        BOOL v73 = *((void *)v9 + 4);
        unint64_t v74 = *((void *)v9 + 5);
        int v55 = __OFSUB__(v74, v73);
        char v66 = v74 - v73;
        int v67 = v55;
        goto LABEL_68;
      }
      uint64_t v46 = *((void *)v9 + 4);
      BOOL v45 = *((void *)v9 + 5);
      int v55 = __OFSUB__(v45, v46);
      uint64_t v47 = v45 - v46;
      id v48 = v55;
    }
    if (v48) {
      goto LABEL_114;
    }
    uint64_t v56 = v41 - 2;
    unint64_t v62 = &v42[16 * v41 - 32];
    uint64_t v64 = *(void *)v62;
    uint64_t v63 = *((void *)v62 + 1);
    uint64_t v65 = __OFSUB__(v63, v64);
    char v66 = v63 - v64;
    int v67 = v65;
    if (v65) {
      goto LABEL_116;
    }
    uint64_t v68 = &v42[16 * v44];
    uint64_t v70 = *(void *)v68;
    uint64_t v69 = *((void *)v68 + 1);
    int v55 = __OFSUB__(v69, v70);
    uint64_t v71 = v69 - v70;
    if (v55) {
      goto LABEL_118;
    }
    if (__OFADD__(v66, v71)) {
      goto LABEL_120;
    }
    if (v66 + v71 >= v47)
    {
      uint64_t v72 = v47 < v71;
LABEL_74:
      if (v72) {
        uint64_t v44 = v56;
      }
      goto LABEL_76;
    }
LABEL_68:
    if (v67) {
      goto LABEL_117;
    }
    uint64_t v75 = &v42[16 * v44];
    uint64_t v77 = *(void *)v75;
    uint64_t v76 = *((void *)v75 + 1);
    int v55 = __OFSUB__(v76, v77);
    uint64_t v78 = v76 - v77;
    if (v55) {
      goto LABEL_119;
    }
    if (v78 < v66) {
      goto LABEL_85;
    }
LABEL_76:
    char v3 = v44 - 1;
    if (v44 - 1 >= v41)
    {
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    if (!v104) {
      goto LABEL_134;
    }
    BOOL v83 = v9;
    uint64_t v84 = &v42[16 * v3];
    char v85 = *(void *)v84;
    v86 = &v42[16 * v44];
    uint64_t v87 = *((void *)v86 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v104 + 8 * *(void *)v84), (id *)(v104 + 8 * *(void *)v86), v104 + 8 * v87, v103);
    if (v1) {
      break;
    }
    if (v87 < v85) {
      goto LABEL_108;
    }
    if (v44 > *((void *)v83 + 2)) {
      goto LABEL_109;
    }
    *(void *)uint64_t v84 = v85;
    *(void *)&v42[16 * v3 + 8] = v87;
    uint64_t v88 = *((void *)v83 + 2);
    if (v44 >= v88) {
      goto LABEL_110;
    }
    uint64_t v9 = v83;
    uint64_t v41 = v88 - 1;
    memmove(&v42[16 * v44], v86 + 16, 16 * (v88 - 1 - v44));
    *((void *)v83 + 2) = v88 - 1;
    uint64_t v10 = &selRef_lagunaPullBackEnabled;
    if (v88 <= 2) {
      goto LABEL_85;
    }
  }
LABEL_90:
  swift_bridgeObjectRelease();
  if (v102 >= -1) {
    goto LABEL_105;
  }
  __break(1u);
LABEL_92:
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_93:
  if (v41 >= 2)
  {
    uint64_t v89 = *v96;
    while (1)
    {
      char v3 = v41 - 2;
      if (v41 < 2) {
        break;
      }
      if (!v89) {
        goto LABEL_136;
      }
      BOOL v90 = *(void *)&v9[16 * v3 + 32];
      uint64_t v91 = *(void *)&v9[16 * v41 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v89 + 8 * v90), (id *)(v89 + 8 * *(void *)&v9[16 * v41 + 16]), v89 + 8 * v91, v103);
      if (v1) {
        goto LABEL_90;
      }
      if (v91 < v90) {
        goto LABEL_123;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
      }
      if ((unint64_t)v3 >= *((void *)v9 + 2)) {
        goto LABEL_124;
      }
      uint64_t v92 = &v9[16 * v3 + 32];
      *(void *)uint64_t v92 = v90;
      *((void *)v92 + 1) = v91;
      v93 = *((void *)v9 + 2);
      if (v41 > v93) {
        goto LABEL_125;
      }
      memmove(&v9[16 * v41 + 16], &v9[16 * v41 + 32], 16 * (v93 - v41));
      *((void *)v9 + 2) = v93 - 1;
      uint64_t v41 = v93 - 1;
      uint64_t v72 = v93 > 2;
      char v3 = v102;
      if (!v72) {
        goto LABEL_104;
      }
    }
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
LABEL_104:
  swift_bridgeObjectRelease();
  if (v3 >= -1)
  {
LABEL_105:
    *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  Swift::Int v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int EnumCaseMultiPayload;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  Swift::Int v206;
  uint64_t v207;
  void (**v208)(char *, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  uint64_t *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t (*v229)(char *, char *, uint64_t);
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;

  v241 = type metadata accessor for Participant.State(0);
  char v3 = MEMORY[0x1F4188790](v241);
  Swift::Int v5 = (char *)&v202 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v202 - v7;
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  unint64_t v11 = (char *)&v202 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  v217 = (char *)&v202 - v13;
  unint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v202 - v15;
  MEMORY[0x1F4188790](v14);
  v209 = (uint64_t)&v202 - v17;
  unint64_t v18 = type metadata accessor for Participant(0);
  v222 = *(void *)(v18 - 8);
  v223 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  v216 = (uint64_t)&v202 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = MEMORY[0x1F4188790](v19);
  v232 = (uint64_t)&v202 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v243 = (uint64_t)&v202 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v240 = (uint64_t)&v202 - v26;
  id v27 = MEMORY[0x1F4188790](v25);
  v221 = (uint64_t)&v202 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v219 = (uint64_t)&v202 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  v212 = (uint64_t)&v202 - v32;
  MEMORY[0x1F4188790](v31);
  v210 = (uint64_t)&v202 - v33;
  uint64_t v34 = a1[1];
  char v35 = _minimumMergeRunLength(_:)(v34);
  if (v35 >= v34)
  {
    if ((v34 & 0x8000000000000000) == 0)
    {
      if (v34) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v34, 1, a1);
      }
      return;
    }
    goto LABEL_171;
  }
  v206 = v35;
  v224 = v1;
  v204 = specialized static Array._allocateUninitialized(_:)(v34 / 2);
  v220 = v36;
  v205 = v34;
  if (v34 <= 0)
  {
    uint64_t v38 = (char *)MEMORY[0x1E4FBC860];
    v139 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_133:
    if (v139 >= 2)
    {
      v194 = *a1;
      while (1)
      {
        v195 = v139 - 2;
        if (v139 < 2) {
          break;
        }
        if (!v194) {
          goto LABEL_180;
        }
        v196 = v38;
        v197 = *(void *)&v38[16 * v195 + 32];
        v198 = *(void *)&v38[16 * v139 + 24];
        v199 = v224;
        specialized _merge<A>(low:mid:high:buffer:by:)(v194 + *(void *)(v222 + 72) * v197, v194 + *(void *)(v222 + 72) * *(void *)&v38[16 * v139 + 16], v194 + *(void *)(v222 + 72) * v198, v220);
        v224 = v199;
        if (v199) {
          goto LABEL_145;
        }
        if (v198 < v197) {
          goto LABEL_166;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v196 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v196);
        }
        if (v195 >= *((void *)v196 + 2)) {
          goto LABEL_167;
        }
        v200 = &v196[16 * v195 + 32];
        *(void *)v200 = v197;
        *((void *)v200 + 1) = v198;
        v201 = *((void *)v196 + 2);
        if (v139 > v201) {
          goto LABEL_168;
        }
        memmove(&v196[16 * v139 + 16], &v196[16 * v139 + 32], 16 * (v201 - v139));
        uint64_t v38 = v196;
        *((void *)v196 + 2) = v201 - 1;
        v139 = v201 - 1;
        if (v201 <= 2) {
          goto LABEL_147;
        }
      }
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
      goto LABEL_173;
    }
LABEL_147:
    swift_bridgeObjectRelease();
    if (v205 >= -1)
    {
      *(void *)(v204 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    return;
  }
  uint64_t v37 = 0;
  uint64_t v38 = (char *)MEMORY[0x1E4FBC860];
  v227 = a1;
  v225 = v5;
  uint64_t v39 = v34;
  v231 = v8;
  v213 = v11;
  v203 = v16;
  while (2)
  {
    uint64_t v40 = v37 + 1;
    v215 = v38;
    v218 = v37;
    if (v37 + 1 >= v39)
    {
      uint64_t v69 = v37 + 1;
      goto LABEL_49;
    }
    v235 = v39;
    uint64_t v41 = *a1;
    uint64_t v42 = v37;
    uint64_t v43 = *(char **)(v222 + 72);
    uint64_t v44 = v210;
    _s15ConversationKit11ParticipantVWOcTm_19(*a1 + (void)v43 * v40, v210);
    v226 = v41;
    v242 = v43;
    _s15ConversationKit11ParticipantVWOcTm_19(v41 + (void)v43 * v42, v212);
    BOOL v45 = type metadata accessor for Date();
    v239 = &v202;
    uint64_t v46 = *(uint64_t **)(v45 - 8);
    MEMORY[0x1F4188790](v45);
    v228 = v47;
    id v48 = (char *)&v202 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    MEMORY[0x1F4188790](v49 - 8);
    v236 = v50;
    uint64_t v51 = (char *)&v202 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v52 = v209;
    _s15ConversationKit11ParticipantVWOcTm_19(v44, v209);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v237 = v45;
    v238 = v46;
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      int v55 = v52 + *(int *)(v54 + 48);
      outlined consume of Participant.CopresenceInfo?(*(void *)(v52 + *(int *)(v54 + 64)), *(void *)(v52 + *(int *)(v54 + 64) + 8));
      uint64_t v56 = v52;
      unint64_t v57 = (void (*)(char *, uint64_t, uint64_t))v46[4];
      v57(v51, v56, v45);
      outlined destroy of Participant.MediaInfo(v55);
      __swift_storeEnumTagSinglePayload((uint64_t)v51, 0, 1, v45);
      if (__swift_getEnumTagSinglePayload((uint64_t)v51, 1, v45) != 1)
      {
        unint64_t v58 = v51;
        unint64_t v59 = v237;
        v234 = (char *)v57;
        uint64_t v60 = ((uint64_t (*)(char *, char *, uint64_t))v57)(v48, v58, v237);
        v233 = (uint64_t)&v202;
        uint64_t v61 = MEMORY[0x1F4188790](v60);
        uint64_t v63 = (char *)&v202 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
        MEMORY[0x1F4188790](v61);
        uint64_t v65 = (char *)&v202 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
        char v66 = (uint64_t)v203;
        _s15ConversationKit11ParticipantVWOcTm_19(v212, (uint64_t)v203);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          v230 = v66 + *(int *)(v54 + 48);
          outlined consume of Participant.CopresenceInfo?(*(void *)(v66 + *(int *)(v54 + 64)), *(void *)(v66 + *(int *)(v54 + 64) + 8));
          int v67 = (void (*)(char *, char *, uint64_t))v234;
          ((void (*)(char *, uint64_t, uint64_t))v234)(v65, v66, v59);
          outlined destroy of Participant.MediaInfo(v230);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v59);
          if (__swift_getEnumTagSinglePayload((uint64_t)v65, 1, v59) != 1)
          {
            v67(v63, v65, v59);
            LODWORD(v234) = static Date.< infix(_:_:)();
            uint64_t v68 = (void (*)(char *, uint64_t))v238[1];
            v68(v63, v59);
            v68(v48, v59);
LABEL_15:
            uint64_t v8 = v231;
            goto LABEL_16;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantVWOhTm_13(v66, (void (*)(void))type metadata accessor for Participant.State);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 1, 1, v59);
        }
        ((void (*)(char *, uint64_t))v238[1])(v48, v59);
        outlined destroy of SystemUpdateNotice?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Date?);
        LODWORD(v234) = 0;
        goto LABEL_15;
      }
    }
    else
    {
      _s15ConversationKit11ParticipantVWOhTm_13(v52, (void (*)(void))type metadata accessor for Participant.State);
      __swift_storeEnumTagSinglePayload((uint64_t)v51, 1, 1, v45);
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for Date?);
    LODWORD(v234) = 0;
    uint64_t v8 = v231;
LABEL_16:
    _s15ConversationKit11ParticipantVWOhTm_13(v212, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOhTm_13(v210, (void (*)(void))type metadata accessor for Participant);
    uint64_t v37 = v218;
    uint64_t v69 = v218 + 2;
    uint64_t v39 = v235;
    uint64_t v70 = (uint64_t)v217;
    if (v218 + 2 >= v235) {
      goto LABEL_32;
    }
    uint64_t v71 = v238 + 4;
    v208 = (void (**)(char *, uint64_t))(v238 + 1);
    v233 = (void)v242 * v40;
    uint64_t v72 = v226;
    BOOL v73 = v218 + 2;
    v230 = (void)v242 * v69;
    unint64_t v74 = v228;
    v238 += 4;
    while (1)
    {
      uint64_t v75 = v219;
      _s15ConversationKit11ParticipantVWOcTm_19(v72 + v230, v219);
      uint64_t v76 = _s15ConversationKit11ParticipantVWOcTm_19(v72 + v233, v221);
      v239 = &v202;
      uint64_t v77 = MEMORY[0x1F4188790](v76);
      uint64_t v78 = (char *)&v202 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1F4188790](v77);
      v80 = (char *)&v202 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_19(v75, v70);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        _s15ConversationKit11ParticipantVWOhTm_13(v70, (void (*)(void))type metadata accessor for Participant.State);
        __swift_storeEnumTagSinglePayload((uint64_t)v80, 1, 1, v237);
LABEL_24:
        outlined destroy of SystemUpdateNotice?((uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v95 = 0;
        uint64_t v71 = v238;
        goto LABEL_28;
      }
      uint64_t v81 = v71;
      uint64_t v82 = v70;
      BOOL v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v84 = v82 + *(int *)(v83 + 48);
      outlined consume of Participant.CopresenceInfo?(*(void *)(v82 + *(int *)(v83 + 64)), *(void *)(v82 + *(int *)(v83 + 64) + 8));
      char v85 = (uint64_t (*)(char *, char *, uint64_t))*v81;
      v86 = v237;
      v229 = v85;
      v85(v80, (char *)v82, v237);
      uint64_t v87 = (uint64_t)v213;
      outlined destroy of Participant.MediaInfo(v84);
      __swift_storeEnumTagSinglePayload((uint64_t)v80, 0, 1, v86);
      uint64_t v88 = v86;
      unint64_t v74 = v228;
      if (__swift_getEnumTagSinglePayload((uint64_t)v80, 1, v88) == 1) {
        goto LABEL_24;
      }
      uint64_t v89 = v80;
      BOOL v90 = v237;
      uint64_t v91 = v229(v78, v89, v237);
      v214 = &v202;
      uint64_t v92 = MEMORY[0x1F4188790](v91);
      v211 = &v202;
      MEMORY[0x1F4188790](v92);
      uint64_t v94 = (char *)&v202 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_19(v221, v87);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        _s15ConversationKit11ParticipantVWOhTm_13(v87, (void (*)(void))type metadata accessor for Participant.State);
        __swift_storeEnumTagSinglePayload((uint64_t)v94, 1, 1, v90);
LABEL_26:
        (*v208)(v78, v90);
        outlined destroy of SystemUpdateNotice?((uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v95 = 0;
        goto LABEL_27;
      }
      v207 = v87 + *(int *)(v83 + 48);
      outlined consume of Participant.CopresenceInfo?(*(void *)(v87 + *(int *)(v83 + 64)), *(void *)(v87 + *(int *)(v83 + 64) + 8));
      v229(v94, (char *)v87, v90);
      outlined destroy of Participant.MediaInfo(v207);
      __swift_storeEnumTagSinglePayload((uint64_t)v94, 0, 1, v90);
      if (__swift_getEnumTagSinglePayload((uint64_t)v94, 1, v90) == 1) {
        goto LABEL_26;
      }
      v229((char *)&v202 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), v94, v90);
      uint64_t v95 = static Date.< infix(_:_:)();
      uint64_t v96 = *v208;
      (*v208)((char *)&v202 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), v90);
      v96(v78, v90);
LABEL_27:
      uint64_t v71 = v238;
LABEL_28:
      _s15ConversationKit11ParticipantVWOhTm_13(v221, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_13(v219, (void (*)(void))type metadata accessor for Participant);
      if ((v234 ^ v95)) {
        break;
      }
      v72 += (uint64_t)v242;
      ++v73;
      uint64_t v70 = (uint64_t)v217;
      if (v73 >= v235)
      {
        uint64_t v39 = v235;
        uint64_t v69 = v235;
        uint64_t v8 = v231;
        uint64_t v37 = v218;
        goto LABEL_32;
      }
    }
    uint64_t v8 = v231;
    uint64_t v37 = v218;
    uint64_t v69 = v73;
    uint64_t v39 = v235;
LABEL_32:
    a1 = v227;
    if (v234)
    {
      if (v69 >= v37)
      {
        if (v37 < v69)
        {
          v97 = 0;
          uint64_t v98 = (void)v242 * (v69 - 1);
          uint64_t v99 = v69 * (void)v242;
          uint64_t v100 = v37;
          unint64_t v101 = v37 * (void)v242;
          do
          {
            if (v100 != v69 + v97 - 1)
            {
              v102 = v226;
              if (!v226) {
                goto LABEL_179;
              }
              uint64_t v103 = v226 + v101;
              _s15ConversationKit11ParticipantVWObTm_6(v226 + v101, v216);
              if (v101 < v98 || v103 >= v102 + v99)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v101 != v98)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              _s15ConversationKit11ParticipantVWObTm_6(v216, v102 + v98);
            }
            ++v100;
            --v97;
            v98 -= (uint64_t)v242;
            v99 -= (uint64_t)v242;
            v101 += (uint64_t)v242;
          }
          while (v100 < v69 + v97);
          uint64_t v8 = v231;
          uint64_t v37 = v218;
          a1 = v227;
          uint64_t v39 = v235;
        }
        goto LABEL_49;
      }
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }
LABEL_49:
    if (v69 >= v39) {
      goto LABEL_78;
    }
    if (__OFSUB__(v69, v37)) {
      goto LABEL_170;
    }
    if (v69 - v37 >= v206) {
      goto LABEL_77;
    }
    if (__OFADD__(v218, v206)) {
      goto LABEL_174;
    }
    if (v218 + v206 < v39) {
      uint64_t v39 = v218 + v206;
    }
    if (v39 < v218)
    {
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    if (v69 == v39)
    {
      uint64_t v37 = v218;
      goto LABEL_78;
    }
    uint64_t v105 = *(void *)(v222 + 72);
    unint64_t v106 = v105 * (v69 - 1);
    v226 = v105;
    v107 = v69 * v105;
    v214 = (uint64_t *)v39;
    while (2)
    {
      uint64_t v108 = 0;
      unint64_t v109 = (char *)v218;
      v229 = (uint64_t (*)(char *, char *, uint64_t))v107;
      v230 = v69;
      v228 = v106;
      while (2)
      {
        uint64_t v110 = *a1;
        v237 = v107 + v108;
        uint64_t v111 = v107 + v108 + v110;
        v112 = v240;
        _s15ConversationKit11ParticipantVWOcTm_19(v111, v240);
        v236 = v106 + v108;
        _s15ConversationKit11ParticipantVWOcTm_19(v106 + v108 + v110, v243);
        unint64_t v113 = type metadata accessor for Date();
        v239 = &v202;
        uint64_t v114 = *(void **)(v113 - 8);
        uint64_t v115 = v114[8];
        MEMORY[0x1F4188790](v113);
        v242 = (char *)&v202 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
        v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        v238 = &v202;
        uint64_t v117 = *(void *)(*(void *)(v116 - 8) + 64);
        MEMORY[0x1F4188790](v116 - 8);
        _s15ConversationKit11ParticipantVWOcTm_19(v112, (uint64_t)v8);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
          _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v8, (void (*)(void))type metadata accessor for Participant.State);
          __swift_storeEnumTagSinglePayload((uint64_t)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v113);
LABEL_69:
          outlined destroy of SystemUpdateNotice?((uint64_t)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v8 = v231;
LABEL_72:
          _s15ConversationKit11ParticipantVWOhTm_13(v243, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOhTm_13(v240, (void (*)(void))type metadata accessor for Participant);
          a1 = v227;
          goto LABEL_73;
        }
        v234 = v109;
        v235 = v108;
        Swift::Int v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        v119 = (uint64_t)&v8[*(int *)(v118 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v8[*(int *)(v118 + 64)], *(void *)&v8[*(int *)(v118 + 64) + 8]);
        uint64_t v120 = (void (*)(char *, char *, uint64_t))v114[4];
        v120((char *)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v113);
        outlined destroy of Participant.MediaInfo(v119);
        __swift_storeEnumTagSinglePayload((uint64_t)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v113);
        if (__swift_getEnumTagSinglePayload((uint64_t)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v113) == 1)goto LABEL_69; {
        v121 = ((uint64_t (*)(char *, char *, uint64_t))v120)(v242, (char *)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0), v113);
        }
        uint64_t v122 = MEMORY[0x1F4188790](v121);
        uint64_t v123 = (char *)&v202 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
        v238 = &v202;
        MEMORY[0x1F4188790](v122);
        v124 = (char *)&v202 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
        v125 = (uint64_t)v225;
        _s15ConversationKit11ParticipantVWOcTm_19(v243, (uint64_t)v225);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
          _s15ConversationKit11ParticipantVWOhTm_13(v125, (void (*)(void))type metadata accessor for Participant.State);
          __swift_storeEnumTagSinglePayload((uint64_t)v124, 1, 1, v113);
LABEL_71:
          ((void (*)(char *, uint64_t))v114[1])(v242, v113);
          outlined destroy of SystemUpdateNotice?((uint64_t)v124, (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v8 = v231;
          goto LABEL_72;
        }
        uint64_t v126 = *(int *)(v118 + 48);
        v233 = (uint64_t)v114;
        uint64_t v127 = v125 + v126;
        outlined consume of Participant.CopresenceInfo?(*(void *)(v125 + *(int *)(v118 + 64)), *(void *)(v125 + *(int *)(v118 + 64) + 8));
        v120(v124, (char *)v125, v113);
        uint64_t v114 = (void *)v233;
        outlined destroy of Participant.MediaInfo(v127);
        __swift_storeEnumTagSinglePayload((uint64_t)v124, 0, 1, v113);
        if (__swift_getEnumTagSinglePayload((uint64_t)v124, 1, v113) == 1) {
          goto LABEL_71;
        }
        v120(v123, v124, v113);
        v128 = v242;
        uint64_t v129 = static Date.< infix(_:_:)();
        v130 = (void (*)(char *, uint64_t))v114[1];
        v130(v123, v113);
        v130(v128, v113);
        _s15ConversationKit11ParticipantVWOhTm_13(v243, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOhTm_13(v240, (void (*)(void))type metadata accessor for Participant);
        if (v129)
        {
          a1 = v227;
          v131 = *v227;
          uint64_t v8 = v231;
          v107 = (uint64_t)v229;
          if (!*v227) {
            goto LABEL_177;
          }
          uint64_t v132 = v235;
          unint64_t v106 = v228;
          v133 = v131 + v228 + v235;
          _s15ConversationKit11ParticipantVWObTm_6((uint64_t)v229 + v131 + v235, v232);
          v134 = v234;
          swift_arrayInitWithTakeFrontToBack();
          _s15ConversationKit11ParticipantVWObTm_6(v232, v133);
          uint64_t v108 = v132 - v226;
          unint64_t v109 = v134 + 1;
          v135 = v230;
          if ((char *)v230 == v109) {
            goto LABEL_74;
          }
          continue;
        }
        break;
      }
      a1 = v227;
      uint64_t v8 = v231;
LABEL_73:
      v107 = (uint64_t)v229;
      v135 = v230;
      unint64_t v106 = v228;
LABEL_74:
      uint64_t v69 = v135 + 1;
      v106 += v226;
      v107 += v226;
      if ((uint64_t *)v69 != v214) {
        continue;
      }
      break;
    }
    uint64_t v69 = (uint64_t)v214;
LABEL_77:
    uint64_t v37 = v218;
LABEL_78:
    if (v69 < v37) {
      goto LABEL_169;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v230 = v69;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v38 = v215;
    }
    else {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v215 + 2) + 1, 1, v215);
    }
    v138 = *((void *)v38 + 2);
    v137 = *((void *)v38 + 3);
    v139 = v138 + 1;
    if (v138 >= v137 >> 1) {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v137 > 1), v138 + 1, 1, v38);
    }
    *((void *)v38 + 2) = v139;
    v140 = v38 + 32;
    v141 = &v38[16 * v138 + 32];
    v142 = v230;
    *(void *)v141 = v218;
    *((void *)v141 + 1) = v142;
    if (!v138)
    {
      v139 = 1;
LABEL_126:
      uint64_t v39 = a1[1];
      uint64_t v37 = v230;
      if (v230 >= v39) {
        goto LABEL_133;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    v143 = v139 - 1;
    if (v139 >= 4)
    {
      v148 = &v140[16 * v139];
      v149 = *((void *)v148 - 8);
      v150 = *((void *)v148 - 7);
      v154 = __OFSUB__(v150, v149);
      v151 = v150 - v149;
      if (v154) {
        goto LABEL_154;
      }
      v153 = *((void *)v148 - 6);
      v152 = *((void *)v148 - 5);
      v154 = __OFSUB__(v152, v153);
      v146 = v152 - v153;
      v147 = v154;
      if (v154) {
        goto LABEL_155;
      }
      v155 = v139 - 2;
      v156 = &v140[16 * v139 - 32];
      v158 = *(void *)v156;
      v157 = *((void *)v156 + 1);
      v154 = __OFSUB__(v157, v158);
      v159 = v157 - v158;
      if (v154) {
        goto LABEL_156;
      }
      v154 = __OFADD__(v146, v159);
      v160 = v146 + v159;
      if (v154) {
        goto LABEL_158;
      }
      if (v160 >= v151)
      {
        v178 = &v140[16 * v143];
        v180 = *(void *)v178;
        v179 = *((void *)v178 + 1);
        v154 = __OFSUB__(v179, v180);
        v181 = v179 - v180;
        if (v154) {
          goto LABEL_164;
        }
        v171 = v146 < v181;
        goto LABEL_115;
      }
    }
    else
    {
      if (v139 != 3)
      {
        v172 = *((void *)v38 + 4);
        v173 = *((void *)v38 + 5);
        v154 = __OFSUB__(v173, v172);
        v165 = v173 - v172;
        v166 = v154;
        goto LABEL_109;
      }
      v145 = *((void *)v38 + 4);
      v144 = *((void *)v38 + 5);
      v154 = __OFSUB__(v144, v145);
      v146 = v144 - v145;
      v147 = v154;
    }
    if (v147) {
      goto LABEL_157;
    }
    v155 = v139 - 2;
    v161 = &v140[16 * v139 - 32];
    v163 = *(void *)v161;
    v162 = *((void *)v161 + 1);
    v164 = __OFSUB__(v162, v163);
    v165 = v162 - v163;
    v166 = v164;
    if (v164) {
      goto LABEL_159;
    }
    v167 = &v140[16 * v143];
    v169 = *(void *)v167;
    v168 = *((void *)v167 + 1);
    v154 = __OFSUB__(v168, v169);
    v170 = v168 - v169;
    if (v154) {
      goto LABEL_161;
    }
    if (__OFADD__(v165, v170)) {
      goto LABEL_163;
    }
    if (v165 + v170 >= v146)
    {
      v171 = v146 < v170;
LABEL_115:
      if (v171) {
        v143 = v155;
      }
      goto LABEL_117;
    }
LABEL_109:
    if (v166) {
      goto LABEL_160;
    }
    v174 = &v140[16 * v143];
    v176 = *(void *)v174;
    v175 = *((void *)v174 + 1);
    v154 = __OFSUB__(v175, v176);
    v177 = v175 - v176;
    if (v154) {
      goto LABEL_162;
    }
    if (v177 < v165) {
      goto LABEL_126;
    }
LABEL_117:
    v182 = v143 - 1;
    if (v143 - 1 >= v139)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
    v183 = *a1;
    if (!*a1) {
      goto LABEL_178;
    }
    v184 = v38;
    v185 = a1;
    v186 = &v140[16 * v182];
    v187 = *(void *)v186;
    v188 = v140;
    v189 = v143;
    v190 = &v140[16 * v143];
    v191 = *((void *)v190 + 1);
    v192 = v224;
    specialized _merge<A>(low:mid:high:buffer:by:)(v183 + *(void *)(v222 + 72) * *(void *)v186, v183 + *(void *)(v222 + 72) * *(void *)v190, v183 + *(void *)(v222 + 72) * v191, v220);
    v224 = v192;
    if (v192) {
      break;
    }
    if (v191 < v187) {
      goto LABEL_151;
    }
    if (v189 > *((void *)v184 + 2)) {
      goto LABEL_152;
    }
    *(void *)v186 = v187;
    *(void *)&v188[16 * v182 + 8] = v191;
    v193 = *((void *)v184 + 2);
    if (v189 >= v193) {
      goto LABEL_153;
    }
    v139 = v193 - 1;
    memmove(v190, v190 + 16, 16 * (v193 - 1 - v189));
    v140 = v188;
    uint64_t v38 = v184;
    *((void *)v184 + 2) = v193 - 1;
    a1 = v185;
    uint64_t v8 = v231;
    if (v193 <= 2) {
      goto LABEL_126;
    }
  }
LABEL_145:
  swift_bridgeObjectRelease();
  if (v205 < -1) {
    goto LABEL_172;
  }
  *(void *)(v204 + 16) = 0;
  swift_bridgeObjectRelease();
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v29 = v6;
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v28 = *(void *)(v7 + 64);
    uint64_t v27 = v7 + 8;
    uint64_t v30 = v5;
    uint64_t v8 = v5 + 8 * v4 - 8;
    uint64_t v9 = (void (**)(char *, uint64_t))(v7 + 8);
    while (2)
    {
      uint64_t v10 = v25;
      uint64_t v26 = v8;
      uint64_t v31 = v4;
      do
      {
        Swift::Int v33 = &v23;
        unint64_t v11 = *(void **)v8;
        uint64_t v12 = v28;
        MEMORY[0x1F4188790](v6);
        Swift::Int v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
        id v15 = v14;
        id v16 = v11;
        uint64_t v17 = SGURL.recentsDate.getter();
        uint64_t v32 = &v23;
        MEMORY[0x1F4188790](v17);
        SGURL.recentsDate.getter();
        uint64_t v18 = Date.compare(_:)();
        uint64_t v19 = *v9;
        uint64_t v20 = v29;
        (*v9)(v13, v29);
        v19(v13, v20);

        uint64_t v21 = v31;
        if (v18 != -1) {
          break;
        }
        if (!v30)
        {
          __break(1u);
          return;
        }
        uint64_t v22 = *(void **)v8;
        *(void *)uint64_t v8 = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = v22;
        v8 -= 8;
        ++v10;
      }
      while (v21 != v10);
      uint64_t v4 = v21 + 1;
      uint64_t v8 = v26 + 8;
      if (v4 != v24) {
        continue;
      }
      break;
    }
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  uint64_t v33;
  double *v34;
  BOOL v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double *v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double *v56;
  double *v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned char v60[48];
  uint64_t v61;
  char v62;
  uint64_t v63;

  BOOL v45 = a1;
  id v48 = type metadata accessor for HUDActivityManager.BannerUpdate(0);
  MEMORY[0x1F4188790](v48);
  unint64_t v59 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  MEMORY[0x1F4188790](v9);
  uint64_t v47 = (uint64_t)&v43 - v10;
  MEMORY[0x1F4188790](v11);
  id v49 = (double *)((char *)&v43 - v12);
  MEMORY[0x1F4188790](v13);
  id v15 = (double *)((char *)&v43 - v14);
  MEMORY[0x1F4188790](v16);
  unint64_t v57 = (double *)((char *)&v43 - v17);
  MEMORY[0x1F4188790](v18);
  uint64_t v56 = (double *)((char *)&v43 - v21);
  uint64_t v54 = a3;
  uint64_t v44 = a2;
  if (a3 == a2) {
    return;
  }
  uint64_t v22 = *(void *)(v19 + 72);
  uint64_t v51 = v56 + 1;
  id v50 = v57 + 1;
  unint64_t v58 = &v61;
  uint64_t v63 = v22 * (v54 - 1);
  uint64_t v52 = v22;
  uint64_t v23 = v22 * v54;
  int v55 = v15;
  uint64_t v46 = v20;
  while (2)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v45;
    int v53 = v23;
    while (1)
    {
      uint64_t v26 = *a4;
      uint64_t v27 = v23 + v24 + *a4;
      uint64_t v28 = v56;
      outlined init with copy of HUDActivityManager.BannerUpdate(v27, (uint64_t)v56);
      uint64_t v29 = v63 + v24 + v26;
      uint64_t v30 = v57;
      outlined init with copy of HUDActivityManager.BannerUpdate(v29, (uint64_t)v57);
      outlined init with copy of ConversationControlsType((uint64_t)v51, (uint64_t)v60);
      outlined init with copy of ConversationControlsType((uint64_t)v50, (uint64_t)v58);
      if (!v60[40]) {
        break;
      }
      if (v62)
      {
        uint64_t v31 = *v28;
        uint64_t v32 = *v30;
        outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v28, (uint64_t)v15);
        Swift::Int v33 = (uint64_t)v30;
        uint64_t v34 = v49;
        outlined init with copy of HUDActivityManager.BannerUpdate(v33, (uint64_t)v49);
        if (v31 >= v32)
        {
          Swift::Int v36 = *v15;
          uint64_t v37 = *v34;
          uint64_t v38 = (uint64_t)v15;
          uint64_t v39 = v47;
          outlined init with copy of HUDActivityManager.BannerUpdate(v38, v47);
          uint64_t v40 = v46;
          outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v34, v46);
          char v35 = v36 == v37 && Date.compare(_:)() == -1;
          outlined destroy of HUDActivityManager.BannerUpdate(v40);
          outlined destroy of HUDActivityManager.BannerUpdate(v39);
          id v15 = v55;
        }
        else
        {
          char v35 = 1;
        }
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v49);
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v15);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v60, &demangling cache variable for type metadata for (ConversationControlsType, ConversationControlsType));
        uint64_t v28 = v56;
        uint64_t v30 = v57;
LABEL_16:
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v30);
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
        uint64_t v23 = v53;
        if (!v35) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }
      outlined destroy of ConversationControlsType((uint64_t)v58);
      outlined destroy of ConversationControlsType((uint64_t)v60);
      outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v30);
      outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
      uint64_t v23 = v53;
LABEL_17:
      uint64_t v41 = *a4;
      if (!*a4)
      {
        __break(1u);
        return;
      }
      uint64_t v42 = v41 + v63 + v24;
      outlined init with take of HUDActivityManager.BannerUpdate(v41 + v23 + v24, v59);
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of HUDActivityManager.BannerUpdate(v59, v42);
      v24 -= v52;
      ++v25;
      id v15 = v55;
      if (v54 == v25) {
        goto LABEL_21;
      }
    }
    if (!v62)
    {
      char v35 = *v28 < *v30;
      outlined destroy of ConversationControlsType((uint64_t)v58);
      outlined destroy of ConversationControlsType((uint64_t)v60);
      goto LABEL_16;
    }
    outlined destroy of ConversationControlsType((uint64_t)v60);
    outlined destroy of ConversationControlsType((uint64_t)v58);
    outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v30);
    outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
    uint64_t v23 = v53;
LABEL_21:
    v63 += v52;
    v23 += v52;
    if (++v54 != v44) {
      continue;
    }
    break;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  void *v13;
  uint64_t v16;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    type metadata accessor for UIWindowLevel(0);
    uint64_t v6 = v5 + 8 * v4 - 8;
    while (2)
    {
      uint64_t v7 = *(void **)(v5 + 8 * v4);
      uint64_t v8 = a1;
      id v16 = v6;
      do
      {
        uint64_t v9 = *(void **)v6;
        uint64_t v10 = v7;
        unint64_t v11 = v9;
        objc_msgSend(v10, sel_windowLevel);
        objc_msgSend(v11, sel_windowLevel);
        lazy protocol witness table accessor for type UIWindowLevel and conformance UIWindowLevel();
        uint64_t v12 = dispatch thunk of static Comparable.< infix(_:_:)();

        if ((v12 & 1) == 0) {
          break;
        }
        if (!v5)
        {
          __break(1u);
          return;
        }
        Swift::Int v13 = *(void **)v6;
        uint64_t v7 = *(void **)(v6 + 8);
        *(void *)uint64_t v6 = v7;
        *(void *)(v6 + 8) = v13;
        v6 -= 8;
        ++v8;
      }
      while (v4 != v8);
      ++v4;
      uint64_t v6 = v16 + 8;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, void **a2, char *a3, void **a4)
{
  unint64_t v62 = a4;
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = (char *)a2 - (char *)a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = a3 - (char *)a2;
  uint64_t v10 = (a3 - (char *)a2) / 8;
  if (v8 >= v10)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (a3 - (char *)a2) / 8, v62);
    unint64_t v11 = &v62[v10];
    if (v6 >= v5 || v9 < 8) {
      goto LABEL_23;
    }
    uint64_t v33 = type metadata accessor for Date();
    uint64_t v54 = v33;
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v53 = *(void *)(v34 + 64);
    v52[2] = v34 + 8;
    char v35 = (void **)(a3 - 8);
    uint64_t v61 = v6;
    Swift::Int v36 = (void (**)(char *, uint64_t))(v34 + 8);
    while (1)
    {
      unint64_t v59 = v52;
      uint64_t v60 = v11;
      uint64_t v56 = v5;
      unint64_t v57 = v35 + 1;
      --v11;
      uint64_t v37 = *(v5 - 1);
      int v55 = v5 - 1;
      uint64_t v38 = v53;
      MEMORY[0x1F4188790](v33);
      uint64_t v39 = (char *)v52 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v41 = v40;
      id v42 = v37;
      uint64_t v43 = SGURL.recentsDate.getter();
      unint64_t v58 = v52;
      MEMORY[0x1F4188790](v43);
      SGURL.recentsDate.getter();
      uint64_t v44 = Date.compare(_:)();
      BOOL v45 = *v36;
      uint64_t v46 = v54;
      (*v36)(v39, v54);
      v45(v39, v46);

      if (v44 == -1)
      {
        BOOL v51 = v57 != v56 || v35 >= v56;
        id v49 = v55;
        uint64_t v5 = v55;
        unint64_t v11 = v60;
        uint64_t v47 = v61;
        if (!v51) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v47 = v61;
        uint64_t v5 = v56;
        BOOL v48 = v57 != v60 || v35 >= v60;
        id v49 = v11;
        if (!v48) {
          goto LABEL_31;
        }
      }
      *char v35 = *v49;
LABEL_31:
      --v35;
      if (v5 <= v47 || v11 <= v62) {
        goto LABEL_23;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, v62);
  unint64_t v11 = &v62[v8];
  if (v5 < (void **)a3 && v7 >= 8)
  {
    uint64_t v13 = type metadata accessor for Date();
    unint64_t v58 = (void *)v13;
    uint64_t v14 = *(void *)(v13 - 8);
    unint64_t v57 = *(void ***)(v14 + 64);
    int v55 = (void **)a3;
    uint64_t v56 = (void **)(v14 + 8);
    uint64_t v60 = &v62[v8];
    do
    {
      uint64_t v61 = v6;
      unint64_t v59 = v52;
      id v15 = *v62;
      id v16 = v57;
      MEMORY[0x1F4188790](v13);
      uint64_t v17 = (char *)v52 - (((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v19 = v18;
      uint64_t v20 = v5;
      id v21 = v15;
      uint64_t v22 = SGURL.recentsDate.getter();
      MEMORY[0x1F4188790](v22);
      SGURL.recentsDate.getter();
      uint64_t v23 = Date.compare(_:)();
      uint64_t v24 = (void (*)(char *, void *))*v56;
      uint64_t v25 = v58;
      ((void (*)(char *, void *))*v56)(v17, v58);
      v24(v17, v25);

      if (v23 == -1)
      {
        uint64_t v26 = v5++;
        uint64_t v27 = v61;
        BOOL v28 = v61 == v20;
      }
      else
      {
        uint64_t v26 = v62;
        uint64_t v27 = v61;
        BOOL v28 = v61 == v62++;
      }
      unint64_t v11 = v60;
      uint64_t v29 = v55;
      if (!v28) {
        *uint64_t v27 = *v26;
      }
      uint64_t v6 = v27 + 1;
    }
    while (v62 < v11 && v5 < v29);
  }
  uint64_t v5 = v6;
LABEL_23:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v62, v11 - v62, v5);
  return 1;
}

uint64_t outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  char v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined bridged method (pb) of @objc TUConversationLink.invitedMemberHandles.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_invitedMemberHandles);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUConversation and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type LinkSource and conformance LinkSource()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSource and conformance LinkSource;
  if (!lazy protocol witness table cache variable for type LinkSource and conformance LinkSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkSource and conformance LinkSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationLink and conformance ConversationLink()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationLink and conformance ConversationLink;
  if (!lazy protocol witness table cache variable for type ConversationLink and conformance ConversationLink)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationLink and conformance ConversationLink);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LinkSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3097828);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkSource()
{
  return &type metadata for LinkSource;
}

uint64_t destroy for ConversationLink(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for ConversationLink(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ConversationLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConversationLink(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

BOOL specialized static Set.Index.== infix(_:_:)(uint64_t a1, int a2, char a3, uint64_t a4, int a5, char a6)
{
  if (a3)
  {
    if (a6) {
LABEL_9:
    }
      JUMPOUT(0x1C8774330);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a6) {
    goto LABEL_8;
  }
  if (a2 != a5)
  {
    __break(1u);
    goto LABEL_8;
  }
  return a1 == a4;
}

uint64_t lazy protocol witness table accessor for type TUConversation and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    id v6 = *(void **)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v6;
    swift_bridgeObjectRetain();
    id v7 = v6;
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

{
  void *v5;
  id v6;

  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void **)(*(void *)(a5 + 48) + 8 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    id v6 = v5;
    swift_bridgeObjectRetain();
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ScreenSharingContentView.interfaceOrientation.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v1, v2);
  uint64_t v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<CGFloat>.Content(v1, v2);
  return v3;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)unint64_t v11 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x80000001C3796A30, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v12, -1, -1);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat>.Content(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

void specialized Environment.wrappedValue.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for EnvironmentValues();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_16_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v3, v2, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v2, v5, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  }
  else
  {
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v13 = (_DWORD *)OUTLINED_FUNCTION_37();
      uint64_t v17 = swift_slowAlloc();
      *uint64_t v13 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000001C3796A00, &v17);
      OUTLINED_FUNCTION_21_15(v14);
      OUTLINED_FUNCTION_28_9(&dword_1C2F90000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
  }
  OUTLINED_FUNCTION_28();
}

{
  OUTLINED_FUNCTION_19_21();
}

{
  OUTLINED_FUNCTION_22_13();
}

{
  OUTLINED_FUNCTION_23_13();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  void (*v6)(void);
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint8_t *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v26 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  os_log_type_t v11 = v10;
  uint64_t v12 = type metadata accessor for EnvironmentValues();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_16_0();
  __swift_instantiateConcreteTypeFromMangledName(v8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v16);
  id v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<DynamicTypeSize>.Content(v9, (uint64_t)v18, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6(0);
    OUTLINED_FUNCTION_0();
    (*(void (**)(uint8_t *, char *))(v19 + 32))(v11, v18);
  }
  else
  {
    uint64_t v20 = static os_log_type_t.fault.getter();
    id v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      uint64_t v24 = v3;
      OUTLINED_FUNCTION_37();
      uint64_t v25 = v11;
      uint64_t v27 = OUTLINED_FUNCTION_9_3();
      *(_DWORD *)os_log_type_t v11 = 136315138;
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v24, &v27);
      OUTLINED_FUNCTION_32_4(v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v12);
  }
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  if ((v1 & 1) == 0)
  {
    swift_retain();
    static os_log_type_t.fault.getter();
    uint64_t v3 = static Log.runtimeIssuesLog.getter();
    if (OUTLINED_FUNCTION_17_20(v3))
    {
      OUTLINED_FUNCTION_15_19();
      uint64_t v4 = OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_24_15(v4);
      OUTLINED_FUNCTION_11_20(4.8149e-34);
      uint64_t v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701274693, 0xE400000000000000, v5);
      OUTLINED_FUNCTION_2_37(v6);
      OUTLINED_FUNCTION_7_31(&dword_1C2F90000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    OUTLINED_FUNCTION_14_19();
    outlined consume of Environment<CGFloat>.Content(v0, 0);
    uint64_t v9 = OUTLINED_FUNCTION_6_33();
    v10(v9);
  }
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  if ((v1 & 1) == 0)
  {
    swift_retain();
    static os_log_type_t.fault.getter();
    uint64_t v3 = static Log.runtimeIssuesLog.getter();
    if (OUTLINED_FUNCTION_17_20(v3))
    {
      OUTLINED_FUNCTION_15_19();
      uint64_t v4 = OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_24_15(v4);
      OUTLINED_FUNCTION_11_20(4.8149e-34);
      uint64_t v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1819242306, 0xE400000000000000, v5);
      OUTLINED_FUNCTION_2_37(v6);
      OUTLINED_FUNCTION_7_31(&dword_1C2F90000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    OUTLINED_FUNCTION_14_19();
    outlined consume of Environment<CGFloat>.Content(v0, 0);
    uint64_t v9 = OUTLINED_FUNCTION_6_33();
    v10(v9);
  }
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _DWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  if ((v1 & 1) == 0)
  {
    swift_retain();
    uint64_t v3 = (_DWORD *)static os_log_type_t.fault.getter();
    uint64_t v4 = static Log.runtimeIssuesLog.getter();
    if (OUTLINED_FUNCTION_17_20(v4))
    {
      OUTLINED_FUNCTION_15_19();
      uint64_t v5 = OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_24_15(v5);
      *uint64_t v3 = 136315138;
      uint64_t v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x80000001C3796970, &v11);
      OUTLINED_FUNCTION_2_37(v6);
      OUTLINED_FUNCTION_7_31(&dword_1C2F90000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    OUTLINED_FUNCTION_14_19();
    outlined consume of Environment<CGFloat>.Content(v0, 0);
    uint64_t v9 = OUTLINED_FUNCTION_6_33();
    v10(v9);
  }
  OUTLINED_FUNCTION_28();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_20_13();
  if ((v0 & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    uint64_t v2 = static Log.runtimeIssuesLog.getter();
    if (OUTLINED_FUNCTION_17_20(v2))
    {
      OUTLINED_FUNCTION_15_19();
      uint64_t v3 = OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_24_15(v3);
      OUTLINED_FUNCTION_11_20(4.8149e-34);
      uint64_t v5 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x726F6C6F43, 0xE500000000000000, v4);
      OUTLINED_FUNCTION_2_37(v5);
      OUTLINED_FUNCTION_7_31(&dword_1C2F90000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    OUTLINED_FUNCTION_14_19();
    swift_release();
    uint64_t v8 = OUTLINED_FUNCTION_6_33();
    v9(v8);
  }
  OUTLINED_FUNCTION_28();
}

{
  OUTLINED_FUNCTION_22_13();
}

{
  uint64_t v0;
  char v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_20_13();
  if ((v1 & 1) == 0)
  {
    uint64_t v10 = static os_log_type_t.fault.getter();
    os_log_type_t v11 = static Log.runtimeIssuesLog.getter();
    uint64_t v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v3, &v15);
      OUTLINED_FUNCTION_32_4(v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    OUTLINED_FUNCTION_14_19();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v6);
  }
  OUTLINED_FUNCTION_28();
}

{
  OUTLINED_FUNCTION_19_21();
}

{
  specialized Environment.wrappedValue.getter();
}

{
  specialized Environment.wrappedValue.getter();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for EnvironmentValues();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_16_0();
  if ((v2 & 1) == 0)
  {
    swift_retain();
    static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    if (OUTLINED_FUNCTION_17_20(v9))
    {
      OUTLINED_FUNCTION_15_19();
      uint64_t v10 = OUTLINED_FUNCTION_9_3();
      OUTLINED_FUNCTION_24_15(v10);
      OUTLINED_FUNCTION_11_20(4.8149e-34);
      uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x74616F6C464743, 0xE700000000000000, v11);
      OUTLINED_FUNCTION_2_37(v12);
      OUTLINED_FUNCTION_7_31(&dword_1C2F90000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      OUTLINED_FUNCTION_12_23();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat>.Content(v4, 0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  }
  OUTLINED_FUNCTION_28();
}

{
  specialized Environment.wrappedValue.getter();
}

{
  OUTLINED_FUNCTION_23_13();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  unsigned char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for EnvironmentValues();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  if (v2)
  {
    *uint64_t v6 = v4 & 1;
  }
  else
  {
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v4, 0);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v13 = (_DWORD *)OUTLINED_FUNCTION_37();
      uint64_t v17 = swift_slowAlloc();
      *uint64_t v13 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x644974756F79614CLL, 0xEB000000006D6F69, &v17);
      OUTLINED_FUNCTION_21_15(v14);
      OUTLINED_FUNCTION_28_9(&dword_1C2F90000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat>.Content(v4, 0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0, v7);
  }
  OUTLINED_FUNCTION_28();
}

void ScreenSharingContentView.horizontalSizeClass.getter()
{
}

uint64_t ScreenSharingContentView.contentMode.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 72));
}

uint64_t ScreenSharingContentView.content.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ScreenSharingContentView.title.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ScreenSharingContentView.toolbar.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ScreenSharingContentView.init(contentMode:content:title:toolbar:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v15 = a1 & 1;
  *(void *)a8 = swift_getKeyPath();
  *(unsigned char *)(a8 + 8) = 0;
  uint64_t v16 = (int *)type metadata accessor for ScreenSharingContentView();
  uint64_t v17 = (uint64_t *)(a8 + v16[17]);
  *uint64_t v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(unsigned char *)(a8 + v16[18]) = v15;
  id v19 = (void *)(a8 + v16[19]);
  void *v19 = a2;
  v19[1] = a3;
  uint64_t v20 = (void *)(a8 + v16[20]);
  *uint64_t v20 = a4;
  v20[1] = a5;
  id v21 = (void *)(a8 + v16[21]);
  *id v21 = a6;
  v21[1] = a7;
  return result;
}

uint64_t ScreenSharingContentView.toolbarFont.getter()
{
  uint64_t v0 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v21 - v12;
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v21 - v14;
  if (static Platform.current.getter() != 1) {
    goto LABEL_10;
  }
  specialized Environment.wrappedValue.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E4F3DA58], v0);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v0);
  uint64_t v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v13, v16, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v0) != 1)
  {
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass();
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v18 = *(void (**)(char *, uint64_t))(v1 + 8);
      v18(v3, v0);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v18(v10, v0);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (v17) {
        goto LABEL_9;
      }
LABEL_10:
      static Font.caption.getter();
      static Font.Weight.regular.getter();
      goto LABEL_11;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_7:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_10;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v16, 1, v0) != 1) {
    goto LABEL_7;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
LABEL_9:
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
LABEL_11:
  uint64_t v19 = Font.weight(_:)();
  swift_release();
  return v19;
}

uint64_t ScreenSharingContentView.toolbarPlacement.getter()
{
  uint64_t v0 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v21 - v12;
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v21 - v14;
  if (static Platform.current.getter()
    || (uint64_t v16 = ScreenSharingContentView.interfaceOrientation.getter(), !UIInterfaceOrientationIsLandscape(v16)))
  {
    if (static Platform.current.getter() == 1)
    {
      specialized Environment.wrappedValue.getter();
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E4F3DA58], v0);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v0);
      uint64_t v18 = (uint64_t)&v6[*(int *)(v4 + 48)];
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v13, v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v0) == 1)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        if (__swift_getEnumTagSinglePayload(v18, 1, v0) == 1)
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
          return 0;
        }
        goto LABEL_12;
      }
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (__swift_getEnumTagSinglePayload(v18, 1, v0) == 1)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_12:
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
        return 2;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v18, v0);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass();
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v3, v0);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v20(v10, v0);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (v19) {
        return 0;
      }
    }
    return 2;
  }
  if (ScreenSharingContentView.interfaceOrientation.getter() == 4) {
    return 1;
  }
  else {
    return 3;
  }
}

void ScreenSharingContentView.body.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *))(v3 + 16))((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void *)(v1 + 24);
  *(void *)(v7 + 16) = *(void *)(v1 + 16);
  *(void *)(v7 + 24) = v8;
  long long v9 = *(_OWORD *)(v1 + 48);
  long long v20 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 + 32) = v20;
  *(_OWORD *)(v7 + 48) = v9;
  OUTLINED_FUNCTION_31_12();
  v10();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<ScreenSharingContentLayout>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutRoleKey>>);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
  OUTLINED_FUNCTION_25_13();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  OUTLINED_FUNCTION_27_12();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScreenSharingContentLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<ScreenSharingContentLayout>);
  OUTLINED_FUNCTION_27_12();
  type metadata accessor for _VariadicView.Tree();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  OUTLINED_FUNCTION_25_13();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Edge>);
  type metadata accessor for ModifiedContent();
  uint64_t v11 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScreenSharingContentLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<ScreenSharingContentLayout>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = v11;
  uint64_t v28 = WitnessTable;
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v14 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  uint64_t v25 = v13;
  uint64_t v26 = v14;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Edge> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Edge>);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  swift_getWitnessTable();
  uint64_t v21 = GeometryReader.init(content:)();
  uint64_t v22 = v17;
  OUTLINED_FUNCTION_31_12();
  uint64_t v18 = type metadata accessor for GeometryReader();
  uint64_t v19 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v21, v18, v19);
  swift_release();
  uint64_t v21 = v29;
  uint64_t v22 = v30;
  static ViewBuilder.buildExpression<A>(_:)(&v21, v18, v19);
  swift_release();
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v55 = a6;
  uint64_t v56 = a8;
  uint64_t v66 = a7;
  uint64_t v67 = a2;
  uint64_t v57 = a1;
  uint64_t v65 = a9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<ScreenSharingContentLayout>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutRoleKey>>);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?>);
  uint64_t v12 = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  uint64_t v58 = type metadata accessor for TupleView();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScreenSharingContentLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<ScreenSharingContentLayout>);
  uint64_t v53 = type metadata accessor for _VariadicView.Tree();
  uint64_t v61 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  BOOL v51 = (char *)&v50 - v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  uint64_t v59 = type metadata accessor for ModifiedContent();
  uint64_t v63 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  uint64_t v52 = (char *)&v50 - v14;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Edge>);
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v62 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v62);
  uint64_t v54 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v60 = (char *)&v50 - v17;
  *(void *)&long long v71 = a3;
  *((void *)&v71 + 1) = a4;
  uint64_t v18 = v55;
  uint64_t v72 = a5;
  uint64_t v73 = v55;
  uint64_t v19 = v56;
  uint64_t v74 = v66;
  uint64_t v75 = v56;
  char v20 = *(unsigned char *)(v67 + *(int *)(type metadata accessor for ScreenSharingContentView() + 72));
  GeometryProxy.safeAreaInsets.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  char v29 = ScreenSharingContentView.toolbarPlacement.getter();
  long long v71 = xmmword_1C376E570;
  LOBYTE(v72) = v20;
  uint64_t v73 = v22;
  uint64_t v74 = v24;
  uint64_t v75 = v26;
  uint64_t v76 = v28;
  char v77 = v29;
  uint64_t v30 = v18;
  uint64_t v31 = v18;
  uint64_t v32 = v66;
  uint64_t v33 = implicit closure #1 in closure #1 in ScreenSharingContentView.body.getter(&v71, a3, a4, v12, v30, v66, v19);
  v70[2] = a3;
  v70[3] = a4;
  v70[4] = v12;
  v70[5] = v31;
  v70[6] = v32;
  v70[7] = v19;
  v70[8] = v67;
  v69[2] = a3;
  v69[3] = a4;
  v69[4] = v12;
  v69[5] = v31;
  v69[6] = v32;
  v69[7] = v19;
  v69[8] = v67;
  v68[2] = a3;
  v68[3] = a4;
  v68[4] = v12;
  v68[5] = v31;
  v68[6] = v32;
  v68[7] = v19;
  v68[8] = v67;
  uint64_t v34 = v51;
  ((void (*)(uint64_t (*)(), void *, uint64_t (*)(), void *, uint64_t (*)(), void *))v33)(partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter, v70, partial apply for closure #2 in closure #1 in ScreenSharingContentView.body.getter, v69, partial apply for closure #3 in closure #1 in ScreenSharingContentView.body.getter, v68);
  swift_release();
  ScreenSharingContentView.toolbarFont.getter();
  uint64_t v35 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScreenSharingContentLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<ScreenSharingContentLayout>);
  uint64_t WitnessTable = swift_getWitnessTable();
  v70[14] = v35;
  v70[15] = WitnessTable;
  uint64_t v37 = v53;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = v52;
  View.font(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v37);
  ScreenSharingContentView.toolbarPlacement.getter();
  uint64_t v40 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  v70[12] = v38;
  v70[13] = v40;
  uint64_t v41 = v59;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v43 = v54;
  View.toolbarPlacement(_:)();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v41);
  uint64_t v44 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Edge> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Edge>);
  v70[10] = v42;
  v70[11] = v44;
  uint64_t v45 = v62;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v47 = v60;
  static ViewBuilder.buildExpression<A>(_:)(v43, v45, v46);
  BOOL v48 = *(void (**)(char *, uint64_t))(v64 + 8);
  v48(v43, v45);
  static ViewBuilder.buildExpression<A>(_:)(v47, v45, v46);
  return ((uint64_t (*)(char *, uint64_t))v48)(v47, v45);
}

uint64_t (*implicit closure #1 in closure #1 in ScreenSharingContentView.body.getter(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(void *)(v14 + 32) = a4;
  *(void *)(v14 + 40) = a5;
  *(void *)(v14 + 48) = a6;
  *(void *)(v14 + 56) = a7;
  long long v15 = a1[1];
  *(_OWORD *)(v14 + 64) = *a1;
  *(_OWORD *)(v14 + 80) = v15;
  *(_OWORD *)(v14 + 96) = a1[2];
  *(_OWORD *)(v14 + 105) = *(_OWORD *)((char *)a1 + 41);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ScreenSharingContentView.body.getter;
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
  type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?>);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
  swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?>);
  uint64_t v15 = swift_getWitnessTable();
  *((void *)&v17 + 1) = a11;
  *(void *)&long long v17 = WitnessTable;
  return ScreenSharingContentLayout.callAsFunction<A, B, C>(_:title:toolbar:)(a1, a2, a3, a4, a5, a6, v12, a7, a8, v13, v17, v15);
}

uint64_t closure #1 in closure #1 in ScreenSharingContentView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v23 - v12;
  v23[0] = v14;
  v23[1] = v15;
  v23[2] = v16;
  v23[3] = v17;
  v23[4] = v18;
  v23[5] = v19;
  uint64_t v20 = type metadata accessor for ScreenSharingContentView();
  (*(void (**)(void))(a1 + *(int *)(v20 + 76)))();
  static ViewBuilder.buildExpression<A>(_:)(v11, a2, a5);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, a2);
  static ViewBuilder.buildExpression<A>(_:)(v13, a2, a5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, a2);
}

uint64_t closure #2 in closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v55 = a8;
  uint64_t v52 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  BOOL v48 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v50 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  BOOL v51 = (char *)&v44 - v19;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v53 = (uint64_t)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v44 - v23;
  uint64_t v45 = a2;
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  uint64_t v46 = a4;
  uint64_t v65 = a4;
  uint64_t v66 = a5;
  uint64_t v47 = a5;
  uint64_t v25 = a6;
  uint64_t v67 = a6;
  uint64_t v68 = a7;
  uint64_t v26 = a7;
  uint64_t v27 = type metadata accessor for ScreenSharingContentView();
  ScreenSharingContentView.toolbarPlacement.getter();
  LODWORD(a6) = Axis.rawValue.getter();
  if (a6 == Axis.rawValue.getter())
  {
    uint64_t v28 = v48;
    uint64_t v29 = (*(uint64_t (**)(void))(a1 + *(int *)(v27 + 80)))();
    uint64_t v44 = (uint64_t)&v44;
    MEMORY[0x1F4188790](v29);
    *(&v44 - 8) = v45;
    *(&v44 - 7) = a3;
    uint64_t v30 = v47;
    *(&v44 - 6) = v46;
    *(&v44 - 5) = v30;
    *(&v44 - 4) = v25;
    *(&v44 - 3) = v26;
    *(&v44 - 2) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<Capsule._Inset, Material>?);
    uint64_t v47 = v20;
    uint64_t v31 = v49;
    lazy protocol witness table accessor for type _ShapeView<Capsule._Inset, Material>? and conformance <A> A?();
    static Alignment.center.getter();
    uint64_t v32 = v50;
    View.background<A>(alignment:content:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v28, a3);
    uint64_t v33 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
    uint64_t v56 = v25;
    uint64_t v57 = v33;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v35 = v51;
    static ViewBuilder.buildExpression<A>(_:)(v32, v16, WitnessTable);
    Swift::Int v36 = *(void (**)(char *, uint64_t))(v31 + 8);
    v36(v32, v16);
    uint64_t v37 = v53;
    static ViewBuilder.buildExpression<A>(_:)(v35, v16, WitnessTable);
    v36(v35, v16);
    uint64_t v20 = v47;
    __swift_storeEnumTagSinglePayload(v37, 0, 1, v16);
    static ViewBuilder.buildIf<A>(_:)(v37, (uint64_t)v24);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v38(v37, v20);
  }
  else
  {
    uint64_t v39 = v53;
    __swift_storeEnumTagSinglePayload(v53, 1, 1, v16);
    uint64_t v40 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
    uint64_t v61 = v25;
    uint64_t v62 = v40;
    swift_getWitnessTable();
    static ViewBuilder.buildIf<A>(_:)(v39, (uint64_t)v24);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v38(v39, v20);
  }
  uint64_t v41 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ShapeView<Capsule._Inset, Material>?>);
  uint64_t v59 = v25;
  uint64_t v60 = v41;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v42 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v24, v20, v42);
  return ((uint64_t (*)(char *, uint64_t))v38)(v24, v20);
}

uint64_t closure #1 in closure #2 in closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v38 = a1;
  uint64_t v39 = a8;
  uint64_t v10 = type metadata accessor for Material();
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RoundedCornerStyle();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Capsule();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<Capsule._Inset, Material>);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (unint64_t *)((char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v32 - v24;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v42 = v34;
  uint64_t v43 = v35;
  uint64_t v44 = v36;
  uint64_t v45 = v37;
  type metadata accessor for ScreenSharingContentView();
  uint64_t v26 = 1;
  if (static ContentMode.== infix(_:_:)())
  {
    uint64_t v27 = *(void (**)(char *, void, uint64_t))(v14 + 104);
    v27(v19, *MEMORY[0x1E4F3D4A0], v13);
    v27(v16, *MEMORY[0x1E4F3D4B0], v13);
    char v28 = static RoundedCornerStyle.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    outlined destroy of Capsule((uint64_t)v19);
    static Material.thin.getter();
    uint64_t v30 = v32;
    uint64_t v29 = v33;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))((char *)v23 + *(int *)(v20 + 52), v12, v33);
    unint64_t *v23 = ((v28 & 1) == 0) | 0xC018000000000000;
    *(_WORD *)((char *)v23 + *(int *)(v20 + 56)) = 256;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v29);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v23, (uint64_t)v25, &demangling cache variable for type metadata for _ShapeView<Capsule._Inset, Material>);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v25, v39, &demangling cache variable for type metadata for _ShapeView<Capsule._Inset, Material>);
    uint64_t v26 = 0;
  }
  return __swift_storeEnumTagSinglePayload(v39, v26, 1, v20);
}

uint64_t closure #3 in closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v33 = a8;
  uint64_t v32 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?>);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v29 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v30 = (char *)&v28 - v20;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a7;
  uint64_t v21 = type metadata accessor for ScreenSharingContentView();
  (*(void (**)(void))(a1 + *(int *)(v21 + 84)))();
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?);
  lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>? and conformance <A> A?();
  static Alignment.center.getter();
  uint64_t v22 = v29;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, a4);
  uint64_t v23 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?>);
  uint64_t v41 = a7;
  uint64_t v42 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = v30;
  static ViewBuilder.buildExpression<A>(_:)(v22, v17, WitnessTable);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v22, v17);
  static ViewBuilder.buildExpression<A>(_:)(v25, v17, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v17);
}

uint64_t closure #1 in closure #3 in closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = type metadata accessor for Material();
  uint64_t v41 = *(void *)(v14 - 8);
  uint64_t v42 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v38 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ShapeView<Rectangle._Inset, Material>);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v40 = (uint64_t)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v39 = (uint64_t)&v37 - v23;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v24 = v22;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  type metadata accessor for ScreenSharingContentView();
  uint64_t v25 = 1;
  if (static ContentMode.== infix(_:_:)())
  {
    ScreenSharingContentView.toolbarPlacement.getter();
    int v26 = Axis.rawValue.getter();
    if (v26 == Axis.rawValue.getter())
    {
      uint64_t v27 = v38;
      static Material.thin.getter();
      uint64_t v29 = v41;
      uint64_t v28 = v42;
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(&v18[*(int *)(v16 + 52)], v27, v42);
      *(void *)uint64_t v18 = 0xC059000000000000;
      *(_WORD *)&v18[*(int *)(v16 + 56)] = 256;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
      ScreenSharingContentView.toolbarPlacement.getter();
      int v30 = Edge.rawValue.getter();
      uint64_t v31 = qword_1C376E580[v30 == Edge.rawValue.getter()];
      uint64_t v32 = v40;
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v18, v40, &demangling cache variable for type metadata for _ShapeView<Rectangle._Inset, Material>);
      uint64_t v33 = (void *)(v32 + *(int *)(v24 + 36));
      *uint64_t v33 = 0;
      v33[1] = v31;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for _ShapeView<Rectangle._Inset, Material>);
      uint64_t v34 = v32;
      uint64_t v35 = v39;
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v34, v39, &demangling cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>);
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v35, a7, &demangling cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>);
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = 1;
    }
  }
  return __swift_storeEnumTagSinglePayload(a7, v25, 1, v24);
}

uint64_t key path getter for EnvironmentValues.interfaceOrientation : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.interfaceOrientation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C309B394@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.interfaceOrientation.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.interfaceOrientation : EnvironmentValues()
{
  return EnvironmentValues.interfaceOrientation.setter();
}

uint64_t sub_1C309B3E8()
{
  return EnvironmentValues.interfaceOrientation.setter();
}

uint64_t type metadata accessor for ScreenSharingContentView()
{
  return swift_getGenericMetadata();
}

uint64_t key path getter for EnvironmentValues.horizontalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1C309B44C()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t key path setter for EnvironmentValues.horizontalSizeClass : EnvironmentValues()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  MEMORY[0x1F4188790](v0 - 8);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_31_12();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v1, v2, v3);
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t sub_1C309B4F4()
{
  uint64_t v1 = type metadata accessor for ScreenSharingContentView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  outlined consume of Environment<CGFloat>.Content(*(void *)v2, *(unsigned char *)(v2 + 8));
  uint64_t v3 = v2 + *(int *)(v1 + 68);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v3, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_31_12();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = *(void *)(type metadata accessor for ScreenSharingContentView() - 8);
  uint64_t v12 = (uint64_t)v2 + ((*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return closure #1 in ScreenSharingContentView.body.getter(a1, v12, v5, v6, v7, v8, v9, v10, a2);
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingContentView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for ScreenSharingContentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 72);
}

void type metadata completion function for ScreenSharingContentView()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ScreenSharingContentView(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v8);
    *uint64_t v4 = v7;
    *((unsigned char *)v4 + 8) = v8;
    uint64_t v9 = a3[17];
    uint64_t v10 = (uint64_t *)((char *)v4 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[19];
    *((unsigned char *)v4 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[20];
    uint64_t v20 = a3[21];
    uint64_t v21 = (uint64_t *)((char *)v4 + v19);
    uint64_t v22 = (void *)(a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (uint64_t *)((char *)v4 + v20);
    uint64_t v25 = (void *)(a2 + v20);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ScreenSharingContentView(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScreenSharingContentView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a3[17];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[19];
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[20];
  uint64_t v18 = a3[21];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScreenSharingContentView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[17];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v10, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  uint64_t v15 = a3[19];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  uint64_t v19 = a3[20];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  uint64_t v23 = a3[21];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ScreenSharingContentView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[17];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v12 = a3[19];
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for ScreenSharingContentView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = a3[17];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v10, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v16 = a3[19];
  *(unsigned char *)(a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  swift_release();
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  swift_release();
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)((char *)a2 + a3[21]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingContentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C309C228);
}

uint64_t sub_1C309C228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 68);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 76));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ScreenSharingContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C309C2D0);
}

void sub_1C309C2D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 68);
    __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 76)) = (a2 - 1);
  }
}

void type metadata accessor for Environment<UserInterfaceSizeClass?>.Content()
{
  if (!lazy cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    }
  }
}

uint64_t sub_1C309C3BC()
{
  return swift_getWitnessTable();
}

uint64_t outlined consume of Environment<CGFloat>.Content(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter()
{
  return partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #1 in ScreenSharingContentView.body.getter);
}

uint64_t partial apply for closure #2 in closure #1 in ScreenSharingContentView.body.getter()
{
  return partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #2 in closure #1 in ScreenSharingContentView.body.getter);
}

uint64_t partial apply for closure #3 in closure #1 in ScreenSharingContentView.body.getter()
{
  return partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #3 in closure #1 in ScreenSharingContentView.body.getter);
}

unint64_t lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass()
{
  unint64_t result = lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass;
  if (!lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass)
  {
    type metadata accessor for UserInterfaceSizeClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in ScreenSharingContentView.body.getter()
{
  return partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #3 in closure #1 in ScreenSharingContentView.body.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>?);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle._Inset, Material> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Rectangle._Inset, Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in ScreenSharingContentView.body.getter()
{
  return partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #2 in closure #1 in ScreenSharingContentView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingContentView.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

unint64_t lazy protocol witness table accessor for type _ShapeView<Capsule._Inset, Material>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeView<Capsule._Inset, Material>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type _ShapeView<Capsule._Inset, Material>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ShapeView<Capsule._Inset, Material>?);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Capsule._Inset, Material> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<Capsule._Inset, Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<Capsule._Inset, Material>? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined destroy of Capsule(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C309C944()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ScreenSharingContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return implicit closure #2 in implicit closure #1 in closure #1 in ScreenSharingContentView.body.getter(a1, a2, a3, a4, a5, a6, v7[2], a7, v7[3], v7[4], v7[5]);
}

BOOL UIInterfaceOrientationIsLandscape(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

uint64_t outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

void LocalParticipantViewConstraintManager.updateConstraints()()
{
  unint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = v0;
  switch(*(unsigned __int8 *)(v0 + 288) >> 6)
  {
    case 1:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1C3769F40;
      uint64_t v12 = *(void **)(v0 + 80);
      uint64_t v13 = *(void **)(v0 + 88);
      *(void *)(v11 + 32) = v12;
      *(void *)(v11 + 40) = v13;
      uint64_t v14 = *(void **)(v0 + 120);
      *(void *)(v11 + 48) = v14;
      v44[0] = v11;
      specialized Array._endMutation()();
      uint64_t v15 = (void *)(v0 + 152);
      swift_beginAccess();
      *(void *)(v0 + 152) = v44[0];
      id v16 = v12;
      id v17 = v13;
      id v18 = v14;
      swift_bridgeObjectRelease();
      if (v1 != 3)
      {
        v43[0] = BYTE1(v1);
        LocalParticipantViewConstraintManager.constraintsForCorner(_:bannerState:sidePaddings:)(v1, v43);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      }
      uint64_t v19 = *(void **)(v0 + 96);
      uint64_t v20 = *(void **)(v0 + 104);
      swift_beginAccess();
      unint64_t v21 = *(void *)(v0 + 152);
      if (v21 >> 62)
      {
        id v41 = v19;
        id v42 = v20;
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v23 = v19;
        id v24 = v20;
      }
      if (__OFADD__(v22, 2))
      {
        __break(1u);
        JUMPOUT(0x1C309CEACLL);
      }
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v22 + 2, 1);
      specialized Array._endMutation()();
      id v25 = v19;
      MEMORY[0x1C87733A0]();
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v26 = v20;
      MEMORY[0x1C87733A0]();
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

      return;
    case 2:
      outlined init with take of AspectRatio(v0 + 160, (uint64_t)v44);
      *(void *)(v0 + 128) = LocalParticipantViewConstraintManager.centeringConstraints(portrait:aspectRatio:)((v1 & 0xFFFFFFFFFFFFFFFDLL) == 1, (uint64_t)v44);
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v0 + 128);
      swift_beginAccess();
      *(void *)(v2 + 152) = v27;
      swift_bridgeObjectRetain();
      goto LABEL_17;
    case 3:
      uint64_t v28 = *(void *)(v0 + 144);
      uint64_t v29 = (void *)(v0 + 152);
      swift_beginAccess();
      *(void *)(v2 + 152) = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v30 = MEMORY[0x1C8776240](v2 + 216);
      if (!v30) {
        return;
      }
      uint64_t v31 = (char *)v30;
      uint64_t v32 = MEMORY[0x1C8776240](v2 + 232);
      if (!v32) {
        goto LABEL_22;
      }
      uint64_t v33 = (void *)v32;
      uint64_t v34 = MEMORY[0x1C8776240](v2 + 240);
      if (v34)
      {
        uint64_t v35 = (void *)v34;
        if (v1 <= 6 && ((1 << v1) & 0x6C) != 0) {
          id v36 = objc_msgSend(v33, sel_bottomAnchor);
        }
        else {
          id v36 = objc_msgSend(*(id *)&v31[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView], sel_bottomAnchor);
        }
        id v37 = v36;
        id v38 = objc_msgSend(v35, sel_bottomAnchor);
        id v39 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v37);

        uint64_t v40 = swift_beginAccess();
        MEMORY[0x1C87733A0](v40);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

LABEL_22:
      }
      else
      {
      }
      return;
    default:
      double v3 = *(double *)(v0 + 264);
      uint64_t v4 = *(void **)(v0 + 16);
      objc_msgSend(v4, sel_setConstant_, *(double *)(v0 + 256));
      uint64_t v5 = *(void **)(v0 + 24);
      objc_msgSend(v5, sel_setConstant_, v3);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1C3769F40;
      *(void *)(v6 + 32) = v4;
      *(void *)(v6 + 40) = v5;
      uint64_t v7 = *(void **)(v0 + 120);
      *(void *)(v6 + 48) = v7;
      v44[0] = v6;
      specialized Array._endMutation()();
      swift_beginAccess();
      *(void *)(v0 + 152) = v44[0];
      id v8 = v4;
      id v9 = v5;
      id v10 = v7;
      swift_bridgeObjectRelease();
      v43[0] = BYTE1(v1);
      LocalParticipantViewConstraintManager.constraintsForCorner(_:bannerState:sidePaddings:)(v1, v43);
      swift_beginAccess();
      swift_bridgeObjectRetain();
LABEL_16:
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
LABEL_17:
      swift_bridgeObjectRelease();
      return;
  }
}

void LocalParticipantViewConstraintManager.type.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 40);
  *(void *)(v1 + 280) = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 288) = v2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 248) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 264) = v3;
  LocalParticipantViewConstraintManager.updateConstraints()();
}

id LocalParticipantViewConstraintManager.regularWidth.getter()
{
  uint64_t v1 = 16;
  if (*(unsigned char *)(v0 + 192)) {
    uint64_t v1 = 80;
  }
  return objc_msgSend(*(id *)(v0 + v1), sel_constant);
}

uint64_t LocalParticipantViewConstraintManager.mostRecentLocalParticipantCorner.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 289);
}

uint64_t LocalParticipantViewConstraintManager.mostRecentLocalParticipantCorner.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 289) = a1;
  return result;
}

uint64_t (*LocalParticipantViewConstraintManager.mostRecentLocalParticipantCorner.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t LocalParticipantViewConstraintManager.__allocating_init(containingGuide:rosterCellLayoutGuide:containingView:localPIPView:controlsView:effectsControlsView:localState:bannerState:controlsState:gridView:aspectRatio:deviceOrientation:)(void *a1, void *a2, void *a3, char *a4, void *a5, void *a6, unsigned __int8 a7, unsigned __int8 *a8, unint64_t a9, void *a10, uint64_t a11, unint64_t a12)
{
  uint64_t v19 = swift_allocObject();
  LocalParticipantViewConstraintManager.init(containingGuide:rosterCellLayoutGuide:containingView:localPIPView:controlsView:effectsControlsView:localState:bannerState:controlsState:gridView:aspectRatio:deviceOrientation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v19;
}

uint64_t LocalParticipantViewConstraintManager.init(containingGuide:rosterCellLayoutGuide:containingView:localPIPView:controlsView:effectsControlsView:localState:bannerState:controlsState:gridView:aspectRatio:deviceOrientation:)(void *a1, void *a2, void *a3, char *a4, void *a5, void *a6, unsigned __int8 a7, unsigned __int8 *a8, unint64_t a9, void *a10, uint64_t a11, unint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v17 = *a8;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  *(void *)(v13 + 128) = MEMORY[0x1E4FBC860];
  *(void *)(v13 + 136) = 0;
  *(void *)(v13 + 152) = v18;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v13 + 289) = 4;
  *(void *)(v13 + 296) = 0;
  *(void *)(v13 + 304) = 0;
  *(unsigned char *)(v13 + 312) = 1;
  uint64_t v73 = a5;
  if (a7 >> 6)
  {
    if (a7 >> 6 != 1)
    {
      unint64_t v20 = a9;
      uint64_t v19 = 0;
      if (a7 == 128)
      {
        unint64_t v20 = a12;
        char v21 = 0x80;
      }
      else
      {
        char v21 = -64;
      }
      goto LABEL_12;
    }
    a7 &= 0x3Fu;
    outlined init with take of AspectRatio(a11, (uint64_t)v77);
    if (v78)
    {
LABEL_4:
      uint64_t v19 = 0;
      unint64_t v20 = a7 | (unint64_t)(v17 << 8);
      char v21 = 64;
      goto LABEL_12;
    }
  }
  else
  {
    outlined init with take of AspectRatio(a11, (uint64_t)v77);
    if (v78 == 1) {
      goto LABEL_4;
    }
  }
  static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static Defaults.shared + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v22 + 488))();
  unint64_t v20 = a7 | (unint64_t)(v17 << 8);
  char v21 = 1;
  uint64_t v19 = 0x4056000000000000;
LABEL_12:
  *(void *)(v13 + 248) = v20;
  *(void *)(v13 + 256) = v19;
  *(void *)(v13 + 272) = 0;
  *(void *)(v13 + 280) = 0;
  *(void *)(v13 + 264) = v19;
  *(unsigned char *)(v13 + 288) = v21;
  outlined init with take of AspectRatio(a11, v13 + 160);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  *(void *)(v13 + 200) = v23;
  objc_msgSend(a3, sel_addLayoutGuide_, v23);
  id v24 = objc_msgSend(a4, sel_rightAnchor);
  id v25 = objc_msgSend(a1, sel_rightAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(void *)(v13 + 32) = v26;
  id v27 = objc_msgSend(a4, sel_bottomAnchor);
  id v28 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a1, sel_bottomAnchor));

  *(void *)(v13 + 40) = v28;
  id v29 = objc_msgSend(a4, sel_leftAnchor);
  id v30 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a1, sel_leftAnchor));

  *(void *)(v13 + 48) = v30;
  id v31 = objc_msgSend(a4, sel_topAnchor);
  id v32 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a1, sel_topAnchor));

  *(void *)(v13 + 56) = v32;
  id v33 = objc_msgSend(a4, sel_trailingAnchor);
  id v34 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(*(id *)(v13 + 200), sel_trailingAnchor));

  *(void *)(v13 + 64) = v34;
  id v35 = objc_msgSend(a4, sel_centerYAnchor);
  id v36 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(*(id *)(v13 + 200), sel_centerYAnchor));

  *(void *)(v13 + 72) = v36;
  id v37 = objc_msgSend(a4, sel_widthAnchor);
  static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static Defaults.shared + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v38 + 488))();
  id v39 = objc_msgSend(v37, sel_constraintEqualToConstant_, 88.0);

  *(void *)(v13 + 16) = v39;
  id v40 = OUTLINED_FUNCTION_5_44();
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v41 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v42 + 488))();
  id v43 = objc_msgSend(v40, sel_constraintEqualToConstant_, 88.0);

  *(void *)(v13 + 24) = v43;
  id v44 = objc_msgSend(a4, sel_widthAnchor);
  id v45 = OUTLINED_FUNCTION_5_44();
  id v46 = OUTLINED_FUNCTION_1_51((uint64_t)v45);

  *(void *)(v13 + 80) = v46;
  id v47 = OUTLINED_FUNCTION_5_44();
  id v48 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a2, sel_heightAnchor));

  *(void *)(v13 + 88) = v48;
  id v49 = objc_msgSend(a4, sel_trailingAnchor);
  id v50 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a2, sel_trailingAnchor));

  *(void *)(v13 + 96) = v50;
  id v51 = objc_msgSend(a4, sel_bottomAnchor);
  id v52 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a2, sel_bottomAnchor));

  *(void *)(v13 + 104) = v52;
  id v53 = objc_msgSend(a4, sel_bottomAnchor);
  id v54 = objc_msgSend(a2, sel_topAnchor);
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v55 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v56 + 488))();
  id v57 = objc_msgSend(v53, sel_constraintEqualToAnchor_constant_, v54, -16.0);

  *(void *)(v13 + 112) = v57;
  id v58 = objc_msgSend(*(id *)&a4[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView], sel_bottomAnchor);
  id v59 = OUTLINED_FUNCTION_1_51((uint64_t)objc_msgSend(a4, sel_bottomAnchor));

  *(void *)(v13 + 120) = v59;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1C3769580;
  id v61 = objc_msgSend(a4, sel_widthAnchor);
  id v62 = OUTLINED_FUNCTION_3_52((uint64_t)objc_msgSend(a3, sel_widthAnchor));

  *(void *)(v60 + 32) = v62;
  id v63 = OUTLINED_FUNCTION_5_44();
  id v64 = OUTLINED_FUNCTION_3_52((uint64_t)objc_msgSend(a3, sel_heightAnchor));

  *(void *)(v60 + 40) = v64;
  id v65 = objc_msgSend(a4, sel_centerXAnchor);
  id v66 = OUTLINED_FUNCTION_3_52((uint64_t)objc_msgSend(a3, sel_centerXAnchor));

  *(void *)(v60 + 48) = v66;
  id v67 = objc_msgSend(a4, sel_centerYAnchor);
  id v68 = OUTLINED_FUNCTION_3_52((uint64_t)objc_msgSend(a3, sel_centerYAnchor));

  *(void *)(v60 + 56) = v68;
  specialized Array._endMutation()();
  *(void *)(v13 + 144) = v60;
  objc_msgSend(a3, sel_bounds);
  double Height = CGRectGetHeight(v79);
  objc_msgSend(a3, sel_bounds);
  char v70 = CGRectGetWidth(v80) < Height;
  *(void *)(v13 + 128) = LocalParticipantViewConstraintManager.centeringConstraints(portrait:aspectRatio:)(v70, a11);
  swift_bridgeObjectRelease();
  LocalParticipantViewConstraintManager.updateConstraints()();

  return v13;
}

uint64_t outlined init with take of AspectRatio(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t LocalParticipantViewConstraintManager.centeringConstraints(portrait:aspectRatio:)(char a1, uint64_t a2)
{
  unint64_t v4 = LocalParticipantViewConstraintManager.getCenteringConstraints(portrait:)(a1);
  LocalParticipantViewConstraintManager.getHeightAndWidthConstraints(_:_:)(a1, a2);
  specialized Array.append<A>(contentsOf:)();
  return v4;
}

void LocalParticipantViewConstraintManager.sizeFor(state:deviceOrientation:)(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 19);
  static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static Defaults.shared;
  long long v3 = (void (**)(double))(*(void *)static Defaults.shared + 384);
  unint64_t v4 = *v3;
  ((void (*)(void))*v3)();
  uint64_t v5 = static Platform.current.getter();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 488);
  uint64_t v7 = v6(v5);
  (*(uint64_t (**)(uint64_t))(*(void *)v2 + 880))(v7);
  if (static Platform.current.getter() == 3)
  {
    double v8 = static Layout.MediaPip.padding.getter();
    v4(v8);
    uint64_t v9 = static Platform.current.getter();
    v6(v9);
  }
  else if (v1 == 2)
  {
    id v10 = objc_msgSend(self, sel_currentDevice);
    id v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

    if (v11 == (id)1)
    {
      double v12 = static Layout.MediaPip.padding.getter();
      uint64_t v13 = static Defaults.shared;
      uint64_t v14 = (void (**)(double))(*(void *)static Defaults.shared + 384);
      uint64_t v15 = *v14;
      (*v14)(v12);
      uint64_t v16 = static Platform.current.getter();
      uint64_t v17 = *(double (**)(uint64_t))(*(void *)v13 + 488);
      v17(v16);
      double v18 = static Layout.MediaPip.padding.getter();
      v15(v18);
      uint64_t v19 = static Platform.current.getter();
      v17(v19);
      double v20 = static Layout.MediaPip.padding.getter();
      v15(v20);
      uint64_t v21 = static Platform.current.getter();
      v17(v21);
    }
  }
}

uint64_t LocalParticipantViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 17);
  char v6 = *(unsigned char *)(a1 + 18);
  char v7 = *(unsigned char *)(a1 + 19);
  char v8 = *(unsigned char *)(a1 + 20);
  char v9 = *(unsigned char *)(a1 + 21);
  char v10 = *(unsigned char *)(a1 + 22);
  unsigned int v11 = v5;
  if (v5 >> 6)
  {
    if (v5 >> 6 != 1)
    {
      if (v5 == 128)
      {
        unint64_t v19 = a2;
        OUTLINED_FUNCTION_4_40();
        char v15 = 0x80;
      }
      else
      {
        unint64_t v19 = *(void *)(a1 + 8);
        OUTLINED_FUNCTION_4_40();
        char v15 = -64;
      }
      goto LABEL_20;
    }
    unsigned int v11 = v5 & 0x3F;
  }
  char v12 = *(unsigned char *)(a1 + 20);
  if ((*(unsigned char *)(v2 + 192) & 1) == 0)
  {
    if (*(double *)(v2 + 160) != 1.0 || *(double *)(v2 + 168) != 1.0) {
      goto LABEL_16;
    }
    BOOL v14 = *(double *)(v2 + 176) != 1.0;
    if (*(double *)(v2 + 184) != 1.0) {
      BOOL v14 = 1;
    }
    char v12 = v14 | v8;
  }
  if (v12 & 1) != 0 || (*(unsigned char *)(a1 + 22))
  {
LABEL_16:
    LOBYTE(v19) = *(unsigned char *)a1;
    uint64_t v20 = v3;
    LOBYTE(v21) = v4;
    BYTE1(v21) = v5;
    BYTE2(v21) = v6;
    BYTE3(v21) = v7;
    BYTE4(v21) = v8;
    BYTE5(v21) = v9;
    BYTE6(v21) = v10;
    LocalParticipantViewConstraintManager.sizeFor(state:deviceOrientation:)((uint64_t)&v19);
    unint64_t v19 = v11 | (unint64_t)(v4 << 8);
    uint64_t v20 = v16;
    uint64_t v21 = v17;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    char v15 = 1;
    goto LABEL_20;
  }
  unint64_t v19 = v11 | (unint64_t)(v4 << 8);
  OUTLINED_FUNCTION_4_40();
  char v15 = 64;
LABEL_20:
  char v24 = v15;
  LocalParticipantViewConstraintManager.type.setter((uint64_t)&v19);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void LocalParticipantViewConstraintManager.update(aspectRatio:deviceOrientation:layoutState:)(uint64_t a1, uint64_t a2, char *a3)
{
  double v45 = *(double *)&a2;
  char v5 = *a3;
  uint64_t v6 = *((void *)a3 + 1);
  char v7 = a3[16];
  LODWORD(v43) = a3[17];
  HIDWORD(v43) = a3[18];
  char v8 = a3[20];
  char v9 = v8;
  LODWORD(v44) = a3[19];
  HIDWORD(v44) = a3[21];
  int v10 = a3[22];
  outlined init with take of AspectRatio(a1, v3 + 160);
  *(void *)&double v11 = *(unsigned __int16 *)(v3 + 248);
  unsigned int v12 = *(unsigned __int8 *)(v3 + 288);
  if (v12 >> 6 == 1)
  {
    outlined init with take of AspectRatio(a1, (uint64_t)&v54);
    if ((v56 & 1) == 0 && (v54 != 1.0 || v55 != 1.0)) {
      goto LABEL_28;
    }
    outlined init with take of AspectRatio(a1, (uint64_t)&v50);
    if ((v53 & 1) == 0)
    {
      OUTLINED_FUNCTION_6_34(v26, v27, v28, v29, v30, v31, v32, v33, v39, v41, v43, v44, v45, v46, *(double *)&v47, *((double *)&v47 + 1), *(double *)&v48, *((double *)&v48 + 1), v49,
        v50,
        v51,
        v52);
      if (v35 != v36) {
        char v34 = 1;
      }
      char v9 = v34 | v8;
    }
    if (v9 & 1) != 0 || (v10)
    {
LABEL_28:
      double v46 = v11;
      long long v47 = 0u;
      long long v48 = 0u;
      LOBYTE(v49) = 1;
      LocalParticipantViewConstraintManager.type.setter((uint64_t)&v46);
      OUTLINED_FUNCTION_2_38();
      goto LABEL_29;
    }
  }
  else
  {
    if (v12 >> 6) {
      return;
    }
    double v40 = *(double *)(v3 + 280);
    double v42 = *(double *)(v3 + 272);
    outlined init with take of AspectRatio(a1, (uint64_t)&v54);
    if ((v56 & 1) != 0 || (v54 == 1.0 ? (BOOL v13 = v55 == 1.0) : (BOOL v13 = 0), v13))
    {
      outlined init with take of AspectRatio(a1, (uint64_t)&v50);
      if ((v53 & 1) == 0)
      {
        OUTLINED_FUNCTION_6_34(v14, v15, v16, v17, v18, v19, v20, v21, v40, v42, v43, v44, v45, v46, *(double *)&v47, *((double *)&v47 + 1), *(double *)&v48, *((double *)&v48 + 1), v49,
          v50,
          v51,
          v52);
        if (v23 != v24) {
          char v22 = 1;
        }
        char v9 = v22 | v8;
      }
      if ((v9 & 1) == 0 && !v10)
      {
        double v46 = v11;
        long long v47 = 0u;
        long long v48 = 0u;
        LOBYTE(v49) = 64;
        LocalParticipantViewConstraintManager.type.setter((uint64_t)&v46);
        LOBYTE(v46) = v5;
        *(void *)&long long v47 = v6;
        BYTE8(v47) = v7;
        BYTE9(v47) = LOBYTE(v43);
        BYTE10(v47) = BYTE4(v43);
        *(_WORD *)((char *)&v47 + 11) = LOBYTE(v44);
        *(_WORD *)((char *)&v47 + 13) = BYTE4(v44);
LABEL_29:
        LocalParticipantViewConstraintManager.update(aspectRatio:deviceOrientation:layoutState:)(a1, *(void *)&v45, &v46);
        return;
      }
    }
    OUTLINED_FUNCTION_2_38();
    LocalParticipantViewConstraintManager.sizeFor(state:deviceOrientation:)((uint64_t)&v46);
    double v46 = v11;
    *(void *)&long long v47 = v37;
    *((void *)&v47 + 1) = v38;
    *(double *)&long long v48 = v42;
    *((double *)&v48 + 1) = v40;
    LOBYTE(v49) = v12 & 1;
    LocalParticipantViewConstraintManager.type.setter((uint64_t)&v46);
  }
  LocalParticipantViewConstraintManager.updateConstraints()();
}

uint64_t LocalParticipantViewConstraintManager.constraintsForCorner(_:bannerState:sidePaddings:)(char a1, unsigned char *a2)
{
  uint64_t v3 = v2;
  switch(a1)
  {
    case 1:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
      char v5 = (void *)v2[4];
      goto LABEL_4;
    case 2:
      if (!*a2)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
        char v5 = (void *)v2[6];
        goto LABEL_13;
      }
      type metadata accessor for AppUtilities();
      BOOL v7 = static AppUtilities.isRTL.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
      char v5 = (void *)v3[6];
      *(void *)(v4 + 32) = v5;
      if (v7) {
        goto LABEL_10;
      }
      goto LABEL_7;
    case 3:
      if (*a2)
      {
        type metadata accessor for AppUtilities();
        BOOL v8 = static AppUtilities.isRTL.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
        char v5 = (void *)v3[4];
        *(void *)(v4 + 32) = v5;
        if (v8) {
LABEL_7:
        }
          uint64_t v6 = (void *)v3[14];
        else {
LABEL_10:
        }
          uint64_t v6 = (void *)v3[5];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
        char v5 = (void *)v2[4];
LABEL_13:
        uint64_t v6 = (void *)v2[5];
LABEL_14:
        *(void *)(v4 + 32) = v5;
      }
      *(void *)(v4 + 40) = v6;
      uint64_t v12 = v4;
      specialized Array._endMutation()();
      id v9 = v5;
      id v10 = v6;
      return v12;
    default:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
      char v5 = (void *)v2[6];
LABEL_4:
      uint64_t v6 = (void *)v2[7];
      goto LABEL_14;
  }
}

unint64_t LocalParticipantViewConstraintManager.getCenteringConstraints(portrait:)(char a1)
{
  uint64_t v3 = MEMORY[0x1C8776240](v1 + 208);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = MEMORY[0x1C8776240](v1 + 224);
    if (v5)
    {
      id v54 = (id)v5;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C3769600;
      id v7 = objc_msgSend(*(id *)(v1 + 200), sel_topAnchor);
      id v8 = objc_msgSend(v4, sel_topAnchor);
      id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v8);

      double v51 = v9;
      *(void *)(inited + 32) = v9;
      id v10 = objc_msgSend(*(id *)(v1 + 200), sel_trailingAnchor);
      id v11 = objc_msgSend(v4, sel_trailingAnchor);
      id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

      double v52 = v12;
      *(void *)(inited + 40) = v12;
      BOOL v13 = *(void **)(v1 + 64);
      *(void *)(inited + 48) = v13;
      double v14 = *(void **)(v1 + 72);
      *(void *)(inited + 56) = v14;
      double v15 = v4;
      double v16 = *(void **)(v1 + 120);
      *(void *)(inited + 64) = v16;
      unint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_1C3769610;
      double v18 = *(void **)(v1 + 200);
      id v53 = v13;
      id v19 = v14;
      id v20 = v16;
      id v21 = objc_msgSend(v18, sel_leadingAnchor);
      if (a1)
      {
        id v22 = objc_msgSend(v15, sel_leadingAnchor);
        id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

        *(void *)(v17 + 32) = v23;
        id v24 = objc_msgSend(*(id *)(v1 + 200), sel_bottomAnchor);
        id v25 = objc_msgSend(v15, sel_bottomAnchor);
        static Layout.MediaPip.padding.getter();
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        uint64_t v26 = static Defaults.shared;
        (*(void (**)(void))(*(void *)static Defaults.shared + 384))();
        uint64_t v27 = static Platform.current.getter();
        (*(void (**)(uint64_t))(*(void *)v26 + 488))(v27);
        id v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_constant_, v25, -157.0);

        *(void *)(v17 + 40) = v28;
        specialized Array._endMutation()();
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v29 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        if (__OFADD__(v29, 5))
        {
          __break(1u);
        }
        else
        {
          specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v29 + 5, 1);
          specialized Array._endMutation()();
          id v30 = v51;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
LABEL_10:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v31 = v52;
            MEMORY[0x1C87733A0]();
            if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v32 = v53;
            MEMORY[0x1C87733A0]();
            if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v33 = v19;
            MEMORY[0x1C87733A0]();
            if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v34 = v20;
            MEMORY[0x1C87733A0]();
            if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
LABEL_33:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            unint64_t v35 = v17;
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            specialized _ContiguousArrayStorage.__deallocating_deinit();

            return v35;
          }
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_10;
      }
      id v50 = v19;
      double v36 = v20;
      id v37 = objc_msgSend(v54, sel_trailingAnchor);
      id v38 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v37);

      *(void *)(v17 + 32) = v38;
      double v39 = &selRef_ringButton;
      id v40 = objc_msgSend(*(id *)(v1 + 200), sel_bottomAnchor);
      id v41 = objc_msgSend(v15, sel_bottomAnchor);
      id v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

      *(void *)(v17 + 40) = v42;
      specialized Array._endMutation()();
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v43 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      if (__OFADD__(v43, 5))
      {
        __break(1u);
      }
      else
      {
        double v39 = (char **)v20;
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v43 + 5, 1);
        specialized Array._endMutation()();
        id v44 = v51;
        MEMORY[0x1C87733A0]();
        double v36 = v50;
        if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_25:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v45 = v52;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v46 = v53;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v47 = v36;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          long long v48 = v39;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          goto LABEL_33;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_25;
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t LocalParticipantViewConstraintManager.getHeightAndWidthConstraints(_:_:)(char a1, uint64_t a2)
{
  outlined init with take of AspectRatio(a2, (uint64_t)v35);
  double v5 = v36;
  uint64_t v6 = MEMORY[0x1C8776240](v2 + 216);
  if (!v6) {
    return MEMORY[0x1E4FBC860];
  }
  id v7 = (void *)v6;
  outlined init with take of AspectRatio(a2, (uint64_t)v46);
  double v8 = v46[0];
  if (v47) {
    double v9 = 1.0;
  }
  else {
    double v9 = v5;
  }
  if (v47) {
    double v8 = 1.0;
  }
  if (v8 > v9) {
    double v10 = v8;
  }
  else {
    double v10 = v9;
  }
  outlined init with take of AspectRatio(a2, (uint64_t)v44);
  double v11 = v44[0];
  if (v45) {
    double v12 = 1.0;
  }
  else {
    double v12 = v5;
  }
  if (v45) {
    double v11 = 1.0;
  }
  if (v12 < v11) {
    double v11 = v12;
  }
  double v13 = v10 / v11;
  if (a1)
  {
    outlined init with take of AspectRatio(a2, (uint64_t)&v41);
    if (((v43 & 1) != 0 || ((double v14 = v41, v15 = v42, v41 == 1.0) ? (v16 = v42 == 1.0) : (v16 = 0), v16))
      && ((outlined init with take of AspectRatio(a2, (uint64_t)v37), (v40 & 1) != 0)
       || ((double v14 = v38, v15 = v39, v38 == 1.0) ? (v17 = v39 == 1.0) : (v17 = 0), v17)))
    {
      double v18 = &selRef_widthAnchor;
    }
    else
    {
      double v18 = &selRef_heightAnchor;
    }
    id v25 = objc_msgSend(*(id *)(v2 + 200), *v18, v14, v15);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1C3769610;
    id v26 = objc_msgSend(v7, sel_heightAnchor);
    id v27 = objc_msgSend(v26, sel_constraintEqualToAnchor_multiplier_, v25, 0.7);

    *(void *)(v19 + 32) = v27;
    id v28 = objc_msgSend(v7, sel_widthAnchor);
    id v29 = objc_msgSend(v7, sel_heightAnchor);
    id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_multiplier_, v29, 1.0 / v13);
  }
  else
  {
    outlined init with take of AspectRatio(a2, (uint64_t)&v41);
    if (((v43 & 1) != 0 || ((double v20 = v41, v21 = v42, v41 == 1.0) ? (v22 = v42 == 1.0) : (v22 = 0), v22))
      && ((outlined init with take of AspectRatio(a2, (uint64_t)v37), (v40 & 1) != 0)
       || ((double v20 = v38, v21 = v39, v38 == 1.0) ? (v23 = v39 == 1.0) : (v23 = 0), v23)))
    {
      id v24 = &selRef_heightAnchor;
    }
    else
    {
      id v24 = &selRef_widthAnchor;
    }
    id v25 = objc_msgSend(*(id *)(v2 + 200), *v24, v20, v21);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1C3769610;
    id v31 = objc_msgSend(v7, sel_widthAnchor);
    id v32 = objc_msgSend(v31, sel_constraintEqualToAnchor_multiplier_, v25, 0.7);

    *(void *)(v19 + 32) = v32;
    id v28 = objc_msgSend(v7, sel_heightAnchor);
    id v29 = objc_msgSend(v7, sel_widthAnchor);
    id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_multiplier_, v29, 1.0 / v13);
  }
  id v33 = v30;

  *(void *)(v19 + 40) = v33;
  specialized Array._endMutation()();

  return v19;
}

id *LocalParticipantViewConstraintManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t LocalParticipantViewConstraintManager.__deallocating_deinit()
{
  LocalParticipantViewConstraintManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance LocalParticipantViewConstraintManager(uint64_t a1, unint64_t a2)
{
  return LocalParticipantViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(a1, a2);
}

Swift::Void __swiftcall LocalParticipantViewConstraintManager.updateView(with:)(CGSize with)
{
  *(CGFloat *)(v1 + 296) = with.width;
  *(CGFloat *)(v1 + 304) = with.height;
  *(unsigned char *)(v1 + 312) = 0;
}

uint64_t dispatch thunk of LocalParticipantViewSizeUpdater.updateView(with:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for LocalParticipantViewConstraintManager()
{
  return self;
}

uint64_t method lookup function for LocalParticipantViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LocalParticipantViewConstraintManager);
}

uint64_t dispatch thunk of LocalParticipantViewConstraintManager.__allocating_init(containingGuide:rosterCellLayoutGuide:containingView:localPIPView:controlsView:effectsControlsView:localState:bannerState:controlsState:gridView:aspectRatio:deviceOrientation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 304))(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t getEnumTagSinglePayload for LocalParticipantViewConstraintManager.LocalParticipantLayoutType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7D && *(unsigned char *)(a1 + 41))
    {
      unsigned int v2 = *(_DWORD *)a1 + 124;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 40) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0x1F))) ^ 0x7F;
      if (v2 >= 0x7C) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for LocalParticipantViewConstraintManager.LocalParticipantLayoutType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 40) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for LocalParticipantViewConstraintManager.LocalParticipantLayoutType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 6;
}

uint64_t destructiveProjectEnumData for LocalParticipantViewConstraintManager.LocalParticipantLayoutType(uint64_t result)
{
  *(unsigned char *)(result + 40) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for LocalParticipantViewConstraintManager.LocalParticipantLayoutType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = *(unsigned char *)(result + 40) & 1 | (a2 << 6);
  return result;
}

void *type metadata accessor for LocalParticipantViewConstraintManager.LocalParticipantLayoutType()
{
  return &unk_1F1E99538;
}

uint64_t key path getter for SharedContentViewController.delegate : SharedContentViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for SharedContentViewController.delegate : SharedContentViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB8);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t SharedContentViewController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_delegate;
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v1);
}

uint64_t SharedContentViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_delegate;
  OUTLINED_FUNCTION_9_26();
  *(void *)(v4 + 8) = a2;
  OUTLINED_FUNCTION_41_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*SharedContentViewController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_41_0();
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t SharedContentViewController.isPipped.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPipped);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t SharedContentViewController.isPipped.setter(char a1)
{
  return SharedContentViewController.isPipped.setter(a1, &OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPipped, (uint64_t (*)(uint64_t))SharedContentViewController.isPipped.didset);
}

uint64_t key path getter for SharedContentViewController.isPipped : SharedContentViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for SharedContentViewController.isPipped : SharedContentViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

void SharedContentViewController.isPipped.didset(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPipped);
  swift_beginAccess();
  if (*v3 != v2)
  {
    SharedContentViewController.updateScrollViewAttributes()();
    SharedContentViewController.updateCornerRadius()();
    SharedContentViewController.resetZoomScale()();
  }
}

void (*SharedContentViewController.isPipped.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_16_2((uint64_t)v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_32_2();
  return SharedContentViewController.isPipped.modify;
}

void SharedContentViewController.isPipped.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t key path getter for SharedContentViewController.isPaused : SharedContentViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for SharedContentViewController.isPaused : SharedContentViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(*a1);
}

void SharedContentViewController.isPaused.didset(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPaused);
  swift_beginAccess();
  int v5 = *v4;
  if (v5 != v3)
  {
    uint64_t v6 = (unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView)
                 + OBJC_IVAR____TtC15ConversationKit17SharedContentView_isPaused);
    swift_beginAccess();
    *uint64_t v6 = v5;
    SharedContentView.isPaused.didset();
    SharedContentViewController.resetZoomScale()();
  }
}

uint64_t SharedContentViewController.isPaused.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPaused);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t SharedContentViewController.isPaused.setter(char a1)
{
  return SharedContentViewController.isPipped.setter(a1, &OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPaused, (uint64_t (*)(uint64_t))SharedContentViewController.isPaused.didset);
}

void (*SharedContentViewController.isPaused.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_16_2((uint64_t)v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_32_2();
  return SharedContentViewController.isPaused.modify;
}

void SharedContentViewController.isPaused.modify(uint64_t a1, uint64_t a2)
{
}

void SharedContentViewController.isPipped.modify(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  int v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 32));
  free(v3);
}

uint64_t key path getter for SharedContentViewController.isZoomEnabled : SharedContentViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for SharedContentViewController.isZoomEnabled : SharedContentViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100))(*a1);
}

uint64_t SharedContentViewController.isZoomEnabled.didset(char a1)
{
  int v2 = a1 & 1;
  int v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isZoomEnabled);
  uint64_t result = swift_beginAccess();
  int v5 = *v3;
  if (v5 != v2)
  {
    uint64_t v6 = 1;
    if ((v5 & 1) == 0)
    {
      SharedContentViewController.resetZoomScale()();
      uint64_t v6 = *v3;
    }
    uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView);
    objc_msgSend(v7, sel_setScrollEnabled_, v6);
    objc_msgSend(v7, sel_setZoomEnabled_, *v3);
    return (*(uint64_t (**)(BOOL))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1
                                                                                 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_screenSharingInteraction))
                                           + 0xD8))((*v3 & 1) == 0);
  }
  return result;
}

uint64_t SharedContentViewController.isZoomEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isZoomEnabled);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t SharedContentViewController.isZoomEnabled.setter(char a1)
{
  return SharedContentViewController.isPipped.setter(a1, &OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isZoomEnabled, (uint64_t (*)(uint64_t))SharedContentViewController.isZoomEnabled.didset);
}

void (*SharedContentViewController.isZoomEnabled.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_16_2((uint64_t)v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_32_2();
  return SharedContentViewController.isZoomEnabled.modify;
}

void SharedContentViewController.isZoomEnabled.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t key path getter for SharedContentViewController.isContentTransformEnabled : SharedContentViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for SharedContentViewController.isContentTransformEnabled : SharedContentViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118))(*a1);
}

void SharedContentViewController.isContentTransformEnabled.didset(char a1)
{
  int v2 = a1 & 1;
  int v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isContentTransformEnabled);
  swift_beginAccess();
  if (*v3 != v2) {
    SharedContentViewController.updateScreenProvider()();
  }
}

uint64_t SharedContentViewController.isContentTransformEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isContentTransformEnabled);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t SharedContentViewController.isContentTransformEnabled.setter(char a1)
{
  return SharedContentViewController.isPipped.setter(a1, &OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isContentTransformEnabled, (uint64_t (*)(uint64_t))SharedContentViewController.isContentTransformEnabled.didset);
}

uint64_t SharedContentViewController.isPipped.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = (unsigned char *)(v3 + *a2);
  swift_beginAccess();
  uint64_t v7 = *v6;
  *uint64_t v6 = a1;
  return a3(v7);
}

void (*SharedContentViewController.isContentTransformEnabled.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_16_2((uint64_t)v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_32_2();
  return SharedContentViewController.isContentTransformEnabled.modify;
}

void SharedContentViewController.isContentTransformEnabled.modify(uint64_t a1, uint64_t a2)
{
}

id SharedContentViewController.scrollView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView);
}

void SharedContentViewController.previousScreenSnapshot.setter(uint64_t a1)
{
  int v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot) = a1;
}

uint64_t closure #1 in variable initialization expression of SharedContentViewController.avatarImageQueue()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v0 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v0 - 8);
  static DispatchQoS.userInteractive.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v1);
  v6[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB0A8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id SharedContentViewController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id SharedContentViewController.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPaused] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isZoomEnabled] = 1;
  v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isContentTransformEnabled] = 1;
  uint64_t v1 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant];
  uint64_t v2 = type metadata accessor for Participant(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView;
  id v4 = objc_allocWithZone(MEMORY[0x1E4FB1BE0]);
  int v5 = v0;
  *(void *)&v0[v3] = objc_msgSend(v4, sel_init);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView;
  type metadata accessor for SharedContentView();
  *(void *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_screenSharingInteraction;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v8 = static ScreenSharingInteractionController.shared;
  id v9 = objc_allocWithZone((Class)type metadata accessor for ScreenSharingInteraction());
  *(void *)&v5[v7] = ScreenSharingInteraction.init(interactionController:)(v8);
  uint64_t v10 = type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_13_18(v10);
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot] = 0;
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_avatarImageQueue;
  *(void *)&v5[v11] = closure #1 in variable initialization expression of SharedContentViewController.avatarImageQueue();
  v5[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPipped] = 0;

  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for SharedContentViewController();
  id v12 = objc_msgSendSuper2(&v14, sel_initWithNibName_bundle_, 0, 0);
  SharedContentViewController.commonInit()();

  return v12;
}

void SharedContentViewController.commonInit()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView];
  objc_msgSend(v1, sel_addInteraction_, *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_screenSharingInteraction]);
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView];
  objc_msgSend(v2, sel_setDelegate_, v0);
  objc_msgSend(v2, sel_setShowsVerticalScrollIndicator_, 0);
  objc_msgSend(v2, sel_setShowsHorizontalScrollIndicator_, 0);
  objc_msgSend(v2, sel_addSubview_, v1);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  id v4 = v3;
  OUTLINED_FUNCTION_2();
  objc_msgSend(v4, sel__setTouchInsets_, *(double *)&static Layout.ParticipantViews.screenSharingInteractionTouchInsets, unk_1EA355680, *(double *)&qword_1EA355688, unk_1EA355690);

  objc_msgSend(v2, sel__setTouchInsets_, *(double *)&static Layout.ParticipantViews.screenSharingInteractionTouchInsets, unk_1EA355680, *(double *)&qword_1EA355688, unk_1EA355690);
  SharedContentViewController.updateCornerRadius()();
  SharedContentViewController.updateSystemRootLayerTransform()();
  SharedContentViewController.updateTouchInsets()();
  id v5 = objc_msgSend(v0, sel_view);
  if (!v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  objc_msgSend(v5, sel_addSubview_, v2);

  uint64_t v7 = (UIView *)objc_msgSend(v0, sel_view);
  if (v7)
  {
    double v8 = v7;
    UIView.addConstraintsToFill(_:insets:)(v7, *MEMORY[0x1E4FB12A8]);

    return;
  }
LABEL_7:
  __break(1u);
}

id SharedContentViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SharedContentViewController.init(coder:)()
{
  uint64_t v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isPaused] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isZoomEnabled] = 1;
  v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_isContentTransformEnabled] = 1;
  uint64_t v2 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_13_18(v2);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView;
  *(void *)&v1[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1BE0]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView;
  type metadata accessor for SharedContentView();
  *(void *)&v1[v4] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_screenSharingInteraction;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static ScreenSharingInteractionController.shared;
  id v7 = objc_allocWithZone((Class)type metadata accessor for ScreenSharingInteraction());
  *(void *)&v1[v5] = ScreenSharingInteraction.init(interactionController:)(v6);
  uint64_t v8 = type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_13_18(v8);
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot] = 0;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_avatarImageQueue;
  *(void *)&v1[v9] = closure #1 in variable initialization expression of SharedContentViewController.avatarImageQueue();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall SharedContentViewController.viewDidLoad()()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SharedContentViewController();
  objc_msgSendSuper2(&v4, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(self, sel_blackColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v3);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall SharedContentViewController.viewDidLayoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for SharedContentViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLayoutSubviews);
  SharedContentViewController.updateScrollViewAttributes()();
  SharedContentViewController.resetZoomScale()();
  SharedContentViewController.centerSharedContentView(in:)(*(void **)&v0[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView]);
}

id SharedContentViewController.centerSharedContentView(in:)(void *a1)
{
  id v3 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView];
  objc_msgSend(v3, sel_frame);
  double v5 = v4;
  double v7 = v6;
  objc_msgSend(a1, sel_frame);
  double Width = CGRectGetWidth(v38);
  objc_msgSend(v3, sel_frame);
  double v9 = (Width - CGRectGetWidth(v39)) * 0.5;
  if (v9 < 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  objc_msgSend(a1, sel_frame);
  double Height = CGRectGetHeight(v40);
  objc_msgSend(v3, sel_frame);
  double v12 = (Height - CGRectGetHeight(v41)) * 0.5;
  if (v12 < 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = v12;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationKit);
  double v15 = v1;
  id v16 = a1;
  BOOL v17 = v15;
  id v18 = v16;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v37 = v32;
    *(_DWORD *)uint64_t v21 = 136315650;
    type metadata accessor for CGRect(0);
    uint64_t v22 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    objc_msgSend(v3, sel_frame);
    uint64_t v24 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    objc_msgSend(v18, sel_frame);
    uint64_t v34 = v26;
    uint64_t v35 = v27;
    uint64_t v36 = v28;
    uint64_t v29 = String.init<A>(reflecting:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v19, v20, "Centering sharedContentView newFrame:%s oldFrame:%s scrollView.frame:%s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v32, -1, -1);
    MEMORY[0x1C87760E0](v21, -1, -1);
  }
  else
  {
  }
  return objc_msgSend(v3, sel_setFrame_, v10, v13, v5, v7, v32, v33, v34, v35, v36, v37);
}

void SharedContentViewController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for SharedContentViewController();
  objc_msgSendSuper2(&v10, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  SharedContentViewController.updateScrollViewAttributes()();
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9[4] = partial apply for closure #1 in SharedContentViewController.viewWillTransition(to:with:);
  v9[5] = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  void v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v9[3] = &block_descriptor_17;
  uint64_t v8 = _Block_copy(v9);
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v8, 0);
  _Block_release(v8);
}

void closure #1 in SharedContentViewController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    double v4 = (void *)v3;
    SharedContentViewController.resetZoomScale()();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1)
{
  objc_super v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void SharedContentViewController.updateScreenSharing(_:)()
{
  OUTLINED_FUNCTION_18_1();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedContentViewModel?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  uint64_t v143 = v7;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_36_7();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v130[-v10];
  v146 = (_DWORD *)type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_10_5();
  CGFloat v144 = v13;
  OUTLINED_FUNCTION_8_1();
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  BOOL v17 = &v130[-v16];
  MEMORY[0x1F4188790](v15);
  v148 = &v130[-v18];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v20 = OUTLINED_FUNCTION_8(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_21();
  uint64_t v147 = v22 - v21;
  uint64_t v23 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_10_5();
  uint64_t v145 = v25;
  OUTLINED_FUNCTION_8_1();
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = &v130[-v28];
  MEMORY[0x1F4188790](v27);
  id v31 = &v130[-v30];
  char v32 = Participant.screenState.getter();
  _s15ConversationKit11ParticipantVWOcTm_1(v4, (uint64_t)v31, (void (*)(void))type metadata accessor for Participant);
  if (v32 == 2)
  {
    uint64_t v33 = type metadata accessor for Participant;
    uint64_t v34 = (uint64_t)v31;
LABEL_3:
    outlined destroy of Participant(v34, (void (*)(void))v33);
    goto LABEL_9;
  }
  char v35 = Participant.isReceivingScreenFrames.getter();
  outlined destroy of Participant((uint64_t)v31, (void (*)(void))type metadata accessor for Participant);
  if (v35)
  {
    Participant.screenProvider.getter((uint64_t)v152);
    uint64_t v36 = v152[3];
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v152, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    if (v36)
    {
      uint64_t v37 = (uint64_t)v2 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
      OUTLINED_FUNCTION_2();
      uint64_t v141 = v23;
      v142 = v2;
      uint64_t v38 = v147;
      outlined init with copy of Participant?(v37, v147, &demangling cache variable for type metadata for Participant?);
      Participant.requiresScreenInfoUpdate(from:)();
      char v40 = v39;
      uint64_t v41 = v38;
      uint64_t v42 = v141;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v41, &demangling cache variable for type metadata for Participant?);
      if (v40)
      {
        uint64_t v43 = v42;
        uint64_t v44 = v147;
        _s15ConversationKit11ParticipantVWOcTm_1(v4, v147, (void (*)(void))type metadata accessor for Participant);
        OUTLINED_FUNCTION_31_13();
        __swift_storeEnumTagSinglePayload(v45, v46, v47, v43);
        swift_beginAccess();
        outlined assign with take of Participant?(v44, v37, &demangling cache variable for type metadata for Participant?);
        swift_endAccess();
        _s15ConversationKit11ParticipantVWOcTm_1(v4, (uint64_t)v29, (void (*)(void))type metadata accessor for Participant);
        SharedContentViewModel.init(participant:)((uint64_t)v29, (uint64_t)v148);
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        v138 = v130;
        uint64_t v49 = OUTLINED_FUNCTION_8(v48);
        double v51 = *(unsigned char **)(v50 + 64);
        MEMORY[0x1F4188790](v49);
        uint64_t v52 = (uint64_t)v142 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousViewModel;
        OUTLINED_FUNCTION_2();
        uint64_t v139 = v52;
        outlined init with copy of Participant?(v52, (uint64_t)v11, &demangling cache variable for type metadata for SharedContentViewModel?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)v146))
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for SharedContentViewModel?);
          *(double *)&uint64_t v53 = COERCE_DOUBLE(type metadata accessor for UUID());
          id v54 = &v130[-((unint64_t)(v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v55 = 1;
        }
        else
        {
          _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v11, (uint64_t)v17, (void (*)(void))type metadata accessor for SharedContentViewModel);
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for SharedContentViewModel?);
          SharedContentViewModel.participantIdentifier.getter();
          outlined destroy of Participant((uint64_t)v17, (void (*)(void))type metadata accessor for SharedContentViewModel);
          *(double *)&uint64_t v53 = COERCE_DOUBLE(type metadata accessor for UUID());
          id v54 = &v130[-((unint64_t)(v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v55 = 0;
        }
        CGFloat v140 = *(double *)&v53;
        uint64_t v56 = __swift_storeEnumTagSinglePayload((uint64_t)v54, v55, 1, v53);
        id v57 = &v130[-((unint64_t)(v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
        v137 = v130;
        MEMORY[0x1F4188790](v56);
        v134 = v51;
        unint64_t v135 = (unint64_t)(v51 + 15) & 0xFFFFFFFFFFFFFFF0;
        id v58 = &v130[-v135];
        SharedContentViewModel.participantIdentifier.getter();
        type metadata accessor for UUID();
        OUTLINED_FUNCTION_31_13();
        uint64_t v59 = *(void *)&v140;
        __swift_storeEnumTagSinglePayload(v60, v61, v62, *(uint64_t *)&v140);
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        v136 = v130;
        uint64_t v64 = OUTLINED_FUNCTION_8(v63);
        MEMORY[0x1F4188790](v64);
        OUTLINED_FUNCTION_62();
        uint64_t v66 = (uint64_t)&v11[*(int *)(v65 + 56)];
        outlined init with copy of Participant?((uint64_t)v57, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined init with copy of Participant?((uint64_t)v58, v66, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v59);
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          int v68 = __swift_getEnumTagSinglePayload(v66, 1, *(uint64_t *)&v140);
          uint64_t v69 = v142;
          if (v68 == 1)
          {
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_8_27();
            OUTLINED_FUNCTION_14_20(v70, v71, (void (*)(void))type metadata accessor for SharedContentViewModel);
            uint64_t v72 = (uint64_t)v146;
            goto LABEL_18;
          }
        }
        else
        {
          CGFloat v133 = *(double *)&v57;
          MEMORY[0x1F4188790](EnumTagSinglePayload);
          uint64_t v73 = &v130[-v135];
          outlined init with copy of Participant?((uint64_t)v11, (uint64_t)&v130[-v135], (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if (__swift_getEnumTagSinglePayload(v66, 1, *(uint64_t *)&v140) != 1)
          {
            uint64_t v132 = v130;
            v134 = v130;
            CGFloat v76 = v140;
            OUTLINED_FUNCTION_5_3();
            uint64_t v78 = v77;
            MEMORY[0x1F4188790](v79);
            OUTLINED_FUNCTION_21();
            unint64_t v135 = (unint64_t)v73;
            uint64_t v82 = v81 - v80;
            (*(void (**)(uint64_t, uint64_t, CGFloat))(v78 + 32))(v81 - v80, v66, COERCE_CGFLOAT(*(void *)&v76));
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC08]);
            int v131 = dispatch thunk of static Equatable.== infix(_:_:)();
            BOOL v83 = *(void (**)(uint64_t, void))(v78 + 8);
            uint64_t v59 = v78 + 8;
            v83(v82, *(void *)&v76);
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(*(uint64_t *)&v133, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            v83(v135, *(void *)&v76);
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_8_27();
            OUTLINED_FUNCTION_14_20(v84, v85, (void (*)(void))type metadata accessor for SharedContentViewModel);
            uint64_t v69 = v142;
            uint64_t v72 = (uint64_t)v146;
            if (v131)
            {
LABEL_18:
              outlined init with copy of Participant?(v139, v1, &demangling cache variable for type metadata for SharedContentViewModel?);
              if (OUTLINED_FUNCTION_17_21(v1))
              {
                outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for SharedContentViewModel?);
                _sSo13CATransform3DVSgWOi0_((uint64_t)v152);
              }
              else
              {
                _s15ConversationKit11ParticipantVWOcTm_1(v1, (uint64_t)v17, (void (*)(void))type metadata accessor for SharedContentViewModel);
                outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for SharedContentViewModel?);
                SharedContentViewModel.screenTransform.getter(v155);
                outlined destroy of Participant((uint64_t)v17, (void (*)(void))type metadata accessor for SharedContentViewModel);
                memcpy(v152, v155, 0x80uLL);
                _sSo13CATransform3DVSgWOi_((uint64_t)v152);
              }
              outlined init with take of CATransform3D?((uint64_t)v152, (uint64_t)v156, &demangling cache variable for type metadata for CATransform3D?);
              SharedContentViewModel.screenTransform.getter(&v157);
              CGFloat v120 = v157;
              CGFloat v121 = v158;
              CGFloat v122 = v159;
              CGFloat v123 = v160;
              CGFloat v124 = v161;
              CGFloat v125 = v162;
              CGFloat v126 = v163;
              CGFloat v127 = v164;
              *(double *)v154 = v157;
              *(double *)&v154[1] = v158;
              *(double *)&v154[2] = v159;
              *(double *)&v154[3] = v160;
              *(double *)&v154[4] = v161;
              *(double *)&v154[5] = v162;
              *(double *)&v154[6] = v163;
              *(double *)&v154[7] = v164;
              CGFloat v144 = v165;
              *(double *)&v154[8] = v165;
              CGFloat v140 = v166;
              *(CGFloat *)&v154[9] = v166;
              v137 = v168;
              v138 = v167;
              v154[10] = v167;
              v154[11] = v168;
              unint64_t v135 = v170;
              v136 = v169;
              v154[12] = v169;
              v154[13] = v170;
              CGFloat v133 = v172;
              v134 = v171;
              v154[14] = v171;
              *(CGFloat *)&v154[15] = v172;
              _sSo13CATransform3DVSgWOi_((uint64_t)v154);
              outlined init with take of CATransform3D?((uint64_t)v156, (uint64_t)v152, &demangling cache variable for type metadata for CATransform3D?);
              outlined init with take of CATransform3D?((uint64_t)v154, (uint64_t)v153, &demangling cache variable for type metadata for CATransform3D?);
              outlined init with take of CATransform3D?((uint64_t)v156, (uint64_t)v155, &demangling cache variable for type metadata for CATransform3D?);
              int v128 = _sSo13CATransform3DVSgWOg((uint64_t)v155);
              uint64_t v86 = v145;
              if (v128 == 1)
              {
                outlined destroy of Participant(v59, (void (*)(void))type metadata accessor for SharedContentViewModel);
                outlined init with take of CATransform3D?((uint64_t)v153, (uint64_t)&v150, &demangling cache variable for type metadata for CATransform3D?);
                uint64_t v72 = (uint64_t)v146;
                outlined init with take of CATransform3D?((uint64_t)&v150, (uint64_t)&v151, &demangling cache variable for type metadata for CATransform3D?);
                if (_sSo13CATransform3DVSgWOg((uint64_t)&v151) == 1) {
                  goto LABEL_22;
                }
              }
              else
              {
                outlined init with take of CATransform3D?((uint64_t)v156, (uint64_t)&v151, &demangling cache variable for type metadata for CATransform3D?);
                CATransform3D v150 = v151;
                v149.m11 = v120;
                v149.m12 = v121;
                v149.m13 = v122;
                v149.m14 = v123;
                v149.m21 = v124;
                v149.m22 = v125;
                v149.m23 = v126;
                v149.m24 = v127;
                v149.m31 = v144;
                v149.m32 = v140;
                *(void *)&v149.m33 = v138;
                *(void *)&v149.m34 = v137;
                *(void *)&v149.m41 = v136;
                *(void *)&v149.m42 = v135;
                *(void *)&v149.m43 = v134;
                v149.m44 = v133;
                BOOL v129 = CATransform3DEqualToTransform(&v150, &v149);
                outlined destroy of Participant(v59, (void (*)(void))type metadata accessor for SharedContentViewModel);
                if (v129) {
                  goto LABEL_22;
                }
              }
LABEL_21:
              _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v58, v143, (void (*)(void))type metadata accessor for SharedContentViewModel);
              OUTLINED_FUNCTION_31_13();
              __swift_storeEnumTagSinglePayload(v87, v88, v89, v72);
              swift_beginAccess();
              uint64_t v90 = OUTLINED_FUNCTION_41_0();
              outlined assign with take of Participant?(v90, v91, v92);
              swift_endAccess();
              SharedContentViewController.animateOutPreviousScreenContent()();
LABEL_22:
              v93 = *(void **)((char *)v69
                             + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView);
              SharedContentView.configure(with:)((uint64_t)v58);
              SharedContentViewController.preferredScreenSharingFrame(scale:)();
              double v95 = v94;
              double v97 = v96;
              uint64_t v98 = *(void **)((char *)v69 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView);
              double v99 = 1.0;
              objc_msgSend(v98, sel_setZoomScale_, 1.0);
              objc_msgSend(v93, sel_setFrame_, 0.0, 0.0, v95, v97);
              objc_msgSend(v98, sel_setContentSize_, v95, v97);
              objc_msgSend(v69, sel_setPreferredContentSize_, v95, v97);
              uint64_t v100 = *(void **)((char *)v69
                                + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_screenSharingInteraction);
              Participant.screenInfo.getter(v152);
              if (v152[3] == 1)
              {
                uint64_t v101 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v152, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
              }
              else
              {
                if ((v153[72] & 1) == 0) {
                  double v99 = *(double *)&v152[14];
                }
                uint64_t v101 = outlined destroy of Participant.ScreenInfo((uint64_t)v152);
              }
              v102 = (void *)MEMORY[0x1E4FBC8C8];
              (*(void (**)(uint64_t, double))((*MEMORY[0x1E4FBC8C8] & *v100) + 0xF0))(v101, v99);
              SharedContentViewController.resetZoomScale()();
              SharedContentViewController.updateScreenProvider()();
              SharedContentViewController.updateScreenSharingInteraction()();
              SharedContentViewController.updateSystemRootLayerTransform()();
              SharedContentViewController.updateTouchInsets()();
              SharedContentViewController.centerSharedContentView(in:)(v98);
              if (one-time initialization token for conversationKit != -1) {
                swift_once();
              }
              uint64_t v103 = type metadata accessor for Logger();
              __swift_project_value_buffer(v103, (uint64_t)static Logger.conversationKit);
              _s15ConversationKit11ParticipantVWOcTm_1(v4, v86, (void (*)(void))type metadata accessor for Participant);
              v104 = Logger.logObject.getter();
              os_log_type_t v105 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v104, v105))
              {
                unint64_t v106 = (_DWORD *)swift_slowAlloc();
                v152[0] = swift_slowAlloc();
                *unint64_t v106 = 136315138;
                v146 = v106 + 1;
                uint64_t v107 = v147;
                _s15ConversationKit11ParticipantVWOcTm_1(v86, v147, (void (*)(void))type metadata accessor for Participant);
                OUTLINED_FUNCTION_31_13();
                __swift_storeEnumTagSinglePayload(v108, v109, v110, v141);
                uint64_t v111 = v86;
                uint64_t v112 = specialized >> prefix<A>(_:)();
                unint64_t v114 = v113;
                outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v107, &demangling cache variable for type metadata for Participant?);
                v156[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v114, v152);
                uint64_t v69 = v142;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                id v58 = v148;
                swift_bridgeObjectRelease();
                outlined destroy of Participant(v111, (void (*)(void))type metadata accessor for Participant);
                OUTLINED_FUNCTION_34_6(&dword_1C2F90000, v115, v116, "Shared content view controller updated for participant %s");
                swift_arrayDestroy();
                v102 = (void *)MEMORY[0x1E4FBC8C8];
                OUTLINED_FUNCTION_3();
                OUTLINED_FUNCTION_3();
              }
              else
              {
                outlined destroy of Participant(v86, (void (*)(void))type metadata accessor for Participant);
              }

              if ((*(uint64_t (**)(void))((*v102 & *v69) + 0xB0))())
              {
                uint64_t v118 = v117;
                uint64_t ObjectType = swift_getObjectType();
                (*(void (**)(void *, uint64_t, uint64_t))(v118 + 8))(v69, ObjectType, v118);
                swift_unknownObjectRelease();
              }
              uint64_t v33 = type metadata accessor for SharedContentViewModel;
              uint64_t v34 = (uint64_t)v58;
              goto LABEL_3;
            }
LABEL_20:
            outlined destroy of Participant(v59, (void (*)(void))type metadata accessor for SharedContentViewModel);
            uint64_t v86 = v145;
            goto LABEL_21;
          }
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(*(uint64_t *)&v133, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          (*(void (**)(unsigned char *))(*(void *)(*(void *)&v140 - 8) + 8))(v73);
          uint64_t v69 = v142;
        }
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        OUTLINED_FUNCTION_8_27();
        OUTLINED_FUNCTION_14_20(v74, v75, (void (*)(void))type metadata accessor for SharedContentViewModel);
        uint64_t v72 = (uint64_t)v146;
        goto LABEL_20;
      }
    }
  }
LABEL_9:
  OUTLINED_FUNCTION_28_1();
}

void SharedContentViewController.resetZoomScale()()
{
  OUTLINED_FUNCTION_18_1();
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_60();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_62();
  id v6 = OUTLINED_FUNCTION_39_0();
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = v6;
  objc_msgSend(v6, sel_frame);
  OUTLINED_FUNCTION_38();

  v26.origin.x = OUTLINED_FUNCTION_41();
  if (CGRectIsEmpty(v26))
  {
LABEL_24:
    OUTLINED_FUNCTION_28_1();
    return;
  }
  id v8 = OUTLINED_FUNCTION_39_0();
  if (!v8) {
    goto LABEL_26;
  }
  uint64_t v9 = v8;
  id v10 = objc_msgSend(v8, sel_window);

  if (v10)
  {
    id v11 = objc_msgSend(v10, sel_screen);
  }
  else
  {
    id v11 = objc_msgSend(self, sel_mainScreen);
  }
  objc_msgSend(v11, sel_scale);

  uint64_t v12 = v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v12, v1, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_17_21(v1))
  {
    double v13 = &demangling cache variable for type metadata for Participant?;
    uint64_t v14 = (void *)v1;
  }
  else
  {
    _s15ConversationKit11ParticipantVWOcTm_1(v1, v0, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
    Participant.screenInfo.getter(v25);
    outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
    OUTLINED_FUNCTION_18_22();
    if (!v15)
    {
      outlined destroy of Participant.ScreenInfo((uint64_t)v25);
      goto LABEL_13;
    }
    double v13 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    uint64_t v14 = v25;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, v13);
LABEL_13:
  SharedContentViewController.preferredScreenSharingFrame(scale:)();
  id v16 = OUTLINED_FUNCTION_39_0();
  if (!v16)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v16, sel_frame);
  OUTLINED_FUNCTION_35_6();
  v27.origin.x = OUTLINED_FUNCTION_33_13();
  CGRectGetHeight(v27);
  v28.origin.x = OUTLINED_FUNCTION_23_14();
  double Height = CGRectGetHeight(v28);
  id v18 = OUTLINED_FUNCTION_39_0();
  if (v18)
  {
    objc_msgSend(v18, sel_frame);
    OUTLINED_FUNCTION_35_6();
    v29.origin.x = OUTLINED_FUNCTION_33_13();
    CGRectGetWidth(v29);
    v30.origin.x = OUTLINED_FUNCTION_23_14();
    double v19 = v2 / CGRectGetWidth(v30);
    if (v19 >= v2 / Height) {
      double v20 = v2 / Height;
    }
    else {
      double v20 = v19;
    }
    if (v2 / Height > v19) {
      double v19 = v2 / Height;
    }
    if (v19 > 1.0) {
      double v21 = v19;
    }
    else {
      double v21 = 1.0;
    }
    uint64_t v22 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView);
    objc_msgSend(v22, sel_setMinimumZoomScale_, v20);
    objc_msgSend(v22, sel_setMaximumZoomScale_, v21);
    objc_msgSend(v22, sel_setZoomScale_, v20);
    objc_msgSend(v22, sel_bounds);
    objc_msgSend(v22, sel_setContentOffset_);
    objc_msgSend(v22, sel_bounds);
    objc_msgSend(v22, sel_setContentSize_, v23, v24);
    goto LABEL_24;
  }
LABEL_28:
  __break(1u);
}

id SharedContentViewController.updateCornerRadius()()
{
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))())
  {
    objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView), sel__setContinuousCornerRadius_, 0.0);
    uint64_t v1 = (void *)(*(void *)((char *)v0
                              + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView)
                  + OBJC_IVAR____TtC15ConversationKit17SharedContentView_customCornerRadius);
    OUTLINED_FUNCTION_9_26();
    *uint64_t v1 = 0;
  }
  else
  {
    uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView);
    double v3 = SharedContentViewController.cornerRadius.getter();
    uint64_t v4 = (double *)(v2 + OBJC_IVAR____TtC15ConversationKit17SharedContentView_customCornerRadius);
    OUTLINED_FUNCTION_9_26();
    *uint64_t v4 = v3;
  }
  return SharedContentView.customCornerRadius.didset();
}

id SharedContentViewController.updateScrollViewAttributes()()
{
  uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_scrollView);
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8);
  id v3 = objc_msgSend(v1, sel_setScrollEnabled_, (v2() & 1) == 0);
  BOOL v4 = (((uint64_t (*)(id))v2)(v3) & 1) == 0;
  return objc_msgSend(v1, sel_setUserInteractionEnabled_, v4);
}

void SharedContentViewController.updateSystemRootLayerTransform()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView);
  SharedContentViewController.systemRootLayerTransform.getter((double *)v4);
  uint64_t v2 = (_OWORD *)(v1 + OBJC_IVAR____TtC15ConversationKit17SharedContentView_systemRootLayerTransform);
  OUTLINED_FUNCTION_9_26();
  long long v3 = v4[1];
  *uint64_t v2 = v4[0];
  v2[1] = v3;
  v2[2] = v4[2];
  SharedContentView.updateVideoViewTransform()();
}

id SharedContentViewController.updateTouchInsets()()
{
  uint64_t v2 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_60();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v6, v1, &demangling cache variable for type metadata for Participant?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2))
  {
    uint64_t v7 = &demangling cache variable for type metadata for Participant?;
    id v8 = (void *)v1;
LABEL_6:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, v7);
    goto LABEL_7;
  }
  _s15ConversationKit11ParticipantVWOcTm_1(v1, v0, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
  Participant.screenInfo.getter(v12);
  outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
  OUTLINED_FUNCTION_18_22();
  if (v9)
  {
    uint64_t v7 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    id v8 = v12;
    goto LABEL_6;
  }
  if ((v13 & 1) == 0)
  {
    double v10 = *(double *)&v12[14];
    outlined destroy of Participant.ScreenInfo((uint64_t)v12);
    goto LABEL_8;
  }
  outlined destroy of Participant.ScreenInfo((uint64_t)v12);
LABEL_7:
  double v10 = 1.0;
LABEL_8:
  OUTLINED_FUNCTION_2();
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView), sel__setTouchInsets_, v10 * *(double *)&static Layout.ParticipantViews.screenSharingInteractionTouchInsets, v10 * unk_1EA355680, v10 * *(double *)&qword_1EA355688, v10 * unk_1EA355690);
}

uint64_t SharedContentViewController.contentOrientation.getter()
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_17_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_0_3();
  if (((*(uint64_t (**)(void))(v6 + 272))() & 1) == 0) {
    return 1;
  }
  uint64_t v7 = v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v7, v2, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_17_21(v2))
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
    return 0;
  }
  else
  {
    _s15ConversationKit11ParticipantVWOcTm_1(v2, v0, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
    uint64_t v8 = Participant.deviceOrientation.getter();
    outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
  }
  return v8;
}

void SharedContentViewController.updateScreenProvider()()
{
  uint64_t v2 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_60();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v6, v1, &demangling cache variable for type metadata for Participant?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2))
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v16 = 0;
LABEL_3:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    goto LABEL_4;
  }
  _s15ConversationKit11ParticipantVWOcTm_1(v1, (uint64_t)v0, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
  Participant.screenProvider.getter((uint64_t)&v14);
  outlined destroy of Participant((uint64_t)v0, (void (*)(void))type metadata accessor for Participant);
  if (!*((void *)&v15 + 1)) {
    goto LABEL_3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
  type metadata accessor for RemoteParticipantVideoProvider();
  if (swift_dynamicCast())
  {
    uint64_t v8 = v13;
    id v11 = (void *)MEMORY[0x1E4FBC8C8];
    char v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
    (*(void (**)(void))((*v11 & (uint64_t)v13->isa) + 0x1A8))(v12 & 1);
    goto LABEL_11;
  }
LABEL_4:
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationKit);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    double v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v10 = 0;
    _os_log_impl(&dword_1C2F90000, v8, v9, "remoteScreenProvider not found", v10, 2u);
    OUTLINED_FUNCTION_3();
  }
LABEL_11:
}

unint64_t SharedContentViewController.updateScreenSharingInteraction()()
{
  unint64_t result = SharedContentViewController.contentOrientation.getter();
  if ((v1 & 1) == 0)
  {
    CNKDeviceOrientation.uiDeviceOrientation.getter(result);
    OUTLINED_FUNCTION_0_3();
    return (*(uint64_t (**)(void))(v2 + 264))();
  }
  return result;
}

double SharedContentViewController.preferredScreenSharingFrame(scale:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_17_0();
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v6, v2, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_21_16(v2) != 1)
  {
    outlined init with take of Participant(v2, v0);
    uint64_t v7 = SharedContentViewController.contentOrientation.getter();
    if (v8)
    {
      outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
      return 0.0;
    }
    if ((v7 | 2) == 3)
    {
      Participant.aspectRatio.getter();
      outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
      outlined init with take of CATransform3D?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for AspectRatio?);
      if (v12) {
        return 0.0;
      }
    }
    else
    {
      Participant.aspectRatio.getter();
      outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
      outlined init with take of CATransform3D?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for AspectRatio?);
      if (v12) {
        return 0.0;
      }
    }
    outlined init with take of AspectRatio((uint64_t)v11, (uint64_t)v13);
    outlined init with take of AspectRatio((uint64_t)v13, (uint64_t)&v14);
    return 0.0;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
  return 0.0;
}

double SharedContentViewController.cornerRadius.getter()
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_11_8();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v32 - v6 + 16;
  MEMORY[0x1F4188790](v5);
  os_log_type_t v9 = (char *)v32 - v8 + 16;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_1_15();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  long long v15 = (char *)v32 - v14 + 16;
  MEMORY[0x1F4188790](v13);
  BOOL v17 = (char *)v32 - v16 + 16;
  uint64_t v18 = v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v18, (uint64_t)v17, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_17_21((uint64_t)v17))
  {
    double v19 = &demangling cache variable for type metadata for Participant?;
    double v20 = v17;
LABEL_6:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, v19);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    double v22 = (*(double (**)(void))(*(void *)static Defaults.shared + 392))();
    goto LABEL_9;
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v17, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v17, &demangling cache variable for type metadata for Participant?);
  Participant.screenInfo.getter(v32);
  outlined destroy of Participant((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
  OUTLINED_FUNCTION_18_22();
  if (v21)
  {
    double v19 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    double v20 = v32;
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_30:
    uint64_t v29 = 0x4024000000000000;
  }
  else
  {
    if (v33)
    {
      uint64_t v29 = 0x4034000000000000;
      switch(v34)
      {
        case 0:
        case 1:
        case 4:
          goto LABEL_30;
        case 2:
          if (Participant.ScreenInfo.isMaybeTouchIDDevice()()) {
            uint64_t v29 = 0x4024000000000000;
          }
          else {
            uint64_t v29 = 0x4049000000000000;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_31;
        default:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUScreenShareDeviceFamily?);
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x1C30A2F18);
      }
    }
    uint64_t v29 = v32[15];
  }
LABEL_31:
  outlined destroy of Participant.ScreenInfo((uint64_t)v32);
  double v22 = *(double *)&v29;
LABEL_9:
  outlined init with copy of Participant?(v18, (uint64_t)v15, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_17_21((uint64_t)v15))
  {
    double v23 = &demangling cache variable for type metadata for Participant?;
    double v24 = v15;
LABEL_14:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v24, v23);
LABEL_15:
    double v25 = 1.0;
    goto LABEL_16;
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v15, (uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for Participant?);
  Participant.screenInfo.getter(v32);
  outlined destroy of Participant((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
  OUTLINED_FUNCTION_18_22();
  if (v21)
  {
    double v23 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    double v24 = v32;
    goto LABEL_14;
  }
  if (v35)
  {
    outlined destroy of Participant.ScreenInfo((uint64_t)v32);
    goto LABEL_15;
  }
  double v25 = *(double *)&v32[14];
  outlined destroy of Participant.ScreenInfo((uint64_t)v32);
LABEL_16:
  outlined init with copy of Participant?(v18, v2, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_17_21(v2))
  {
    CGRect v26 = &demangling cache variable for type metadata for Participant?;
    CGRect v27 = (void *)v2;
LABEL_21:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v27, v26);
    return v22;
  }
  _s15ConversationKit11ParticipantVWOcTm_1(v2, v0, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
  Participant.screenInfo.getter(v32);
  outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for Participant);
  OUTLINED_FUNCTION_18_22();
  if (v21)
  {
    CGRect v26 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    CGRect v27 = v32;
    goto LABEL_21;
  }
  double v30 = *(double *)&v32[13];
  outlined destroy of Participant.ScreenInfo((uint64_t)v32);
  return v22 * v25 * v30;
}

uint64_t SharedContentViewController.systemRootLayerTransform.getter@<X0>(double *a1@<X8>)
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_2();
  uint64_t v7 = OUTLINED_FUNCTION_41_0();
  outlined init with copy of Participant?(v7, v8, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_21_16(v1))
  {
    os_log_type_t v9 = &demangling cache variable for type metadata for Participant?;
    uint64_t v10 = (void *)v1;
LABEL_6:
    uint64_t result = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, v9);
    goto LABEL_7;
  }
  _s15ConversationKit11ParticipantVWOcTm_1(v1, v2, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
  Participant.screenInfo.getter(v19);
  outlined destroy of Participant(v2, (void (*)(void))type metadata accessor for Participant);
  OUTLINED_FUNCTION_18_22();
  if (v11)
  {
    os_log_type_t v9 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    uint64_t v10 = v19;
    goto LABEL_6;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v15 = v19[21];
    uint64_t v14 = v19[22];
    uint64_t v16 = v19[19];
    double v13 = *(double *)&v19[20];
    double v18 = *(double *)&v19[17];
    uint64_t v17 = v19[18];
    uint64_t result = outlined destroy of Participant.ScreenInfo((uint64_t)v19);
    goto LABEL_8;
  }
  uint64_t result = outlined destroy of Participant.ScreenInfo((uint64_t)v19);
LABEL_7:
  double v13 = 1.0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  double v18 = 1.0;
LABEL_8:
  *a1 = v18;
  *((void *)a1 + 1) = v17;
  *((void *)a1 + 2) = v16;
  a1[3] = v13;
  *((void *)a1 + 4) = v15;
  *((void *)a1 + 5) = v14;
  return result;
}

void SharedContentViewController.animateOutPreviousScreenContent()()
{
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))() & 1) == 0)
  {
    uint64_t v1 = OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot;
    objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot), sel_removeFromSuperview);
    id v2 = objc_msgSend(v0, sel_view);
    if (v2)
    {
      uint64_t v3 = v2;
      id v4 = objc_msgSend(v2, sel_snapshotViewAfterScreenUpdates_, 0);

      SharedContentViewController.previousScreenSnapshot.setter((uint64_t)v4);
      uint64_t v5 = *(void **)((char *)v0 + v1);
      if (!v5)
      {
LABEL_6:
        objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView), sel_setAlpha_, 0.0);
        os_log_type_t v9 = self;
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = v0;
        char v20 = partial apply for closure #1 in SharedContentViewController.animateOutPreviousScreenContent();
        uint64_t v21 = v10;
        uint64_t v16 = MEMORY[0x1E4F143A8];
        uint64_t v17 = 1107296256;
        double v18 = thunk for @escaping @callee_guaranteed () -> ();
        double v19 = &block_descriptor_43;
        char v11 = _Block_copy(&v16);
        uint64_t v12 = v0;
        swift_release();
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v12;
        char v20 = partial apply for closure #2 in SharedContentViewController.animateOutPreviousScreenContent();
        uint64_t v21 = v13;
        uint64_t v16 = MEMORY[0x1E4F143A8];
        uint64_t v17 = 1107296256;
        double v18 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        double v19 = &block_descriptor_49_0;
        uint64_t v14 = _Block_copy(&v16);
        uint64_t v15 = v12;
        swift_release();
        objc_msgSend(v9, sel_animateWithDuration_animations_completion_, v11, v14, 0.3);
        _Block_release(v14);
        _Block_release(v11);
        return;
      }
      id v6 = v5;
      id v7 = objc_msgSend(v0, sel_view);
      if (v7)
      {
        uint64_t v8 = v7;
        objc_msgSend(v7, sel_addSubview_, v6);

        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

id closure #1 in SharedContentViewController.animateOutPreviousScreenContent()(uint64_t a1)
{
  id v2 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_previousScreenSnapshot);
  if (v2) {
    objc_msgSend(v2, sel_setAlpha_, 0.0);
  }
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView);
  return objc_msgSend(v3, sel_setAlpha_, 1.0);
}

void closure #2 in SharedContentViewController.animateOutPreviousScreenContent()(uint64_t a1, uint64_t a2)
{
}

id SharedContentViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void SharedContentViewController.init(nibName:bundle:)()
{
}

id SharedContentViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedContentViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __swiftcall SharedContentViewController.viewForZooming(in:)(UIView_optional *__return_ptr retstr, UIScrollView *in)
{
  id v3 = *(id *)(v2 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_sharedContentView);
}

Swift::Void __swiftcall SharedContentViewController.scrollViewDidZoom(_:)(UIScrollView *a1)
{
  SharedContentViewController.centerSharedContentView(in:)(a1);
  SharedContentViewController.updateCornerRadius()();
}

id SharedContentViewController.scrollViewDidEndZooming(_:with:atScale:)(void *a1)
{
  SharedContentViewController.centerSharedContentView(in:)(a1);
  return SharedContentViewController.updateCornerRadius()();
}

CGSize __swiftcall SharedContentViewController.preferredPiPContentAspectRatio()()
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_36();
  uint64_t v6 = v4 - v5;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v34 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_10_5();
  uint64_t v35 = v15;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_11_8();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_36_7();
  MEMORY[0x1F4188790](v18);
  char v20 = (char *)&v34 - v19;
  uint64_t v21 = v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  uint64_t v22 = v21;
  outlined init with copy of Participant?(v21, (uint64_t)v20, &demangling cache variable for type metadata for Participant?);
  if (OUTLINED_FUNCTION_21_16((uint64_t)v20)) {
    goto LABEL_2;
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v20, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for Participant?);
  uint64_t v23 = Participant.deviceOrientation.getter();
  char v25 = v24;
  outlined destroy of Participant((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
  if (v25) {
    goto LABEL_13;
  }
  if ((v23 | 2) == 3)
  {
    outlined init with copy of Participant?(v22, v2, &demangling cache variable for type metadata for Participant?);
    if (OUTLINED_FUNCTION_21_16(v2))
    {
      char v20 = (char *)v2;
LABEL_2:
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for Participant?);
LABEL_13:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.info.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1C3769620;
      uint64_t v29 = v35;
      outlined init with copy of Participant?(v22, v35, &demangling cache variable for type metadata for Participant?);
      uint64_t v30 = specialized >> prefix<A>(_:)();
      uint64_t v32 = v31;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v29, &demangling cache variable for type metadata for Participant?);
      *(void *)(v28 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v28 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v28 + 32) = v30;
      *(void *)(v28 + 40) = v32;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      double v26 = 100.0;
      double v27 = 100.0;
      goto LABEL_19;
    }
    _s15ConversationKit11ParticipantVWOcTm_1(v2, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
    Participant.aspectRatio.getter();
    outlined destroy of Participant((uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
    outlined init with take of CATransform3D?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for AspectRatio?);
    if (v38) {
      goto LABEL_13;
    }
    outlined init with take of AspectRatio((uint64_t)v37, (uint64_t)v39);
    outlined init with take of AspectRatio((uint64_t)v39, (uint64_t)v40);
    double v26 = 1.0;
    double v27 = 1.0;
    if ((v41 & 1) == 0)
    {
      double v26 = *(double *)v40;
      double v27 = *(double *)&v40[1];
    }
  }
  else
  {
    outlined init with copy of Participant?(v22, v0, &demangling cache variable for type metadata for Participant?);
    if (OUTLINED_FUNCTION_21_16(v0))
    {
      char v20 = (char *)v0;
      goto LABEL_2;
    }
    _s15ConversationKit11ParticipantVWOcTm_1(v0, v6, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v0, &demangling cache variable for type metadata for Participant?);
    Participant.aspectRatio.getter();
    outlined destroy of Participant(v6, (void (*)(void))type metadata accessor for Participant);
    outlined init with take of CATransform3D?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for AspectRatio?);
    if (v38) {
      goto LABEL_13;
    }
    outlined init with take of AspectRatio((uint64_t)v37, (uint64_t)v39);
    outlined init with take of AspectRatio((uint64_t)v39, (uint64_t)v40);
    double v26 = 1.0;
    double v27 = 1.0;
    if ((v41 & 1) == 0)
    {
      double v26 = *(double *)&v40[2];
      double v27 = *(double *)&v40[3];
    }
  }
LABEL_19:
  result.height = v27;
  result.width = v26;
  return result;
}

__C::CGRect __swiftcall SharedContentViewController.frameForRestoreAnimation()()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel__referenceBounds);
  OUTLINED_FUNCTION_38();

  double v1 = OUTLINED_FUNCTION_41();
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

void __swiftcall SharedContentViewController.viewControllerForPiP()(UIViewController_optional *__return_ptr retstr)
{
  id v2 = v1;
}

Swift::Bool __swiftcall SharedContentViewController.restoreViewControllerHierarchyWhenExitingPiP()()
{
  return 1;
}

Swift::String_optional __swiftcall SharedContentViewController.sharedContentSourceName()()
{
  type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_17_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_62();
  uint64_t v6 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_36();
  uint64_t v10 = v8 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = v1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v14, v2, &demangling cache variable for type metadata for Participant?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v6) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
  }
  else
  {
    outlined init with take of Participant(v2, (uint64_t)v13);
    _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v13, v10, (void (*)(void))type metadata accessor for Participant);
    SharedContentViewModel.ParticipantDetails.init(participant:)(v10, v0);
    outlined destroy of Participant((uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
    swift_bridgeObjectRetain();
    outlined destroy of Participant(v0, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
  }
  uint64_t v15 = OUTLINED_FUNCTION_41_0();
  result.value._object = v16;
  result.value._countAndFlagsBits = v15;
  return result;
}

void specialized SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:)(uint64_t a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v73 = (uint64_t *)((char *)&v70 - v9);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v70 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v75 = (uint64_t *)((char *)&v70 - v17);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  char v20 = (char *)&v70 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v70 - v21;
  uint64_t v78 = swift_allocObject();
  *(void *)(v78 + 16) = a2;
  uint64_t v23 = a1 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  swift_beginAccess();
  outlined init with copy of Participant?(v23, (uint64_t)v22, &demangling cache variable for type metadata for Participant?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v4);
  CGFloat v76 = v15;
  uint64_t v77 = a2;
  uint64_t v74 = a1;
  if (EnumTagSinglePayload)
  {
    _Block_copy(a2);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, &demangling cache variable for type metadata for Participant?);
    goto LABEL_3;
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v22, (uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
  _Block_copy(a2);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, &demangling cache variable for type metadata for Participant?);
  char v41 = *(void **)&v11[*(int *)(v4 + 28)];
  if (v41)
  {
    id v42 = v41;
    outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v42);
    if (v43)
    {
      uint64_t v44 = v43;
      if (objc_msgSend(v42, sel_shouldHideContact))
      {
        id v72 = v42;
        uint64_t v45 = type metadata accessor for PersonNameComponents();
        uint64_t v71 = &v70;
        uint64_t v46 = *(void *)(v45 - 8);
        MEMORY[0x1F4188790](v45);
        uint64_t v48 = (char *)&v70 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        swift_bridgeObjectRetain();
        PersonNameComponents.init()();
        PersonNameComponents.givenName.setter();
        PersonNameComponents.familyName.setter();
        uint64_t v70 = v44;
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v49 = (id)static NSPersonNameComponentsFormatter.initials;
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v51 = objc_msgSend(v49, sel_stringFromPersonNameComponents_, isa, v70, v71);

        uint64_t v52 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v54 = v53;

        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
        id aBlock = v52;
        uint64_t v80 = v54;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        outlined destroy of Participant((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_3;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v11, (uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:)();
  id v59 = aBlock;
  id v72 = v85;
  id v58 = aBlock;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of Participant((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of Participant((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59) {
    goto LABEL_26;
  }
LABEL_3:
  outlined init with copy of Participant?(v23, (uint64_t)v20, &demangling cache variable for type metadata for Participant?);
  if (!__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v4))
  {
    uint64_t v55 = (uint64_t)v73;
    _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v20, (uint64_t)v73, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for Participant?);
    uint64_t v56 = *(void **)(v55 + *(int *)(v4 + 28));
    if (!v56)
    {
      outlined destroy of Participant(v55, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_5;
    }
    id v57 = v56;
    outlined destroy of Participant(v55, (void (*)(void))type metadata accessor for Participant);
    id v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v57);

LABEL_26:
    CGFloat v76 = *(char **)(v74 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_avatarImageQueue);
    uint64_t v60 = (void *)swift_allocObject();
    v60[2] = v58;
    v60[3] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> ();
    v60[4] = v78;
    BOOL v83 = closure #1 in SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:)partial apply;
    uint64_t v84 = v60;
    id aBlock = (id)MEMORY[0x1E4F143A8];
    uint64_t v80 = 1107296256;
    uint64_t v81 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v82 = &block_descriptor_37;
    uint64_t v61 = _Block_copy(&aBlock);
    uint64_t v74 = type metadata accessor for DispatchQoS();
    uint64_t v75 = &v70;
    uint64_t v62 = *(void *)(v74 - 8);
    MEMORY[0x1F4188790](v74);
    uint64_t v64 = (char *)&v70 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v65 = v58;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v66 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v73 = &v70;
    uint64_t v67 = *(void *)(v66 - 8);
    MEMORY[0x1F4188790](v66);
    uint64_t v69 = (char *)&v70 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v86 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAED8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C8773BA0](0, v64, v69, v61);
    _Block_release(v61);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v74);

    swift_release();
    swift_release();
    char v40 = v77;
    goto LABEL_27;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for Participant?);
LABEL_5:
  uint64_t v25 = (uint64_t)v75;
  outlined init with copy of Participant?(v23, (uint64_t)v75, &demangling cache variable for type metadata for Participant?);
  int v26 = __swift_getEnumTagSinglePayload(v25, 1, v4);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v25, &demangling cache variable for type metadata for Participant?);
  if (v26 == 1) {
    uint64_t v27 = 1819047278;
  }
  else {
    uint64_t v27 = 0x6C6C756E6E6F6ELL;
  }
  if (v26 == 1) {
    unint64_t v28 = 0xE400000000000000;
  }
  else {
    unint64_t v28 = 0xE700000000000000;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1C37696D0;
  id aBlock = (id)v27;
  uint64_t v80 = v28;
  uint64_t v30 = MEMORY[0x1E4FBB1A0];
  uint64_t v31 = String.init<A>(reflecting:)();
  uint64_t v33 = v32;
  *(void *)(v29 + 56) = v30;
  unint64_t v34 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v29 + 64) = v34;
  *(void *)(v29 + 32) = v31;
  *(void *)(v29 + 40) = v33;
  uint64_t v35 = (uint64_t)v76;
  outlined init with copy of Participant?(v23, (uint64_t)v76, &demangling cache variable for type metadata for Participant?);
  uint64_t v36 = specialized >> prefix<A>(_:)();
  uint64_t v38 = v37;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v35, &demangling cache variable for type metadata for Participant?);
  *(void *)(v29 + 96) = v30;
  *(void *)(v29 + 104) = v34;
  *(void *)(v29 + 72) = v36;
  *(void *)(v29 + 80) = v38;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  char v39 = v77;
  (*((void (**)(const void *, void))v77 + 2))(v77, 0);
  swift_release();
  char v40 = v39;
LABEL_27:
  _Block_release(v40);
}

uint64_t SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v85 = a2;
  uint64_t v5 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  uint64_t v80 = v7;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_11_8();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v78 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_36();
  uint64_t v16 = v14 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v82 = (void *)((char *)v78 - v18);
  OUTLINED_FUNCTION_8_1();
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v78 - v21;
  MEMORY[0x1F4188790](v20);
  char v24 = (char *)v78 - v23;
  uint64_t v81 = v3;
  uint64_t v25 = v3 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v25, (uint64_t)v24, &demangling cache variable for type metadata for Participant?);
  int v26 = OUTLINED_FUNCTION_30_11((uint64_t)v24);
  uint64_t v83 = v16;
  uint64_t v84 = a1;
  if (v26)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v24, &demangling cache variable for type metadata for Participant?);
    uint64_t v27 = v85;
    goto LABEL_3;
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v24, (uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v24, &demangling cache variable for type metadata for Participant?);
  uint64_t v43 = *(void **)&v11[*(int *)(v5 + 28)];
  if (v43)
  {
    id v44 = v43;
    outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v44);
    if (v45)
    {
      uint64_t v46 = v45;
      if (objc_msgSend(v44, sel_shouldHideContact))
      {
        id v79 = v44;
        uint64_t v47 = type metadata accessor for PersonNameComponents();
        v78[1] = v78;
        OUTLINED_FUNCTION_5_3();
        uint64_t v49 = v48;
        MEMORY[0x1F4188790](v50);
        OUTLINED_FUNCTION_60();
        swift_bridgeObjectRetain();
        PersonNameComponents.init()();
        PersonNameComponents.givenName.setter();
        PersonNameComponents.familyName.setter();
        v78[0] = v46;
        if (one-time initialization token for initials != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_2();
        id v51 = (id)static NSPersonNameComponentsFormatter.initials;
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v53 = objc_msgSend(v51, sel_stringFromPersonNameComponents_, isa, v78[0]);

        uint64_t v54 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;

        (*(void (**)(id, uint64_t))(v49 + 8))(v44, v47);
        id aBlock = v54;
        uint64_t v87 = v56;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.localizedUppercase.getter();

        swift_bridgeObjectRelease();
        outlined destroy of Participant((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        a1 = v84;
        uint64_t v27 = v85;
        goto LABEL_3;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v11, v2, (void (*)(void))type metadata accessor for Participant);
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:)();
  id v61 = aBlock;
  id v79 = v92;
  id v60 = aBlock;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of Participant(v2, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of Participant((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
  swift_bridgeObjectRelease();
  a1 = v84;
  swift_bridgeObjectRelease();
  uint64_t v27 = v85;
  swift_bridgeObjectRelease();
  if (v61) {
    goto LABEL_26;
  }
LABEL_3:
  outlined init with copy of Participant?(v25, (uint64_t)v22, &demangling cache variable for type metadata for Participant?);
  if (!OUTLINED_FUNCTION_30_11((uint64_t)v22))
  {
    uint64_t v57 = v80;
    _s15ConversationKit11ParticipantVWOcTm_1((uint64_t)v22, v80, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, &demangling cache variable for type metadata for Participant?);
    id v58 = *(void **)(v57 + *(int *)(v5 + 28));
    if (!v58)
    {
      outlined destroy of Participant(v57, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_5;
    }
    id v59 = v58;
    outlined destroy of Participant(v57, (void (*)(void))type metadata accessor for Participant);
    id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v59);

LABEL_26:
    uint64_t v85 = *(void *)(v81 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_avatarImageQueue);
    uint64_t v62 = (void *)swift_allocObject();
    v62[2] = v60;
    v62[3] = a1;
    v62[4] = v27;
    uint64_t v90 = partial apply for closure #1 in SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:);
    uint64_t v91 = v62;
    id aBlock = (id)MEMORY[0x1E4F143A8];
    uint64_t v87 = 1107296256;
    uint64_t v88 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v89 = &block_descriptor_9;
    uint64_t v63 = _Block_copy(&aBlock);
    uint64_t v83 = type metadata accessor for DispatchQoS();
    uint64_t v84 = (uint64_t (*)(void))v78;
    OUTLINED_FUNCTION_5_3();
    uint64_t v65 = v64;
    MEMORY[0x1F4188790](v66);
    OUTLINED_FUNCTION_21();
    uint64_t v69 = v68 - v67;
    id v70 = v60;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v71 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v82 = v78;
    OUTLINED_FUNCTION_5_3();
    uint64_t v73 = v72;
    MEMORY[0x1F4188790](v74);
    OUTLINED_FUNCTION_21();
    uint64_t v77 = v76 - v75;
    uint64_t v93 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAED8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C8773BA0](0, v69, v77, v63);
    _Block_release(v63);

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v71);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v69, v83);

    return swift_release();
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, &demangling cache variable for type metadata for Participant?);
LABEL_5:
  uint64_t v28 = (uint64_t)v82;
  outlined init with copy of Participant?(v25, (uint64_t)v82, &demangling cache variable for type metadata for Participant?);
  int v29 = OUTLINED_FUNCTION_30_11(v28);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v28, &demangling cache variable for type metadata for Participant?);
  if (v29 == 1) {
    uint64_t v30 = 1819047278;
  }
  else {
    uint64_t v30 = 0x6C6C756E6E6F6ELL;
  }
  if (v29 == 1) {
    unint64_t v31 = 0xE400000000000000;
  }
  else {
    unint64_t v31 = 0xE700000000000000;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1C37696D0;
  id aBlock = (id)v30;
  uint64_t v87 = v31;
  uint64_t v33 = MEMORY[0x1E4FBB1A0];
  uint64_t v34 = String.init<A>(reflecting:)();
  uint64_t v36 = v35;
  *(void *)(v32 + 56) = v33;
  unint64_t v37 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v32 + 64) = v37;
  *(void *)(v32 + 32) = v34;
  *(void *)(v32 + 40) = v36;
  uint64_t v38 = v83;
  outlined init with copy of Participant?(v25, v83, &demangling cache variable for type metadata for Participant?);
  uint64_t v39 = specialized >> prefix<A>(_:)();
  uint64_t v41 = v40;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for Participant?);
  *(void *)(v32 + 96) = v33;
  *(void *)(v32 + 104) = v37;
  *(void *)(v32 + 72) = v39;
  *(void *)(v32 + 80) = v41;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return v84(0);
}

void closure #1 in SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:)(void *a1, void (*a2)(id))
{
  id v4 = objc_msgSend(self, sel_currentTraitCollection);
  id v5 = objc_msgSend(v4, sel_layoutDirection);

  BOOL v6 = v5 == (id)1;
  uint64_t v7 = self;
  id v8 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v8, sel_scale);
  double v10 = v9;

  id v11 = objc_msgSend(v7, sel_scopeWithPointSize_scale_rightToLeft_style_, v6, 0, 28.0, 28.0, v10);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB20]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C3769830;
  *(void *)(v13 + 32) = a1;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  id v14 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v12, sel_avatarImageForContacts_scope_, isa, v11);

  id v17 = v16;
  a2(v16);
  swift_unknownObjectRelease();
}

void SharedContentViewController.screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_1_15();
  MEMORY[0x1F4188790](v4);
  BOOL v6 = (char *)v28 - v5;
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  type metadata accessor for ScreenSharingStateMonitor();
  id v11 = (void *)swift_dynamicCastClass();
  if (v11)
  {
    id v12 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v13 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x108);
    uint64_t v14 = swift_unknownObjectRetain();
    v13(v14);
    if (OUTLINED_FUNCTION_30_11((uint64_t)v6) == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
      static os_log_type_t.error.getter();
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1C3769620;
      uint64_t v16 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit27SharedContentViewController_participant;
      OUTLINED_FUNCTION_2();
      outlined init with copy of Participant?(v16, v1, &demangling cache variable for type metadata for Participant?);
      uint64_t v17 = specialized >> prefix<A>(_:)();
      uint64_t v19 = v18;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
      *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v15 + 32) = v17;
      *(void *)(v15 + 40) = v19;
      os_log(_:dso:log:_:_:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of Participant((uint64_t)v6, v10);
      (*(void (**)(uint64_t))((*v12 & *v0) + 0x178))(v10);
      swift_unknownObjectRelease();
      outlined destroy of Participant(v10, (void (*)(void))type metadata accessor for Participant);
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationKit);
    swift_unknownObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (_DWORD *)swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      _DWORD *v23 = 136315138;
      swift_getObjectType();
      uint64_t v24 = _typeName(_:qualified:)();
      v28[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_34_6(&dword_1C2F90000, v26, v27, "screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:) was unexpectedly passed a %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t type metadata accessor for SharedContentViewController()
{
  uint64_t result = type metadata singleton initialization cache for SharedContentViewController;
  if (!type metadata singleton initialization cache for SharedContentViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C30A5AAC()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in SharedContentViewController.viewWillTransition(to:with:)(uint64_t a1)
{
  closure #1 in SharedContentViewController.viewWillTransition(to:with:)(a1, v1);
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

double _sSo13CATransform3DVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t _sSo13CATransform3DVSgWOi_(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t _sSo13CATransform3DVSgWOg(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t outlined init with take of CATransform3D?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_26_0(a1, a2, a3);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v3, v4);
  return v3;
}

uint64_t outlined destroy of Participant(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void partial apply for closure #1 in SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:)()
{
  closure #1 in SharedContentViewController.getSharedContentSourceAvatarWithImageHandler(_:)(*(void **)(v0 + 16), *(void (**)(id))(v0 + 24));
}

uint64_t outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_siriDisplayName);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t dispatch thunk of SharedContentViewControllerDelegate.sharedContentViewControllerDidUpdateScreenInfo(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ObjC metadata update function for SharedContentViewController()
{
  return type metadata accessor for SharedContentViewController();
}

void type metadata completion function for SharedContentViewController()
{
  type metadata accessor for Participant?(319, (unint64_t *)&lazy cache variable for type metadata for Participant?, (void (*)(uint64_t))type metadata accessor for Participant);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Participant?(319, &lazy cache variable for type metadata for SharedContentViewModel?, (void (*)(uint64_t))type metadata accessor for SharedContentViewModel);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SharedContentViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedContentViewController);
}

uint64_t dispatch thunk of SharedContentViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SharedContentViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SharedContentViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SharedContentViewController.isPipped.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SharedContentViewController.isPipped.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SharedContentViewController.isPipped.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SharedContentViewController.isPaused.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SharedContentViewController.isPaused.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SharedContentViewController.isPaused.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SharedContentViewController.isZoomEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SharedContentViewController.isZoomEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SharedContentViewController.isZoomEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SharedContentViewController.isContentTransformEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SharedContentViewController.isContentTransformEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SharedContentViewController.isContentTransformEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SharedContentViewController.updateScreenSharing(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

void type metadata accessor for Participant?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C30A61F0()
{
  _Block_release(*(const void **)(v0 + 16));
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1C30A6238()
{
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

id partial apply for closure #1 in SharedContentViewController.animateOutPreviousScreenContent()()
{
  return closure #1 in SharedContentViewController.animateOutPreviousScreenContent()(*(void *)(v0 + 16));
}

void partial apply for closure #2 in SharedContentViewController.animateOutPreviousScreenContent()(uint64_t a1)
{
  closure #2 in SharedContentViewController.animateOutPreviousScreenContent()(a1, *(void *)(v1 + 16));
}

uint64_t AsyncCancellableTimer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  return v0;
}

uint64_t AsyncCancellableTimer.init()()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  return v0;
}

uint64_t AsyncCancellableTimer.wait(with:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](AsyncCancellableTimer.wait(with:), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  AsyncCancellableTimer.cancel()();
  static Duration.zero.getter();
  if ((static Duration.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v1 = v0[4];
    uint64_t v2 = v0[5];
    unint64_t v4 = v0[2];
    uint64_t v3 = v0[3];
    static TaskPriority.userInitiated.getter();
    uint64_t v5 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v5);
    BOOL v6 = (void *)swift_allocObject();
    void v6[2] = 0;
    v6[3] = 0;
    v6[4] = v4;
    v6[5] = v3;
    *(void *)(v1 + 112) = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in AsyncCancellableTimer.wait(with:), (uint64_t)v6);
    swift_release();
    uint64_t v7 = *(void *)(v1 + 112);
    v0[6] = v7;
    if (v7)
    {
      swift_retain();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[7] = v8;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *uint64_t v8 = v0;
      v8[1] = AsyncCancellableTimer.wait(with:);
      uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
      id v11 = MEMORY[0x1E4FBC0F0];
      return MEMORY[0x1F4187D90](v9, v7, v10, v9, v11);
    }
    *(void *)(v0[4] + 112) = 0;
  }
  swift_task_dealloc();
  id v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  unint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    BOOL v6 = *(void *)(v3 + 32);
    swift_release();
    uint64_t v7 = AsyncCancellableTimer.wait(with:);
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 32);
    uint64_t v7 = AsyncCancellableTimer.wait(with:);
  }
  return MEMORY[0x1F4188298](v7, v8, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  *(void *)(*(void *)(v0 + 32) + 112) = 0;
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall AsyncCancellableTimer.cancel()()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1C8773690](v1, MEMORY[0x1E4FBC848] + 8, v2, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
}

uint64_t closure #1 in AsyncCancellableTimer.wait(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v5[7] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v5[8] = v7;
  v5[9] = *(void *)(v7 - 8);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AsyncCancellableTimer.wait(with:), 0, 0);
}

uint64_t closure #1 in AsyncCancellableTimer.wait(with:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  ContinuousClock.init()();
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x1C8774620](v5, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[11] = v6;
  v0[12] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in AsyncCancellableTimer.wait(with:);
  uint64_t v8 = v0[7];
  return MEMORY[0x1F4187F40](v8, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v4[11];
  uint64_t v14 = v4[10];
  uint64_t v6 = v4[9];
  uint64_t v7 = v4[8];
  uint64_t v8 = v4[7];
  uint64_t v9 = v4[4];
  uint64_t v10 = *v1;
  OUTLINED_FUNCTION_2_2();
  *id v11 = v10;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  v5(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v7);
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in AsyncCancellableTimer.wait(with:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v12 = *(uint64_t (**)(void))(v10 + 8);
    return v12();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1C30A6CAC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AsyncCancellableTimer.wait(with:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AsyncCancellableTimer.wait(with:);
  return closure #1 in AsyncCancellableTimer.wait(with:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in AsyncCancellableTimer.wait(with:)()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t AsyncCancellableTimer.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AsyncCancellableTimer.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t AsyncCancellableTimer.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance AsyncCancellableTimer()
{
  return AsyncCancellableTimer.unownedExecutor.getter();
}

uint64_t type metadata accessor for AsyncCancellableTimer()
{
  return self;
}

uint64_t method lookup function for AsyncCancellableTimer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AsyncCancellableTimer);
}

uint64_t dispatch thunk of AsyncCancellableTimer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void *Strings.Entitlements.gameCenterEntitlement.unsafeMutableAddressor()
{
  return &static Strings.Entitlements.gameCenterEntitlement;
}

const char *Strings.AccessibilityIdentifiers.cancelButton.unsafeMutableAddressor()
{
  return "cancelButton";
}

void *Strings.Automation.enableEffects.unsafeMutableAddressor()
{
  return &static Strings.Automation.enableEffects;
}

unint64_t static Strings.Automation.enableEffects.getter()
{
  return OUTLINED_FUNCTION_0_33(39);
}

void *Strings.Automation.disableEffects.unsafeMutableAddressor()
{
  return &static Strings.Automation.disableEffects;
}

unint64_t static Strings.Automation.disableEffects.getter()
{
  return OUTLINED_FUNCTION_0_33(40);
}

void *Strings.Automation.showDefaultHUD.unsafeMutableAddressor()
{
  return &static Strings.Automation.showDefaultHUD;
}

unint64_t static Strings.Automation.showDefaultHUD.getter()
{
  return OUTLINED_FUNCTION_0_33(39);
}

const char *Strings.AccessibilityIdentifiers.joinButton.unsafeMutableAddressor()
{
  return "joinButton";
}

uint64_t static Strings.AccessibilityIdentifiers.joinButton.getter()
{
  return 0x747475426E696F6ALL;
}

const char *Strings.AccessibilityIdentifiers.leaveButton.unsafeMutableAddressor()
{
  return "leaveButton";
}

uint64_t static Strings.AccessibilityIdentifiers.leaveButton.getter()
{
  return 0x747542657661656CLL;
}

uint64_t static Strings.AccessibilityIdentifiers.cancelButton.getter()
{
  return OUTLINED_FUNCTION_1_52(0x6C65636E6163);
}

void *Strings.AccessibilityIdentifiers.openMessagesButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.openMessagesButton;
}

unint64_t static Strings.AccessibilityIdentifiers.openMessagesButton.getter()
{
  return OUTLINED_FUNCTION_0_33(18);
}

void *Strings.AccessibilityIdentifiers.toggleAudioRouteMenuButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.toggleAudioRouteMenuButton;
}

unint64_t static Strings.AccessibilityIdentifiers.toggleAudioRouteMenuButton.getter()
{
  return OUTLINED_FUNCTION_0_33(26);
}

void *Strings.AccessibilityIdentifiers.toggleMicMenuButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.toggleMicMenuButton;
}

unint64_t static Strings.AccessibilityIdentifiers.toggleMicMenuButton.getter()
{
  return OUTLINED_FUNCTION_0_33(19);
}

void *Strings.AccessibilityIdentifiers.toggleVideoButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.toggleVideoButton;
}

unint64_t static Strings.AccessibilityIdentifiers.toggleVideoButton.getter()
{
  return OUTLINED_FUNCTION_0_33(17);
}

void *Strings.AccessibilityIdentifiers.shareContentMenuButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.shareContentMenuButton;
}

unint64_t static Strings.AccessibilityIdentifiers.shareContentMenuButton.getter()
{
  return OUTLINED_FUNCTION_0_33(22);
}

const char *Strings.AccessibilityIdentifiers.openAppButton.unsafeMutableAddressor()
{
  return "openAppButton";
}

void static Strings.AccessibilityIdentifiers.openAppButton.getter()
{
}

const char *Strings.AccessibilityIdentifiers.reviewButton.unsafeMutableAddressor()
{
  return "reviewButton";
}

uint64_t static Strings.AccessibilityIdentifiers.reviewButton.getter()
{
  return OUTLINED_FUNCTION_1_52(0x776569766572);
}

void *Strings.AccessibilityIdentifiers.approveRequestButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.approveRequestButton;
}

unint64_t static Strings.AccessibilityIdentifiers.approveRequestButton.getter()
{
  return OUTLINED_FUNCTION_0_33(20);
}

void *Strings.AccessibilityIdentifiers.dismissRequestButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.dismissRequestButton;
}

unint64_t static Strings.AccessibilityIdentifiers.dismissRequestButton.getter()
{
  return OUTLINED_FUNCTION_0_33(20);
}

void *Strings.AccessibilityIdentifiers.recordLocalVideoButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.recordLocalVideoButton;
}

unint64_t static Strings.AccessibilityIdentifiers.recordLocalVideoButton.getter()
{
  return OUTLINED_FUNCTION_0_33(22);
}

void *Strings.AccessibilityIdentifiers.cameraBlurButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.cameraBlurButton;
}

unint64_t static Strings.AccessibilityIdentifiers.cameraBlurButton.getter()
{
  return OUTLINED_FUNCTION_0_33(16);
}

const char *Strings.AccessibilityIdentifiers.collapseButton.unsafeMutableAddressor()
{
  return "collapseButton";
}

uint64_t static Strings.AccessibilityIdentifiers.collapseButton.getter()
{
  return 0x657370616C6C6F63;
}

const char *Strings.AccessibilityIdentifiers.effectsButton.unsafeMutableAddressor()
{
  return "effectsButton";
}

void static Strings.AccessibilityIdentifiers.effectsButton.getter()
{
}

void *Strings.AccessibilityIdentifiers.centerStageButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.centerStageButton;
}

unint64_t static Strings.AccessibilityIdentifiers.centerStageButton.getter()
{
  return OUTLINED_FUNCTION_0_33(17);
}

void *Strings.AccessibilityIdentifiers.cameraFlipButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.cameraFlipButton;
}

unint64_t static Strings.AccessibilityIdentifiers.cameraFlipButton.getter()
{
  return OUTLINED_FUNCTION_0_33(16);
}

void *Strings.AccessibilityIdentifiers.reactionEffectGestureButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.reactionEffectGestureButton;
}

unint64_t static Strings.AccessibilityIdentifiers.reactionEffectGestureButton.getter()
{
  return OUTLINED_FUNCTION_0_33(27);
}

void *Strings.AccessibilityIdentifiers.studioLightButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.studioLightButton;
}

unint64_t static Strings.AccessibilityIdentifiers.studioLightButton.getter()
{
  return OUTLINED_FUNCTION_0_33(17);
}

void *Strings.AccessibilityIdentifiers.sharePlayButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.sharePlayButton;
}

uint64_t static Strings.AccessibilityIdentifiers.sharePlayButton.getter()
{
  return 0x616C506572616873;
}

const char *Strings.AccessibilityIdentifiers.peopleButton.unsafeMutableAddressor()
{
  return "peopleButton";
}

uint64_t static Strings.AccessibilityIdentifiers.peopleButton.getter()
{
  return OUTLINED_FUNCTION_1_52(0x656C706F6570);
}

void *Strings.AccessibilityIdentifiers.toggleSidebarButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.toggleSidebarButton;
}

unint64_t static Strings.AccessibilityIdentifiers.toggleSidebarButton.getter()
{
  return OUTLINED_FUNCTION_0_33(19);
}

void *Strings.AccessibilityIdentifiers.fullScreenButton.unsafeMutableAddressor()
{
  return &static Strings.AccessibilityIdentifiers.fullScreenButton;
}

unint64_t static Strings.AccessibilityIdentifiers.fullScreenButton.getter()
{
  return OUTLINED_FUNCTION_0_33(16);
}

void *Strings.Entitlements.publicSharePlayEntitlement.unsafeMutableAddressor()
{
  return &static Strings.Entitlements.publicSharePlayEntitlement;
}

unint64_t static Strings.Entitlements.publicSharePlayEntitlement.getter()
{
  return OUTLINED_FUNCTION_0_33(33);
}

unint64_t static Strings.Entitlements.gameCenterEntitlement.getter()
{
  return OUTLINED_FUNCTION_0_33(31);
}

uint64_t one-time initialization function for appLaunchTriggeredPreferringHUDDismissal()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD000000000000028, 0x80000001C3797560);
  static Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal = result;
  return result;
}

uint64_t *Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal.unsafeMutableAddressor()
{
  if (one-time initialization token for appLaunchTriggeredPreferringHUDDismissal != -1) {
    swift_once();
  }
  return &static Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal;
}

id static Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for appLaunchTriggeredPreferringHUDDismissal, (void **)&static Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal);
}

uint64_t one-time initialization function for localPreviewDidFinishRotationAnimation()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD000000000000026, 0x80000001C3797530);
  static Strings.Notifications.localPreviewDidFinishRotationAnimation = result;
  return result;
}

uint64_t *Strings.Notifications.localPreviewDidFinishRotationAnimation.unsafeMutableAddressor()
{
  if (one-time initialization token for localPreviewDidFinishRotationAnimation != -1) {
    swift_once();
  }
  return &static Strings.Notifications.localPreviewDidFinishRotationAnimation;
}

id static Strings.Notifications.localPreviewDidFinishRotationAnimation.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for localPreviewDidFinishRotationAnimation, (void **)&static Strings.Notifications.localPreviewDidFinishRotationAnimation);
}

uint64_t one-time initialization function for enhancedEmergencyRequestWannaDismissNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD00000000000003DLL, 0x80000001C37974F0);
  static Strings.Notifications.enhancedEmergencyRequestWannaDismissNotification = result;
  return result;
}

uint64_t *Strings.Notifications.enhancedEmergencyRequestWannaDismissNotification.unsafeMutableAddressor()
{
  if (one-time initialization token for enhancedEmergencyRequestWannaDismissNotification != -1) {
    swift_once();
  }
  return &static Strings.Notifications.enhancedEmergencyRequestWannaDismissNotification;
}

id static Strings.Notifications.enhancedEmergencyRequestWannaDismissNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for enhancedEmergencyRequestWannaDismissNotification, (void **)&static Strings.Notifications.enhancedEmergencyRequestWannaDismissNotification);
}

uint64_t one-time initialization function for enhancedEmergencyRequestToChoosePhotoNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD00000000000003ELL, 0x80000001C37974B0);
  static Strings.Notifications.enhancedEmergencyRequestToChoosePhotoNotification = result;
  return result;
}

uint64_t *Strings.Notifications.enhancedEmergencyRequestToChoosePhotoNotification.unsafeMutableAddressor()
{
  if (one-time initialization token for enhancedEmergencyRequestToChoosePhotoNotification != -1) {
    swift_once();
  }
  return &static Strings.Notifications.enhancedEmergencyRequestToChoosePhotoNotification;
}

id static Strings.Notifications.enhancedEmergencyRequestToChoosePhotoNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for enhancedEmergencyRequestToChoosePhotoNotification, (void **)&static Strings.Notifications.enhancedEmergencyRequestToChoosePhotoNotification);
}

uint64_t one-time initialization function for enhancedEmergencyPreviewRequestNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD000000000000038, 0x80000001C3797470);
  static Strings.Notifications.enhancedEmergencyPreviewRequestNotification = result;
  return result;
}

uint64_t *Strings.Notifications.enhancedEmergencyPreviewRequestNotification.unsafeMutableAddressor()
{
  if (one-time initialization token for enhancedEmergencyPreviewRequestNotification != -1) {
    swift_once();
  }
  return &static Strings.Notifications.enhancedEmergencyPreviewRequestNotification;
}

id static Strings.Notifications.enhancedEmergencyPreviewRequestNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for enhancedEmergencyPreviewRequestNotification, (void **)&static Strings.Notifications.enhancedEmergencyPreviewRequestNotification);
}

uint64_t one-time initialization function for enhancedEmergencyUploadDismissDuringStreamingNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD000000000000046, 0x80000001C3797420);
  static Strings.Notifications.enhancedEmergencyUploadDismissDuringStreamingNotification = result;
  return result;
}

uint64_t *Strings.Notifications.enhancedEmergencyUploadDismissDuringStreamingNotification.unsafeMutableAddressor()
{
  if (one-time initialization token for enhancedEmergencyUploadDismissDuringStreamingNotification != -1) {
    swift_once();
  }
  return &static Strings.Notifications.enhancedEmergencyUploadDismissDuringStreamingNotification;
}

id static Strings.Notifications.enhancedEmergencyUploadDismissDuringStreamingNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for enhancedEmergencyUploadDismissDuringStreamingNotification, (void **)&static Strings.Notifications.enhancedEmergencyUploadDismissDuringStreamingNotification);
}

uint64_t one-time initialization function for enhancedEmergencyUploadPickerDuringStreamingNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD000000000000045, 0x80000001C37973D0);
  static Strings.Notifications.enhancedEmergencyUploadPickerDuringStreamingNotification = result;
  return result;
}

uint64_t *Strings.Notifications.enhancedEmergencyUploadPickerDuringStreamingNotification.unsafeMutableAddressor()
{
  if (one-time initialization token for enhancedEmergencyUploadPickerDuringStreamingNotification != -1) {
    swift_once();
  }
  return &static Strings.Notifications.enhancedEmergencyUploadPickerDuringStreamingNotification;
}

id static Strings.Notifications.enhancedEmergencyUploadPickerDuringStreamingNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for enhancedEmergencyUploadPickerDuringStreamingNotification, (void **)&static Strings.Notifications.enhancedEmergencyUploadPickerDuringStreamingNotification);
}

uint64_t one-time initialization function for didEndWindowLiveResizeNotification()
{
  uint64_t result = MEMORY[0x1C87730B0](0xD000000000000024, 0x80000001C37973A0);
  static Strings.Notifications.didEndWindowLiveResizeNotification = result;
  return result;
}

uint64_t *Strings.Notifications.didEndWindowLiveResizeNotification.unsafeMutableAddressor()
{
  if (one-time initialization token for didEndWindowLiveResizeNotification != -1) {
    swift_once();
  }
  return &static Strings.Notifications.didEndWindowLiveResizeNotification;
}

id static Strings.Notifications.didEndWindowLiveResizeNotification.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for didEndWindowLiveResizeNotification, (void **)&static Strings.Notifications.didEndWindowLiveResizeNotification);
}

void type metadata accessor for Strings()
{
}

void type metadata accessor for Strings.Automation()
{
}

void type metadata accessor for Strings.AccessibilityIdentifiers()
{
}

void type metadata accessor for Strings.Entitlements()
{
}

void type metadata accessor for Strings.Notifications()
{
}

void *makeConversationHUDDetailsNavigationController(for:delegate:shouldSetControlsManagerInCallDetailsDelegate:)(void *a1, uint64_t a2, char a3)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDDetailsNavigationController());
  uint64_t v6 = a1;
  uint64_t v7 = ConversationHUDDetailsNavigationController.init(controlsManager:shouldHaveBackgroundMaterial:)((uint64_t)v6, 0);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x78);
  uint64_t v10 = swift_unknownObjectRetain();
  v9(v10);
  if (a3)
  {
    id v11 = *(void (**)(void *, char **))((*v8 & *v6) + 0x450);
    id v12 = v7;
    v11(v7, &protocol witness table for ConversationHUDDetailsNavigationController);
  }
  return v7;
}

id ConversationHUDDetailsNavigationController.__allocating_init(controlsManager:shouldHaveBackgroundMaterial:)(uint64_t a1, char a2)
{
  id v5 = objc_allocWithZone(v2);
  return ConversationHUDDetailsNavigationController.init(controlsManager:shouldHaveBackgroundMaterial:)(a1, a2);
}

uint64_t type metadata accessor for ConversationHUDDetailsNavigationController()
{
  return self;
}

id makeConversationDetailsController(for:delegate:)(void *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDDetailsViewController());
  uint64_t v3 = a1;
  id v4 = ConversationHUDDetailsViewController.init(controlsManager:)(v3);
  id v5 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_5_13();
  uint64_t v7 = *(void (**)(uint64_t))(v6 + 152);
  uint64_t v8 = swift_unknownObjectRetain();
  v7(v8);
  uint64_t v9 = *(void (**)(id, _UNKNOWN **))((*v5 & *v3) + 0x450);
  id v10 = v4;
  v9(v4, &protocol witness table for ConversationHUDDetailsViewController);
  return v10;
}

uint64_t key path getter for ConversationHUDDetailsNavigationController.detailsDelegate : ConversationHUDDetailsNavigationController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDDetailsNavigationController.detailsDelegate : ConversationHUDDetailsNavigationController(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

void ConversationHUDDetailsNavigationController.detailsDelegate.willset()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  id v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
  if (v2)
  {
    uint64_t v3 = *(void (**)(uint64_t))((*v1 & *v2) + 0x98);
    id v5 = v2;
    uint64_t v4 = swift_unknownObjectRetain();
    v3(v4);
  }
}

uint64_t ConversationHUDDetailsNavigationController.detailsDelegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t ConversationHUDDetailsNavigationController.detailsDelegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*ConversationHUDDetailsNavigationController.detailsDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_detailsDelegate;
  swift_beginAccess();
  v3[3] = MEMORY[0x1C8776240](v4);
  return ConversationHUDDetailsNavigationController.detailsDelegate.modify;
}

void ConversationHUDDetailsNavigationController.detailsDelegate.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    ConversationHUDDetailsNavigationController.detailsDelegate.setter();
    swift_unknownObjectRelease();
  }
  else
  {
    ConversationHUDDetailsNavigationController.detailsDelegate.setter();
  }
  free(v2);
}

void *ConversationHUDDetailsNavigationController.isOnScreen.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t result = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
  if (result)
  {
    uint64_t v3 = result;
    char v4 = (*(uint64_t (**)(void))((*v1 & *result) + 0xA8))();

    return (void *)(v4 & 1);
  }
  return result;
}

void ConversationHUDDetailsNavigationController.isOnScreen.setter(char a1)
{
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_5_13();
  char v4 = (void *)(*(uint64_t (**)(void))(v3 + 160))();
  if (v4)
  {
    id v5 = v4;
    (*(void (**)(void))((*v2 & *v4) + 0xB0))(a1 & 1);
  }
}

uint64_t key path getter for ConversationHUDDetailsNavigationController.isOnScreen : ConversationHUDDetailsNavigationController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ConversationHUDDetailsNavigationController.isOnScreen : ConversationHUDDetailsNavigationController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90))(*a1);
}

void (*ConversationHUDDetailsNavigationController.isOnScreen.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = ConversationHUDDetailsNavigationController.isOnScreen.getter() & 1;
  return ConversationHUDDetailsNavigationController.isOnScreen.modify;
}

void ConversationHUDDetailsNavigationController.isOnScreen.modify(uint64_t a1)
{
}

id ConversationHUDDetailsNavigationController.controlsManager.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_controlsManager));
}

uint64_t ConversationHUDDetailsNavigationController.shouldHaveBackgroundMaterial.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_shouldHaveBackgroundMaterial);
}

uint64_t key path getter for ConversationHUDDetailsNavigationController.detailsViewController : ConversationHUDDetailsNavigationController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDDetailsNavigationController.detailsViewController : ConversationHUDDetailsNavigationController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8);
  id v4 = *a1;
  return v3(v2);
}

void *ConversationHUDDetailsNavigationController.detailsViewController.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationHUDDetailsNavigationController.detailsViewController.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v1;
  *uint64_t v1 = a1;
}

uint64_t (*ConversationHUDDetailsNavigationController.detailsViewController.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id ConversationHUDDetailsNavigationController.init(controlsManager:shouldHaveBackgroundMaterial:)(uint64_t a1, char a2)
{
  swift_unknownObjectWeakInit();
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_detailsViewController] = 0;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_controlsManager] = a1;
  v2[OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_shouldHaveBackgroundMaterial] = a2;
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for ConversationHUDDetailsNavigationController();
  return objc_msgSendSuper2(&v6, sel_initWithNibName_bundle_, 0, 0);
}

id ConversationHUDDetailsNavigationController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationHUDDetailsNavigationController.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_detailsViewController] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.viewDidLoad()()
{
  uint64_t v1 = (objc_class *)type metadata accessor for ConversationHUDDetailsNavigationController();
  v23.receiver = v0;
  v23.super_class = v1;
  objc_msgSendSuper2(&v23, sel_viewDidLoad);
  id v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_controlsManager];
  id v3 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDDetailsViewController());
  id v4 = ConversationHUDDetailsViewController.init(controlsManager:)(v2);
  id v5 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_3_53();
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 112))();
  (*(void (**)(uint64_t))((*v5 & *v4) + 0x98))(v7);
  v22[3] = v1;
  v22[0] = v0;
  id v8 = objc_allocWithZone(MEMORY[0x1E4FB14A8]);
  uint64_t v9 = v0;
  id v10 = @nonobjc UIBarButtonItem.init(barButtonSystemItem:target:action:)(0, v22, (uint64_t)sel_tapDoneButton);
  id v11 = objc_msgSend(self, sel_labelColor, v22[0]);
  objc_msgSend(v10, sel_setTintColor_, v11);

  id v12 = objc_msgSend(v4, sel_navigationItem);
  objc_msgSend(v12, sel_setRightBarButtonItem_, v10);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C3769830;
  *(void *)(v13 + 32) = v4;
  v22[0] = v13;
  specialized Array._endMutation()();
  type metadata accessor for UIViewController();
  uint64_t v14 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setViewControllers_, isa);

  OUTLINED_FUNCTION_3_53();
  uint64_t v17 = *(void (**)(void *))(v16 + 168);
  uint64_t v18 = v14;
  v17(v4);
  id v19 = objc_msgSend(v9, sel_navigationBar);
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_init);
  objc_msgSend(v19, sel_setShadowImage_, v20);

  if (v9[OBJC_IVAR____TtC15ConversationKit42ConversationHUDDetailsNavigationController_shouldHaveBackgroundMaterial] == 1)
  {
    OUTLINED_FUNCTION_3_53();
    (*(void (**)(void))(v21 + 224))();
  }
}

Swift::Bool __swiftcall ConversationHUDDetailsNavigationController._canShowWhileLocked()()
{
  return 1;
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.tapDoneButton()()
{
  OUTLINED_FUNCTION_0_20();
  id v2 = (void *)(*(uint64_t (**)(void))(v1 + 112))();
  if (v2)
  {
    objc_msgSend(v2, sel_wantsDismissal);
    swift_unknownObjectRelease();
  }
  else
  {
    objc_msgSend(v0, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.refreshTitleCell()()
{
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.resetScroll(animated:)(Swift::Bool animated)
{
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.captioningStateDidChange()()
{
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.setUpBackgroundMaterialView()()
{
  id v1 = objc_msgSend(self, sel_effectWithStyle_, 18);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v1);

  id v3 = v2;
  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v5 = v4;
  objc_msgSend(v4, sel_bounds);
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;

  objc_msgSend(v3, sel_setFrame_, v7, v9, v11, v13);
  objc_msgSend(v3, sel_setAutoresizingMask_, 18);
  id v14 = objc_msgSend(v0, sel_view);
  if (!v14)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v15 = v14;
  objc_msgSend(v14, sel_insertSubview_atIndex_, v3, 0);
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.controlsModeUpdated()()
{
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.layoutStyleUpdated()()
{
}

void ConversationHUDDetailsNavigationController.updated(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 160))();
  if (v3)
  {
    id v4 = (id)v3;
    ConversationHUDDetailsViewController.updated(_:)(a1);
  }
}

void ConversationHUDDetailsNavigationController.update(participant:broadcastingState:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
  if (v1)
  {
    id v2 = (id)v1;
    ConversationHUDDetailsViewController.update(participant:broadcastingState:)();
  }
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(Swift::OpaquePointer a1, Swift::Bool isLocalMemberAuthorizedToChangeGroupMembership)
{
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v2 + 160))())
  {
    uint64_t v3 = OUTLINED_FUNCTION_1_53();
    ConversationHUDDetailsViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)((Swift::OpaquePointer)v3, v4);
  }
}

void ConversationHUDDetailsNavigationController.update(participant:isKickingAvailable:)()
{
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v0 + 160))())
  {
    OUTLINED_FUNCTION_1_53();
    ConversationHUDDetailsViewController.update(participant:isKickingAvailable:)();
  }
}

void ConversationHUDDetailsNavigationController.update(with:updateReason:)()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 160))();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    ConversationHUDDetailsViewController.update(with:updateReason:)();
  }
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.updateRemoteAudioPaused(audioPaused:)(Swift::Bool audioPaused)
{
}

void ConversationHUDDetailsNavigationController.resetScroll(animated:)(char a1, void (*a2)(void))
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 160))();
  if (v5)
  {
    id v6 = (id)v5;
    a2(a1 & 1);
  }
}

Swift::Void __swiftcall ConversationHUDDetailsNavigationController.refreshToggleIgnoreLMIRequestsRowCell()()
{
}

void ConversationHUDDetailsNavigationController.refreshTitleCell()(void (*a1)(void))
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 160))();
  if (v3)
  {
    id v4 = (id)v3;
    a1();
  }
}

id ConversationHUDDetailsNavigationController.__allocating_init(navigationBarClass:toolbarClass:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t ObjCClassFromMetadata = 0;
  if (a2) {
LABEL_3:
  }
    uint64_t v3 = swift_getObjCClassFromMetadata();
LABEL_4:
  id v5 = objc_allocWithZone(v2);
  return objc_msgSend(v5, sel_initWithNavigationBarClass_toolbarClass_, ObjCClassFromMetadata, v3);
}

void ConversationHUDDetailsNavigationController.init(navigationBarClass:toolbarClass:)()
{
}

id ConversationHUDDetailsNavigationController.__allocating_init(rootViewController:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithRootViewController_, a1);

  return v3;
}

void ConversationHUDDetailsNavigationController.init(rootViewController:)()
{
}

id ConversationHUDDetailsNavigationController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void ConversationHUDDetailsNavigationController.init(nibName:bundle:)()
{
}

id ConversationHUDDetailsNavigationController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationHUDDetailsNavigationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.controlsModeUpdated() in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.layoutStyleUpdated() in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.updated(_:) in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.update(participant:broadcastingState:) in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.update(participant:isKickingAvailable:) in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.update(with:updateReason:) in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:) in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.updateRemoteAudioPaused(audioPaused:) in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t protocol witness for ConversationControlsDetailsViewControllerDelegate.refreshToggleIgnoreLMIRequestsRowCell() in conformance ConversationHUDDetailsNavigationController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

unint64_t type metadata accessor for UIViewController()
{
  unint64_t result = lazy cache variable for type metadata for UIViewController;
  if (!lazy cache variable for type metadata for UIViewController)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  }
  return result;
}

uint64_t method lookup function for ConversationHUDDetailsNavigationController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHUDDetailsNavigationController);
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.detailsDelegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.detailsDelegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.detailsDelegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.isOnScreen.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.isOnScreen.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.isOnScreen.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.detailsViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.detailsViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.detailsViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.__allocating_init(controlsManager:shouldHaveBackgroundMaterial:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.tapDoneButton()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.refreshTitleCell()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.resetScroll(animated:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.captioningStateDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.setUpBackgroundMaterialView()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.controlsModeUpdated()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.layoutStyleUpdated()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.updated(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.update(participant:broadcastingState:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.update(participant:isKickingAvailable:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.update(with:updateReason:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.updateRemoteAudioPaused(audioPaused:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ConversationHUDDetailsNavigationController.refreshToggleIgnoreLMIRequestsRowCell()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t key path getter for ParticipantListLayout.delegate : ParticipantListLayout@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for ParticipantListLayout.delegate : ParticipantListLayout(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t ParticipantListLayout.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t ParticipantListLayout.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ParticipantListLayout.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id ParticipantListLayout.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ParticipantListLayout.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_indexPathLayoutAttributes;
  type metadata accessor for IndexPath();
  type metadata accessor for UICollectionViewLayoutAttributes();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  uint64_t v3 = v0;
  *(void *)&v0[v2] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v4 = &v3[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_lastInvalidatedSize];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  uint64_t v5 = &v3[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_calculatedContentSize];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v9.receiver = v3;
  v9.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_setItemSize_, 60.0, 60.0);
  id v7 = v6;
  static Platform.current.getter();
  objc_msgSend(v7, sel_setMinimumInteritemSpacing_, 3.0);

  return v7;
}

unint64_t type metadata accessor for UICollectionViewLayoutAttributes()
{
  unint64_t result = lazy cache variable for type metadata for UICollectionViewLayoutAttributes;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutAttributes)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    type metadata accessor for IndexPath();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

id ParticipantListLayout.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantListLayout.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_indexPathLayoutAttributes;
  type metadata accessor for IndexPath();
  type metadata accessor for UICollectionViewLayoutAttributes();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  *(void *)&v0[v1] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_lastInvalidatedSize];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  id v3 = &v0[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_calculatedContentSize];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ParticipantListLayout.prepare()()
{
  uint64_t v2 = v0;
  v248.receiver = v0;
  v248.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v248, sel_prepareLayout);
  id v3 = &v0[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_indexPathLayoutAttributes];
  OUTLINED_FUNCTION_9_27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IndexPath : UICollectionViewLayoutAttributes]._Variant);
  Dictionary._Variant.removeAll(keepingCapacity:)(1);
  swift_endAccess();
  uint64_t v4 = (char *)objc_msgSend(v0, sel_collectionView);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  swift_beginAccess();
  objc_msgSend(v0, sel_setScrollDirection_, (static AmbientState.isPresented & 1) == 0);
  ParticipantListLayout.updateItemSize()();
  v234 = v5;
  unint64_t v6 = (unint64_t)objc_msgSend(v5, sel_numberOfSections);
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_125;
  }
  id v7 = (char *)v6;
  double v8 = &selRef_ringButton;
  objc_super v9 = &selRef_ringButton;
  v237 = v3;
  if (!v6)
  {
    double v10 = 0.0;
LABEL_25:
    if (objc_msgSend(v2, sel_scrollDirection) == (id)1)
    {
      objc_msgSend(v2, sel_minimumInteritemSpacing);
      double v60 = v10 + v59;
      OUTLINED_FUNCTION_32_14();
      id v61 = &v2[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_calculatedContentSize];
      *(double *)id v61 = v60;
      *((void *)v61 + 1) = v62;
      objc_msgSend(v5, sel_bounds);
      v233 = v61;
      if (*(double *)v61 < v63)
      {
        double v10 = v63;
        double v64 = v63 - *(double *)v61;
        OUTLINED_FUNCTION_3_54();
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
        uint64_t v73 = OUTLINED_FUNCTION_15_20(v65, v66, v67, v68, v69, v70, v71, v72, v232[0]);
        MEMORY[0x1F4188790](v73);
        OUTLINED_FUNCTION_8_28();
        uint64_t v74 = 0;
        v242 = (uint64_t *)v5;
        if (!v1) {
          goto LABEL_29;
        }
LABEL_28:
        OUTLINED_FUNCTION_16_18();
        while (1)
        {
          type metadata accessor for IndexPath();
          OUTLINED_FUNCTION_4();
          uint64_t v84 = v83;
          unint64_t v241 = *(void *)(v85 + 72);
          uint64_t v86 = OUTLINED_FUNCTION_14_21(*(void *)(v85 + 16));
          v87(v86);
          uint64_t v88 = OUTLINED_FUNCTION_10_23();
          if (v96) {
            goto LABEL_114;
          }
          OUTLINED_FUNCTION_18_23(v88, v89, v90, v91, v92, v93, v94, v95, v232[0]);
          uint64_t v98 = MEMORY[0x1F4188790](v97);
          unint64_t v106 = OUTLINED_FUNCTION_4_41(v98, v99, v100, v101, v102, v103, v104, v105, v232[0]);
          v107(v106);
          OUTLINED_FUNCTION_22_14();
          uint64_t v108 = *(void *)v3;
          if (*(void *)(*(void *)v3 + 16)
            && (unint64_t v109 = specialized __RawDictionaryStorage.find<A>(_:)(), (v110 & 1) != 0))
          {
            uint64_t v111 = *(void **)(*(void *)(v108 + 56) + 8 * v109);
            swift_endAccess();
            id v112 = v111;
            [v112 v8[268]];
            id v114 = objc_msgSend(v112, v9[270], v64 + v113);
            OUTLINED_FUNCTION_23_15((uint64_t)v114, v115, v116, v117, v118, v119, v120, v121, v232[0]);
            uint64_t v123 = MEMORY[0x1F4188790](v122);
            int v131 = OUTLINED_FUNCTION_5_45(v123, v124, v125, v126, v127, v128, v129, v130, v232[0]);
            v132(v131);
            OUTLINED_FUNCTION_9_27();
            v236 = (char *)v112;
            swift_isUniquelyReferenced_nonNull_native();
            OUTLINED_FUNCTION_11_21();
            OUTLINED_FUNCTION_34_7();
            if (v52) {
              goto LABEL_123;
            }
            unint64_t v135 = v133;
            id v3 = v134;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<IndexPath, UICollectionViewLayoutAttributes>);
            objc_super v9 = &selRef_ringButton;
            if (OUTLINED_FUNCTION_31_14())
            {
              unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)();
              if ((v3 & 1) != (v137 & 1)) {
                goto LABEL_130;
              }
              unint64_t v135 = v136;
            }
            uint64_t v138 = v247;
            if (v3)
            {
              double v8 = *(char ***)(v247 + 56);

              OUTLINED_FUNCTION_26_13();
            }
            else
            {
              uint64_t v140 = OUTLINED_FUNCTION_2_40();
              v141(v140);
              OUTLINED_FUNCTION_12_24();
              if (v52) {
                goto LABEL_126;
              }
              unint64_t v135 = v143;
              *(void *)(v138 + 16) = v142;
            }
            OUTLINED_FUNCTION_28_10();
            CGFloat v144 = *(void (**)(void))(v84 + 8);
            OUTLINED_FUNCTION_6_35();
            v144();
            swift_endAccess();

            OUTLINED_FUNCTION_6_35();
            v144();
            OUTLINED_FUNCTION_17_22();
          }
          else
          {
            swift_endAccess();
            OUTLINED_FUNCTION_6_35();
            v139();
          }
          uint64_t v74 = v246;
          if (v245) {
            goto LABEL_28;
          }
LABEL_29:
          if (__OFADD__(v74, 1)) {
            goto LABEL_121;
          }
          OUTLINED_FUNCTION_21_17();
          if (v75 == v52) {
            goto LABEL_113;
          }
          OUTLINED_FUNCTION_25_14();
          if (!v76)
          {
            OUTLINED_FUNCTION_7_32();
            if (v75 == v52) {
              goto LABEL_113;
            }
            OUTLINED_FUNCTION_1_54();
            if (!v77)
            {
              OUTLINED_FUNCTION_7_32();
              if (v75 == v52) {
                goto LABEL_113;
              }
              OUTLINED_FUNCTION_1_54();
              if (!v78)
              {
                OUTLINED_FUNCTION_7_32();
                if (v75 == v52) {
                  goto LABEL_113;
                }
                OUTLINED_FUNCTION_1_54();
                if (!v79)
                {
                  OUTLINED_FUNCTION_7_32();
                  if (v75 == v52) {
                    goto LABEL_113;
                  }
                  OUTLINED_FUNCTION_1_54();
                  if (!v80)
                  {
                    OUTLINED_FUNCTION_21_17();
                    if (v75 == v52) {
                      goto LABEL_113;
                    }
                    if (!v238[v81]) {
                      break;
                    }
                  }
                }
              }
            }
          }
LABEL_52:
          OUTLINED_FUNCTION_20_14();
        }
        while (!__OFADD__(v81, 1))
        {
          OUTLINED_FUNCTION_7_32();
          if (v75 == v52) {
            goto LABEL_113;
          }
          OUTLINED_FUNCTION_24_16();
          if (v82) {
            goto LABEL_52;
          }
        }
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
    }
    else
    {
      OUTLINED_FUNCTION_32_14();
      uint64_t v146 = v145;
      objc_msgSend(v2, sel_minimumInteritemSpacing);
      v148 = (double *)&v2[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_calculatedContentSize];
      *(void *)v148 = v146;
      v148[1] = v10 + v147;
      objc_msgSend(v5, sel_bounds);
      v233 = (char *)v148;
      if (v148[1] < v149)
      {
        double v150 = v149;
        OUTLINED_FUNCTION_3_54();
        uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
        uint64_t v159 = OUTLINED_FUNCTION_15_20(v151, v152, v153, v154, v155, v156, v157, v158, v232[0]);
        MEMORY[0x1F4188790](v159);
        OUTLINED_FUNCTION_8_28();
        uint64_t v160 = 0;
        v242 = (uint64_t *)v5;
        if (!v1) {
          goto LABEL_71;
        }
LABEL_70:
        OUTLINED_FUNCTION_16_18();
        while (1)
        {
          type metadata accessor for IndexPath();
          OUTLINED_FUNCTION_4();
          uint64_t v169 = v168;
          unint64_t v241 = *(void *)(v170 + 72);
          uint64_t v171 = OUTLINED_FUNCTION_14_21(*(void *)(v170 + 16));
          v172(v171);
          uint64_t v173 = OUTLINED_FUNCTION_10_23();
          if (v96) {
            goto LABEL_116;
          }
          OUTLINED_FUNCTION_18_23(v173, v174, v175, v176, v177, v178, v179, v180, v232[0]);
          uint64_t v182 = MEMORY[0x1F4188790](v181);
          v190 = OUTLINED_FUNCTION_4_41(v182, v183, v184, v185, v186, v187, v188, v189, v232[0]);
          v191(v190);
          OUTLINED_FUNCTION_22_14();
          uint64_t v192 = *(void *)v3;
          if (*(void *)(*(void *)v3 + 16)
            && (unint64_t v193 = specialized __RawDictionaryStorage.find<A>(_:)(), (v194 & 1) != 0))
          {
            v195 = *(void **)(*(void *)(v192 + 56) + 8 * v193);
            swift_endAccess();
            id v196 = v195;
            [v196 v8[268]];
            id v197 = [v196 v9[270]];
            OUTLINED_FUNCTION_23_15((uint64_t)v197, v198, v199, v200, v201, v202, v203, v204, v232[0]);
            uint64_t v206 = MEMORY[0x1F4188790](v205);
            v214 = OUTLINED_FUNCTION_5_45(v206, v207, v208, v209, v210, v211, v212, v213, v232[0]);
            v215(v214);
            OUTLINED_FUNCTION_9_27();
            v236 = (char *)v196;
            swift_isUniquelyReferenced_nonNull_native();
            OUTLINED_FUNCTION_11_21();
            OUTLINED_FUNCTION_34_7();
            if (v52) {
              goto LABEL_124;
            }
            unint64_t v218 = v216;
            id v3 = v217;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<IndexPath, UICollectionViewLayoutAttributes>);
            objc_super v9 = &selRef_ringButton;
            if (OUTLINED_FUNCTION_31_14())
            {
              unint64_t v219 = specialized __RawDictionaryStorage.find<A>(_:)();
              if ((v3 & 1) != (v220 & 1)) {
                goto LABEL_130;
              }
              unint64_t v218 = v219;
            }
            uint64_t v221 = v247;
            if (v3)
            {
              double v8 = *(char ***)(v247 + 56);

              OUTLINED_FUNCTION_26_13();
            }
            else
            {
              uint64_t v223 = OUTLINED_FUNCTION_2_40();
              v224(v223);
              OUTLINED_FUNCTION_12_24();
              if (v52) {
                goto LABEL_127;
              }
              unint64_t v218 = v226;
              *(void *)(v221 + 16) = v225;
            }
            OUTLINED_FUNCTION_28_10();
            v227 = *(void (**)(void))(v169 + 8);
            OUTLINED_FUNCTION_6_35();
            v227();
            swift_endAccess();

            OUTLINED_FUNCTION_6_35();
            v227();
            OUTLINED_FUNCTION_17_22();
          }
          else
          {
            swift_endAccess();
            OUTLINED_FUNCTION_6_35();
            v222();
          }
          uint64_t v160 = v246;
          if (v245) {
            goto LABEL_70;
          }
LABEL_71:
          if (__OFADD__(v160, 1)) {
            goto LABEL_122;
          }
          OUTLINED_FUNCTION_21_17();
          if (v75 == v52) {
            break;
          }
          OUTLINED_FUNCTION_25_14();
          if (!v161)
          {
            OUTLINED_FUNCTION_7_32();
            if (v75 == v52) {
              break;
            }
            OUTLINED_FUNCTION_1_54();
            if (!v162)
            {
              OUTLINED_FUNCTION_7_32();
              if (v75 == v52) {
                break;
              }
              OUTLINED_FUNCTION_1_54();
              if (!v163)
              {
                OUTLINED_FUNCTION_7_32();
                if (v75 == v52) {
                  break;
                }
                OUTLINED_FUNCTION_1_54();
                if (!v164)
                {
                  OUTLINED_FUNCTION_7_32();
                  if (v75 == v52) {
                    break;
                  }
                  OUTLINED_FUNCTION_1_54();
                  if (!v165)
                  {
                    OUTLINED_FUNCTION_21_17();
                    if (v75 == v52) {
                      break;
                    }
                    if (!v238[v166])
                    {
                      while (!__OFADD__(v166, 1))
                      {
                        OUTLINED_FUNCTION_7_32();
                        if (v75 == v52) {
                          goto LABEL_115;
                        }
                        OUTLINED_FUNCTION_24_16();
                        if (v167) {
                          goto LABEL_94;
                        }
                      }
LABEL_129:
                      __break(1u);
                      while (1)
                      {
LABEL_130:
                        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_94:
          OUTLINED_FUNCTION_20_14();
        }
LABEL_115:
        uint64_t v230 = type metadata accessor for IndexPath();
        OUTLINED_FUNCTION_30_12(v230);
LABEL_116:

        swift_release();
        OUTLINED_FUNCTION_19_22();
        *(double *)(v231 + 8) = v150;
        return;
      }
    }

    return;
  }
  uint64_t v5 = 0;
  double v10 = 0.0;
  uint64_t v1 = 0x1F750D000;
  v236 = v0;
  v233 = (char *)v6;
  while (1)
  {
    if (v5 == v7) {
      goto LABEL_119;
    }
    uint64_t v11 = (uint64_t)objc_msgSend(v234, sel_numberOfItemsInSection_, v5);
    if (v11 < 0)
    {
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    uint64_t v12 = v11;
    if (v11) {
      break;
    }
LABEL_22:
    ++v5;
    OUTLINED_FUNCTION_29_14();
    double v57 = v56;
    objc_msgSend(v2, sel_minimumInteritemSpacing);
    double v10 = v10 + (v57 + v58) * (double)v12;
    id v7 = v233;
    if (v5 == v233) {
      goto LABEL_25;
    }
  }
  unint64_t v241 = type metadata accessor for UICollectionViewLayoutAttributes();
  uint64_t v13 = 0;
  uint64_t v246 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  uint64_t v243 = *(void *)(v15 + 64);
  v245 = (void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v235 = v16;
  v238 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v239 = v12;
  v240 = v5;
  while (v12 != v13)
  {
    v242 = v232;
    uint64_t v17 = v243;
    MEMORY[0x1F4188790](v14);
    uint64_t v18 = (char *)v232 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v19 = MEMORY[0x1C876F270](v13, v5);
    MEMORY[0x1F4188790](v19);
    v244 = *v245;
    v244(v18, v18, v246);
    id v20 = @nonobjc UICollectionViewLayoutAttributes.__allocating_init(forCellWith:)((uint64_t)v18);
    OUTLINED_FUNCTION_29_14();
    OUTLINED_FUNCTION_13_19();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_27_13();
    [v21 v22];
    id v23 = objc_msgSend(v2, sel_scrollDirection);
    OUTLINED_FUNCTION_13_19();
    uint64_t v24 = v9[270];
    if (v23 == (id)1)
    {
      [v20 v24];
      OUTLINED_FUNCTION_13_19();
      unint64_t v25 = (void *)OUTLINED_FUNCTION_27_13();
      objc_msgSend(v25, v26, v10);
    }
    else
    {
      objc_msgSend(v20, v24, 0.0);
      OUTLINED_FUNCTION_13_19();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_27_13();
      [v27 v28];
    }
    IndexPath.item.getter();
    OUTLINED_FUNCTION_29_14();
    objc_msgSend(v2, sel_minimumInteritemSpacing);
    OUTLINED_FUNCTION_13_19();
    int v29 = (void *)OUTLINED_FUNCTION_27_13();
    [v29 v30];
    id v31 = objc_msgSend(v20, sel_setZIndex_, 0);
    MEMORY[0x1F4188790](v31);
    uint64_t v33 = (char *)v232 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    OUTLINED_FUNCTION_33_14();
    v34();
    OUTLINED_FUNCTION_9_27();
    id v35 = v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v247 = *(void *)v3;
    uint64_t v37 = v247;
    *(void *)id v3 = 0x8000000000000000;
    unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)();
    uint64_t v40 = *(void *)(v37 + 16);
    BOOL v41 = (v39 & 1) == 0;
    Swift::Int v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      goto LABEL_112;
    }
    unint64_t v43 = v38;
    char v44 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<IndexPath, UICollectionViewLayoutAttributes>);
    Swift::Bool v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
    id v3 = v237;
    if (v45)
    {
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v44 & 1) != (v47 & 1)) {
        goto LABEL_130;
      }
      unint64_t v43 = v46;
    }
    uint64_t v48 = v247;
    if (v44)
    {
      uint64_t v49 = *(void *)(v247 + 56);

      *(void *)(v49 + 8 * v43) = v35;
    }
    else
    {
      *(void *)(v247 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      OUTLINED_FUNCTION_33_14();
      v50();
      *(void *)(*(void *)(v48 + 56) + 8 * v43) = v35;
      uint64_t v51 = *(void *)(v48 + 16);
      BOOL v52 = __OFADD__(v51, 1);
      uint64_t v53 = v51 + 1;
      if (v52)
      {
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
      *(void *)(v48 + 16) = v53;
    }
    ++v13;
    *(void *)id v3 = v48;
    swift_bridgeObjectRelease();
    uint64_t v54 = *v238;
    uint64_t v55 = v246;
    (*v238)(v33, v246);
    swift_endAccess();

    uint64_t v14 = ((uint64_t (*)(char *, uint64_t))v54)(v18, v55);
    uint64_t v12 = v239;
    uint64_t v5 = v240;
    double v8 = &selRef_ringButton;
    objc_super v9 = &selRef_ringButton;
    uint64_t v2 = v236;
    uint64_t v1 = 0x1F750D000;
    if (v239 == v13) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  uint64_t v228 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_30_12(v228);
LABEL_114:

  swift_release();
  OUTLINED_FUNCTION_19_22();
  double *v229 = v10;
}

void ParticipantListLayout.updateItemSize()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_collectionView);
  if (v2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v0, sel_scrollDirection);
    objc_msgSend(v3, sel_bounds);
    if (v4 == (id)1) {
      double Width = CGRectGetWidth(*(CGRect *)&v5);
    }
    else {
      double Width = CGRectGetHeight(*(CGRect *)&v5);
    }
    double v10 = Width;
    static Platform.current.getter();
    static Platform.current.getter();
    objc_msgSend(v3, sel_displayScale);
    double v12 = v11;
    uint64_t v13 = &v1[OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_delegate];
    swift_beginAccess();
    if (MEMORY[0x1C8776240](v13))
    {
      uint64_t v14 = *((void *)v13 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(ObjectType, v14);
      LOBYTE(v14) = v17;
      swift_unknownObjectRelease();
      char v18 = v14 & 1;
    }
    else
    {
      uint64_t v16 = 0;
      char v18 = 1;
    }
    double v19 = static ParticipantListLayout.itemWidth(for:remoteCellCount:displayScale:includeLocalParticipant:configurableRosterCellWidth:)(0, v16, v18, v10 + -10.0, 3.5, v12);
    objc_msgSend(v1, sel_setItemSize_, v19, v19);
  }
}

id @nonobjc UICollectionViewLayoutAttributes.__allocating_init(forCellWith:)(uint64_t a1)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_layoutAttributesForCellWithIndexPath_, isa);

  uint64_t v4 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return v3;
}

double ParticipantListLayout.collectionViewContentSize.getter()
{
  return *(double *)(v0 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_calculatedContentSize);
}

Swift::Bool __swiftcall ParticipantListLayout.shouldInvalidateLayout(forBoundsChange:)(__C::CGRect forBoundsChange)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_lastInvalidatedSize;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_lastInvalidatedSize + 16) & 1) == 0
    && *(double *)v2 == forBoundsChange.size.width
    && *(double *)(v2 + 8) == forBoundsChange.size.height)
  {
    return 0;
  }
  *(CGFloat *)uint64_t v2 = forBoundsChange.size.width;
  *(CGFloat *)(v2 + 8) = forBoundsChange.size.height;
  Swift::Bool result = 1;
  *(unsigned char *)(v2 + 16) = 0;
  return result;
}

void *ParticipantListLayout.layoutAttributesForItem(at:)()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit21ParticipantListLayout_indexPathLayoutAttributes);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void **)(*(void *)(v2 + 56) + 8 * v3);
    id v6 = v5;
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_endAccess();
  return v5;
}

uint64_t ParticipantListLayout._layoutAttributesForElements(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  swift_beginAccess();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if ((v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t result = swift_retain();
    if (v10) {
      goto LABEL_4;
    }
LABEL_17:
    swift_release();
    uint64_t v19 = MEMORY[0x1E4FBC860];
LABEL_18:
    swift_release();
    return v19;
  }
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_4:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v13 = (id)MEMORY[0x1C87744F0](i, v9);
      }
      else {
        id v13 = *(id *)(v9 + 8 * i + 32);
      }
      uint64_t v14 = v13;
      objc_msgSend(v13, sel_frame, v20);
      v22.origin.x = v15;
      v22.origin.y = v16;
      v22.size.width = v17;
      v22.size.height = v18;
      v21.origin.x = a1;
      v21.origin.y = a2;
      v21.size.width = a3;
      v21.size.height = a4;
      if (CGRectIntersectsRect(v21, v22))
      {
        MEMORY[0x1C87733A0]();
        if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
    }
    swift_release();
    uint64_t v19 = v20;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

double static ParticipantListLayout.itemWidth(for:remoteCellCount:displayScale:includeLocalParticipant:configurableRosterCellWidth:)(char a1, uint64_t a2, char a3, double a4, double a5, double a6)
{
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  CGFloat v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0) {
    return *(double *)&a2;
  }
  double v19 = a5 + 1.0;
  static Platform.current.getter();
  double v20 = 0.0;
  if ((a1 & 1) == 0) {
    double v20 = 1.0;
  }
  double v21 = (a4 + v19 * -3.0) / (v19 - v20);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, *MEMORY[0x1E4FBBEA8], v12);
  double v18 = CGFloat.rounded(_:toScale:)((uint64_t)v17, a6, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
  return v18;
}

id ParticipantListLayout.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of ParticipantListLayoutDelegate.configurableRosterCellWidth.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for ParticipantListLayout()
{
  return self;
}

uint64_t protocol witness for ParticipantsViewController.participantsViewControllerDelegate.getter in conformance CaptionsViewController()
{
  return specialized ParticipantsViewController.participantsViewControllerDelegate.getter();
}

uint64_t ParticipantsViewController.participantsViewControllerDelegate.getter()
{
  return 0;
}

uint64_t (*protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance CaptionsViewController(void *a1))()
{
  *a1 = 0;
  a1[1] = 0;
  return protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance CaptionsViewController;
}

uint64_t (*ParticipantsViewController.participantsViewControllerDelegate.modify(void *a1))()
{
  *a1 = 0;
  a1[1] = 0;
  return protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance CaptionsViewController;
}

uint64_t protocol witness for ParticipantsViewController.participantIdentifiers.getter in conformance CaptionsViewController()
{
  return specialized ParticipantsViewController.participantIdentifiers.getter();
}

uint64_t specialized ParticipantsViewController.participantIdentifiers.getter()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t ParticipantsViewController.participantIdentifiers.getter()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t ParticipantsViewController.participantCount.getter()
{
  return 0;
}

uint64_t protocol witness for ParticipantsViewController.update(participant:broadcastingState:) in conformance CaptionsViewController(uint64_t a1)
{
  return TPNumberPadCharacter.rawValue.getter(a1);
}

uint64_t protocol witness for ParticipantsViewController.update(participant:localParticipantOrientation:) in conformance CaptionsViewController()
{
  return protocol witness for Animatable.animatableData.getter in conformance ClarityUIDialerKeypadView.BarShape();
}

uint64_t protocol witness for ParticipantsViewController.spatialPosition(for:relativeTo:) in conformance CaptionsViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ParticipantsViewController.spatialPosition(for:relativeTo:) in conformance CaptionsViewController(a1, a2, a3, a4, specialized ParticipantsViewController.spatialPosition(for:relativeTo:));
}

double ParticipantsViewController.spatialPosition(for:relativeTo:)()
{
  return 0.0;
}

uint64_t key path setter for ParticipantsViewController.participantsViewControllerDelegate : <A>A()
{
  uint64_t v0 = swift_unknownObjectRetain();
  return ParticipantsViewController.participantsViewControllerDelegate.setter(v0);
}

void sub_1C30AB528(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1C30AB534()
{
  return 16;
}

__n128 sub_1C30AB540(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticipantsViewControllerUpdateReason(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 65282;
    if (a2 + 65282 <= 0xFFFEFFFF) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 4;
    }
    if (v2 < 0xFF0000) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x10000) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = *((unsigned __int8 *)a1 + 2);
        if (!*((unsigned char *)a1 + 2)) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65282;
      case 2:
        int v5 = a1[1];
        if (a1[1]) {
          return (*a1 | (v5 << 16)) - 65282;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C30AB600);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65282;
      default:
        break;
    }
  }
  unsigned int v7 = *((unsigned __int8 *)a1 + 1);
  if (v7 >= 3) {
    return (v7 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantsViewControllerUpdateReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65282;
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 254;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        break;
      case 2:
        *(_WORD *)(result + 2) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1C30AB6E8);
      case 4:
        *(_DWORD *)(result + 2) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *(unsigned char *)(result + 1) = -(char)a2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ParticipantsViewControllerUpdateReason(unsigned __int8 *a1)
{
  uint64_t result = a1[1];
  if (result >= 2) {
    return (*a1 | (result << 8)) - 510;
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for ParticipantsViewControllerUpdateReason(unsigned char *result, unsigned int a2)
{
  if (a2 > 1)
  {
    char v2 = a2 - 2;
    a2 = ((a2 - 2) >> 8) + 2;
    *uint64_t result = v2;
  }
  result[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for ParticipantsViewControllerUpdateReason()
{
  return &type metadata for ParticipantsViewControllerUpdateReason;
}

uint64_t dispatch thunk of ParticipantsViewController.participantsViewControllerDelegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantsViewController.participantsViewControllerDelegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ParticipantsViewController.participantsViewControllerDelegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ParticipantsViewController.participantIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ParticipantsViewController.participantCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ParticipantsViewController.update(participant:broadcastingState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of ParticipantsViewController.update(participant:localParticipantOrientation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ParticipantsViewController.update(participant:isKickingAvailable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ParticipantsViewController.update(with:updateReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of ParticipantsViewController.update(participant:audioPower:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ParticipantsViewController.update(participant:gradientOverlayAlpha:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ParticipantsViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of ParticipantsViewController.removeAllParticipants()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ParticipantsViewController.spatialPosition(for:relativeTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.deviceOrientation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.supportedDeviceOrientations.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.layoutIdiom.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.participantsViewController(_:didTapToggleFocus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.participantsViewController(_:didTapShutter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.participantsViewController(_:didTapRing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.participantsViewController(_:didTapKickMember:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.participantsViewController(_:willDisplay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ParticipantsViewControllerDelegate.participantsViewController(_:didEndDisplaying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t (*protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance InCallBannerHostViewController(void *a1))()
{
  *a1 = 0;
  a1[1] = 0;
  return protocol witness for ParticipantsViewController.participantsViewControllerDelegate.modify in conformance InCallBannerHostViewController;
}

uint64_t protocol witness for ParticipantsViewController.update(with:updateReason:) in conformance InCallBannerHostViewController(uint64_t a1)
{
  return TPNumberPadCharacter.rawValue.getter(a1);
}

uint64_t protocol witness for ParticipantsViewController.spatialPosition(for:relativeTo:) in conformance InCallBannerHostViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ParticipantsViewController.spatialPosition(for:relativeTo:) in conformance CaptionsViewController(a1, a2, a3, a4, (uint64_t (*)(void))OUTLINED_FUNCTION_18);
}

uint64_t protocol witness for ParticipantsViewController.spatialPosition(for:relativeTo:) in conformance CaptionsViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t dispatch thunk of ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_22:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
    uint64_t v16 = (void *)MEMORY[0x1C87730B0](v14, v15);
    id v17 = (id)TUCopyIDSCanonicalAddressForDestinationID();

    if (v17)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v23;
      }
      unint64_t v21 = *(void *)(v25 + 16);
      if (v21 >= *(void *)(v25 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v24;
      }
      *(void *)(v25 + 16) = v21 + 1;
      uint64_t v22 = v25 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v20;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v10 >= v6) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v6) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_29:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_29;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v23;
    uint64_t v22 = v24;
    uint64_t v2 = v25;
    uint64_t v3 = v26;
    uint64_t v4 = v27;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  unint64_t v21 = (unint64_t)(v2 + 64) >> 6;
  unint64_t v8 = MEMORY[0x1E4FBC860];
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      unint64_t v9 = (v4 - 1) & v4;
      int64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      unint64_t v11 = v3;
      goto LABEL_29;
    }
    uint64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v21) {
      goto LABEL_36;
    }
    uint64_t v14 = *(void *)(v22 + 8 * v13);
    unint64_t v11 = v3 + 1;
    if (!v14)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_36;
      }
      uint64_t v14 = *(void *)(v22 + 8 * v11);
      if (!v14)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_36;
        }
        uint64_t v14 = *(void *)(v22 + 8 * v11);
        if (!v14)
        {
          unint64_t v11 = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_36;
          }
          uint64_t v14 = *(void *)(v22 + 8 * v11);
          if (!v14)
          {
            unint64_t v11 = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_36;
            }
            uint64_t v14 = *(void *)(v22 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v15 < v21)
              {
                uint64_t v14 = *(void *)(v22 + 8 * v15++);
                if (v14)
                {
                  unint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v16 = objc_msgSend(v12, sel_identifier);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, v8);
        unint64_t v8 = v19;
      }
      uint64_t v18 = *(void *)(v8 + 16);
      id v17 = *(void *)(v8 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v8);
        unint64_t v8 = v20;
      }
      *(void *)(v8 + 16) = v18 + 1;
      *(void *)(v8 + 8 * v18 + 32) = v16;
      uint64_t v3 = v11;
      uint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        int64_t v12 = v28;
        swift_unknownObjectRelease();
        unint64_t v11 = v3;
        unint64_t v9 = v4;
        if (v28) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  id v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;

  uint64_t v1 = a1;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v2 = v22;
    uint64_t v3 = v23;
    uint64_t v4 = v24;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  id v17 = v2;
  unint64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    int64_t v12 = v19;
    swift_unknownObjectRelease();
    unint64_t v11 = v3;
    unint64_t v9 = v4;
    if (!v19) {
      goto LABEL_36;
    }
LABEL_26:
    uint64_t v15 = objc_msgSend(v12, sel_handle, v17);

    uint64_t v3 = v11;
    uint64_t v4 = v9;
    if (v15)
    {
      MEMORY[0x1C87733A0]();
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v3 = v11;
      uint64_t v4 = v9;
    }
  }
  if (v4)
  {
    unint64_t v9 = (v4 - 1) & v4;
    int64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    unint64_t v11 = v3;
LABEL_25:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  unint64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v8) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v18 + 8 * v11);
    if (!v13)
    {
      uint64_t v14 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v14 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v14 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13)
      {
LABEL_23:
        unint64_t v11 = v14;
      }
      else
      {
        unint64_t v11 = v3 + 5;
        if (v3 + 5 >= v8) {
          goto LABEL_36;
        }
        uint64_t v13 = *(void *)(v18 + 8 * v11);
        if (!v13)
        {
          uint64_t v16 = v3 + 6;
          while (v16 < v8)
          {
            uint64_t v13 = *(void *)(v18 + 8 * v16++);
            if (v13)
            {
              unint64_t v11 = v16 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
          return;
        }
      }
    }
LABEL_24:
    unint64_t v9 = (v13 - 1) & v13;
    int64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void *v28;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v23;
    uint64_t v22 = v24;
    uint64_t v2 = v25;
    uint64_t v3 = v26;
    uint64_t v4 = v27;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  unint64_t v8 = (unint64_t)(v2 + 64) >> 6;
  unint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_8:
  unint64_t v9 = v3;
  int64_t v10 = v4;
  while (1)
  {
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      int64_t v12 = v28;
      swift_unknownObjectRelease();
      uint64_t v3 = v9;
      uint64_t v4 = v10;
      if (!v28) {
        goto LABEL_40;
      }
      goto LABEL_27;
    }
    if (!v10) {
      break;
    }
    uint64_t v4 = (v10 - 1) & v10;
    unint64_t v11 = __clz(__rbit64(v10)) | (v9 << 6);
    uint64_t v3 = v9;
LABEL_26:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_40;
    }
LABEL_27:
    type metadata accessor for ReportSpamManager();
    uint64_t v15 = objc_msgSend(v12, sel_handle);
    uint64_t v16 = static ReportSpamManager.getContact(forHandle:)(v15);

    unint64_t v9 = v3;
    int64_t v10 = v4;
    if (v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v21 = v19;
      }
      uint64_t v18 = *(void *)(v21 + 16);
      if (v18 >= *(void *)(v21 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v21 = v20;
      }
      *(void *)(v21 + 16) = v18 + 1;
      *(void *)(v21 + 8 * v18 + 32) = v16;
      goto LABEL_8;
    }
  }
  uint64_t v3 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v3 >= v8) {
      goto LABEL_40;
    }
    uint64_t v13 = *(void *)(v22 + 8 * v3);
    if (!v13)
    {
      uint64_t v14 = v9 + 2;
      if (v9 + 2 >= v8) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(v22 + 8 * v14);
      if (v13) {
        goto LABEL_24;
      }
      uint64_t v14 = v9 + 3;
      if (v9 + 3 >= v8) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(v22 + 8 * v14);
      if (v13) {
        goto LABEL_24;
      }
      uint64_t v14 = v9 + 4;
      if (v9 + 4 >= v8) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(v22 + 8 * v14);
      if (v13)
      {
LABEL_24:
        uint64_t v3 = v14;
      }
      else
      {
        uint64_t v3 = v9 + 5;
        if (v9 + 5 >= v8) {
          goto LABEL_40;
        }
        uint64_t v13 = *(void *)(v22 + 8 * v3);
        if (!v13)
        {
          id v17 = v9 + 6;
          while (v17 < v8)
          {
            uint64_t v13 = *(void *)(v22 + 8 * v17++);
            if (v13)
            {
              uint64_t v3 = v17 - 1;
              goto LABEL_25;
            }
          }
LABEL_40:
          outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
          return;
        }
      }
    }
LABEL_25:
    uint64_t v4 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_26;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void v47[4];
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v68;
    uint64_t v49 = v69;
    uint64_t v2 = v70;
    uint64_t v3 = v71;
    uint64_t v4 = v72;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    int64_t v6 = *(void *)(a1 + 56);
    uint64_t v49 = a1 + 56;
    int64_t v7 = ~v5;
    unint64_t v8 = -v5;
    if (v8 < 64) {
      unint64_t v9 = ~(-1 << v8);
    }
    else {
      unint64_t v9 = -1;
    }
    uint64_t v4 = v9 & v6;
    swift_bridgeObjectRetain();
    uint64_t v2 = v7;
    uint64_t v3 = 0;
  }
  v47[3] = v1 & 0x7FFFFFFFFFFFFFFFLL;
  v47[0] = v2;
  int64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v48 = (unint64_t)(v2 + 64) >> 6;
  v47[2] = MEMORY[0x1E4FBC838] + 8;
  uint64_t v50 = v1;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      unint64_t v11 = (v4 - 1) & v4;
      int64_t v12 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v13 = v3;
      goto LABEL_29;
    }
    uint64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v16 >= v48) {
      goto LABEL_43;
    }
    id v17 = *(void *)(v49 + 8 * v16);
    uint64_t v13 = v3 + 1;
    if (!v17)
    {
      uint64_t v13 = v3 + 2;
      if (v3 + 2 >= v48) {
        goto LABEL_43;
      }
      id v17 = *(void *)(v49 + 8 * v13);
      if (!v17)
      {
        uint64_t v13 = v3 + 3;
        if (v3 + 3 >= v48) {
          goto LABEL_43;
        }
        id v17 = *(void *)(v49 + 8 * v13);
        if (!v17)
        {
          uint64_t v13 = v3 + 4;
          if (v3 + 4 >= v48) {
            goto LABEL_43;
          }
          id v17 = *(void *)(v49 + 8 * v13);
          if (!v17)
          {
            uint64_t v13 = v3 + 5;
            if (v3 + 5 >= v48) {
              goto LABEL_43;
            }
            id v17 = *(void *)(v49 + 8 * v13);
            if (!v17)
            {
              uint64_t v18 = v3 + 6;
              while (v18 < v48)
              {
                id v17 = *(void *)(v49 + 8 * v18++);
                if (v17)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_43:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v11 = (v17 - 1) & v17;
    int64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v15) {
      goto LABEL_43;
    }
    while (1)
    {
      double v59 = v11;
      double v60 = v13;
      id v61 = v10;
      uint64_t v19 = one-time initialization token for faceTime;
      double v58 = v15;
      uint64_t v20 = v15;
      if (v19 != -1) {
        swift_once();
      }
      swift_retain();
      uint64_t v54 = v20;
      ParticipantContactDetailsCache.contactDetails(for:nickname:)();
      unint64_t v21 = v62;
      uint64_t v22 = v63;
      uint64_t v23 = v64;
      uint64_t v55 = v65;
      uint64_t v24 = v66;
      uint64_t v53 = v67;
      uint64_t v25 = type metadata accessor for PersonNameComponents();
      BOOL v52 = v47;
      SEL v26 = *(void *)(v25 - 8);
      MEMORY[0x1F4188790](v25);
      SEL v28 = (char *)v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      int v29 = v21;
      swift_bridgeObjectRetain();
      double v57 = v24;
      swift_bridgeObjectRetain();
      PersonNameComponents.init()();
      uint64_t v51 = v21;
      double v56 = v22;
      if (v21)
      {
        SEL v30 = objc_msgSend(v29, sel_givenName, v47[0]);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        PersonNameComponents.givenName.setter();
        id v31 = objc_msgSend(v29, sel_familyName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        PersonNameComponents.givenName.setter();
      }
      PersonNameComponents.familyName.setter();
      if (one-time initialization token for initials != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v32 = (id)static NSPersonNameComponentsFormatter.initials;
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      uint64_t v34 = objc_msgSend(v32, sel_stringFromPersonNameComponents_, isa);

      id v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
      uint64_t v62 = (void *)v35;
      double v63 = v37;
      lazy protocol witness table accessor for type String and conformance String();
      unint64_t v38 = StringProtocol.localizedUppercase.getter();
      uint64_t v40 = v39;
      swift_bridgeObjectRelease();
      BOOL v41 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_bridgeObjectRelease();
      int64_t v10 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        int64_t v10 = v45;
      }
      uint64_t v1 = v50;
      Swift::Int v42 = v51;
      unint64_t v43 = *(void *)(v10 + 16);
      if (v43 >= *(void *)(v10 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        int64_t v10 = v46;
      }
      *(void *)(v10 + 16) = v43 + 1;
      char v44 = v10 + 72 * v43;
      *(void *)(v44 + 32) = v58;
      *(void *)(v44 + 40) = v42;
      *(void *)(v44 + 48) = v56;
      *(void *)(v44 + 56) = v23;
      *(void *)(v44 + 64) = v55;
      *(void *)(v44 + 72) = v41;
      *(void *)(v44 + 80) = v38;
      *(void *)(v44 + 88) = v40;
      *(unsigned char *)(v44 + 96) = 1;
      uint64_t v4 = v59;
      uint64_t v3 = v60;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v14 = __CocoaSet.Iterator.next()();
      if (v14)
      {
        uint64_t v73 = v14;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v15 = v62;
        swift_unknownObjectRelease();
        uint64_t v13 = v3;
        unint64_t v11 = v4;
        if (v15) {
          continue;
        }
      }
      goto LABEL_43;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  int64_t v13;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  void *v32;

  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v27;
    SEL v26 = v28;
    uint64_t v1 = v29;
    uint64_t v3 = v30;
    uint64_t v4 = v31;
  }
  else
  {
    OUTLINED_FUNCTION_153_0();
    SEL v26 = v2 + 56;
    OUTLINED_FUNCTION_152_0();
    uint64_t v4 = v5 & v6;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v25 = MEMORY[0x1E4FBC860];
  int64_t v7 = (unint64_t)(v1 + 64) >> 6;
  while (1)
  {
    unint64_t v8 = v3;
    if ((v2 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_35;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v11 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_35;
    }
LABEL_28:
    uint64_t v16 = (id)TUCopyIDSFromIDForHandle();
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_193_1();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v23;
      }
      unint64_t v21 = *(void *)(v25 + 16);
      if (v21 >= *(void *)(v25 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v24;
      }
      *(void *)(v25 + 16) = v21 + 1;
      uint64_t v22 = v25 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    int64_t v10 = v9 | (v3 << 6);
LABEL_27:
    unint64_t v11 = *(id *)(*(void *)(v2 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v7) {
      goto LABEL_35;
    }
    ++v3;
    if (!*(void *)(v26 + 8 * v12))
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v7) {
        goto LABEL_35;
      }
      if (!*(void *)(v26 + 8 * v3))
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v7) {
          goto LABEL_35;
        }
        if (!*(void *)(v26 + 8 * v3))
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v7) {
            goto LABEL_35;
          }
          if (!*(void *)(v26 + 8 * v3))
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v7) {
              goto LABEL_35;
            }
            if (!*(void *)(v26 + 8 * v3))
            {
              uint64_t v13 = v8 + 6;
              while (v13 < v7)
              {
                if (*(void *)(v26 + 8 * v13++))
                {
                  uint64_t v3 = v13 - 1;
                  goto LABEL_26;
                }
              }
LABEL_35:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_26:
    OUTLINED_FUNCTION_196_2();
    int64_t v10 = v15 + (v3 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  void *v34;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationInvitationPreference and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v29;
    SEL v28 = v30;
    uint64_t v2 = v31;
    uint64_t v3 = v32;
    uint64_t v4 = v33;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    SEL v28 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v25 = v2;
  uint64_t v27 = (unint64_t)(v2 + 64) >> 6;
  SEL v26 = MEMORY[0x1E4FBC860];
  while (1)
  {
    unint64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_40;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v11 = v34;
    swift_unknownObjectRelease();
    if (!v34) {
      goto LABEL_40;
    }
LABEL_31:
    uint64_t v15 = objc_msgSend(v11, sel_value, v25);
    if (!v15)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = (id)MEMORY[0x1C87730B0](v16);
      swift_bridgeObjectRelease();
    }
    id v17 = (id)TUCopyIDSCanonicalAddressForDestinationID();

    if (v17)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        SEL v26 = v23;
      }
      unint64_t v21 = *(void *)(v26 + 16);
      if (v21 >= *(void *)(v26 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        SEL v26 = v24;
      }
      *(void *)(v26 + 16) = v21 + 1;
      uint64_t v22 = v26 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    int64_t v10 = v9 | (v3 << 6);
LABEL_30:
    unint64_t v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_40;
    }
    goto LABEL_31;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v27) {
      goto LABEL_40;
    }
    uint64_t v13 = *(void *)(v28 + 8 * v12);
    ++v3;
    if (!v13)
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(v28 + 8 * v3);
      if (!v13)
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_40;
        }
        uint64_t v13 = *(void *)(v28 + 8 * v3);
        if (!v13)
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_40;
          }
          uint64_t v13 = *(void *)(v28 + 8 * v3);
          if (!v13)
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v27) {
              goto LABEL_40;
            }
            uint64_t v13 = *(void *)(v28 + 8 * v3);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v14 < v27)
              {
                uint64_t v13 = *(void *)(v28 + 8 * v14++);
                if (v13)
                {
                  uint64_t v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_40:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v4 = (v13 - 1) & v13;
    int64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  void *v32;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    SEL v26 = v28;
    uint64_t v3 = v29;
    uint64_t v2 = v30;
    uint64_t v4 = v31;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    SEL v26 = a1 + 56;
    uint64_t v3 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v25 = MEMORY[0x1E4FBC860];
  unint64_t v8 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    unint64_t v9 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    int64_t v12 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    uint64_t v16 = (id)TUCopyIDSFromIDForHandle();
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v23;
      }
      unint64_t v21 = *(void *)(v25 + 16);
      if (v21 >= *(void *)(v25 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v24;
      }
      *(void *)(v25 + 16) = v21 + 1;
      uint64_t v22 = v25 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    int64_t v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v11 = v10 | (v2 << 6);
LABEL_30:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  uint64_t v13 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v13 >= v8) {
      goto LABEL_38;
    }
    uint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v2;
    if (!v14)
    {
      uint64_t v2 = v9 + 2;
      if (v9 + 2 >= v8) {
        goto LABEL_38;
      }
      uint64_t v14 = *(void *)(v26 + 8 * v2);
      if (!v14)
      {
        uint64_t v2 = v9 + 3;
        if (v9 + 3 >= v8) {
          goto LABEL_38;
        }
        uint64_t v14 = *(void *)(v26 + 8 * v2);
        if (!v14)
        {
          uint64_t v2 = v9 + 4;
          if (v9 + 4 >= v8) {
            goto LABEL_38;
          }
          uint64_t v14 = *(void *)(v26 + 8 * v2);
          if (!v14)
          {
            uint64_t v2 = v9 + 5;
            if (v9 + 5 >= v8) {
              goto LABEL_38;
            }
            uint64_t v14 = *(void *)(v26 + 8 * v2);
            if (!v14)
            {
              uint64_t v15 = v9 + 6;
              while (v15 < v8)
              {
                uint64_t v14 = *(void *)(v26 + 8 * v15++);
                if (v14)
                {
                  uint64_t v2 = v15 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v4 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  void *v32;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    SEL v26 = v28;
    uint64_t v2 = v29;
    uint64_t v3 = v30;
    uint64_t v4 = v31;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    SEL v26 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v25 = MEMORY[0x1E4FBC860];
  unint64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    unint64_t v9 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    int64_t v12 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    uint64_t v16 = CHHandle.tuHandle.getter();
    id v17 = (id)TUCopyIDSFromIDForHandle();

    if (v17)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v23;
      }
      unint64_t v21 = *(void *)(v25 + 16);
      if (v21 >= *(void *)(v25 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v24;
      }
      *(void *)(v25 + 16) = v21 + 1;
      uint64_t v22 = v25 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    int64_t v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v11 = v10 | (v3 << 6);
LABEL_30:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  uint64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_38;
    }
    uint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v9 + 2;
      if (v9 + 2 >= v8) {
        goto LABEL_38;
      }
      uint64_t v14 = *(void *)(v26 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v9 + 3;
        if (v9 + 3 >= v8) {
          goto LABEL_38;
        }
        uint64_t v14 = *(void *)(v26 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v9 + 4;
          if (v9 + 4 >= v8) {
            goto LABEL_38;
          }
          uint64_t v14 = *(void *)(v26 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v9 + 5;
            if (v9 + 5 >= v8) {
              goto LABEL_38;
            }
            uint64_t v14 = *(void *)(v26 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v9 + 6;
              while (v15 < v8)
              {
                uint64_t v14 = *(void *)(v26 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v4 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  uint64_t v1 = a1;
  uint64_t v23 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
    lazy protocol witness table accessor for type UIScene and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v16 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  unint64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      unint64_t v9 = (v4 - 1) & v4;
      int64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      unint64_t v11 = v3;
      goto LABEL_29;
    }
    uint64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v16 + 8 * v13);
    unint64_t v11 = v3 + 1;
    if (!v14)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_37;
      }
      uint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_37;
        }
        uint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          unint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_37;
          }
          uint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            unint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_37;
            }
            uint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v15 < v8)
              {
                uint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  unint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_37:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    while (1)
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1C87733A0]();
        if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
      uint64_t v3 = v11;
      uint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScene);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        int64_t v12 = v17;
        swift_unknownObjectRelease();
        unint64_t v11 = v3;
        unint64_t v9 = v4;
        if (v17) {
          continue;
        }
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  void *v34;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    _sSo17OS_dispatch_queueCAB7Combine9Scheduler8DispatchWlTm_1((uint64_t)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v29;
    SEL v28 = v30;
    uint64_t v2 = v31;
    uint64_t v3 = v32;
    uint64_t v4 = v33;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    SEL v28 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v25 = v2;
  uint64_t v27 = (unint64_t)(v2 + 64) >> 6;
  SEL v26 = MEMORY[0x1E4FBC860];
  while (1)
  {
    unint64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_40;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v11 = v34;
    swift_unknownObjectRelease();
    if (!v34) {
      goto LABEL_40;
    }
LABEL_31:
    uint64_t v15 = objc_msgSend(v11, sel_value, v25);
    if (!v15)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = (id)MEMORY[0x1C87730B0](v16);
      swift_bridgeObjectRelease();
    }
    id v17 = (id)TUCopyIDSCanonicalAddressForDestinationID();

    if (v17)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        SEL v26 = v23;
      }
      unint64_t v21 = *(void *)(v26 + 16);
      if (v21 >= *(void *)(v26 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        SEL v26 = v24;
      }
      *(void *)(v26 + 16) = v21 + 1;
      uint64_t v22 = v26 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    int64_t v10 = v9 | (v3 << 6);
LABEL_30:
    unint64_t v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_40;
    }
    goto LABEL_31;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v27) {
      goto LABEL_40;
    }
    uint64_t v13 = *(void *)(v28 + 8 * v12);
    ++v3;
    if (!v13)
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(v28 + 8 * v3);
      if (!v13)
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_40;
        }
        uint64_t v13 = *(void *)(v28 + 8 * v3);
        if (!v13)
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_40;
          }
          uint64_t v13 = *(void *)(v28 + 8 * v3);
          if (!v13)
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v27) {
              goto LABEL_40;
            }
            uint64_t v13 = *(void *)(v28 + 8 * v3);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v14 < v27)
              {
                uint64_t v13 = *(void *)(v28 + 8 * v14++);
                if (v13)
                {
                  uint64_t v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_40:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v4 = (v13 - 1) & v13;
    int64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v2 = type metadata accessor for CountdownVoucher(0);
  uint64_t v3 = OUTLINED_FUNCTION_1(v2);
  unint64_t v5 = v4;
  MEMORY[0x1F4188790](v3);
  int64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int64_t v10 = (char *)&v34 - v9;
  unint64_t v11 = *(void *)(a1 + 56);
  uint64_t v37 = a1 + 56;
  int64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & v11;
  uint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  uint64_t v36 = MEMORY[0x1E4FBC860];
  while (v14)
  {
    id v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    uint64_t v18 = v17 | (v16 << 6);
LABEL_22:
    outlined init with copy of CountdownVoucher(*(void *)(a1 + 48) + *(void *)(v5 + 72) * v18, (uint64_t)v10);
    outlined init with take of CountdownVoucher((uint64_t)v10, (uint64_t)v7);
    SEL v26 = MEMORY[0x1C8776240](v7);
    uint64_t v27 = *((void *)v7 + 1);
    outlined destroy of CountdownVoucher((uint64_t)v7);
    if (v26)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v36 = v32;
      }
      SEL v28 = *(void *)(v36 + 16);
      int v29 = v28 + 1;
      if (v28 >= *(void *)(v36 + 24) >> 1)
      {
        uint64_t v34 = *(void *)(v36 + 16);
        id v35 = v28 + 1;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        SEL v28 = v34;
        int v29 = v35;
        uint64_t v36 = v33;
      }
      SEL v30 = v36;
      *(void *)(v36 + 16) = v29;
      id v31 = v30 + 16 * v28;
      *(void *)(v31 + 32) = v26;
      *(void *)(v31 + 40) = v27;
    }
  }
  uint64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v19 >= v15) {
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)(v37 + 8 * v19);
  ++v16;
  if (v20) {
    goto LABEL_21;
  }
  uint64_t v16 = v19 + 1;
  if (v19 + 1 >= v15) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_14_76();
  if (v20) {
    goto LABEL_21;
  }
  uint64_t v16 = v21 + 2;
  if (v21 + 2 >= v15) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_14_76();
  if (v20) {
    goto LABEL_21;
  }
  uint64_t v16 = v22 + 3;
  if (v22 + 3 >= v15) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_14_76();
  if (v20)
  {
LABEL_21:
    uint64_t v14 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_22;
  }
  uint64_t v24 = v23 + 4;
  if (v24 >= v15)
  {
LABEL_28:
    swift_release();
    return;
  }
  uint64_t v20 = *(void *)(v37 + 8 * v24);
  if (v20)
  {
    uint64_t v16 = v24;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v16 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v16 >= v15) {
      goto LABEL_28;
    }
    OUTLINED_FUNCTION_14_76();
    uint64_t v24 = v25 + 1;
    if (v20) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  id v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;

  uint64_t v1 = a1;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUScreenSharingRequest and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v2 = v22;
    uint64_t v3 = v23;
    uint64_t v4 = v24;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  id v17 = v2;
  unint64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    int64_t v12 = v19;
    swift_unknownObjectRelease();
    unint64_t v11 = v3;
    unint64_t v9 = v4;
    if (!v19) {
      goto LABEL_36;
    }
LABEL_26:
    uint64_t v15 = objc_msgSend(v12, sel_handle, v17);

    uint64_t v3 = v11;
    uint64_t v4 = v9;
    if (v15)
    {
      MEMORY[0x1C87733A0]();
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v3 = v11;
      uint64_t v4 = v9;
    }
  }
  if (v4)
  {
    unint64_t v9 = (v4 - 1) & v4;
    int64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    unint64_t v11 = v3;
LABEL_25:
    int64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  unint64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v8) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v18 + 8 * v11);
    if (!v13)
    {
      uint64_t v14 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v14 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v14 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13)
      {
LABEL_23:
        unint64_t v11 = v14;
      }
      else
      {
        unint64_t v11 = v3 + 5;
        if (v3 + 5 >= v8) {
          goto LABEL_36;
        }
        uint64_t v13 = *(void *)(v18 + 8 * v11);
        if (!v13)
        {
          uint64_t v16 = v3 + 6;
          while (v16 < v8)
          {
            uint64_t v13 = *(void *)(v18 + 8 * v16++);
            if (v13)
            {
              unint64_t v11 = v16 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
          return;
        }
      }
    }
LABEL_24:
    unint64_t v9 = (v13 - 1) & v13;
    int64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t DestinationQueryController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___CNKDestinationQueryControllerInternal_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t DestinationQueryController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path getter for DestinationQueryController.delegate : DestinationQueryController@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___CNKDestinationQueryControllerInternal_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  *a2 = result;
  return result;
}

uint64_t key path setter for DestinationQueryController.delegate : DestinationQueryController()
{
  return swift_unknownObjectWeakAssign();
}

void (*DestinationQueryController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CNKDestinationQueryControllerInternal_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1C8776240](v5);
  return DestinationQueryController.delegate.modify;
}

void DestinationQueryController.delegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id DestinationQueryController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *DestinationQueryController.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v1 = objc_msgSend(self, sel_sharedManager);
  id v2 = objc_allocWithZone(ObjectType);
  uint64_t v3 = DestinationQueryController.init(idsLookupManager:)(v1);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

char *DestinationQueryController.__allocating_init(idsLookupManager:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return DestinationQueryController.init(idsLookupManager:)(a1);
}

char *DestinationQueryController.init(idsLookupManager:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v4 = OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQuerySubject;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  int64_t v6 = v1;
  *(void *)&v1[v4] = PassthroughSubject.init()();
  uint64_t v7 = OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQueryGroupSubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v6[v7] = PassthroughSubject.init()();
  uint64_t v8 = OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSCachedQuerySubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v6[v8] = PassthroughSubject.init()();
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQueryDebouncer] = 0;
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQueryGroupDebouncer] = 0;
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSCachedQueryDebouncer] = 0;
  uint64_t v9 = OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleNotificationSubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v6[v9] = PassthroughSubject.init()();
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleNotificationDebouncer] = 0;
  uint64_t v10 = MEMORY[0x1E4FBC870];
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_idsDestinations] = MEMORY[0x1E4FBC870];
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_idsGroupDestinations] = v10;
  *(void *)&v6[OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager] = a1;
  id v56 = a1;

  v77.receiver = v6;
  v77.super_class = ObjectType;
  unint64_t v11 = (char *)objc_msgSendSuper2(&v77, sel_init);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  uint64_t v74 = v12;
  uint64_t v60 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_5_10();
  uint64_t v67 = v15;
  uint64_t v76 = *(void *)&v11[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQuerySubject];
  uint64_t v73 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  uint64_t v58 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_5_10();
  uint64_t v59 = v20;
  uint64_t v22 = v21 - v20;
  uint64_t v23 = v11;
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v63 = self;
  id v75 = objc_msgSend(v63, sel_mainRunLoop);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v66 = *(void *)(*(void *)(v24 - 8) + 64);
  MEMORY[0x1F4188790](v24 - 8);
  OUTLINED_FUNCTION_5_10();
  uint64_t v62 = v25;
  uint64_t v27 = v26 - v25;
  uint64_t v65 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v27, 1, 1, v65);
  unint64_t v57 = type metadata accessor for NSRunLoop();
  uint64_t v72 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  unint64_t v71 = lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  v55[1] = v5;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of Conversation?(v27, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  SEL v28 = *(void (**)(void, void))(v17 + 8);
  uint64_t v69 = v17 + 8;
  uint64_t v70 = v28;
  v28(v22, v73);
  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_3_55();
  uint64_t v29 = OUTLINED_FUNCTION_26();
  *(void *)(v29 + 16) = partial apply for closure #1 in DestinationQueryController.init(idsLookupManager:);
  *(void *)(v29 + 24) = v27;
  uint64_t v68 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop> and conformance Publishers.Debounce<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  id v61 = *(void (**)(void))(v74 + 8);
  v74 += 8;
  OUTLINED_FUNCTION_15();
  v30();
  uint64_t v31 = OUTLINED_FUNCTION_8_29(OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQueryDebouncer);
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_4_42();
  uint64_t v76 = *(void *)&v23[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQueryGroupSubject];
  MEMORY[0x1F4188790](v76);
  uint64_t v32 = v59;
  uint64_t v33 = (char *)v55 - v59;
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v75 = objc_msgSend(v63, sel_mainRunLoop);
  MEMORY[0x1F4188790](v75);
  uint64_t v34 = (char *)v55 - v62;
  OUTLINED_FUNCTION_5_46();
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of Conversation?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  uint64_t v35 = OUTLINED_FUNCTION_1_55();
  v36(v35);
  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_3_55();
  uint64_t v37 = OUTLINED_FUNCTION_26();
  *(void *)(v37 + 16) = partial apply for closure #2 in DestinationQueryController.init(idsLookupManager:);
  *(void *)(v37 + 24) = v33;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_15();
  v38();
  uint64_t v39 = OUTLINED_FUNCTION_8_29(OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSQueryGroupDebouncer);
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_4_42();
  uint64_t v76 = *(void *)&v23[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSCachedQuerySubject];
  MEMORY[0x1F4188790](v76);
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v40 = v63;
  id v75 = objc_msgSend(v63, sel_mainRunLoop);
  MEMORY[0x1F4188790](v75);
  uint64_t v41 = v62;
  OUTLINED_FUNCTION_5_46();
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of Conversation?((uint64_t)v55 - v41, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  uint64_t v42 = OUTLINED_FUNCTION_1_55();
  v43(v42);
  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_3_55();
  uint64_t v44 = OUTLINED_FUNCTION_26();
  *(void *)(v44 + 16) = partial apply for closure #3 in DestinationQueryController.init(idsLookupManager:);
  *(void *)(v44 + 24) = (char *)v55 - v32;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  Swift::Bool v45 = v61;
  OUTLINED_FUNCTION_15();
  v45();
  uint64_t v46 = OUTLINED_FUNCTION_8_29(OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleIDSCachedQueryDebouncer);
  MEMORY[0x1F4188790](v46);
  OUTLINED_FUNCTION_4_42();
  uint64_t v76 = *(void *)&v23[OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleNotificationSubject];
  MEMORY[0x1F4188790](v76);
  char v47 = (char *)v55 - v59;
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v75 = objc_msgSend(v40, sel_mainRunLoop);
  MEMORY[0x1F4188790](v75);
  __swift_storeEnumTagSinglePayload((uint64_t)v55 - v41, 1, 1, v65);
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of Conversation?((uint64_t)v55 - v41, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  uint64_t v48 = OUTLINED_FUNCTION_1_55();
  v49(v48);
  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_3_55();
  uint64_t v50 = OUTLINED_FUNCTION_26();
  *(void *)(v50 + 16) = partial apply for closure #4 in DestinationQueryController.init(idsLookupManager:);
  *(void *)(v50 + 24) = v47;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_15();
  v45();
  OUTLINED_FUNCTION_8_29(OBJC_IVAR___CNKDestinationQueryControllerInternal_scheduleNotificationDebouncer);
  id v51 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v52 = *MEMORY[0x1E4FADEC0];
  uint64_t v53 = v23;
  objc_msgSend(v51, sel_addObserver_selector_name_object_, v53, sel_handleIDSStatusChanged, v52, 0);

  return v53;
}

uint64_t sub_1C30AC970()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in DestinationQueryController.init(idsLookupManager:)()
{
  closure #1 in DestinationQueryController.init(idsLookupManager:)(v0, DestinationQueryController.scheduleIDSQuery());
}

void DestinationQueryController.scheduleIDSQuery()()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_beginBatchQueryWithDestinations_, isa);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void partial apply for closure #2 in DestinationQueryController.init(idsLookupManager:)()
{
  closure #1 in DestinationQueryController.init(idsLookupManager:)(v0, DestinationQueryController.scheduleIDSQueryForGroups());
}

void DestinationQueryController.scheduleIDSQueryForGroups()()
{
  id v1 = (void *)(v0 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsDestinations);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized Set.union<A>(_:)(v2);
  *id v1 = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
  swift_bridgeObjectRetain();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_beginBatchQueryWithDestinations_, isa);
}

void closure #1 in DestinationQueryController.init(idsLookupManager:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    a2();
  }
}

void partial apply for closure #3 in DestinationQueryController.init(idsLookupManager:)()
{
  closure #1 in DestinationQueryController.init(idsLookupManager:)(v0, DestinationQueryController.scheduleIDSCachedQuery());
}

uint64_t sub_1C30ACC2C()
{
  swift_release();
  return swift_deallocObject();
}

void DestinationQueryController.scheduleIDSCachedQuery()()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized Set.union<A>(_:)(v2);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_beginCachedQueryWithDestinations_, isa);
}

void closure #4 in DestinationQueryController.init(idsLookupManager:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = v2 + OBJC_IVAR___CNKDestinationQueryControllerInternal_delegate;
    swift_beginAccess();
    uint64_t v5 = (void *)MEMORY[0x1C8776240](v4);

    if (v5)
    {
      objc_msgSend(v5, sel_queryControllerUpdated);
      swift_unknownObjectRelease();
    }
  }
}

void partial apply for closure #4 in DestinationQueryController.init(idsLookupManager:)()
{
  closure #4 in DestinationQueryController.init(idsLookupManager:)(v0);
}

id DestinationQueryController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t DestinationQueryController.handleIDSStatusChanged()()
{
  return Subject<>.send()();
}

uint64_t DestinationQueryController.addRecipient(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationKit);
  swift_unknownObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKDestinationVendingProtocol);
    uint64_t v9 = String.init<A>(reflecting:)();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v5, v6, "[DestinationQueryController] Adding recipient: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v8, -1, -1);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  if (objc_msgSend(a1, sel_isGroup, v16, v17[0]))
  {
    unint64_t v11 = (void *)(v2 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsGroupDestinations);
  }
  else
  {
    unint64_t v11 = (void *)(v2 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsDestinations);
    OUTLINED_FUNCTION_9_26();
  }
  swift_bridgeObjectRetain();
  id v12 = objc_msgSend(a1, sel_idsDestinations);
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Set.union<A>(_:)(v13);
  *unint64_t v11 = v14;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Subject<>.send()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  return Subject<>.send()();
}

uint64_t DestinationQueryController.removeRecipient(_:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769620;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKDestinationVendingProtocol);
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v2 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(a1, sel_idsDestinations);
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  specialized Set._subtract<A>(_:)(v7);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void @objc DestinationQueryController.addRecipient(_:)()
{
  OUTLINED_FUNCTION_7_33();
  id v3 = v1;
  v0(v2);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall DestinationQueryController.reset()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
  objc_msgSend(v1, sel_cancelQueries);
}

void DestinationQueryController.queryAddresses(_:)(uint64_t a1)
{
  specialized Sequence.compactMap<A>(_:)(a1);
  specialized Set.init<A>(_:)(v2);
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized Set.union<A>(_:)(v3);
  uint64_t v5 = v4;
  id v6 = (void *)(v1 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsDestinations);
  swift_beginAccess();
  *id v6 = v5;
  swift_bridgeObjectRelease();
  DestinationQueryController.scheduleIDSQuery()();
}

uint64_t DestinationQueryController.isFaceTimeAllowed(for:)(void *a1)
{
  uint64_t result = DestinationQueryController.isAudioAllowed(for:)(a1);
  if (result != 1) {
    return DestinationQueryController.isVideoAllowed(for:)(a1) == 1;
  }
  return result;
}

uint64_t DestinationQueryController.isAudioAllowed(for:)(void *a1)
{
  return DestinationQueryController.isAudioAllowed(for:)(a1, (SEL *)&selRef_isFaceTimeAudioAvailableForAnyDestinationInDestinations_);
}

uint64_t DestinationQueryController.isVideoAllowed(for:)(void *a1)
{
  return DestinationQueryController.isAudioAllowed(for:)(a1, (SEL *)&selRef_isFaceTimeVideoAvailableForAnyDestinationInDestinations_);
}

uint64_t DestinationQueryController.isMultiwayAllowed(for:)(void *a1)
{
  return DestinationQueryController.isAudioAllowed(for:)(a1, (SEL *)&selRef_isFaceTimeMultiwayAvailableForAnyDestinationInDestinations_);
}

uint64_t DestinationQueryController.isAudioAllowed(for:)(void *a1, SEL *a2)
{
  id v4 = objc_msgSend(a1, sel_idsDestinations);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 16))
  {
    uint64_t v7 = *(void **)(v2 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    unsigned int v9 = objc_msgSend(v7, *a2, isa);

    return v9;
  }
  else
  {
    swift_release();
    return -1;
  }
}

uint64_t @objc DestinationQueryController.isMultiwayAllowed(for:)()
{
  OUTLINED_FUNCTION_7_33();
  id v3 = v1;
  uint64_t v4 = v0(v2);
  swift_unknownObjectRelease();

  return v4;
}

uint64_t DestinationQueryController.isWebCapable(for:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_idsDestinations);
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection.first.getter(v3);
  if (v5 && (v6 = v4, uint64_t v7 = v5, v8 = *(void *)(v3 + 16), swift_bridgeObjectRelease(), v8 == 1))
  {
    unsigned int v9 = *(void **)(v1 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
    unint64_t v10 = (void *)MEMORY[0x1C87730B0](v6, v7);
    swift_bridgeObjectRelease();
    unsigned int v11 = objc_msgSend(v9, sel_isWebCapableFaceTimeAvailableForDestination_, v10);

    return v11;
  }
  else
  {
    swift_bridgeObjectRelease();
    return -1;
  }
}

uint64_t DestinationQueryController.presentationStyle(for:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_idsDestinations);
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection.first.getter(v4);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      unint64_t v10 = *(void **)(v1 + OBJC_IVAR___CNKDestinationQueryControllerInternal_idsLookupManager);
      unsigned int v11 = (void *)MEMORY[0x1C87730B0](v8, v7);
      swift_bridgeObjectRelease();
      LODWORD(v7) = objc_msgSend(v10, sel_faceTimeMultiwayAvailabilityForDestination_, v11);
    }
    else
    {
      swift_bridgeObjectRelease();
      LODWORD(v7) = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(a1, sel_isGroup))
  {
    LODWORD(v12) = 0;
  }
  else
  {
    id v13 = objc_msgSend(a1, sel_idsDestinations);
    uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Collection.first.getter(v14);
    uint64_t v16 = v15;
    uint64_t v12 = v17;
    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v18 = (void *)MEMORY[0x1C87730B0](v16, v12);
      swift_bridgeObjectRelease();
      LODWORD(v12) = objc_msgSend(v18, sel_destinationIdIsPhoneNumber);
    }
  }
  uint64_t v19 = DestinationQueryController.isFaceTimeAllowed(for:)(a1);
  uint64_t v20 = 2;
  if (v7 == 2) {
    uint64_t v20 = 3;
  }
  if (v12) {
    uint64_t v20 = 4;
  }
  if (v19) {
    return 5;
  }
  else {
    return v20;
  }
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v38 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v37[1] = v37;
  MEMORY[0x1F4188790](v7 - 8);
  OUTLINED_FUNCTION_5_10();
  uint64_t v40 = v10;
  uint64_t v41 = v8 - v9;
  int64_t v39 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v12 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v13 = v12 | (v11 << 6);
  uint64_t v14 = v41;
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v27 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16))(v14, v24 + *(void *)(v28 + 72) * v13, v25);
    __swift_storeEnumTagSinglePayload(v14, 0, 1, v25);
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v14, 1, v25);
    if (EnumTagSinglePayload == 1) {
      goto LABEL_30;
    }
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    uint64_t v31 = (char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 32))(v31, v14, v25);
    MEMORY[0x1F4188790](v32);
    OUTLINED_FUNCTION_5_10();
    uint64_t v35 = v33 - v34;
    specialized Set._Variant.remove(_:)();
    outlined destroy of Conversation?(v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v25);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v15 = v11 + 1;
    uint64_t v14 = v41;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v15 >= v39) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v38 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      OUTLINED_FUNCTION_11_22();
      if (v17 == v18) {
        goto LABEL_29;
      }
      OUTLINED_FUNCTION_9_28();
      if (!v16)
      {
        int64_t v11 = v19 + 2;
        OUTLINED_FUNCTION_11_22();
        if (v17 == v18) {
          goto LABEL_29;
        }
        OUTLINED_FUNCTION_9_28();
        if (!v16)
        {
          int64_t v11 = v20 + 3;
          OUTLINED_FUNCTION_11_22();
          if (v17 == v18) {
            goto LABEL_29;
          }
          OUTLINED_FUNCTION_9_28();
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v11 << 6);
  }
  int64_t v22 = v21 + 4;
  if (v22 >= v39)
  {
LABEL_29:
    uint64_t v36 = type metadata accessor for UUID();
    __swift_storeEnumTagSinglePayload(v14, 1, 1, v36);
LABEL_30:
    swift_release();
    return;
  }
  unint64_t v16 = *(void *)(v38 + 8 * v22);
  if (v16)
  {
    int64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    OUTLINED_FUNCTION_11_22();
    if (v17 == v18) {
      goto LABEL_29;
    }
    OUTLINED_FUNCTION_9_28();
    int64_t v22 = v23 + 1;
    if (v16) {
      goto LABEL_25;
    }
  }
LABEL_33:
  __break(1u);
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:
  return swift_release();
}

uint64_t type metadata accessor for DestinationQueryController()
{
  return self;
}

uint64_t method lookup function for DestinationQueryController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DestinationQueryController);
}

uint64_t dispatch thunk of DestinationQueryController.__allocating_init(idsLookupManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t EnteredNumbersView.enteredNumbers.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](&v2, v0);
  return v2;
}

uint64_t key path getter for EnteredNumbersView.enteredNumbers : EnteredNumbersView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnteredNumbersView.enteredNumbers.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnteredNumbersView.enteredNumbers : EnteredNumbersView()
{
  swift_bridgeObjectRetain();
  return EnteredNumbersView.enteredNumbers.setter();
}

uint64_t EnteredNumbersView.enteredNumbers.setter()
{
  return Binding.wrappedValue.setter();
}

void (*EnteredNumbersView.enteredNumbers.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, char a2)
{
  uint64_t v10 = malloc(0x68uLL);
  *a1 = v10;
  v10[10] = a4;
  v10[11] = a5;
  v10[8] = a2;
  v10[9] = a3;
  void *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10[12] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0]();
  return EnteredNumbersView.enteredNumbers.modify;
}

void EnteredNumbersView.enteredNumbers.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)(*(void *)a1 + 48) = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[11];
  uint64_t v6 = v2[9];
  uint64_t v5 = v2[10];
  *uint64_t v2 = v2[8];
  v2[1] = v6;
  v2[2] = v5;
  v2[3] = v4;
  v2[7] = v3;
  if (a2)
  {
    swift_bridgeObjectRetain();
    Binding.wrappedValue.setter();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    Binding.wrappedValue.setter();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t EnteredNumbersView.$enteredNumbers.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t EnteredNumbersView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = type metadata accessor for DynamicTypeSize();
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>);
  MEMORY[0x1F4188790](v7 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v15 = v14 - v13;
  *(void *)uint64_t v10 = static VerticalAlignment.center.getter();
  *(void *)(v10 + 8) = 0;
  *(unsigned char *)(v10 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>);
  uint64_t v16 = OUTLINED_FUNCTION_4_43();
  closure #1 in EnteredNumbersView.body.getter(v16, v17, v18, v19, v20);
  uint64_t v21 = static Animation.default.getter();
  OUTLINED_FUNCTION_4_43();
  BOOL v22 = EnteredNumbersView.showsDeleteButton.getter();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v10, v15, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>);
  uint64_t v23 = v15 + *(int *)(v12 + 44);
  *(void *)uint64_t v23 = v21;
  *(unsigned char *)(v23 + 8) = v22;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v10, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v6, *MEMORY[0x1E4F3CB28], v28);
  uint64_t v25 = (uint64_t *)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>)
                           + 36));
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)v25 + *(int *)(v26 + 28), v6, v28);
  *uint64_t v25 = KeyPath;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v15, a1, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v28);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v15, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>);
}

uint64_t closure #1 in EnteredNumbersView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v69 = a4;
  uint64_t v70 = a3;
  uint64_t v84 = a5;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<Image, _PaddingLayout>>);
  uint64_t v77 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  unint64_t v71 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v78 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v72 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>)
      - 8;
  MEMORY[0x1F4188790](v73);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>)
      - 8;
  MEMORY[0x1F4188790](v79);
  uint64_t v74 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)
      - 8;
  uint64_t v12 = MEMORY[0x1F4188790](v82);
  uint64_t v83 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v76 = (uint64_t)&v68 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v81 = (uint64_t)&v68 - v16;
  uint64_t v17 = type metadata accessor for RoundedRectangle();
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  uint64_t v25 = v24 - 8;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v68 - v29;
  uint64_t v68 = (uint64_t)&v68 - v29;
  static ClarityUIMetrics.componentCornerRadius.getter();
  uint64_t v32 = v31;
  uint64_t v33 = (char *)v20 + *(int *)(v18 + 28);
  uint64_t v34 = *MEMORY[0x1E4F3D4A0];
  uint64_t v35 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v33, v34, v35);
  *uint64_t v20 = v32;
  v20[1] = v32;
  uint64_t v36 = a1;
  swift_retain();
  uint64_t v37 = a2;
  swift_retain();
  uint64_t v38 = v69;
  swift_bridgeObjectRetain();
  uint64_t v39 = v36;
  uint64_t v40 = v36;
  uint64_t v41 = v70;
  specialized ClarityUIShadowedContent.init(shape:isPressed:invertsInnerShadows:includesDropShadow:content:)((uint64_t)v20, 0, 1, 0, v39, v37, v70, v38, (uint64_t)v23);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v23, (uint64_t)v28, &demangling cache variable for type metadata for ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>);
  *(void *)&v28[*(int *)(v25 + 44)] = 0x3FF0000000000000;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v23, &demangling cache variable for type metadata for ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v28, (uint64_t)v30, &demangling cache variable for type metadata for ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  uint64_t v42 = (void *)swift_allocObject();
  void v42[2] = v40;
  v42[3] = v37;
  v42[4] = v41;
  v42[5] = v38;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _PaddingLayout>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  unint64_t v43 = v71;
  Button.init(action:label:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<Image, _PaddingLayout>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<Image, _PaddingLayout>>);
  lazy protocol witness table accessor for type DeleteButtonStyle and conformance DeleteButtonStyle();
  uint64_t v44 = v72;
  uint64_t v45 = v75;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v45);
  LOBYTE(v20) = static Edge.Set.leading.getter();
  static ClarityUIMetrics.standardSpacing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v54 = v78;
  uint64_t v55 = v80;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v10, v44, v80);
  id v56 = &v10[*(int *)(v73 + 44)];
  *id v56 = (char)v20;
  *((void *)v56 + 1) = v47;
  *((void *)v56 + 2) = v49;
  *((void *)v56 + 3) = v51;
  *((void *)v56 + 4) = v53;
  v56[40] = 0;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v55);
  if (EnteredNumbersView.showsDeleteButton.getter()) {
    double v57 = 1.0;
  }
  else {
    double v57 = 0.0;
  }
  uint64_t v58 = v74;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v10, v74, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>);
  *(double *)(v58 + *(int *)(v79 + 44)) = v57;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>);
  EnteredNumbersView.showsDeleteButton.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v59 = v76;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v58, v76, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>);
  uint64_t v60 = (_OWORD *)(v59 + *(int *)(v82 + 44));
  long long v61 = v86;
  *uint64_t v60 = v85;
  v60[1] = v61;
  v60[2] = v87;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v58, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>);
  uint64_t v62 = v81;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v59, v81, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>);
  uint64_t v63 = v68;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v68, (uint64_t)v28, &demangling cache variable for type metadata for ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  uint64_t v64 = v83;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v62, v83, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>);
  uint64_t v65 = v84;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v28, v84, &demangling cache variable for type metadata for ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>));
  outlined init with copy of Environment<DynamicTypeSize>.Content(v64, v65 + *(int *)(v66 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v62, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v63, &demangling cache variable for type metadata for ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v64, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v28, &demangling cache variable for type metadata for ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
}

uint64_t closure #1 in closure #1 in closure #1 in EnteredNumbersView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v70 = a5;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.TruncationMode>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_3();
  uint64_t v67 = v10;
  type metadata accessor for Text.TruncationMode();
  OUTLINED_FUNCTION_4();
  uint64_t v65 = v12;
  uint64_t v66 = v11;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_2_3();
  uint64_t v64 = v13;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
  OUTLINED_FUNCTION_0();
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v69 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v61 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v68 = (uint64_t)&v61 - v20;
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](&v75);
  uint64_t v23 = v75;
  unint64_t v22 = (unint64_t)v76;
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v24 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v61 = a4;
  if (v24)
  {
    uint64_t v71 = a1;
    uint64_t v72 = a2;
    uint64_t v73 = a3;
    uint64_t v74 = a4;
    MEMORY[0x1C87728E0](&v75, v21);
    uint64_t countAndFlagsBits = v75;
    object = v76;
    uint64_t v27 = a3;
  }
  else
  {
    uint64_t v27 = a3;
    id v28 = objc_msgSend(self, sel_conversationKit);
    v77._object = (void *)0xE000000000000000;
    v29._object = (void *)0x80000001C3797A70;
    v29._uint64_t countAndFlagsBits = 0xD000000000000029;
    v30.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v30.value._object = (void *)0xEF74694B6E6F6974;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v77._uint64_t countAndFlagsBits = 0;
    Swift::String v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v77);
    uint64_t countAndFlagsBits = v32._countAndFlagsBits;
    object = v32._object;
  }
  uint64_t v71 = countAndFlagsBits;
  uint64_t v72 = object;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v33 = Text.init<A>(_:)();
  uint64_t v35 = v34;
  char v37 = v36;
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  uint64_t v73 = v27;
  uint64_t v74 = v61;
  MEMORY[0x1C87728E0](&v75, v21);
  uint64_t v39 = v75;
  unint64_t v38 = (unint64_t)v76;
  swift_bridgeObjectRelease();
  uint64_t v40 = HIBYTE(v38) & 0xF;
  if ((v38 & 0x2000000000000000) == 0) {
    uint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
  }
  if (v40) {
    static Font.headline.getter();
  }
  else {
    static Font.body.getter();
  }
  uint64_t v41 = Text.font(_:)();
  uint64_t v43 = v42;
  char v45 = v44;
  uint64_t v61 = v46;
  swift_release();
  char v47 = v45 & 1;
  outlined consume of Text.Storage(v33, v35, v37 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v49 = v64;
  uint64_t v50 = v65;
  uint64_t v51 = v66;
  (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v64, *MEMORY[0x1E4F3E238], v66);
  uint64_t v52 = swift_getKeyPath();
  uint64_t v53 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))((char *)v67 + *(int *)(v63 + 28), v49, v51);
  *uint64_t v53 = v52;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v53, (uint64_t)&v19[*(int *)(v62 + 36)], &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.TruncationMode>);
  *(void *)uint64_t v19 = v41;
  *((void *)v19 + 1) = v43;
  unsigned char v19[16] = v47;
  *((void *)v19 + 3) = v61;
  *((void *)v19 + 4) = KeyPath;
  *((void *)v19 + 5) = 1;
  v19[48] = 0;
  outlined copy of Text.Storage(v41, v43, v47);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v53, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.TruncationMode>);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  outlined consume of Text.Storage(v41, v43, v47);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v54 = v68;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v19, v68, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t v56 = v55;
  uint64_t v57 = v69;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v54, v69, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
  uint64_t v58 = v70;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v57, v70, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
  uint64_t v59 = v58
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer))
               + 48);
  *(void *)uint64_t v59 = v56;
  *(unsigned char *)(v59 + 8) = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v54, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v57, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
}

uint64_t closure #2 in closure #1 in EnteredNumbersView.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](v5);
  uint64_t v2 = v5[0];
  unint64_t v1 = v5[1];
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    MEMORY[0x1C87728E0](v5, v0);
    MEMORY[0x1C87728E0](v5, v0);
    swift_bridgeObjectRelease();
    String.index(before:)();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x1C87728E0](v5, v0);
    String.remove(at:)();
    swift_bridgeObjectRelease();
    Binding.wrappedValue.setter();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in closure #1 in EnteredNumbersView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  char v3 = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

BOOL EnteredNumbersView.showsDeleteButton.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](v5, v0);
  uint64_t v2 = v5[0];
  unint64_t v1 = v5[1];
  swift_bridgeObjectRelease();
  uint64_t v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v3 = v2 & 0xFFFFFFFFFFFFLL;
  }
  return v3 != 0;
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1C30AF588()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3CFE8]);
}

uint64_t sub_1C30AF5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3CFE8]);
}

uint64_t associated type witness table accessor for View.Body : View in EnteredNumbersView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance EnteredNumbersView@<X0>(uint64_t a1@<X8>)
{
  return EnteredNumbersView.body.getter(a1);
}

uint64_t destroy for EnteredNumbersView()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EnteredNumbersView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EnteredNumbersView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EnteredNumbersView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnteredNumbersView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnteredNumbersView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnteredNumbersView()
{
  return &type metadata for EnteredNumbersView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DynamicTypeSize> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ClarityUIShadowedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, Spacer)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, RoundedRectangle>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _PaddingLayout>, _OpacityEffect>, _FrameLayout>)>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *type metadata accessor for DeleteButtonStyle()
{
  return &unk_1F1E99A08;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in DeleteButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t DeleteButtonStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlatterButtonType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v10[1] = static Color.red.getter();
  static Color.white.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F3D350], v2);
  return PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)();
}

uint64_t sub_1C30AFB78()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in EnteredNumbersView.body.getter()
{
  return closure #2 in closure #1 in EnteredNumbersView.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _PaddingLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DeleteButtonStyle and conformance DeleteButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DeleteButtonStyle and conformance DeleteButtonStyle;
  if (!lazy protocol witness table cache variable for type DeleteButtonStyle and conformance DeleteButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeleteButtonStyle and conformance DeleteButtonStyle);
  }
  return result;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C30AFCA4()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_1C30AFD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F3E250], MEMORY[0x1E4F3CFC8]);
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1C30AFDC0()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>, &demangling cache variable for type metadata for PlatterButtonStyleView<Color>);
}

uint64_t ScreeningCaptions.captionHistory.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  outlined copy of Participant.CaptionInfo?(*v0);
  return v1;
}

uint64_t ScreeningCaptions.captionHistory.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_captionHistory);
  OUTLINED_FUNCTION_1_21();
  uint64_t v8 = *v7;
  *uint64_t v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return outlined consume of Participant.CaptionInfo?(v8);
}

uint64_t outlined consume of Participant.CaptionInfo?(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*ScreeningCaptions.captionHistory.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t ScreeningCaptions.isGibberish.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t ScreeningCaptions.isGibberish.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_isGibberish);
  uint64_t result = OUTLINED_FUNCTION_1_21();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ScreeningCaptions.isGibberish.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t ScreeningCaptions.badCaptionCountThreshold.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_badCaptionCountThreshold);
}

uint64_t ScreeningCaptions.__allocating_init(logger:onUpdateCaptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  ScreeningCaptions.init(logger:onUpdateCaptions:)(a1, a2, a3);
  return v6;
}

uint64_t ScreeningCaptions.init(logger:onUpdateCaptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void *)(v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_captionHistory);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = 0;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_isGibberish) = 0;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_badCaptionCountThreshold;
  type metadata accessor for Defaults();
  swift_allocObject();
  uint64_t v10 = *(void *)Defaults.init()();
  uint64_t v11 = (*(uint64_t (**)(void))(v10 + 768))();
  swift_release();
  *(void *)(v3 + v9) = v11;
  uint64_t v12 = v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, a1);
  uint64_t v14 = (void *)(v4 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_onUpdateCaptions);
  *uint64_t v14 = a2;
  v14[1] = a3;
  return v4;
}

uint64_t ScreeningCaptions.gatherAndSortCaptions(captionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for Participant.Caption(0);
  uint64_t v7 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v88 = (void *)((char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v80 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v78 = *(void *)(v80 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v80);
  uint64_t v77 = (uint64_t)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v76 = (uint64_t)v69 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v70 = (uint64_t)v69 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v79 = (uint64_t)v69 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v69 - v17;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v71 = v6;
  if (v19)
  {
    uint64_t v89 = (uint64_t *)MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = 0;
    uint64_t v74 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v75 = v18;
    uint64_t v21 = *(void *)(v7 + 72);
    uint64_t v72 = v19;
    uint64_t v73 = v21;
    while (1)
    {
      unint64_t v22 = v88;
      outlined init with copy of Participant.Caption(v74 + v73 * v20, (uint64_t)v88, (void (*)(void))type metadata accessor for Participant.Caption);
      uint64_t v86 = *v22;
      uint64_t v23 = v81;
      uint64_t v24 = type metadata accessor for Date();
      long long v87 = v69;
      uint64_t v25 = *(void **)(v24 - 8);
      uint64_t v26 = v25[8];
      MEMORY[0x1F4188790](v24);
      unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
      id v28 = (uint64_t (*)(void))v25[2];
      uint64_t v84 = (char *)v69 - v27;
      uint64_t v29 = v28();
      MEMORY[0x1F4188790](v29);
      Swift::String_optional v30 = (char *)v69 - v27;
      ((void (*)(char *))v28)(v30);
      uint64_t v31 = *(int *)(v23 + 32);
      Swift::String v32 = (uint64_t *)((char *)v22 + *(int *)(v23 + 28));
      uint64_t v33 = *v32;
      uint64_t v34 = v32[1];
      int v35 = *((unsigned __int8 *)v22 + v31);
      swift_bridgeObjectRetain();
      long long v85 = v69;
      uint64_t v82 = v33;
      uint64_t v83 = v30;
      if (v35 == 1)
      {
        if (String.count.getter() < 1)
        {
          BOOL v44 = 0;
          uint64_t v40 = v75;
        }
        else
        {
          uint64_t v36 = *(uint64_t *)((char *)v88 + *(int *)(v81 + 36));
          uint64_t v37 = *(void *)(v36 + 16);
          if (v37)
          {
            uint64_t v38 = 0;
            uint64_t v39 = (uint64_t *)(v36 + 40);
            uint64_t v40 = v75;
            while (1)
            {
              uint64_t v41 = *v39;
              v39 += 2;
              BOOL v42 = __OFADD__(v38, v41);
              v38 += v41;
              if (v42) {
                break;
              }
              if (!--v37) {
                goto LABEL_13;
              }
            }
            __break(1u);
LABEL_44:
            __break(1u);
            uint64_t result = swift_release();
            __break(1u);
            return result;
          }
          uint64_t v38 = 0;
          uint64_t v40 = v75;
LABEL_13:
          BOOL v44 = (float)((float)v38 / (float)String.count.getter()) > 0.75;
        }
        char v43 = 1;
        uint64_t v45 = *(uint64_t *)((char *)v88 + *(int *)(v81 + 36));
        swift_bridgeObjectRetain();
      }
      else
      {
        char v43 = v35;
        BOOL v44 = 0;
        uint64_t v45 = MEMORY[0x1E4FBC860];
        uint64_t v40 = v75;
      }
      *(void *)uint64_t v40 = v86;
      uint64_t v46 = (int *)v80;
      char v47 = (void (*)(char *, char *, uint64_t))v25[4];
      v47(&v40[*(int *)(v80 + 20)], v84, v24);
      v47(&v40[v46[6]], v83, v24);
      uint64_t v48 = &v40[v46[7]];
      *(void *)uint64_t v48 = v82;
      *((void *)v48 + 1) = v34;
      v40[v46[8]] = v44;
      *(void *)&v40[v46[9]] = v45;
      v40[v46[10]] = v43;
      outlined destroy of Participant.Caption((uint64_t)v88, (void (*)(void))type metadata accessor for Participant.Caption);
      uint64_t v49 = (uint64_t)v89;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v49 + 16) + 1, 1);
        uint64_t v49 = (uint64_t)v89;
      }
      uint64_t v50 = v72;
      unint64_t v52 = *(void *)(v49 + 16);
      unint64_t v51 = *(void *)(v49 + 24);
      if (v52 >= v51 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
        uint64_t v49 = (uint64_t)v89;
      }
      ++v20;
      *(void *)(v49 + 16) = v52 + 1;
      outlined init with take of TranscriptionViewModel.Caption((uint64_t)v40, v49+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v52);
      if (v20 == v50)
      {
        uint64_t v6 = v71;
        goto LABEL_22;
      }
    }
  }
  uint64_t v49 = MEMORY[0x1E4FBC860];
LABEL_22:
  uint64_t v89 = (uint64_t *)v49;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v89);
  swift_bridgeObjectRelease();
  uint64_t v88 = v89;
  uint64_t v53 = v89[2];
  uint64_t v54 = v79;
  if (v53)
  {
    uint64_t v55 = *(void *)(v69[1] + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_badCaptionCountThreshold);
    unint64_t v56 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    uint64_t v57 = (uint64_t)v88 + v56;
    uint64_t v58 = *(void *)(v78 + 72);
    swift_retain();
    uint64_t v59 = 0;
    uint64_t v60 = MEMORY[0x1E4FBC860];
    uint64_t v61 = v80;
    do
    {
      outlined init with copy of Participant.Caption(v57, v54, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      if (*(unsigned char *)(v54 + *(int *)(v61 + 32)) == 1)
      {
        BOOL v42 = __OFADD__(v59++, 1);
        if (v42) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v59 = 0;
      }
      uint64_t v62 = v54;
      uint64_t v63 = v76;
      outlined init with copy of Participant.Caption(v62, v76, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      *(unsigned char *)(v63 + *(int *)(v61 + 32)) = v59 >= v55;
      if (v55 >= v59)
      {
        outlined init with take of TranscriptionViewModel.Caption(v63, (uint64_t)v6);
        uint64_t v64 = 0;
      }
      else
      {
        outlined destroy of Participant.Caption(v63, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        uint64_t v64 = 1;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v6, v64, 1, v61);
      uint64_t v54 = v79;
      outlined destroy of Participant.Caption(v79, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v61) == 1)
      {
        outlined destroy of TranscriptionViewModel.Caption?((uint64_t)v6);
      }
      else
      {
        uint64_t v65 = v70;
        outlined init with take of TranscriptionViewModel.Caption((uint64_t)v6, v70);
        outlined init with take of TranscriptionViewModel.Caption(v65, v77);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v60 + 16) + 1, 1, v60);
        }
        unint64_t v67 = *(void *)(v60 + 16);
        unint64_t v66 = *(void *)(v60 + 24);
        if (v67 >= v66 >> 1) {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, v60);
        }
        *(void *)(v60 + 16) = v67 + 1;
        outlined init with take of TranscriptionViewModel.Caption(v77, v60 + v56 + v67 * v58);
        uint64_t v6 = v71;
        uint64_t v61 = v80;
      }
      v57 += v58;
      --v53;
    }
    while (v53);
    swift_release_n();
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  return v60;
}

uint64_t ScreeningCaptions.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  outlined consume of Participant.CaptionInfo?(*(void *)(v0
                                                         + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_captionHistory));
  return v0;
}

uint64_t ScreeningCaptions.__deallocating_deinit()
{
  ScreeningCaptions.deinit();
  return swift_deallocClassInstance();
}

uint64_t ScreeningCaptions.participantCaptionsProvider(_:didUpdateCaptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = type metadata accessor for Participant.Caption(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  int v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    int v45 = v15;
    uint64_t v47 = a3;
    uint64_t v48 = v6;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v50[0] = v44;
    uint64_t v46 = v16;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v17 = *(void *)(a5 + 16);
    uint64_t v18 = MEMORY[0x1E4FBC860];
    if (v17)
    {
      v43[0] = v14;
      v43[1] = a4;
      uint64_t v49 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v19 = *(unsigned __int8 *)(v11 + 80);
      v43[2] = a5;
      uint64_t v20 = a5 + ((v19 + 32) & ~v19);
      uint64_t v21 = *(void *)(v11 + 72);
      uint64_t v18 = v49;
      do
      {
        outlined init with copy of Participant.Caption(v20, (uint64_t)v13, (void (*)(void))type metadata accessor for Participant.Caption);
        uint64_t v22 = Participant.Caption.debugDescription.getter();
        uint64_t v24 = v23;
        outlined destroy of Participant.Caption((uint64_t)v13, (void (*)(void))type metadata accessor for Participant.Caption);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v18 = v49;
        }
        unint64_t v25 = *(void *)(v18 + 16);
        if (v25 >= *(void *)(v18 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v18 = v49;
        }
        *(void *)(v18 + 16) = v25 + 1;
        uint64_t v26 = v18 + 16 * v25;
        *(void *)(v26 + 32) = v22;
        *(void *)(v26 + 40) = v24;
        v20 += v21;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      uint64_t v14 = v43[0];
    }
    unint64_t v27 = v46;
    uint64_t v49 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v14, (os_log_type_t)v45, "Captions updated: %s", v27, 0xCu);
    uint64_t v31 = v44;
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v31, -1, -1);
    MEMORY[0x1C87760E0](v27, -1, -1);

    uint64_t v6 = v48;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
  }
  Swift::String v32 = (uint64_t *)(v6 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_captionHistory);
  OUTLINED_FUNCTION_1_21();
  uint64_t v33 = *v32;
  outlined copy of Participant.CaptionInfo?(*v32);
  Participant.CaptionInfo.with(history:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  outlined consume of Participant.CaptionInfo?(v33);
  uint64_t v40 = *v32;
  *Swift::String v32 = v35;
  v32[1] = v37;
  v32[2] = v39;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of Participant.CaptionInfo?(v40);
  uint64_t v41 = *(void (**)(void))(v6 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_onUpdateCaptions);
  ScreeningCaptions.gatherAndSortCaptions(captionInfo:)(v35, v37, v39);
  v41();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void ScreeningCaptions.participantCaptionsProvider(_:didEnableCaptions:)()
{
  oslog = Logger.logObject.getter();
  os_log_type_t v0 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v0))
  {
    uint64_t v1 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v1 = 67240192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, oslog, v0, "Captions enabled: %{BOOL,public}d", v1, 8u);
    MEMORY[0x1C87760E0](v1, -1, -1);
  }
  else
  {
  }
}

uint64_t ScreeningCaptions.participantCaptionsProvider(_:didDetectGibberish:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = (unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_isGibberish);
  uint64_t result = swift_beginAccess();
  if (a3)
  {
    if ((*v5 & 1) == 0)
    {
      *uint64_t v5 = 1;
      return (*(uint64_t (**)(void))(v3
                                               + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_onUpdateCaptions))(0);
    }
  }
  else if (*v5)
  {
    *uint64_t v5 = 0;
    uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_captionHistory);
    swift_beginAccess();
    uint64_t v8 = *v7;
    if (*v7)
    {
      uint64_t v11 = v7 + 1;
      uint64_t v9 = v7[1];
      uint64_t v10 = v11[1];
      uint64_t v12 = *(void (**)(void))(v3 + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_onUpdateCaptions);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      ScreeningCaptions.gatherAndSortCaptions(captionInfo:)(v8, v9, v10);
      v12();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return (*(uint64_t (**)(void))(v3
                                               + OBJC_IVAR____TtC15ConversationKit17ScreeningCaptions_onUpdateCaptions))(MEMORY[0x1E4FBC860]);
    }
  }
  return result;
}

uint64_t ObjC metadata update function for ScreeningCaptions()
{
  return type metadata accessor for ScreeningCaptions();
}

uint64_t type metadata accessor for ScreeningCaptions()
{
  uint64_t result = type metadata singleton initialization cache for ScreeningCaptions;
  if (!type metadata singleton initialization cache for ScreeningCaptions) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ScreeningCaptions()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ScreeningCaptions(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreeningCaptions);
}

uint64_t dispatch thunk of ScreeningCaptions.__allocating_init(logger:onUpdateCaptions:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

void *initializeBufferWithCopyOfBuffer for ScreeningCaptions.CaptionData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ScreeningCaptions.CaptionData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ScreeningCaptions.CaptionData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreeningCaptions.CaptionData(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScreeningCaptions.CaptionData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for ScreeningCaptions.CaptionData(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ScreeningCaptions.CaptionData()
{
  return &type metadata for ScreeningCaptions.CaptionData;
}

uint64_t outlined init with take of TranscriptionViewModel.Caption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionViewModel.Caption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Participant.Caption(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Participant.Caption(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined destroy of TranscriptionViewModel.Caption?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GridViewConstraintManager.__allocating_init(containingGuide:containingView:gridView:rosterCellLayoutGuide:changeLayoutButton:topCornerButtonsStackView:captionsState:)(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v12 = swift_allocObject();
  GridViewConstraintManager.init(containingGuide:containingView:gridView:rosterCellLayoutGuide:changeLayoutButton:topCornerButtonsStackView:captionsState:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

void *GridViewConstraintManager.init(containingGuide:containingView:gridView:rosterCellLayoutGuide:changeLayoutButton:topCornerButtonsStackView:captionsState:)(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  type metadata accessor for GridViewConstraintManager();
  static GridViewConstraintManager.generateCornerButtonConstraints(containingGuide:containingView:gridView:changeLayoutButton:topCornerButtonsStackView:)(a1, a2, a3, a5, a6);
  uint64_t v80 = a6;
  uint64_t v81 = a5;
  if (a6)
  {
    id v11 = a6;
    id v12 = OUTLINED_FUNCTION_10_24();
    id v13 = objc_msgSend(v11, sel_bottomAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_5_47();
    if (!v14) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v15 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v16 + 488))();
    id v17 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v13, 22.5);
LABEL_9:
    id v20 = v17;

    goto LABEL_10;
  }
  if (a5)
  {
    id v11 = a5;
    id v12 = OUTLINED_FUNCTION_10_24();
    id v13 = objc_msgSend(v11, sel_bottomAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_5_47();
    if (!v14) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v18 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v19 + 488))();
    id v17 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v13, 10.0);
    goto LABEL_9;
  }
  id v13 = OUTLINED_FUNCTION_10_24();
  id v11 = objc_msgSend(a1, sel_topAnchor);
  id v20 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v11);
LABEL_10:

  v83[6] = v20;
  int v21 = static Platform.current.getter();
  id v22 = objc_msgSend(a3, sel_trailingAnchor);
  if (v21)
  {
    id v23 = objc_msgSend(a1, sel_trailingAnchor);
    id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);
  }
  else
  {
    id v23 = objc_msgSend(a4, sel_leadingAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_5_47();
    if (!v14) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v25 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v26 + 488))();
    id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v23, -16.0);
  }
  id v27 = v24;

  v83[7] = v27;
  id v28 = objc_msgSend(a4, sel_topAnchor);
  id v29 = objc_msgSend(a3, sel_bottomAnchor);
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_5_47();
  if (!v14) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v30 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v31 + 488))();
  id v32 = objc_msgSend(v28, sel_constraintEqualToAnchor_constant_, v29, 16.0);

  v83[8] = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v33 = OUTLINED_FUNCTION_12_6();
  *(_OWORD *)(v33 + 16) = xmmword_1C3769610;
  id v34 = objc_msgSend(a3, sel_leadingAnchor);
  id v35 = objc_msgSend(a1, sel_leadingAnchor);
  id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

  uint64_t v37 = (void *)v83[8];
  *(void *)(v33 + 32) = v36;
  *(void *)(v33 + 40) = v37;
  OUTLINED_FUNCTION_11_23();
  id v38 = v37;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  v83[2] = v84;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1C3769580;
  id v40 = objc_msgSend(a3, sel_topAnchor);
  id v41 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_topAnchor));

  *(void *)(v39 + 32) = v41;
  id v42 = objc_msgSend(a3, sel_leadingAnchor);
  id v43 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_leadingAnchor));

  *(void *)(v39 + 40) = v43;
  id v44 = objc_msgSend(a3, sel_trailingAnchor);
  id v45 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_trailingAnchor));

  *(void *)(v39 + 48) = v45;
  id v46 = objc_msgSend(a3, sel_bottomAnchor);
  id v47 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_bottomAnchor));

  *(void *)(v39 + 56) = v47;
  OUTLINED_FUNCTION_11_23();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  v83[4] = v84;
  if (static Platform.current.getter() == 3)
  {
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1C3769F40;
    id v49 = objc_msgSend(a3, sel_topAnchor);
    id v50 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_topAnchor));

    *(void *)(v48 + 32) = v50;
    id v51 = objc_msgSend(a3, sel_leadingAnchor);
    id v52 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_leadingAnchor));

    *(void *)(v48 + 40) = v52;
    id v53 = objc_msgSend(a3, sel_bottomAnchor);
    id v54 = OUTLINED_FUNCTION_1_13((uint64_t)objc_msgSend(a2, sel_bottomAnchor));

    *(void *)(v48 + 48) = v54;
    OUTLINED_FUNCTION_11_23();
    specialized Array.append<A>(contentsOf:)();
    uint64_t v55 = v84;
    unint64_t v56 = &selRef_ringButton;
  }
  else
  {
    uint64_t v57 = OUTLINED_FUNCTION_12_6();
    *(_OWORD *)(v57 + 16) = xmmword_1C3769610;
    id v58 = objc_msgSend(a3, sel_topAnchor);
    id v59 = objc_msgSend(a1, sel_topAnchor);
    id v60 = objc_msgSend(v58, sel_constraintEqualToAnchor_, v59);

    *(void *)(v57 + 32) = v60;
    id v61 = objc_msgSend(a4, sel_topAnchor);
    id v62 = objc_msgSend(a3, sel_bottomAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v63 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v64 + 488))();
    unint64_t v56 = &selRef_ringButton;
    id v65 = objc_msgSend(v61, sel_constraintEqualToAnchor_constant_, v62, 16.0);

    *(void *)(v57 + 40) = v65;
    uint64_t v84 = v57;
    specialized Array._endMutation()();
    specialized Array.append<A>(contentsOf:)();
    uint64_t v55 = v57;
  }
  v83[5] = v55;
  if (static Platform.current.getter() == 3)
  {
    uint64_t v66 = OUTLINED_FUNCTION_12_6();
    *(_OWORD *)(v66 + 16) = xmmword_1C3769610;
    id v67 = objc_msgSend(a3, sel_leadingAnchor);
    id v68 = objc_msgSend(a1, sel_leadingAnchor);
    id v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_, v68);
  }
  else
  {
    if (static Platform.current.getter() != 2)
    {
      uint64_t v73 = swift_allocObject();
      *(_OWORD *)(v73 + 16) = xmmword_1C3769830;
      id v74 = objc_msgSend(a4, sel_topAnchor);
      id v75 = objc_msgSend(a3, sel_bottomAnchor);
      static Layout.MediaPip.padding.getter();
      OUTLINED_FUNCTION_3_2();
      (*(void (**)(void))(v76 + 384))();
      static Platform.current.getter();
      OUTLINED_FUNCTION_3_2();
      (*(void (**)(void))(v77 + 488))();
      id v78 = objc_msgSend(v74, v56[291], v75, 16.0);

      *(void *)(v73 + 32) = v78;
      uint64_t v84 = v73;
      specialized Array._endMutation()();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();

      goto LABEL_26;
    }
    uint64_t v66 = OUTLINED_FUNCTION_12_6();
    *(_OWORD *)(v66 + 16) = xmmword_1C3769610;
    id v67 = objc_msgSend(a3, sel_trailingAnchor);
    id v68 = objc_msgSend(a1, sel_trailingAnchor);
    id v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_, v68);
  }
  id v70 = v69;

  uint64_t v71 = (void *)v83[8];
  *(void *)(v66 + 32) = v70;
  *(void *)(v66 + 40) = v71;
  OUTLINED_FUNCTION_11_23();
  swift_bridgeObjectRetain();
  id v72 = v71;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();

LABEL_26:
  swift_bridgeObjectRelease();
  v83[3] = v84;
  return v83;
}

uint64_t type metadata accessor for GridViewConstraintManager()
{
  return self;
}

uint64_t static GridViewConstraintManager.generateCornerButtonConstraints(containingGuide:containingView:gridView:changeLayoutButton:topCornerButtonsStackView:)(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a5;
  unint64_t v62 = MEMORY[0x1E4FBC860];
  if (a5)
  {
    id v9 = a5;
    id v10 = objc_msgSend(v9, sel_topAnchor);
    id v11 = objc_msgSend(a2, sel_topAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_5_47();
    if (!v12) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v13 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v14 + 488))();
    id v15 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v11, 10.0);

    id v16 = v15;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      OUTLINED_FUNCTION_6_3();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    id v17 = v9;
  }
  else
  {
    if (!a4) {
      return MEMORY[0x1E4FBC860];
    }
    id v19 = a4;
    id v20 = objc_msgSend(v19, sel_topAnchor);
    id v21 = OUTLINED_FUNCTION_10_24();
    id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

    id v23 = v22;
    uint64_t v24 = MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_6_37(v24, v25, v26, v27, v28, v29, v30, v31, v61, v62);
    if (v32)
    {
      OUTLINED_FUNCTION_9_29();
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    id v17 = v19;
    id v9 = 0;
    uint64_t v5 = a4;
  }
  id v33 = v9;
  if (static Platform.current.getter() == 3)
  {
    v63[0] = v62;
    swift_bridgeObjectRetain();
    id v34 = objc_msgSend(v17, sel_trailingAnchor);
    id v35 = objc_msgSend(a3, sel_trailingAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_5_47();
    if (!v12) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v36 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v37 + 488))();
    id v38 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, -10.0);

    id v39 = v38;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v63[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v63[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    id v40 = objc_msgSend(v17, sel_heightAnchor);
    id v41 = objc_msgSend(v40, sel_constraintEqualToConstant_, 0.0);

    LODWORD(v42) = 1132068864;
    objc_msgSend(v41, sel_setPriority_, v42);
    id v43 = objc_msgSend(v17, sel_trailingAnchor);
    id v44 = objc_msgSend(a2, sel_trailingAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v45 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v46 + 488))();
    id v47 = objc_msgSend(v43, sel_constraintEqualToAnchor_constant_, v44, -10.0);

    if (v62 >> 62)
    {
      id v60 = v41;
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v49 = v41;
    }
    if (__OFADD__(v48, 2))
    {
      __break(1u);
    }
    else
    {
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v48 + 2, 1);
      specialized Array._endMutation()();
      id v47 = v47;
      MEMORY[0x1C87733A0]();
      OUTLINED_FUNCTION_3_18();
      if (!v32)
      {
LABEL_20:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v50 = v41;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_3_18();
        if (v32) {
          OUTLINED_FUNCTION_6_3();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return v62;
      }
    }
    OUTLINED_FUNCTION_6_3();
    goto LABEL_20;
  }
  id v52 = objc_msgSend(v17, sel_trailingAnchor);
  id v53 = objc_msgSend(a1, sel_trailingAnchor);
  id v54 = objc_msgSend(v52, sel_constraintEqualToAnchor_, v53);

  id v55 = objc_msgSend(v17, sel_heightAnchor);
  Layout.LocalParticipantViewCameraControls.init()((uint64_t)v63);
  double v56 = *(double *)&v63[6];
  static Platform.current.getter();
  id v57 = objc_msgSend(v55, sel_constraintEqualToConstant_, v56);

  if (v62 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v58 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v58, 2))
  {
    __break(1u);
    goto LABEL_36;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v58 + 2, 1);
  specialized Array._endMutation()();
  id v54 = v54;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_18();
  if (v32) {
LABEL_36:
  }
    OUTLINED_FUNCTION_6_3();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v59 = v57;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_18();
  if (v32) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return swift_bridgeObjectRetain();
}

uint64_t GridViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 19);
  if ((*(unsigned char *)(a1 + 18) & 1) == 0)
  {
    if (v2 == 2) {
      uint64_t v7 = v1[5];
    }
    else {
      uint64_t v7 = v1[4];
    }
    swift_bridgeObjectRetain();
    return v7;
  }
  uint64_t v3 = (void *)v1[6];
  if (v2 == 2)
  {
    uint64_t v26 = v1[3];
    id v4 = v3;
    uint64_t v5 = swift_bridgeObjectRetain();
    MEMORY[0x1C87733A0](v5);
    OUTLINED_FUNCTION_7_34();
    if (v6) {
      OUTLINED_FUNCTION_6_3();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = v26;

    return v7;
  }
  unint64_t v8 = v1[2];
  id v9 = (void *)v1[7];
  uint64_t v27 = v8;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain_n();
    id v23 = v3;
    id v24 = v9;
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v11 = v3;
    id v12 = v9;
  }
  if (__OFADD__(v10, 2))
  {
    __break(1u);
    goto LABEL_20;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v10 + 2, 1);
  specialized Array._endMutation()();
  unint64_t v8 = v3;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_34();
  if (v6) {
LABEL_20:
  }
    OUTLINED_FUNCTION_6_3();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v13 = v9;
  uint64_t v14 = MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_6_37(v14, v15, v16, v17, v18, v19, v20, v21, v25, v27);
  if (v6)
  {
    OUTLINED_FUNCTION_9_29();
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v7 = v28;

  return v7;
}

id *GridViewConstraintManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t GridViewConstraintManager.__deallocating_deinit()
{
  GridViewConstraintManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance GridViewConstraintManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t method lookup function for GridViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GridViewConstraintManager);
}

uint64_t dispatch thunk of GridViewConstraintManager.__allocating_init(containingGuide:containingView:gridView:rosterCellLayoutGuide:changeLayoutButton:topCornerButtonsStackView:captionsState:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of GridViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t SharedContentViewModel.init(participant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_16_0();
  Participant.screenInfo.getter(v8);
  uint64_t v6 = v8[3];
  _s15ConversationKit11ParticipantVWOcTm_1(a1, v2, (void (*)(void))type metadata accessor for Participant);
  if (v6 == 1)
  {
    SharedContentViewModel.init(nonScreenInfoParticipant:)(v2, a2);
    return outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for Participant);
  }
  else
  {
    SharedContentViewModel.init(videoParticipant:)(v2, a2);
    outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for Participant);
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
  }
}

uint64_t SharedContentViewModel.participantIdentifier.getter()
{
  uint64_t v3 = v0;
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  uint64_t v5 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_1_15();
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)&v15 - v7;
  _s15ConversationKit11ParticipantVWOcTm_1(v3, v1, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    int v10 = *(_DWORD *)(v9 + 64);
    uint64_t v11 = v1 + *(int *)(v9 + 80);
    outlined init with take of SharedContentViewModel.ParticipantDetails(v1, v2);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v11);
  }
  else
  {
    int v10 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel))
                    + 64);
    outlined init with take of SharedContentViewModel.ParticipantDetails(v1, v2);
  }
  outlined destroy of SharedContentVideoView.ViewModel(v1 + v10);
  outlined init with take of SharedContentViewModel.ParticipantDetails(v2, (uint64_t)v8);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = OUTLINED_FUNCTION_89_0();
  v13(v12);
  return outlined destroy of Participant((uint64_t)v8, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
}

uint64_t SharedContentViewModel.screenTransform.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_60();
  _s15ConversationKit11ParticipantVWOcTm_1(v1, v1, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v5 = v1 + *(int *)(v4 + 80);
    memcpy(__dst, (const void *)(v1 + *(int *)(v4 + 64)), sizeof(__dst));
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v5);
  }
  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    memcpy(__dst, (const void *)(v1 + *(int *)(v6 + 64)), sizeof(__dst));
  }
  outlined destroy of Participant(v1, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
  memcpy(a1, &__dst[40], 0x80uLL);
  return outlined destroy of SharedContentVideoView.ViewModel((uint64_t)__dst);
}

uint64_t SharedContentViewModel.ParticipantDetails.init(participant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for Participant(0) + 20);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, v4);
  Participant.screenInfo.getter(v25);
  if (v26 == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    uint64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    char v7 = v29;
    if (v29) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v28;
    }
    outlined destroy of Participant.ScreenInfo((uint64_t)v25);
  }
  uint64_t v8 = String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v6, v7, 0xD000000000000018, 0x80000001C3797C20);
  int v10 = v9;
  id v11 = objc_msgSend(self, sel_conversationKit);
  v30._object = (void *)0xE000000000000000;
  v12._uint64_t countAndFlagsBits = v8;
  v12._object = v10;
  v13.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v13.value._object = (void *)0xEF74694B6E6F6974;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v30._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v30);
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C3769620;
  Participant.contactDetails.getter();
  uint64_t v16 = (void *)v25[0];
  uint64_t v17 = v26;
  uint64_t v18 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v18;
  uint64_t v19 = String.init(format:_:)();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for Participant);
  uint64_t result = OUTLINED_FUNCTION_12_25();
  id v24 = (uint64_t *)(a2 + v23);
  uint64_t *v24 = v19;
  v24[1] = v21;
  return result;
}

uint64_t SharedContentViewModel.ParticipantDetails.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t SharedContentViewModel.ParticipantDetails.identifier.setter(uint64_t a1)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*SharedContentViewModel.ParticipantDetails.identifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SharedContentViewModel.ParticipantDetails.screenShareDeviceName.getter()
{
  type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  OUTLINED_FUNCTION_7_35();
  return v0;
}

uint64_t SharedContentViewModel.ParticipantDetails.screenShareDeviceName.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_12_25();
  uint64_t v6 = (void *)(v2 + v5);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*SharedContentViewModel.ParticipantDetails.screenShareDeviceName.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SharedContentViewModel.init(videoParticipant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v10 - 8);
  Swift::String v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  _s15ConversationKit11ParticipantVWOcTm_1(a1, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
  SharedContentViewModel.ParticipantDetails.init(participant:)((uint64_t)v9, (uint64_t)v12);
  uint64_t v13 = Participant.deviceOrientation.getter();
  char v15 = v14;
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  Participant.screenProvider.getter((uint64_t)__src);
  if (*((void *)&__src[1] + 1))
  {
    if (v15) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v13;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    outlined init with take of Notice(__src, (uint64_t)v26);
    outlined init with copy of IDSLookupManager((uint64_t)v26, (uint64_t)v27);
    Participant.screenTransform.getter((CGFloat *)__src);
    outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for Participant);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    uint64_t v18 = a2 + *(int *)(v17 + 64);
    outlined init with take of ParticipantVideoProvider?((uint64_t)v27, v18);
    memcpy((void *)(v18 + 40), __src, 0x80uLL);
    uint64_t v19 = *(int *)(v17 + 48);
    outlined init with take of SharedContentViewModel.ParticipantDetails((uint64_t)v12, a2);
    *(void *)(a2 + v19) = v16;
    type metadata accessor for SharedContentViewModel(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v25 = static OS_os_log.conversationKit;
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1C3769620;
    _s15ConversationKit11ParticipantVWOcTm_1(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
    uint64_t v22 = specialized >> prefix<A>(_:)();
    uint64_t v24 = v23;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
    *(void *)(v21 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOcTm_1(a1, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    SharedContentViewModel.init(nonScreenInfoParticipant:)((uint64_t)v9, a2);
    outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    return outlined destroy of Participant((uint64_t)v12, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
  }
}

uint64_t SharedContentViewModel.init(nonScreenInfoParticipant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit11ParticipantVWOcTm_1(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
  SharedContentViewModel.ParticipantDetails.init(participant:)((uint64_t)v6, (uint64_t)v9);
  uint64_t v10 = Participant.deviceOrientation.getter();
  if (v11) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for Participant);
  uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
  uint64_t v14 = a2 + v13[16];
  outlined init with take of ParticipantVideoProvider?((uint64_t)v18, v14);
  memcpy((void *)(v14 + 40), MEMORY[0x1E4F39B10], 0x80uLL);
  uint64_t v15 = a2 + v13[20];
  *(void *)(v15 + 96) = 0;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(unsigned char *)(v15 + 104) = 6;
  uint64_t v16 = v13[12];
  outlined init with take of SharedContentViewModel.ParticipantDetails((uint64_t)v9, a2);
  *(void *)(a2 + v16) = v12;
  type metadata accessor for SharedContentViewModel(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t SharedContentViewModel.participantDetails.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_60();
  _s15ConversationKit11ParticipantVWOcTm_1(v1, v1, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    int v5 = *(_DWORD *)(v4 + 64);
    uint64_t v6 = v1 + *(int *)(v4 + 80);
    outlined init with take of SharedContentViewModel.ParticipantDetails(v1, a1);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v6);
  }
  else
  {
    int v5 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel))
                   + 64);
    outlined init with take of SharedContentViewModel.ParticipantDetails(v1, a1);
  }
  return outlined destroy of SharedContentVideoView.ViewModel(v1 + v5);
}

uint64_t type metadata accessor for SharedContentViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for SharedContentViewModel);
}

uint64_t type metadata accessor for SharedContentViewModel.ParticipantDetails(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, type metadata singleton initialization cache for SharedContentViewModel.ParticipantDetails);
}

uint64_t outlined init with take of SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ParticipantVideoOverlayView.ViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of SharedContentVideoView.ViewModel(uint64_t a1)
{
  return a1;
}

uint64_t SharedContentViewModel.deviceOrientation.getter()
{
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit11ParticipantVWOcTm_1(v0, (uint64_t)v3, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v5 = *(void *)&v3[v4[12]];
    int v6 = v4[16];
    outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)&v3[v4[20]]);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    uint64_t v5 = *(void *)&v3[*(int *)(v7 + 48)];
    int v6 = *(_DWORD *)(v7 + 64);
  }
  outlined destroy of SharedContentVideoView.ViewModel((uint64_t)&v3[v6]);
  outlined destroy of Participant((uint64_t)v3, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
  return v5;
}

uint64_t SharedContentViewModel.compatibleWithRoster.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  _s15ConversationKit11ParticipantVWOcTm_1(v1, v2, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    int v6 = *(_DWORD *)(v5 + 64);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v2 + *(int *)(v5 + 80));
  }
  else
  {
    int v6 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel))
                   + 64);
  }
  outlined destroy of SharedContentVideoView.ViewModel(v2 + v6);
  outlined destroy of Participant(v2, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
  return _s15ConversationKit11ParticipantVWOcTm_1(v1, a1, (void (*)(void))type metadata accessor for SharedContentViewModel);
}

uint64_t SharedContentViewModel.hash(into:)(uint64_t a1)
{
  type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_1_15();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v37[-v6 - 8];
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_60();
  _s15ConversationKit11ParticipantVWOcTm_1(v1, v1, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    Swift::UInt v19 = *(void *)(v1 + *(int *)(v18 + 48));
    uint64_t v20 = (const void *)(v1 + *(int *)(v18 + 64));
    outlined init with take of SharedContentViewModel.ParticipantDetails(v1, (uint64_t)v7);
    memcpy(v38, v20, sizeof(v38));
    Hasher._combine(_:)(0);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    dispatch thunk of Hashable.hash(into:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v19);
    outlined init with copy of ParticipantVideoProvider?((uint64_t)v38, (uint64_t)v39);
    if (v40)
    {
      __swift_project_boxed_opaque_existential_1(v39, v40);
      uint64_t v21 = OUTLINED_FUNCTION_5_48();
      Swift::UInt v23 = v22(v21);
      char v25 = v24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      if ((v25 & 1) == 0)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v23);
LABEL_13:
        OUTLINED_FUNCTION_8_30();
        CATransform3D.hash(into:)();
        double v31 = SharedContentVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v31, v32, v33, v34);
        outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v38);
        uint64_t v30 = (uint64_t)v7;
        return outlined destroy of Participant(v30, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
      }
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    }
    Hasher._combine(_:)(0);
    goto LABEL_13;
  }
  uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
  Swift::UInt v10 = *(void *)(v1 + v9[12]);
  char v11 = (const void *)(v1 + v9[16]);
  uint64_t v12 = v1 + v9[20];
  outlined init with take of SharedContentViewModel.ParticipantDetails(v1, v2);
  memcpy(v38, v11, sizeof(v38));
  outlined init with take of ParticipantVideoOverlayView.ViewModel(v12, (uint64_t)v37);
  Hasher._combine(_:)(1uLL);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v10);
  outlined init with copy of ParticipantVideoProvider?((uint64_t)v38, (uint64_t)v39);
  uint64_t v13 = v40;
  if (!v40)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    goto LABEL_9;
  }
  uint64_t v14 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  Swift::UInt v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  char v17 = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  if (v17)
  {
LABEL_9:
    Hasher._combine(_:)(0);
    goto LABEL_10;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v15);
LABEL_10:
  OUTLINED_FUNCTION_8_30();
  CATransform3D.hash(into:)();
  double v26 = SharedContentVideoView.ViewModel.contentsRect.getter();
  CGRect.hash(into:)(v26, v27, v28, v29);
  ParticipantVideoOverlayView.ViewModel.hash(into:)(a1);
  outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v37);
  outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v38);
  uint64_t v30 = v2;
  return outlined destroy of Participant(v30, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
}

uint64_t static SharedContentViewModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v91 = (uint64_t)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v88 - v8;
  type metadata accessor for SharedContentViewModel(0);
  OUTLINED_FUNCTION_0();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  Swift::UInt v15 = (char *)&v88 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel, SharedContentViewModel));
  MEMORY[0x1F4188790](v16 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v18 = v2 + *(int *)(v17 + 56);
  _s15ConversationKit11ParticipantVWOcTm_1(a1, v2, (void (*)(void))type metadata accessor for SharedContentViewModel);
  _s15ConversationKit11ParticipantVWOcTm_1(a2, v18, (void (*)(void))type metadata accessor for SharedContentViewModel);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v38 = v2;
    _s15ConversationKit11ParticipantVWOcTm_1(v2, (uint64_t)v15, (void (*)(void))type metadata accessor for SharedContentViewModel);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    uint64_t v40 = *(int *)(v39 + 48);
    uint64_t v41 = *(void *)&v15[v40];
    uint64_t v42 = *(int *)(v39 + 64);
    Swift::UInt v23 = &v15[v42];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = v15;
      goto LABEL_16;
    }
    uint64_t v43 = *(void *)(v18 + v40);
    id v44 = (const void *)(v18 + v42);
    uint64_t v45 = v18;
    uint64_t v46 = (uint64_t)v9;
    outlined init with take of SharedContentViewModel.ParticipantDetails(v45, (uint64_t)v9);
    memcpy(v95, v23, sizeof(v95));
    memcpy(v93, v44, sizeof(v93));
    if ((static UUID.== infix(_:_:)() & 1) != 0
      && ((OUTLINED_FUNCTION_9_30(), v31) ? (BOOL v49 = v47 == v48) : (BOOL v49 = 0),
          v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      outlined destroy of Participant((uint64_t)v15, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
      if (v41 == v43)
      {
        Hasher.init(_seed:)();
        outlined init with copy of ParticipantVideoProvider?((uint64_t)v95, (uint64_t)v99);
        if (v100)
        {
          uint64_t v50 = OUTLINED_FUNCTION_4_44();
          Swift::UInt v52 = v51(v50);
          char v54 = v53;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
          if ((v54 & 1) == 0)
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v52);
            goto LABEL_38;
          }
        }
        else
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
        }
        Hasher._combine(_:)(0);
LABEL_38:
        OUTLINED_FUNCTION_13_20();
        CATransform3D.hash(into:)();
        double v67 = SharedContentVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v67, v68, v69, v70);
        Swift::Int v71 = Hasher._finalize()();
        Hasher.init(_seed:)();
        outlined init with copy of ParticipantVideoProvider?((uint64_t)v93, (uint64_t)v96);
        uint64_t v72 = v97;
        if (v97)
        {
          uint64_t v73 = v98;
          __swift_project_boxed_opaque_existential_1(v96, v97);
          Swift::UInt v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v72, v73);
          char v76 = v75;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          if ((v76 & 1) == 0)
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v74);
LABEL_51:
            OUTLINED_FUNCTION_10_25();
            CATransform3D.hash(into:)();
            double v84 = SharedContentVideoView.ViewModel.contentsRect.getter();
            CGRect.hash(into:)(v84, v85, v86, v87);
            char v81 = v71 == Hasher._finalize()();
            outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v93);
            outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v95);
            outlined destroy of Participant(v46, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
            uint64_t v82 = v38;
            goto LABEL_52;
          }
        }
        else
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
        }
        Hasher._combine(_:)(0);
        goto LABEL_51;
      }
      outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v93);
      outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v95);
      uint64_t v56 = (uint64_t)v9;
    }
    else
    {
      outlined destroy of Participant((uint64_t)v15, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
      outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v93);
      outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v95);
      uint64_t v56 = (uint64_t)v9;
    }
    outlined destroy of Participant(v56, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
    uint64_t v55 = v38;
    goto LABEL_46;
  }
  uint64_t v89 = v2;
  _s15ConversationKit11ParticipantVWOcTm_1(v2, (uint64_t)v13, (void (*)(void))type metadata accessor for SharedContentViewModel);
  Swift::UInt v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
  uint64_t v20 = v19[12];
  uint64_t v21 = *(void *)&v13[v20];
  uint64_t v22 = v19[16];
  Swift::UInt v23 = &v13[v22];
  uint64_t v24 = v19[20];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v88 = *(void *)(v18 + v20);
    char v25 = (const void *)(v18 + v22);
    uint64_t v26 = v18 + v24;
    uint64_t v27 = v18;
    uint64_t v28 = v91;
    outlined init with take of SharedContentViewModel.ParticipantDetails(v27, v91);
    memcpy(v95, &v13[v22], sizeof(v95));
    outlined init with take of ParticipantVideoOverlayView.ViewModel((uint64_t)&v13[v24], (uint64_t)v94);
    memcpy(v93, v25, sizeof(v93));
    outlined init with take of ParticipantVideoOverlayView.ViewModel(v26, (uint64_t)v92);
    if (static UUID.== infix(_:_:)())
    {
      OUTLINED_FUNCTION_9_30();
      BOOL v31 = v31 && v29 == v30;
      if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        outlined destroy of Participant((uint64_t)v13, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
        uint64_t v32 = v89;
        if (v21 != v88)
        {
LABEL_45:
          outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v92);
          outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v93);
          outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v94);
          outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v95);
          outlined destroy of Participant(v28, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
          uint64_t v55 = v32;
          goto LABEL_46;
        }
        Hasher.init(_seed:)();
        outlined init with copy of ParticipantVideoProvider?((uint64_t)v95, (uint64_t)v99);
        if (v100)
        {
          uint64_t v33 = OUTLINED_FUNCTION_4_44();
          Swift::UInt v35 = v34(v33);
          char v37 = v36;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
          if ((v37 & 1) == 0)
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v35);
            goto LABEL_33;
          }
        }
        else
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
        }
        Hasher._combine(_:)(0);
LABEL_33:
        OUTLINED_FUNCTION_13_20();
        CATransform3D.hash(into:)();
        double v57 = SharedContentVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v57, v58, v59, v60);
        Swift::Int v61 = Hasher._finalize()();
        Hasher.init(_seed:)();
        outlined init with copy of ParticipantVideoProvider?((uint64_t)v93, (uint64_t)v96);
        if (v97)
        {
          __swift_project_boxed_opaque_existential_1(v96, v97);
          uint64_t v62 = OUTLINED_FUNCTION_5_48();
          Swift::UInt v64 = v63(v62);
          char v66 = v65;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          if ((v66 & 1) == 0)
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v64);
            goto LABEL_43;
          }
        }
        else
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
        }
        Hasher._combine(_:)(0);
LABEL_43:
        OUTLINED_FUNCTION_10_25();
        CATransform3D.hash(into:)();
        double v77 = SharedContentVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v77, v78, v79, v80);
        if (v61 == Hasher._finalize()())
        {
          char v81 = static ParticipantVideoOverlayView.ViewModel.== infix(_:_:)((uint64_t)v94, (uint64_t)v92);
          outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v92);
          outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v93);
          outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v94);
          outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v95);
          outlined destroy of Participant(v28, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
          uint64_t v82 = v32;
LABEL_52:
          outlined destroy of Participant(v82, (void (*)(void))type metadata accessor for SharedContentViewModel);
          return v81 & 1;
        }
        goto LABEL_45;
      }
    }
    outlined destroy of Participant((uint64_t)v13, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
    outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v92);
    outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v93);
    outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v94);
    outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v95);
    outlined destroy of Participant(v28, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
    uint64_t v55 = v89;
LABEL_46:
    outlined destroy of Participant(v55, (void (*)(void))type metadata accessor for SharedContentViewModel);
    goto LABEL_47;
  }
  outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)&v13[v24]);
  uint64_t v38 = v89;
LABEL_16:
  outlined destroy of SharedContentVideoView.ViewModel((uint64_t)v23);
  outlined destroy of Participant((uint64_t)v13, (void (*)(void))type metadata accessor for SharedContentViewModel.ParticipantDetails);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for (SharedContentViewModel, SharedContentViewModel));
LABEL_47:
  char v81 = 0;
  return v81 & 1;
}

uint64_t static SharedContentViewModel.ParticipantDetails.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_12_25();
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1]) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int SharedContentViewModel.hashValue.getter()
{
  Hasher.init(_seed:)();
  SharedContentViewModel.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharedContentViewModel()
{
  Hasher.init(_seed:)();
  SharedContentViewModel.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t SharedContentViewModel.ParticipantDetails.hash(into:)()
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int SharedContentViewModel.ParticipantDetails.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SharedContentViewModel.ParticipantDetails()
{
  return Hasher._finalize()();
}

uint64_t outlined init with take of ParticipantVideoOverlayView.ViewModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of ParticipantVideoProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void CGRect.hash(into:)(double a1, double a2, double a3, double a4)
{
  CGRect v7 = CGRectStandardize(*(CGRect *)&a1);
  CGFloat y = v7.origin.y;
  CGFloat width = v7.size.width;
  CGFloat height = v7.size.height;
  OUTLINED_FUNCTION_0_15(*(Swift::UInt64 *)&v7.origin.x);
  OUTLINED_FUNCTION_0_15(*(Swift::UInt64 *)&y);
  OUTLINED_FUNCTION_0_15(*(Swift::UInt64 *)&width);
  OUTLINED_FUNCTION_0_15(*(Swift::UInt64 *)&height);
}

uint64_t base witness table accessor for Equatable in SharedContentViewModel()
{
  return lazy protocol witness table accessor for type SharedContentViewModel and conformance SharedContentViewModel(&lazy protocol witness table cache variable for type SharedContentViewModel and conformance SharedContentViewModel, (void (*)(uint64_t))type metadata accessor for SharedContentViewModel);
}

uint64_t base witness table accessor for Equatable in SharedContentViewModel.ParticipantDetails()
{
  return lazy protocol witness table accessor for type SharedContentViewModel and conformance SharedContentViewModel(&lazy protocol witness table cache variable for type SharedContentViewModel.ParticipantDetails and conformance SharedContentViewModel.ParticipantDetails, (void (*)(uint64_t))type metadata accessor for SharedContentViewModel.ParticipantDetails);
}

uint64_t lazy protocol witness table accessor for type SharedContentViewModel and conformance SharedContentViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SharedContentViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for SharedContentViewModel.ParticipantDetails(0) + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      *(uint64_t *)((char *)a1 + v12[12]) = *(uint64_t *)((char *)a2 + v12[12]);
      uint64_t v13 = v12[16];
      uint64_t v14 = (char *)a1 + v13;
      Swift::UInt v15 = (char *)a2 + v13;
      uint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 24);
      if (v16)
      {
        uint64_t v17 = *((void *)v15 + 4);
        *((void *)v14 + 3) = v16;
        *((void *)v14 + 4) = v17;
        (**(void (***)(char *, char *))(v16 - 8))(v14, v15);
      }
      else
      {
        long long v25 = *((_OWORD *)v15 + 1);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v25;
        *((void *)v14 + 4) = *((void *)v15 + 4);
      }
      memcpy(v14 + 40, v15 + 40, 0x80uLL);
      uint64_t v26 = v12[20];
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      switch(v28[104])
      {
        case 1:
          long long v29 = *(_OWORD *)(v28 + 24);
          *(_OWORD *)(v27 + 24) = v29;
          (**(void (***)(void *, unsigned char *))(v29 - 8))(v27, v28);
          uint64_t v30 = *((void *)v28 + 6);
          *((void *)v27 + 5) = *((void *)v28 + 5);
          *((void *)v27 + 6) = v30;
          v27[104] = 1;
          swift_bridgeObjectRetain();
          break;
        case 2:
          uint64_t v32 = *((void *)v28 + 1);
          *(void *)uint64_t v27 = *(void *)v28;
          *((void *)v27 + 1) = v32;
          uint64_t v33 = (void *)*((void *)v28 + 3);
          *((void *)v27 + 2) = *((void *)v28 + 2);
          *((void *)v27 + 3) = v33;
          *((_WORD *)v27 + 16) = *((_WORD *)v28 + 16);
          *((void *)v27 + 5) = *((void *)v28 + 5);
          v27[48] = v28[48];
          double v34 = (void *)*((void *)v28 + 7);
          *((void *)v27 + 7) = v34;
          v27[104] = 2;
          swift_bridgeObjectRetain();
          id v35 = v33;
          goto LABEL_16;
        case 3:
          uint64_t v36 = *((void *)v28 + 1);
          *(void *)uint64_t v27 = *(void *)v28;
          *((void *)v27 + 1) = v36;
          char v37 = (void *)*((void *)v28 + 3);
          *((void *)v27 + 2) = *((void *)v28 + 2);
          *((void *)v27 + 3) = v37;
          *((_WORD *)v27 + 16) = *((_WORD *)v28 + 16);
          *((void *)v27 + 5) = *((void *)v28 + 5);
          v27[48] = v28[48];
          uint64_t v39 = (void *)*((void *)v28 + 7);
          uint64_t v38 = *((void *)v28 + 8);
          *((void *)v27 + 7) = v39;
          *((void *)v27 + 8) = v38;
          uint64_t v40 = *((void *)v28 + 9);
          double v34 = (void *)*((void *)v28 + 10);
          *((void *)v27 + 9) = v40;
          *((void *)v27 + 10) = v34;
          v27[104] = 3;
          swift_bridgeObjectRetain();
          id v41 = v37;
          id v42 = v39;
          swift_bridgeObjectRetain();
LABEL_16:
          id v43 = v34;
          break;
        case 4:
          id v44 = *(void **)v28;
          uint64_t v45 = *((void *)v28 + 1);
          *(void *)uint64_t v27 = *(void *)v28;
          *((void *)v27 + 1) = v45;
          uint64_t v46 = *((void *)v28 + 3);
          *((void *)v27 + 2) = *((void *)v28 + 2);
          *((void *)v27 + 3) = v46;
          uint64_t v47 = *((void *)v28 + 5);
          *((void *)v27 + 4) = *((void *)v28 + 4);
          *((void *)v27 + 5) = v47;
          uint64_t v48 = *((void *)v28 + 7);
          *((void *)v27 + 6) = *((void *)v28 + 6);
          *((void *)v27 + 7) = v48;
          v27[64] = v28[64];
          v27[65] = v28[65];
          uint64_t v49 = *((void *)v28 + 10);
          id v50 = v44;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v49)
          {
            *((void *)v27 + 9) = *((void *)v28 + 9);
            *((void *)v27 + 10) = v49;
            uint64_t v51 = *((void *)v28 + 11);
            uint64_t v52 = *((void *)v28 + 12);
            *((void *)v27 + 11) = v51;
            *((void *)v27 + 12) = v52;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v55 = *(_OWORD *)(v28 + 88);
            *(_OWORD *)(v27 + 72) = *(_OWORD *)(v28 + 72);
            *(_OWORD *)(v27 + 88) = v55;
          }
          v27[104] = 4;
          break;
        case 5:
          char v53 = *(void **)v28;
          *(void *)uint64_t v27 = *(void *)v28;
          v27[104] = 5;
          id v54 = v53;
          break;
        default:
          memcpy(v27, v28, 0x69uLL);
          break;
      }
    }
    else
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
      *(uint64_t *)((char *)a1 + *(int *)(v19 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v19 + 48));
      uint64_t v20 = *(int *)(v19 + 64);
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = *((void *)v22 + 3);
      if (v23)
      {
        uint64_t v24 = *((void *)v22 + 4);
        *((void *)v21 + 3) = v23;
        *((void *)v21 + 4) = v24;
        (**(void (***)(char *, char *))(v23 - 8))(v21, v22);
      }
      else
      {
        long long v31 = *((_OWORD *)v22 + 1);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v31;
        *((void *)v21 + 4) = *((void *)v22 + 4);
      }
      memcpy(v21 + 40, v22 + 40, 0x80uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for SharedContentViewModel(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v5 = a1 + *(int *)(v4 + 64);
    if (*(void *)(v5 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(v5);
    }
    uint64_t v6 = a1 + *(int *)(v4 + 80);
    switch(*(unsigned char *)(v6 + 104))
    {
      case 1:
        __swift_destroy_boxed_opaque_existential_1(v6);
        goto LABEL_14;
      case 2:
        swift_bridgeObjectRelease();

        id v8 = *(id *)(v6 + 56);
        goto LABEL_19;
      case 3:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        id v8 = *(id *)(v6 + 80);
        goto LABEL_19;
      case 4:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v6 + 80))
        {
          swift_bridgeObjectRelease();
LABEL_14:
          swift_bridgeObjectRelease();
        }
        return;
      case 5:
        id v8 = *(id *)v6;
LABEL_19:

        break;
      default:
        return;
    }
  }
  else
  {
    uint64_t v7 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel))
                + 64);
    if (*(void *)(v7 + 24))
    {
      __swift_destroy_boxed_opaque_existential_1(v7);
    }
  }
}

uint64_t initializeWithCopy for SharedContentViewModel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  uint64_t v6 = *(int *)(type metadata accessor for SharedContentViewModel.ParticipantDetails(0) + 20);
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (void *)(a2 + v6);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_bridgeObjectRetain();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    *(void *)(a1 + v10[12]) = *(void *)(a2 + v10[12]);
    uint64_t v11 = v10[16];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = *(void *)(a2 + v11 + 24);
    if (v14)
    {
      uint64_t v15 = *(void *)(v13 + 32);
      *(void *)(v12 + 24) = v14;
      *(void *)(v12 + 32) = v15;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v12, v13);
    }
    else
    {
      long long v22 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v22;
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
    }
    memcpy((void *)(v12 + 40), (const void *)(v13 + 40), 0x80uLL);
    uint64_t v23 = v10[20];
    uint64_t v24 = (char *)(a1 + v23);
    long long v25 = (unsigned char *)(a2 + v23);
    switch(v25[104])
    {
      case 1:
        long long v26 = *(_OWORD *)(v25 + 24);
        *(_OWORD *)(v24 + 24) = v26;
        (**(void (***)(void *, unsigned char *))(v26 - 8))(v24, v25);
        uint64_t v27 = *((void *)v25 + 6);
        *((void *)v24 + 5) = *((void *)v25 + 5);
        *((void *)v24 + 6) = v27;
        v24[104] = 1;
        swift_bridgeObjectRetain();
        break;
      case 2:
        uint64_t v29 = *((void *)v25 + 1);
        *(void *)uint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = v29;
        uint64_t v30 = (void *)*((void *)v25 + 3);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = v30;
        *((_WORD *)v24 + 16) = *((_WORD *)v25 + 16);
        *((void *)v24 + 5) = *((void *)v25 + 5);
        v24[48] = v25[48];
        long long v31 = (void *)*((void *)v25 + 7);
        *((void *)v24 + 7) = v31;
        v24[104] = 2;
        swift_bridgeObjectRetain();
        id v32 = v30;
        goto LABEL_14;
      case 3:
        uint64_t v33 = *((void *)v25 + 1);
        *(void *)uint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = v33;
        double v34 = (void *)*((void *)v25 + 3);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = v34;
        *((_WORD *)v24 + 16) = *((_WORD *)v25 + 16);
        *((void *)v24 + 5) = *((void *)v25 + 5);
        v24[48] = v25[48];
        uint64_t v36 = (void *)*((void *)v25 + 7);
        uint64_t v35 = *((void *)v25 + 8);
        *((void *)v24 + 7) = v36;
        *((void *)v24 + 8) = v35;
        uint64_t v37 = *((void *)v25 + 9);
        long long v31 = (void *)*((void *)v25 + 10);
        *((void *)v24 + 9) = v37;
        *((void *)v24 + 10) = v31;
        v24[104] = 3;
        swift_bridgeObjectRetain();
        id v38 = v34;
        id v39 = v36;
        swift_bridgeObjectRetain();
LABEL_14:
        id v40 = v31;
        break;
      case 4:
        id v41 = *(void **)v25;
        uint64_t v42 = *((void *)v25 + 1);
        *(void *)uint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = v42;
        uint64_t v43 = *((void *)v25 + 3);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = v43;
        uint64_t v44 = *((void *)v25 + 5);
        *((void *)v24 + 4) = *((void *)v25 + 4);
        *((void *)v24 + 5) = v44;
        uint64_t v45 = *((void *)v25 + 7);
        *((void *)v24 + 6) = *((void *)v25 + 6);
        *((void *)v24 + 7) = v45;
        v24[64] = v25[64];
        v24[65] = v25[65];
        uint64_t v46 = *((void *)v25 + 10);
        id v47 = v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v46)
        {
          *((void *)v24 + 9) = *((void *)v25 + 9);
          *((void *)v24 + 10) = v46;
          uint64_t v48 = *((void *)v25 + 11);
          uint64_t v49 = *((void *)v25 + 12);
          *((void *)v24 + 11) = v48;
          *((void *)v24 + 12) = v49;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v52 = *(_OWORD *)(v25 + 88);
          *(_OWORD *)(v24 + 72) = *(_OWORD *)(v25 + 72);
          *(_OWORD *)(v24 + 88) = v52;
        }
        v24[104] = 4;
        break;
      case 5:
        id v50 = *(void **)v25;
        *(void *)uint64_t v24 = *(void *)v25;
        v24[104] = 5;
        id v51 = v50;
        break;
      default:
        memcpy(v24, v25, 0x69uLL);
        break;
    }
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    *(void *)(a1 + *(int *)(v16 + 48)) = *(void *)(a2 + *(int *)(v16 + 48));
    uint64_t v17 = *(int *)(v16 + 64);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    uint64_t v20 = *(void *)(v19 + 24);
    if (v20)
    {
      uint64_t v21 = *(void *)(v19 + 32);
      *(void *)(v18 + 24) = v20;
      *(void *)(v18 + 32) = v21;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v18, v19);
    }
    else
    {
      long long v28 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v28;
      *(void *)(v18 + 32) = *(void *)(v19 + 32);
    }
    memcpy((void *)(v18 + 40), (const void *)(v19 + 40), 0x80uLL);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for SharedContentViewModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for SharedContentViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = *(int *)(type metadata accessor for SharedContentViewModel.ParticipantDetails(0) + 20);
    uint64_t v7 = (void *)(a1 + v6);
    id v8 = (void *)(a2 + v6);
    *uint64_t v7 = *v8;
    v7[1] = v8[1];
    swift_bridgeObjectRetain();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      *(void *)(a1 + v9[12]) = *(void *)(a2 + v9[12]);
      uint64_t v10 = v9[16];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = (long long *)(a2 + v10);
      uint64_t v13 = *(void *)(a2 + v10 + 24);
      if (v13)
      {
        *(void *)(v11 + 24) = v13;
        *(void *)(v11 + 32) = *((void *)v12 + 4);
        (**(void (***)(uint64_t, long long *))(v13 - 8))(v11, v12);
      }
      else
      {
        long long v19 = *v12;
        long long v20 = v12[1];
        *(void *)(v11 + 32) = *((void *)v12 + 4);
        *(_OWORD *)uint64_t v11 = v19;
        *(_OWORD *)(v11 + 16) = v20;
      }
      memcpy((void *)(v11 + 40), (char *)v12 + 40, 0x80uLL);
      uint64_t v21 = v9[20];
      long long v22 = (char *)(a1 + v21);
      uint64_t v23 = (unsigned char *)(a2 + v21);
      switch(v23[104])
      {
        case 1:
          uint64_t v24 = *((void *)v23 + 3);
          *((void *)v22 + 3) = v24;
          *((void *)v22 + 4) = *((void *)v23 + 4);
          (**(void (***)(void *, unsigned char *))(v24 - 8))(v22, v23);
          *((void *)v22 + 5) = *((void *)v23 + 5);
          *((void *)v22 + 6) = *((void *)v23 + 6);
          v22[104] = 1;
          swift_bridgeObjectRetain();
          break;
        case 2:
          *(void *)long long v22 = *(void *)v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          *((void *)v22 + 2) = *((void *)v23 + 2);
          uint64_t v27 = (void *)*((void *)v23 + 3);
          *((void *)v22 + 3) = v27;
          v22[32] = v23[32];
          v22[33] = v23[33];
          uint64_t v28 = *((void *)v23 + 5);
          v22[48] = v23[48];
          *((void *)v22 + 5) = v28;
          uint64_t v29 = (void *)*((void *)v23 + 7);
          *((void *)v22 + 7) = v29;
          v22[104] = 2;
          swift_bridgeObjectRetain();
          id v30 = v27;
          goto LABEL_15;
        case 3:
          *(void *)long long v22 = *(void *)v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          *((void *)v22 + 2) = *((void *)v23 + 2);
          long long v31 = (void *)*((void *)v23 + 3);
          *((void *)v22 + 3) = v31;
          v22[32] = v23[32];
          v22[33] = v23[33];
          uint64_t v32 = *((void *)v23 + 5);
          v22[48] = v23[48];
          *((void *)v22 + 5) = v32;
          uint64_t v33 = (void *)*((void *)v23 + 7);
          *((void *)v22 + 7) = v33;
          *((void *)v22 + 8) = *((void *)v23 + 8);
          *((void *)v22 + 9) = *((void *)v23 + 9);
          uint64_t v29 = (void *)*((void *)v23 + 10);
          *((void *)v22 + 10) = v29;
          v22[104] = 3;
          swift_bridgeObjectRetain();
          id v34 = v31;
          id v35 = v33;
          swift_bridgeObjectRetain();
LABEL_15:
          id v36 = v29;
          break;
        case 4:
          uint64_t v37 = *(void **)v23;
          *(void *)long long v22 = *(void *)v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          *((void *)v22 + 2) = *((void *)v23 + 2);
          *((void *)v22 + 3) = *((void *)v23 + 3);
          *((void *)v22 + 4) = *((void *)v23 + 4);
          *((void *)v22 + 5) = *((void *)v23 + 5);
          *((void *)v22 + 6) = *((void *)v23 + 6);
          *((void *)v22 + 7) = *((void *)v23 + 7);
          v22[64] = v23[64];
          v22[65] = v23[65];
          uint64_t v38 = *((void *)v23 + 10);
          id v39 = v37;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v38)
          {
            *((void *)v22 + 9) = *((void *)v23 + 9);
            *((void *)v22 + 10) = *((void *)v23 + 10);
            *((void *)v22 + 11) = *((void *)v23 + 11);
            *((void *)v22 + 12) = *((void *)v23 + 12);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v42 = *(_OWORD *)(v23 + 88);
            *(_OWORD *)(v22 + 72) = *(_OWORD *)(v23 + 72);
            *(_OWORD *)(v22 + 88) = v42;
          }
          v22[104] = 4;
          break;
        case 5:
          id v40 = *(void **)v23;
          *(void *)long long v22 = *(void *)v23;
          v22[104] = 5;
          id v41 = v40;
          break;
        default:
          memcpy(v22, v23, 0x69uLL);
          break;
      }
    }
    else
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
      *(void *)(a1 + *(int *)(v14 + 48)) = *(void *)(a2 + *(int *)(v14 + 48));
      uint64_t v15 = *(int *)(v14 + 64);
      uint64_t v16 = a1 + v15;
      uint64_t v17 = (long long *)(a2 + v15);
      uint64_t v18 = *((void *)v17 + 3);
      if (v18)
      {
        *(void *)(v16 + 24) = v18;
        *(void *)(v16 + 32) = *((void *)v17 + 4);
        (**(void (***)(uint64_t, long long *))(v18 - 8))(v16, v17);
      }
      else
      {
        long long v25 = *v17;
        long long v26 = v17[1];
        *(void *)(v16 + 32) = *((void *)v17 + 4);
        *(_OWORD *)uint64_t v16 = v25;
        *(_OWORD *)(v16 + 16) = v26;
      }
      memcpy((void *)(v16 + 40), (char *)v17 + 40, 0x80uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for SharedContentViewModel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  uint64_t v6 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
  *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
    memcpy((void *)(a1 + v7[16]), (const void *)(a2 + v7[16]), 0xA8uLL);
    memcpy((void *)(a1 + v7[20]), (const void *)(a2 + v7[20]), 0x69uLL);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
    *(void *)(a1 + *(int *)(v8 + 48)) = *(void *)(a2 + *(int *)(v8 + 48));
    memcpy((void *)(a1 + *(int *)(v8 + 64)), (const void *)(a2 + *(int *)(v8 + 64)), 0xA8uLL);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for SharedContentViewModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Participant(a1, (void (*)(void))type metadata accessor for SharedContentViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for SharedContentViewModel.ParticipantDetails(0);
    *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
      memcpy((void *)(a1 + v7[16]), (const void *)(a2 + v7[16]), 0xA8uLL);
      memcpy((void *)(a1 + v7[20]), (const void *)(a2 + v7[20]), 0x69uLL);
    }
    else
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SharedContentViewModel.ParticipantDetails, CNKDeviceOrientation, SharedContentVideoView.ViewModel));
      *(void *)(a1 + *(int *)(v8 + 48)) = *(void *)(a2 + *(int *)(v8 + 48));
      memcpy((void *)(a1 + *(int *)(v8 + 64)), (const void *)(a2 + *(int *)(v8 + 64)), 0xA8uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for SharedContentViewModel()
{
  uint64_t result = type metadata accessor for SharedContentViewModel.ParticipantDetails(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v4 = &v3;
    swift_getTupleTypeLayout();
    uint64_t v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SharedContentViewModel.ParticipantDetails(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SharedContentViewModel.ParticipantDetails(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C30B74F0);
}

uint64_t sub_1C30B74F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SharedContentViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C30B7594);
}

void sub_1C30B7594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for SharedContentViewModel.ParticipantDetails()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of ParticipantVideoProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double SystemRootLayerProxyView.preferredContentSize.getter()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1 && (uint64_t v2 = v1, v3 = objc_msgSend(v1, sel_windowScene), v2, v3))
  {
    id v4 = objc_msgSend(v3, sel_screen);
    objc_msgSend(v4, sel_bounds);
    double v6 = v5;
  }
  else
  {
    id v3 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v3, sel_bounds);
    double v6 = v7;
  }

  return v6;
}

uint64_t SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCallDebouncer.setter(uint64_t a1)
{
  *(void *)(v1
            + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_updateSystemRootLayerTransformOnActiveCallDebouncer) = a1;
  return swift_release();
}

uint64_t SystemRootLayerProxyView.systemRootLayerTransform.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform];
  long long v3 = *(_OWORD *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform
                    + 16];
  long long v30 = *(_OWORD *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform];
  long long v31 = v3;
  long long v32 = *(_OWORD *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform
                     + 32];
  uint64_t result = static CGAffineTransform.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    double v5 = SystemRootLayerProxyView.displayCornerView.getter();
    long long v6 = *((_OWORD *)v2 + 1);
    void v23[6] = *(_OWORD *)v2;
    v23[7] = v6;
    v23[8] = *((_OWORD *)v2 + 2);
    uint64_t v24 = 0x3FF0000000000000;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0x3FF0000000000000;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    objc_msgSend(v5, sel_setHidden_, static CGAffineTransform.== infix(_:_:)() & 1);

    id v7 = objc_msgSend(v1, sel_window);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, sel_windowScene);

      if (v9)
      {
        long long v10 = *((_OWORD *)v2 + 1);
        v23[3] = *(_OWORD *)v2;
        v23[4] = v10;
        v23[5] = *((_OWORD *)v2 + 2);
        id v11 = objc_msgSend(self, sel_mainScreen);
        objc_msgSend(v11, sel__rotation);
        double v13 = v12;

        CGAffineTransform.rotatingTranslationComponent(by:)(v14, v15, v16, v17, v18, v19, v20, v21, v23, -v13);
        v22[0] = v23[0];
        v22[1] = v23[1];
        v22[2] = v23[2];
        objc_msgSend(v9, sel_setSBSUI_preferredSystemRootLayerTransform_, v22);
      }
    }
    return SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall()();
  }
  return result;
}

uint64_t SystemRootLayerProxyView.systemRootLayerTransform.setter(_OWORD *a1)
{
  uint64_t v2 = (_OWORD *)(v1
                + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform);
  long long v3 = a1[1];
  *uint64_t v2 = *a1;
  v2[1] = v3;
  v2[2] = a1[2];
  return SystemRootLayerProxyView.systemRootLayerTransform.didset();
}

uint64_t SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.setter(char a1)
{
  v1[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_needsUpdateSystemRootLayerTransform] = a1;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  long long v3 = v1;
  onNextMainRunLoop(do:)((uint64_t)partial apply for closure #1 in SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.didset, v2);
  return swift_release();
}

void *SystemRootLayerProxyView.displayCornerView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView____lazy_storage___displayCornerView;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView____lazy_storage___displayCornerView);
  if (v2)
  {
    long long v3 = *(void **)(v0
                    + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView____lazy_storage___displayCornerView);
  }
  else
  {
    uint64_t v4 = v0;
    type metadata accessor for ShapeView();
    double v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    id v6 = objc_msgSend(self, sel_blackColor);
    id v7 = objc_msgSend(v6, sel_CGColor);

    uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x60))(v7);
    (*(void (**)(id))((*v8 & *v5) + 0x78))((id)*MEMORY[0x1E4F39FB8]);
    objc_msgSend(v5, sel_setHidden_, 1);
    objc_msgSend(v5, sel_setUserInteractionEnabled_, 0);
    id v9 = objc_msgSend(v5, sel_layer);
    objc_msgSend(v9, sel_setAllowsHitTesting_, 0);

    id v10 = objc_msgSend(v5, sel_layer);
    objc_msgSend(v10, sel_setDisableUpdateMask_, 32);

    id v11 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v5;
    long long v3 = v5;

    uint64_t v2 = 0;
  }
  id v12 = v2;
  return v3;
}

id SystemRootLayerProxyView.init()()
{
  *(_OWORD *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_updateSystemRootLayerTransformOnActiveCallDebounceDelay] = xmmword_1C376F030;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_updateSystemRootLayerTransformOnActiveCallDebouncer] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform];
  *uint64_t v1 = 0x3FF0000000000000;
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = 0x3FF0000000000000;
  v1[4] = 0;
  v1[5] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_needsUpdateSystemRootLayerTransform] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView____lazy_storage___displayCornerView] = 0;
  uint64_t v2 = v0;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v3 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_subscriptions] = v3;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for SystemRootLayerProxyView();
  id v4 = objc_msgSendSuper2(&v7, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  double v5 = SystemRootLayerProxyView.displayCornerView.getter();
  objc_msgSend(v4, sel_addSubview_, v5);

  return v4;
}

void SystemRootLayerProxyView.init(coder:)()
{
  *(_OWORD *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_updateSystemRootLayerTransformOnActiveCallDebounceDelay] = xmmword_1C376F030;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_updateSystemRootLayerTransformOnActiveCallDebouncer] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform];
  *uint64_t v1 = 0x3FF0000000000000;
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = 0x3FF0000000000000;
  v1[4] = 0;
  v1[5] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_needsUpdateSystemRootLayerTransform] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView____lazy_storage___displayCornerView] = 0;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v2 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_subscriptions] = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<UIView, CGAffineTransform> and conformance NSObject.KeyValueObservingPublisher<A, B>(a4, a3);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

void specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    id v4 = (void *)v3;
    SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.setter(1);
  }
}

{
  specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(a2);
}

{
  specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(a2);
}

void specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.setter(1);
  }
}

id SystemRootLayerProxyView.registerForGeometryChanges()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_subscriptions];
  swift_beginAccess();
  *(void *)uint64_t v1 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(KeyPath, (uint64_t)v0, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGRect>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGRect> and conformance NSObject.KeyValueObservingPublisher<A, B>);
  swift_release();
  uint64_t v3 = swift_getKeyPath();
  specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(v3, (uint64_t)v0, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGPoint>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>);
  swift_release();
  id v4 = objc_msgSend(v0, sel_superview);
  if (v4)
  {
    double v5 = v4;
    uint64_t v6 = swift_getKeyPath();
    specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(v6, (uint64_t)v5, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGRect>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGRect> and conformance NSObject.KeyValueObservingPublisher<A, B>);
    swift_release();
    uint64_t v7 = swift_getKeyPath();
    specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(v7, (uint64_t)v5, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGPoint>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>);

    swift_release();
  }
  id result = objc_msgSend(v0, sel_window);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = swift_getKeyPath();
    specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(v10, (uint64_t)v9, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGRect>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGRect> and conformance NSObject.KeyValueObservingPublisher<A, B>);
    swift_release();
    uint64_t v11 = swift_getKeyPath();
    specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(v11, (uint64_t)v9, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGPoint>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>);
    swift_release();
    uint64_t v12 = swift_getKeyPath();
    specialized SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(v12, (uint64_t)v9, &demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UIView, CGAffineTransform>, &lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UIView, CGAffineTransform> and conformance NSObject.KeyValueObservingPublisher<A, B>);

    return (id)swift_release();
  }
  return result;
}

id key path setter for UIView.frame : UIView(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFrame_, *a1, a1[1], a1[2], a1[3]);
}

double key path getter for UIView.transform : UIView@<D0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  objc_msgSend(*a1, sel_transform);
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

id key path setter for UIView.transform : UIView(_OWORD *a1, void **a2)
{
  uint64_t v2 = *a2;
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  void v5[2] = a1[2];
  return objc_msgSend(v2, sel_setTransform_, v5);
}

id SystemRootLayerProxyView.didMoveToSuperview()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemRootLayerProxyView();
  objc_msgSendSuper2(&v2, sel_didMoveToSuperview);
  SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.setter(1);
  return SystemRootLayerProxyView.registerForGeometryChanges()();
}

void SystemRootLayerProxyView.layoutSubviews()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for SystemRootLayerProxyView();
  objc_msgSendSuper2(&v6, sel_layoutSubviews);
  uint64_t v1 = SystemRootLayerProxyView.displayCornerView.getter();
  double v2 = SystemRootLayerProxyView.preferredContentSize.getter();
  objc_msgSend(v1, sel_setBounds_, 0.0, 0.0, v2, v3);

  long long v4 = SystemRootLayerProxyView.displayCornerView.getter();
  objc_msgSend(v0, sel_bounds);
  double MidX = CGRectGetMidX(v7);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v4, sel_setCenter_, MidX, CGRectGetMidY(v8));

  SystemRootLayerProxyView.updateDisplayCornerView()();
  SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.setter(1);
  SystemRootLayerProxyView.updateSystemRootLayerTransformIfNeeded()();
}

void SystemRootLayerProxyView.updateDisplayCornerView()()
{
  uint64_t v1 = v0;
  double v2 = SystemRootLayerProxyView.displayCornerView.getter();
  objc_msgSend(v2, sel_bounds);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  id v11 = objc_msgSend(v1, sel_traitCollection);
  objc_msgSend(v11, sel_displayCornerRadius);

  CGMutablePathRef Mutable = CGPathCreateMutable();
  v18.origin.x = v4;
  v18.origin.CGFloat y = v6;
  v18.size.CGFloat width = v8;
  v18.size.CGFloat height = v10;
  CGRect v19 = CGRectInset(v18, -200.0, -200.0);
  transform.a = 1.0;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = 1.0;
  transform.tx = 0.0;
  transform.tCGFloat y = 0.0;
  CGMutablePathRef.addRect(_:transform:)((__C::CGRect)v19, &transform);
  CGPathAddContinuousRoundedRect();
  uint64_t v15 = SystemRootLayerProxyView.displayCornerView.getter();
  uint64_t v13 = *(void (**)(CGMutablePathRef))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x90);
  uint64_t v14 = Mutable;
  v13(Mutable);
}

void SystemRootLayerProxyView.updateSystemRootLayerTransformIfNeeded()()
{
  if (*(unsigned char *)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_needsUpdateSystemRootLayerTransform) == 1)
  {
    SystemRootLayerProxyView.updateSystemRootLayerTransform()();
    SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.setter(0);
  }
}

void SystemRootLayerProxyView.updateSystemRootLayerTransform()()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    id v27 = v1;
    objc_msgSend(v0, sel_bounds);
    double v3 = v2;
    objc_msgSend(v0, sel_bounds);
    double v5 = v3 / v4;
    id v6 = objc_msgSend(v27, sel_screen);
    objc_msgSend(v6, sel_scale);
    double v8 = v7;

    double v9 = SystemRootLayerProxyView.preferredContentSize.getter();
    SystemRootLayerProxyView.preferredContentSize.getter();
    if (vabdd_f64(v5, v9 / v10) >= 0.01)
    {
    }
    else
    {
      id v11 = objc_msgSend(v27, sel_screen);
      id v12 = objc_msgSend(v11, sel_fixedCoordinateSpace);

      objc_msgSend(v12, sel_bounds);
      double MidX = CGRectGetMidX(v32);
      objc_msgSend(v12, sel_bounds);
      double MidY = CGRectGetMidY(v33);
      objc_msgSend(v0, sel_bounds);
      double v15 = CGRectGetMidX(v34);
      objc_msgSend(v0, sel_bounds);
      objc_msgSend(v0, sel_convertPoint_toCoordinateSpace_, v12, v15, CGRectGetMidY(v35));
      double v17 = v16;
      double v19 = v18;
      objc_msgSend(v0, sel_bounds);
      double v21 = v20 / SystemRootLayerProxyView.preferredContentSize.getter();
      objc_msgSend(v0, sel_bounds);
      double v23 = v22;
      SystemRootLayerProxyView.preferredContentSize.getter();
      if (v21 > v23 / v24) {
        double v25 = v21;
      }
      else {
        double v25 = v23 / v24;
      }
      v30.a = 1.0;
      v30.b = 0.0;
      v30.c = 0.0;
      v30.d = 1.0;
      v30.tx = 0.0;
      v30.tCGFloat y = 0.0;
      if (fabs(v25 + -1.0) >= 0.01)
      {
        CGAffineTransformTranslate(&v29, &v30, v8 * (v17 - MidX), v8 * (v19 - MidY));
        CGAffineTransform v30 = v29;
        CGAffineTransformScale(&v29, &v30, v25, v25);
        CGAffineTransform v30 = v29;
      }
      SystemRootLayerProxyView.systemRootLayerTransform.setter(&v30);
      uint64_t v26 = SystemRootLayerProxyView.displayCornerView.getter();
      v29.a = 1.0;
      v29.b = 0.0;
      v29.c = 0.0;
      v29.d = 1.0;
      v29.tx = 0.0;
      v29.tCGFloat y = 0.0;
      CGAffineTransformScale(&v28, &v29, v25, v25);
      CGAffineTransform v29 = v28;
      objc_msgSend(v26, sel_setTransform_, &v29);

      swift_unknownObjectRelease();
    }
  }
}

void SystemRootLayerProxyView._updateSystemRootLayerTransformOnActiveCall()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for sharedMonitor != -1) {
    swift_once();
  }
  double v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingStateMonitor.sharedMonitor)
                                        + 0x128))();
  if (v2)
  {
    double v19 = v2;
    id v3 = [v2 screenShareAttributes];
    if (v3)
    {
      double v4 = v3;
      long long v17 = *(_OWORD *)(v1
                      + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform
                      + 16);
      long long v18 = *(_OWORD *)(v1
                      + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform);
      uint64_t v5 = *(void *)(v1
                     + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform
                     + 32);
      uint64_t v6 = *(void *)(v1
                     + OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_systemRootLayerTransform
                     + 40);
      double v7 = self;
      id v8 = v4;
      v20[0] = v18;
      v20[1] = v17;
      uint64_t v21 = v5;
      uint64_t v22 = v6;
      id v9 = objc_msgSend(v7, sel_valueWithCGAffineTransform_, v20);
      objc_msgSend(v8, sel_setSystemRootLayerTransform_, v9);

      [v19 setScreenShareAttributes:v8];
      return;
    }
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.screenSharing);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      double v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v16 = 0;
      _os_log_impl(&dword_1C2F90000, v14, v15, "Could not find current screen share attributes", v16, 2u);
      MEMORY[0x1C87760E0](v16, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.screenSharing);
    double v19 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1C2F90000, v19, v11, "Could not find active call to send updated screen share details", v12, 2u);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }
  }
}

uint64_t SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_F76A9C58291D108FF33107E36997693224SystemRootLayerProxyView_updateSystemRootLayerTransformOnActiveCallDebouncer];
  if (v4)
  {
    swift_retain();
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1C8773690](v4, MEMORY[0x1E4FBC848] + 8, v5, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v6 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v6);
  type metadata accessor for MainActor();
  double v7 = v0;
  uint64_t v8 = static MainActor.shared.getter();
  id v9 = (void *)swift_allocObject();
  uint64_t v10 = MEMORY[0x1E4FBCFD8];
  void v9[2] = v8;
  v9[3] = v10;
  v9[4] = v7;
  uint64_t v11 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall(), (uint64_t)v9);
  return SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCallDebouncer.setter(v11);
}

uint64_t closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  _OWORD v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v7;
  v4[8] = v6;
  return MEMORY[0x1F4188298](closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall(), v7, v6);
}

uint64_t closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall()()
{
  ContinuousClock.init()();
  id v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                             + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *v1;
  id v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v8 = closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall();
  }
  else {
    uint64_t v8 = closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall();
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  SystemRootLayerProxyView._updateSystemRootLayerTransformOnActiveCall()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void SystemRootLayerProxyView.init(frame:)()
{
}

id SystemRootLayerProxyView.__deallocating_deinit()
{
  return SystemRootLayerProxyView.__deallocating_deinit(0, type metadata accessor for SystemRootLayerProxyView);
}

id SystemRootLayerProxyViewController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *SystemRootLayerProxyViewController.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_windowSceneOrientationSubscription] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_orientationTraitSubscription] = 0;
  id v1 = objc_allocWithZone((Class)type metadata accessor for SystemRootLayerProxyView());
  uint64_t v2 = v0;
  id v3 = objc_msgSend(v1, sel_init);
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_systemRootLayerProxyView] = v3;

  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for SystemRootLayerProxyViewController();
  id v4 = objc_msgSendSuper2(&v16, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = self;
  id v12 = (char *)v4;
  id v13 = objc_msgSend(v11, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher();
  uint64_t v14 = Publisher<>.sink(receiveValue:)();
  swift_release();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_windowSceneOrientationSubscription] = v14;
  swift_release();
  return v12;
}

uint64_t type metadata accessor for SystemRootLayerProxyView()
{
  return self;
}

uint64_t type metadata accessor for SystemRootLayerProxyViewController()
{
  return self;
}

uint64_t sub_1C30B95F4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in SystemRootLayerProxyViewController.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  id v3 = (void *)MEMORY[0x1C8776240](v2);
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v3, sel_setPreferredContentSize_, SystemRootLayerProxyView.preferredContentSize.getter());
  }
}

void partial apply for closure #1 in SystemRootLayerProxyViewController.init()(uint64_t a1)
{
  closure #1 in SystemRootLayerProxyViewController.init()(a1, v1);
}

id SystemRootLayerProxyViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemRootLayerProxyViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_windowSceneOrientationSubscription] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_orientationTraitSubscription] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall SystemRootLayerProxyViewController.loadView()()
{
  objc_msgSend(v0, sel_setView_, *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_systemRootLayerProxyView]);
}

Swift::Void __swiftcall SystemRootLayerProxyViewController.viewDidLoad()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for SystemRootLayerProxyViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  objc_msgSend(v0, sel_setPreferredContentSize_, SystemRootLayerProxyView.preferredContentSize.getter());
}

Swift::Void __swiftcall SystemRootLayerProxyViewController.viewDidMove(to:shouldAppearOrDisappear:)(UIWindow_optional *to, Swift::Bool shouldAppearOrDisappear)
{
  id v3 = v2;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SystemRootLayerProxyViewController();
  [(UIWindow_optional *)&v6 viewDidMoveToWindow:to shouldAppearOrDisappear:shouldAppearOrDisappear];
  objc_msgSend(v3, sel_setPreferredContentSize_, SystemRootLayerProxyView.preferredContentSize.getter());
}

void SystemRootLayerProxyViewController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for SystemRootLayerProxyViewController();
  objc_msgSendSuper2(&v11, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  v10[4] = partial apply for closure #1 in SystemRootLayerProxyViewController.viewWillTransition(to:with:);
  v10[5] = v7;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v10[3] = &block_descriptor_18;
  uint64_t v8 = _Block_copy(v10);
  id v9 = v3;
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, 0, v8);
  _Block_release(v8);
}

uint64_t sub_1C30B9AA8()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in SystemRootLayerProxyViewController.viewWillTransition(to:with:)()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC15ConversationKit34SystemRootLayerProxyViewController_systemRootLayerProxyView), sel_setNeedsLayout);
}

Swift::Bool __swiftcall SystemRootLayerProxyViewController._canShowWhileLocked()()
{
  return 1;
}

id SystemRootLayerProxyViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    objc_super v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void SystemRootLayerProxyViewController.init(nibName:bundle:)()
{
}

id SystemRootLayerProxyViewController.__deallocating_deinit(uint64_t a1)
{
  return SystemRootLayerProxyView.__deallocating_deinit(a1, type metadata accessor for SystemRootLayerProxyViewController);
}

id SystemRootLayerProxyView.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

id SystemRootLayerProxy.makeUIViewController(context:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for SystemRootLayerProxyViewController());
  return objc_msgSend(v0, sel_init);
}

unint64_t lazy protocol witness table accessor for type SystemRootLayerProxy and conformance SystemRootLayerProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemRootLayerProxy and conformance SystemRootLayerProxy;
  if (!lazy protocol witness table cache variable for type SystemRootLayerProxy and conformance SystemRootLayerProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemRootLayerProxy and conformance SystemRootLayerProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemRootLayerProxy and conformance SystemRootLayerProxy;
  if (!lazy protocol witness table cache variable for type SystemRootLayerProxy and conformance SystemRootLayerProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemRootLayerProxy and conformance SystemRootLayerProxy);
  }
  return result;
}

uint64_t protocol witness for UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:) in conformance SystemRootLayerProxy()
{
  return MEMORY[0x1F40FAB00]();
}

uint64_t protocol witness for static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:) in conformance SystemRootLayerProxy()
{
  return MEMORY[0x1F40FAB08]();
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance SystemRootLayerProxy()
{
  return MEMORY[0x1F40FAB80]();
}

uint64_t protocol witness for UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:) in conformance SystemRootLayerProxy()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance SystemRootLayerProxy()
{
  return MEMORY[0x1F40FAB48]();
}

uint64_t protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance SystemRootLayerProxy()
{
  return MEMORY[0x1F40FAB38]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SystemRootLayerProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type SystemRootLayerProxy and conformance SystemRootLayerProxy();
  return MEMORY[0x1F40FAB70](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SystemRootLayerProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type SystemRootLayerProxy and conformance SystemRootLayerProxy();
  return MEMORY[0x1F40FAB28](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance SystemRootLayerProxy()
{
}

uint64_t method lookup function for SystemRootLayerProxyViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemRootLayerProxyViewController);
}

ValueMetadata *type metadata accessor for SystemRootLayerProxy()
{
  return &type metadata for SystemRootLayerProxy;
}

uint64_t sub_1C30B9EF8()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in SystemRootLayerProxyView.updateSystemRootLayerTransformOnActiveCall()(a1, v4, v5, v6);
}

char *keypath_get_selector_frame()
{
  return sel_frame;
}

id sub_1C30B9FF8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_frame);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

char *keypath_get_selector_center()
{
  return sel_center;
}

id sub_1C30BA040@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_center);
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_1C30BA074(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCenter_, *a1, a1[1]);
}

char *keypath_get_selector_transform()
{
  return sel_transform;
}

void specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[1];
  v3[0] = *a1;
  v3[1] = v2;
  v3[2] = a1[2];
  specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)((uint64_t)v3, a2);
}

void partial apply for specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(_OWORD *a1)
{
  specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(a1, v1);
}

void partial apply for specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(uint64_t a1)
{
  specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(a1, v1);
}

{
  uint64_t v1;

  specialized closure #1 in SystemRootLayerProxyView.registerForPropertyChangesOf<A>(_:on:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<UIView, CGAffineTransform> and conformance NSObject.KeyValueObservingPublisher<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in SystemRootLayerProxyView.needsUpdateSystemRootLayerTransform.didset()
{
}

double Participant.screenTransform.getter@<D0>(CGFloat *a1@<X8>)
{
  Participant.screenInfo.getter(v30);
  if (*(void *)(v1 + *(int *)(type metadata accessor for Participant(0) + 28)))
  {
    outlined init with copy of FeatureEligibility?((uint64_t)v30, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    if (v27 == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      CGFloat m12 = *(double *)(MEMORY[0x1E4F39B10] + 8);
      CGFloat m11 = *MEMORY[0x1E4F39B10];
      CGFloat m14 = *(double *)(MEMORY[0x1E4F39B10] + 24);
      CGFloat m13 = *(double *)(MEMORY[0x1E4F39B10] + 16);
      CGFloat m22 = *(double *)(MEMORY[0x1E4F39B10] + 40);
      CGFloat m21 = *(double *)(MEMORY[0x1E4F39B10] + 32);
      CGFloat m31 = *(double *)(MEMORY[0x1E4F39B10] + 64);
      double m24 = *(double *)(MEMORY[0x1E4F39B10] + 56);
      CGFloat m23 = *(double *)(MEMORY[0x1E4F39B10] + 48);
      uint64_t v2 = *(void *)(MEMORY[0x1E4F39B10] + 72);
      uint64_t v3 = *(void *)(MEMORY[0x1E4F39B10] + 80);
      uint64_t v4 = *(void *)(MEMORY[0x1E4F39B10] + 88);
      uint64_t v5 = *(void *)(MEMORY[0x1E4F39B10] + 96);
      uint64_t v6 = *(void *)(MEMORY[0x1E4F39B10] + 104);
      uint64_t v7 = *(void *)(MEMORY[0x1E4F39B10] + 112);
      uint64_t v8 = *(void *)(MEMORY[0x1E4F39B10] + 120);
    }
    else
    {
      unint64_t v12 = v29;
      outlined destroy of Participant.ScreenInfo((uint64_t)v26);
      static Participant.screenRotationFor(_:)(v12);
      CATransform3DMakeRotation(&v31, v13, 0.0, 0.0, 1.0);
      CGFloat m12 = v31.m12;
      CGFloat m11 = v31.m11;
      CGFloat m14 = v31.m14;
      CGFloat m13 = v31.m13;
      CGFloat m22 = v31.m22;
      CGFloat m21 = v31.m21;
      CGFloat m31 = v31.m31;
      double m24 = v31.m24;
      CGFloat m23 = v31.m23;
      OUTLINED_FUNCTION_22_15();
    }
  }
  else
  {
    outlined init with copy of FeatureEligibility?((uint64_t)v30, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    if (v27 == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = v28;
      outlined destroy of Participant.ScreenInfo((uint64_t)v26);
    }
    id v14 = objc_msgSend(self, sel_currentDevice);
    id v15 = objc_msgSend(v14, sel_userInterfaceIdiom);

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v16 = static Defaults.shared;
    swift_retain();
    specialized static Participant.transformForLocalParticipant(deviceOrientation:cameraType:currentIdiom:defaults:)(*(CGFloat *)&v11, 2, (unint64_t)v15, v16, &v31.m11);
    CGFloat m12 = v31.m12;
    CGFloat m11 = v31.m11;
    CGFloat m14 = v31.m14;
    CGFloat m13 = v31.m13;
    CGFloat m22 = v31.m22;
    CGFloat m21 = v31.m21;
    CGFloat m31 = v31.m31;
    double m24 = v31.m24;
    CGFloat m23 = v31.m23;
    OUTLINED_FUNCTION_22_15();
    swift_release();
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
  *a1 = m11;
  a1[1] = m12;
  a1[2] = m13;
  a1[3] = m14;
  a1[4] = m21;
  a1[5] = m22;
  double result = m24;
  a1[6] = m23;
  a1[7] = m24;
  a1[8] = m31;
  *((void *)a1 + 9) = v2;
  *((void *)a1 + 10) = v3;
  *((void *)a1 + 11) = v4;
  *((void *)a1 + 12) = v5;
  *((void *)a1 + 13) = v6;
  *((void *)a1 + 14) = v7;
  *((void *)a1 + 15) = v8;
  return result;
}

uint64_t ParticipantViewModel.ParticipantDetails.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t ParticipantViewModel.ParticipantDetails.identifier.setter(uint64_t a1)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*ParticipantViewModel.ParticipantDetails.identifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ParticipantViewModel.ParticipantDetails.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.displayName.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.isMomentsAvailable.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 24));
}

uint64_t ParticipantViewModel.ParticipantDetails.isMomentsAvailable.setter()
{
  uint64_t result = OUTLINED_FUNCTION_16_7();
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v0;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.isMomentsAvailable.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.isLocal.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 28));
}

uint64_t ParticipantViewModel.ParticipantDetails.isLocal.setter()
{
  uint64_t result = OUTLINED_FUNCTION_16_7();
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v0;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.isLocal.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.isKickingAvailable.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 32));
}

uint64_t ParticipantViewModel.ParticipantDetails.isKickingAvailable.setter()
{
  uint64_t result = OUTLINED_FUNCTION_16_7();
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v0;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.isKickingAvailable.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.isMostActive.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 36));
}

uint64_t ParticipantViewModel.ParticipantDetails.isMostActive.setter()
{
  uint64_t result = OUTLINED_FUNCTION_16_7();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = v0;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.isMostActive.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.isPreviewingReaction.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 40));
}

uint64_t ParticipantViewModel.ParticipantDetails.isPreviewingReaction.setter()
{
  uint64_t result = OUTLINED_FUNCTION_16_7();
  *(unsigned char *)(v1 + *(int *)(result + 40)) = v0;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.isPreviewingReaction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewModel.ParticipantDetails.isCameraMixedWithScreen.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewModel.ParticipantDetails(0) + 44));
}

uint64_t ParticipantViewModel.ParticipantDetails.isCameraMixedWithScreen.setter()
{
  uint64_t result = OUTLINED_FUNCTION_16_7();
  *(unsigned char *)(v1 + *(int *)(result + 44)) = v0;
  return result;
}

uint64_t (*ParticipantViewModel.ParticipantDetails.isCameraMixedWithScreen.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)()
{
  OUTLINED_FUNCTION_31();
  int v31 = v1;
  int v32 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_36();
  uint64_t v12 = v10 - v11;
  MEMORY[0x1F4188790](v13);
  id v15 = (char *)&v31 - v14;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = OUTLINED_FUNCTION_89_0();
  v17(v16);
  Participant.contactDetails.getter();
  long long v18 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  double v23 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  double v24 = (void *)(v7 + v23[5]);
  void *v24 = v20;
  v24[1] = v22;
  LODWORD(v20) = *(unsigned __int8 *)(v5 + *(int *)(v8 + 24));
  _s15ConversationKit11ParticipantVWOcTm_2(v5, (uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
  if (v20 == 1) {
    char v25 = Participant.hasReducedQualityVideo.getter() ^ 1;
  }
  else {
    char v25 = 0;
  }
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
  *(unsigned char *)(v7 + v23[6]) = v25 & 1;
  *(unsigned char *)(v7 + v23[7]) = *(void *)(v5 + *(int *)(v8 + 28)) == 0;
  Participant.isKickingAvailable.getter();
  char v27 = v26;
  _s15ConversationKit11ParticipantVWOcTm_2(v5, v12, (void (*)(void))type metadata accessor for Participant);
  char v28 = 0;
  if (v27 & 1) != 0 && (v31) {
    char v28 = Participant.canShowKickButtonOnVideoTile.getter();
  }
  _s15ConversationKit11ParticipantVWOhTm_0(v12, (void (*)(void))type metadata accessor for Participant);
  *(unsigned char *)(v7 + v23[8]) = v28 & 1;
  *(unsigned char *)(v7 + v23[9]) = v3 & 1;
  *(unsigned char *)(v7 + v23[10]) = v32 & 1;
  Participant.videoInfo.getter();
  _s15ConversationKit11ParticipantVWOhTm_0(v5, (void (*)(void))type metadata accessor for Participant);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v33, (uint64_t)&v34, &demangling cache variable for type metadata for Participant.VideoInfo?);
  char v29 = (char)v34;
  if (v34)
  {
    char v30 = v35;
    outlined release of LinearGradient((uint64_t)v33);
    char v29 = v30 & 1;
  }
  *(unsigned char *)(v7 + v23[11]) = v29;
  OUTLINED_FUNCTION_28();
}

void ParticipantViewModel.init(participant:videoProviderType:isInGrid:isMostActive:isPipped:isPreviewingReaction:hasOtherInvitedParticipants:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:snapshotImage:allowsVideoCroppedByAspectRatio:shouldRegisterVideoLayers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21,void *a22,unsigned __int8 a23,unsigned __int8 a24)
{
  OUTLINED_FUNCTION_31();
  int v188 = v24;
  int v189 = v25;
  int v182 = v26;
  int v186 = v27;
  int v187 = v28;
  uint64_t v30 = v29;
  uint64_t v190 = v31;
  int v185 = a24;
  int v183 = a23;
  id v191 = a22;
  int v184 = a21;
  uint64_t v32 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_36();
  uint64_t v36 = v34 - v35;
  uint64_t v38 = MEMORY[0x1F4188790](v37);
  id v40 = &v177[-v39];
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v43 = &v177[-v42];
  MEMORY[0x1F4188790](v41);
  uint64_t v192 = &v177[-v44];
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Participant.State, Participant.VideoInfo?));
  uint64_t v46 = v45 - 8;
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_21();
  uint64_t v49 = v48 - v47;
  Participant.videoInfo.getter();
  uint64_t v50 = v49 + *(int *)(v46 + 56);
  _s15ConversationKit11ParticipantVWOcTm_2(v30, v49, (void (*)(void))type metadata accessor for Participant.State);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v195, v50, &demangling cache variable for type metadata for Participant.VideoInfo?);
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
    case 5u:
      outlined release of LinearGradient((uint64_t)v195);
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      uint64_t v52 = (*(uint64_t (**)(uint64_t))(v51 + 8))(v49);
      goto LABEL_14;
    case 3u:
      uint64_t v58 = outlined release of LinearGradient((uint64_t)v195);
      OUTLINED_FUNCTION_4_45(v58, v59, (void (*)(void))type metadata accessor for Participant);
      uint64_t v60 = OUTLINED_FUNCTION_13_21();
      ParticipantViewModel.init(ringingParticipant:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:)(v60, v61);
      goto LABEL_5;
    case 4u:
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v63 = v49 + *(int *)(v62 + 48);
      outlined consume of Participant.CopresenceInfo?(*(void *)(v49 + *(int *)(v62 + 64)), *(void *)(v49 + *(int *)(v62 + 64) + 8));
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v195, (uint64_t)&v198, &demangling cache variable for type metadata for Participant.VideoInfo?);
      if (v198)
      {
        uint64_t v181 = v63;
        char v64 = v199;
        int v178 = v201;
        int v179 = v202;
        int v180 = v200;
        char v65 = v203;
        if (Participant.isReceivingVideoFrames.getter() & 1) != 0 && (v65)
        {
          uint64_t v66 = outlined release of LinearGradient((uint64_t)v195);
          OUTLINED_FUNCTION_4_45(v66, v67, (void (*)(void))type metadata accessor for Participant);
          uint64_t v68 = OUTLINED_FUNCTION_13_21();
          char v70 = 0;
LABEL_10:
          ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)(v68, v70, v69);
LABEL_11:

LABEL_12:
          _s15ConversationKit11ParticipantVWOhTm_0(v30, (void (*)(void))type metadata accessor for Participant);
          uint64_t v71 = v181;
          goto LABEL_16;
        }
        char v79 = Participant.isReceivingVideoFrames.getter();
        _s15ConversationKit11ParticipantVWOcTm_2(v30, (uint64_t)v43, (void (*)(void))type metadata accessor for Participant);
        if (v79)
        {
          char v80 = Participant.isVideoPaused.getter();
          _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v43, (void (*)(void))type metadata accessor for Participant);
          if (v80)
          {
            uint64_t v81 = outlined release of LinearGradient((uint64_t)v195);
            OUTLINED_FUNCTION_4_45(v81, v82, (void (*)(void))type metadata accessor for Participant);
            if ((v187 & 1) == 0)
            {
              v193[3] = &type metadata for ImageNames.ParticipantView;
              v193[4] = &protocol witness table for ImageNames.ParticipantView;
              LOBYTE(v193[0]) = 8;
              OUTLINED_FUNCTION_3_56();
              uint64_t v132 = OUTLINED_FUNCTION_13_21();
              ParticipantViewModel.init(videoParticipant:videoProviderType:overlayImageName:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:labelString:)(v132, v133, v134, v135, v136, v137, v138, 0, v139, 0);
              goto LABEL_11;
            }
            uint64_t v68 = OUTLINED_FUNCTION_13_21();
            char v70 = 1;
            goto LABEL_10;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v43, (void (*)(void))type metadata accessor for Participant);
        }
        char v83 = Participant.isReceivingVideoFrames.getter();
        _s15ConversationKit11ParticipantVWOcTm_2(v30, (uint64_t)v40, (void (*)(void))type metadata accessor for Participant);
        if (v83)
        {
          char v84 = Participant.isVideoSuspended.getter();
          _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v40, (void (*)(void))type metadata accessor for Participant);
          if (v84)
          {
            uint64_t v85 = outlined release of LinearGradient((uint64_t)v195);
            OUTLINED_FUNCTION_4_45(v85, v86, (void (*)(void))type metadata accessor for Participant);
            uint64_t v87 = OUTLINED_FUNCTION_7_36();
            ParticipantViewModel.init(monogramVideoParticipant:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:)(v87, v88, v89, v90, v91, v92, v93);
            goto LABEL_11;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v40, (void (*)(void))type metadata accessor for Participant);
        }
        if (Participant.isReceivingVideoFrames.getter() & 1) != 0 && (v64)
        {
          uint64_t v94 = outlined release of LinearGradient((uint64_t)v195);
          OUTLINED_FUNCTION_4_45(v94, v95, (void (*)(void))type metadata accessor for Participant);
          uint64_t v96 = OUTLINED_FUNCTION_7_36();
          ParticipantViewModel.init(reconnectingVideoParticipant:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:)(v96, v97, v98, v99, v100, v101, v102);
          goto LABEL_11;
        }
        char v103 = Participant.isReceivingVideoFrames.getter();
        _s15ConversationKit11ParticipantVWOcTm_2(v30, v36, (void (*)(void))type metadata accessor for Participant);
        if (v103)
        {
          int v104 = Participant.videoDegradedState.getter();
          _s15ConversationKit11ParticipantVWOhTm_0(v36, (void (*)(void))type metadata accessor for Participant);
          if (v104)
          {
            outlined release of LinearGradient((uint64_t)v195);
            Participant.videoInfo.getter();
            outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v196, (uint64_t)v197, &demangling cache variable for type metadata for Participant.VideoInfo?);
            id v105 = v191;
            unint64_t v106 = v192;
            if (v197[0]
              && ((memcpy(v193, v197, 0x4AuLL),
                   outlined release of LinearGradient((uint64_t)v196),
                   outlined init with take of AspectRatio((uint64_t)&v193[5], (uint64_t)v204),
                   outlined init with take of AspectRatio((uint64_t)v204, (uint64_t)v211),
                   (v212 & 1) != 0)
               || (v211[0] == 1.0 ? (BOOL v107 = v211[1] == 1.0) : (BOOL v107 = 0), v107))
              && ((outlined init with take of AspectRatio((uint64_t)v204, (uint64_t)v209), (v210 & 1) != 0)
               || (v209[2] == 1.0 ? (BOOL v108 = v209[3] == 1.0) : (BOOL v108 = 0), v108)))
            {
              uint64_t v116 = 0;
              uint64_t v118 = 0;
            }
            else if (Participant.videoDegradedState.getter() == 2)
            {
              id v109 = objc_msgSend(self, sel_conversationKit);
              OUTLINED_FUNCTION_47();
              OUTLINED_FUNCTION_0_23(v110, v111);

              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
              uint64_t v112 = swift_allocObject();
              *(_OWORD *)(v112 + 16) = xmmword_1C3769620;
              Participant.contactDetails.getter();
              double v113 = (void *)v205;
              uint64_t v114 = *((void *)&v206 + 1);
              uint64_t v115 = v207;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              *(void *)(v112 + 56) = MEMORY[0x1E4FBB1A0];
              *(void *)(v112 + 64) = lazy protocol witness table accessor for type String and conformance String();
              *(void *)(v112 + 32) = v114;
              *(void *)(v112 + 40) = v115;
              unint64_t v106 = v192;
              uint64_t v116 = String.init(format:_:)();
              uint64_t v118 = v117;
              id v105 = v191;
              swift_bridgeObjectRelease();
            }
            else
            {
              int v156 = Participant.videoDegradedState.getter();
              id v157 = objc_msgSend(self, sel_conversationKit);
              OUTLINED_FUNCTION_47();
              if (v156 != 3) {
                uint64_t v158 = 0xD000000000000019;
              }
              uint64_t v116 = OUTLINED_FUNCTION_0_23(v158, v159);
              uint64_t v118 = v167;
            }
            if (one-time initialization token for shared != -1) {
              swift_once();
            }
            if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static Features.shared) + 0x80))() & 1) == 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v116 = 0;
              uint64_t v118 = 0;
            }
            _s15ConversationKit11ParticipantVWOcTm_2(v30, (uint64_t)v106, (void (*)(void))type metadata accessor for Participant);
            if (one-time initialization token for badConnectionTitle1 != -1) {
              swift_once();
            }
            long long v205 = static SymbolImageDescription.badConnectionTitle1;
            long long v206 = *(_OWORD *)&qword_1EA37E720;
            long long v207 = xmmword_1EA37E730;
            long long v208 = unk_1EA37E740;
            uint64_t v168 = self;
            uint64_t v169 = *MEMORY[0x1E4FB2950];
            outlined retain of SymbolImageDescription((uint64_t)&v205);
            id v176 = objc_msgSend(v168, sel_preferredFontForTextStyle_, v169);
            OUTLINED_FUNCTION_3_56();
            ParticipantViewModel.init(videoParticipant:videoProviderType:symbol:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:labelString:labelFont:)((uint64_t)v106, v170, (uint64_t)&v205, v171, v172, v173, v174, v116, v190, v118, v176);

            goto LABEL_12;
          }
        }
        else
        {
          _s15ConversationKit11ParticipantVWOhTm_0(v36, (void (*)(void))type metadata accessor for Participant);
        }
        char v119 = Participant.isReceivingVideoFrames.getter();
        id v120 = v191;
        uint64_t v121 = v192;
        if (v119 & 1) != 0 && (v180)
        {
          uint64_t v122 = outlined release of LinearGradient((uint64_t)v195);
          OUTLINED_FUNCTION_18_24(v122, v123, (void (*)(void))type metadata accessor for Participant);
          LOBYTE(v193[0]) = 0;
        }
        else
        {
          if ((Participant.isReceivingVideoFrames.getter() & 1) != 0 && v120)
          {
            id v140 = v120;
            uint64_t v141 = outlined release of LinearGradient((uint64_t)v195);
            OUTLINED_FUNCTION_18_24(v141, v142, (void (*)(void))type metadata accessor for Participant);
            v193[0] = v140;
            char v194 = 5;
            uint64_t v143 = OUTLINED_FUNCTION_6_38();
            ParticipantViewModel.init(videoParticipantChangingConfiguration:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:overlayViewModel:shouldRegisterVideoLayers:)(v143, v144, v145, v146, v147, v148, v149, v150);

            goto LABEL_12;
          }
          if ((Participant.isReceivingVideoFrames.getter() & 1) != 0 && (v178 & 1) != 0 && (v183 & 1) == 0)
          {
            uint64_t v151 = outlined release of LinearGradient((uint64_t)v195);
            OUTLINED_FUNCTION_18_24(v151, v152, (void (*)(void))type metadata accessor for Participant);
          }
          else
          {
            char v153 = Participant.isReceivingVideoFrames.getter();
            uint64_t v154 = outlined release of LinearGradient((uint64_t)v195);
            if (v153 & 1) != 0 && (v179)
            {
              OUTLINED_FUNCTION_18_24(v154, v155, (void (*)(void))type metadata accessor for Participant);
              LOBYTE(v193[0]) = 0;
              char v194 = 0;
              int v126 = v188 & 1;
              int v127 = v189 & 1;
              char v125 = v186;
              int v130 = v185 & 1;
              uint64_t v129 = v193;
              uint64_t v131 = v190;
              uint64_t v124 = (uint64_t)v121;
              int v128 = 0;
              goto LABEL_52;
            }
            uint64_t v160 = Participant.isReceivingVideoFrames.getter();
            if (v160)
            {
              OUTLINED_FUNCTION_18_24(v160, v161, (void (*)(void))type metadata accessor for Participant);
              OUTLINED_FUNCTION_3_56();
              ParticipantViewModel.init(videoParticipant:videoProviderType:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:)((uint64_t)v121, v162, v163, v164, v165, v166, v190);
              goto LABEL_53;
            }
            uint64_t v175 = *(void *)(v30 + *(int *)(v32 + 28));
            OUTLINED_FUNCTION_18_24(v160, v161, (void (*)(void))type metadata accessor for Participant);
            if (v175 || (v187 & 1) != 0)
            {
              ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v121, 0, v190);
              goto LABEL_53;
            }
          }
          LOBYTE(v193[0]) = 1;
        }
        char v194 = 0;
        uint64_t v124 = OUTLINED_FUNCTION_6_38();
LABEL_52:
        ParticipantViewModel.init(videoParticipantChangingConfiguration:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:overlayViewModel:shouldRegisterVideoLayers:)(v124, v125, v126, v127, v128, (uint64_t)v129, v130, v131);
LABEL_53:

        goto LABEL_12;
      }
      char v76 = v192;
      _s15ConversationKit11ParticipantVWOcTm_2(v30, (uint64_t)v192, (void (*)(void))type metadata accessor for Participant);
      OUTLINED_FUNCTION_23_16();
      ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v76, v77, v190);

      _s15ConversationKit11ParticipantVWOhTm_0(v30, (void (*)(void))type metadata accessor for Participant);
      uint64_t v71 = v63;
LABEL_16:
      outlined destroy of Participant.MediaInfo(v71);
LABEL_17:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      (*(void (**)(uint64_t))(v78 + 8))(v49);
LABEL_18:
      OUTLINED_FUNCTION_28();
      return;
    case 6u:
      uint64_t v52 = outlined release of LinearGradient((uint64_t)v195);
LABEL_14:
      OUTLINED_FUNCTION_4_45(v52, v53, (void (*)(void))type metadata accessor for Participant);
      OUTLINED_FUNCTION_23_16();
      uint64_t v72 = OUTLINED_FUNCTION_13_21();
      ParticipantViewModel.init(inactiveParticipant:isMostActive:isPipped:hasOtherInvitedParticipants:isLocalMemberAuthorizedToChangeGroupMembership:)(v72, v73, v74, v75);

      _s15ConversationKit11ParticipantVWOhTm_0(v30, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_18;
    default:
      uint64_t v54 = outlined release of LinearGradient((uint64_t)v195);
      OUTLINED_FUNCTION_4_45(v54, v55, (void (*)(void))type metadata accessor for Participant);
      uint64_t v56 = OUTLINED_FUNCTION_13_21();
      ParticipantViewModel.init(invitedWebParticipant:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:)(v56, v57);
LABEL_5:

      _s15ConversationKit11ParticipantVWOhTm_0(v30, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_17;
  }
}

uint64_t ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v62 = a3;
  uint64_t v5 = type metadata accessor for Participant(0);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t v11 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
  uint64_t v60 = v13;
  ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
  if (*(void *)(a1 + *(int *)(v5 + 28)))
  {
    Participant.contactDetails.getter();
    id v14 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Participant.name(_:)();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (a2)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      uint64_t v19 = 0;
      uint64_t v18 = 0;
      unint64_t v59 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0xE000000000000000;
    if (a2) {
      goto LABEL_3;
    }
  }
  unint64_t v59 = 0xE000000000000000;
  uint64_t v19 = v16;
LABEL_6:
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
  uint64_t v20 = *(void **)&v8[*(int *)(v5 + 28)];
  uint64_t v61 = a1;
  if (!v20)
  {
LABEL_14:
    _s15ConversationKit11ParticipantVWOcTm_2((uint64_t)v8, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
    uint64_t v38 = v19;
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    uint64_t v63 = v67;
    uint64_t v37 = v68;
    uint64_t v39 = v70;
    uint64_t v57 = v69;
    uint64_t v58 = v71;
    uint64_t v56 = v72;
    id v36 = v66;
    id v40 = v66;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_15;
  }
  id v21 = v20;
  uint64_t v22 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v21);
  if (!v23)
  {

    goto LABEL_14;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  if ((objc_msgSend(v21, sel_shouldHideContact) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v55 = v19;
  uint64_t v63 = v24;
  uint64_t v57 = type metadata accessor for PersonNameComponents();
  uint64_t v58 = &v54;
  uint64_t v26 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  int v28 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  PersonNameComponents.init()();
  PersonNameComponents.givenName.setter();
  PersonNameComponents.familyName.setter();
  uint64_t v54 = v25;
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v29 = (id)static NSPersonNameComponentsFormatter.initials;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v31 = objc_msgSend(v29, sel_stringFromPersonNameComponents_, isa);

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v57);
  uint64_t v64 = v32;
  uint64_t v65 = v34;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v58 = (uint64_t *)StringProtocol.localizedUppercase.getter();
  uint64_t v56 = v35;

  swift_bridgeObjectRelease();
  id v36 = 0;
  uint64_t v57 = v63;
  uint64_t v37 = v54;
  uint64_t v38 = v55;
  uint64_t v39 = v54;
LABEL_15:
  if (v18) {
    unint64_t v41 = v59;
  }
  else {
    unint64_t v41 = 0;
  }
  if (v18) {
    uint64_t v42 = v38;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = *(void *)&v8[*(int *)(v5 + 32)];
  uint64_t v55 = (uint64_t)v36;
  id v44 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v46 = v37;
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
  swift_bridgeObjectRetain();
  outlined copy of (title: String, subtitle: String?)?(v42, v18);
  outlined consume of AnsweringMachineCallStatus?(0, 0);
  id v47 = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of (title: String, subtitle: String?)?(v42, v18);
  outlined consume of AnsweringMachineCallStatus?(v42, v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  outlined consume of AnsweringMachineCallStatus?(v42, v18);
  _s15ConversationKit11ParticipantVWOhTm_0(v61, (void (*)(void))type metadata accessor for Participant);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel));
  uint64_t v49 = v62 + *(int *)(v48 + 48);
  outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v60, v62);
  uint64_t v50 = v63;
  *(void *)uint64_t v49 = v55;
  *(void *)(v49 + 8) = v50;
  uint64_t v51 = v57;
  *(void *)(v49 + 16) = v46;
  *(void *)(v49 + 24) = v51;
  uint64_t v52 = v58;
  *(void *)(v49 + 32) = v39;
  *(void *)(v49 + 40) = v52;
  *(void *)(v49 + 48) = v45;
  *(void *)(v49 + 56) = v43;
  *(_WORD *)(v49 + 64) = 1;
  *(void *)(v49 + 72) = v42;
  *(void *)(v49 + 80) = v18;
  *(void *)(v49 + 88) = 0;
  *(void *)(v49 + 96) = v41;
  type metadata accessor for ParticipantViewModel(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ParticipantViewModel.init(videoParticipant:videoProviderType:overlayImageName:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:labelString:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, long long *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v42 = a8;
  int v41 = a7;
  int v40 = a6;
  uint64_t v43 = a10;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v19);
  id v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  Participant.videoProvider(for:)((uint64_t)__src);
  if (*((void *)&__src[1] + 1))
  {
    outlined init with take of Notice(__src, (uint64_t)v45);
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v21, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
    outlined init with copy of IDSLookupManager((uint64_t)v45, (uint64_t)v44);
    Participant.videoTransform.getter(__src);
    _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v26 = (unsigned char *)(a9 + *(int *)(v25 + 48));
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v44, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    memcpy(v26 + 40, __src, 0x80uLL);
    v26[168] = v40 & 1;
    v26[169] = 0;
    v26[170] = v41 & 1;
    v26[171] = 0;
    uint64_t v27 = a9 + *(int *)(v25 + 64);
    outlined init with take of Notice(a3, v27);
    uint64_t v28 = v43;
    *(void *)(v27 + 40) = v42;
    *(void *)(v27 + 48) = v28;
    *(unsigned char *)(v27 + 104) = 1;
    outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v24, a9);
    type metadata accessor for ParticipantViewModel(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    int v40 = a4;
    int v41 = a5;
    uint64_t v42 = (uint64_t)a3;
    swift_bridgeObjectRelease();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v43 = static OS_os_log.conversationKit;
    void v39[3] = static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1C37696D0;
    LOBYTE(__src[0]) = a2;
    uint64_t v31 = String.init<A>(reflecting:)();
    uint64_t v33 = v32;
    uint64_t v34 = MEMORY[0x1E4FBB1A0];
    *(void *)(v30 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v35 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v30 + 64) = v35;
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v33;
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v19);
    uint64_t v36 = specialized >> prefix<A>(_:)();
    uint64_t v38 = v37;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for Participant?);
    *(void *)(v30 + 96) = v34;
    *(void *)(v30 + 104) = v35;
    *(void *)(v30 + 72) = v36;
    *(void *)(v30 + 80) = v38;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v21, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v21, 0, a9);
    __swift_destroy_boxed_opaque_existential_1(v42);
    return _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
  }
}

uint64_t ParticipantViewModel.init(monogramVideoParticipant:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  LODWORD(v75) = a6;
  LODWORD(v74) = a5;
  uint64_t v76 = a7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Participant(0);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v70 - v18;
  uint64_t v20 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Participant.videoProvider(for:)((uint64_t)v86);
  if (*((void *)&v86[1] + 1))
  {
    outlined init with take of Notice(v86, (uint64_t)v87);
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
    uint64_t v72 = v22;
    ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
    outlined init with copy of IDSLookupManager((uint64_t)v87, (uint64_t)v86);
    Participant.videoTransform.getter(__src);
    memcpy((char *)&v86[2] + 8, __src, 0x80uLL);
    WORD4(v86[10]) = v74 & 1;
    WORD5(v86[10]) = v75 & 1;
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
    uint64_t v23 = *(void **)&v17[*(int *)(v14 + 28)];
    uint64_t v24 = v14;
    uint64_t v73 = a1;
    if (v23)
    {
      id v25 = v23;
      uint64_t v26 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v25);
      if (v27)
      {
        uint64_t v28 = v26;
        uint64_t v29 = v27;
        if (objc_msgSend(v25, sel_shouldHideContact))
        {
          uint64_t v75 = (uint64_t *)v28;
          uint64_t v30 = type metadata accessor for PersonNameComponents();
          int v74 = &v70;
          uint64_t v71 = (char *)v30;
          uint64_t v31 = *(void *)(v30 - 8);
          MEMORY[0x1F4188790](v30);
          uint64_t v33 = (char *)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          swift_beginAccess();
          id v34 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v36 = objc_msgSend(v34, sel_stringFromPersonNameComponents_, isa);

          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;

          (*(void (**)(char *, char *))(v31 + 8))(v33, v71);
          uint64_t v77 = v37;
          uint64_t v78 = v39;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v40 = StringProtocol.localizedUppercase.getter();
          uint64_t v42 = v41;

          swift_bridgeObjectRelease();
          id v43 = 0;
          int v74 = v75;
          uint64_t v44 = v29;
          goto LABEL_14;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    _s15ConversationKit11ParticipantVWOcTm_2((uint64_t)v17, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v43 = v79;
    uint64_t v29 = v81;
    int v74 = v82;
    uint64_t v75 = v80;
    uint64_t v71 = v19;
    uint64_t v57 = v17;
    uint64_t v58 = v24;
    uint64_t v44 = v83;
    uint64_t v59 = v84;
    uint64_t v42 = v85;
    id v60 = v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v40 = v59;
    uint64_t v24 = v58;
    uint64_t v17 = v57;
    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v71, (void (*)(void))type metadata accessor for Participant);
LABEL_14:
    uint64_t v61 = *(void *)&v17[*(int *)(v24 + 32)];
    id v62 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
    swift_bridgeObjectRetain();
    outlined consume of AnsweringMachineCallStatus?(0, 0);
    id v63 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of (title: String, subtitle: String?)?(0, 0);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
    outlined consume of AnsweringMachineCallStatus?(0, 0);
    _s15ConversationKit11ParticipantVWOhTm_0(v73, (void (*)(void))type metadata accessor for Participant);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v65 = v75;
    uint64_t v66 = v76;
    uint64_t v67 = v76 + *(int *)(v64 + 64);
    *(void *)uint64_t v67 = v43;
    *(void *)(v67 + 8) = v65;
    uint64_t v68 = v74;
    *(void *)(v67 + 16) = v29;
    *(void *)(v67 + 24) = v68;
    *(void *)(v67 + 32) = v44;
    *(void *)(v67 + 40) = v40;
    *(void *)(v67 + 48) = v42;
    *(void *)(v67 + 56) = v61;
    *(_WORD *)(v67 + 64) = 0;
    *(_OWORD *)(v67 + 72) = 0u;
    *(_OWORD *)(v67 + 88) = 0u;
    *(unsigned char *)(v67 + 104) = 4;
    uint64_t v69 = (void *)(v66 + *(int *)(v64 + 48));
    outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v72, v66);
    memcpy(v69, v86, 0xACuLL);
    type metadata accessor for ParticipantViewModel(0);
    return swift_storeEnumTagMultiPayload();
  }
  LODWORD(v74) = a3;
  LODWORD(v75) = a4;
  uint64_t v45 = v14;
  uint64_t v46 = a1;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v72 = (char *)static OS_os_log.conversationKit;
  LODWORD(v71) = static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1C37696D0;
  LOBYTE(v86[0]) = a2;
  uint64_t v48 = String.init<A>(reflecting:)();
  uint64_t v50 = v49;
  uint64_t v51 = MEMORY[0x1E4FBB1A0];
  *(void *)(v47 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v52 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v47 + 64) = v52;
  *(void *)(v47 + 32) = v48;
  *(void *)(v47 + 40) = v50;
  _s15ConversationKit11ParticipantVWOcTm_2(v46, (uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v45);
  uint64_t v53 = specialized >> prefix<A>(_:)();
  uint64_t v55 = v54;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for Participant?);
  *(void *)(v47 + 96) = v51;
  *(void *)(v47 + 104) = v52;
  *(void *)(v47 + 72) = v53;
  *(void *)(v47 + 80) = v55;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  _s15ConversationKit11ParticipantVWOcTm_2(v46, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
  ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v19, 0, v76);
  return _s15ConversationKit11ParticipantVWOhTm_0(v46, (void (*)(void))type metadata accessor for Participant);
}

uint64_t ParticipantViewModel.init(reconnectingVideoParticipant:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v38 = a6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Participant.videoProvider(for:)((uint64_t)__src);
  if (*((void *)&__src[1] + 1))
  {
    outlined init with take of Notice(__src, (uint64_t)v40);
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
    outlined init with copy of IDSLookupManager((uint64_t)v40, (uint64_t)v39);
    Participant.videoTransform.getter(__src);
    _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v23 = (unsigned char *)(a7 + *(int *)(v22 + 48));
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v39, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    memcpy(v23 + 40, __src, 0x80uLL);
    v23[168] = a5 & 1;
    v23[169] = 0;
    v23[170] = v38 & 1;
    v23[171] = 0;
    uint64_t v24 = a7 + *(int *)(v22 + 64);
    *(void *)(v24 + 96) = 0;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(unsigned char *)(v24 + 104) = 6;
    outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v21, a7);
    type metadata accessor for ParticipantViewModel(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    int v37 = a3;
    int v38 = a4;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v36 = static OS_os_log.conversationKit;
    v35[1] = static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1C37696D0;
    LOBYTE(__src[0]) = a2;
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v29 = v28;
    uint64_t v30 = MEMORY[0x1E4FBB1A0];
    *(void *)(v26 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v31 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v26 + 64) = v31;
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v29;
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v16);
    uint64_t v32 = specialized >> prefix<A>(_:)();
    uint64_t v34 = v33;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for Participant?);
    *(void *)(v26 + 96) = v30;
    *(void *)(v26 + 104) = v31;
    *(void *)(v26 + 72) = v32;
    *(void *)(v26 + 80) = v34;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v18, 0, a7);
    return _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
  }
}

uint64_t ParticipantViewModel.init(videoParticipant:videoProviderType:symbol:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:labelString:labelFont:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v53 = a8;
  LODWORD(v52) = a7;
  int v51 = a6;
  int v54 = a5;
  int v56 = a4;
  id v57 = a11;
  uint64_t v55 = a10;
  uint64_t v49 = *(void *)a3;
  uint64_t v48 = *(void *)(a3 + 8);
  uint64_t v47 = *(void *)(a3 + 16);
  uint64_t v46 = *(void *)(a3 + 24);
  char v15 = *(unsigned char *)(a3 + 32);
  char v16 = *(unsigned char *)(a3 + 33);
  uint64_t v45 = *(void *)(a3 + 40);
  int v44 = *(unsigned __int8 *)(a3 + 48);
  uint64_t v50 = *(void *)(a3 + 56);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = &v43[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = &v43[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v23 - 8);
  id v25 = &v43[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Participant.videoProvider(for:)((uint64_t)__src);
  if (*((void *)&__src[1] + 1))
  {
    outlined init with take of Notice(__src, (uint64_t)v59);
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v22, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
    outlined init with copy of IDSLookupManager((uint64_t)v59, (uint64_t)v58);
    Participant.videoTransform.getter(__src);
    _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v27 = (unsigned char *)(a9 + *(int *)(v26 + 48));
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v58, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    memcpy(v27 + 40, __src, 0x80uLL);
    v27[168] = v51 & 1;
    v27[169] = 0;
    v27[170] = v52 & 1;
    v27[171] = 0;
    uint64_t v28 = a9 + *(int *)(v26 + 64);
    uint64_t v29 = v48;
    *(void *)uint64_t v28 = v49;
    *(void *)(v28 + 8) = v29;
    uint64_t v30 = v46;
    *(void *)(v28 + 16) = v47;
    *(void *)(v28 + 24) = v30;
    *(unsigned char *)(v28 + 32) = v15 & 1;
    *(unsigned char *)(v28 + 33) = v16 & 1;
    *(void *)(v28 + 40) = v45;
    *(unsigned char *)(v28 + 48) = v44 & 1;
    uint64_t v31 = v53;
    *(void *)(v28 + 56) = v50;
    *(void *)(v28 + 64) = v31;
    id v32 = v57;
    *(void *)(v28 + 72) = v55;
    *(void *)(v28 + 80) = v32;
    *(unsigned char *)(v28 + 104) = 3;
    outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v25, a9);
    type metadata accessor for ParticipantViewModel(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v52 = v20;
    uint64_t v53 = a9;
    swift_bridgeObjectRelease();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v55 = static OS_os_log.conversationKit;
    int v51 = static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1C37696D0;
    LOBYTE(__src[0]) = a2;
    uint64_t v35 = String.init<A>(reflecting:)();
    uint64_t v37 = v36;
    uint64_t v38 = MEMORY[0x1E4FBB1A0];
    *(void *)(v34 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v39 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v34 + 64) = v39;
    *(void *)(v34 + 32) = v35;
    *(void *)(v34 + 40) = v37;
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v52);
    uint64_t v40 = specialized >> prefix<A>(_:)();
    uint64_t v42 = v41;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v19, &demangling cache variable for type metadata for Participant?);
    *(void *)(v34 + 96) = v38;
    *(void *)(v34 + 104) = v39;
    *(void *)(v34 + 72) = v40;
    *(void *)(v34 + 80) = v42;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v22, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v22, 0, v53);

    outlined release of SymbolImageDescription(a3);
    return _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
  }
}

uint64_t ParticipantViewModel.init(videoParticipantChangingConfiguration:videoProviderType:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:overlayViewModel:shouldRegisterVideoLayers:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  LODWORD(v40) = a7;
  int v39 = a5;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v14 - 8);
  char v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Participant.videoProvider(for:)((uint64_t)__src);
  if (*((void *)&__src[1] + 1))
  {
    outlined init with take of Notice(__src, (uint64_t)v42);
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
    outlined init with copy of IDSLookupManager((uint64_t)v42, (uint64_t)v41);
    Participant.videoTransform.getter(__src);
    _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v24 = (unsigned char *)(a8 + *(int *)(v23 + 48));
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v41, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    memcpy(v24 + 40, __src, 0x80uLL);
    v24[168] = v39 & 1;
    v24[169] = 0;
    v24[170] = v40 & 1;
    v24[171] = 0;
    uint64_t v25 = a8 + *(int *)(v23 + 64);
    outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v22, a8);
    outlined init with take of ParticipantVideoOverlayView.ViewModel(a6, v25);
    type metadata accessor for ParticipantViewModel(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    int v38 = a3;
    int v39 = a4;
    uint64_t v40 = a6;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v37 = static OS_os_log.conversationKit;
    v36[3] = static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1C37696D0;
    LOBYTE(__src[0]) = a2;
    uint64_t v28 = String.init<A>(reflecting:)();
    uint64_t v30 = v29;
    uint64_t v31 = MEMORY[0x1E4FBB1A0];
    *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v32 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v27 + 64) = v32;
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v17);
    uint64_t v33 = specialized >> prefix<A>(_:)();
    uint64_t v35 = v34;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for Participant?);
    *(void *)(v27 + 96) = v31;
    *(void *)(v27 + 104) = v32;
    *(void *)(v27 + 72) = v33;
    *(void *)(v27 + 80) = v35;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v19, (void (*)(void))type metadata accessor for Participant);
    ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v19, 0, a8);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v40);
    return _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
  }
}

uint64_t ParticipantViewModel.init(videoParticipant:videoProviderType:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:shouldRegisterVideoLayers:)@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, int a3@<W2>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X8>)
{
  LODWORD(v34) = a6;
  int v33 = a5;
  int v12 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v35);
  uint64_t v17 = &v32[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
  int v38 = v20;
  int v36 = a3;
  int v37 = a4;
  ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
  if (v12 != 4)
  {
    Participant.videoProvider(for:)((uint64_t)__src);
    if (*((void *)&__src[1] + 1))
    {
      outlined init with take of Notice(__src, (uint64_t)v40);
      outlined init with copy of IDSLookupManager((uint64_t)v40, (uint64_t)v39);
      Participant.videoTransform.getter(__src);
      _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      uint64_t v21 = (unsigned char *)(a7
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                             + 48));
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v39, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
      memcpy(v21 + 40, __src, 0x80uLL);
      v21[168] = v33 & 1;
      v21[169] = 0;
      v21[170] = v34 & 1;
      v21[171] = 0;
      outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v38, a7);
      type metadata accessor for ParticipantViewModel(0);
      return swift_storeEnumTagMultiPayload();
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  }
  uint64_t v34 = a7;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  int v33 = static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1C37696D0;
  if (a2 == 4)
  {
    unint64_t v24 = 0xE300000000000000;
    uint64_t v25 = 7104878;
  }
  else
  {
    LOBYTE(__src[0]) = a2;
    uint64_t v25 = String.init<A>(reflecting:)();
    unint64_t v24 = v26;
  }
  uint64_t v27 = MEMORY[0x1E4FBB1A0];
  *(void *)(v23 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v28 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v23 + 64) = v28;
  *(void *)(v23 + 32) = v25;
  *(void *)(v23 + 40) = v24;
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v35);
  uint64_t v29 = specialized >> prefix<A>(_:)();
  uint64_t v31 = v30;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for Participant?);
  *(void *)(v23 + 96) = v27;
  *(void *)(v23 + 104) = v28;
  *(void *)(v23 + 72) = v29;
  *(void *)(v23 + 80) = v31;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
  ParticipantViewModel.init(audioOnlyParticipant:isMostActive:isPipped:isLocalMemberAuthorizedToChangeGroupMembership:)((uint64_t)v17, 0, v34);
  _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for Participant);
  return _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v38, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
}

uint64_t ParticipantViewModel.init(invitedWebParticipant:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = type metadata accessor for Participant(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v56 - v7;
  uint64_t v9 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
  id v62 = v11;
  ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
  Participant.contactDetails.getter();
  id v12 = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v60 = v14;
  uint64_t v61 = v13;
  swift_bridgeObjectRelease();
  uint64_t v63 = a1;
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
  id v15 = objc_msgSend(self, sel_conversationKit);
  v75._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C3798160;
  v16._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v75._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v75);
  uint64_t countAndFlagsBits = v19._countAndFlagsBits;
  object = v19._object;

  uint64_t v21 = *(void **)&v6[*(int *)(v3 + 28)];
  if (!v21) {
    goto LABEL_9;
  }
  id v22 = v21;
  uint64_t v23 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v22);
  if (!v24)
  {

LABEL_9:
    _s15ConversationKit11ParticipantVWOcTm_2((uint64_t)v6, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v39 = v68;
    uint64_t v65 = v69;
    uint64_t v26 = v70;
    uint64_t v40 = v72;
    uint64_t v57 = v71;
    uint64_t v58 = v73;
    uint64_t v38 = v74;
    id v41 = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_10;
  }
  uint64_t v25 = v23;
  uint64_t v26 = v24;
  if ((objc_msgSend(v22, sel_shouldHideContact) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v65 = v25;
  int v56 = v19._object;
  uint64_t v27 = type metadata accessor for PersonNameComponents();
  uint64_t v58 = &v56;
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  PersonNameComponents.init()();
  PersonNameComponents.givenName.setter();
  PersonNameComponents.familyName.setter();
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v31 = (id)static NSPersonNameComponentsFormatter.initials;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v33 = objc_msgSend(v31, sel_stringFromPersonNameComponents_, isa);

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  uint64_t v66 = v34;
  uint64_t v67 = v36;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v58 = (void **)StringProtocol.localizedUppercase.getter();
  uint64_t v38 = v37;

  swift_bridgeObjectRelease();
  id v39 = 0;
  uint64_t v57 = v65;
  uint64_t v40 = v26;
  object = v56;
LABEL_10:
  int v56 = v39;
  uint64_t v42 = *(void *)&v6[*(int *)(v3 + 32)];
  id v43 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
  swift_bridgeObjectRetain();
  uint64_t v44 = v38;
  uint64_t v45 = v26;
  uint64_t v46 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of AnsweringMachineCallStatus?(0, 0);
  id v47 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v48 = v61;
  uint64_t v49 = countAndFlagsBits;
  outlined copy of (title: String, subtitle: String?)?(v61, v46);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AnsweringMachineCallStatus?(v48, v46);
  _s15ConversationKit11ParticipantVWOhTm_0(v63, (void (*)(void))type metadata accessor for Participant);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel));
  uint64_t v51 = v64 + *(int *)(v50 + 48);
  outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v62, v64);
  uint64_t v52 = v65;
  *(void *)uint64_t v51 = v56;
  *(void *)(v51 + 8) = v52;
  uint64_t v53 = v57;
  *(void *)(v51 + 16) = v45;
  *(void *)(v51 + 24) = v53;
  int v54 = v58;
  *(void *)(v51 + 32) = v40;
  *(void *)(v51 + 40) = v54;
  *(void *)(v51 + 48) = v44;
  *(void *)(v51 + 56) = v42;
  *(_WORD *)(v51 + 64) = 0;
  *(void *)(v51 + 72) = v48;
  *(void *)(v51 + 80) = v46;
  *(void *)(v51 + 88) = v49;
  *(void *)(v51 + 96) = object;
  type metadata accessor for ParticipantViewModel(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ParticipantViewModel.init(ringingParticipant:isMostActive:isLocalMemberAuthorizedToChangeGroupMembership:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = type metadata accessor for Participant(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - v7;
  uint64_t v9 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
  uint64_t v61 = v11;
  ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
  uint64_t v62 = a1;
  Participant.contactDetails.getter();
  id v12 = v74;
  uint64_t v60 = v75;
  uint64_t v57 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v13 = objc_msgSend(self, sel_conversationKit);
  v77._object = (void *)0xE000000000000000;
  v14._object = (void *)0x80000001C3798190;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v77._uint64_t countAndFlagsBits = 0;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v77);
  uint64_t countAndFlagsBits = v17._countAndFlagsBits;
  object = v17._object;

  Swift::String v19 = *(void **)&v6[*(int *)(v3 + 28)];
  if (!v19) {
    goto LABEL_9;
  }
  id v20 = v19;
  uint64_t v21 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v20);
  if (!v22)
  {

LABEL_9:
    _s15ConversationKit11ParticipantVWOcTm_2((uint64_t)v6, (uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    uint64_t v64 = v68;
    uint64_t v24 = v69;
    uint64_t v56 = v70;
    uint64_t v38 = v71;
    uint64_t v58 = v72;
    uint64_t v36 = v73;
    id v37 = v67;
    id v39 = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_10;
  }
  uint64_t v23 = v21;
  uint64_t v24 = v22;
  if ((objc_msgSend(v20, sel_shouldHideContact) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v64 = v23;
  uint64_t v55 = v17._object;
  uint64_t v25 = type metadata accessor for PersonNameComponents();
  uint64_t v58 = &v54;
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  PersonNameComponents.init()();
  PersonNameComponents.givenName.setter();
  PersonNameComponents.familyName.setter();
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v29 = (id)static NSPersonNameComponentsFormatter.initials;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v31 = objc_msgSend(v29, sel_stringFromPersonNameComponents_, isa);

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  uint64_t v65 = v32;
  uint64_t v66 = v34;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v58 = (uint64_t *)StringProtocol.localizedUppercase.getter();
  uint64_t v36 = v35;

  swift_bridgeObjectRelease();
  id v37 = 0;
  uint64_t v56 = v64;
  uint64_t v38 = v24;
  object = v55;
LABEL_10:
  uint64_t v40 = *(void *)&v6[*(int *)(v3 + 32)];
  uint64_t v55 = v37;
  id v41 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
  uint64_t v42 = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of AnsweringMachineCallStatus?(0, 0);
  id v43 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = v60;
  uint64_t v45 = v36;
  uint64_t v46 = v24;
  uint64_t v47 = countAndFlagsBits;
  outlined copy of (title: String, subtitle: String?)?(v60, v42);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AnsweringMachineCallStatus?(v44, v42);
  _s15ConversationKit11ParticipantVWOhTm_0(v62, (void (*)(void))type metadata accessor for Participant);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel));
  uint64_t v49 = v63 + *(int *)(v48 + 48);
  outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v61, v63);
  uint64_t v50 = v64;
  *(void *)uint64_t v49 = v55;
  *(void *)(v49 + 8) = v50;
  uint64_t v51 = v56;
  *(void *)(v49 + 16) = v46;
  *(void *)(v49 + 24) = v51;
  uint64_t v52 = v58;
  *(void *)(v49 + 32) = v38;
  *(void *)(v49 + 40) = v52;
  *(void *)(v49 + 48) = v45;
  *(void *)(v49 + 56) = v40;
  *(_WORD *)(v49 + 64) = 0;
  *(void *)(v49 + 72) = v44;
  *(void *)(v49 + 80) = v42;
  *(void *)(v49 + 88) = v47;
  *(void *)(v49 + 96) = object;
  type metadata accessor for ParticipantViewModel(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ParticipantViewModel.init(inactiveParticipant:isMostActive:isPipped:hasOtherInvitedParticipants:isLocalMemberAuthorizedToChangeGroupMembership:)@<X0>(uint64_t a1@<X0>, char a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  LODWORD(v78) = a3;
  uint64_t v7 = (int *)type metadata accessor for Participant(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  char v80 = &v68[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  id v12 = &v68[-v11];
  MEMORY[0x1F4188790](v10);
  Swift::String v14 = &v68[-v13];
  uint64_t v15 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v15 - 8);
  Swift::String v17 = &v68[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
  Swift::String v77 = v17;
  uint64_t v18 = a1;
  ParticipantViewModel.ParticipantDetails.init(participant:isMostActive:isPreviewingReaction:isLocalMemberAuthorizedToChangeGroupMembership:)();
  _s15ConversationKit11ParticipantVWOcTm_2(a1, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
  uint64_t v79 = a4;
  if (a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
LABEL_5:
    int v69 = 0;
    goto LABEL_6;
  }
  uint64_t v19 = *(void *)&v12[v7[9] + 8];
  swift_bridgeObjectRetain();
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
  if (v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  int v69 = 1;
LABEL_6:
  char v20 = v78;
  Participant.contactDetails.getter();
  id v21 = v83;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v75 = v23;
  uint64_t v76 = v22;
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(self, sel_conversationKit);
  if (v20)
  {
    unint64_t v67 = 0xE000000000000000;
    unint64_t v25 = 0x80000001C3798160;
    unint64_t v26 = 0xD00000000000002FLL;
  }
  else
  {
    unint64_t v26 = 0xD000000000000033;
    unint64_t v67 = 0xE000000000000000;
    unint64_t v25 = 0x80000001C3798120;
  }
  v27.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v27.value._object = (void *)0xEF74694B6E6F6974;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  uint64_t v29 = 0;
  Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v26, v27, (NSBundle)v24, v28, *(Swift::String *)(&v67 - 1));
  object = v30._object;
  uint64_t countAndFlagsBits = v30._countAndFlagsBits;

  uint64_t v78 = v18;
  id v31 = v80;
  _s15ConversationKit11ParticipantVWOcTm_2(v18, (uint64_t)v80, (void (*)(void))type metadata accessor for Participant);
  uint64_t v32 = *(void **)&v31[v7[7]];
  if (!v32) {
    goto LABEL_17;
  }
  id v33 = v32;
  uint64_t v34 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v33);
  if (!v35)
  {

LABEL_17:
    _s15ConversationKit11ParticipantVWOcTm_2((uint64_t)v31, (uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    uint64_t v49 = v83;
    uint64_t v37 = v85;
    uint64_t v70 = v84;
    uint64_t v71 = v86;
    uint64_t v50 = v87;
    uint64_t v72 = v88;
    uint64_t v48 = v89;
    id v51 = v83;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_18;
  }
  uint64_t v36 = v34;
  uint64_t v37 = v35;
  if ((objc_msgSend(v33, sel_shouldHideContact) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v71 = type metadata accessor for PersonNameComponents();
  uint64_t v72 = v68;
  uint64_t v38 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v40 = &v68[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRetain();
  PersonNameComponents.init()();
  PersonNameComponents.givenName.setter();
  PersonNameComponents.familyName.setter();
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v41 = (id)static NSPersonNameComponentsFormatter.initials;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v43 = objc_msgSend(v41, sel_stringFromPersonNameComponents_, isa);

  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v40, v71);
  uint64_t v81 = v44;
  uint64_t v82 = v46;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v72 = (unsigned char *)StringProtocol.localizedUppercase.getter();
  uint64_t v48 = v47;

  swift_bridgeObjectRelease();
  uint64_t v49 = 0;
  uint64_t v70 = v36;
  uint64_t v71 = v36;
  uint64_t v50 = v37;
  id v31 = v80;
LABEL_18:
  char v80 = v49;
  uint64_t v52 = *(void *)&v31[v7[8]];
  uint64_t v53 = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v31, (void (*)(void))type metadata accessor for Participant);
  swift_bridgeObjectRetain();
  uint64_t v54 = v75;
  swift_bridgeObjectRetain();
  uint64_t v55 = v37;
  uint64_t v56 = object;
  swift_bridgeObjectRetain();
  outlined consume of AnsweringMachineCallStatus?(0, 0);
  uint64_t v57 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v58 = v76;
  uint64_t v59 = v48;
  uint64_t v60 = countAndFlagsBits;
  outlined copy of (title: String, subtitle: String?)?(v76, v54);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AnsweringMachineCallStatus?(v58, v54);
  _s15ConversationKit11ParticipantVWOhTm_0(v78, (void (*)(void))type metadata accessor for Participant);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel));
  uint64_t v62 = v79 + *(int *)(v61 + 48);
  outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v77, v79);
  uint64_t v63 = v70;
  *(void *)uint64_t v62 = v80;
  *(void *)(v62 + 8) = v63;
  uint64_t v64 = v71;
  *(void *)(v62 + 16) = v55;
  *(void *)(v62 + 24) = v64;
  uint64_t v65 = v72;
  *(void *)(v62 + 32) = v50;
  *(void *)(v62 + 40) = v65;
  *(void *)(v62 + 48) = v59;
  *(void *)(v62 + 56) = v52;
  *(unsigned char *)(v62 + 64) = 0;
  *(unsigned char *)(v62 + 65) = v69;
  *(void *)(v62 + 72) = v58;
  *(void *)(v62 + 80) = v54;
  *(void *)(v62 + 88) = v60;
  *(void *)(v62 + 96) = v56;
  type metadata accessor for ParticipantViewModel(0);
  return swift_storeEnumTagMultiPayload();
}

void Participant.videoTransform.getter(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v52 = v7 - v6;
  Participant.videoInfo.getter();
  uint64_t v8 = v83[0];
  unint64_t v9 = v83[1];
  __int16 v10 = v84;
  uint64_t v56 = v85;
  char v11 = v86;
  uint64_t v64 = v87;
  uint64_t v62 = v88;
  uint64_t v60 = v89;
  uint64_t v58 = v90;
  __int16 v12 = v91;
  Participant.copresenceInfo.getter();
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v92, (uint64_t)v103, &demangling cache variable for type metadata for Participant.CopresenceInfo?);
  if (v103[1])
  {
    char v13 = v104;
    outlined release of Participant.CopresenceInfo?(v92);
    uint64_t v66 = v13 & 1;
  }
  else
  {
    uint64_t v66 = 0;
  }
  uint64_t v14 = *(int *)(v4 + 28);
  if (*(void *)(v2 + v14))
  {
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v83, (uint64_t)&v93, &demangling cache variable for type metadata for Participant.VideoInfo?);
    if ((void)v93)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *((void *)&v94 + 1);
      outlined release of LinearGradient((uint64_t)v83);
      uint64_t v17 = v16;
      uint64_t v14 = v15;
      double v18 = static Participant.rotationFor(_:cameraPosition:)(v17, v11);
      CATransform3DMakeRotation(&v101, v18, 0.0, 0.0, 1.0);
LABEL_15:
      long long v22 = *(_OWORD *)&v101.m43;
      long long v23 = *(_OWORD *)&v101.m41;
      long long v24 = *(_OWORD *)&v101.m33;
      long long v25 = *(_OWORD *)&v101.m31;
      long long v26 = *(_OWORD *)&v101.m23;
      long long v27 = *(_OWORD *)&v101.m21;
      long long v28 = *(_OWORD *)&v101.m13;
      long long v29 = *(_OWORD *)&v101.m11;
      goto LABEL_16;
    }
    long long v23 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
    long long v22 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
    long long v25 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
    long long v24 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
    long long v27 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
    long long v26 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
    long long v29 = *MEMORY[0x1E4F39B10];
    long long v28 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
  }
  else
  {
    uint64_t v51 = *(int *)(v4 + 28);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v83, (uint64_t)v102, &demangling cache variable for type metadata for Participant.VideoInfo?);
    if (v102[0])
    {
      uint64_t v50 = v102[3];
      uint64_t v105 = v8;
      __int16 v106 = v9 & 0x101;
      char v107 = BYTE2(v9) & 1;
      char v108 = BYTE3(v9);
      uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(v9);
      int16x8_t v20 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v19, (uint64x2_t)xmmword_1C376F240), (int32x4_t)vshlq_u64(v19, (uint64x2_t)xmmword_1C376F230));
      *(int8x8_t *)v20.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v20), (int8x8_t)0x1000100010001);
      unsigned __int32 v109 = vmovn_s16(v20).u32[0];
      __int16 v110 = v10 & 0x101;
      uint64_t v111 = v56;
      char v112 = v11;
      uint64_t v113 = v64;
      uint64_t v114 = v62;
      uint64_t v115 = v60;
      uint64_t v116 = v58;
      __int16 v117 = v12 & 0x101;
      char v21 = Participant.VideoInfo.cameraType.getter();
      outlined release of LinearGradient((uint64_t)v83);
    }
    else
    {
      char v21 = 2;
      uint64_t v50 = 1;
    }
    id v30 = objc_msgSend(self, sel_currentDevice);
    id v31 = objc_msgSend(v30, sel_userInterfaceIdiom);

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v32 = static Defaults.shared;
    swift_retain();
    specialized static Participant.transformForLocalParticipant(deviceOrientation:cameraType:currentIdiom:defaults:)(*(CGFloat *)&v50, v21, (unint64_t)v31, v32, (CGFloat *)&v93);
    long long v63 = v99;
    long long v65 = v100;
    long long v59 = v97;
    long long v61 = v98;
    long long v55 = v95;
    long long v57 = v96;
    long long v53 = v93;
    long long v54 = v94;
    swift_release();
    long long v29 = v53;
    long long v28 = v54;
    long long v27 = v55;
    long long v26 = v57;
    long long v25 = v59;
    long long v24 = v61;
    long long v23 = v63;
    long long v22 = v65;
    BOOL v33 = v21 == 1;
    uint64_t v14 = v51;
    if (!v33)
    {
      _s15ConversationKit11ParticipantVWOcTm_2(v2, v52, (void (*)(void))type metadata accessor for Participant);
      char v34 = *(unsigned char *)(v52 + *(int *)(v4 + 40));
      _s15ConversationKit11ParticipantVWOhTm_0(v52, (void (*)(void))type metadata accessor for Participant);
      char v35 = v34;
      uint64_t v14 = v51;
      static Participant.compensatedVideoRotation(_:videoTransform:effectsEnabled:)(v50, (CGFloat *)&v93, v35, &v101.m11);
      goto LABEL_15;
    }
  }
LABEL_16:
  uint64_t v36 = *((void *)&v29 + 1);
  uint64_t v37 = *((void *)&v28 + 1);
  uint64_t v38 = *((void *)&v27 + 1);
  uint64_t v39 = *((void *)&v26 + 1);
  uint64_t v40 = *((void *)&v25 + 1);
  uint64_t v41 = *((void *)&v24 + 1);
  uint64_t v42 = *((void *)&v23 + 1);
  uint64_t v43 = *((void *)&v22 + 1);
  if (*(void *)(v2 + v14) && v66)
  {
    uint64_t v44 = Participant.deviceOrientation.getter();
    if ((v45 & 1) != 0 || (v44 | 2) != 3)
    {
      uint64_t v46 = (CATransform3D *)OUTLINED_FUNCTION_1_56();
      CGFloat v48 = -1.0;
      CGFloat v49 = 1.0;
    }
    else
    {
      uint64_t v46 = (CATransform3D *)OUTLINED_FUNCTION_1_56();
      CGFloat v48 = 1.0;
      CGFloat v49 = -1.0;
    }
    CATransform3DScale(v47, v46, v48, v49, 1.0);
    *(void *)&long long v29 = v67;
    uint64_t v36 = v68;
    *(void *)&long long v28 = v69;
    uint64_t v37 = v70;
    *(void *)&long long v27 = v71;
    uint64_t v38 = v72;
    *(void *)&long long v26 = v73;
    uint64_t v39 = v74;
    *(void *)&long long v25 = v75;
    uint64_t v40 = v76;
    *(void *)&long long v24 = v77;
    uint64_t v41 = v78;
    *(void *)&long long v23 = v79;
    uint64_t v42 = v80;
    *(void *)&long long v22 = v81;
    uint64_t v43 = v82;
  }
  *a1 = v29;
  a1[1] = v36;
  a1[2] = v28;
  a1[3] = v37;
  a1[4] = v27;
  a1[5] = v38;
  a1[6] = v26;
  a1[7] = v39;
  a1[8] = v25;
  a1[9] = v40;
  a1[10] = v24;
  a1[11] = v41;
  a1[12] = v23;
  a1[13] = v42;
  a1[14] = v22;
  a1[15] = v43;
}

void ParticipantViewModel.participantDetails.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_60();
  _s15ConversationKit11ParticipantVWOcTm_2(v0, v0, (void (*)(void))type metadata accessor for ParticipantViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v8 = v0
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                  + 48);
      unint64_t v9 = *(void **)v8;
      uint64_t v10 = *(void *)(v8 + 72);
      uint64_t v11 = *(void *)(v8 + 80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      outlined consume of AnsweringMachineCallStatus?(v10, v11);
      outlined init with take of ParticipantViewModel.ParticipantDetails(v0, v2);
      goto LABEL_7;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v6 = v0 + *(int *)(v5 + 48);
    uint64_t v7 = v0 + *(int *)(v5 + 64);
    outlined init with take of ParticipantViewModel.ParticipantDetails(v0, v2);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v7);
  }
  else
  {
    uint64_t v6 = v0
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                + 48);
    outlined init with take of ParticipantViewModel.ParticipantDetails(v0, v2);
  }
  outlined destroy of ParticipantVideoView.ViewModel(v6);
LABEL_7:
  OUTLINED_FUNCTION_28();
}

void ParticipantViewModel.compatibleWithRoster.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  _s15ConversationKit11ParticipantVWOcTm_2(v0, v5 - v4, (void (*)(void))type metadata accessor for ParticipantViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel));
      uint64_t v11 = v6 + *(int *)(v10 + 48);
      __int16 v12 = *(void **)v11;
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v30 = *(void *)(v11 + 24);
      uint64_t v31 = *(void *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 32);
      uint64_t v29 = *(void *)(v11 + 40);
      uint64_t v15 = *(void *)(v11 + 48);
      uint64_t v16 = *(void *)(v11 + 56);
      char v27 = *(unsigned char *)(v11 + 65);
      char v28 = *(unsigned char *)(v11 + 64);
      uint64_t v17 = *(void *)(v11 + 80);
      uint64_t v25 = *(void *)(v11 + 72);
      long long v26 = *(void **)v11;
      outlined init with take of ParticipantViewModel.ParticipantDetails(v6, v2);
      id v18 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of AnsweringMachineCallStatus?(v25, v17);
      uint64_t v19 = v2 + *(int *)(v10 + 48);
      id v20 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v21 = OUTLINED_FUNCTION_26_14();
      outlined copy of (title: String, subtitle: String?)?(v21, v22);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v19 = v26;
      *(void *)(v19 + 8) = v31;
      *(void *)(v19 + 16) = v13;
      *(void *)(v19 + 24) = v30;
      *(void *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v29;
      *(void *)(v19 + 48) = v15;
      *(void *)(v19 + 56) = v16;
      *(unsigned char *)(v19 + 64) = v28;
      *(unsigned char *)(v19 + 65) = v27;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v23 = OUTLINED_FUNCTION_26_14();
      outlined consume of AnsweringMachineCallStatus?(v23, v24);
      goto LABEL_7;
    }
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    int v9 = *(_DWORD *)(v8 + 48);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v6 + *(int *)(v8 + 64));
  }
  else
  {
    int v9 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
  }
  outlined destroy of ParticipantVideoView.ViewModel(v6 + v9);
  _s15ConversationKit11ParticipantVWOhTm_0(v6, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
  _s15ConversationKit11ParticipantVWOcTm_2(v0, v2, (void (*)(void))type metadata accessor for ParticipantViewModel);
LABEL_7:
  OUTLINED_FUNCTION_28();
}

void ParticipantViewModel.hash(into:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v3 - 8);
  OUTLINED_FUNCTION_36();
  uint64_t v6 = v4 - v5;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v45 - v9;
  MEMORY[0x1F4188790](v8);
  __int16 v12 = (char *)&v45 - v11;
  type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_60();
  _s15ConversationKit11ParticipantVWOcTm_2(v0, v0, (void (*)(void))type metadata accessor for ParticipantViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v23 = (const void *)(v0
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                                + 48));
    outlined init with take of ParticipantViewModel.ParticipantDetails(v0, (uint64_t)v12);
    memcpy(v56, v23, 0xACuLL);
    Hasher._combine(_:)(0);
    ParticipantViewModel.ParticipantDetails.hash(into:)();
    outlined init with copy of FeatureEligibility?((uint64_t)v56, (uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    Swift::UInt v24 = v58;
    if (v58)
    {
      uint64_t v25 = v59;
      unsigned __int8 v26 = __swift_project_boxed_opaque_existential_1(v57, v58);
      (*(void (**)(Swift::UInt, uint64_t))(v25 + 8))(v24, v25);
      OUTLINED_FUNCTION_20_15();
      if ((v26 & 1) == 0)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v24);
LABEL_15:
        OUTLINED_FUNCTION_15_21((uint64_t)v56);
        CATransform3D.hash(into:)();
        ParticipantVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v41, v42, v43, v44);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v56);
        uint64_t v40 = (uint64_t)v12;
        goto LABEL_16;
      }
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    }
    Hasher._combine(_:)(0);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v16 = (const void *)(v0 + *(int *)(v15 + 48));
    uint64_t v17 = v0 + *(int *)(v15 + 64);
    outlined init with take of ParticipantViewModel.ParticipantDetails(v0, (uint64_t)v10);
    memcpy(v56, v16, 0xACuLL);
    outlined init with take of ParticipantVideoOverlayView.ViewModel(v17, (uint64_t)v55);
    Hasher._combine(_:)(1uLL);
    ParticipantViewModel.ParticipantDetails.hash(into:)();
    outlined init with copy of FeatureEligibility?((uint64_t)v56, (uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    uint64_t v18 = v58;
    if (v58)
    {
      uint64_t v19 = v59;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      Swift::UInt v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
      char v22 = v21;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      if ((v22 & 1) == 0)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v20);
LABEL_12:
        OUTLINED_FUNCTION_15_21((uint64_t)v56);
        CATransform3D.hash(into:)();
        ParticipantVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v36, v37, v38, v39);
        ParticipantVideoOverlayView.ViewModel.hash(into:)(v2);
        outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v55);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v56);
        uint64_t v40 = (uint64_t)v10;
LABEL_16:
        _s15ConversationKit11ParticipantVWOhTm_0(v40, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    }
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  uint64_t v27 = v0
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
               + 48);
  char v28 = *(void **)v27;
  uint64_t v52 = *(void *)(v27 + 8);
  id v53 = v28;
  uint64_t v54 = *(void *)(v27 + 16);
  uint64_t v29 = *(void *)(v27 + 24);
  uint64_t v30 = *(void *)(v27 + 32);
  uint64_t v31 = *(void *)(v27 + 48);
  uint64_t v50 = *(void *)(v27 + 40);
  uint64_t v51 = v29;
  uint64_t v45 = v31;
  uint64_t v46 = v30;
  uint64_t v47 = *(void *)(v27 + 56);
  LODWORD(v29) = *(unsigned __int8 *)(v27 + 64);
  int v48 = *(unsigned __int8 *)(v27 + 65);
  int v49 = v29;
  uint64_t v32 = *(void *)(v27 + 72);
  uint64_t v33 = *(void *)(v27 + 80);
  uint64_t v34 = *(void *)(v27 + 88);
  uint64_t v35 = *(void *)(v27 + 96);
  outlined init with take of ParticipantViewModel.ParticipantDetails(v0, v6);
  Hasher._combine(_:)(2uLL);
  ParticipantViewModel.ParticipantDetails.hash(into:)();
  v56[0] = v28;
  v56[1] = v52;
  v56[2] = v54;
  v56[3] = v51;
  v56[4] = v46;
  v56[5] = v50;
  v56[6] = v31;
  v56[7] = v47;
  LOBYTE(v56[8]) = v49;
  BYTE1(v56[8]) = v48;
  v56[9] = v32;
  v56[10] = v33;
  v56[11] = v34;
  v56[12] = v35;
  ParticipantMonogramView.ViewModel.hash(into:)(v2);
  _s15ConversationKit11ParticipantVWOhTm_0(v6, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of AnsweringMachineCallStatus?(v32, v33);
LABEL_17:
  OUTLINED_FUNCTION_28();
}

void static ParticipantViewModel.== infix(_:_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v4 - 8);
  OUTLINED_FUNCTION_36();
  uint64_t v127 = v5 - v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v126 = (uint64_t)v101 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v101 - v10;
  type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_36();
  uint64_t v15 = v13 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v101 - v17;
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)v101 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel, ParticipantViewModel));
  MEMORY[0x1F4188790](v22 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v25 = v24 - v23;
  uint64_t v27 = v25 + *(int *)(v26 + 56);
  uint64_t v28 = v3;
  uint64_t v29 = v25;
  _s15ConversationKit11ParticipantVWOcTm_2(v28, v25, (void (*)(void))type metadata accessor for ParticipantViewModel);
  _s15ConversationKit11ParticipantVWOcTm_2(v1, v27, (void (*)(void))type metadata accessor for ParticipantViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    _s15ConversationKit11ParticipantVWOcTm_2(v29, (uint64_t)v21, (void (*)(void))type metadata accessor for ParticipantViewModel);
    uint64_t v39 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                 + 48);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ParticipantVideoView.ViewModel((uint64_t)&v21[v39]);
      goto LABEL_16;
    }
    uint64_t v67 = (uint64_t)v11;
    outlined init with take of ParticipantViewModel.ParticipantDetails(v27, (uint64_t)v11);
    memcpy(v132, &v21[v39], 0xACuLL);
    memcpy(v130, (const void *)(v27 + v39), 0xACuLL);
    char v68 = static ParticipantViewModel.ParticipantDetails.== infix(_:_:)((uint64_t)v21, (uint64_t)v11);
    _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v21, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
    if ((v68 & 1) == 0)
    {
      outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v130);
      outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v132);
      _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
      uint64_t v73 = v29;
LABEL_35:
      _s15ConversationKit11ParticipantVWOhTm_0(v73, (void (*)(void))type metadata accessor for ParticipantViewModel);
      goto LABEL_36;
    }
    Hasher.init(_seed:)();
    outlined init with copy of FeatureEligibility?((uint64_t)v132, (uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    Swift::UInt v69 = v137;
    if (v137)
    {
      uint64_t v70 = v29;
      uint64_t v71 = OUTLINED_FUNCTION_2_41(v136);
      v72(v71);
      OUTLINED_FUNCTION_20_15();
      if ((v68 & 1) == 0)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v69);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v70 = v29;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    }
    Hasher._combine(_:)(0);
LABEL_39:
    OUTLINED_FUNCTION_15_21((uint64_t)v132);
    CATransform3D.hash(into:)();
    ParticipantVideoView.ViewModel.contentsRect.getter();
    CGRect.hash(into:)(v88, v89, v90, v91);
    Hasher._finalize()();
    Hasher.init(_seed:)();
    outlined init with copy of FeatureEligibility?((uint64_t)v130, (uint64_t)v133, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    uint64_t v92 = v134;
    if (v134)
    {
      uint64_t v93 = v135;
      __swift_project_boxed_opaque_existential_1(v133, v134);
      Swift::UInt v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v92, v93);
      char v96 = v95;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
      if ((v96 & 1) == 0)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v94);
LABEL_44:
        OUTLINED_FUNCTION_28_11();
        CATransform3D.hash(into:)();
        ParticipantVideoView.ViewModel.contentsRect.getter();
        CGRect.hash(into:)(v97, v98, v99, v100);
        Hasher._finalize()();
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v130);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v132);
        _s15ConversationKit11ParticipantVWOhTm_0(v67, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        uint64_t v73 = v70;
        goto LABEL_35;
      }
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v133, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
    }
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }
  uint64_t v128 = v29;
  if (EnumCaseMultiPayload == 1)
  {
    _s15ConversationKit11ParticipantVWOcTm_2(v29, (uint64_t)v18, (void (*)(void))type metadata accessor for ParticipantViewModel);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v32 = *(int *)(v31 + 48);
    uint64_t v33 = *(int *)(v31 + 64);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v34 = v126;
      outlined init with take of ParticipantViewModel.ParticipantDetails(v27, v126);
      memcpy(v132, &v18[v32], 0xACuLL);
      outlined init with take of ParticipantVideoOverlayView.ViewModel((uint64_t)&v18[v33], (uint64_t)v131);
      memcpy(v130, (const void *)(v27 + v32), 0xACuLL);
      outlined init with take of ParticipantVideoOverlayView.ViewModel(v27 + v33, (uint64_t)v129);
      char v35 = static ParticipantViewModel.ParticipantDetails.== infix(_:_:)((uint64_t)v18, v34);
      _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v18, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
      if ((v35 & 1) == 0)
      {
LABEL_33:
        outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v129);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v130);
        outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v131);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v132);
        _s15ConversationKit11ParticipantVWOhTm_0(v34, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        goto LABEL_34;
      }
      Hasher.init(_seed:)();
      outlined init with copy of FeatureEligibility?((uint64_t)v132, (uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
      Swift::UInt v36 = v137;
      if (v137)
      {
        uint64_t v37 = OUTLINED_FUNCTION_2_41(v136);
        v38(v37);
        OUTLINED_FUNCTION_20_15();
        if ((v35 & 1) == 0)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v36);
          goto LABEL_25;
        }
      }
      else
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
      }
      Hasher._combine(_:)(0);
LABEL_25:
      OUTLINED_FUNCTION_15_21((uint64_t)v132);
      CATransform3D.hash(into:)();
      ParticipantVideoView.ViewModel.contentsRect.getter();
      CGRect.hash(into:)(v74, v75, v76, v77);
      Swift::Int v78 = Hasher._finalize()();
      Hasher.init(_seed:)();
      outlined init with copy of FeatureEligibility?((uint64_t)v130, (uint64_t)v133, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
      if (v134)
      {
        uint64_t v79 = OUTLINED_FUNCTION_2_41(v133);
        Swift::UInt v81 = v80(v79);
        char v83 = v82;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
        if ((v83 & 1) == 0)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v81);
          goto LABEL_30;
        }
      }
      else
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v133, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
      }
      Hasher._combine(_:)(0);
LABEL_30:
      OUTLINED_FUNCTION_28_11();
      CATransform3D.hash(into:)();
      ParticipantVideoView.ViewModel.contentsRect.getter();
      CGRect.hash(into:)(v84, v85, v86, v87);
      if (v78 == Hasher._finalize()())
      {
        static ParticipantVideoOverlayView.ViewModel.== infix(_:_:)((uint64_t)v131, (uint64_t)v129);
        outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v129);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v130);
        outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v131);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v132);
        _s15ConversationKit11ParticipantVWOhTm_0(v34, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)&v18[v33]);
    outlined destroy of ParticipantVideoView.ViewModel((uint64_t)&v18[v32]);
    char v21 = v18;
  }
  else
  {
    _s15ConversationKit11ParticipantVWOcTm_2(v29, v15, (void (*)(void))type metadata accessor for ParticipantViewModel);
    uint64_t v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                 + 48);
    Swift::Int v41 = *(void *)(v15 + v40 + 8);
    uint64_t v42 = *(void *)(v15 + v40 + 16);
    id v123 = *(id *)(v15 + v40);
    uint64_t v124 = v42;
    uint64_t v43 = *(void *)(v15 + v40 + 32);
    id v119 = *(id *)(v15 + v40 + 24);
    Swift::Int v120 = v41;
    uint64_t v44 = *(void *)(v15 + v40 + 48);
    uint64_t v118 = *(void *)(v15 + v40 + 40);
    uint64_t v45 = *(void *)(v15 + v40 + 56);
    int v46 = *(unsigned __int8 *)(v15 + v40 + 64);
    int v116 = *(unsigned __int8 *)(v15 + v40 + 65);
    int v117 = v46;
    uint64_t v48 = *(void *)(v15 + v40 + 72);
    uint64_t v47 = *(void *)(v15 + v40 + 80);
    uint64_t v49 = *(void *)(v15 + v40 + 96);
    uint64_t v125 = *(void *)(v15 + v40 + 88);
    uint64_t v126 = v47;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v50 = v45;
      uint64_t v51 = v124;
      uint64_t v52 = *(void **)(v27 + v40);
      uint64_t v53 = *(void *)(v27 + v40 + 8);
      uint64_t v121 = *(void *)(v27 + v40 + 16);
      uint64_t v122 = v49;
      uint64_t v105 = *(void *)(v27 + v40 + 24);
      uint64_t v106 = v53;
      uint64_t v54 = *(void *)(v27 + v40 + 32);
      uint64_t v104 = *(void *)(v27 + v40 + 40);
      uint64_t v110 = *(void *)(v27 + v40 + 48);
      uint64_t v111 = v54;
      uint64_t v55 = *(void *)(v27 + v40 + 56);
      id v108 = v52;
      uint64_t v109 = v55;
      LODWORD(v52) = *(unsigned __int8 *)(v27 + v40 + 64);
      int v102 = *(unsigned __int8 *)(v27 + v40 + 65);
      int v103 = (int)v52;
      uint64_t v56 = *(void *)(v27 + v40 + 80);
      uint64_t v112 = *(void *)(v27 + v40 + 72);
      uint64_t v113 = v56;
      uint64_t v57 = *(void *)(v27 + v40 + 96);
      uint64_t v114 = *(void *)(v27 + v40 + 88);
      uint64_t v115 = v57;
      uint64_t v58 = v127;
      outlined init with take of ParticipantViewModel.ParticipantDetails(v27, v127);
      char v59 = static ParticipantViewModel.ParticipantDetails.== infix(_:_:)(v15, v58);
      _s15ConversationKit11ParticipantVWOhTm_0(v15, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
      if (v59)
      {
        id v60 = v123;
        v132[0] = v123;
        v132[1] = v120;
        v132[2] = v51;
        v132[3] = v119;
        v132[4] = v43;
        v132[5] = v118;
        v132[6] = v44;
        v132[7] = v50;
        LOBYTE(v132[8]) = v117;
        BYTE1(v132[8]) = v116;
        uint64_t v107 = v48;
        v132[9] = v48;
        v132[10] = v126;
        v132[11] = v125;
        v132[12] = v122;
        Hasher.init(_seed:)();
        id v123 = v60;
        swift_bridgeObjectRetain();
        v101[2] = v43;
        swift_bridgeObjectRetain();
        v101[1] = v44;
        swift_bridgeObjectRetain();
        v101[0] = v50;
        swift_bridgeObjectRetain();
        uint64_t v61 = v107;
        uint64_t v62 = v126;
        outlined copy of (title: String, subtitle: String?)?(v107, v126);
        ParticipantMonogramView.ViewModel.hash(into:)((uint64_t)v130);
        Swift::Int v120 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of AnsweringMachineCallStatus?(v61, v62);
        id v63 = v108;
        v132[0] = v108;
        v132[1] = v106;
        v132[2] = v121;
        v132[3] = v105;
        v132[4] = v111;
        v132[5] = v104;
        v132[6] = v110;
        v132[7] = v109;
        LOBYTE(v132[8]) = v103;
        BYTE1(v132[8]) = v102;
        uint64_t v65 = v112;
        uint64_t v64 = v113;
        v132[9] = v112;
        v132[10] = v113;
        v132[11] = v114;
        v132[12] = v115;
        Hasher.init(_seed:)();
        id v119 = v63;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of (title: String, subtitle: String?)?(v65, v64);
        ParticipantMonogramView.ViewModel.hash(into:)((uint64_t)v130);
        Hasher._finalize()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v66 = v119;

        OUTLINED_FUNCTION_27_14();
        _s15ConversationKit11ParticipantVWOhTm_0(v127, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        OUTLINED_FUNCTION_27_14();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of AnsweringMachineCallStatus?(v107, v126);
LABEL_32:
        uint64_t v73 = v128;
        goto LABEL_35;
      }
      _s15ConversationKit11ParticipantVWOhTm_0(v58, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      outlined consume of AnsweringMachineCallStatus?(v112, v113);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      outlined consume of AnsweringMachineCallStatus?(v48, v126);
LABEL_34:
      uint64_t v73 = v128;
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined consume of AnsweringMachineCallStatus?(v48, v126);
    char v21 = (char *)v15;
  }
  uint64_t v29 = v128;
LABEL_16:
  _s15ConversationKit11ParticipantVWOhTm_0((uint64_t)v21, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v29, &demangling cache variable for type metadata for (ParticipantViewModel, ParticipantViewModel));
LABEL_36:
  OUTLINED_FUNCTION_28();
}

uint64_t static ParticipantViewModel.ParticipantDetails.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
LABEL_16:
    char v11 = 0;
    return v11 & 1;
  }
  uint64_t v4 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v11 = 0, (v10 & 1) != 0))
  {
    OUTLINED_FUNCTION_9_31();
    if (v9)
    {
      OUTLINED_FUNCTION_9_31();
      if (v9)
      {
        OUTLINED_FUNCTION_9_31();
        if (v9)
        {
          OUTLINED_FUNCTION_9_31();
          if (v9)
          {
            OUTLINED_FUNCTION_9_31();
            if (v9)
            {
              char v11 = *(unsigned char *)(a1 + *(int *)(v4 + 44)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 44)) ^ 1;
              return v11 & 1;
            }
          }
        }
      }
    }
    goto LABEL_16;
  }
  return v11 & 1;
}

Swift::Int ParticipantViewModel.hashValue.getter()
{
  return ParticipantViewModel.hashValue.getter((void (*)(unsigned char *))ParticipantViewModel.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantViewModel(a1, a2, a3, (void (*)(unsigned char *))ParticipantViewModel.hash(into:));
}

void ParticipantViewModel.ParticipantDetails.hash(into:)()
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[6]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[7]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[8]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[9]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[10]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[11]));
}

Swift::Int ParticipantViewModel.ParticipantDetails.hashValue.getter()
{
  return ParticipantViewModel.hashValue.getter((void (*)(unsigned char *))ParticipantViewModel.ParticipantDetails.hash(into:));
}

Swift::Int ParticipantViewModel.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantViewModel(a1, a2, a3, (void (*)(unsigned char *))ParticipantViewModel.ParticipantDetails.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantViewModel(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

void *static Participant.transformForLocalParticipant(deviceOrientation:cameraType:currentIdiom:defaults:)@<X0>(CGFloat a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  specialized static Participant.transformForLocalParticipant(deviceOrientation:cameraType:currentIdiom:defaults:)(a1, a2, a3, ObjectType, a4, v12);
  return memcpy(a5, v12, 0x80uLL);
}

void static Participant.compensatedVideoRotation(_:videoTransform:effectsEnabled:)(uint64_t a1@<X0>, CGFloat *a2@<X1>, char a3@<W2>, CGFloat *a4@<X8>)
{
  CGFloat m11 = *a2;
  CGFloat m12 = a2[1];
  CGFloat m13 = a2[2];
  CGFloat m14 = a2[3];
  CGFloat m21 = a2[4];
  CGFloat m22 = a2[5];
  CGFloat m23 = a2[6];
  CGFloat m24 = a2[7];
  CGFloat v38 = a2[9];
  CGFloat v39 = a2[8];
  CGFloat v36 = a2[11];
  CGFloat v37 = a2[10];
  CGFloat v34 = a2[13];
  CGFloat v35 = a2[12];
  CGFloat v32 = a2[15];
  CGFloat v33 = a2[14];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  char v15 = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 632))();
  id v16 = objc_msgSend(self, sel_currentDevice);
  id v17 = objc_msgSend(v16, sel_userInterfaceIdiom);

  if (v15)
  {
    if (v17 == (id)2)
    {
      CGFloat m32 = v38;
      CGFloat m31 = v39;
      CGFloat m34 = v36;
      CGFloat m33 = v37;
      CGFloat m42 = v34;
      CGFloat m41 = v35;
      CGFloat m44 = v32;
      CGFloat m43 = v33;
    }
    else
    {
      if ((a1 | 2) == 2)
      {
        double v27 = 1.0;
        if (a3) {
          double v27 = -1.0;
        }
        CGFloat v30 = v27;
        CGFloat v31 = -1.0;
        CGFloat v28 = 4.71238898;
      }
      else
      {
        double v29 = -1.0;
        if (a3) {
          double v29 = 1.0;
        }
        CGFloat v30 = v29;
        CGFloat v31 = 1.0;
        CGFloat v28 = 1.57079633;
      }
      v41.CGFloat m11 = m11;
      v41.CGFloat m12 = m12;
      v41.CGFloat m13 = m13;
      v41.CGFloat m14 = m14;
      v41.CGFloat m21 = m21;
      v41.CGFloat m22 = m22;
      v41.CGFloat m23 = m23;
      v41.CGFloat m24 = m24;
      v41.CGFloat m31 = v39;
      v41.CGFloat m32 = v38;
      v41.CGFloat m33 = v37;
      v41.CGFloat m34 = v36;
      v41.CGFloat m41 = v35;
      v41.CGFloat m42 = v34;
      v41.CGFloat m43 = v33;
      v41.CGFloat m44 = v32;
      CATransform3DRotate(&m, &v41, v28, 0.0, 0.0, 1.0);
      CATransform3D v41 = m;
      CATransform3DScale(&m, &v41, v31, v30, 1.0);
      CGFloat m11 = m.m11;
      CGFloat m12 = m.m12;
      CGFloat m13 = m.m13;
      CGFloat m14 = m.m14;
      CGFloat m21 = m.m21;
      CGFloat m22 = m.m22;
      CGFloat m24 = m.m24;
      CGFloat m23 = m.m23;
      CGFloat m32 = m.m32;
      CGFloat m31 = m.m31;
      CGFloat m34 = m.m34;
      CGFloat m33 = m.m33;
      CGFloat m42 = m.m42;
      CGFloat m41 = m.m41;
      CGFloat m44 = m.m44;
      CGFloat m43 = m.m43;
    }
  }
  else
  {
    BOOL v26 = v17 == (id)2 && a1 == 1;
    CGFloat m32 = v38;
    CGFloat m31 = v39;
    CGFloat m34 = v36;
    CGFloat m33 = v37;
    CGFloat m42 = v34;
    CGFloat m41 = v35;
    CGFloat m44 = v32;
    CGFloat m43 = v33;
    if (v26)
    {
      CGAffineTransformMakeRotation((CGAffineTransform *)&v41, 1.57079633);
      *(_OWORD *)&m.CGFloat m11 = *(_OWORD *)&v41.m11;
      *(_OWORD *)&m.CGFloat m13 = *(_OWORD *)&v41.m13;
      *(_OWORD *)&m.CGFloat m21 = *(_OWORD *)&v41.m21;
      CATransform3DMakeAffineTransform(&v41, (CGAffineTransform *)&m);
      CGFloat m11 = v41.m11;
      CGFloat m12 = v41.m12;
      CGFloat m13 = v41.m13;
      CGFloat m14 = v41.m14;
      CGFloat m21 = v41.m21;
      CGFloat m22 = v41.m22;
      CGFloat m24 = v41.m24;
      CGFloat m23 = v41.m23;
      CGFloat m32 = v41.m32;
      CGFloat m31 = v41.m31;
      CGFloat m34 = v41.m34;
      CGFloat m33 = v41.m33;
      CGFloat m42 = v41.m42;
      CGFloat m41 = v41.m41;
      CGFloat m44 = v41.m44;
      CGFloat m43 = v41.m43;
    }
  }
  *a4 = m11;
  a4[1] = m12;
  a4[2] = m13;
  a4[3] = m14;
  a4[4] = m21;
  a4[5] = m22;
  a4[6] = m23;
  a4[7] = m24;
  a4[8] = m31;
  a4[9] = m32;
  a4[10] = m33;
  a4[11] = m34;
  a4[12] = m41;
  a4[13] = m42;
  a4[14] = m43;
  a4[15] = m44;
}

double static Participant.rotationFor(_:cameraPosition:)(uint64_t a1, char a2)
{
  double result = -1.57079633;
  switch(a1)
  {
    case 0:
      double result = dbl_1C376F250[a2 == 1];
      break;
    case 1:
      double result = 1.57079633;
      break;
    case 2:
      double result = 3.14159265;
      if (a2 != 1) {
        double result = 0.0;
      }
      break;
    case 3:
      return result;
    default:
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1C30C1394);
  }
  return result;
}

void static Participant.affineTransformForRemote(_:)(uint64_t a1@<X0>, CGFloat *a2@<X8>)
{
  id v4 = objc_msgSend(self, sel_currentDevice);
  id v5 = objc_msgSend(v4, sel_userInterfaceIdiom);

  CGFloat b = 0.0;
  CGFloat a = 1.0;
  if (v5 || (swift_beginAccess(), (static AmbientState.isPresented & 1) != 0))
  {
    double c = OUTLINED_FUNCTION_24_4();
  }
  else
  {
    double c = OUTLINED_FUNCTION_24_4();
    switch(a1)
    {
      case 0:
        CGFloat v12 = 1.57079633;
        goto LABEL_9;
      case 1:
        break;
      case 2:
        CGFloat v12 = -1.57079633;
        goto LABEL_9;
      case 3:
        CGFloat v12 = 3.14159265;
LABEL_9:
        CGAffineTransformMakeRotation(&v15, v12);
        CGFloat a = v15.a;
        CGFloat b = v15.b;
        double c = v15.c;
        CGFloat d = v15.d;
        CGFloat tx = v15.tx;
        tCGFloat y = v15.ty;
        break;
      default:
        v15.CGFloat a = 0.0;
        v15.CGFloat b = -2.68156159e154;
        _StringGuts.grow(_:)(64);
        OUTLINED_FUNCTION_47();
        v13._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
        String.append(_:)(v13);
        uint64_t v16 = a1;
        v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1C30C1560);
    }
  }
  *a2 = a;
  a2[1] = b;
  a2[2] = c;
  a2[3] = d;
  a2[4] = tx;
  a2[5] = ty;
}

CGFloat static Participant.transformForRemote(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  static Participant.affineTransformForRemote(_:)(a1, &v13.a);
  CGAffineTransform m = v13;
  CATransform3DMakeAffineTransform(&v11, &m);
  CGFloat result = v11.m11;
  long long v4 = *(_OWORD *)&v11.m13;
  long long v5 = *(_OWORD *)&v11.m21;
  long long v6 = *(_OWORD *)&v11.m23;
  long long v7 = *(_OWORD *)&v11.m31;
  long long v8 = *(_OWORD *)&v11.m33;
  long long v9 = *(_OWORD *)&v11.m41;
  long long v10 = *(_OWORD *)&v11.m43;
  *a2 = *(_OWORD *)&v11.m11;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v10;
  return result;
}

unint64_t static Participant.screenRotationFor(_:)(unint64_t result)
{
  if (result >= 4)
  {
    _StringGuts.grow(_:)(55);
    v1._object = (void *)0x80000001C37981B0;
    v1._uint64_t countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    CGFloat result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

CGFloat specialized static Participant.transformForLocalParticipant(deviceOrientation:cameraType:currentIdiom:defaults:)@<D0>(CGFloat a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, CGFloat *a5@<X8>)
{
  if (a3 <= 5 && ((1 << a3) & 0x26) != 0 || (swift_beginAccess(), (static AmbientState.isPresented & 1) != 0))
  {
    if (((*(uint64_t (**)(void))(*(void *)a4 + 880))() & 1) == 0 || (a3 == 1 ? (BOOL v10 = a2 == 1) : (BOOL v10 = 0), !v10))
    {
      long long v11 = xmmword_1C376AEC0;
      long long v12 = xmmword_1C376F260;
      long long v13 = 0uLL;
      switch(*(void *)&a1)
      {
        case 0:
          goto LABEL_14;
        case 1:
          goto LABEL_16;
        case 2:
          CGFloat v14 = 1.57079633;
          goto LABEL_15;
        case 3:
          goto LABEL_13;
        default:
          v33.CGFloat m11 = 0.0;
          v33.CGFloat m12 = -2.68156159e154;
          _StringGuts.grow(_:)(70);
          v31._object = (void *)0x80000001C3798040;
          v31._uint64_t countAndFlagsBits = 0xD000000000000044;
          String.append(_:)(v31);
          m.CGFloat a = a1;
          v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1C30C1938);
      }
    }
    if ((*(uint64_t (**)(void))(*(void *)a4 + 632))()) {
LABEL_13:
    }
      CGFloat v14 = 3.14159265;
    else {
LABEL_14:
    }
      CGFloat v14 = -1.57079633;
LABEL_15:
    CGAffineTransformMakeRotation((CGAffineTransform *)&v33, v14);
    long long v12 = *(_OWORD *)&v33.m11;
    long long v11 = *(_OWORD *)&v33.m13;
    long long v13 = *(_OWORD *)&v33.m21;
LABEL_16:
    *(_OWORD *)&m.CGFloat a = v12;
    *(_OWORD *)&m.double c = v11;
    *(_OWORD *)&m.CGFloat tx = v13;
  }
  else
  {
    m.CGFloat a = 1.0;
    m.CGFloat b = 0.0;
    m.double c = 0.0;
    m.CGFloat d = 1.0;
    m.CGFloat tx = 0.0;
    m.tCGFloat y = 0.0;
  }
  CATransform3DMakeAffineTransform(&v33, &m);
  CGFloat result = v33.m11;
  CGFloat m12 = v33.m12;
  CGFloat m13 = v33.m13;
  CGFloat m14 = v33.m14;
  CGFloat m21 = v33.m21;
  CGFloat m22 = v33.m22;
  CGFloat m23 = v33.m23;
  CGFloat m24 = v33.m24;
  CGFloat m31 = v33.m31;
  CGFloat m32 = v33.m32;
  CGFloat m33 = v33.m33;
  CGFloat m34 = v33.m34;
  CGFloat m41 = v33.m41;
  CGFloat m42 = v33.m42;
  CGFloat m43 = v33.m43;
  CGFloat m44 = v33.m44;
  *a5 = v33.m11;
  a5[1] = m12;
  a5[2] = m13;
  a5[3] = m14;
  a5[4] = m21;
  a5[5] = m22;
  a5[6] = m23;
  a5[7] = m24;
  a5[8] = m31;
  a5[9] = m32;
  a5[10] = m33;
  a5[11] = m34;
  a5[12] = m41;
  a5[13] = m42;
  a5[14] = m43;
  a5[15] = m44;
  return result;
}

uint64_t type metadata accessor for ParticipantViewModel.ParticipantDetails(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantViewModel.ParticipantDetails);
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_2(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t outlined retain of SymbolImageDescription(uint64_t a1)
{
  Swift::String v2 = *(void **)(a1 + 24);
  id v3 = *(id *)(a1 + 56);
  swift_bridgeObjectRetain();
  id v4 = v2;
  return a1;
}

uint64_t *outlined release of Participant.CopresenceInfo?(uint64_t *a1)
{
  return a1;
}

uint64_t type metadata accessor for ParticipantViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantViewModel);
}

uint64_t outlined init with take of ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ParticipantVideoView.ViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of (title: String, subtitle: String?)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s15ConversationKit11ParticipantVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

CGFloat specialized static Participant.transformForLocalParticipant(deviceOrientation:cameraType:currentIdiom:defaults:)@<D0>(CGFloat a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, CGFloat *a6@<X8>)
{
  if (a3 <= 5 && ((1 << a3) & 0x26) != 0 || (swift_beginAccess(), (static AmbientState.isPresented & 1) != 0))
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 624))(a4, a5) & 1) == 0
      || (a3 == 1 ? (BOOL v12 = a2 == 1) : (BOOL v12 = 0), !v12))
    {
      long long v13 = xmmword_1C376AEC0;
      long long v14 = xmmword_1C376F260;
      long long v15 = 0uLL;
      switch(*(void *)&a1)
      {
        case 0:
          goto LABEL_14;
        case 1:
          goto LABEL_16;
        case 2:
          CGFloat v16 = 1.57079633;
          goto LABEL_15;
        case 3:
          goto LABEL_13;
        default:
          v35.CGFloat m11 = 0.0;
          v35.CGFloat m12 = -2.68156159e154;
          _StringGuts.grow(_:)(70);
          v33._object = (void *)0x80000001C3798040;
          v33._uint64_t countAndFlagsBits = 0xD000000000000044;
          String.append(_:)(v33);
          m.CGFloat a = a1;
          v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1C30C1E20);
      }
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 648))(a4, a5)) {
LABEL_13:
    }
      CGFloat v16 = 3.14159265;
    else {
LABEL_14:
    }
      CGFloat v16 = -1.57079633;
LABEL_15:
    CGAffineTransformMakeRotation((CGAffineTransform *)&v35, v16);
    long long v14 = *(_OWORD *)&v35.m11;
    long long v13 = *(_OWORD *)&v35.m13;
    long long v15 = *(_OWORD *)&v35.m21;
LABEL_16:
    *(_OWORD *)&m.CGFloat a = v14;
    *(_OWORD *)&m.double c = v13;
    *(_OWORD *)&m.CGFloat tx = v15;
  }
  else
  {
    m.CGFloat a = 1.0;
    m.CGFloat b = 0.0;
    m.double c = 0.0;
    m.CGFloat d = 1.0;
    m.CGFloat tx = 0.0;
    m.tCGFloat y = 0.0;
  }
  CATransform3DMakeAffineTransform(&v35, &m);
  CGFloat result = v35.m11;
  CGFloat m12 = v35.m12;
  CGFloat m13 = v35.m13;
  CGFloat m14 = v35.m14;
  CGFloat m21 = v35.m21;
  CGFloat m22 = v35.m22;
  CGFloat m23 = v35.m23;
  CGFloat m24 = v35.m24;
  CGFloat m31 = v35.m31;
  CGFloat m32 = v35.m32;
  CGFloat m33 = v35.m33;
  CGFloat m34 = v35.m34;
  CGFloat m41 = v35.m41;
  CGFloat m42 = v35.m42;
  CGFloat m43 = v35.m43;
  CGFloat m44 = v35.m44;
  *a6 = v35.m11;
  a6[1] = m12;
  a6[2] = m13;
  a6[3] = m14;
  a6[4] = m21;
  a6[5] = m22;
  a6[6] = m23;
  a6[7] = m24;
  a6[8] = m31;
  a6[9] = m32;
  a6[10] = m33;
  a6[11] = m34;
  a6[12] = m41;
  a6[13] = m42;
  a6[14] = m43;
  a6[15] = m44;
  return result;
}

uint64_t base witness table accessor for Equatable in ParticipantViewModel()
{
  return lazy protocol witness table accessor for type ParticipantViewModel and conformance ParticipantViewModel(&lazy protocol witness table cache variable for type ParticipantViewModel and conformance ParticipantViewModel, (void (*)(uint64_t))type metadata accessor for ParticipantViewModel);
}

uint64_t base witness table accessor for Equatable in ParticipantViewModel.ParticipantDetails()
{
  return lazy protocol witness table accessor for type ParticipantViewModel and conformance ParticipantViewModel(&lazy protocol witness table cache variable for type ParticipantViewModel.ParticipantDetails and conformance ParticipantViewModel.ParticipantDetails, (void (*)(uint64_t))type metadata accessor for ParticipantViewModel.ParticipantDetails);
}

uint64_t lazy protocol witness table accessor for type ParticipantViewModel and conformance ParticipantViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ParticipantViewModel(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v21 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
      uint64_t v22 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v23 = v22[5];
      uint64_t v24 = (void *)((char *)a1 + v23);
      uint64_t v25 = (void *)((char *)a2 + v23);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      void *v24 = v27;
      v24[1] = v26;
      *((unsigned char *)a1 + v22[6]) = *((unsigned char *)a2 + v22[6]);
      *((unsigned char *)a1 + v22[7]) = *((unsigned char *)a2 + v22[7]);
      *((unsigned char *)a1 + v22[8]) = *((unsigned char *)a2 + v22[8]);
      *((unsigned char *)a1 + v22[9]) = *((unsigned char *)a2 + v22[9]);
      *((unsigned char *)a1 + v22[10]) = *((unsigned char *)a2 + v22[10]);
      *((unsigned char *)a1 + v22[11]) = *((unsigned char *)a2 + v22[11]);
      swift_bridgeObjectRetain();
      uint64_t v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      double v29 = (char *)a1 + v28;
      CGFloat v30 = (char *)a2 + v28;
      Swift::String v31 = *(void **)((char *)a2 + v28);
      uint64_t v32 = *((void *)v30 + 1);
      *(void *)double v29 = v31;
      *((void *)v29 + 1) = v32;
      uint64_t v33 = *((void *)v30 + 3);
      *((void *)v29 + 2) = *((void *)v30 + 2);
      *((void *)v29 + 3) = v33;
      uint64_t v34 = *((void *)v30 + 5);
      *((void *)v29 + 4) = *((void *)v30 + 4);
      *((void *)v29 + 5) = v34;
      uint64_t v35 = *((void *)v30 + 7);
      *((void *)v29 + 6) = *((void *)v30 + 6);
      *((void *)v29 + 7) = v35;
      v29[64] = v30[64];
      v29[65] = v30[65];
      uint64_t v36 = *((void *)v30 + 10);
      id v37 = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v36)
      {
        *((void *)v29 + 9) = *((void *)v30 + 9);
        *((void *)v29 + 10) = v36;
        uint64_t v38 = *((void *)v30 + 12);
        *((void *)v29 + 11) = *((void *)v30 + 11);
        *((void *)v29 + 12) = v38;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v57 = *(_OWORD *)(v30 + 88);
        *(_OWORD *)(v29 + 72) = *(_OWORD *)(v30 + 72);
        *(_OWORD *)(v29 + 88) = v57;
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      long long v8 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v9 = v8[5];
      BOOL v10 = (void *)((char *)a1 + v9);
      long long v11 = (void *)((char *)a2 + v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      void *v10 = v13;
      v10[1] = v12;
      *((unsigned char *)a1 + v8[6]) = *((unsigned char *)a2 + v8[6]);
      *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
      *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
      *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
      *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
      *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
      swift_bridgeObjectRetain();
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v15 = *(int *)(v14 + 48);
      CGFloat v16 = (char *)a1 + v15;
      id v17 = (char *)a2 + v15;
      uint64_t v18 = *(void *)((char *)a2 + v15 + 24);
      if (v18)
      {
        uint64_t v19 = *((void *)v17 + 4);
        *((void *)v16 + 3) = v18;
        *((void *)v16 + 4) = v19;
        (**(void (***)(char *, char *))(v18 - 8))(v16, v17);
      }
      else
      {
        long long v51 = *((_OWORD *)v17 + 1);
        *(_OWORD *)CGFloat v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v51;
        *((void *)v16 + 4) = *((void *)v17 + 4);
      }
      memcpy(v16 + 40, v17 + 40, 0x84uLL);
      uint64_t v52 = *(int *)(v14 + 64);
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      switch(v54[104])
      {
        case 1:
          long long v55 = *(_OWORD *)(v54 + 24);
          *(_OWORD *)(v53 + 24) = v55;
          (**(void (***)(void *, unsigned char *))(v55 - 8))(v53, v54);
          uint64_t v56 = *((void *)v54 + 6);
          *((void *)v53 + 5) = *((void *)v54 + 5);
          *((void *)v53 + 6) = v56;
          v53[104] = 1;
          swift_bridgeObjectRetain();
          break;
        case 2:
          uint64_t v59 = *((void *)v54 + 1);
          *(void *)uint64_t v53 = *(void *)v54;
          *((void *)v53 + 1) = v59;
          id v60 = (void *)*((void *)v54 + 3);
          *((void *)v53 + 2) = *((void *)v54 + 2);
          *((void *)v53 + 3) = v60;
          *((_WORD *)v53 + 16) = *((_WORD *)v54 + 16);
          *((void *)v53 + 5) = *((void *)v54 + 5);
          v53[48] = v54[48];
          uint64_t v61 = (void *)*((void *)v54 + 7);
          *((void *)v53 + 7) = v61;
          v53[104] = 2;
          swift_bridgeObjectRetain();
          id v62 = v60;
          goto LABEL_21;
        case 3:
          uint64_t v63 = *((void *)v54 + 1);
          *(void *)uint64_t v53 = *(void *)v54;
          *((void *)v53 + 1) = v63;
          uint64_t v64 = (void *)*((void *)v54 + 3);
          *((void *)v53 + 2) = *((void *)v54 + 2);
          *((void *)v53 + 3) = v64;
          *((_WORD *)v53 + 16) = *((_WORD *)v54 + 16);
          *((void *)v53 + 5) = *((void *)v54 + 5);
          v53[48] = v54[48];
          id v66 = (void *)*((void *)v54 + 7);
          uint64_t v65 = *((void *)v54 + 8);
          *((void *)v53 + 7) = v66;
          *((void *)v53 + 8) = v65;
          uint64_t v67 = *((void *)v54 + 9);
          uint64_t v61 = (void *)*((void *)v54 + 10);
          *((void *)v53 + 9) = v67;
          *((void *)v53 + 10) = v61;
          v53[104] = 3;
          swift_bridgeObjectRetain();
          id v68 = v64;
          id v69 = v66;
          swift_bridgeObjectRetain();
LABEL_21:
          id v70 = v61;
          break;
        case 4:
          uint64_t v71 = *(void **)v54;
          uint64_t v72 = *((void *)v54 + 1);
          *(void *)uint64_t v53 = *(void *)v54;
          *((void *)v53 + 1) = v72;
          uint64_t v73 = *((void *)v54 + 3);
          *((void *)v53 + 2) = *((void *)v54 + 2);
          *((void *)v53 + 3) = v73;
          uint64_t v74 = *((void *)v54 + 5);
          *((void *)v53 + 4) = *((void *)v54 + 4);
          *((void *)v53 + 5) = v74;
          uint64_t v75 = *((void *)v54 + 7);
          *((void *)v53 + 6) = *((void *)v54 + 6);
          *((void *)v53 + 7) = v75;
          v53[64] = v54[64];
          v53[65] = v54[65];
          uint64_t v76 = *((void *)v54 + 10);
          id v77 = v71;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v76)
          {
            *((void *)v53 + 9) = *((void *)v54 + 9);
            *((void *)v53 + 10) = v76;
            uint64_t v78 = *((void *)v54 + 11);
            uint64_t v79 = *((void *)v54 + 12);
            *((void *)v53 + 11) = v78;
            *((void *)v53 + 12) = v79;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v82 = *(_OWORD *)(v54 + 88);
            *(_OWORD *)(v53 + 72) = *(_OWORD *)(v54 + 72);
            *(_OWORD *)(v53 + 88) = v82;
          }
          v53[104] = 4;
          break;
        case 5:
          uint64_t v80 = *(void **)v54;
          *(void *)uint64_t v53 = *(void *)v54;
          v53[104] = 5;
          id v81 = v80;
          break;
        default:
          memcpy(v53, v54, 0x69uLL);
          break;
      }
    }
    else
    {
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      uint64_t v40 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v41 = v40[5];
      uint64_t v42 = (void *)((char *)a1 + v41);
      uint64_t v43 = (void *)((char *)a2 + v41);
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      *uint64_t v42 = v45;
      v42[1] = v44;
      *((unsigned char *)a1 + v40[6]) = *((unsigned char *)a2 + v40[6]);
      *((unsigned char *)a1 + v40[7]) = *((unsigned char *)a2 + v40[7]);
      *((unsigned char *)a1 + v40[8]) = *((unsigned char *)a2 + v40[8]);
      *((unsigned char *)a1 + v40[9]) = *((unsigned char *)a2 + v40[9]);
      *((unsigned char *)a1 + v40[10]) = *((unsigned char *)a2 + v40[10]);
      *((unsigned char *)a1 + v40[11]) = *((unsigned char *)a2 + v40[11]);
      swift_bridgeObjectRetain();
      uint64_t v46 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      uint64_t v47 = (char *)a1 + v46;
      uint64_t v48 = (char *)a2 + v46;
      uint64_t v49 = *((void *)v48 + 3);
      if (v49)
      {
        uint64_t v50 = *((void *)v48 + 4);
        *((void *)v47 + 3) = v49;
        *((void *)v47 + 4) = v50;
        (**(void (***)(char *, char *))(v49 - 8))(v47, v48);
      }
      else
      {
        long long v58 = *((_OWORD *)v48 + 1);
        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        *((_OWORD *)v47 + 1) = v58;
        *((void *)v47 + 4) = *((void *)v48 + 4);
      }
      memcpy(v47 + 40, v48 + 40, 0x84uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for ParticipantViewModel(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v8 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                  + 48);
LABEL_13:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v8 + 80))
      {
        swift_bridgeObjectRelease();
LABEL_15:
        swift_bridgeObjectRelease();
      }
      break;
    case 1:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v7 = a1 + *(int *)(v6 + 48);
      if (*(void *)(v7 + 24)) {
        __swift_destroy_boxed_opaque_existential_1(v7);
      }
      uint64_t v8 = a1 + *(int *)(v6 + 64);
      switch(*(unsigned char *)(v8 + 104))
      {
        case 1:
          __swift_destroy_boxed_opaque_existential_1(v8);
          goto LABEL_15;
        case 2:
          swift_bridgeObjectRelease();

          id v10 = *(id *)(v8 + 56);
          goto LABEL_22;
        case 3:
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          id v10 = *(id *)(v8 + 80);
          goto LABEL_22;
        case 4:
          goto LABEL_13;
        case 5:
          id v10 = *(id *)v8;
LABEL_22:

          break;
        default:
          return;
      }
      break;
    case 0:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v4 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                  + 48);
      if (*(void *)(v4 + 24))
      {
        __swift_destroy_boxed_opaque_existential_1(v4);
      }
      break;
  }
}

uint64_t initializeWithCopy for ParticipantViewModel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
    uint64_t v19 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    uint64_t v20 = v19[5];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (uint64_t *)(a2 + v20);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    *uint64_t v21 = v24;
    v21[1] = v23;
    *(unsigned char *)(a1 + v19[6]) = *(unsigned char *)(a2 + v19[6]);
    *(unsigned char *)(a1 + v19[7]) = *(unsigned char *)(a2 + v19[7]);
    *(unsigned char *)(a1 + v19[8]) = *(unsigned char *)(a2 + v19[8]);
    *(unsigned char *)(a1 + v19[9]) = *(unsigned char *)(a2 + v19[9]);
    *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
    *(unsigned char *)(a1 + v19[11]) = *(unsigned char *)(a2 + v19[11]);
    swift_bridgeObjectRetain();
    uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                 + 48);
    uint64_t v26 = a1 + v25;
    uint64_t v27 = a2 + v25;
    uint64_t v28 = *(void **)(a2 + v25);
    uint64_t v29 = *(void *)(v27 + 8);
    *(void *)uint64_t v26 = v28;
    *(void *)(v26 + 8) = v29;
    uint64_t v30 = *(void *)(v27 + 24);
    *(void *)(v26 + 16) = *(void *)(v27 + 16);
    *(void *)(v26 + 24) = v30;
    uint64_t v31 = *(void *)(v27 + 40);
    *(void *)(v26 + 32) = *(void *)(v27 + 32);
    *(void *)(v26 + 40) = v31;
    uint64_t v32 = *(void *)(v27 + 56);
    *(void *)(v26 + 48) = *(void *)(v27 + 48);
    *(void *)(v26 + 56) = v32;
    *(unsigned char *)(v26 + 64) = *(unsigned char *)(v27 + 64);
    *(unsigned char *)(v26 + 65) = *(unsigned char *)(v27 + 65);
    uint64_t v33 = *(void *)(v27 + 80);
    id v34 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *(void *)(v26 + 72) = *(void *)(v27 + 72);
      *(void *)(v26 + 80) = v33;
      uint64_t v35 = *(void *)(v27 + 96);
      *(void *)(v26 + 88) = *(void *)(v27 + 88);
      *(void *)(v26 + 96) = v35;
      swift_bridgeObjectRetain();
LABEL_12:
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v54 = *(_OWORD *)(v27 + 88);
      *(_OWORD *)(v26 + 72) = *(_OWORD *)(v27 + 72);
      *(_OWORD *)(v26 + 88) = v54;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (uint64_t *)(a2 + v7);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    *uint64_t v8 = v11;
    v8[1] = v10;
    *(unsigned char *)(a1 + v6[6]) = *(unsigned char *)(a2 + v6[6]);
    *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
    *(unsigned char *)(a1 + v6[8]) = *(unsigned char *)(a2 + v6[8]);
    *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
    *(unsigned char *)(a1 + v6[10]) = *(unsigned char *)(a2 + v6[10]);
    *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
    swift_bridgeObjectRetain();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v13 = *(int *)(v12 + 48);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = *(void *)(a2 + v13 + 24);
    if (v16)
    {
      uint64_t v17 = *(void *)(v15 + 32);
      *(void *)(v14 + 24) = v16;
      *(void *)(v14 + 32) = v17;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(v14, v15);
    }
    else
    {
      long long v48 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v48;
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
    }
    memcpy((void *)(v14 + 40), (const void *)(v15 + 40), 0x84uLL);
    uint64_t v49 = *(int *)(v12 + 64);
    uint64_t v50 = (char *)(a1 + v49);
    long long v51 = (unsigned char *)(a2 + v49);
    switch(v51[104])
    {
      case 1:
        long long v52 = *(_OWORD *)(v51 + 24);
        *(_OWORD *)(v50 + 24) = v52;
        (**(void (***)(void *, unsigned char *))(v52 - 8))(v50, v51);
        uint64_t v53 = *((void *)v51 + 6);
        *((void *)v50 + 5) = *((void *)v51 + 5);
        *((void *)v50 + 6) = v53;
        v50[104] = 1;
        goto LABEL_12;
      case 2:
        uint64_t v56 = *((void *)v51 + 1);
        *(void *)uint64_t v50 = *(void *)v51;
        *((void *)v50 + 1) = v56;
        long long v57 = (void *)*((void *)v51 + 3);
        *((void *)v50 + 2) = *((void *)v51 + 2);
        *((void *)v50 + 3) = v57;
        *((_WORD *)v50 + 16) = *((_WORD *)v51 + 16);
        *((void *)v50 + 5) = *((void *)v51 + 5);
        v50[48] = v51[48];
        long long v58 = (void *)*((void *)v51 + 7);
        *((void *)v50 + 7) = v58;
        v50[104] = 2;
        swift_bridgeObjectRetain();
        id v59 = v57;
        goto LABEL_19;
      case 3:
        uint64_t v60 = *((void *)v51 + 1);
        *(void *)uint64_t v50 = *(void *)v51;
        *((void *)v50 + 1) = v60;
        uint64_t v61 = (void *)*((void *)v51 + 3);
        *((void *)v50 + 2) = *((void *)v51 + 2);
        *((void *)v50 + 3) = v61;
        *((_WORD *)v50 + 16) = *((_WORD *)v51 + 16);
        *((void *)v50 + 5) = *((void *)v51 + 5);
        v50[48] = v51[48];
        uint64_t v63 = (void *)*((void *)v51 + 7);
        uint64_t v62 = *((void *)v51 + 8);
        *((void *)v50 + 7) = v63;
        *((void *)v50 + 8) = v62;
        uint64_t v64 = *((void *)v51 + 9);
        long long v58 = (void *)*((void *)v51 + 10);
        *((void *)v50 + 9) = v64;
        *((void *)v50 + 10) = v58;
        v50[104] = 3;
        swift_bridgeObjectRetain();
        id v65 = v61;
        id v66 = v63;
        swift_bridgeObjectRetain();
LABEL_19:
        id v67 = v58;
        break;
      case 4:
        id v68 = *(void **)v51;
        uint64_t v69 = *((void *)v51 + 1);
        *(void *)uint64_t v50 = *(void *)v51;
        *((void *)v50 + 1) = v69;
        uint64_t v70 = *((void *)v51 + 3);
        *((void *)v50 + 2) = *((void *)v51 + 2);
        *((void *)v50 + 3) = v70;
        uint64_t v71 = *((void *)v51 + 5);
        *((void *)v50 + 4) = *((void *)v51 + 4);
        *((void *)v50 + 5) = v71;
        uint64_t v72 = *((void *)v51 + 7);
        *((void *)v50 + 6) = *((void *)v51 + 6);
        *((void *)v50 + 7) = v72;
        v50[64] = v51[64];
        v50[65] = v51[65];
        uint64_t v73 = *((void *)v51 + 10);
        id v74 = v68;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v73)
        {
          *((void *)v50 + 9) = *((void *)v51 + 9);
          *((void *)v50 + 10) = v73;
          uint64_t v75 = *((void *)v51 + 11);
          uint64_t v76 = *((void *)v51 + 12);
          *((void *)v50 + 11) = v75;
          *((void *)v50 + 12) = v76;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v79 = *(_OWORD *)(v51 + 88);
          *(_OWORD *)(v50 + 72) = *(_OWORD *)(v51 + 72);
          *(_OWORD *)(v50 + 88) = v79;
        }
        v50[104] = 4;
        break;
      case 5:
        id v77 = *(void **)v51;
        *(void *)uint64_t v50 = *(void *)v51;
        v50[104] = 5;
        id v78 = v77;
        break;
      default:
        memcpy(v50, v51, 0x69uLL);
        break;
    }
  }
  else
  {
    uint64_t v36 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
    id v37 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    uint64_t v38 = v37[5];
    uint64_t v39 = (void *)(a1 + v38);
    uint64_t v40 = (uint64_t *)(a2 + v38);
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    *uint64_t v39 = v42;
    v39[1] = v41;
    *(unsigned char *)(a1 + v37[6]) = *(unsigned char *)(a2 + v37[6]);
    *(unsigned char *)(a1 + v37[7]) = *(unsigned char *)(a2 + v37[7]);
    *(unsigned char *)(a1 + v37[8]) = *(unsigned char *)(a2 + v37[8]);
    *(unsigned char *)(a1 + v37[9]) = *(unsigned char *)(a2 + v37[9]);
    *(unsigned char *)(a1 + v37[10]) = *(unsigned char *)(a2 + v37[10]);
    *(unsigned char *)(a1 + v37[11]) = *(unsigned char *)(a2 + v37[11]);
    swift_bridgeObjectRetain();
    uint64_t v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                 + 48);
    uint64_t v44 = a1 + v43;
    uint64_t v45 = a2 + v43;
    uint64_t v46 = *(void *)(v45 + 24);
    if (v46)
    {
      uint64_t v47 = *(void *)(v45 + 32);
      *(void *)(v44 + 24) = v46;
      *(void *)(v44 + 32) = v47;
      (**(void (***)(uint64_t, uint64_t))(v46 - 8))(v44, v45);
    }
    else
    {
      long long v55 = *(_OWORD *)(v45 + 16);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
      *(_OWORD *)(v44 + 16) = v55;
      *(void *)(v44 + 32) = *(void *)(v45 + 32);
    }
    memcpy((void *)(v44 + 40), (const void *)(v45 + 40), 0x84uLL);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ParticipantViewModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for ParticipantViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      uint64_t v16 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v17 = v16[5];
      uint64_t v18 = (void *)(a1 + v17);
      uint64_t v19 = (void *)(a2 + v17);
      void *v18 = *v19;
      v18[1] = v19[1];
      *(unsigned char *)(a1 + v16[6]) = *(unsigned char *)(a2 + v16[6]);
      *(unsigned char *)(a1 + v16[7]) = *(unsigned char *)(a2 + v16[7]);
      *(unsigned char *)(a1 + v16[8]) = *(unsigned char *)(a2 + v16[8]);
      *(unsigned char *)(a1 + v16[9]) = *(unsigned char *)(a2 + v16[9]);
      *(unsigned char *)(a1 + v16[10]) = *(unsigned char *)(a2 + v16[10]);
      *(unsigned char *)(a1 + v16[11]) = *(unsigned char *)(a2 + v16[11]);
      swift_bridgeObjectRetain();
      uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      uint64_t v23 = *(void **)(a2 + v20);
      *(void *)uint64_t v21 = v23;
      *(void *)(v21 + 8) = *(void *)(v22 + 8);
      *(void *)(v21 + 16) = *(void *)(v22 + 16);
      *(void *)(v21 + 24) = *(void *)(v22 + 24);
      *(void *)(v21 + 32) = *(void *)(v22 + 32);
      *(void *)(v21 + 40) = *(void *)(v22 + 40);
      *(void *)(v21 + 48) = *(void *)(v22 + 48);
      *(void *)(v21 + 56) = *(void *)(v22 + 56);
      *(unsigned char *)(v21 + 64) = *(unsigned char *)(v22 + 64);
      *(unsigned char *)(v21 + 65) = *(unsigned char *)(v22 + 65);
      uint64_t v24 = *(void *)(v22 + 80);
      id v25 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24)
      {
        *(void *)(v21 + 72) = *(void *)(v22 + 72);
        *(void *)(v21 + 80) = *(void *)(v22 + 80);
        *(void *)(v21 + 88) = *(void *)(v22 + 88);
        *(void *)(v21 + 96) = *(void *)(v22 + 96);
        swift_bridgeObjectRetain();
LABEL_13:
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v41 = *(_OWORD *)(v22 + 88);
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(v22 + 72);
        *(_OWORD *)(v21 + 88) = v41;
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      *(unsigned char *)(a1 + v6[6]) = *(unsigned char *)(a2 + v6[6]);
      *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
      *(unsigned char *)(a1 + v6[8]) = *(unsigned char *)(a2 + v6[8]);
      *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
      *(unsigned char *)(a1 + v6[10]) = *(unsigned char *)(a2 + v6[10]);
      *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
      swift_bridgeObjectRetain();
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v11 = *(int *)(v10 + 48);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = (long long *)(a2 + v11);
      uint64_t v14 = *(void *)(a2 + v11 + 24);
      if (v14)
      {
        *(void *)(v12 + 24) = v14;
        *(void *)(v12 + 32) = *((void *)v13 + 4);
        (**(void (***)(uint64_t, long long *))(v14 - 8))(v12, v13);
      }
      else
      {
        long long v35 = *v13;
        long long v36 = v13[1];
        *(void *)(v12 + 32) = *((void *)v13 + 4);
        *(_OWORD *)uint64_t v12 = v35;
        *(_OWORD *)(v12 + 16) = v36;
      }
      memcpy((void *)(v12 + 40), (char *)v13 + 40, 0x84uLL);
      uint64_t v37 = *(int *)(v10 + 64);
      uint64_t v38 = (char *)(a1 + v37);
      uint64_t v39 = (unsigned char *)(a2 + v37);
      switch(v39[104])
      {
        case 1:
          uint64_t v40 = *((void *)v39 + 3);
          *((void *)v38 + 3) = v40;
          *((void *)v38 + 4) = *((void *)v39 + 4);
          (**(void (***)(void *, unsigned char *))(v40 - 8))(v38, v39);
          *((void *)v38 + 5) = *((void *)v39 + 5);
          *((void *)v38 + 6) = *((void *)v39 + 6);
          v38[104] = 1;
          goto LABEL_13;
        case 2:
          *(void *)uint64_t v38 = *(void *)v39;
          *((void *)v38 + 1) = *((void *)v39 + 1);
          *((void *)v38 + 2) = *((void *)v39 + 2);
          uint64_t v44 = (void *)*((void *)v39 + 3);
          *((void *)v38 + 3) = v44;
          v38[32] = v39[32];
          v38[33] = v39[33];
          uint64_t v45 = *((void *)v39 + 5);
          v38[48] = v39[48];
          *((void *)v38 + 5) = v45;
          uint64_t v46 = (void *)*((void *)v39 + 7);
          *((void *)v38 + 7) = v46;
          v38[104] = 2;
          swift_bridgeObjectRetain();
          id v47 = v44;
          goto LABEL_20;
        case 3:
          *(void *)uint64_t v38 = *(void *)v39;
          *((void *)v38 + 1) = *((void *)v39 + 1);
          *((void *)v38 + 2) = *((void *)v39 + 2);
          long long v48 = (void *)*((void *)v39 + 3);
          *((void *)v38 + 3) = v48;
          v38[32] = v39[32];
          v38[33] = v39[33];
          uint64_t v49 = *((void *)v39 + 5);
          v38[48] = v39[48];
          *((void *)v38 + 5) = v49;
          uint64_t v50 = (void *)*((void *)v39 + 7);
          *((void *)v38 + 7) = v50;
          *((void *)v38 + 8) = *((void *)v39 + 8);
          *((void *)v38 + 9) = *((void *)v39 + 9);
          uint64_t v46 = (void *)*((void *)v39 + 10);
          *((void *)v38 + 10) = v46;
          v38[104] = 3;
          swift_bridgeObjectRetain();
          id v51 = v48;
          id v52 = v50;
          swift_bridgeObjectRetain();
LABEL_20:
          id v53 = v46;
          break;
        case 4:
          long long v54 = *(void **)v39;
          *(void *)uint64_t v38 = *(void *)v39;
          *((void *)v38 + 1) = *((void *)v39 + 1);
          *((void *)v38 + 2) = *((void *)v39 + 2);
          *((void *)v38 + 3) = *((void *)v39 + 3);
          *((void *)v38 + 4) = *((void *)v39 + 4);
          *((void *)v38 + 5) = *((void *)v39 + 5);
          *((void *)v38 + 6) = *((void *)v39 + 6);
          *((void *)v38 + 7) = *((void *)v39 + 7);
          v38[64] = v39[64];
          v38[65] = v39[65];
          uint64_t v55 = *((void *)v39 + 10);
          id v56 = v54;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v55)
          {
            *((void *)v38 + 9) = *((void *)v39 + 9);
            *((void *)v38 + 10) = *((void *)v39 + 10);
            *((void *)v38 + 11) = *((void *)v39 + 11);
            *((void *)v38 + 12) = *((void *)v39 + 12);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v59 = *(_OWORD *)(v39 + 88);
            *(_OWORD *)(v38 + 72) = *(_OWORD *)(v39 + 72);
            *(_OWORD *)(v38 + 88) = v59;
          }
          v38[104] = 4;
          break;
        case 5:
          long long v57 = *(void **)v39;
          *(void *)uint64_t v38 = *(void *)v39;
          v38[104] = 5;
          id v58 = v57;
          break;
        default:
          memcpy(v38, v39, 0x69uLL);
          break;
      }
    }
    else
    {
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
      uint64_t v27 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v28 = v27[5];
      uint64_t v29 = (void *)(a1 + v28);
      uint64_t v30 = (void *)(a2 + v28);
      *uint64_t v29 = *v30;
      v29[1] = v30[1];
      *(unsigned char *)(a1 + v27[6]) = *(unsigned char *)(a2 + v27[6]);
      *(unsigned char *)(a1 + v27[7]) = *(unsigned char *)(a2 + v27[7]);
      *(unsigned char *)(a1 + v27[8]) = *(unsigned char *)(a2 + v27[8]);
      *(unsigned char *)(a1 + v27[9]) = *(unsigned char *)(a2 + v27[9]);
      *(unsigned char *)(a1 + v27[10]) = *(unsigned char *)(a2 + v27[10]);
      *(unsigned char *)(a1 + v27[11]) = *(unsigned char *)(a2 + v27[11]);
      swift_bridgeObjectRetain();
      uint64_t v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      uint64_t v32 = a1 + v31;
      uint64_t v33 = (long long *)(a2 + v31);
      uint64_t v34 = *((void *)v33 + 3);
      if (v34)
      {
        *(void *)(v32 + 24) = v34;
        *(void *)(v32 + 32) = *((void *)v33 + 4);
        (**(void (***)(uint64_t, long long *))(v34 - 8))(v32, v33);
      }
      else
      {
        long long v42 = *v33;
        long long v43 = v33[1];
        *(void *)(v32 + 32) = *((void *)v33 + 4);
        *(_OWORD *)uint64_t v32 = v42;
        *(_OWORD *)(v32 + 16) = v43;
      }
      memcpy((void *)(v32 + 40), (char *)v33 + 40, 0x84uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for ParticipantViewModel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
    uint64_t v13 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)(a1 + v13[5]) = *(_OWORD *)(a2 + v13[5]);
    *(unsigned char *)(a1 + v13[6]) = *(unsigned char *)(a2 + v13[6]);
    *(unsigned char *)(a1 + v13[7]) = *(unsigned char *)(a2 + v13[7]);
    *(unsigned char *)(a1 + v13[8]) = *(unsigned char *)(a2 + v13[8]);
    *(unsigned char *)(a1 + v13[9]) = *(unsigned char *)(a2 + v13[9]);
    *(unsigned char *)(a1 + v13[10]) = *(unsigned char *)(a2 + v13[10]);
    *(unsigned char *)(a1 + v13[11]) = *(unsigned char *)(a2 + v13[11]);
    uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                 + 48);
    uint64_t v9 = (void *)(a1 + v14);
    uint64_t v10 = (const void *)(a2 + v14);
    size_t v11 = 104;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
    *(unsigned char *)(a1 + v6[6]) = *(unsigned char *)(a2 + v6[6]);
    *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
    *(unsigned char *)(a1 + v6[8]) = *(unsigned char *)(a2 + v6[8]);
    *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
    *(unsigned char *)(a1 + v6[10]) = *(unsigned char *)(a2 + v6[10]);
    *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    memcpy((void *)(a1 + *(int *)(v7 + 48)), (const void *)(a2 + *(int *)(v7 + 48)), 0xACuLL);
    uint64_t v8 = *(int *)(v7 + 64);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    size_t v11 = 105;
  }
  else
  {
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
    uint64_t v16 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)(a1 + v16[5]) = *(_OWORD *)(a2 + v16[5]);
    *(unsigned char *)(a1 + v16[6]) = *(unsigned char *)(a2 + v16[6]);
    *(unsigned char *)(a1 + v16[7]) = *(unsigned char *)(a2 + v16[7]);
    *(unsigned char *)(a1 + v16[8]) = *(unsigned char *)(a2 + v16[8]);
    *(unsigned char *)(a1 + v16[9]) = *(unsigned char *)(a2 + v16[9]);
    *(unsigned char *)(a1 + v16[10]) = *(unsigned char *)(a2 + v16[10]);
    *(unsigned char *)(a1 + v16[11]) = *(unsigned char *)(a2 + v16[11]);
    uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                 + 48);
    uint64_t v9 = (void *)(a1 + v17);
    uint64_t v10 = (const void *)(a2 + v17);
    size_t v11 = 172;
  }
  memcpy(v9, v10, v11);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ParticipantViewModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s15ConversationKit11ParticipantVWOhTm_0(a1, (void (*)(void))type metadata accessor for ParticipantViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      uint64_t v13 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)(a1 + v13[5]) = *(_OWORD *)(a2 + v13[5]);
      *(unsigned char *)(a1 + v13[6]) = *(unsigned char *)(a2 + v13[6]);
      *(unsigned char *)(a1 + v13[7]) = *(unsigned char *)(a2 + v13[7]);
      *(unsigned char *)(a1 + v13[8]) = *(unsigned char *)(a2 + v13[8]);
      *(unsigned char *)(a1 + v13[9]) = *(unsigned char *)(a2 + v13[9]);
      *(unsigned char *)(a1 + v13[10]) = *(unsigned char *)(a2 + v13[10]);
      *(unsigned char *)(a1 + v13[11]) = *(unsigned char *)(a2 + v13[11]);
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      uint64_t v9 = (void *)(a1 + v14);
      uint64_t v10 = (const void *)(a2 + v14);
      size_t v11 = 104;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
      *(unsigned char *)(a1 + v6[6]) = *(unsigned char *)(a2 + v6[6]);
      *(unsigned char *)(a1 + v6[7]) = *(unsigned char *)(a2 + v6[7]);
      *(unsigned char *)(a1 + v6[8]) = *(unsigned char *)(a2 + v6[8]);
      *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
      *(unsigned char *)(a1 + v6[10]) = *(unsigned char *)(a2 + v6[10]);
      *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      memcpy((void *)(a1 + *(int *)(v7 + 48)), (const void *)(a2 + *(int *)(v7 + 48)), 0xACuLL);
      uint64_t v8 = *(int *)(v7 + 64);
      uint64_t v9 = (void *)(a1 + v8);
      uint64_t v10 = (const void *)(a2 + v8);
      size_t v11 = 105;
    }
    else
    {
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
      uint64_t v16 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)(a1 + v16[5]) = *(_OWORD *)(a2 + v16[5]);
      *(unsigned char *)(a1 + v16[6]) = *(unsigned char *)(a2 + v16[6]);
      *(unsigned char *)(a1 + v16[7]) = *(unsigned char *)(a2 + v16[7]);
      *(unsigned char *)(a1 + v16[8]) = *(unsigned char *)(a2 + v16[8]);
      *(unsigned char *)(a1 + v16[9]) = *(unsigned char *)(a2 + v16[9]);
      *(unsigned char *)(a1 + v16[10]) = *(unsigned char *)(a2 + v16[10]);
      *(unsigned char *)(a1 + v16[11]) = *(unsigned char *)(a2 + v16[11]);
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      uint64_t v9 = (void *)(a1 + v17);
      uint64_t v10 = (const void *)(a2 + v17);
      size_t v11 = 172;
    }
    memcpy(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for ParticipantViewModel()
{
  uint64_t result = type metadata accessor for ParticipantViewModel.ParticipantDetails(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    swift_getTupleTypeLayout3();
    uint64_t v6 = &v3;
    swift_getTupleTypeLayout2();
    uint64_t v7 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ParticipantViewModel.ParticipantDetails(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    size_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v13 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C30C4080);
}

uint64_t sub_1C30C4080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C30C4124);
}

void sub_1C30C4124(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for ParticipantViewModel.ParticipantDetails()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined release of SymbolImageDescription(uint64_t a1)
{
  char v2 = *(void **)(a1 + 56);

  swift_bridgeObjectRelease();
  return a1;
}

void specialized RangeReplaceableCollection.removeFirst()(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  specialized Collection.first.getter(*v1);
  if (v5)
  {
    outlined init with take of Notice(&v4, a1);
    if (*(void *)(v3 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)();
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void specialized RangeReplaceableCollection.removeFirst()()
{
  if (*(void *)(*(void *)v0 + 16)) {
    specialized Array.replaceSubrange<A>(_:with:)();
  }
  else {
    __break(1u);
  }
}

void *AudioPowerSpectrumView.Constants.barWidth.unsafeMutableAddressor()
{
  return &static AudioPowerSpectrumView.Constants.barWidth;
}

double static AudioPowerSpectrumView.Constants.barWidth.getter()
{
  return 3.0;
}

void *AudioPowerSpectrumView.Constants.spacing.unsafeMutableAddressor()
{
  return &static AudioPowerSpectrumView.Constants.spacing;
}

double static AudioPowerSpectrumView.Constants.spacing.getter()
{
  return 1.0;
}

id AudioPowerSpectrumView.viewModel.getter()
{
  return *(id *)(v0 + 8);
}

id key path getter for AudioPowerSpectrumView.viewModel : AudioPowerSpectrumView@<X0>(void *a1@<X8>)
{
  id result = AudioPowerSpectrumView.viewModel.getter();
  *a1 = result;
  return result;
}

void key path setter for AudioPowerSpectrumView.viewModel : AudioPowerSpectrumView(id *a1)
{
}

void AudioPowerSpectrumView.viewModel.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*AudioPowerSpectrumView.viewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AudioPowerSpectrumView.$viewModel.getter()
{
  type metadata accessor for AudioPowerSpectrumViewModel();
  lazy protocol witness table accessor for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel();
  return ObservedObject.projectedValue.getter();
}

unint64_t lazy protocol witness table accessor for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel;
  if (!lazy protocol witness table cache variable for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel)
  {
    type metadata accessor for AudioPowerSpectrumViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel);
  }
  return result;
}

uint64_t default argument 2 of AudioPowerSpectrumView.init(viewModel:barWidth:barGradientColors:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Color>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C376BA10;
  *(void *)(v0 + 32) = static Color.orange.getter();
  *(void *)(v0 + 40) = static Color.yellow.getter();
  *(void *)(v0 + 48) = static Color.green.getter();
  return v0;
}

uint64_t AudioPowerSpectrumView.init(viewModel:barWidth:barGradientColors:)@<X0>(double a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for AudioPowerSpectrumViewModel();
  lazy protocol witness table accessor for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel();
  uint64_t result = ObservedObject.init(wrappedValue:)();
  double v9 = a1;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v10;
  if (a2) {
    double v9 = 3.0;
  }
  *(double *)(a4 + 16) = v9;
  *(void *)(a4 + 24) = a3;
  return result;
}

uint64_t AudioPowerSpectrumView.body.getter@<X0>(id (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  long long v4 = (void *)v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (id (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((void *)v7 + 2) = v3;
  *((void *)v7 + 3) = v4;
  *((void *)v7 + 4) = v5;
  *((void *)v7 + 5) = v6;
  *a1 = partial apply for closure #1 in AudioPowerSpectrumView.body.getter;
  a1[1] = v7;
  id v8 = v4;
  return swift_bridgeObjectRetain();
}

id closure #1 in AudioPowerSpectrumView.body.getter@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  GeometryProxy.size.getter();
  GeometryProxy.size.getter();
  Path.init(_:)();
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x1C8772A50](v3);
  LinearGradient.init(gradient:startPoint:endPoint:)();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  uint64_t v7 = static Animation.easeOut.getter();
  *(_OWORD *)a2 = v10;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v12;
  *(unsigned char *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v21;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 80) = v14;
  *(_OWORD *)(a2 + 88) = v15;
  *(void *)(a2 + 104) = v16;
  *(void *)(a2 + 112) = v17;
  *(_WORD *)(a2 + 120) = 256;
  *(void *)(a2 + 128) = v4;
  *(void *)(a2 + 136) = v6;
  *(void *)(a2 + 144) = v7;
  *(void *)(a2 + 152) = a1;
  return a1;
}

uint64_t sub_1C30C4800()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #1 in AudioPowerSpectrumView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in AudioPowerSpectrumView.body.getter(*(void **)(v1 + 24), a1);
}

void closure #1 in closure #1 in AudioPowerSpectrumView.body.getter(double a1, double a2, double a3, uint64_t a4, uint64_t a5, void *a6)
{
  double v9 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a6) + 0xF0);
  long long v10 = a6;
  uint64_t v44 = v9;
  uint64_t v11 = v9();

  uint64_t v12 = *(void *)(v11 + 16);
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    long long v15 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x120);
    double v16 = a1 + 1.0;
    uint64_t v17 = -v12;
    while (1)
    {
      uint64_t v18 = v10;
      uint64_t v19 = v9();

      uint64_t v20 = *(void *)(v19 + 16);
      swift_bridgeObjectRelease();
      unint64_t v21 = v13 + v20 - 1;
      uint64_t v22 = v18;
      uint64_t v23 = v15();

      if ((v21 & 0x8000000000000000) != 0) {
        break;
      }
      if (v21 >= *(void *)(v23 + 16)) {
        goto LABEL_23;
      }
      float v24 = *(float *)(v23 + 4 * v21 + 32);
      swift_bridgeObjectRelease();
      double v25 = v24 * a2;
      if (v25 <= a1) {
        double v25 = a1;
      }
      if (v25 <= a2) {
        double v26 = v25;
      }
      else {
        double v26 = a2;
      }
      Path.move(to:)((CGPoint)__PAIR128__((a2 - v26) * 0.5, a3 - v16 * (double)v14));
      Path.addLine(to:)((CGPoint)__PAIR128__(v26 + (a2 - v26) * 0.5, a3 - v16 * (double)v14));
      --v13;
      ++v14;
      if (v17 == v13) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t v27 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x120);
    uint64_t v28 = v10;
    uint64_t v29 = v27();

    uint64_t v30 = *(void *)(v29 + 16);
    swift_bridgeObjectRelease();
    if (!v30) {
      return;
    }
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    double v33 = a1 + 1.0;
    uint64_t v34 = -v30;
    while (1)
    {
      long long v35 = v28;
      uint64_t v36 = v44();

      uint64_t v37 = *(void *)(v36 + 16);
      swift_bridgeObjectRelease();
      unint64_t v38 = v31 + v37 - 1;
      uint64_t v39 = v35;
      uint64_t v40 = v27();

      if ((v38 & 0x8000000000000000) != 0) {
        break;
      }
      if (v38 >= *(void *)(v40 + 16)) {
        goto LABEL_25;
      }
      float v41 = *(float *)(v40 + 4 * v38 + 32);
      swift_bridgeObjectRelease();
      double v42 = v41 * a2;
      if (v42 <= a1) {
        double v42 = a1;
      }
      if (v42 <= a2) {
        double v43 = v42;
      }
      else {
        double v43 = a2;
      }
      Path.move(to:)((CGPoint)__PAIR128__((a2 - v43) * 0.5, v33 * (double)v32 + a3));
      Path.addLine(to:)((CGPoint)__PAIR128__(v43 + (a2 - v43) * 0.5, v33 * (double)v32 + a3));
      --v31;
      ++v32;
      if (v34 == v31) {
        return;
      }
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

char *one-time initialization function for viewModel()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for MockAudioPowerSpectrumViewModel());
  uint64_t result = MockAudioPowerSpectrumViewModel.init()();
  static AudioPowerSpectrumView_Preview.viewModel = (uint64_t)result;
  return result;
}

char *MockAudioPowerSpectrumViewModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return MockAudioPowerSpectrumViewModel.init()();
}

uint64_t static AudioPowerSpectrumView_Preview.previews.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  id v2 = (id)static AudioPowerSpectrumView_Preview.viewModel;
  uint64_t v8 = default argument 2 of AudioPowerSpectrumView.init(viewModel:barWidth:barGradientColors:)();
  type metadata accessor for AudioPowerSpectrumViewModel();
  lazy protocol witness table accessor for type AudioPowerSpectrumViewModel and conformance AudioPowerSpectrumViewModel();
  uint64_t v3 = ObservedObject.init(wrappedValue:)();
  uint64_t v5 = v4;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v6 = static Color.black.getter();
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = 0x4008000000000000;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = result;
  return result;
}

uint64_t protocol witness for static PreviewProvider.platform.getter in conformance AudioPowerSpectrumView_Preview()
{
  return MEMORY[0x1F40F8C38]();
}

uint64_t protocol witness for static _PreviewProvider._previews.getter in conformance AudioPowerSpectrumView_Preview(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview();
  return MEMORY[0x1F40F8C48](a1, v2);
}

uint64_t protocol witness for static _PreviewProvider._platform.getter in conformance AudioPowerSpectrumView_Preview(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview();
  return MEMORY[0x1F40F8C40](a1, v2);
}

char *MockAudioPowerSpectrumViewModel.init()()
{
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit31MockAudioPowerSpectrumViewModel_timer) = 0;
  id v1 = objc_msgSend(self, sel_sharedInstance);
  id v2 = objc_msgSend(self, sel_defaultCenter);
  AudioPowerSpectrumViewModel.init(call:callCenter:notificationCenter:)();
  uint64_t v4 = v3;
  type metadata accessor for NSTimer();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = v4;
  id v7 = @nonobjc NSTimer.__allocating_init(timeInterval:repeats:block:)(1, (uint64_t)partial apply for closure #1 in MockAudioPowerSpectrumViewModel.init(), v5, 0.25);
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit31MockAudioPowerSpectrumViewModel_timer;
  uint64_t v9 = *(void **)&v6[OBJC_IVAR____TtC15ConversationKit31MockAudioPowerSpectrumViewModel_timer];
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit31MockAudioPowerSpectrumViewModel_timer] = v7;

  uint64_t result = (char *)objc_msgSend(self, sel_mainRunLoop);
  uint64_t v11 = *(void **)&v6[v8];
  if (v11)
  {
    char v12 = result;
    uint64_t v13 = *MEMORY[0x1E4F1C4B8];
    id v14 = v11;
    objc_msgSend(v12, sel_addTimer_forMode_, v14, v13);

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for NSTimer()
{
  unint64_t result = lazy cache variable for type metadata for NSTimer;
  if (!lazy cache variable for type metadata for NSTimer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTimer);
  }
  return result;
}

uint64_t sub_1C30C4F6C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in MockAudioPowerSpectrumViewModel.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1, 0.0, 1.0);
  int v4 = v3;
  swift_beginAccess();
  uint64_t v5 = (void *)MEMORY[0x1C8776240](v2);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v5)
                                                                                  + 0x100))(v28);
    char v10 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v11 = *(void *)(*v10 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
    uint64_t v12 = *v10;
    *(void *)(v12 + 16) = v11 + 1;
    *(_DWORD *)(v12 + 4 * v11 + 32) = v4;
    v8(v28, 0);
  }
  swift_beginAccess();
  uint64_t v13 = (void *)MEMORY[0x1C8776240](v2);
  if (v13)
  {
    id v14 = v13;
    long long v15 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v6 & *v13) + 0x100))(v28);
    specialized RangeReplaceableCollection.removeFirst()();
    v15(v28, 0);
  }
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((uint64_t)v13, 0.0, 1.0);
  int v17 = v16;
  swift_beginAccess();
  uint64_t v18 = (void *)MEMORY[0x1C8776240](v2);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v6 & *v18) + 0x130))(v28);
    uint64_t v22 = v21;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v23 = *(void *)(*v22 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
    uint64_t v24 = *v22;
    *(void *)(v24 + 16) = v23 + 1;
    *(_DWORD *)(v24 + 4 * v23 + 32) = v17;
    v20(v28, 0);
  }
  swift_beginAccess();
  double v25 = (void *)MEMORY[0x1C8776240](v2);
  if (v25)
  {
    double v26 = v25;
    uint64_t v27 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v6 & *v25) + 0x130))(v28);
    specialized RangeReplaceableCollection.removeFirst()();
    v27(v28, 0);
  }
}

void partial apply for closure #1 in MockAudioPowerSpectrumViewModel.init()(uint64_t a1)
{
  closure #1 in MockAudioPowerSpectrumViewModel.init()(a1, v1);
}

id @nonobjc NSTimer.__allocating_init(timeInterval:repeats:block:)(char a1, uint64_t a2, uint64_t a3, double a4)
{
  v9[4] = a2;
  v9[5] = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  void v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v9[3] = &block_descriptor_19;
  uint64_t v6 = _Block_copy(v9);
  id v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_timerWithTimeInterval_repeats_block_, a1 & 1, v6, a4);
  _Block_release(v6);
  swift_release();
  return v7;
}

void MockAudioPowerSpectrumViewModel.__allocating_init(call:callCenter:notificationCenter:)()
{
}

void MockAudioPowerSpectrumViewModel.init(call:callCenter:notificationCenter:)()
{
}

void MockAudioPowerSpectrumViewModel.__ivar_destroyer()
{
}

id MockAudioPowerSpectrumViewModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockAudioPowerSpectrumViewModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for MockAudioPowerSpectrumViewModel()
{
  uint64_t result = type metadata singleton initialization cache for MockAudioPowerSpectrumViewModel;
  if (!type metadata singleton initialization cache for MockAudioPowerSpectrumViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AudioPowerSpectrumView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview;
  if (!lazy protocol witness table cache variable for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview;
  if (!lazy protocol witness table cache variable for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerSpectrumView_Preview and conformance AudioPowerSpectrumView_Preview);
  }
  return result;
}

uint64_t associated type witness table accessor for PreviewProvider.Previews : View in AudioPowerSpectrumView_Preview()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for AudioPowerSpectrumView(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AudioPowerSpectrumView(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AudioPowerSpectrumView(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AudioPowerSpectrumView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  id v5 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v4;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for AudioPowerSpectrumView()
{
}

void type metadata accessor for AudioPowerSpectrumView.Constants()
{
}

void type metadata accessor for AudioPowerSpectrumView_Preview()
{
}

uint64_t ObjC metadata update function for MockAudioPowerSpectrumViewModel()
{
  return type metadata accessor for MockAudioPowerSpectrumViewModel();
}

uint64_t type metadata completion function for MockAudioPowerSpectrumViewModel()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for MockAudioPowerSpectrumViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MockAudioPowerSpectrumViewModel);
}

uint64_t dispatch thunk of MockAudioPowerSpectrumViewModel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 672))();
}

uint64_t sub_1C30C56B8()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<StrokeShapeView<Path, LinearGradient, EmptyView>, _AnimationModifier<AudioPowerSpectrumViewModel>>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<ModifiedContent<StrokeShapeView<Path, LinearGradient, EmptyView>, _AnimationModifier<AudioPowerSpectrumViewModel>>>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AudioPowerSpectrumView, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AudioPowerSpectrumView, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AudioPowerSpectrumView, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<AudioPowerSpectrumView, _FrameLayout>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<AudioPowerSpectrumView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AudioPowerSpectrumView, _FrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AudioPowerSpectrumView, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AudioPowerSpectrumView, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AudioPowerSpectrumView, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<AudioPowerSpectrumView, _FrameLayout>);
    lazy protocol witness table accessor for type AudioPowerSpectrumView and conformance AudioPowerSpectrumView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AudioPowerSpectrumView, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioPowerSpectrumView and conformance AudioPowerSpectrumView()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioPowerSpectrumView and conformance AudioPowerSpectrumView;
  if (!lazy protocol witness table cache variable for type AudioPowerSpectrumView and conformance AudioPowerSpectrumView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerSpectrumView and conformance AudioPowerSpectrumView);
  }
  return result;
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, float a2, float a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  float v5 = a3 - a2;
  if ((~COERCE_INT(a3 - a2) & 0x7F800000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  unint64_t result = MEMORY[0x1C8776100](&v7, 8);
  if ((float)((float)(v5 * (float)((float)(v7 & 0xFFFFFF) * 0.000000059605)) + a2) == a3) {
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in AudioPowerSpectrumView.body.getter(uint64_t a1)
{
  closure #1 in closure #1 in AudioPowerSpectrumView.body.getter(*(double *)(v1 + 32), *(double *)(v1 + 48), *(double *)(v1 + 56), a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id ConversationHUDAppLaunchPillView.controlsManager.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsManager);
}

uint64_t ConversationHUDAppLaunchPillView.controlsContext.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsContext);
}

uint64_t ConversationHUDAppLaunchPillView.buttonType.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(v1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType, a1, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
}

id ConversationHUDAppLaunchPillView.featureFlags.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_featureFlags);
}

uint64_t key path getter for ConversationHUDAppLaunchPillView.activity : ConversationHUDAppLaunchPillView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
}

uint64_t key path setter for ConversationHUDAppLaunchPillView.activity : ConversationHUDAppLaunchPillView(uint64_t a1, void **a2)
{
  outlined init with copy of Activity?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(v4);
}

uint64_t ConversationHUDAppLaunchPillView.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_activity;
  swift_beginAccess();
  return outlined init with copy of Activity?(v3, a1);
}

uint64_t outlined init with copy of Activity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ConversationHUDAppLaunchPillView.activity.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_activity;
  swift_beginAccess();
  outlined assign with copy of Activity?(a1, v3);
  swift_endAccess();
  ConversationHUDAppLaunchPillView.updateIconView()();
  ConversationHUDAppLaunchPillView.updateTitle()();
  ConversationHUDAppLaunchPillView.updateCallToAction()();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1, &demangling cache variable for type metadata for Activity?);
}

uint64_t outlined assign with copy of Activity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void (*ConversationHUDAppLaunchPillView.activity.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ConversationHUDAppLaunchPillView.activity.modify;
}

void ConversationHUDAppLaunchPillView.activity.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    ConversationHUDAppLaunchPillView.updateIconView()();
    ConversationHUDAppLaunchPillView.updateTitle()();
    ConversationHUDAppLaunchPillView.updateCallToAction()();
  }
}

uint64_t key path getter for ConversationHUDAppLaunchPillView.backgroundMaterialView : ConversationHUDAppLaunchPillView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDAppLaunchPillView.backgroundMaterialView : ConversationHUDAppLaunchPillView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(*a1);
}

id ConversationHUDAppLaunchPillView.backgroundMaterialView.getter()
{
  return ConversationHUDAppLaunchPillView.backgroundMaterialView.getter(&OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___backgroundMaterialView, (uint64_t (*)(uint64_t))closure #1 in ConversationHUDAppLaunchPillView.backgroundMaterialView.getter);
}

UIView *closure #1 in ConversationHUDAppLaunchPillView.backgroundMaterialView.getter(uint64_t a1)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsContext))
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsContext) == 1)
    {
      uint64_t v1 = self;
      if (one-time initialization token for backgroundBlurEffect != -1) {
        swift_once();
      }
      id v2 = objc_msgSend(v1, sel__effectForBlurEffect_vibrancyStyle_, static Colors.InCallControls.backgroundBlurEffect, 112);
      id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v2);
      id v4 = objc_msgSend(v3, sel_contentView);
      id v5 = objc_msgSend(self, sel_tintColor);
      objc_msgSend(v4, sel_setBackgroundColor_, v5);

      id v6 = objc_allocWithZone(MEMORY[0x1E4FB1EB0]);
      uint64_t v7 = (UIView *)v3;
      uint64_t v8 = (UIView *)objc_msgSend(v6, sel_init);
      [(UIView *)v8 addSubview:v7];
      id v9 = ConversationHUDAppLaunchPillView.contentHStack.getter();
      [(UIView *)v8 addSubview:v9];

      UIView.addConstraintsToFill(_:insets:)(v8, *MEMORY[0x1E4FB12A8]);
    }
    else
    {
      type metadata accessor for ConversationHUDInCallBackdropView();
      uint64_t v7 = (UIView *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
      id v14 = ConversationHUDAppLaunchPillView.contentHStack.getter();
      [(UIView *)v7 addSubview:v14];

      uint64_t v8 = v7;
    }
  }
  else
  {
    id v10 = objc_msgSend(self, sel_effectWithStyle_, 18);
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v10);
    id v12 = objc_msgSend(v11, sel_contentView);
    id v13 = ConversationHUDAppLaunchPillView.contentHStack.getter();
    objc_msgSend(v12, sel_addSubview_, v13);

    uint64_t v7 = (UIView *)v11;
    uint64_t v8 = v7;
  }
  [(UIView *)v8 setTranslatesAutoresizingMaskIntoConstraints:0];
  [(UIView *)v7 _setContinuousCornerRadius:ConversationHUDAppLaunchPillView.minimumCornerRadius.getter()];
  [(UIView *)v7 setClipsToBounds:1];

  return v8;
}

void ConversationHUDAppLaunchPillView.backgroundMaterialView.setter(uint64_t a1)
{
}

void (*ConversationHUDAppLaunchPillView.backgroundMaterialView.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationHUDAppLaunchPillView.backgroundMaterialView.getter();
  return ConversationHUDAppLaunchPillView.backgroundMaterialView.modify;
}

void ConversationHUDAppLaunchPillView.backgroundMaterialView.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    ConversationHUDAppLaunchPillView.backgroundMaterialView.setter((uint64_t)v3);
  }
  else
  {
    ConversationHUDAppLaunchPillView.backgroundMaterialView.setter((uint64_t)v2);
  }
}

double ConversationHUDAppLaunchPillView.minimumCornerRadius.getter()
{
  type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType;
  swift_storeEnumTagMultiPayload();
  char v5 = static ConversationControlsAppLaunchButtonType.== infix(_:_:)(v4, (uint64_t)v3);
  outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v3, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  if (one-time initialization token for margins != -1) {
    swift_once();
  }
  double v6 = 32.0;
  if (v5) {
    double v6 = 52.0;
  }
  return (v6 + *(double *)&static Layout.ConversationControlsAppLaunchPillView.margins + *(double *)&qword_1EA37EAC0)
       * 0.5;
}

void *ConversationHUDAppLaunchPillView.appStoreLockup.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___appStoreLockup;
  uint64_t v2 = *(void **)((char *)v0
                  + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___appStoreLockup);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = closure #1 in ConversationHUDAppLaunchPillView.appStoreLockup.getter(v0);
    uint64_t v4 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v3;
    char v5 = v3;
    outlined consume of UIView??(v4);
  }
  outlined copy of UIView??(v2);
  return v3;
}

void *closure #1 in ConversationHUDAppLaunchPillView.appStoreLockup.getter(void *a1)
{
  void (*v9)(void *__return_ptr);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void v44[3];
  void *v45;
  uint64_t v46;

  uint64_t v2 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = 0;
  if (objc_msgSend(*(id *)((char *)a1+ OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_featureFlags), sel_uninstalledAppStoreLockupEnabled))
  {
    id v9 = *(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC8);
    v9(v44);
    uint64_t v8 = v45;
    if (v45)
    {
      double v43 = v2;
      id v10 = v46;
      id v11 = __swift_project_boxed_opaque_existential_1(v44, (uint64_t)v45);
      id v12 = *(v8 - 1);
      MEMORY[0x1F4188790](v11);
      id v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v14);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v44, &demangling cache variable for type metadata for Activity?);
      double v42 = (*(uint64_t (**)(void *, uint64_t))(v10 + 32))(v8, v10);
      int v16 = v15;
      int v17 = (*(uint64_t (**)(char *, void *))(v12 + 8))(v14, v8);
      if (!v16) {
        return 0;
      }
      ((void (*)(void *__return_ptr, uint64_t))v9)(v44, v17);
      uint64_t v18 = (uint64_t)v45;
      if (v45)
      {
        uint64_t v19 = v46;
        uint64_t v20 = __swift_project_boxed_opaque_existential_1(v44, (uint64_t)v45);
        unint64_t v21 = *(void *)(v18 - 8);
        MEMORY[0x1F4188790](v20);
        uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v21 + 16))(v23);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v44, &demangling cache variable for type metadata for Activity?);
        (*(void (**)(uint64_t, uint64_t))(v19 + 112))(v18, v19);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v18);
        uint64_t v24 = type metadata accessor for Collaboration(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v24) != 1)
        {
          swift_bridgeObjectRelease();
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for Collaboration?);
          return 0;
        }
      }
      else
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v44, &demangling cache variable for type metadata for Activity?);
        double v25 = type metadata accessor for Collaboration(0);
        __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v25);
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for Collaboration?);
      double v26 = (uint64_t)a1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType;
      swift_storeEnumTagMultiPayload();
      LOBYTE(v26) = static ConversationControlsAppLaunchButtonType.== infix(_:_:)(v26, (uint64_t)v4);
      outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v4, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
      if ((v26 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4BB08]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
      objc_msgSend(v27, sel_setSize_, *MEMORY[0x1E4F4BA98]);
      objc_msgSend(v27, sel_setShowsPlaceholderContent_, 1);
      uint64_t v28 = objc_allocWithZone(MEMORY[0x1E4F4BB10]);
      uint64_t v29 = @nonobjc ASCLockupViewGroup.init(name:)(0x502068636E75614CLL, 0xEB000000006C6C69);
      objc_msgSend(v27, sel_setGroup_, v29);
      uint64_t v30 = (void *)swift_allocObject();
      uint64_t v31 = v42;
      v30[2] = v42;
      v30[3] = v16;
      v30[4] = v27;
      swift_bridgeObjectRetain();
      uint64_t v8 = v27;
      ASCLockupViewGroup.__lockupRequest(for:completion:)(v31, v16, partial apply for closure #1 in closure #1 in ConversationHUDAppLaunchPillView.appStoreLockup.getter, v30);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v32 = self;
      double v33 = objc_msgSend(v32, sel_whiteColor);
      uint64_t v34 = objc_msgSend(v32, sel_blackColor);
      long long v35 = objc_msgSend(v32, sel_blackColor);
      uint64_t v36 = objc_msgSend(v32, sel_whiteColor);
      uint64_t v37 = objc_msgSend(v32, sel_whiteColor);
      unint64_t v38 = objc_allocWithZone(MEMORY[0x1E4F4BB28]);
      uint64_t v39 = @nonobjc ASCOfferTheme.init(titleBackgroundColor:titleTextColor:subtitleTextColor:iconTintColor:progressColor:)(v33, v34, v35, v36, v37);
      objc_msgSend(v8, sel_setOfferTheme_, v39);
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v44, &demangling cache variable for type metadata for Activity?);
    }
  }
  return v8;
}

void closure #1 in closure #1 in ConversationHUDAppLaunchPillView.appStoreLockup.getter(uint64_t a1, void *a2, int a3, int a4, id a5)
{
  if (a2)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain();
    id v7 = a2;
    swift_bridgeObjectRetain();
    id v8 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v25 = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v12 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      id v14 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v15 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, oslog, v9, "Failed to request lockup for bundleIdentifier: %s, error: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v11, -1, -1);
      MEMORY[0x1C87760E0](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else if (a1)
  {
    objc_msgSend(a5, sel_setRequest_, a1);
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v25 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v22 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v18, v19, "Failed to get lockupRequest for bundleIdentifier %s and received no error", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v21, -1, -1);
      MEMORY[0x1C87760E0](v20, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void ASCLockupViewGroup.__lockupRequest(for:completion:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  aBlock[6] = *(void **)MEMORY[0x1E4F143B8];
  if (objc_msgSend(v4, sel_respondsToSelector_, sel__lockupRequestForBundleID_withContext_enableAppDistribution_completionBlock_))
  {
    aBlock[0] = v4;
    id v9 = v4;
    closure #1 in closure #1 in ASCLockupViewGroup.__lockupRequest(for:completion:)(aBlock, a1, a2, (uint64_t)a3, (uint64_t)a4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1C87730B0](a1, a2);
    uint64_t v11 = *MEMORY[0x1E4F4BA68];
    aBlock[4] = a3;
    aBlock[5] = a4;
    aBlock[0] = (void *)MEMORY[0x1E4F143A8];
    aBlock[1] = (void *)1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_20;
    uint64_t v12 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel__lockupRequestForBundleID_withContext_completionBlock_, v10, v11, v12);
    _Block_release(v12);
  }
}

id ConversationHUDAppLaunchPillView.contentHStack.getter()
{
  return ConversationHUDAppLaunchPillView.backgroundMaterialView.getter(&OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___contentHStack, (uint64_t (*)(uint64_t))closure #1 in ConversationHUDAppLaunchPillView.contentHStack.getter);
}

id closure #1 in ConversationHUDAppLaunchPillView.contentHStack.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  objc_msgSend(v2, sel_setAxis_, 0);
  objc_msgSend(v2, sel_setAlignment_, 3);
  objc_msgSend(v2, sel_setSpacing_, 12.0);
  uint64_t v3 = ConversationHUDAppLaunchPillView.appStoreLockup.getter();
  if (v3) {
    goto LABEL_6;
  }
  if (*(void *)(a1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_iconView)) {
    objc_msgSend(v2, sel_addArrangedSubview_);
  }
  id v4 = ConversationHUDAppLaunchPillView.labelsVStack.getter();
  objc_msgSend(v2, sel_addArrangedSubview_, v4);

  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction);
  if (v5)
  {
    uint64_t v3 = v5;
LABEL_6:
    uint64_t v6 = v3;
    objc_msgSend(v2, sel_addArrangedSubview_, v3);
  }
  return v2;
}

id ConversationHUDAppLaunchPillView.labelsVStack.getter()
{
  return ConversationHUDAppLaunchPillView.backgroundMaterialView.getter(&OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___labelsVStack, (uint64_t (*)(uint64_t))closure #1 in ConversationHUDAppLaunchPillView.labelsVStack.getter);
}

id ConversationHUDAppLaunchPillView.backgroundMaterialView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in ConversationHUDAppLaunchPillView.labelsVStack.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  objc_msgSend(v0, sel_setAxis_, 1);
  objc_msgSend(v0, sel_setAlignment_, 1);
  objc_msgSend(v0, sel_setSpacing_, 0.0);
  id v1 = ConversationHUDAppLaunchPillView.titleLabel.getter();
  objc_msgSend(v0, sel_addArrangedSubview_, v1);

  id v2 = ConversationHUDAppLaunchPillView.subtitleLabel.getter();
  uint64_t v3 = outlined bridged method (ob) of @objc UILabel.text.getter(v2);
  id v5 = v0;
  if (v4)
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    swift_bridgeObjectRelease();
    uint64_t v8 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0) {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    id v5 = v0;
    if (v8)
    {
      id v5 = ConversationHUDAppLaunchPillView.subtitleLabel.getter();
      objc_msgSend(v0, sel_addArrangedSubview_, v5);
    }
  }

  return v0;
}

void ConversationHUDAppLaunchPillView.iconView.setter(uint64_t a1)
{
}

id ConversationHUDAppLaunchPillView.titleLabel.getter()
{
  return ConversationHUDAppLaunchPillView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___titleLabel, (SEL *)&selRef_labelColor);
}

id ConversationHUDAppLaunchPillView.subtitleLabel.getter()
{
  return ConversationHUDAppLaunchPillView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___subtitleLabel, (SEL *)&selRef_secondaryLabelColor);
}

id ConversationHUDAppLaunchPillView.titleLabel.getter(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = closure #1 in ConversationHUDAppLaunchPillView.titleLabel.getter(a2);
    unint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    unint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in ConversationHUDAppLaunchPillView.titleLabel.getter(SEL *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  OUTLINED_FUNCTION_7_37((uint64_t)objc_msgSend(v2, sel_setNumberOfLines_, 1), sel_setClipsToBounds_);
  objc_msgSend(v2, sel_setLineBreakMode_, 4);
  id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

  Class v5 = UIFont.caseSensitive()().super.isa;
  objc_msgSend(v2, sel_setFont_, v5);

  OUTLINED_FUNCTION_7_37(v6, sel_setAdjustsFontForContentSizeCategory_);
  id v7 = [self *a1];
  objc_msgSend(v2, sel_setTextColor_, v7);

  id v9 = OUTLINED_FUNCTION_7_37(v8, sel_setMarqueeEnabled_);
  OUTLINED_FUNCTION_7_37((uint64_t)v9, sel_setMarqueeRunning_);
  type metadata accessor for UILayoutPriority(0);
  lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority();
  OUTLINED_FUNCTION_6_39();
  LODWORD(v10) = v13;
  objc_msgSend(v2, sel_setContentCompressionResistancePriority_forAxis_, 0, v10);
  OUTLINED_FUNCTION_6_39();
  LODWORD(v11) = v13;
  objc_msgSend(v2, sel_setContentHuggingPriority_forAxis_, 0, v11);
  return v2;
}

void ConversationHUDAppLaunchPillView.callToAction.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction);
  unint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction);
  *id v3 = a1;
  v3[1] = a2;
}

id ConversationHUDAppLaunchPillView.__allocating_init(controlsManager:controlsContext:buttonType:menuHostViewController:activity:)(void *a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return ConversationHUDAppLaunchPillView.init(controlsManager:controlsContext:buttonType:menuHostViewController:activity:)(a1, a2, a3, a4, a5, a6);
}

id ConversationHUDAppLaunchPillView.init(controlsManager:controlsContext:buttonType:menuHostViewController:activity:)(void *a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_featureFlags;
  id v14 = objc_allocWithZone(MEMORY[0x1E4FADBD0]);
  uint64_t v15 = v6;
  *(void *)&v6[v13] = objc_msgSend(v14, sel_init);
  uint64_t v16 = (uint64_t)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_activity];
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(void *)(v16 + 32) = 0;
  uint64_t v17 = OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_margins;
  if (one-time initialization token for margins != -1) {
    swift_once();
  }
  uint64_t v18 = &v15[v17];
  long long v19 = *(_OWORD *)&qword_1EA37EAC0;
  *(_OWORD *)uint64_t v18 = static Layout.ConversationControlsAppLaunchPillView.margins;
  *((_OWORD *)v18 + 1) = v19;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___backgroundMaterialView] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___appStoreLockup] = 1;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___contentHStack] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___labelsVStack] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_iconView] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___titleLabel] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___subtitleLabel] = 0;
  uint64_t v20 = &v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  uint64_t v21 = (void **)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_menuHostViewController];
  *uint64_t v21 = 0;
  v21[1] = 0;
  *(void *)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsManager] = a1;
  v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsContext] = a2;
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(a3, (uint64_t)&v15[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType], (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  uint64_t v22 = *v21;
  *uint64_t v21 = a4;
  v21[1] = a5;
  id v23 = a1;
  id v24 = a4;

  swift_beginAccess();
  outlined assign with copy of Activity?(a6, v16);
  swift_endAccess();

  v27.receiver = v15;
  v27.super_class = (Class)type metadata accessor for ConversationHUDAppLaunchPillView();
  id v25 = objc_msgSendSuper2(&v27, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  ConversationHUDAppLaunchPillView.setupRootView()();

  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a6, &demangling cache variable for type metadata for Activity?);
  outlined destroy of ConversationControlsAppLaunchButtonType(a3, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  return v25;
}

void ConversationHUDAppLaunchPillView.setupRootView()()
{
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_setAllowsGroupOpacity_, 0);

  id v2 = ConversationHUDAppLaunchPillView.createIconView()();
  ConversationHUDAppLaunchPillView.iconView.setter((uint64_t)v2);
  ConversationHUDAppLaunchPillView.updateTitle()();
  ConversationHUDAppLaunchPillView.updateSubtitle()();
  uint64_t v3 = ConversationHUDAppLaunchPillView.createCallToAction()();
  ConversationHUDAppLaunchPillView.callToAction.setter(v3, v4);
  Class v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
  objc_msgSend(v0, sel_addSubview_, v5);

  ConversationHUDAppLaunchPillView.setupLayoutConstraints()();
}

id ConversationHUDAppLaunchPillView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationHUDAppLaunchPillView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_featureFlags;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  id v2 = &v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_activity];
  *(_OWORD *)id v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((void *)v2 + 4) = 0;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_margins;
  if (one-time initialization token for margins != -1) {
    swift_once();
  }
  uint64_t v4 = &v0[v3];
  long long v5 = *(_OWORD *)&qword_1EA37EAC0;
  *(_OWORD *)uint64_t v4 = static Layout.ConversationControlsAppLaunchPillView.margins;
  *((_OWORD *)v4 + 1) = v5;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___backgroundMaterialView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___appStoreLockup] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___contentHStack] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___labelsVStack] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_iconView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___titleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView____lazy_storage___subtitleLabel] = 0;
  uint64_t v6 = &v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  id v7 = &v0[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_menuHostViewController];
  *(void *)id v7 = 0;
  *((void *)v7 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ConversationHUDAppLaunchPillView.layoutSubviews()()
{
  swift_getObjectType();
  v27.receiver = v0;
  v27.super_class = (Class)type metadata accessor for ConversationHUDAppLaunchPillView();
  objc_msgSendSuper2(&v27, sel_layoutSubviews);
  double v1 = ConversationHUDAppLaunchPillView.minimumCornerRadius.getter();
  id v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0);
  uint64_t v3 = (void *)v2();
  objc_msgSend(v3, sel_bounds);
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;

  v28.origin.x = v5;
  v28.origin.CGFloat y = v7;
  v28.size.CGFloat width = v9;
  v28.size.CGFloat height = v11;
  double v12 = CGRectGetHeight(v28) * 0.5;
  if (v1 <= v12) {
    double v1 = v12;
  }
  uint64_t v13 = (void *)v2();
  objc_msgSend(v13, sel__continuousCornerRadius);
  double v15 = v14;

  if (v15 != v1)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v26 = v20;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v21 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v17, v18, "[%{public}s] updating corner radius to %f", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v20, -1, -1);
      MEMORY[0x1C87760E0](v19, -1, -1);
    }

    id v25 = (void *)((uint64_t (*)(uint64_t, uint64_t))v2)(v23, v24);
    objc_msgSend(v25, sel__setContinuousCornerRadius_, v1);
  }
}

void ConversationHUDAppLaunchPillView.addTarget(_:action:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v10);
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1D38]);
  id v7 = @nonobjc UITapGestureRecognizer.init(target:action:)(v10, a2);
  objc_msgSend(v3, sel_addGestureRecognizer_, v7);

  double v8 = *(void **)&v3[OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction];
  if (v8)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    id v9 = v8;
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, _bridgeAnythingToObjectiveC<A>(_:)(), a2, 64);

    swift_unknownObjectRelease();
  }
}

id ConversationHUDAppLaunchPillView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ConversationHUDAppLaunchPillView.init(frame:)()
{
}

id ConversationHUDAppLaunchPillView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationHUDAppLaunchPillView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ConversationHUDAppLaunchPillView.createIconView()()
{
  double v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  MEMORY[0x1F4188790](v2 - 8);
  double v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  double v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  double v10 = (void **)((char *)v47 - v9);
  uint64_t v11 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType;
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0((uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType, (uint64_t)v47 - v9, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  if (!swift_getEnumCaseMultiPayload())
  {
    uint64_t v19 = *v10;
    id v15 = ConversationHUDAppLaunchPillView.createIconViewForLagunaRecommendation(_:)();

    return v15;
  }
  outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v10, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  swift_storeEnumTagMultiPayload();
  char v12 = static ConversationControlsAppLaunchButtonType.== infix(_:_:)(v11, (uint64_t)v8);
  uint64_t v13 = outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v8, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  if ((v12 & 1) == 0)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC8))(&v52, v13);
    if (!v54)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v52, &demangling cache variable for type metadata for Activity?);
      return 0;
    }
    outlined init with take of Notice(&v52, (uint64_t)v49);
    unsigned int v20 = objc_msgSend(*(id *)((char *)v1+ OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_featureFlags), sel_uninstalledAppStoreLockupEnabled);
    uint64_t v21 = v50;
    uint64_t v22 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    if (!v20)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(v21, v22) & 1) == 0)
      {
        id v25 = (void *)0x80000001C3798470;
        uint64_t v23 = 0xD000000000000012;
LABEL_15:
        uint64_t v26 = v50;
        uint64_t v27 = v51;
        __swift_project_boxed_opaque_existential_1(v49, v50);
        (*(void (**)(uint64_t, uint64_t))(v27 + 112))(v26, v27);
        uint64_t v28 = type metadata accessor for Collaboration(0);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v28);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, &demangling cache variable for type metadata for Collaboration?);
        if (EnumTagSinglePayload == 1)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
          id v30 = static UIImageView.appIcon(for:)(v23, v25);
          if (!v30) {
            goto LABEL_23;
          }
        }
        else
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
          uint64_t v31 = (void *)*MEMORY[0x1E4FB2928];
          strcpy((char *)&v52, "person.2.fill");
          HIWORD(v52) = -4864;
          uint64_t v53 = 3;
          long long v54 = v31;
          __int16 v55 = 0;
          uint64_t v56 = 4;
          char v57 = 0;
          uint64_t v58 = 0;
          id v32 = v31;
          id v33 = static UIImage.symbolImage(for:)((uint64_t)&v52);

          swift_bridgeObjectRelease();
          if (v33)
          {
            id v34 = objc_msgSend(self, sel_whiteColor);
            id v35 = objc_msgSend(v33, sel_imageWithTintColor_renderingMode_, v34, 1);
          }
          else
          {
            id v35 = 0;
          }
          uint64_t v36 = v50;
          uint64_t v37 = v51;
          __swift_project_boxed_opaque_existential_1(v49, v50);
          LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 40))(v36, v37);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
          if (v36)
          {
            id v30 = static UIImageView.appIcon(for:)(v23, v25);

            if (!v30)
            {
LABEL_23:
              if (one-time initialization token for conversationControls != -1) {
                swift_once();
              }
              uint64_t v38 = type metadata accessor for Logger();
              __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationControls);
              swift_bridgeObjectRetain();
              uint64_t v39 = Logger.logObject.getter();
              os_log_type_t v40 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v39, v40))
              {
                float v41 = (uint8_t *)swift_slowAlloc();
                uint64_t v42 = swift_slowAlloc();
                uint64_t v48 = v42;
                *(_DWORD *)float v41 = 136315138;
                if (v25)
                {
                  v47[0] = v23;
                  v47[1] = v25;
                  swift_bridgeObjectRetain();
                  uint64_t v43 = String.init<A>(reflecting:)();
                  unint64_t v45 = v44;
                }
                else
                {
                  unint64_t v45 = 0xE300000000000000;
                  uint64_t v43 = 7104878;
                }
                v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v48);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1C2F90000, v39, v40, "Unable to obtain icon for bundleIdentifier: %s", v41, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1C87760E0](v42, -1, -1);
                MEMORY[0x1C87760E0](v41, -1, -1);
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
              return 0;
            }
          }
          else
          {
            id v30 = static UIImageView.defaultAppIcon(for:)((uint64_t)v35);
          }
        }
        id v15 = v30;
        swift_bridgeObjectRelease();
        ConversationHUDAppLaunchPillView.constrainIconView(_:)(v15);

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
        return v15;
      }
      uint64_t v21 = v50;
      uint64_t v22 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
    id v25 = v24;
    goto LABEL_15;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v14 = (id *)(static NameAndPhotoUtilities.shared
             + OBJC_IVAR____TtC15ConversationKit21NameAndPhotoUtilities_personalAvatarView);
  swift_beginAccess();
  id v15 = *v14;
  if (*v14)
  {
    id v16 = v15;
    ConversationHUDAppLaunchPillView.constrainIconView(_:)(v16);
    id v17 = objc_msgSend(v16, sel_layer);
    objc_msgSend(v17, sel_setCornerRadius_, 26.0);

    id v18 = objc_msgSend(v16, sel_layer);
    objc_msgSend(v18, sel_setMasksToBounds_, 1);
  }
  return v15;
}

void ConversationHUDAppLaunchPillView.updateTitle()()
{
  void (*v40)(long long *__return_ptr, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  unsigned int v46;
  id v47;
  id v48;
  const char *v49;
  id v50;
  id v51;
  Swift::String v52;
  Swift::String_optional v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String_optional v56;
  Swift::String v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  void *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  Swift::String v100;
  Swift::String_optional v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Swift::String_optional v113;
  Swift::String v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  Swift::String v126;
  Swift::String_optional v127;
  Swift::String v128;
  uint64_t v129;
  uint64_t countAndFlagsBits;
  void *v131;
  void *object;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  Swift::String v137;
  Swift::String_optional v138;
  Swift::String v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  Swift::String_optional v143;
  Swift::String v144;
  uint64_t v145;
  Swift::String v146;
  id v147;
  Swift::String v148;
  Swift::String_optional v149;
  Swift::String v150;
  Swift::String v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  void *v155;
  char *v156;
  uint64_t v157;
  void *v158;
  long long v159;
  uint64_t v160;
  void v161[3];
  uint64_t v162;
  uint64_t v163;
  Swift::String v164;
  Swift::String v165;
  Swift::String v166;
  Swift::String v167;
  Swift::String v168;

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StagedCollaboration?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v155 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  int v156 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v155 - v7;
  id v157 = type metadata accessor for Collaboration(0);
  MEMORY[0x1F4188790](v157);
  uint64_t v155 = (void **)((char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  id v16 = (char *)&v155 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v155 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v155 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (id *)((char *)&v155 - v23);
  uint64_t v158 = v0;
  uint64_t v25 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType;
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0((uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType, (uint64_t)&v155 - v23, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  if (!swift_getEnumCaseMultiPayload())
  {
    id v31 = *v24;
    id v32 = outlined bridged method (ob) of @objc TUNearbyDeviceHandle.name.getter(objc_msgSend(*v24, sel_deviceHandle));
    if (v33)
    {
      uint64_t v34 = (uint64_t)v32;
      uint64_t v35 = v33;
      id v36 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      outlined bridged method (mbnn) of @objc UILabel.text.setter(v34, v35, v36);
    }
    else
    {
      uint64_t v50 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      uint64_t v51 = objc_msgSend(self, sel_conversationKit);
      v164._object = (void *)0xE000000000000000;
      v52._uint64_t countAndFlagsBits = 0x56545F454C505041;
      v52._object = (void *)0xE800000000000000;
      v53.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v53.value._object = (void *)0xEF74694B6E6F6974;
      v54._uint64_t countAndFlagsBits = 0;
      v54._object = (void *)0xE000000000000000;
      v164._uint64_t countAndFlagsBits = 0;
      __int16 v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v52, v53, (NSBundle)v51, v54, v164);

      outlined bridged method (mbnn) of @objc UILabel.text.setter(v55._countAndFlagsBits, (uint64_t)v55._object, v50);
    }

    return;
  }
  outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v24, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(v25, (uint64_t)v22, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  if (swift_getEnumCaseMultiPayload() - 9 > 2)
  {
    outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v22, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
    _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(v25, (uint64_t)v16, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v38 = outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v16, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
    if (EnumCaseMultiPayload == 1)
    {
      id v27 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      id v28 = objc_msgSend(self, sel_conversationKit);
      uint64_t v152 = 0xE000000000000000;
      unint64_t v29 = 0x535F4E4545524353;
      unint64_t v39 = 0xEE00474E49524148;
LABEL_21:
      v56.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v56.value._object = (void *)0xEF74694B6E6F6974;
      v57._uint64_t countAndFlagsBits = 0;
      v57._object = (void *)0xE000000000000000;
      uint64_t v58 = 0;
      long long v59 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v29, v56, (NSBundle)v28, v57, *(Swift::String *)(&v152 - 1));

      outlined bridged method (mbnn) of @objc UILabel.text.setter(v59._countAndFlagsBits, (uint64_t)v59._object, v27);
LABEL_22:

      return;
    }
    os_log_type_t v40 = *(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v158) + 0xC8);
    v40(&v159, v38);
    if (!v160)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v159, &demangling cache variable for type metadata for Activity?);
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationControls);
      uint64_t v61 = v158;
      uint64_t v62 = Logger.logObject.getter();
      uint64_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        id v65 = swift_slowAlloc();
        *(void *)&uint64_t v159 = v65;
        *(_DWORD *)uint64_t v64 = 136315138;
        ((void (*)(void *__return_ptr))v40)(v161);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity?);
        id v66 = String.init<A>(describing:)();
        v161[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v62, v63, "AppLaunchButton: No activity:%s", v64, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v65, -1, -1);
        MEMORY[0x1C87760E0](v64, -1, -1);
      }
      else
      {
      }
      id v27 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      objc_msgSend(v27, sel_setText_, 0);
      goto LABEL_22;
    }
    outlined init with take of Notice(&v159, (uint64_t)v161);
    _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(v25, (uint64_t)v13, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 4u:
        float v41 = v162;
        uint64_t v42 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 104))(v41, v42);
        if (v43)
        {
          unint64_t v44 = v43;
          unint64_t v45 = objc_msgSend(v43, sel_activity);
          uint64_t v46 = objc_msgSend(v45, sel_isScreenSharingActivity);

          if (v46)
          {
            id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
            uint64_t v48 = objc_msgSend(self, sel_conversationKit);
            char v153 = 0xE000000000000000;
            uint64_t v49 = "Join Screen Sharing";
            goto LABEL_53;
          }
        }
        id v68 = v162;
        uint64_t v69 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        uint64_t v70 = (uint64_t)v156;
        (*(void (**)(uint64_t, uint64_t))(v69 + 112))(v68, v69);
        LODWORD(v68) = __swift_getEnumTagSinglePayload(v70, 1, v157);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v70, &demangling cache variable for type metadata for Collaboration?);
        if (v68 == 1)
        {
          id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
          uint64_t v48 = objc_msgSend(self, sel_conversationKit);
          char v153 = 0xE000000000000000;
          uint64_t v71 = 0x616853206E696F4ALL;
          uint64_t v72 = 0xEE0079616C506572;
          goto LABEL_64;
        }
        uint64_t v109 = v162;
        uint64_t v110 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        uint64_t v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 48))(v109, v110);
        if (v112)
        {
          id v81 = v111;
          char v83 = v112;
          id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
          double v84 = objc_msgSend(self, sel_conversationKit);
          double v85 = 0xD00000000000001DLL;
          uint64_t v154 = 0xE000000000000000;
          uint64_t v92 = "%@_Collaboration_Title_Quoted";
          goto LABEL_49;
        }
        id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
        uint64_t v48 = objc_msgSend(self, sel_conversationKit);
        uint64_t v71 = 0xD000000000000012;
        char v153 = 0xE000000000000000;
        uint64_t v142 = "Join Collaboration";
        goto LABEL_63;
      case 3u:
        uint64_t v75 = v162;
        uint64_t v76 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        (*(void (**)(uint64_t, uint64_t))(v76 + 112))(v75, v76);
        if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v157) != 1)
        {
          Swift::Int v120 = (uint64_t)v8;
          uint64_t v121 = v155;
          _s15ConversationKit11ParticipantVWObTm_0(v120, (uint64_t)v155, (void (*)(void))type metadata accessor for Collaboration);
          if (v121[7] == 1 || (uint64_t v122 = v121[9]) == 0)
          {
            uint64_t v124 = ConversationHUDAppLaunchPillView.titleLabel.getter();
            int v147 = objc_msgSend(self, sel_conversationKit);
            v148._uint64_t countAndFlagsBits = 0xD000000000000012;
            v168._object = (void *)0xE000000000000000;
            v148._object = (void *)0x80000001C3798490;
            v149.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
            v149.value._object = (void *)0xEF74694B6E6F6974;
            v150._uint64_t countAndFlagsBits = 0;
            v150._object = (void *)0xE000000000000000;
            v168._uint64_t countAndFlagsBits = 0;
            uint64_t v151 = NSLocalizedString(_:tableName:bundle:value:comment:)(v148, v149, (NSBundle)v147, v150, v168);
            uint64_t countAndFlagsBits = v151._countAndFlagsBits;
            object = v151._object;
          }
          else
          {
            id v123 = v121[8];
            swift_bridgeObjectRetain();
            uint64_t v124 = ConversationHUDAppLaunchPillView.titleLabel.getter();
            uint64_t v125 = objc_msgSend(self, sel_conversationKit);
            v126._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
            v166._object = (void *)0xE000000000000000;
            v126._object = (void *)0x80000001C37984B0;
            v127.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
            v127.value._object = (void *)0xEF74694B6E6F6974;
            v128._uint64_t countAndFlagsBits = 0;
            v128._object = (void *)0xE000000000000000;
            v166._uint64_t countAndFlagsBits = 0;
            NSLocalizedString(_:tableName:bundle:value:comment:)(v126, v127, (NSBundle)v125, v128, v166);

            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            uint64_t v129 = swift_allocObject();
            *(_OWORD *)(v129 + 16) = xmmword_1C3769620;
            *(void *)(v129 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v129 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v129 + 32) = v123;
            *(void *)(v129 + 40) = v122;
            uint64_t countAndFlagsBits = String.init(format:_:)();
            object = v131;
            swift_bridgeObjectRelease();
          }
          outlined bridged method (mbnn) of @objc UILabel.text.setter(countAndFlagsBits, (uint64_t)object, v124);

          uint64_t v73 = type metadata accessor for Collaboration;
          id v74 = (uint64_t)v121;
LABEL_69:
          outlined destroy of ConversationControlsAppLaunchButtonType(v74, (void (*)(void))v73);
          goto LABEL_66;
        }
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for Collaboration?);
        id v77 = v162;
        id v78 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        long long v79 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v78 + 104))(v77, v78);
        if (v79)
        {
          uint64_t v80 = v79;
          id v81 = outlined bridged method (ob) of @objc TUConversationActivity.localizedApplicationName.getter(objc_msgSend(v79, sel_activity));
          char v83 = v82;

          if (v83)
          {
            id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
            double v84 = objc_msgSend(self, sel_conversationKit);
            uint64_t v154 = 0xE000000000000000;
            double v85 = 0x6975716552204025;
            double v86 = 0xEB00000000646572;
            goto LABEL_50;
          }
        }
        id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
        uint64_t v48 = objc_msgSend(self, sel_conversationKit);
        uint64_t v71 = 0xD000000000000011;
        char v153 = 0xE000000000000000;
        uint64_t v142 = "App Not Installed";
        goto LABEL_63;
      case 5u:
        double v87 = objc_msgSend(self, sel_sharedInstance);
        double v88 = objc_msgSend(v87, sel_neighborhoodActivityConduit);

        double v89 = objc_msgSend(v88, sel_activeSplitSessionTV);
        if (!v89 || (double v90 = outlined bridged method (ob) of @objc TUNearbyDeviceHandle.name.getter(v89), !v91))
        {
          id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
          uint64_t v48 = objc_msgSend(self, sel_conversationKit);
          char v153 = 0xE000000000000000;
          uint64_t v49 = "Playing on Apple TV";
LABEL_53:
          uint64_t v72 = (unint64_t)(v49 - 32) | 0x8000000000000000;
          uint64_t v71 = 0xD000000000000013;
          goto LABEL_64;
        }
        id v81 = (uint64_t)v90;
        char v83 = v91;
        id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
        double v84 = objc_msgSend(self, sel_conversationKit);
        double v85 = 0xD000000000000014;
        uint64_t v154 = 0xE000000000000000;
        uint64_t v92 = "Playing on Quoted_%@";
LABEL_49:
        double v86 = (unint64_t)(v92 - 32) | 0x8000000000000000;
        goto LABEL_50;
      case 6u:
        uint64_t v93 = v162;
        Swift::UInt v94 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        char v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 48))(v93, v94);
        if (!v96)
        {
          id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
          uint64_t v48 = objc_msgSend(self, sel_conversationKit);
          char v153 = 0xE000000000000000;
          uint64_t v71 = 0x414C504552414853;
          uint64_t v72 = 0xE900000000000059;
          goto LABEL_64;
        }
        id v81 = v95;
        char v83 = v96;
        id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
        double v84 = objc_msgSend(self, sel_conversationKit);
        uint64_t v154 = 0xE000000000000000;
        double v85 = 0x616C506572616853;
        double v86 = 0xEC00000040252079;
LABEL_50:
        v113.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v113.value._object = (void *)0xEF74694B6E6F6974;
        v114._uint64_t countAndFlagsBits = 0;
        v114._object = (void *)0xE000000000000000;
        uint64_t v115 = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v85, v113, (NSBundle)v84, v114, *(Swift::String *)(&v154 - 1));

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        int v116 = swift_allocObject();
        *(_OWORD *)(v116 + 16) = xmmword_1C3769620;
        *(void *)(v116 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v116 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v116 + 32) = v81;
        *(void *)(v116 + 40) = v83;
        int v117 = String.init(format:_:)();
        id v119 = v118;
        goto LABEL_51;
      case 7u:
        id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        double v97 = unk_1EA37DFA0;
        double v98 = (void *)qword_1EA37DFA8;
        double v99 = (id)static LocalizationSource.conversationKit;
        swift_bridgeObjectRetain();
        v100._uint64_t countAndFlagsBits = 0xD000000000000025;
        v165._object = (void *)0xE000000000000000;
        v100._object = (void *)0x80000001C3798530;
        v101.value._uint64_t countAndFlagsBits = v97;
        v101.value._object = v98;
        v102._uint64_t countAndFlagsBits = 0;
        v102._object = (void *)0xE000000000000000;
        v165._uint64_t countAndFlagsBits = 0;
        int v103 = NSLocalizedString(_:tableName:bundle:value:comment:)(v100, v101, (NSBundle)v99, v102, v165);
        swift_bridgeObjectRelease();

        uint64_t v104 = v103._countAndFlagsBits;
        uint64_t v105 = v103._object;
        goto LABEL_65;
      case 8u:
        uint64_t v106 = v162;
        uint64_t v107 = v163;
        __swift_project_boxed_opaque_existential_1(v161, v162);
        (*(void (**)(uint64_t, uint64_t))(v107 + 120))(v106, v107);
        id v108 = type metadata accessor for StagedCollaboration(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v108) == 1)
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v3, &demangling cache variable for type metadata for StagedCollaboration?);
        }
        else
        {
          char v133 = &v3[*(int *)(v108 + 28)];
          uint64_t v135 = *(void *)v133;
          uint64_t v134 = *((void *)v133 + 1);
          swift_bridgeObjectRetain();
          outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v3, (void (*)(void))type metadata accessor for StagedCollaboration);
          if (v134)
          {
            id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
            int v136 = objc_msgSend(self, sel_conversationKit);
            v167._object = (void *)0xE000000000000000;
            v137._object = (void *)0x80000001C3798510;
            v137._uint64_t countAndFlagsBits = 0xD000000000000013;
            v138.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
            v138.value._object = (void *)0xEF74694B6E6F6974;
            v139._uint64_t countAndFlagsBits = 0;
            v139._object = (void *)0xE000000000000000;
            v167._uint64_t countAndFlagsBits = 0;
            NSLocalizedString(_:tableName:bundle:value:comment:)(v137, v138, (NSBundle)v136, v139, v167);

            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            id v140 = swift_allocObject();
            *(_OWORD *)(v140 + 16) = xmmword_1C3769620;
            *(void *)(v140 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v140 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v140 + 32) = v135;
            *(void *)(v140 + 40) = v134;
            int v117 = String.init(format:_:)();
            id v119 = v141;
LABEL_51:
            swift_bridgeObjectRelease();
            uint64_t v104 = v117;
            uint64_t v105 = v119;
LABEL_65:
            outlined bridged method (mbnn) of @objc UILabel.text.setter(v104, (uint64_t)v105, v47);

LABEL_66:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
            return;
          }
        }
        id v47 = ConversationHUDAppLaunchPillView.titleLabel.getter();
        uint64_t v48 = objc_msgSend(self, sel_conversationKit);
        uint64_t v71 = 0xD00000000000001BLL;
        char v153 = 0xE000000000000000;
        uint64_t v142 = "COLLABORATE_ON_GENERIC_ITEM";
LABEL_63:
        uint64_t v72 = (unint64_t)(v142 - 32) | 0x8000000000000000;
LABEL_64:
        v143.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v143.value._object = (void *)0xEF74694B6E6F6974;
        v144._uint64_t countAndFlagsBits = 0;
        v144._object = (void *)0xE000000000000000;
        int v145 = 0;
        int v146 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v71, v143, (NSBundle)v48, v144, *(Swift::String *)(&v153 - 1));

        uint64_t v104 = v146._countAndFlagsBits;
        uint64_t v105 = v146._object;
        goto LABEL_65;
      default:
        uint64_t v73 = type metadata accessor for ConversationControlsAppLaunchButtonType;
        id v74 = (uint64_t)v13;
        goto LABEL_69;
    }
  }
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(v25, (uint64_t)v19, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  int v26 = swift_getEnumCaseMultiPayload();
  switch(v26)
  {
    case 11:
      id v27 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      id v28 = objc_msgSend(self, sel_conversationKit);
      unint64_t v29 = 0xD00000000000001DLL;
      uint64_t v152 = 0xE000000000000000;
      id v30 = "NEW_CONTACT_NAME_BANNER_TITLE";
      goto LABEL_20;
    case 10:
      id v27 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      id v28 = objc_msgSend(self, sel_conversationKit);
      unint64_t v29 = 0xD000000000000017;
      uint64_t v152 = 0xE000000000000000;
      id v30 = "SHARE_NAME_BANNER_TITLE";
      goto LABEL_20;
    case 9:
      id v27 = ConversationHUDAppLaunchPillView.titleLabel.getter();
      id v28 = objc_msgSend(self, sel_conversationKit);
      unint64_t v29 = 0xD000000000000021;
      uint64_t v152 = 0xE000000000000000;
      id v30 = "SHARE_NAME_AND_PHOTO_BANNER_TITLE";
LABEL_20:
      unint64_t v39 = (unint64_t)(v30 - 32) | 0x8000000000000000;
      goto LABEL_21;
  }
  outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v19, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
}

void ConversationHUDAppLaunchPillView.updateSubtitle()()
{
  uint64_t v1 = type metadata accessor for Participant(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v54 - v5;
  uint64_t v7 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType, (uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 1:
      _s15ConversationKit11ParticipantVWObTm_0((uint64_t)v9, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
      id v58 = ConversationHUDAppLaunchPillView.subtitleLabel.getter();
      id v15 = objc_msgSend(self, sel_conversationKit);
      v70._object = (void *)0xE000000000000000;
      v16._object = (void *)0x80000001C3798440;
      v16._uint64_t countAndFlagsBits = 0xD000000000000024;
      v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v17.value._object = (void *)0xEF74694B6E6F6974;
      v18._uint64_t countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      v70._uint64_t countAndFlagsBits = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v70)._countAndFlagsBits;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
      uint64_t v20 = *(void **)&v6[*(int *)(v1 + 28)];
      if (v20)
      {
        id v21 = v20;
        outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v21);
        if (v22)
        {
          if (objc_msgSend(v21, sel_shouldHideContact))
          {
            uint64_t v55 = type metadata accessor for PersonNameComponents();
            uint64_t v56 = &v54;
            uint64_t v54 = *(void *)(v55 - 8);
            MEMORY[0x1F4188790](v55);
            uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
            swift_bridgeObjectRetain();
            PersonNameComponents.init()();
            PersonNameComponents.givenName.setter();
            PersonNameComponents.familyName.setter();
            if (one-time initialization token for initials != -1) {
              swift_once();
            }
            swift_beginAccess();
            id v25 = (id)static NSPersonNameComponentsFormatter.initials;
            Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
            id v27 = objc_msgSend(v25, sel_stringFromPersonNameComponents_, isa);

            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v30 = v29;

            (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v55);
            uint64_t v59 = v28;
            uint64_t v60 = v30;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol.localizedUppercase.getter();

            swift_bridgeObjectRelease();
            id v31 = 0;
            goto LABEL_25;
          }

          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0((uint64_t)v6, (uint64_t)v4, (void (*)(void))type metadata accessor for Participant);
      swift_retain();
      ParticipantContactDetailsCache.contactDetails(for:)();
      id v31 = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v4, (void (*)(void))type metadata accessor for Participant);
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Participant.name(_:)();
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      *(void *)(v19 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v19 + 32) = v46;
      *(void *)(v19 + 40) = v48;
      uint64_t v49 = String.init(format:_:)();
      uint64_t v51 = v50;
      swift_bridgeObjectRelease();
      uint64_t v52 = v49;
      uint64_t v53 = v58;
      outlined bridged method (mbnn) of @objc UILabel.text.setter(v52, v51, v58);

      uint64_t v43 = type metadata accessor for Participant;
      uint64_t v44 = (uint64_t)v6;
      goto LABEL_26;
    case 11:
      id v11 = ConversationHUDAppLaunchPillView.subtitleLabel.getter();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v32 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                       + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsManager))
                                 + 0x270))();
      NameAndPhotoUtilities.pendingIncomingName(from:)(v32, v33, v34, v35, v36, v37, v38, v39, v54, v55, (uint64_t)v56, countAndFlagsBits, (uint64_t)v58, v59, v60, (uint64_t)v61, v62, v63, v64,
        v65,
        v66,
        v67,
        v68,
        v69);
      uint64_t v14 = v40;
      uint64_t v13 = v41;
      swift_unknownObjectRelease();
      if (v13) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 10:
    case 9:
      id v11 = ConversationHUDAppLaunchPillView.subtitleLabel.getter();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v12 = (uint64_t *)(static NameAndPhotoUtilities.shared
                      + OBJC_IVAR____TtC15ConversationKit21NameAndPhotoUtilities_personalDisplayName);
      swift_beginAccess();
      uint64_t v13 = v12[1];
      if (v13)
      {
        uint64_t v14 = *v12;
        swift_bridgeObjectRetain();
LABEL_18:
        uint64_t v42 = (void *)MEMORY[0x1C87730B0](v14, v13);
        swift_bridgeObjectRelease();
LABEL_20:
        objc_msgSend(v11, sel_setText_, v42);

        return;
      }
LABEL_19:
      uint64_t v42 = 0;
      goto LABEL_20;
  }
  uint64_t v43 = type metadata accessor for ConversationControlsAppLaunchButtonType;
  uint64_t v44 = (uint64_t)v9;
LABEL_26:
  outlined destroy of ConversationControlsAppLaunchButtonType(v44, (void (*)(void))v43);
}

uint64_t ConversationHUDAppLaunchPillView.createCallToAction()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (id *)((char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ConversationControlsAction();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0((uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType, (uint64_t)v7, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:

      unsigned char *v10 = 1;
      goto LABEL_9;
    case 1u:
      swift_storeEnumTagMultiPayload();
      outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v7, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
      goto LABEL_10;
    case 3u:
      if (!objc_msgSend(*(id *)((char *)v1+ OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_featureFlags), sel_uninstalledAppStoreLockupEnabled))goto LABEL_9; {
      (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC8))(v24);
      }
      uint64_t v11 = v25;
      if (v25)
      {
        uint64_t v12 = v26;
        uint64_t v13 = __swift_project_boxed_opaque_existential_1(v24, v25);
        uint64_t v14 = *(void *)(v11 - 8);
        MEMORY[0x1F4188790](v13);
        Swift::String v16 = (char *)&v24[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v14 + 16))(v16);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v24, &demangling cache variable for type metadata for Activity?);
        (*(void (**)(uint64_t, uint64_t))(v12 + 112))(v11, v12);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v11);
        uint64_t v17 = type metadata accessor for Collaboration(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v17) != 1)
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, &demangling cache variable for type metadata for Collaboration?);
LABEL_9:
          swift_storeEnumTagMultiPayload();
LABEL_10:
          id v18 = objc_retain(*(id *)((char *)v1
                                  + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_menuHostViewController));
          ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
          uint64_t v20 = v19;

          outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v10, (void (*)(void))type metadata accessor for ConversationControlsAction);
          return v20;
        }
      }
      else
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v24, &demangling cache variable for type metadata for Activity?);
        uint64_t v22 = type metadata accessor for Collaboration(0);
        __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v22);
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, &demangling cache variable for type metadata for Collaboration?);
      return 0;
    case 4u:
    case 5u:
    case 6u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
      goto LABEL_9;
    default:
      outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v7, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
      return 0;
  }
}

Swift::Void __swiftcall ConversationHUDAppLaunchPillView.setupLayoutConstraints()()
{
  uint64_t v1 = v0;
  CGFloat v2 = 0.0;
  if (*((unsigned char *)&v0->super.super.isa
       + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsContext))
  {
    if (*((unsigned char *)&v0->super.super.isa
         + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_controlsContext) == 1)
    {
      static Layout.ConversationControls.values.getter((uint64_t)v39);
      CGFloat v3 = v40;
      static Layout.ConversationControls.values.getter((uint64_t)v41);
      CGFloat v2 = v42;
    }
    else
    {
      static Layout.ConversationControls.values.getter((uint64_t)v41);
      CGFloat v3 = v43;
    }
  }
  else
  {
    CGFloat v3 = 0.0;
  }
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v0->super.super.isa) + 0xE0);
  OUTLINED_FUNCTION_1_57();
  uint64_t v5 = (void *)v4();
  v45.top = 0.0;
  v45.leading = v3;
  v45.bottoCGAffineTransform m = v2;
  v45.trailing = v3;
  UIView.addConstraintsToFill(_:insets:)(v1, v45);

  objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v38 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769580;
  id v7 = objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_topAnchor);

  OUTLINED_FUNCTION_1_57();
  uint64_t v8 = (void *)v4();
  id v9 = objc_msgSend(v8, sel_topAnchor);

  id v10 = OUTLINED_FUNCTION_3_57();
  *(void *)(v6 + 32) = v10;
  id v11 = objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_leadingAnchor);

  OUTLINED_FUNCTION_1_57();
  uint64_t v12 = (void *)v4();
  id v13 = objc_msgSend(v12, sel_leadingAnchor);

  id v14 = OUTLINED_FUNCTION_3_57();
  *(void *)(v6 + 40) = v14;
  id v15 = objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_bottomAnchor);

  OUTLINED_FUNCTION_1_57();
  Swift::String v16 = (void *)v4();
  id v17 = objc_msgSend(v16, sel_bottomAnchor);

  id v18 = OUTLINED_FUNCTION_3_57();
  *(void *)(v6 + 48) = v18;
  id v19 = objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_trailingAnchor);

  OUTLINED_FUNCTION_1_57();
  uint64_t v20 = (void *)v4();
  id v21 = objc_msgSend(v20, sel_trailingAnchor);

  id v22 = OUTLINED_FUNCTION_3_57();
  *(void *)(v6 + 56) = v22;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v38, sel_activateConstraints_, isa);

  uint64_t v24 = ConversationHUDAppLaunchPillView.appStoreLockup.getter();
  if (v24)
  {
    uint64_t v25 = v24;
    objc_msgSend(v24, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1C3769F40;
    id v27 = objc_msgSend(v25, sel_leadingAnchor);
    id v28 = objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_leadingAnchor);

    id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);
    *(void *)(v26 + 32) = v29;
    id v30 = objc_msgSend(v25, sel_trailingAnchor);
    id v31 = objc_msgSend(OUTLINED_FUNCTION_0_35(), sel_trailingAnchor);

    id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);
    *(void *)(v26 + 40) = v32;
    id v33 = objc_msgSend(v25, sel_bottomAnchor);
    id v34 = ConversationHUDAppLaunchPillView.contentHStack.getter();
    id v35 = objc_msgSend(v34, sel_bottomAnchor);

    id v36 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v35);
    *(void *)(v26 + 48) = v36;
    specialized Array._endMutation()();
    Class v37 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v38, sel_activateConstraints_, v37);
  }
}

id ConversationHUDAppLaunchPillView.createIconViewForLagunaRecommendation(_:)()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  strcpy((char *)v7, "appletv.fill");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  uint64_t v8 = 2;
  id v9 = v0;
  LOWORD(v10) = 0;
  uint64_t v11 = 6;
  LOBYTE(v12) = 0;
  uint64_t v13 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v7);

  swift_bridgeObjectRelease();
  id v3 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
  id v4 = objc_msgSend(v3, sel_initWithImage_, v2, v7[0], v7[1], v8, v9, v10, v11, v12, v13);

  objc_msgSend(v4, sel_setContentMode_, 1);
  id v5 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v4, sel_setTintColor_, v5);

  ConversationHUDAppLaunchPillView.constrainIconView(_:)(v4);
  return v4;
}

void ConversationHUDAppLaunchPillView.constrainIconView(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  MEMORY[0x1F4188790](v3);
  id v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType;
  swift_storeEnumTagMultiPayload();
  LOBYTE(v6) = static ConversationControlsAppLaunchButtonType.== infix(_:_:)(v6, (uint64_t)v5);
  outlined destroy of ConversationControlsAppLaunchButtonType((uint64_t)v5, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  if (v6) {
    double v7 = 52.0;
  }
  else {
    double v7 = 32.0;
  }
  objc_msgSend(a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v8 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769610;
  id v10 = objc_msgSend(a1, sel_heightAnchor);
  id v11 = objc_msgSend(v10, sel_constraintEqualToConstant_, v7);

  *(void *)(v9 + 32) = v11;
  id v12 = objc_msgSend(a1, sel_widthAnchor);
  id v13 = objc_msgSend(v12, sel_constraintEqualToConstant_, v7);

  *(void *)(v9 + 40) = v13;
  v15[1] = v9;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_activateConstraints_, isa);
}

void ConversationHUDAppLaunchPillView.updateIconView()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_iconView);
  if (v1)
  {
    id v2 = v1;
    id v3 = ConversationHUDAppLaunchPillView.contentHStack.getter();
    objc_msgSend(v3, sel_removeArrangedSubview_, v2);

    objc_msgSend(v2, sel_removeFromSuperview);
  }
  id v4 = ConversationHUDAppLaunchPillView.createIconView()();
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    id v6 = v4;
    ConversationHUDAppLaunchPillView.iconView.setter(v5);
    id v7 = ConversationHUDAppLaunchPillView.contentHStack.getter();
    objc_msgSend(v7, sel_insertArrangedSubview_atIndex_, v6, 0);
  }
}

void ConversationHUDAppLaunchPillView.updateCallToAction()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_callToAction);
  if (v1)
  {
    id v2 = v1;
    id v3 = ConversationHUDAppLaunchPillView.contentHStack.getter();
    objc_msgSend(v3, sel_removeArrangedSubview_, v2);

    objc_msgSend(v2, sel_removeFromSuperview);
  }
  id v4 = (void *)ConversationHUDAppLaunchPillView.createCallToAction()();
  if (v4)
  {
    uint64_t v6 = (uint64_t)v4;
    uint64_t v7 = v5;
    id v8 = v4;
    ConversationHUDAppLaunchPillView.callToAction.setter(v6, v7);
    id v9 = ConversationHUDAppLaunchPillView.contentHStack.getter();
    objc_msgSend(v9, sel_addArrangedSubview_, v8);
  }
}

void closure #1 in closure #1 in ASCLockupViewGroup.__lockupRequest(for:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = *a1;
  swift_unknownObjectRetain();
  id v10 = (void *)MEMORY[0x1C87730B0](a2, a3);
  uint64_t v11 = *MEMORY[0x1E4F4BA68];
  v13[4] = a4;
  v13[5] = a5;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
  v13[3] = &block_descriptor_22;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel__lockupRequestForBundleID_withContext_enableAppDistribution_completionBlock_, v10, v11, 1, v12);
  _Block_release(v12);
  swift_unknownObjectRelease();
}

void thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t type metadata accessor for ConversationHUDAppLaunchPillView()
{
  uint64_t result = type metadata singleton initialization cache for ConversationHUDAppLaunchPillView;
  if (!type metadata singleton initialization cache for ConversationHUDAppLaunchPillView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id @nonobjc ASCLockupViewGroup.init(name:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  id v4 = objc_msgSend(v2, sel_initWithName_, v3);

  return v4;
}

id @nonobjc ASCOfferTheme.init(titleBackgroundColor:titleTextColor:subtitleTextColor:iconTintColor:progressColor:)(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v11 = objc_msgSend(v5, sel_initWithTitleBackgroundColor_titleTextColor_subtitleTextColor_iconTintColor_progressColor_, a1, a2, a3, a4, a5);

  return v11;
}

uint64_t ObjC metadata update function for ConversationHUDAppLaunchPillView()
{
  return type metadata accessor for ConversationHUDAppLaunchPillView();
}

uint64_t type metadata completion function for ConversationHUDAppLaunchPillView()
{
  uint64_t result = type metadata accessor for ConversationControlsAppLaunchButtonType(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for ConversationHUDAppLaunchPillView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHUDAppLaunchPillView);
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.activity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.activity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.activity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.backgroundMaterialView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.backgroundMaterialView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.backgroundMaterialView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.__allocating_init(controlsManager:controlsContext:buttonType:menuHostViewController:activity:)()
{
  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of ConversationHUDAppLaunchPillView.addTarget(_:action:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

void outlined consume of UIView??(id a1)
{
  if (a1 != (id)1) {
}
  }

id outlined copy of UIView??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_1C30CB590()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ConversationHUDAppLaunchPillView.appStoreLockup.getter(uint64_t a1, void *a2)
{
  closure #1 in closure #1 in ConversationHUDAppLaunchPillView.appStoreLockup.getter(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(id *)(v2 + 32));
}

uint64_t _s15ConversationKit0A27ControlsAppLaunchButtonTypeOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantVWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined destroy of ConversationControlsAppLaunchButtonType(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t static ShapeView.layerClass.getter()
{
  return type metadata accessor for CAShapeLayer();
}

unint64_t type metadata accessor for CAShapeLayer()
{
  unint64_t result = lazy cache variable for type metadata for CAShapeLayer;
  if (!lazy cache variable for type metadata for CAShapeLayer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAShapeLayer);
  }
  return result;
}

uint64_t ShapeView.shapeLayer.getter()
{
  id v1 = objc_msgSend(v0, sel_layer);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result)
  {

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t key path getter for ShapeView.fillColor : ShapeView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ShapeView.fillColor : ShapeView(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60);
  id v4 = *a1;
  return v3(v2);
}

id ShapeView.fillColor.getter()
{
  return ShapeView.fillColor.getter((SEL *)&selRef_fillColor);
}

void ShapeView.fillColor.setter(void *a1)
{
}

void (*ShapeView.fillColor.modify(void *a1))(id *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)ShapeView.shapeLayer.getter();
  id v4 = objc_msgSend(v3, sel_fillColor);

  *a1 = v4;
  return ShapeView.fillColor.modify;
}

void ShapeView.fillColor.modify(id *a1, char a2)
{
}

uint64_t key path getter for ShapeView.fillRule : ShapeView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ShapeView.fillRule : ShapeView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78))(*a1);
}

id ShapeView.fillRule.getter()
{
  uint64_t v0 = (void *)ShapeView.shapeLayer.getter();
  id v1 = objc_msgSend(v0, sel_fillRule);

  return v1;
}

void ShapeView.fillRule.setter(void *a1)
{
  id v1 = (void *)ShapeView.shapeLayer.getter();
  objc_msgSend(v1, sel_setFillRule_, a1);
}

void (*ShapeView.fillRule.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)ShapeView.shapeLayer.getter();
  id v4 = objc_msgSend(v3, sel_fillRule);

  *a1 = v4;
  return ShapeView.fillRule.modify;
}

void ShapeView.fillRule.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    id v4 = (id)ShapeView.shapeLayer.getter();
    objc_msgSend(v4, sel_setFillRule_, v3);
  }
  else
  {
    id v4 = (id)ShapeView.shapeLayer.getter();
    objc_msgSend(v4, sel_setFillRule_, v2);
  }
}

uint64_t key path getter for ShapeView.path : ShapeView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ShapeView.path : ShapeView(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  id v4 = *a1;
  return v3(v2);
}

id ShapeView.path.getter()
{
  return ShapeView.fillColor.getter((SEL *)&selRef_path);
}

id ShapeView.fillColor.getter(SEL *a1)
{
  id v2 = (void *)ShapeView.shapeLayer.getter();
  id v3 = [v2 *a1];

  return v3;
}

void ShapeView.path.setter(void *a1)
{
}

void ShapeView.fillColor.setter(void *a1, SEL *a2)
{
  id v3 = (void *)ShapeView.shapeLayer.getter();
  objc_msgSend(v3, *a2, a1);
}

void (*ShapeView.path.modify(void *a1))(id *a1, char a2)
{
  a1[1] = v1;
  id v3 = (void *)ShapeView.shapeLayer.getter();
  id v4 = objc_msgSend(v3, sel_path);

  *a1 = v4;
  return ShapeView.path.modify;
}

void ShapeView.path.modify(id *a1, char a2)
{
}

void ShapeView.fillColor.modify(id *a1, char a2, SEL *a3)
{
  id v4 = *a1;
  if (a2)
  {
    id v4 = v4;
    id v5 = (id)ShapeView.shapeLayer.getter();
    objc_msgSend(v5, *a3, v4);
  }
  else
  {
    id v5 = (id)ShapeView.shapeLayer.getter();
    objc_msgSend(v5, *a3, v4);
  }
}

id ShapeView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id ShapeView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v5 = type metadata accessor for ShapeView();
  double v1 = OUTLINED_FUNCTION_6_2();
  return objc_msgSendSuper2(v2, v3, v1, v0, v5);
}

uint64_t type metadata accessor for ShapeView()
{
  return self;
}

id ShapeView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ShapeView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ShapeView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id ShapeView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ShapeView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShapeView);
}

uint64_t dispatch thunk of ShapeView.fillColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ShapeView.fillColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ShapeView.fillColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ShapeView.fillRule.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ShapeView.fillRule.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ShapeView.fillRule.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ShapeView.path.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ShapeView.path.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ShapeView.path.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  id v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v3 - 8);
  objc_super v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v36 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (uint64_t)&v32 - v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v44;
    uint64_t v41 = v45;
    uint64_t v11 = v46;
    int64_t v12 = v47;
    unint64_t v13 = v48;
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v11 = ~v14;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v13 = v17 & v15;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v12 = 0;
  }
  uint64_t v39 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v35 = v11;
  uint64_t v37 = MEMORY[0x1E4FBC860];
  int64_t v40 = (unint64_t)(v11 + 64) >> 6;
  uint64_t v38 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    int64_t v18 = v12;
    if ((a1 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21) {
      goto LABEL_38;
    }
    uint64_t v43 = v21;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v22 = v49;
    swift_unknownObjectRelease();
    if (!v22) {
      goto LABEL_38;
    }
LABEL_31:
    id v26 = objc_msgSend(v22, sel_handle);
    ConversationController.participant(with:)();

    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
    {
      uint64_t result = outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for Participant?);
    }
    else
    {
      uint64_t v27 = v33;
      outlined init with take of ConversationControlsAction((uint64_t)v5, v33, (void (*)(void))type metadata accessor for Participant);
      outlined init with take of ConversationControlsAction(v27, v36, (void (*)(void))type metadata accessor for Participant);
      uint64_t v28 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28);
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1) {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28);
      }
      *(void *)(v28 + 16) = v30 + 1;
      unint64_t v31 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      uint64_t v37 = v28;
      uint64_t result = outlined init with take of ConversationControlsAction(v36, v28 + v31 + *(void *)(v34 + 72) * v30, (void (*)(void))type metadata accessor for Participant);
    }
  }
  if (v13)
  {
    unint64_t v19 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v20 = v19 | (v12 << 6);
LABEL_30:
    id v22 = *(id *)(*(void *)(a1 + 48) + 8 * v20);
    if (!v22) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v23 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v23 >= v40) {
      goto LABEL_38;
    }
    unint64_t v24 = *(void *)(v41 + 8 * v23);
    ++v12;
    if (!v24)
    {
      int64_t v12 = v18 + 2;
      if (v18 + 2 >= v40) {
        goto LABEL_38;
      }
      unint64_t v24 = *(void *)(v41 + 8 * v12);
      if (!v24)
      {
        int64_t v12 = v18 + 3;
        if (v18 + 3 >= v40) {
          goto LABEL_38;
        }
        unint64_t v24 = *(void *)(v41 + 8 * v12);
        if (!v24)
        {
          int64_t v12 = v18 + 4;
          if (v18 + 4 >= v40) {
            goto LABEL_38;
          }
          unint64_t v24 = *(void *)(v41 + 8 * v12);
          if (!v24)
          {
            int64_t v12 = v18 + 5;
            if (v18 + 5 >= v40) {
              goto LABEL_38;
            }
            unint64_t v24 = *(void *)(v41 + 8 * v12);
            if (!v24)
            {
              int64_t v25 = v18 + 6;
              while (v25 < v40)
              {
                unint64_t v24 = *(void *)(v41 + 8 * v25++);
                if (v24)
                {
                  int64_t v12 = v25 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

              return v37;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v12 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    objc_super v5 = swift_bridgeObjectRetain() + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = PeoplePickerViewController.composeRecipient(for:)();
      uint64_t v7 = swift_bridgeObjectRelease();
      if (v6)
      {
        MEMORY[0x1C87733A0](v7);
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v5 += 16;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v3 = v9;
  }

  return v3;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  void v32[2];
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  _OWORD v38[4];
  char v39;
  uint64_t v40;

  objc_super v5 = type metadata accessor for Participant.State(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    v32[1] = v2;
    uint64_t v37 = type metadata accessor for Participant(0);
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80));
    id v10 = *(void *)(*(void *)(v37 - 8) + 72);
    v32[0] = a1;
    swift_bridgeObjectRetain();
    int64_t v40 = MEMORY[0x1E4FBC860];
    do
    {
      _s15ConversationKit11ParticipantVWOcTm_18(v9, (uint64_t)v7);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          int64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          unint64_t v13 = (uint64_t)&v7[*(int *)(v12 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v7[*(int *)(v12 + 64)], *(void *)&v7[*(int *)(v12 + 64) + 8]);
          outlined destroy of Participant.MediaInfo(v13);
          uint64_t v14 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v7, v14);
          uint64_t v15 = MultiwayViewController.videoVisibility(for:)(v9 + *(int *)(v37 + 20));
          uint64_t v17 = v16;
          int64_t v18 = MultiwayViewController.prominenceIndex(for:)(v9);
          MultiwayViewController.spatialPosition(for:)(v9);
          MultiwayViewController.presentationContext(for:withVideoVisibility:withProminence:withSpatialPosition:)(v9, v15, v17 & 1, v18, (uint64_t)v38, v19, v20, v21, v22);
          int64_t v23 = v39;
          if (v39 != 2)
          {
            uint64_t v35 = v38[1];
            uint64_t v36 = v38[0];
            uint64_t v33 = v38[3];
            uint64_t v34 = v38[2];
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              unint64_t v24 = v40;
            }
            else
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              unint64_t v24 = v29;
            }
            int64_t v25 = *(void *)(v24 + 16);
            if (v25 >= *(void *)(v24 + 24) >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              unint64_t v24 = v30;
            }
            *(void *)(v24 + 16) = v25 + 1;
            int64_t v40 = v24;
            id v26 = v24 + 72 * v25;
            uint64_t v27 = v35;
            *(_OWORD *)(v26 + 32) = v36;
            *(_OWORD *)(v26 + 48) = v27;
            uint64_t v28 = v33;
            *(_OWORD *)(v26 + 64) = v34;
            *(_OWORD *)(v26 + 80) = v28;
            *(unsigned char *)(v26 + 96) = v23 & 1;
          }
          break;
        case 6u:
          break;
        default:
          uint64_t v11 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v7, v11);
          break;
      }
      v9 += v10;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();

    return v40;
  }
  else
  {

    return MEMORY[0x1E4FBC860];
  }
}

uint64_t *ConversationControlsRecipeGenerator.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static ConversationControlsRecipeGenerator.shared;
}

id specialized Conversation.avModeForSystemAperture.getter()
{
  double v1 = &selRef_resolvedAudioVideoMode;
  if (objc_msgSend(v0, sel_state) == (id)4)
  {
    id v2 = v0;
    id v3 = objc_msgSend(v2, sel_remoteMembers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = specialized Set.count.getter(v4);
    swift_bridgeObjectRelease();
    if (v5 == 1) {
      double v1 = &selRef_avMode;
    }
  }
  uint64_t v6 = *v1;
  return [v0 v6];
}

id static UIImageView.appIcon(for:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (a2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    uint64_t v4 = (void *)static UIImage.appIcon(for:usingIconCrop:)(a1, v2, 0);
    id v2 = static UIImageView.defaultAppIcon(for:)((uint64_t)v4);
  }
  return v2;
}

id static UIImageView.defaultAppIcon(for:)(uint64_t a1)
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, a1);
  objc_msgSend(v1, sel_setClipsToBounds_, 1);
  objc_msgSend(v1, sel_setContentMode_, 1);
  return v1;
}

uint64_t ConversationControlsRecipeGenerator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ConversationControlsRecipeGenerator.init()();
  return v0;
}

uint64_t static ConversationControlsRecipeGenerator.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

void ConversationControlsRecipeGenerator.generate(for:type:controlsManager:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v93 = v6;
  uint64_t v8 = v7;
  uint64_t v92 = type metadata accessor for PushToTalkNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_21();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v86 - v18;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationControls);
  outlined init with copy of ConversationControlsType(v5, (uint64_t)&v99);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v90 = v8;
    uint64_t v91 = v1;
    uint64_t v23 = swift_slowAlloc();
    double v88 = v17;
    unint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v87 = v12;
    v98[0] = v25;
    *(_DWORD *)unint64_t v24 = 136315138;
    double v89 = v3;
    outlined init with copy of ConversationControlsType((uint64_t)&v99, (uint64_t)v94);
    uint64_t v26 = specialized >> prefix<A>(_:)((uint64_t)v94);
    uint64_t v86 = v5;
    uint64_t v27 = v19;
    unint64_t v29 = v28;
    outlined destroy of SystemUpdateNotice?((uint64_t)v94, &demangling cache variable for type metadata for ConversationControlsType?);
    uint64_t v30 = v26;
    uint64_t v8 = v90;
    v94[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, v98);
    id v3 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v19 = v27;
    uint64_t v5 = v86;
    swift_bridgeObjectRelease();
    outlined destroy of ConversationControlsType((uint64_t)&v99);
    _os_log_impl(&dword_1C2F90000, v21, v22, "generating recipe for type %s", v24, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v87;
    OUTLINED_FUNCTION_3();
    uint64_t v17 = v88;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined destroy of ConversationControlsType((uint64_t)&v99);
  }

  uint64_t v31 = type metadata accessor for ConversationControlsRecipe();
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v31);
  outlined init with copy of ConversationControlsType(v5, (uint64_t)&v99);
  uint64_t v32 = (void *)v99;
  switch(v103)
  {
    case 1:
      uint64_t v39 = (void *)OUTLINED_FUNCTION_24_17();
      ConversationControlsRecipeGenerator.handoffCompletedRecipe(controlsManager:localizedDeviceCategory:)(v39, v40, v41, v42);
      goto LABEL_14;
    case 2:
      ConversationControlsRecipeGenerator.lagunaHandoffHUDRecipe(controlsManager:suggestion:)((void *)v99, (uint64_t)v19);

      goto LABEL_48;
    case 3:
      uint64_t v35 = (void *)OUTLINED_FUNCTION_24_17();
      ConversationControlsRecipeGenerator.incomingRemoteControlRequestHUDRecipe(controlsManager:requestingParticipantDisplayName:)(v35, v36, v37, v38);
LABEL_14:
      swift_bridgeObjectRelease();
      goto LABEL_48;
    case 4:
      uint64_t v33 = (void *)OUTLINED_FUNCTION_0_36();
      ConversationControlsRecipeGenerator.rejectedRemoteControlRequestHUDRecipe(controlsManager:context:)(v33, v34);
      goto LABEL_48;
    case 5:
      ConversationControlsRecipeGenerator.swapCallsRecipe(shownCall:controlsManager:)(v99, *((uint64_t *)&v99 + 1), v3, (uint64_t)v19);
      swift_unknownObjectRelease();
      goto LABEL_48;
    case 6:
      if (!(v101 | v102 | (unint64_t)v99 | v100 | *((void *)&v99 + 1)))
      {
        ConversationControlsRecipeGenerator.defaultHUDRecipe(controlsManager:)(v3, (uint64_t)v19);
        goto LABEL_48;
      }
      uint64_t v43 = v101 | v102 | v100 | *((void *)&v99 + 1);
      if ((void)v99 == 1 && !v43)
      {
        uint64_t v44 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.unauthorizedParticipantHUDRecipe(controlsManager:)(v44, v45);
        goto LABEL_48;
      }
      if ((void)v99 == 2 && !v43)
      {
        uint64_t v46 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.pendingAuthorizationRequestRecipe(controlsManager:)(v46, v47);
        goto LABEL_48;
      }
      if ((void)v99 == 3 && !v43)
      {
        ConversationControlsRecipeGenerator.pttHUDRecipe(controlsManager:)(v3, (uint64_t)v19);
        goto LABEL_48;
      }
      if ((void)v99 == 4 && !v43)
      {
        uint64_t v56 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.handoffHUDRecipe(controlsManager:)(v56, v57);
        goto LABEL_48;
      }
      if ((void)v99 == 5 && !v43)
      {
        id v58 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.lagunaHandoffCompletedRecipe(controlsManager:)(v58, v59);
        goto LABEL_48;
      }
      if ((void)v99 == 6 && !v43)
      {
        uint64_t v60 = (uint64_t)v19;
        id v61 = v3;
        int v62 = 0;
LABEL_44:
        ConversationControlsRecipeGenerator.makeIncomingCall(using:isThirdParty:)(v61, v62, v60);
        goto LABEL_48;
      }
      if ((void)v99 == 7 && !v43)
      {
        uint64_t v63 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.makeOngoingTelephonyCall(using:)(v63, v64);
        goto LABEL_48;
      }
      if ((void)v99 == 8 && !v43)
      {
        uint64_t v60 = (uint64_t)v19;
        id v61 = v3;
        int v62 = 1;
        goto LABEL_44;
      }
      if ((void)v99 == 9 && !v43)
      {
        uint64_t v65 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.makeOngoingThirdPartyVoIPCall(using:)(v65, v66);
        goto LABEL_48;
      }
      if ((void)v99 == 10 && !v43)
      {
        uint64_t v67 = (void *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.callAgainHUDRecipe(controlsManager:)(v67, v68);
        goto LABEL_48;
      }
      if ((void)v99 == 11 && !v43)
      {
        uint64_t v69 = (uint64_t)v19;
        Swift::String v70 = v3;
        char v71 = 0;
LABEL_65:
        ConversationControlsRecipeGenerator.collaborationHUDRecipe(controlsManager:alternateAppearance:)(v70, v71, v69);
        goto LABEL_48;
      }
      if ((void)v99 == 12 && !v43)
      {
        uint64_t v69 = (uint64_t)v19;
        Swift::String v70 = v3;
        char v71 = 1;
        goto LABEL_65;
      }
      if ((void)v99 != 13 || v43)
      {
        if ((void)v99 != 14 || v43)
        {
          if ((void)v99 != 15 || v43)
          {
            if ((void)v99 != 16 || v43)
            {
              if (((void)v99 != 17 || v43) && ((void)v99 != 18 || v43) && ((void)v99 != 19 || v43))
              {
                if ((void)v99 != 20 || v43)
                {
                  if ((void)v99 != 21 || v43)
                  {
                    if ((void)v99 != 22 || v43)
                    {
                      if ((void)v99 != 23 || v43)
                      {
                        if ((void)v99 != 24 || v43)
                        {
                          double v84 = (void *)OUTLINED_FUNCTION_0_36();
                          ConversationControlsRecipeGenerator.incomingScreenSharingRequestHUDRecipe(controlsManager:)(v84, v85);
                        }
                        else
                        {
                          long long v82 = (void *)OUTLINED_FUNCTION_0_36();
                          ConversationControlsRecipeGenerator.outgoingScreenSharingRequestHUDRecipe(controlsManager:)(v82, v83);
                        }
                      }
                      else
                      {
                        uint64_t v80 = (void *)OUTLINED_FUNCTION_0_36();
                        ConversationControlsRecipeGenerator.ongoingGreenTea3PHUDRecipe(controlsManager:)(v80, v81);
                      }
                    }
                    else
                    {
                      id v78 = (char *)OUTLINED_FUNCTION_0_36();
                      ConversationControlsRecipeGenerator.incomingGreenTea3PHUDRecipe(controlsManager:)(v78, v79);
                    }
                  }
                  else
                  {
                    uint64_t v76 = (void *)OUTLINED_FUNCTION_0_36();
                    ConversationControlsRecipeGenerator.liveVoicemailOngoingRecipe(controlsManager:)(v76, v77);
                  }
                }
                else
                {
                  if (one-time initialization token for shared != -1) {
                    swift_once();
                  }
                  ConversationControlsRecipeGenerator.incomingNameUpdateRecipe(nameAndPhotoUtilities:controlsManager:)(v3, (uint64_t)v19);
                }
              }
              else
              {
                OUTLINED_FUNCTION_0_36();
                ConversationControlsRecipeGenerator.enhancedEmergencyRTTMediaUploadRequestRecipe(controlsManager:)();
              }
            }
            else
            {
              id v74 = (char *)OUTLINED_FUNCTION_0_36();
              ConversationControlsRecipeGenerator.enhancedEmergencyMediaUploadRequestRecipe(controlsManager:)(v74, v75);
            }
          }
          else
          {
            uint64_t v72 = (char *)OUTLINED_FUNCTION_0_36();
            ConversationControlsRecipeGenerator.enhancedEmergencyVideoStreamingRequestRecipe(controlsManager:)(v72, v73);
          }
        }
        else
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          ConversationControlsRecipeGenerator.shareNameRecipe(nameAndPhotoUtilities:)(static NameAndPhotoUtilities.shared, (uint64_t)v19);
        }
      }
      else
      {
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        ConversationControlsRecipeGenerator.shareNameAndPhotoRecipe(nameAndPhotoUtilities:)(static NameAndPhotoUtilities.shared, (uint64_t)v19);
      }
LABEL_48:
      OUTLINED_FUNCTION_49_5();
      OUTLINED_FUNCTION_20_16();
LABEL_49:
      OUTLINED_FUNCTION_28();
      return;
    default:
      outlined init with take of Notice(&v99, (uint64_t)v94);
      if (v93 == 2) {
        goto LABEL_32;
      }
      outlined init with copy of IDSLookupManager((uint64_t)v94, (uint64_t)v98);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
      if (swift_dynamicCast())
      {
        ConversationControlsRecipeGenerator.pttHUDRecipe(controlsManager:)(v3, (uint64_t)v19);
        OUTLINED_FUNCTION_49_5();
        OUTLINED_FUNCTION_20_16();
        outlined destroy of PushToTalkNotice(v12, (void (*)(void))type metadata accessor for PushToTalkNotice);
        goto LABEL_31;
      }
      unint64_t v48 = v17;
      uint64_t v49 = v95;
      uint64_t v50 = v96;
      __swift_project_boxed_opaque_existential_1(v94, v95);
      (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v50 + 64))(&v97, v49, v50);
      if (v97 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = v48;
      }
      else
      {
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v17 = v48;
        if ((v51 & 1) == 0) {
          goto LABEL_31;
        }
      }
      ConversationControlsRecipeGenerator.defaultHUDRecipe(controlsManager:)(v3, (uint64_t)v19);
      OUTLINED_FUNCTION_49_5();
      OUTLINED_FUNCTION_20_16();
LABEL_31:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
LABEL_32:
      outlined init with copy of Participant?(v8, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v31);
      outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      if (EnumTagSinglePayload == 1)
      {
        outlined init with copy of IDSLookupManager((uint64_t)v94, (uint64_t)v98);
        uint64_t v53 = (uint64_t *)OUTLINED_FUNCTION_0_36();
        ConversationControlsRecipeGenerator.noticeRecipe(controlsManager:notice:)(v53, v54, v55);
        outlined destroy of SystemUpdateNotice?((uint64_t)v98, &demangling cache variable for type metadata for Notice?);
        OUTLINED_FUNCTION_49_5();
        OUTLINED_FUNCTION_20_16();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
      goto LABEL_49;
  }
}

void ConversationControlsRecipeGenerator.defaultHUDRecipe(controlsManager:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v5 - 8);
  *(void *)&long long v168 = (char *)v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v8);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v158 = v2;
    uint64_t v159 = v10;
    *(void *)&long long v170 = v7;
    uint64_t v167 = a2;
    static ConversationControlsRecipeGenerator.assetsForDefaultHUD(controlsManager:conversation:)();
    id v15 = v14;
    uint64_t v17 = v16;
    uint64_t v18 = *v11 & *a1;
    int v165 = *(uint64_t (**)(void))(v18 + 0x868);
    *(void *)&long long v166 = v18 + 2152;
    char v19 = v165();
    *(void *)&long long v171 = a1;
    id v173 = v13;
    if (v19)
    {
      id v20 = objc_msgSend(self, sel_conversationKit);
      v193._object = (void *)0xE000000000000000;
      v21._object = (void *)0x80000001C3798A30;
      v21._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v22.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v22.value._object = (void *)0xEF74694B6E6F6974;
      v23._uint64_t countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      v193._uint64_t countAndFlagsBits = 0;
      Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v193);
      uint64_t countAndFlagsBits = v24._countAndFlagsBits;
      object = v24._object;
    }
    else
    {
      id v172 = v15;
      uint64_t v40 = v13;
      uint64_t v41 = *(void (**)(void))((*v11 & *a1) + 0x270);
      v41();
      swift_getObjectType();
      unsigned __int8 v42 = Call.isFromMessagesScreenShare.getter();
      uint64_t v43 = swift_unknownObjectRelease();
      if ((v42 & 1) == 0
        || (((void (*)(uint64_t))v41)(v43),
            uint64_t v45 = v44,
            uint64_t ObjectType = swift_getObjectType(),
            LODWORD(v45) = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 184))(ObjectType, v45),
            uint64_t v47 = swift_unknownObjectRelease(),
            v45 == 1))
      {
        id v48 = objc_msgSend(v40, sel_screenSharingRequests);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUScreenSharingRequest);
        lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject(&lazy protocol witness table cache variable for type TUScreenSharingRequest and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUScreenSharingRequest);
        uint64_t v49 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v48) = specialized Set.isEmpty.getter(v49);
        uint64_t v47 = swift_bridgeObjectRelease();
        if (v48) {
          goto LABEL_14;
        }
      }
      ((void (*)(uint64_t))v41)(v47);
      uint64_t v51 = v50;
      uint64_t v52 = swift_getObjectType();
      uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 296))(v52, v51);
      uint64_t v54 = swift_unknownObjectRelease();
      if (!v53)
      {
LABEL_14:
        uint64_t countAndFlagsBits = TUConversation.participantListDisplayName.getter();
        object = v62;
      }
      else
      {
        ((void (*)(uint64_t))v41)(v54);
        uint64_t v56 = v55;
        uint64_t v57 = swift_getObjectType();
        uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 296))(v57, v56);
        swift_unknownObjectRelease();
        id v59 = objc_msgSend(self, sel_conversationKit);
        unint64_t v154 = 0xE000000000000000;
        if (v58 == 1)
        {
          uint64_t v60 = 0x794D206572616853;
          unint64_t v61 = 0xEF6E656572635320;
        }
        else
        {
          uint64_t v60 = 0x535F4E4545524353;
          unint64_t v61 = 0xEE00474E49524148;
        }
        v63.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v63.value._object = (void *)0xEF74694B6E6F6974;
        v64._uint64_t countAndFlagsBits = 0;
        v64._object = (void *)0xE000000000000000;
        uint64_t v65 = 0;
        Swift::String v66 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v60, v63, (NSBundle)v59, v64, *(Swift::String *)(&v154 - 1));
        object = v66._object;

        uint64_t countAndFlagsBits = v66._countAndFlagsBits;
      }
      uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
      id v15 = v172;
    }
    type metadata accessor for ConversationControlsRecipeGenerator();
    uint64_t v67 = (void *)v171;
    (*(void (**)(void))((*v11 & *(void *)v171) + 0x270))();
    id v169 = static ConversationControlsRecipeGenerator.badgeBackgroundColor(forCall:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    swift_bridgeObjectRetain();
    v68._uint64_t countAndFlagsBits = countAndFlagsBits;
    v68._object = object;
    Class isa = NSMutableAttributedString.__allocating_init(string:)(v68).super.super.isa;
    id v174 = v17;
    id v69 = v17;
    id v172 = v15;
    id v70 = objc_msgSend(v173, sel_remoteMembers);
    uint64_t v71 = countAndFlagsBits;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v72 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v73 = specialized Set.count.getter(v72);
    swift_bridgeObjectRelease();
    id v162 = v69;
    if (v73)
    {
      type metadata accessor for ConversationControlsBadgingAvatarViewController();
      id v74 = objc_msgSend(v69, sel_image);
      swift_bridgeObjectRetain();
      id v75 = v169;
      id v76 = v173;
      uint64_t v160 = v71;
      uint64_t v77 = (id)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v76, v74, v71, (uint64_t)object, v75);
      id v163 = objc_msgSend(v77, sel_view);
      uint64_t v78 = type metadata accessor for UUID();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = MEMORY[0x1F4188790](v78);
      long long v82 = (char *)v155 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t))((*v11 & *v67) + 0x278))(v80);
      id v164 = (id)(*(uint64_t (**)(char *))((*v11 & *v77) + 0x58))(v82);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v82, v78);
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      __swift_project_value_buffer(v83, (uint64_t)static Logger.conversationControls);
      swift_bridgeObjectRetain();
      id v84 = v172;
      uint64_t v85 = v77;
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      int v88 = v87;
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v89 = swift_slowAlloc();
        int v156 = (void *)swift_slowAlloc();
        uint64_t v157 = swift_slowAlloc();
        *(void *)&long long v179 = v157;
        *(_DWORD *)uint64_t v89 = 136315906;
        swift_bridgeObjectRetain();
        v188[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, (unint64_t)object, (uint64_t *)&v179);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v89 + 12) = 2080;
        v155[1] = v89 + 14;
        id v90 = objc_msgSend(v84, sel_string);
        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        LODWORD(v160) = v88;
        uint64_t v92 = v91;
        uint64_t v93 = v77;
        unint64_t v95 = v94;

        v188[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v95, (uint64_t *)&v179);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v89 + 22) = 2112;
        v188[0] = v85;
        uint64_t v96 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        char v97 = v156;
        *int v156 = v93;

        *(_WORD *)(v89 + 32) = 1024;
        swift_beginAccess();
        LODWORD(v185[0]) = v174 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2F90000, v86, (os_log_type_t)v160, "defaultHUD:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:%@,\n\tbadge?:%{BOOL}d", (uint8_t *)v89, 0x26u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v97, -1, -1);
        uint64_t v98 = v157;
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v98, -1, -1);
        MEMORY[0x1C87760E0](v89, -1, -1);

LABEL_31:
        goto LABEL_32;
      }

      swift_bridgeObjectRelease_n();
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      long long v99 = (void *)*MEMORY[0x1E4FB2998];
      v188[0] = 0x69662E6F65646976;
      v188[1] = 0xEA00000000006C6CLL;
      v188[2] = 2;
      v188[3] = v99;
      __int16 v189 = 0;
      uint64_t v190 = 4;
      char v191 = 0;
      uint64_t v192 = 0;
      id v100 = v99;
      id v101 = static UIImage.symbolImage(for:)((uint64_t)v188);

      swift_bridgeObjectRelease();
      id v102 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v101);

      objc_msgSend(v102, sel_setContentMode_, 4);
      id v103 = objc_msgSend(self, sel_labelColor);
      objc_msgSend(v102, sel_setTintColor_, v103);

      uint64_t v96 = v102;
      id v164 = objc_msgSend(v96, sel_hash);
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v104 = type metadata accessor for Logger();
      __swift_project_value_buffer(v104, (uint64_t)static Logger.conversationControls);
      swift_bridgeObjectRetain();
      id v105 = v172;
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.default.getter();
      BOOL v108 = os_log_type_enabled(v106, v107);
      id v163 = v96;
      if (!v108)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_31;
      }
      uint64_t v109 = swift_slowAlloc();
      uint64_t v160 = swift_slowAlloc();
      *(void *)&long long v179 = v160;
      *(_DWORD *)uint64_t v109 = 136315650;
      swift_bridgeObjectRetain();
      *(void *)&v185[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, (unint64_t)object, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v109 + 12) = 2080;
      id v110 = objc_msgSend(v105, sel_string);
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_type_t v112 = v107;
      unint64_t v114 = v113;

      *(void *)&v185[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v114, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v109 + 22) = 1024;
      swift_beginAccess();
      LODWORD(v185[0]) = v174 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v106, v112, "defaultHUD:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:FaceTime Icon\n\tbadge?:%{BOOL}d", (uint8_t *)v109, 0x1Cu);
      uint64_t v115 = v160;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v115, -1, -1);
      MEMORY[0x1C87760E0](v109, -1, -1);
    }
LABEL_32:
    int v116 = (void *)v171;
    int v117 = v165;
    LODWORD(v171) = v165();
    *(void *)&long long v181 = 0;
    long long v179 = 0u;
    long long v180 = 0u;
    BYTE8(v181) = 6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = xmmword_1C3769830;
    id v119 = v172;
    *(void *)(v118 + 32) = v172;
    *(void *)&v185[0] = v118;
    specialized Array._endMutation()();
    uint64_t v160 = *(void *)&v185[0];
    uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v120 - 8);
    uint64_t v122 = (char *)v155 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v123 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v122, 1, 1, v123);
    id v124 = v119;
    uint64_t v125 = v116;
    id v126 = v124;
    if (v117()) {
      uint64_t v127 = 2;
    }
    else {
      uint64_t v127 = 1;
    }
    ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
    v185[0] = v175;
    v185[1] = v176;
    uint64_t v186 = v177;
    char v187 = v178;
    id v129 = v163;
    unint64_t v128 = (unint64_t)v164;
    outlined copy of ConversationControlsRecipe.View?(v163, 0);
    int v130 = isa;
    uint64_t v153 = v127;
    uint64_t v131 = v168;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v179, 0, v129, 0, v128, v130, v160, 0, v168, 0, 0, (uint64_t)v122, (os_log_type_t)((v171 & 1) == 0), 0, v153, 1, (uint8_t *)v185, 0, 0,
      0xFFu);
    uint64_t v132 = v170;
    char v133 = v129;
    if (__swift_getEnumTagSinglePayload(v131, 1, v170) == 1)
    {
      outlined consume of ConversationControlsRecipe.View?(v129, 0);

      outlined destroy of SystemUpdateNotice?(v131, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      __swift_storeEnumTagSinglePayload(v167, 1, 1, v132);
    }
    else
    {
      id v172 = v126;
      uint64_t v134 = (uint64_t)v159;
      outlined init with take of ConversationControlsAction(v131, (uint64_t)v159, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      int v135 = SBUIIsSystemApertureEnabled();
      id v136 = v173;
      id v137 = v169;
      if (v135)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v138 = type metadata accessor for Logger();
        __swift_project_value_buffer(v138, (uint64_t)static Logger.conversationControls);
        uint64_t v139 = Logger.logObject.getter();
        os_log_type_t v140 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v139, v140))
        {
          id v141 = v136;
          uint64_t v142 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v142 = 0;
          _os_log_impl(&dword_1C2F90000, v139, v140, "defaultHUD: [SystemAperture] showing content", v142, 2u);
          uint64_t v143 = v142;
          id v136 = v141;
          uint64_t v132 = v170;
          MEMORY[0x1C87760E0](v143, -1, -1);
        }

        if (v165()) {
          char v144 = 1;
        }
        else {
          char v144 = 0x80;
        }
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(v125, v144, (uint64_t)&v179);
        long long v170 = v180;
        long long v171 = v179;
        long long v168 = v181;
        long long v166 = v182;
        uint64_t v145 = v183;
        char v146 = v184;
        outlined consume of ConversationControlsRecipe.View?(v133, 0);

        id v147 = v172;
        uint64_t v148 = v134 + *(int *)(v132 + 72);
        outlined consume of SystemApertureElement?(*(void **)v148, *(void *)(v148 + 8), *(void **)(v148 + 16), *(void *)(v148 + 24), *(void **)(v148 + 32), *(void *)(v148 + 40), *(void **)(v148 + 48));
        long long v149 = v170;
        *(_OWORD *)uint64_t v148 = v171;
        *(_OWORD *)(v148 + 16) = v149;
        long long v150 = v166;
        *(_OWORD *)(v148 + 32) = v168;
        *(_OWORD *)(v148 + 48) = v150;
        *(void *)(v148 + 64) = v145;
        *(unsigned char *)(v148 + 72) = v146;
      }
      else
      {
        outlined consume of ConversationControlsRecipe.View?(v133, 0);

        id v151 = v172;
      }
      uint64_t v152 = v167;
      _s15ConversationKit11ParticipantVWOcTm_3(v134, v167, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v152, 0, 1, v132);
      outlined destroy of PushToTalkNotice(v134, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }

    return;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationControls);
  unint64_t v28 = a1;
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    *(void *)&long long v170 = v7;
    uint64_t v32 = (uint8_t *)v31;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v167 = a2;
    uint64_t v34 = v33;
    *(void *)&long long v179 = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v35 = (*(uint64_t (**)(void))((*v11 & *v28) + 0x270))();
    swift_getObjectType();
    v188[0] = v35;
    uint64_t v36 = String.init<A>(describing:)();
    v188[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v29, v30, "defaultHUDRecipe: No active conversation, call: %s", v32, 0xCu);
    swift_arrayDestroy();
    uint64_t v38 = v34;
    a2 = v167;
    MEMORY[0x1C87760E0](v38, -1, -1);
    uint64_t v39 = v32;
    uint64_t v7 = v170;
    MEMORY[0x1C87760E0](v39, -1, -1);
  }
  else
  {
  }
  __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
}

uint64_t ConversationControlsRecipeGenerator.unauthorizedParticipantHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x840);
  char v12 = ((uint64_t (*)(uint64_t))v11)(v7);
  uint64_t v13 = (void *)(*(uint64_t (**)(void))((*v10 & *a1) + 0x290))();
  Class v14 = static ConversationControlsRecipeGenerator.unauthorizedParticipantAssets(controlsMode:conversation:)(v12, (uint64_t)v13);
  uint64_t v16 = v15;
  char v18 = v17;

  if (v14)
  {
    uint64_t v52 = v11;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    SymbolImageDescribers.ConversationControls.symbolImageDescription.getter(v18, (uint64_t)v60);
    id v19 = static UIImage.symbolImage(for:)((uint64_t)v60);
    outlined release of SymbolImageDescription((uint64_t)v60);
    id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v19);

    objc_msgSend(v20, sel_setContentMode_, 4);
    id v21 = objc_msgSend(self, sel_labelColor);
    objc_msgSend(v20, sel_setTintColor_, v21);

    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v53 = v5;
    uint64_t v54 = v16;
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationControls);
    Swift::String v24 = a1;
    uint64_t v51 = v23;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(void *)&v65[0] = v28;
      uint64_t v50 = v9;
      uint64_t v49 = v6;
      *(_DWORD *)uint64_t v27 = 136315138;
      LOBYTE(v61) = v52();
      uint64_t v29 = String.init<A>(describing:)();
      *(void *)&long long v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v65);
      uint64_t v6 = v49;
      uint64_t v9 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v25, v26, "unauthorizedParticipantHud, controlsMode: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v28, -1, -1);
      MEMORY[0x1C87760E0](v27, -1, -1);
    }
    else
    {
    }
    uint64_t v56 = 1;
    long long v57 = 0u;
    long long v58 = 0u;
    char v59 = 6;
    id v33 = v20;
    id v34 = objc_msgSend(v33, sel_hash);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v35 - 8);
    unint64_t v37 = (char *)&v48 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v38 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v37, 1, 1, v38);
    uint64_t v39 = v14;
    uint64_t v40 = v54;
    swift_bridgeObjectRetain();
    ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
    v65[0] = v61;
    v65[1] = v62;
    uint64_t v66 = v63;
    char v67 = v64;
    uint64_t v47 = (uint64_t)v37;
    uint64_t v41 = (uint64_t)v53;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v56, 0, v33, 0, (unint64_t)v34, v39, v40, 0, (uint64_t)v53, 0, 0, v47, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)v65, 0, 0,
      0xFFu);
    if (__swift_getEnumTagSinglePayload(v41, 1, v6) == 1)
    {

      swift_bridgeObjectRelease();
      outlined destroy of SystemUpdateNotice?(v41, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v55, 1, 1, v6);
    }
    else
    {
      outlined init with take of ConversationControlsAction(v41, (uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      if (SBUIIsSystemApertureEnabled())
      {
        unsigned __int8 v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl(&dword_1C2F90000, v42, v43, "unauthorizedParticipantHUD: [SystemAperture] showing content", v44, 2u);
          MEMORY[0x1C87760E0](v44, -1, -1);
        }

        swift_bridgeObjectRelease();
        uint64_t v45 = &v9[*(int *)(v6 + 72)];
        outlined consume of SystemApertureElement?(*(void **)v45, *((void *)v45 + 1), *((void **)v45 + 2), *((void *)v45 + 3), *((void **)v45 + 4), *((void *)v45 + 5), *((void **)v45 + 6));
        *((_OWORD *)v45 + 2) = 0u;
        *((_OWORD *)v45 + 3) = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        *((_OWORD *)v45 + 1) = 0u;
        *((void *)v45 + 8) = 4;
        v45[72] = -2;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      uint64_t v46 = v55;
      _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v9, v55, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v46, 0, 1, v6);
      return outlined destroy of PushToTalkNotice((uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    uint64_t v31 = v55;
    return __swift_storeEnumTagSinglePayload(v31, 1, 1, v6);
  }
}

void ConversationControlsRecipeGenerator.pendingAuthorizationRequestRecipe(controlsManager:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Participant(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v8);
  if (v11)
  {
    v19[0] = v11;
    id v12 = objc_msgSend(v11, sel_pendingMembers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13, a1);
    swift_bridgeObjectRelease();
    unint64_t v15 = *(void *)(v14 + 16);
    if (v15 < 2)
    {
      specialized Collection.first.getter(v14, (uint64_t)v6);
      swift_bridgeObjectRelease();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
      {

        outlined destroy of SystemUpdateNotice?((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
        uint64_t v18 = type metadata accessor for ConversationControlsRecipe();
        __swift_storeEnumTagSinglePayload(a2, 1, 1, v18);
      }
      else
      {
        outlined init with take of ConversationControlsAction((uint64_t)v6, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
        ConversationControlsRecipeGenerator.singleAuthoriziationRequestRecipe(for:participant:)((uint64_t)v19[0], (uint64_t)v10, a2);

        outlined destroy of PushToTalkNotice((uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      ConversationControlsRecipeGenerator.multipleAuthorizationRequestRecipe(withNumber:)(v15, a2);
      id v16 = v19[0];
    }
  }
  else
  {
    uint64_t v17 = type metadata accessor for ConversationControlsRecipe();
    __swift_storeEnumTagSinglePayload(a2, 1, 1, v17);
  }
}

uint64_t ConversationControlsRecipeGenerator.pttHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))(v9);
  self;
  uint64_t v13 = (void *)swift_dynamicCastObjCClass();
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = ConversationControlsRecipeGenerator.pttLeadingAccessoryView(call:)(v13);
    if (v15)
    {
      unint64_t v83 = v17;
      id v84 = v7;
      uint64_t v18 = v16;
      uint64_t v85 = v8;
      id v82 = v15;
      uint64_t v87 = v12;
      v78[1] = v2;
      uint64_t v79 = v11;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      id v19 = objc_msgSend(v14, sel_channelDisplayName);
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      v23._uint64_t countAndFlagsBits = v20;
      v23._object = v22;
      v24.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v23).super.super.isa;
      id v25 = objc_msgSend(v14, sel_provider);
      id v26 = objc_msgSend(v25, sel_localizedName);

      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      unsigned int v30 = objc_msgSend(v14, sel_status);
      uint64_t v86 = a2;
      v78[0] = a1;
      if (v30 == 1)
      {
        if (!objc_msgSend(v14, sel_isSendingTransmission))
        {
          if (!objc_msgSend(v14, sel_isReceivingTransmission)) {
            goto LABEL_20;
          }
          swift_bridgeObjectRelease();
          id v36 = objc_msgSend(v14, sel_activeRemoteParticipant);
          if (v36)
          {
            unint64_t v37 = v36;
            id v38 = objc_msgSend(v36, sel_name);
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            v42._uint64_t countAndFlagsBits = v39;
            v42._object = v41;
            Class isa = NSMutableAttributedString.__allocating_init(string:)(v42).super.super.isa;

            v24.super.super.Class isa = isa;
          }
          id v31 = objc_msgSend(v14, sel_channelDisplayName, v78[0]);
          uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_19:
          uint64_t v27 = countAndFlagsBits;
          uint64_t v29 = object;

LABEL_20:
          uint64_t v88 = 3;
          long long v89 = 0u;
          long long v90 = 0u;
          char v91 = 6;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_1C3769830;
          id v81 = v18;
          uint64_t v51 = v24.super.super.isa;
          id v52 = v82;
          id v80 = v82;
          v53._uint64_t countAndFlagsBits = v27;
          v53._object = v29;
          *(NSMutableAttributedString *)(v50 + 32) = NSMutableAttributedString.__allocating_init(string:)(v53);
          uint64_t v92 = v50;
          specialized Array._endMutation()();
          uint64_t v54 = v92;
          uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
          MEMORY[0x1F4188790](v55 - 8);
          long long v57 = (char *)v78 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v58 = type metadata accessor for AttributedString();
          __swift_storeEnumTagSinglePayload((uint64_t)v57, 1, 1, v58);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
          type metadata accessor for ConversationControlsAction();
          uint64_t v59 = swift_allocObject();
          *(_OWORD *)(v59 + 16) = xmmword_1C3769620;
          swift_storeEnumTagMultiPayload();
          uint64_t v92 = v59;
          long long v93 = 0u;
          long long v94 = 0u;
          char v95 = 0;
          uint64_t v76 = (uint64_t)v57;
          uint64_t v60 = v51;
          uint64_t v61 = (uint64_t)v84;
          ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v88, 0, v52, v18, v83, v51, v54, 0, (uint64_t)v84, 0, 0, v76, OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)&v92, 0, 0,
            0xFFu);
          uint64_t v62 = v85;
          if (__swift_getEnumTagSinglePayload(v61, 1, v85) == 1)
          {

            swift_unknownObjectRelease();
            outlined destroy of SystemUpdateNotice?(v61, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
            return __swift_storeEnumTagSinglePayload(v86, 1, 1, v62);
          }
          else
          {
            id v63 = v80;
            id v64 = v81;
            uint64_t v65 = (uint64_t)v79;
            outlined init with take of ConversationControlsAction(v61, (uint64_t)v79, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            *(unsigned char *)(v65 + *(int *)(v62 + 64)) = 1;
            int v66 = SBUIIsSystemApertureEnabled();
            uint64_t v67 = v86;
            if (v66)
            {
              Swift::String v68 = v63;
              if (one-time initialization token for conversationControls != -1) {
                swift_once();
              }
              uint64_t v69 = type metadata accessor for Logger();
              __swift_project_value_buffer(v69, (uint64_t)static Logger.conversationControls);
              id v70 = Logger.logObject.getter();
              os_log_type_t v71 = static os_log_type_t.default.getter();
              BOOL v72 = os_log_type_enabled(v70, v71);
              uint64_t v73 = v78[0];
              if (v72)
              {
                id v74 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)id v74 = 0;
                _os_log_impl(&dword_1C2F90000, v70, v71, "pttHUD: [SystemAperture] showing content", v74, 2u);
                id v75 = v74;
                Swift::String v68 = v63;
                MEMORY[0x1C87760E0](v75, -1, -1);
              }

              ConversationControlsRecipeGenerator.makePTTHUDSystemApertureElement(controlsManager:alertingStyle:)(v73, 128, (uint64_t)&v88);
              swift_unknownObjectRelease();

              outlined assign with take of Participant?((uint64_t)&v88, v65 + *(int *)(v62 + 72), (uint64_t *)&demangling cache variable for type metadata for SystemApertureElement?);
            }
            else
            {

              swift_unknownObjectRelease();
            }
            _s15ConversationKit11ParticipantVWOcTm_3(v65, v67, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            __swift_storeEnumTagSinglePayload(v67, 0, 1, v62);
            return outlined destroy of PushToTalkNotice(v65, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          }
        }
        swift_bridgeObjectRelease();
        id v31 = objc_msgSend(self, sel_conversationKit);
        unint64_t v77 = 0xE000000000000000;
        uint64_t v32 = 0x6E696E657473694CLL;
        unint64_t v33 = 0xE900000000000067;
      }
      else
      {
        if (!objc_msgSend(v14, sel_serviceStatus)) {
          goto LABEL_20;
        }
        id v35 = objc_msgSend(v14, sel_serviceStatus);
        if (v35 == (id)2)
        {
          swift_bridgeObjectRelease();
          id v31 = objc_msgSend(self, sel_conversationKit);
          unint64_t v77 = 0xE000000000000000;
          uint64_t v32 = 0x6961764120746F4ELL;
          unint64_t v33 = 0xED0000656C62616CLL;
        }
        else
        {
          if (v35 != (id)1) {
            goto LABEL_20;
          }
          swift_bridgeObjectRelease();
          id v31 = objc_msgSend(self, sel_conversationKit);
          unint64_t v77 = 0xE000000000000000;
          uint64_t v32 = 0x63656E6E6F636552;
          unint64_t v33 = 0xEC000000676E6974;
        }
      }
      v46.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v46.value._object = (void *)0xEF74694B6E6F6974;
      v47._uint64_t countAndFlagsBits = 0;
      v47._object = (void *)0xE000000000000000;
      uint64_t v48 = 0;
      Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v32, v46, (NSBundle)v31, v47, *(Swift::String *)(&v77 - 1));
      object = v49._object;
      uint64_t countAndFlagsBits = v49._countAndFlagsBits;
      goto LABEL_19;
    }
  }
  swift_unknownObjectRelease();
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v8);
}

uint64_t ConversationControlsRecipeGenerator.noticeRecipe(controlsManager:notice:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v74 = a3;
  uint64_t v61 = type metadata accessor for FaceIDUnavailableNotice(0);
  uint64_t v4 = MEMORY[0x1F4188790](v61);
  uint64_t v58 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v60 = (char *)&v57 - v6;
  uint64_t v64 = type metadata accessor for PushToTalkNotice(0);
  uint64_t v7 = MEMORY[0x1F4188790](v64);
  uint64_t v59 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v63 = (char *)&v57 - v9;
  updateCGFloat d = type metadata accessor for SystemUpdateNotice(0);
  uint64_t v10 = MEMORY[0x1F4188790](updated);
  uint64_t v62 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  int v66 = (char *)&v57 - v12;
  uint64_t v70 = type metadata accessor for AppLaunchNotice(0);
  uint64_t v13 = MEMORY[0x1F4188790](v70);
  uint64_t v65 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v69 = (char *)&v57 - v15;
  uint64_t v72 = type metadata accessor for SessionActionNotice(0);
  uint64_t v16 = MEMORY[0x1F4188790](v72);
  Swift::String v68 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  os_log_type_t v71 = (char *)&v57 - v18;
  uint64_t v19 = type metadata accessor for ReactionNotice(0);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  NSMutableAttributedString v24 = (char *)&v57 - v23;
  uint64_t v25 = type metadata accessor for AccountUpdateNotice(0);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  unsigned int v30 = (char *)&v57 - v29;
  uint64_t v31 = type metadata accessor for SessionActivationRequestNotice(0);
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  id v34 = (char *)&v57 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  id v36 = (char *)&v57 - v35;
  outlined init with copy of Participant?(a2, (uint64_t)&v75, &demangling cache variable for type metadata for Notice?);
  if (v76)
  {
    outlined init with take of Notice(&v75, (uint64_t)v77);
    outlined init with copy of IDSLookupManager((uint64_t)v77, (uint64_t)&v75);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
    if (swift_dynamicCast())
    {
      outlined init with take of ConversationControlsAction((uint64_t)v36, (uint64_t)v34, (void (*)(void))type metadata accessor for SessionActivationRequestNotice);
      ConversationControlsRecipeGenerator.sessionActivationRequestNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v34, v74);
      unint64_t v37 = type metadata accessor for SessionActivationRequestNotice;
      uint64_t v38 = (uint64_t)v34;
    }
    else
    {
      if (swift_dynamicCast())
      {
        outlined init with take of ConversationControlsAction((uint64_t)v30, (uint64_t)v28, (void (*)(void))type metadata accessor for AccountUpdateNotice);
        ConversationControlsRecipeGenerator.accountUpdateNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v28, v74);
        uint64_t v45 = type metadata accessor for AccountUpdateNotice;
      }
      else
      {
        if (swift_dynamicCast())
        {
          outlined init with take of ConversationControlsAction((uint64_t)v24, (uint64_t)v22, (void (*)(void))type metadata accessor for ReactionNotice);
          ConversationControlsRecipeGenerator.reactionNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v22, v74);
          unint64_t v37 = type metadata accessor for ReactionNotice;
          uint64_t v38 = (uint64_t)v22;
          goto LABEL_14;
        }
        Swift::String_optional v46 = v71;
        if (swift_dynamicCast())
        {
          uint64_t v47 = (uint64_t)v46;
          uint64_t v28 = v68;
          outlined init with take of ConversationControlsAction(v47, (uint64_t)v68, (void (*)(void))type metadata accessor for SessionActionNotice);
          ConversationControlsRecipeGenerator.sessionActionNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v28, v74);
          uint64_t v45 = type metadata accessor for SessionActionNotice;
        }
        else
        {
          uint64_t v48 = v69;
          if (swift_dynamicCast())
          {
            uint64_t v49 = (uint64_t)v48;
            uint64_t v28 = v65;
            outlined init with take of ConversationControlsAction(v49, (uint64_t)v65, (void (*)(void))type metadata accessor for AppLaunchNotice);
            ConversationControlsRecipeGenerator.appLaunchNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v28, v74);
            uint64_t v45 = type metadata accessor for AppLaunchNotice;
          }
          else
          {
            uint64_t v50 = v66;
            if (swift_dynamicCast())
            {
              uint64_t v51 = (uint64_t)v50;
              uint64_t v28 = v62;
              outlined init with take of ConversationControlsAction(v51, (uint64_t)v62, (void (*)(void))type metadata accessor for SystemUpdateNotice);
              ConversationControlsRecipeGenerator.systemUpdateNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v28, v74);
              uint64_t v45 = type metadata accessor for SystemUpdateNotice;
            }
            else
            {
              id v52 = v63;
              if (swift_dynamicCast())
              {
                uint64_t v53 = (uint64_t)v52;
                uint64_t v28 = v59;
                outlined init with take of ConversationControlsAction(v53, (uint64_t)v59, (void (*)(void))type metadata accessor for PushToTalkNotice);
                ConversationControlsRecipeGenerator.pttNoticeRecipe(controlsManager:notice:)(v73, (uint64_t)v28, v74);
                uint64_t v45 = type metadata accessor for PushToTalkNotice;
              }
              else
              {
                uint64_t v54 = v60;
                if (!swift_dynamicCast())
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
                  uint64_t v56 = type metadata accessor for ConversationControlsRecipe();
                  __swift_storeEnumTagSinglePayload(v74, 1, 1, v56);
                  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
                }
                uint64_t v55 = (uint64_t)v54;
                uint64_t v28 = v58;
                outlined init with take of ConversationControlsAction(v55, (uint64_t)v58, (void (*)(void))type metadata accessor for FaceIDUnavailableNotice);
                ConversationControlsRecipeGenerator.faceIDUnavailableRecipe(controlsManager:notice:)(v73, (uint64_t)v28, v74);
                uint64_t v45 = type metadata accessor for FaceIDUnavailableNotice;
              }
            }
          }
        }
      }
      unint64_t v37 = v45;
      uint64_t v38 = (uint64_t)v28;
    }
LABEL_14:
    outlined destroy of PushToTalkNotice(v38, (void (*)(void))v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)&v75, &demangling cache variable for type metadata for Notice?);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationControls);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    Swift::String v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v42 = 0;
    _os_log_impl(&dword_1C2F90000, v40, v41, "noticeRecipe: No notice metadata", v42, 2u);
    MEMORY[0x1C87760E0](v42, -1, -1);
  }

  uint64_t v43 = type metadata accessor for ConversationControlsRecipe();
  return __swift_storeEnumTagSinglePayload(v74, 1, 1, v43);
}

uint64_t ConversationControlsRecipeGenerator.handoffHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 584))())
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290);
    uint64_t v137 = (*MEMORY[0x1E4FBC8C8] & *a1) + 656;
    uint64_t v12 = (void *)v11();
    if (v12)
    {
      uint64_t v13 = v12;
      id v14 = objc_msgSend(v12, sel_handoffEligibility);

      if (v14)
      {
        uint64_t v134 = a1;
        uint64_t v125 = v11;
        id v129 = v6;
        id v126 = v9;
        uint64_t v130 = a2;
        uint64_t v15 = TUConversation.participantListDisplayName.getter();
        uint64_t v17 = v16;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        swift_bridgeObjectRetain();
        v18._uint64_t countAndFlagsBits = v15;
        v18._object = v17;
        Class isa = NSMutableAttributedString.__allocating_init(string:)(v18).super.super.isa;
        Class v136 = ConversationControlsRecipeGenerator.handoffNearbySubtitle(conversation:)(v13).super.super.isa;
        id v19 = ConversationControlsRecipeGenerator.handoffBadgeImage(conversation:)(v13);
        id v20 = objc_msgSend(v13, sel_remoteMembers);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = specialized Set.count.getter(v21);
        swift_bridgeObjectRelease();
        id v132 = v13;
        id v131 = v19;
        uint64_t v128 = v7;
        uint64_t v124 = v15;
        if (v22)
        {
          type metadata accessor for ConversationControlsBadgingAvatarViewController();
          id v23 = objc_msgSend(v19, sel_image);
          NSMutableAttributedString v24 = self;
          swift_bridgeObjectRetain();
          id v25 = objc_msgSend(v24, sel_clearColor);
          id v26 = v13;
          uint64_t v27 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v26, v23, v15, (uint64_t)v17, v25);
          id v135 = objc_msgSend(v27, sel_view);
          uint64_t v28 = type metadata accessor for UUID();
          uint64_t v29 = *(void *)(v28 - 8);
          uint64_t v30 = MEMORY[0x1F4188790](v28);
          uint64_t v32 = (char *)&v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(uint64_t))((*v10 & *v134) + 0x278))(v30);
          uint64_t v133 = (*(uint64_t (**)(char *))((*v10 & *v27) + 0x58))(v32);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v33 = type metadata accessor for Logger();
          __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationControls);
          id v34 = v136;
          id v35 = v19;
          id v36 = v26;
          swift_bridgeObjectRetain();
          unint64_t v37 = v34;
          id v38 = v35;
          id v39 = v36;
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.default.getter();
          int v42 = v41;
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v43 = swift_slowAlloc();
            LODWORD(v122) = v42;
            uint64_t v44 = v43;
            uint64_t v121 = (void *)swift_slowAlloc();
            uint64_t v123 = swift_slowAlloc();
            v146[0] = v123;
            *(_DWORD *)uint64_t v44 = 136315906;
            id v120 = v38;
            swift_bridgeObjectRetain();
            uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, (unint64_t)v17, v146);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 12) = 2080;
            id v45 = [(objc_class *)v37 string];
            uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v48 = v47;

            uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v146);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v44 + 22) = 2112;
            uint64_t v142 = (uint64_t)v39;
            id v49 = v39;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v50 = v121;
            void *v121 = v132;

            *(_WORD *)(v44 + 32) = 1024;
            id v51 = v120;

            LODWORD(v142) = v131 != 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl(&dword_1C2F90000, v40, (os_log_type_t)v122, "handoffHUD:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:%@,\n\tbadge?:%{BOOL}d", (uint8_t *)v44, 0x26u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v50, -1, -1);
            uint64_t v52 = v123;
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v52, -1, -1);
            MEMORY[0x1C87760E0](v44, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
          uint64_t v58 = (void *)*MEMORY[0x1E4FB2998];
          v146[0] = 0x69662E6F65646976;
          v146[1] = 0xEA00000000006C6CLL;
          v146[2] = 2;
          v146[3] = (uint64_t)v58;
          __int16 v147 = 0;
          uint64_t v148 = 4;
          char v149 = 0;
          uint64_t v150 = 0;
          id v59 = v58;
          id v60 = static UIImage.symbolImage(for:)((uint64_t)v146);

          swift_bridgeObjectRelease();
          id v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v60);

          objc_msgSend(v61, sel_setContentMode_, 4);
          id v62 = objc_msgSend(self, sel_whiteColor);
          objc_msgSend(v61, sel_setTintColor_, v62);

          id v135 = v61;
          id v63 = objc_msgSend(v135, sel_hash);
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v64 = type metadata accessor for Logger();
          __swift_project_value_buffer(v64, (uint64_t)static Logger.conversationControls);
          id v65 = v19;
          swift_bridgeObjectRetain();
          int v66 = v136;
          id v67 = v65;
          Swift::String v68 = v66;
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.default.getter();
          int v71 = v70;
          BOOL v72 = os_log_type_enabled(v69, v70);
          uint64_t v133 = (uint64_t)v63;
          if (!v72)
          {

            swift_bridgeObjectRelease_n();
            id v81 = v134;
            goto LABEL_26;
          }
          uint64_t v73 = swift_slowAlloc();
          LODWORD(v123) = v71;
          uint64_t v74 = v73;
          uint64_t v122 = swift_slowAlloc();
          uint64_t v142 = v122;
          *(_DWORD *)uint64_t v74 = 136315650;
          swift_bridgeObjectRetain();
          uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, (unint64_t)v17, &v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v74 + 12) = 2080;
          uint64_t v124 = v74 + 14;
          id v75 = [(objc_class *)v68 string];
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v77 = v67;
          unint64_t v79 = v78;

          uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v79, &v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 22) = 1024;

          LODWORD(v138) = v19 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_1C2F90000, v69, (os_log_type_t)v123, "handoffHUD:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:FaceTime Icon\n\tbadge?:%{BOOL}d", (uint8_t *)v74, 0x1Cu);
          uint64_t v80 = v122;
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v80, -1, -1);
          MEMORY[0x1C87760E0](v74, -1, -1);
        }
        id v81 = v134;
LABEL_26:
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v82 = type metadata accessor for Logger();
        uint64_t v83 = __swift_project_value_buffer(v82, (uint64_t)static Logger.conversationControls);
        id v84 = v81;
        uint64_t v134 = (void *)v83;
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc();
          uint64_t v88 = swift_slowAlloc();
          uint64_t v142 = v88;
          *(_DWORD *)uint64_t v87 = 136315138;
          long long v89 = (void *)v125();
          if (v89)
          {
            long long v90 = v89;
            id v91 = objc_msgSend(v89, sel_state);

            uint64_t v138 = (uint64_t)v91;
            type metadata accessor for TUConversationState(0);
            uint64_t v92 = String.init<A>(reflecting:)();
            unint64_t v94 = v93;
          }
          else
          {
            unint64_t v94 = 0xE300000000000000;
            uint64_t v92 = 7104878;
          }
          uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, &v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, v85, v86, "conversationState:%s", v87, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v88, -1, -1);
          MEMORY[0x1C87760E0](v87, -1, -1);
        }
        else
        {
        }
        uint64_t v138 = 4;
        long long v139 = 0u;
        long long v140 = 0u;
        char v141 = 6;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v95 = swift_allocObject();
        *(_OWORD *)(v95 + 16) = xmmword_1C3769830;
        Class v96 = v136;
        *(void *)(v95 + 32) = v136;
        uint64_t v142 = v95;
        specialized Array._endMutation()();
        uint64_t v97 = v142;
        uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        MEMORY[0x1F4188790](v98 - 8);
        id v100 = (char *)&v119 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v101 = type metadata accessor for AttributedString();
        __swift_storeEnumTagSinglePayload((uint64_t)v100, 1, 1, v101);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
        type metadata accessor for ConversationControlsAction();
        uint64_t v102 = swift_allocObject();
        *(_OWORD *)(v102 + 16) = xmmword_1C3769620;
        id v103 = v96;
        uint64_t v104 = v135;
        unint64_t v105 = v133;
        outlined copy of ConversationControlsRecipe.View?(v135, 0);
        uint64_t v106 = isa;
        os_log_type_t v107 = v104;
        static ConversationControlsAction.primaryCallAction(controlsManager:location:)();
        uint64_t v142 = v102;
        long long v143 = 0u;
        long long v144 = 0u;
        char v145 = 0;
        uint64_t v108 = (uint64_t)v129;
        ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v138, 0, v104, 0, v105, v106, v97, 0, (uint64_t)v129, 0, 0, (uint64_t)v100, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v142, 0, 0,
          0xFFu);
        uint64_t v109 = v128;
        if (__swift_getEnumTagSinglePayload(v108, 1, v128) == 1)
        {
          outlined consume of ConversationControlsRecipe.View?(v107, 0);

          outlined destroy of SystemUpdateNotice?(v108, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          return __swift_storeEnumTagSinglePayload(v130, 1, 1, v109);
        }
        else
        {
          id v110 = v103;
          uint64_t v111 = (uint64_t)v126;
          outlined init with take of ConversationControlsAction(v108, (uint64_t)v126, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          int v112 = SBUIIsSystemApertureEnabled();
          uint64_t v113 = v130;
          id v114 = v132;
          if (v112)
          {
            uint64_t v115 = Logger.logObject.getter();
            os_log_type_t v116 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v115, v116))
            {
              int v117 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)int v117 = 0;
              _os_log_impl(&dword_1C2F90000, v115, v116, "handoffHUD: [SystemAperture] showing content, but below system aperture", v117, 2u);
              MEMORY[0x1C87760E0](v117, -1, -1);

              outlined consume of ConversationControlsRecipe.View?(v135, 0);
            }
            else
            {

              outlined consume of ConversationControlsRecipe.View?(v135, 0);
            }
            uint64_t v118 = v111 + *(int *)(v109 + 72);
            outlined consume of SystemApertureElement?(*(void **)v118, *(void *)(v118 + 8), *(void **)(v118 + 16), *(void *)(v118 + 24), *(void **)(v118 + 32), *(void *)(v118 + 40), *(void **)(v118 + 48));
            *(void *)uint64_t v118 = 1;
            *(_OWORD *)(v118 + 8) = 0u;
            *(_OWORD *)(v118 + 24) = 0u;
            *(_OWORD *)(v118 + 40) = 0u;
            *(_OWORD *)(v118 + 56) = 0u;
            *(unsigned char *)(v118 + 72) = 0;
          }
          else
          {
            outlined consume of ConversationControlsRecipe.View?(v135, 0);
          }
          _s15ConversationKit11ParticipantVWOcTm_3(v111, v113, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          __swift_storeEnumTagSinglePayload(v113, 0, 1, v109);
          return outlined destroy of PushToTalkNotice(v111, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        }
      }
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationControls);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_1C2F90000, v54, v55, "handoffHUDRecipe: No active conversation to display nearby handoff HUD for.", v56, 2u);
      MEMORY[0x1C87760E0](v56, -1, -1);
    }
  }
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
}

uint64_t ConversationControlsRecipeGenerator.handoffCompletedRecipe(controlsManager:localizedDeviceCategory:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v117[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v117[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 584))())
  {
    uint64_t v135 = a2;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x490))())
    {
      uint64_t v15 = v14;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);
      swift_unknownObjectRelease();
      if (v17)
      {
        uint64_t v128 = v10;
        uint64_t v129 = v11;
        id v18 = objc_msgSend(self, sel_conversationKit);
        v148._object = (void *)0xE000000000000000;
        v19._id countAndFlagsBits = 0x454D495445434146;
        v19._object = (void *)0xED00004C4C41435FLL;
        v20.value._id countAndFlagsBits = 0x61737265766E6F43;
        v20.value._object = (void *)0xEF74694B6E6F6974;
        v21._id countAndFlagsBits = 0;
        v21._object = (void *)0xE000000000000000;
        v148._id countAndFlagsBits = 0;
        Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v148);

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        swift_bridgeObjectRetain();
        id countAndFlagsBits = (id)v22._countAndFlagsBits;
        Class isa = NSMutableAttributedString.__allocating_init(string:)(v22).super.super.isa;
        uint64_t v125 = a3;
        Class v134 = ConversationControlsRecipeGenerator.handoffCompletedSubtitle(localizedDeviceCategory:)(v135, a3).super.super.isa;
        id v23 = ConversationControlsRecipeGenerator.handoffBadgeImage(conversation:)(v17);
        id v24 = objc_msgSend(v17, sel_remoteMembers);
        id v25 = v17;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v27 = specialized Set.count.getter(v26);
        swift_bridgeObjectRelease();
        uint64_t v130 = a4;
        uint64_t v124 = v13;
        id v132 = v17;
        id v126 = v23;
        if (v27)
        {
          type metadata accessor for ConversationControlsBadgingAvatarViewController();
          id v28 = objc_msgSend(v23, sel_image);
          uint64_t v29 = self;
          swift_bridgeObjectRetain();
          id v30 = objc_msgSend(v29, sel_clearColor);
          uint64_t v123 = v25;
          uint64_t v31 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v123, v28, (uint64_t)countAndFlagsBits, (uint64_t)v22._object, v30);
          id v122 = objc_msgSend(v31, sel_view);
          uint64_t v32 = type metadata accessor for UUID();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = MEMORY[0x1F4188790](v32);
          id v36 = &v117[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
          unint64_t v37 = v23;
          id v38 = (void *)MEMORY[0x1E4FBC8C8];
          (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x278))(v34);
          id v39 = *(uint64_t (**)(unsigned char *))((*v38 & *v31) + 0x58);
          id v121 = v31;
          id v131 = (id)v39(v36);
          (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v36, v32);
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v40 = type metadata accessor for Logger();
          __swift_project_value_buffer(v40, (uint64_t)static Logger.conversationControls);
          os_log_type_t v41 = v134;
          id v42 = v37;
          uint64_t v43 = v123;
          swift_bridgeObjectRetain();
          uint64_t v44 = v41;
          id v45 = v42;
          uint64_t v46 = v43;
          unint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.default.getter();
          int v49 = v48;
          uint64_t v123 = v47;
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v50 = v37;
            uint64_t v51 = swift_slowAlloc();
            uint64_t v119 = (void *)swift_slowAlloc();
            uint64_t v120 = swift_slowAlloc();
            v142[0] = v120;
            *(_DWORD *)uint64_t v51 = 136315906;
            swift_bridgeObjectRetain();
            uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)countAndFlagsBits, (unint64_t)v22._object, v142);
            id countAndFlagsBits = v45;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v51 + 12) = 2080;
            id v52 = [(objc_class *)v44 string];
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            int v118 = v49;
            unint64_t v55 = v54;

            uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, v142);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 22) = 2112;
            uint64_t v138 = v46;
            uint64_t v56 = v46;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v57 = v119;
            void *v119 = v132;

            *(_WORD *)(v51 + 32) = 1024;
            id v58 = countAndFlagsBits;

            LODWORD(v138) = v50 != 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            id v59 = v123;
            _os_log_impl(&dword_1C2F90000, v123, (os_log_type_t)v118, "handoffCompleted:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:%@,\n\tbadge?:%{BOOL}d", (uint8_t *)v51, 0x26u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v57, -1, -1);
            uint64_t v60 = v120;
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v60, -1, -1);
            MEMORY[0x1C87760E0](v51, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v90 = v125;
          uint64_t v91 = v135;
          uint64_t v92 = v122;
        }
        else
        {
          uint64_t v66 = (uint64_t)countAndFlagsBits;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
          id v67 = (void *)*MEMORY[0x1E4FB2998];
          v142[0] = 0x69662E6F65646976;
          v142[1] = 0xEA00000000006C6CLL;
          v142[2] = 2;
          v142[3] = (uint64_t)v67;
          __int16 v143 = 0;
          uint64_t v144 = 4;
          char v145 = 0;
          uint64_t v146 = 0;
          id v68 = v67;
          id v69 = static UIImage.symbolImage(for:)((uint64_t)v142);

          swift_bridgeObjectRelease();
          id v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v69);

          objc_msgSend(v70, sel_setContentMode_, 4);
          id v71 = objc_msgSend(self, sel_whiteColor);
          objc_msgSend(v70, sel_setTintColor_, v71);

          id v72 = v70;
          id v131 = objc_msgSend(v72, sel_hash);
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v73 = type metadata accessor for Logger();
          __swift_project_value_buffer(v73, (uint64_t)static Logger.conversationControls);
          id v74 = v23;
          id v75 = v23;
          swift_bridgeObjectRetain();
          uint64_t v76 = v134;
          id v77 = v75;
          unint64_t v78 = v76;
          unint64_t v79 = Logger.logObject.getter();
          os_log_type_t v80 = static os_log_type_t.default.getter();
          int v81 = v80;
          if (os_log_type_enabled(v79, v80))
          {
            uint64_t v82 = swift_slowAlloc();
            id v121 = v77;
            uint64_t v83 = v82;
            uint64_t v123 = swift_slowAlloc();
            uint64_t v138 = v123;
            *(_DWORD *)uint64_t v83 = 136315650;
            LODWORD(v122) = v81;
            swift_bridgeObjectRetain();
            v136[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, (unint64_t)v22._object, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v83 + 12) = 2080;
            id v84 = [(objc_class *)v78 string];
            uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v87 = v86;

            v136[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v83 + 22) = 1024;
            id v88 = v121;

            LODWORD(v136[0]) = v74 != 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl(&dword_1C2F90000, v79, (os_log_type_t)v122, "handoffCompleted:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:FaceTime Icon\n\tbadge?:%{BOOL}d", (uint8_t *)v83, 0x1Cu);
            long long v89 = v123;
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v89, -1, -1);
            MEMORY[0x1C87760E0](v83, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v90 = v125;
          uint64_t v91 = v135;
          uint64_t v92 = v72;
        }
        v136[0] = v91;
        v136[1] = v90;
        char v137 = 1;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v93 = swift_allocObject();
        *(_OWORD *)(v93 + 16) = xmmword_1C3769830;
        Class v94 = v134;
        *(void *)(v93 + 32) = v134;
        uint64_t v138 = v93;
        specialized Array._endMutation()();
        uint64_t v95 = (uint64_t)v138;
        uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        MEMORY[0x1F4188790](v96 - 8);
        uint64_t v98 = &v117[-((v97 + 15) & 0xFFFFFFFFFFFFFFF0)];
        uint64_t v99 = type metadata accessor for AttributedString();
        __swift_storeEnumTagSinglePayload((uint64_t)v98, 1, 1, v99);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
        type metadata accessor for ConversationControlsAction();
        uint64_t v100 = swift_allocObject();
        *(_OWORD *)(v100 + 16) = xmmword_1C3769620;
        swift_storeEnumTagMultiPayload();
        uint64_t v138 = v100;
        long long v139 = 0u;
        long long v140 = 0u;
        char v141 = 0;
        swift_bridgeObjectRetain();
        uint64_t v101 = v94;
        unint64_t v102 = (unint64_t)v131;
        outlined copy of ConversationControlsRecipe.View?(v92, 0);
        id v103 = isa;
        uint64_t v116 = (uint64_t)v98;
        uint64_t v104 = (uint64_t)v128;
        ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v136, 0, v92, 0, v102, v103, v95, 0, (uint64_t)v128, 0, 0, v116, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v138, 0, 0,
          0xFFu);
        uint64_t v105 = v129;
        if (__swift_getEnumTagSinglePayload(v104, 1, v129) == 1)
        {
          outlined consume of ConversationControlsRecipe.View?(v92, 0);

          outlined destroy of SystemUpdateNotice?(v104, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          return __swift_storeEnumTagSinglePayload(v130, 1, 1, v105);
        }
        else
        {
          uint64_t v106 = (uint64_t)v124;
          outlined init with take of ConversationControlsAction(v104, (uint64_t)v124, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          int v107 = SBUIIsSystemApertureEnabled();
          uint64_t v108 = v130;
          id v109 = v132;
          if (v107)
          {
            if (one-time initialization token for conversationControls != -1) {
              swift_once();
            }
            uint64_t v110 = type metadata accessor for Logger();
            __swift_project_value_buffer(v110, (uint64_t)static Logger.conversationControls);
            uint64_t v111 = Logger.logObject.getter();
            os_log_type_t v112 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v111, v112))
            {
              uint64_t v113 = (uint8_t *)swift_slowAlloc();
              id v131 = (id)v102;
              id v114 = v113;
              *(_WORD *)uint64_t v113 = 0;
              _os_log_impl(&dword_1C2F90000, v111, v112, "handoffCompleted: [SystemAperture] showing content, but below system aperture", v113, 2u);
              MEMORY[0x1C87760E0](v114, -1, -1);

              outlined consume of ConversationControlsRecipe.View?(v92, 0);
            }
            else
            {

              outlined consume of ConversationControlsRecipe.View?(v92, 0);
            }
            uint64_t v115 = v106 + *(int *)(v105 + 72);
            outlined consume of SystemApertureElement?(*(void **)v115, *(void *)(v115 + 8), *(void **)(v115 + 16), *(void *)(v115 + 24), *(void **)(v115 + 32), *(void *)(v115 + 40), *(void **)(v115 + 48));
            *(void *)uint64_t v115 = 1;
            *(_OWORD *)(v115 + 8) = 0u;
            *(_OWORD *)(v115 + 24) = 0u;
            *(_OWORD *)(v115 + 40) = 0u;
            *(_OWORD *)(v115 + 56) = 0u;
            *(unsigned char *)(v115 + 72) = 0;
          }
          else
          {
            outlined consume of ConversationControlsRecipe.View?(v92, 0);
          }
          _s15ConversationKit11ParticipantVWOcTm_3(v106, v108, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          __swift_storeEnumTagSinglePayload(v108, 0, 1, v105);
          return outlined destroy of PushToTalkNotice(v106, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        }
      }
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.conversationControls);
    id v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl(&dword_1C2F90000, v62, v63, "handoffCompletedRecipe: No conversation to display handoff completed banner for.", v64, 2u);
      MEMORY[0x1C87760E0](v64, -1, -1);
    }
  }
  return __swift_storeEnumTagSinglePayload(a4, 1, 1, v11);
}

uint64_t ConversationControlsRecipeGenerator.lagunaHandoffHUDRecipe(controlsManager:suggestion:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 592))())
  {
    uint64_t v85 = v5;
    id v84 = a1;
    uint64_t v9 = outlined bridged method (ob) of @objc TUConversationHandoffEligibility.localizedDeviceCategory.getter(objc_msgSend(a1, sel_deviceHandle), (SEL *)&selRef_name);
    unint64_t v79 = v8;
    if (v10)
    {
      uint64_t countAndFlagsBits = (uint64_t)v9;
      object = v10;
    }
    else
    {
      id v15 = objc_msgSend(self, sel_conversationKit);
      v102._object = (void *)0xE000000000000000;
      v16._uint64_t countAndFlagsBits = 0x56545F454C505041;
      v16._object = (void *)0xE800000000000000;
      v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v17.value._object = (void *)0xEF74694B6E6F6974;
      v18._uint64_t countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      v102._uint64_t countAndFlagsBits = 0;
      Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v102);
      uint64_t countAndFlagsBits = v19._countAndFlagsBits;
      object = v19._object;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v20._uint64_t countAndFlagsBits = countAndFlagsBits;
    v20._object = object;
    v21.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v20).super.super.isa;
    id v22 = objc_msgSend(self, sel_conversationKit);
    v103._object = (void *)0xE000000000000000;
    v23._object = (void *)0x80000001C3798AB0;
    v23._uint64_t countAndFlagsBits = 0xD000000000000010;
    v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v24.value._object = (void *)0xEF74694B6E6F6974;
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v103._uint64_t countAndFlagsBits = 0;
    Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v103);

    v27.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v26).super.super.isa;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    id v28 = (void *)*MEMORY[0x1E4FB2950];
    strcpy((char *)v94, "appletv.fill");
    HIBYTE(v94[6]) = 0;
    v94[7] = -5120;
    uint64_t v95 = 2;
    uint64_t v96 = v28;
    __int16 v97 = 0;
    uint64_t v98 = 6;
    char v99 = 0;
    uint64_t v100 = 0;
    id v29 = v28;
    id v30 = static UIImage.symbolImage(for:)((uint64_t)v94);

    swift_bridgeObjectRelease();
    id v31 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
    uint64_t v83 = v30;
    id v32 = objc_msgSend(v31, sel_initWithImage_, v30);
    id v33 = objc_msgSend(self, sel_secondaryLabelColor);
    objc_msgSend(v32, sel_setTintColor_, v33);

    objc_msgSend(v32, sel_setContentMode_, 1);
    id v82 = v32;
    id v81 = objc_msgSend(v82, sel_hash);
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v86 = v6;
    uint64_t v34 = type metadata accessor for Logger();
    uint64_t v35 = __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationControls);
    id v36 = v21.super.super.isa;
    unint64_t v37 = v27.super.super.isa;
    id v38 = v36;
    id v39 = v37;
    v78[1] = v35;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    os_log_type_t v80 = v38;
    if (v42)
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v90 = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      id v45 = [(objc_class *)v38 string];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      v88[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      id v49 = [(objc_class *)v39 string];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;

      v88[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v40, v41, "lagunaHandoffHUD:\n\ttitle:%s\n\tsubtitle:%s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v44, -1, -1);
      MEMORY[0x1C87760E0](v43, -1, -1);
    }
    else
    {
    }
    uint64_t v53 = v84;
    v88[0] = (uint64_t)v84;
    char v89 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_1C3769830;
    *(void *)(v54 + 32) = v39;
    uint64_t v90 = v54;
    specialized Array._endMutation()();
    uint64_t v55 = v90;
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v56 - 8);
    id v58 = (char *)v78 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v59 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v58, 1, 1, v59);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
    uint64_t v60 = *(void *)(type metadata accessor for ConversationControlsAction() - 8);
    unint64_t v61 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_1C3769620;
    *(unsigned char *)(v62 + v61) = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v90 = v62;
    long long v91 = 0u;
    long long v92 = 0u;
    char v93 = 0;
    id v63 = v82;
    id v64 = v82;
    id v65 = v80;
    uint64_t v66 = v39;
    id v67 = v53;
    uint64_t v68 = (uint64_t)v85;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v88, 0, v63, 0, (unint64_t)v81, v65, v55, 0, (uint64_t)v85, 0, 0, (uint64_t)v58, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v90, 0, 0,
      0xFFu);
    uint64_t v69 = v86;
    if (__swift_getEnumTagSinglePayload(v68, 1, v86) == 1)
    {

      outlined destroy of SystemUpdateNotice?(v68, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v87, 1, 1, v69);
    }
    else
    {
      uint64_t v70 = (uint64_t)v79;
      outlined init with take of ConversationControlsAction(v68, (uint64_t)v79, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      if (SBUIIsSystemApertureEnabled())
      {
        id v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v73 = 0;
          _os_log_impl(&dword_1C2F90000, v71, v72, "handoffHUD: [SystemAperture] showing content, but below system aperture", v73, 2u);
          MEMORY[0x1C87760E0](v73, -1, -1);
          id v74 = v83;
          id v75 = v65;
        }
        else
        {
          id v74 = v71;
          id v75 = v66;
          uint64_t v66 = v65;
          id v71 = v83;
        }

        uint64_t v76 = v70 + *(int *)(v69 + 72);
        outlined consume of SystemApertureElement?(*(void **)v76, *(void *)(v76 + 8), *(void **)(v76 + 16), *(void *)(v76 + 24), *(void **)(v76 + 32), *(void *)(v76 + 40), *(void **)(v76 + 48));
        *(void *)uint64_t v76 = 1;
        *(_OWORD *)(v76 + 8) = 0u;
        *(_OWORD *)(v76 + 24) = 0u;
        *(_OWORD *)(v76 + 40) = 0u;
        *(_OWORD *)(v76 + 56) = 0u;
        *(unsigned char *)(v76 + 72) = 0;
      }
      else
      {
      }
      uint64_t v77 = v87;
      _s15ConversationKit11ParticipantVWOcTm_3(v70, v87, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v77, 0, 1, v69);
      return outlined destroy of PushToTalkNotice(v70, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    uint64_t v13 = v87;
    return __swift_storeEnumTagSinglePayload(v13, 1, 1, v6);
  }
}

uint64_t ConversationControlsRecipeGenerator.lagunaHandoffCompletedRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 600))())
  {
    uint64_t v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))();
    if (v12)
    {
      uint64_t v13 = (void *)v12;
      *(void *)&long long v127 = v8;
      id v122 = a1;
      id v121 = v11;
      uint64_t v128 = v9;
      id v14 = objc_msgSend(self, sel_sharedInstance);
      id v15 = objc_msgSend(v14, sel_neighborhoodActivityConduit);

      id v16 = objc_msgSend(v15, sel_activeSplitSessionTV);
      Swift::String_optional v17 = self;
      id v18 = objc_msgSend(v17, sel_conversationKit);
      v148._object = (void *)0xE000000000000000;
      v19._uint64_t countAndFlagsBits = 0x454D495445434146;
      v19._object = (void *)0xED00004C4C41435FLL;
      v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v20.value._object = (void *)0xEF74694B6E6F6974;
      v21._uint64_t countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      v148._uint64_t countAndFlagsBits = 0;
      Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v148);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      swift_bridgeObjectRetain();
      *(void *)&long long v130 = v22._countAndFlagsBits;
      *(NSMutableAttributedString *)&long long v125 = NSMutableAttributedString.__allocating_init(string:)(v22);
      id v126 = v16;
      if (v16
        && (Swift::String v23 = outlined bridged method (ob) of @objc TUConversationHandoffEligibility.localizedDeviceCategory.getter(v16, (SEL *)&selRef_name), v24))
      {
        uint64_t countAndFlagsBits = (uint64_t)v23;
        object = v24;
      }
      else
      {
        id v27 = objc_msgSend(v17, sel_conversationKit);
        v149._object = (void *)0xE000000000000000;
        v28._uint64_t countAndFlagsBits = 0x56545F454C505041;
        v28._object = (void *)0xE800000000000000;
        v29.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v29.value._object = (void *)0xEF74694B6E6F6974;
        v30._uint64_t countAndFlagsBits = 0;
        v30._object = (void *)0xE000000000000000;
        v149._uint64_t countAndFlagsBits = 0;
        Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v149);
        uint64_t countAndFlagsBits = v31._countAndFlagsBits;
        object = v31._object;
        swift_bridgeObjectRelease();
      }
      *(NSMutableAttributedString *)&long long v133 = ConversationControlsRecipeGenerator.handoffCompletedSubtitle(localizedDeviceCategory:)(countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      id v32 = ConversationControlsRecipeGenerator.handoffBadgeImage(conversation:)(v13);
      id v33 = objc_msgSend(v13, sel_mergedRemoteMembers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
      lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
      uint64_t v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = specialized Set.count.getter(v34);
      swift_bridgeObjectRelease();
      uint64_t v129 = a2;
      uint64_t v120 = v3;
      id v132 = v13;
      id v131 = v32;
      if (v35)
      {
        type metadata accessor for ConversationControlsBadgingAvatarViewController();
        id v36 = objc_msgSend(v32, sel_image);
        unint64_t v37 = self;
        swift_bridgeObjectRetain();
        id v38 = objc_msgSend(v37, sel_clearColor);
        id v39 = v13;
        uint64_t v40 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v39, v36, v130, (uint64_t)v22._object, v38);
        id v124 = objc_msgSend(v40, sel_view);
        uint64_t v41 = type metadata accessor for UUID();
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v43 = MEMORY[0x1F4188790](v41);
        id v45 = (char *)&v117 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v46 = (void *)MEMORY[0x1E4FBC8C8];
        (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v122) + 0x278))(v43);
        id v123 = (id)(*(uint64_t (**)(char *))((*v46 & *v40) + 0x58))(v45);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationControls);
        id v48 = (id)v133;
        id v49 = v32;
        id v50 = v39;
        swift_bridgeObjectRetain();
        id v51 = v48;
        id v52 = v49;
        id v53 = v50;
        uint64_t v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.default.getter();
        int v56 = v55;
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v57 = swift_slowAlloc();
          int v118 = (void *)swift_slowAlloc();
          uint64_t v119 = swift_slowAlloc();
          *(void *)Class v134 = v119;
          *(_DWORD *)uint64_t v57 = 136315906;
          swift_bridgeObjectRetain();
          v142[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, (unint64_t)v22._object, (uint64_t *)v134);
          LODWORD(v130) = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v57 + 12) = 2080;
          id v58 = objc_msgSend(v51, sel_string);
          uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_t v117 = v54;
          uint64_t v60 = v52;
          unint64_t v62 = v61;

          v142[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v62, (uint64_t *)v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v57 + 22) = 2112;
          v142[0] = v53;
          id v63 = v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v64 = v118;
          *int v118 = v132;

          *(_WORD *)(v57 + 32) = 1024;
          LODWORD(v142[0]) = v131 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          os_log_t v65 = v117;
          _os_log_impl(&dword_1C2F90000, v117, (os_log_type_t)v130, "lagunaHandoffCompleted:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:%@,\n\tbadge?:%{BOOL}d", (uint8_t *)v57, 0x26u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v64, -1, -1);
          uint64_t v66 = v119;
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v66, -1, -1);
          MEMORY[0x1C87760E0](v57, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v93 = v124;
      }
      else
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        os_log_type_t v72 = (void *)*MEMORY[0x1E4FB2998];
        v142[0] = 0x69662E6F65646976;
        v142[1] = 0xEA00000000006C6CLL;
        v142[2] = 2;
        v142[3] = v72;
        __int16 v143 = 0;
        uint64_t v144 = 4;
        char v145 = 0;
        uint64_t v146 = 0;
        id v73 = v72;
        id v74 = static UIImage.symbolImage(for:)((uint64_t)v142);

        swift_bridgeObjectRelease();
        id v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v74);

        objc_msgSend(v75, sel_setContentMode_, 4);
        id v76 = objc_msgSend(self, sel_whiteColor);
        objc_msgSend(v75, sel_setTintColor_, v76);

        id v124 = v75;
        id v123 = objc_msgSend(v124, sel_hash);
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v77 = type metadata accessor for Logger();
        __swift_project_value_buffer(v77, (uint64_t)static Logger.conversationControls);
        id v78 = v32;
        swift_bridgeObjectRetain();
        id v79 = (id)v133;
        id v80 = v78;
        id v81 = v79;
        id v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.default.getter();
        int v84 = v83;
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v85 = swift_slowAlloc();
          LODWORD(v118) = v84;
          uint64_t v86 = v85;
          uint64_t v119 = swift_slowAlloc();
          *(void *)Class v134 = v119;
          *(_DWORD *)uint64_t v86 = 136315650;
          swift_bridgeObjectRetain();
          uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, (unint64_t)v22._object, (uint64_t *)v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v86 + 12) = 2080;
          id v87 = objc_msgSend(v81, sel_string);
          id v88 = v80;
          uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v91 = v90;

          uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v91, (uint64_t *)v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 22) = 1024;

          LODWORD(v138) = v32 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_1C2F90000, v82, (os_log_type_t)v118, "lagunaHandoffCompleted:\n\ttitle:%s\n\tsubtitle:%s\n\tavatar:FaceTime Icon\n\tbadge?:%{BOOL}d", (uint8_t *)v86, 0x1Cu);
          uint64_t v92 = v119;
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v92, -1, -1);
          MEMORY[0x1C87760E0](v86, -1, -1);
          id v93 = v124;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          id v93 = v124;
        }
      }
      *(void *)Class v134 = 5;
      memset(&v134[8], 0, 32);
      v134[40] = 6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_1C3769830;
      uint64_t v95 = (void *)v133;
      *(void *)(v94 + 32) = v133;
      uint64_t v138 = v94;
      specialized Array._endMutation()();
      uint64_t v96 = v138;
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      MEMORY[0x1F4188790](v97 - 8);
      char v99 = (char *)&v117 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v100 = type metadata accessor for AttributedString();
      __swift_storeEnumTagSinglePayload((uint64_t)v99, 1, 1, v100);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
      type metadata accessor for ConversationControlsAction();
      uint64_t v101 = swift_allocObject();
      *(_OWORD *)(v101 + 16) = xmmword_1C3769620;
      swift_storeEnumTagMultiPayload();
      uint64_t v138 = v101;
      long long v139 = 0u;
      long long v140 = 0u;
      char v141 = 0;
      id v102 = v95;
      unint64_t v103 = (unint64_t)v123;
      outlined copy of ConversationControlsRecipe.View?(v93, 0);
      id v104 = (id)v125;
      uint64_t v116 = (uint64_t)v99;
      uint64_t v105 = v127;
      ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v134, 0, v93, 0, v103, v104, v96, 0, v127, 0, 0, v116, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v138, 0, 0,
        0xFFu);
      uint64_t v106 = v128;
      if (__swift_getEnumTagSinglePayload(v105, 1, v128) == 1)
      {
        outlined consume of ConversationControlsRecipe.View?(v93, 0);

        outlined destroy of SystemUpdateNotice?(v105, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
        return __swift_storeEnumTagSinglePayload(v129, 1, 1, v106);
      }
      else
      {
        uint64_t v107 = (uint64_t)v121;
        outlined init with take of ConversationControlsAction(v105, (uint64_t)v121, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        int v108 = SBUIIsSystemApertureEnabled();
        id v109 = v126;
        if (v108)
        {
          ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(v122, 128, (uint64_t)v134);
          long long v133 = *(_OWORD *)v134;
          long long v130 = *(_OWORD *)&v134[16];
          long long v127 = *(_OWORD *)&v134[32];
          long long v125 = v135;
          uint64_t v110 = v136;
          char v111 = v137;
          outlined consume of ConversationControlsRecipe.View?(v93, 0);

          uint64_t v112 = v107 + *(int *)(v106 + 72);
          outlined consume of SystemApertureElement?(*(void **)v112, *(void *)(v112 + 8), *(void **)(v112 + 16), *(void *)(v112 + 24), *(void **)(v112 + 32), *(void *)(v112 + 40), *(void **)(v112 + 48));
          long long v113 = v130;
          *(_OWORD *)uint64_t v112 = v133;
          *(_OWORD *)(v112 + 16) = v113;
          long long v114 = v125;
          *(_OWORD *)(v112 + 32) = v127;
          *(_OWORD *)(v112 + 48) = v114;
          *(void *)(v112 + 64) = v110;
          *(unsigned char *)(v112 + 72) = v111;
        }
        else
        {
          outlined consume of ConversationControlsRecipe.View?(v93, 0);
        }
        uint64_t v115 = v129;
        _s15ConversationKit11ParticipantVWOcTm_3(v107, v129, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        __swift_storeEnumTagSinglePayload(v115, 0, 1, v106);
        return outlined destroy of PushToTalkNotice(v107, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      }
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.conversationControls);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl(&dword_1C2F90000, v68, v69, "lagunaHandoffCompletedRecipe: No conversation to display handoff completed banner for.", v70, 2u);
      MEMORY[0x1C87760E0](v70, -1, -1);
    }
  }
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v9);
}

uint64_t ConversationControlsRecipeGenerator.makeIncomingCall(using:isThirdParty:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v132) = a2;
  uint64_t v129 = *(void *)v3;
  long long v130 = v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v6 - 8);
  long long v127 = (char *)v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ConversationControlsAction();
  id v126 = *(objc_class **)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  id v14 = (char *)v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))(v12);
  uint64_t v18 = v17;
  uint64_t ObjectType = swift_getObjectType();
  Swift::String_optional v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 104);
  uint64_t v128 = v18;
  if ((v20(ObjectType, v18) & 1) == 0)
  {
    uint64_t v125 = v16;
    id v131 = v14;
    uint64_t v116 = v10;
    uint64_t v123 = a3;
    Swift::String v22 = *(uint64_t (**)(void))((*v15 & *a1) + 0x290);
    Swift::String v23 = (void *)v22();
    if (v23
      && (v24 = v23, id v25 = objc_msgSend(v23, sel_link), v24, v25)
      && (outlined bridged method (ob) of @objc TUConversationLink.displayName.getter(v25), v26))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      if ((v132 & 1) == 0)
      {
        id v33 = (void *)v22();
        if (v33)
        {
          uint64_t v34 = v33;
          id v35 = objc_msgSend(v33, sel_displayName);

          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v32 = v36;

          id v27 = v131;
          uint64_t v29 = v125;
          uint64_t v28 = v128;
        }
        else
        {
          uint64_t v28 = v128;
          uint64_t v29 = v125;
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v128 + 64))(ObjectType, v128);
          id v32 = v37;
          id v27 = v131;
        }
LABEL_14:
        v38._uint64_t countAndFlagsBits = v30;
        v38._object = v32;
        Class isa = NSMutableAttributedString.__allocating_init(string:)(v38).super.super.isa;
        id v39 = v130;
        uint64_t v122 = ConversationControlsRecipeGenerator.callTypeSubtitles(for:)(a1);
        uint64_t v40 = (void *)*((void *)v39 + 2);
        uint64_t v41 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v40) + 0xD8);
        v113[1] = (*MEMORY[0x1E4FBC8C8] & *v40) + 216;
        long long v114 = v41;
        if ((v41() & 1) != 0 && TUCallCenter.needsMultipleRejection.getter()) {
          static ConversationControlsAction.acceptAndDeclineCall(controlsManager:)(a1, v27);
        }
        else {
          static ConversationControlsAction.acceptCall(controlsManager:)(a1, v27);
        }
        uint64_t v115 = v40;
        uint64_t v124 = v8;
        if (v132)
        {
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          int v118 = 0;
          __dst[0] = 8;
          memset(&__dst[1], 0, 32);
          LOBYTE(__dst[5]) = 6;
        }
        else
        {
          __dst[0] = 6;
          memset(&__dst[1], 0, 32);
          LOBYTE(__dst[5]) = 6;
          uint64_t v42 = ConversationControlsRecipeGenerator.subtitleBadgeView(incomingCall:)(v29, v28);
          uint64_t v119 = v43;
          uint64_t v120 = v42;
          int v118 = v44;
        }
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        os_log_t v117 = v113;
        MEMORY[0x1F4188790](v45 - 8);
        uint64_t v47 = (char *)v113 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v48 = type metadata accessor for AttributedString();
        __swift_storeEnumTagSinglePayload((uint64_t)v47, 1, 1, v48);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
        uint64_t v49 = *((void *)v126 + 9);
        unint64_t v50 = (*((unsigned __int8 *)v126 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v126 + 80);
        uint64_t v51 = swift_allocObject();
        *(_OWORD *)(v51 + 16) = xmmword_1C37696D0;
        id v52 = (unsigned char *)(v51 + v50);
        static ConversationControlsAction.rejectCall(controlsManager:)(a1, v52);
        uint64_t v53 = (uint64_t)v131;
        _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v131, (uint64_t)&v52[v49], (void (*)(void))type metadata accessor for ConversationControlsAction);
        uint64_t v138 = v51;
        long long v139 = 0u;
        long long v140 = 0u;
        char v141 = 0;
        uint64_t v54 = (void *)static ConversationControlsRecipeGenerator.makeAvatarUsingCall(_:with:isThirdParty:)(v29, v28, a1, v132 & 1);
        id v55 = ConversationControlsRecipeGenerator.makeLeadingViewType(using:avatarViewController:)(a1, v54);
        uint64_t v57 = v56;
        LOBYTE(v49) = v58;

        uint64_t v59 = isa;
        uint64_t v112 = v55;
        uint64_t v60 = (uint64_t)v127;
        ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, 0, 0, 0, v59, v122, v120, (uint64_t)v127, v119, v118, (uint64_t)v47, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v138, v112, v57,
          v49 & 1);
        uint64_t v61 = v124;
        if (__swift_getEnumTagSinglePayload(v60, 1, v124) == 1)
        {
          outlined destroy of PushToTalkNotice(v53, (void (*)(void))type metadata accessor for ConversationControlsAction);
          swift_unknownObjectRelease();

          outlined destroy of SystemUpdateNotice?(v60, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          return __swift_storeEnumTagSinglePayload(v123, 1, 1, v61);
        }
        uint64_t v62 = (uint64_t)v116;
        outlined init with take of ConversationControlsAction(v60, (uint64_t)v116, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        int v63 = SBUIIsSystemApertureEnabled();
        uint64_t v64 = v123;
        if (v63)
        {
          unint64_t v65 = 0x676E696D6F636E69;
          if (v132) {
            unint64_t v65 = 0xD00000000000001ALL;
          }
          uint64_t v119 = v65;
          if (v132) {
            unint64_t v66 = 0x80000001C3791C10;
          }
          else {
            unint64_t v66 = 0xEC0000006C6C6143;
          }
          (*(void (**)(void *__return_ptr, void, void, void *))(**((void **)v130 + 3) + 112))(v135, 0, 0, a1);
          uint64_t v67 = v135[1];
          long long v127 = (char *)v135[0];
          uint64_t v68 = (void *)v135[2];
          Class isa = (Class)v135[4];
          uint64_t v122 = v135[3];
          uint64_t v120 = v135[5];
          os_log_type_t v69 = v135[7];
          outlined init with take of ConversationControlsRecipe?((uint64_t)v135, (uint64_t)v136, &demangling cache variable for type metadata for SystemApertureIcon?);
          if (v136[7])
          {
            int v118 = v69;
            memcpy(__dst, v136, sizeof(__dst));
            if (one-time initialization token for conversationControls != -1) {
              swift_once();
            }
            uint64_t v70 = type metadata accessor for Logger();
            __swift_project_value_buffer(v70, (uint64_t)static Logger.conversationControls);
            swift_bridgeObjectRetain();
            id v71 = Logger.logObject.getter();
            os_log_type_t v72 = static os_log_type_t.default.getter();
            BOOL v73 = os_log_type_enabled(v71, v72);
            id v126 = v59;
            os_log_t v117 = v68;
            if (v73)
            {
              id v74 = (uint8_t *)swift_slowAlloc();
              uint64_t v75 = swift_slowAlloc();
              uint64_t v134 = v75;
              *(_DWORD *)id v74 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v119, v66, &v134);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1C2F90000, v71, v72, "%{public}s: [SystemAperture] showing content", v74, 0xCu);
              swift_arrayDestroy();
              uint64_t v76 = v75;
              uint64_t v62 = (uint64_t)v116;
              MEMORY[0x1C87760E0](v76, -1, -1);
              MEMORY[0x1C87760E0](v74, -1, -1);
            }
            else
            {

              uint64_t v77 = swift_bridgeObjectRelease_n();
            }
            uint64_t v86 = (void *)MEMORY[0x1E4FBC8C8];
            char v87 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x280))(v77);
            if ((*(uint64_t (**)(void))((*v86 & *v115) + 0xC0))())
            {
              LODWORD(v119) = 0;
              uint64_t v88 = 3;
              if ((v87 & 1) == 0) {
                uint64_t v88 = 4;
              }
            }
            else
            {
              if (v114()) {
                *(unsigned char *)(v62 + *(int *)(v124 + 64)) = 1;
              }
              LODWORD(v119) = v87 & 1;
              uint64_t v88 = 4;
            }
            uint64_t v115 = (void *)v88;
            uint64_t v89 = (void *)static ConversationControlsRecipeGenerator.makeAvatarUsingCall(_:with:isThirdParty:)(v125, v128, a1, v132 & 1);
            id v90 = ConversationControlsRecipeGenerator.makeLeadingViewType(using:avatarViewController:)(a1, v89);
            uint64_t v92 = v91;
            char v94 = v93;

            id v95 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIncomingCallLeadingView());
            id v132 = SystemApertureIncomingCallLeadingView.init(leadingViewType:)(v90, v92, v94 & 1);
            uint64_t v96 = (objc_class *)type metadata accessor for SystemApertureIconView();
            id v97 = objc_allocWithZone(v96);
            Class v98 = isa;
            char v99 = v120 & 1;
            uint64_t v100 = v127;
            uint64_t v101 = v117;
            uint64_t v102 = v122;
            outlined copy of SystemApertureIconAsset(v127, v67, v117, v122, (uint64_t)isa, v120 & 1);
            swift_bridgeObjectRetain();
            long long v130 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
            id v103 = objc_allocWithZone(v96);
            outlined copy of SystemApertureIconAsset(v100, v67, v101, v102, (uint64_t)v98, v99);
            swift_bridgeObjectRetain();
            id v104 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
            id v105 = objc_allocWithZone(v96);
            uint64_t v106 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

            swift_unknownObjectRelease();
            outlined destroy of PushToTalkNotice((uint64_t)v131, (void (*)(void))type metadata accessor for ConversationControlsAction);
            uint64_t v107 = v124;
            uint64_t v62 = (uint64_t)v116;
            int v108 = &v116[*(int *)(v124 + 72)];
            outlined consume of SystemApertureElement?(*(void **)v108, *((void *)v108 + 1), *((void **)v108 + 2), *((void *)v108 + 3), *((void **)v108 + 4), *((void *)v108 + 5), *((void **)v108 + 6));
            *(void *)int v108 = v132;
            *((void *)v108 + 1) = &protocol witness table for SystemApertureIncomingCallLeadingView;
            *((void *)v108 + 2) = v130;
            *((void *)v108 + 3) = &protocol witness table for SystemApertureIconView;
            *((void *)v108 + 4) = v104;
            *((void *)v108 + 5) = &protocol witness table for SystemApertureIconView;
            *((void *)v108 + 6) = v106;
            *((void *)v108 + 7) = &protocol witness table for SystemApertureIconView;
            *((void *)v108 + 8) = v115;
            v108[72] = (char)v119;
            uint64_t v109 = v123;
            _s15ConversationKit11ParticipantVWOcTm_3(v62, v123, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            uint64_t v110 = v109;
            uint64_t v111 = v107;
            goto LABEL_51;
          }
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v78 = type metadata accessor for Logger();
          __swift_project_value_buffer(v78, (uint64_t)static Logger.conversationControls);
          unint64_t v79 = v66;
          swift_bridgeObjectRetain();
          id v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v80, v81))
          {
            id v82 = (uint8_t *)swift_slowAlloc();
            uint64_t v83 = v64;
            uint64_t v84 = swift_slowAlloc();
            __dst[0] = v84;
            id v126 = v59;
            *(_DWORD *)id v82 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v119, v79, __dst);
            uint64_t v62 = (uint64_t)v116;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2F90000, v80, v81, "%{public}s: [SystemAperture] missing status icon", v82, 0xCu);
            swift_arrayDestroy();
            uint64_t v85 = v84;
            uint64_t v64 = v83;
            MEMORY[0x1C87760E0](v85, -1, -1);
            MEMORY[0x1C87760E0](v82, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          swift_unknownObjectRelease();

          outlined destroy of PushToTalkNotice((uint64_t)v131, (void (*)(void))type metadata accessor for ConversationControlsAction);
        }
        else
        {
          outlined destroy of PushToTalkNotice((uint64_t)v131, (void (*)(void))type metadata accessor for ConversationControlsAction);
          swift_unknownObjectRelease();
        }
        _s15ConversationKit11ParticipantVWOcTm_3(v62, v64, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        uint64_t v110 = v64;
        uint64_t v111 = v61;
LABEL_51:
        __swift_storeEnumTagSinglePayload(v110, 0, 1, v111);
        return outlined destroy of PushToTalkNotice(v62, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      }
    }
    id v27 = v131;
    uint64_t v28 = v128;
    uint64_t v29 = v125;
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v128 + 64))(ObjectType, v128);
    id v32 = v31;
    goto LABEL_14;
  }
  __swift_storeEnumTagSinglePayload(a3, 1, 1, v8);
  return swift_unknownObjectRelease();
}

uint64_t ConversationControlsRecipeGenerator.makeOngoingTelephonyCall(using:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v128 = *(uint64_t (**)(uint64_t, uint64_t))v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v6 - 8);
  os_log_t v123 = (os_log_t)((char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v121 = (uint64_t)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v12 = (*MEMORY[0x1E4FBC8C8] & *a1) + 624;
  uint64_t v13 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  long long v127 = a1;
  uint64_t v14 = v13(v9);
  uint64_t v16 = v15;
  char v17 = SBSIsSystemApertureAvailable();
  uint64_t v124 = v3;
  uint64_t v125 = a2;
  uint64_t v126 = v8;
  uint64_t v116 = v13;
  os_log_t v117 = (char *)v12;
  if ((v17 & 1) != 0 || ((*(uint64_t (**)(void))((*v11 & **(void **)(v3 + 16)) + 0x58))() & 1) == 0)
  {
    BOOL v19 = 0;
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    BOOL v19 = ((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 104))(ObjectType, v16) & 1) != 0
       || (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 184))(ObjectType, v16) == 1;
  }
  uint64_t v20 = swift_getObjectType();
  Swift::String v21 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 96);
  if ((v21(v20, v16) & 1) == 0)
  {
    Swift::String v22 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 120);
    if (((v22(v20, v16) | v19) & 1) == 0)
    {
      uint64_t v128 = v22;
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v87 = type metadata accessor for Logger();
      __swift_project_value_buffer(v87, (uint64_t)static Logger.conversationControls);
      swift_unknownObjectRetain_n();
      uint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.error.getter();
      int v90 = v89;
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v91 = swift_slowAlloc();
        LODWORD(v124) = v90;
        uint64_t v92 = v91;
        long long v127 = (void *)swift_slowAlloc();
        __dst[0] = (uint64_t)v127;
        *(_DWORD *)uint64_t v92 = 67109890;
        os_log_t v123 = v88;
        LOBYTE(v134[0]) = v21(v20, v16) & 1;
        LODWORD(v134[0]) = LOBYTE(v134[0]);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v92 + 8) = 1024;
        LOBYTE(v134[0]) = v128(v20, v16) & 1;
        LODWORD(v134[0]) = LOBYTE(v134[0]);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v92 + 14) = 1024;
        LOBYTE(v134[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 104))(v20, v16) & 1;
        LODWORD(v134[0]) = LOBYTE(v134[0]);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v92 + 20) = 2080;
        LODWORD(v134[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 184))(v20, v16);
        type metadata accessor for TUCallStatus(0);
        uint64_t v93 = String.init<A>(reflecting:)();
        v134[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, __dst);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v95 = v123;
        _os_log_impl(&dword_1C2F90000, v123, (os_log_type_t)v124, "makeOngoingTelephonyCallRecipe returning nil, isConnected: %{BOOL}d, isOutgoing: %{BOOL}d, isConnecting: %{BOOL}d, call.status: %s", (uint8_t *)v92, 0x1Eu);
        uint64_t v96 = v127;
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v96, -1, -1);
        MEMORY[0x1C87760E0](v92, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      uint64_t v97 = v125;
      uint64_t v98 = v126;
      return __swift_storeEnumTagSinglePayload(v97, 1, 1, v98);
    }
  }
  id v23 = static ConversationControlsRecipeGenerator.badge(forCall:)();
  id v24 = objc_msgSend(v23, sel_image);

  id v25 = static ConversationControlsRecipeGenerator.badgeBackgroundColor(forCall:)();
  uint64_t v26 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
  swift_unknownObjectRetain();
  uint64_t v119 = v24;
  id v118 = v25;
  id v27 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v14, 0, v24, v118, v26, v20, v16);
  uint64_t v28 = v127;
  id v120 = v27;
  uint64_t v128 = (uint64_t (*)(uint64_t, uint64_t))ConversationControlsRecipeGenerator.makeLeadingViewType(using:avatarViewController:)(v127, v27);
  uint64_t v30 = v29;
  int v32 = v31 & 1;
  __dst[0] = 7;
  memset(&__dst[1], 0, 32);
  LOBYTE(__dst[5]) = 6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v33 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 64);
  uint64_t v122 = v14;
  int v34 = v32;
  id v35 = v30;
  v36._uint64_t countAndFlagsBits = v33(v20, v16);
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v36).super.super.isa;
  Swift::String v38 = v28;
  id v39 = v128;
  uint64_t v40 = ConversationControlsRecipeGenerator.callTypeSubtitles(for:)(v38);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v41 - 8);
  uint64_t v43 = (char *)&v111 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v43, 1, 1, v44);
  uint64_t v137 = 0;
  memset(v136, 0, sizeof(v136));
  char v138 = -2;
  outlined copy of PreCallControlsContext(v39);
  uint64_t v110 = (uint64_t)v43;
  os_log_t v45 = v123;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, 0, 0, 0, isa, v40, 0, (uint64_t)v123, 0, 0, v110, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)v136, v39, v35,
    v34);
  uint64_t v46 = v126;
  if (__swift_getEnumTagSinglePayload((uint64_t)v45, 1, v126) != 1)
  {
    uint64_t v53 = v121;
    outlined init with take of ConversationControlsAction((uint64_t)v45, v121, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    if (SBUIIsSystemApertureEnabled())
    {
      uint64_t v115 = v35;
      LODWORD(v123) = v34;
      (*(void (**)(void *__return_ptr, void, void, void *))(**(void **)(v124 + 24) + 112))(v131, 0, 0, v127);
      id v55 = (void *)v131[0];
      uint64_t v54 = v131[1];
      int v56 = (void *)v131[2];
      uint64_t v57 = v131[3];
      uint64_t v58 = v131[4];
      char v59 = v132;
      uint64_t v60 = v133;
      outlined init with take of ConversationControlsRecipe?((uint64_t)v131, (uint64_t)v134, &demangling cache variable for type metadata for SystemApertureIcon?);
      if (!v134[7])
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v102 = type metadata accessor for Logger();
        __swift_project_value_buffer(v102, (uint64_t)static Logger.conversationControls);
        id v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.error.getter();
        BOOL v105 = os_log_type_enabled(v103, v104);
        uint64_t v106 = v125;
        if (v105)
        {
          uint64_t v107 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v107 = 0;
          _os_log_impl(&dword_1C2F90000, v103, v104, "ongoingCall: [SystemAperture] missing status icon", v107, 2u);
          MEMORY[0x1C87760E0](v107, -1, -1);

          outlined consume of PreCallControlsContext(v128);
          swift_unknownObjectRelease();
          id v108 = v118;
          id v103 = v119;
        }
        else
        {

          swift_unknownObjectRelease();
          outlined consume of PreCallControlsContext(v128);
          id v108 = v120;
        }

        uint64_t v109 = v121;
        _s15ConversationKit11ParticipantVWOcTm_3(v121, v106, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        __swift_storeEnumTagSinglePayload(v106, 0, 1, v46);
        uint64_t v100 = v109;
        return outlined destroy of PushToTalkNotice(v100, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      }
      long long v113 = v56;
      uint64_t v114 = v54;
      uint64_t v124 = v60;
      memcpy(__dst, v134, sizeof(__dst));
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v112 = v57;
      uint64_t v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.conversationControls);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v64 = 0;
        _os_log_impl(&dword_1C2F90000, v62, v63, "ongoingCall: [SystemAperture] showing content", v64, 2u);
        MEMORY[0x1C87760E0](v64, -1, -1);
      }

      swift_bridgeObjectRelease();
      *(void *)(v53 + 88) = MEMORY[0x1E4FBC860];
      uint64_t v65 = type metadata accessor for SystemApertureInCallLeadingView();
      uint64_t v66 = outlined retain of SystemApertureIcon((uint64_t)__dst);
      uint64_t v67 = v116(v66);
      uint64_t v69 = v68;
      uint64_t v70 = swift_getObjectType();
      v130[3] = v70;
      uint64_t v71 = *(void *)(v69 + 8);
      unsigned char v130[4] = v71;
      uint64_t v129 = v67;
      v130[0] = v67;
      swift_unknownObjectRetain();
      os_log_t v117 = specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(__dst, (uint64_t)&v129, v65, v70, v71);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
      self;
      os_log_type_t v72 = (void *)swift_dynamicCastObjCClass();
      if (v72) {
        swift_unknownObjectRetain();
      }
      type metadata accessor for SystemApertureInCallWaveformTrailingView();
      uint64_t v116 = (uint64_t (*)(uint64_t))SystemApertureInCallWaveformTrailingView.__allocating_init(call:)(v72);
      BOOL v73 = (objc_class *)type metadata accessor for SystemApertureIconView();
      id v74 = objc_allocWithZone(v73);
      char v75 = v59 & 1;
      uint64_t v77 = v113;
      uint64_t v76 = v114;
      uint64_t v78 = v112;
      outlined copy of SystemApertureIconAsset(v55, v114, v113, v112, v58, v75);
      swift_bridgeObjectRetain();
      uint64_t v111 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
      id v79 = objc_allocWithZone(v73);
      outlined copy of SystemApertureIconAsset(v55, v76, v77, v78, v58, v75);
      swift_bridgeObjectRetain();
      id v80 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);
      uint64_t v81 = ConversationControlsManager.maximumLayoutMode.getter();
      outlined retain of SystemApertureIcon?(v131, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
      outlined consume of PreCallControlsContext(v128);

      swift_unknownObjectRelease();
      uint64_t v82 = v126;
      uint64_t v53 = v121;
      uint64_t v83 = v121 + *(int *)(v126 + 72);
      outlined consume of SystemApertureElement?(*(void **)v83, *(void *)(v83 + 8), *(void **)(v83 + 16), *(void *)(v83 + 24), *(void **)(v83 + 32), *(void *)(v83 + 40), *(void **)(v83 + 48));
      *(void *)uint64_t v83 = v117;
      *(void *)(v83 + 8) = &protocol witness table for SystemApertureInCallLeadingView;
      *(void *)(v83 + 16) = v116;
      *(void *)(v83 + 24) = &protocol witness table for SystemApertureInCallWaveformTrailingView;
      *(void *)(v83 + 32) = v111;
      *(void *)(v83 + 40) = &protocol witness table for SystemApertureIconView;
      *(void *)(v83 + 48) = v80;
      *(void *)(v83 + 56) = &protocol witness table for SystemApertureIconView;
      *(void *)(v83 + 64) = v81;
      *(unsigned char *)(v83 + 72) = 0x80;
      uint64_t v84 = v125;
      _s15ConversationKit11ParticipantVWOcTm_3(v53, v125, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      uint64_t v85 = v84;
      uint64_t v86 = v82;
    }
    else
    {

      outlined consume of PreCallControlsContext(v128);
      swift_unknownObjectRelease();
      uint64_t v99 = v125;
      _s15ConversationKit11ParticipantVWOcTm_3(v53, v125, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      uint64_t v85 = v99;
      uint64_t v86 = v46;
    }
    __swift_storeEnumTagSinglePayload(v85, 0, 1, v86);
    uint64_t v100 = v53;
    return outlined destroy of PushToTalkNotice(v100, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v47 = v125;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.conversationControls);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl(&dword_1C2F90000, v49, v50, "makeOngoingTelephonyCallRecipe: Recipe init failed", v51, 2u);
    MEMORY[0x1C87760E0](v51, -1, -1);

    outlined consume of PreCallControlsContext(v128);
    swift_unknownObjectRelease();
    id v52 = v118;
    uint64_t v49 = v119;
  }
  else
  {

    swift_unknownObjectRelease();
    outlined consume of PreCallControlsContext(v128);
    id v52 = v120;
  }

  uint64_t v97 = v47;
  uint64_t v98 = v46;
  return __swift_storeEnumTagSinglePayload(v97, 1, 1, v98);
}

uint64_t ConversationControlsRecipeGenerator.makeOngoingThirdPartyVoIPCall(using:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v112 = (uint64_t)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (*MEMORY[0x1E4FBC8C8] & *a1) + 624;
  uint64_t v13 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  os_log_t v117 = a1;
  uint64_t v101 = v13;
  uint64_t v14 = v13(v9);
  uint64_t v16 = v15;
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 96))(ObjectType, v16) & 1) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 120))(ObjectType, v16) & 1) == 0)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.conversationControls);
    swift_unknownObjectRetain_n();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v114 = v8;
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      v123[0] = v65;
      *(_DWORD *)uint64_t v64 = 136315138;
      __dst[0] = v14;
      __dst[1] = v16;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Call);
      uint64_t v66 = String.init<A>(reflecting:)();
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v123);
      uint64_t v8 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v62, v63, "Couldn't generate recipe due to invalid call state %s", v64, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v65, -1, -1);
      MEMORY[0x1C87760E0](v64, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t v45 = a2;
    return __swift_storeEnumTagSinglePayload(v45, 1, 1, v8);
  }
  uint64_t v99 = v12;
  uint64_t v102 = v11;
  uint64_t v114 = v8;
  uint64_t v109 = a2;
  id v18 = specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(v14, v5, ObjectType, v16);
  BOOL v19 = v18;
  uint64_t v103 = v20;
  uint64_t v104 = v21;
  if (v18) {
    id v22 = v18;
  }
  uint64_t v23 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
  id v24 = objc_msgSend(self, sel_clearColor);
  uint64_t v25 = swift_unknownObjectRetain();
  uint64_t v26 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v25, 0, v19, v24, v23, ObjectType, v16);
  id v27 = v117;
  id v108 = v26;
  id v115 = ConversationControlsRecipeGenerator.makeLeadingViewType(using:avatarViewController:)(v117, v26);
  uint64_t v110 = v28;
  int v111 = v29 & 1;
  __dst[0] = 9;
  memset(&__dst[1], 0, 32);
  LOBYTE(__dst[5]) = 6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 64);
  uint64_t v100 = ObjectType;
  v31._uint64_t countAndFlagsBits = v30(ObjectType, v16);
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v31).super.super.isa;
  uint64_t v106 = (void *)ConversationControlsRecipeGenerator.callTypeSubtitles(for:)(v27);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  BOOL v105 = &v97;
  MEMORY[0x1F4188790](v32 - 8);
  int v34 = (char *)&v97 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 1, 1, v35);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  uint64_t v113 = v14;
  uint64_t v36 = *(void *)(type metadata accessor for ConversationControlsAction() - 8);
  uint64_t v37 = *(void *)(v36 + 72);
  Swift::String v38 = v19;
  unint64_t v39 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1C37696D0;
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = (unsigned char *)(v40 + v39 + v37);
  id v42 = v115;
  uint64_t v43 = v110;
  static ConversationControlsAction.rejectCall(controlsManager:)(v27, v41);
  uint64_t v125 = v40;
  LOBYTE(v40) = v111;
  long long v126 = 0u;
  long long v127 = 0u;
  char v128 = 0;
  outlined copy of PreCallControlsContext(v42);
  uint64_t v44 = v112;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, 0, 0, 0, isa, (uint64_t)v106, 0, v112, 0, 0, (uint64_t)v34, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v125, v42, v43,
    v40);
  uint64_t v8 = v114;
  if (__swift_getEnumTagSinglePayload(v44, 1, v114) == 1)
  {
    outlined consume of (icon: UIImage, accessibilityLabel: String)?(v38);
    outlined consume of PreCallControlsContext(v42);
    swift_unknownObjectRelease();

    outlined destroy of SystemUpdateNotice?(v44, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v45 = v109;
    return __swift_storeEnumTagSinglePayload(v45, 1, 1, v8);
  }
  Class isa = (Class)v38;
  uint64_t v46 = v44;
  uint64_t v47 = (uint64_t)v102;
  outlined init with take of ConversationControlsAction(v46, (uint64_t)v102, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  int v48 = SBUIIsSystemApertureEnabled();
  uint64_t v49 = v109;
  if (v48)
  {
    id v50 = v108;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.conversationControls);
    id v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_1C2F90000, v52, v53, "ongoingThirdPartyVoIPCall: [SystemAperture] showing content", v54, 2u);
      MEMORY[0x1C87760E0](v54, -1, -1);
    }

    swift_bridgeObjectRelease();
    *(void *)(v47 + 88) = MEMORY[0x1E4FBC860];
    (*(void (**)(void *__return_ptr, void, void, void *))(*v116[3] + 112))(v120, 0, 0, v117);
    uint64_t v116 = (void **)v120[0];
    uint64_t v112 = v120[1];
    BOOL v105 = (uint64_t *)v120[3];
    uint64_t v106 = (void *)v120[2];
    char v55 = v121;
    uint64_t v98 = v120[4];
    uint64_t v56 = v122;
    outlined init with take of ConversationControlsRecipe?((uint64_t)v120, (uint64_t)v123, &demangling cache variable for type metadata for SystemApertureIcon?);
    if (v123[7])
    {
      uint64_t v97 = v56;
      memcpy(__dst, v123, sizeof(__dst));
      uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 376);
      if (v57(v100, v16))
      {
        id v58 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIconView());
        outlined copy of SystemApertureIconAsset(v116, v112, v106, (uint64_t)v105, v98, v55 & 1);
        swift_bridgeObjectRetain();
        char v59 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
        uint64_t v60 = (uint64_t (*)(uint64_t))&protocol witness table for SystemApertureIconView;
      }
      else
      {
        uint64_t v73 = type metadata accessor for SystemApertureInCallLeadingView();
        uint64_t v74 = outlined retain of SystemApertureIcon((uint64_t)__dst);
        uint64_t v75 = v101(v74);
        uint64_t v77 = v76;
        uint64_t v78 = swift_getObjectType();
        v119[3] = v78;
        uint64_t v79 = *(void *)(v77 + 8);
        v119[4] = v79;
        uint64_t v118 = v75;
        v119[0] = v75;
        swift_unknownObjectRetain();
        char v59 = specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(__dst, (uint64_t)&v118, v73, v78, v79);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v119);
        uint64_t v60 = (uint64_t (*)(uint64_t))&protocol witness table for SystemApertureInCallLeadingView;
      }
      uint64_t v101 = v60;
      if (v57(v100, v16))
      {
        type metadata accessor for SystemApertureEmptyTrailingView();
        id v80 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v81 = objc_msgSend(v80, sel_init, v97);
        uint64_t v82 = &protocol witness table for SystemApertureEmptyTrailingView;
      }
      else
      {
        self;
        uint64_t v83 = (void *)swift_dynamicCastObjCClass();
        if (v83) {
          swift_unknownObjectRetain();
        }
        type metadata accessor for SystemApertureInCallWaveformTrailingView();
        id v81 = (id)SystemApertureInCallWaveformTrailingView.__allocating_init(call:)(v83);
        uint64_t v82 = &protocol witness table for SystemApertureInCallWaveformTrailingView;
      }
      uint64_t v84 = (objc_class *)type metadata accessor for SystemApertureIconView();
      id v85 = objc_allocWithZone(v84);
      outlined retain of SystemApertureIcon?(v120, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined copy of SystemApertureIcon?);
      uint64_t v86 = v59;
      id v87 = v81;
      uint64_t v88 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
      id v89 = objc_allocWithZone(v84);
      outlined copy of SystemApertureIconAsset(v116, v112, v106, (uint64_t)v105, v98, v55 & 1);
      swift_bridgeObjectRetain();
      int v90 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);
      uint64_t v91 = ConversationControlsManager.maximumLayoutMode.getter();

      outlined retain of SystemApertureIcon?(v120, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
      outlined consume of PreCallControlsContext(v115);
      outlined consume of (icon: UIImage, accessibilityLabel: String)?(isa);
      swift_unknownObjectRelease();
      uint64_t v92 = v114;
      uint64_t v93 = (uint64_t)v102;
      unint64_t v94 = &v102[*(int *)(v114 + 72)];
      outlined consume of SystemApertureElement?(*(void **)v94, *((void *)v94 + 1), *((void **)v94 + 2), *((void *)v94 + 3), *((void **)v94 + 4), *((void *)v94 + 5), *((void **)v94 + 6));
      os_log_t v95 = v101;
      *(void *)unint64_t v94 = v59;
      *((void *)v94 + 1) = v95;
      *((void *)v94 + 2) = v81;
      *((void *)v94 + 3) = v82;
      *((void *)v94 + 4) = v88;
      *((void *)v94 + 5) = &protocol witness table for SystemApertureIconView;
      *((void *)v94 + 6) = v90;
      *((void *)v94 + 7) = &protocol witness table for SystemApertureIconView;
      *((void *)v94 + 8) = v91;
      v94[72] = 0x80;
      uint64_t v96 = v109;
      _s15ConversationKit11ParticipantVWOcTm_3(v93, v109, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v96, 0, 1, v92);
      uint64_t v68 = v93;
      return outlined destroy of PushToTalkNotice(v68, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      os_log_type_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v72 = 0;
      _os_log_impl(&dword_1C2F90000, v70, v71, "ongoingCall: [SystemAperture] missing status icon", v72, 2u);
      MEMORY[0x1C87760E0](v72, -1, -1);

      outlined consume of PreCallControlsContext(v115);
      outlined consume of (icon: UIImage, accessibilityLabel: String)?(isa);
      swift_unknownObjectRelease();
    }
    else
    {
      outlined consume of (icon: UIImage, accessibilityLabel: String)?(isa);
      swift_unknownObjectRelease();
      outlined consume of PreCallControlsContext(v115);
    }
  }
  else
  {
    outlined consume of (icon: UIImage, accessibilityLabel: String)?(isa);
    outlined consume of PreCallControlsContext(v115);
    swift_unknownObjectRelease();
  }
  _s15ConversationKit11ParticipantVWOcTm_3(v47, v49, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  __swift_storeEnumTagSinglePayload(v49, 0, 1, v8);
  uint64_t v68 = v47;
  return outlined destroy of PushToTalkNotice(v68, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t ConversationControlsRecipeGenerator.callAgainHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v154 = (uint8_t *)v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = (int *)type metadata accessor for Participant(0);
  uint64_t v6 = MEMORY[0x1F4188790](v153);
  uint64_t v150 = (void (**)(char *, uint64_t))((char *)v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v142 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v152 = (objc_class *)((char *)v142 - v15);
  uint64_t v16 = (void *)MEMORY[0x1E4FBC8C8];
  char v17 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  ((void (*)(uint64_t))v17)(v14);
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v19) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 496))(ObjectType, v19);
  uint64_t v21 = swift_unknownObjectRelease();
  if (v19)
  {
    id v22 = (void *)(*(uint64_t (**)(uint64_t))((*v16 & *a1) + 0x2B0))(v21);
    if (v22 || (id v22 = (void *)(*(uint64_t (**)(void))((*v16 & *a1) + 0x290))()) != 0)
    {
      uint64_t v155 = a2;
      if (static Platform.current.getter() == 3
        || (id v23 = v22,
            unsigned __int8 v24 = specialized Conversation.cnk_allowsVideoMessaging.getter(),
            v23,
            (v24 & 1) != 0))
      {
        uint64_t v144 = v9;
        type metadata accessor for ConversationControlsBadgingAvatarViewController();
        uint64_t v25 = self;
        id v26 = v22;
        id v27 = objc_msgSend(v25, sel_clearColor);
        id v149 = v26;
        uint64_t v28 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v26, 0, 0, 0, v27);
        id v145 = objc_msgSend(v28, sel_view);
        uint64_t v29 = type metadata accessor for UUID();
        uint64_t v30 = *(void *)(v29 - 8);
        uint64_t v31 = MEMORY[0x1F4188790](v29);
        uint64_t v33 = (char *)v142 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(uint64_t))((*v16 & *a1) + 0x278))(v31);
        int v34 = *(uint64_t (**)(char *))((*v16 & *v28) + 0x58);
        id v148 = v28;
        uint64_t v35 = (objc_class *)v34(v33);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
        type metadata accessor for ConversationControlsAction();
        uint64_t v36 = (_OWORD *)swift_allocObject();
        long long v143 = xmmword_1C3769620;
        v36[1] = xmmword_1C3769620;
        swift_storeEnumTagMultiPayload();
        uint64_t v37 = ConversationController.visibleParticipants.getter();
        uint64_t v38 = (uint64_t)v152;
        specialized Collection.first.getter(v37, (uint64_t)v152);
        swift_bridgeObjectRelease();
        outlined init with copy of Participant?(v38, (uint64_t)v13, &demangling cache variable for type metadata for Participant?);
        unint64_t v39 = v153;
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, (uint64_t)v153);
        uint64_t v41 = &selRef_ringButton;
        uint64_t v146 = v36;
        Class v147 = v35;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for Participant?);
          Class v42 = 0;
LABEL_26:
          __dst[0] = (id)10;
          memset(&__dst[1], 0, 32);
          LOBYTE(__dst[5]) = 6;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
          id v95 = v145;
          v96._uint64_t countAndFlagsBits = TUConversation.participantListDisplayName.getter();
          v97.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v96).super.super.isa;
          id v98 = [self v41[143]];
          v166._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
          v166._object = (void *)0x80000001C3798B30;
          v99._uint64_t countAndFlagsBits = 0x616C696176616E55;
          v99._object = (void *)0xEB00000000656C62;
          v100.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
          v100.value._object = (void *)0xEF74694B6E6F6974;
          v101._uint64_t countAndFlagsBits = 0;
          v101._object = (void *)0xE000000000000000;
          Swift::String v102 = NSLocalizedString(_:tableName:bundle:value:comment:)(v99, v100, (NSBundle)v98, v101, v166);

          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
          Class isa = NSMutableAttributedString.__allocating_init(string:)(v102).super.super.isa;
          v159[0] = MEMORY[0x1E4FBC860];
          uint64_t v104 = v42;
          BOOL v105 = isa;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v159[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v42)
          {
            uint64_t v106 = v104;
            MEMORY[0x1C87733A0]();
            if (*(void *)((v159[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159[0] & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          uint64_t v107 = v159[0];

          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
          uint64_t v109 = v104;
          MEMORY[0x1F4188790](v108 - 8);
          int v111 = (char *)v142 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v112 = type metadata accessor for AttributedString();
          __swift_storeEnumTagSinglePayload((uint64_t)v111, 1, 1, v112);
          uint64_t v161 = v146;
          long long v162 = 0u;
          long long v163 = 0u;
          char v164 = 0;
          uint64_t v113 = (uint64_t)v154;
          ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, v95, 0, (unint64_t)v147, v97.super.super.isa, v107, 0, (uint64_t)v154, 0, 0, (uint64_t)v111, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v161, 0, 0,
            0xFFu);
          (*(void (**)(void *__return_ptr, void, void, void *))(**(void **)(v151 + 24) + 112))(v156, 0, 0, a1);
          id v115 = (void *)v156[0];
          uint64_t v114 = (void *)v156[1];
          uint64_t v116 = (int *)v95;
          uint64_t v118 = (void *)v156[2];
          uint64_t v117 = v156[3];
          uint64_t v120 = v156[4];
          char v119 = v157;
          uint64_t v151 = v158;
          outlined init with take of ConversationControlsRecipe?((uint64_t)v156, (uint64_t)v159, &demangling cache variable for type metadata for SystemApertureIcon?);
          if (v159[7])
          {
            uint64_t v152 = v109;
            uint64_t v153 = v116;
            memcpy(__dst, v159, sizeof(__dst));
            uint64_t v121 = type metadata accessor for ConversationControlsRecipe();
            if (__swift_getEnumTagSinglePayload(v113, 1, v121))
            {

              outlined retain of SystemApertureIcon?(v156, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
            }
            else
            {
              Class v147 = (Class)type metadata accessor for SystemApertureIconView();
              id v122 = objc_allocWithZone(v147);
              id v145 = v114;
              uint64_t v146 = v115;
              os_log_t v123 = v115;
              uint64_t v124 = v118;
              uint64_t v125 = v117;
              uint64_t v126 = v117;
              uint64_t v127 = v120;
              outlined copy of SystemApertureIconAsset(v123, (uint64_t)v114, v118, v126, v120, v119 & 1);
              swift_bridgeObjectRetain();
              char v128 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
              type metadata accessor for SystemApertureEmptyTrailingView();
              uint64_t v150 = (void (**)(char *, uint64_t))objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
              uint64_t v129 = v147;
              id v130 = objc_allocWithZone(v147);
              outlined copy of SystemApertureIconAsset(v146, (uint64_t)v145, v124, v125, v127, v119 & 1);
              swift_bridgeObjectRetain();
              id v131 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
              id v132 = objc_allocWithZone(v129);
              uint64_t v133 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

              uint64_t v134 = &v154[*(int *)(v121 + 72)];
              long long v135 = *(void **)v134;
              uint64_t v136 = *((void *)v134 + 1);
              uint64_t v137 = (void *)*((void *)v134 + 2);
              uint64_t v138 = *((void *)v134 + 3);
              long long v139 = (void *)*((void *)v134 + 4);
              uint64_t v140 = *((void *)v134 + 5);
              char v141 = (void *)*((void *)v134 + 6);
              *(void *)uint64_t v134 = v128;
              *((void *)v134 + 1) = &protocol witness table for SystemApertureIconView;
              *((void *)v134 + 2) = v150;
              *((void *)v134 + 3) = &protocol witness table for SystemApertureEmptyTrailingView;
              *((void *)v134 + 4) = v131;
              *((void *)v134 + 5) = &protocol witness table for SystemApertureIconView;
              *((void *)v134 + 6) = v133;
              *((void *)v134 + 7) = &protocol witness table for SystemApertureIconView;
              uint64_t v113 = (uint64_t)v154;
              *((void *)v134 + 8) = 3;
              v134[72] = 0x80;
              outlined consume of SystemApertureElement?(v135, v136, v137, v138, v139, v140, v141);
            }
          }
          else
          {
          }
          return outlined init with take of ConversationControlsRecipe?(v113, v155, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
        }
        uint64_t v43 = (uint64_t)v144;
        outlined init with take of ConversationControlsAction((uint64_t)v13, (uint64_t)v144, (void (*)(void))type metadata accessor for Participant);
        uint64_t v44 = *(void **)(v43 + v39[7]);
        if (v44)
        {
          id v45 = v44;
          outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v45);
          if (v46)
          {
            if (objc_msgSend(v45, sel_shouldHideContact))
            {
              uint64_t v47 = type metadata accessor for PersonNameComponents();
              uint64_t v153 = (int *)v142;
              uint64_t v48 = *(void *)(v47 - 8);
              MEMORY[0x1F4188790](v47);
              id v50 = (char *)v142 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_bridgeObjectRetain();
              PersonNameComponents.init()();
              PersonNameComponents.givenName.setter();
              PersonNameComponents.familyName.setter();
              if (one-time initialization token for initials != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v51 = (id)static NSPersonNameComponentsFormatter.initials;
              Class v52 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
              id v53 = objc_msgSend(v51, sel_stringFromPersonNameComponents_, v52);

              uint64_t v54 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v56 = v55;

              (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
              __dst[0] = v54;
              __dst[1] = v56;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol.localizedUppercase.getter();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              outlined destroy of PushToTalkNotice((uint64_t)v144, (void (*)(void))type metadata accessor for Participant);
              outlined destroy of SystemUpdateNotice?((uint64_t)v152, &demangling cache variable for type metadata for Participant?);
              goto LABEL_25;
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
        uint64_t v68 = (uint64_t)v144;
        uint64_t v69 = (uint64_t)v150;
        _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v144, (uint64_t)v150, (void (*)(void))type metadata accessor for Participant);
        swift_retain();
        ParticipantContactDetailsCache.contactDetails(for:)();
        id v70 = __dst[0];
        v142[1] = __dst[6];
        os_log_type_t v71 = (int *)__dst[0];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v153 = v71;

        swift_release();
        outlined destroy of PushToTalkNotice(v69, (void (*)(void))type metadata accessor for Participant);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of PushToTalkNotice(v68, (void (*)(void))type metadata accessor for Participant);
        outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for Participant?);
        if (v70)
        {
          uint64_t v72 = type metadata accessor for PersonNameComponents();
          uint64_t v152 = (objc_class *)v142;
          uint64_t v150 = *(void (***)(char *, uint64_t))(v72 - 8);
          MEMORY[0x1F4188790](v72);
          uint64_t v74 = (char *)v142 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v75 = v153;
          id v76 = objc_msgSend(v153, sel_givenName);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v77 = objc_msgSend(v75, sel_familyName);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
          MEMORY[0x1F4188790](v78 - 8);
          __swift_storeEnumTagSinglePayload((uint64_t)v142 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v72);
          PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
          uint64_t v144 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
          id v80 = objc_msgSend(self, sel_conversationKit);
          v165._object = (void *)0xE000000000000000;
          v81._object = (void *)0x80000001C3798B70;
          v81._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
          v82.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
          v82.value._object = (void *)0xEF74694B6E6F6974;
          v83._uint64_t countAndFlagsBits = 0;
          v83._object = (void *)0xE000000000000000;
          v165._uint64_t countAndFlagsBits = 0;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v81, v82, (NSBundle)v80, v83, v165);

          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v84 = swift_allocObject();
          *(_OWORD *)(v84 + 16) = v143;
          id v85 = self;
          Class v86 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v87 = objc_msgSend(v85, sel_localizedStringFromPersonNameComponents_style_options_, v86, 1, 0);

          uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v90 = v89;

          *(void *)(v84 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v84 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v84 + 32) = v88;
          *(void *)(v84 + 40) = v90;
          uint64_t v91 = String.init(format:_:)();
          uint64_t v93 = v92;
          uint64_t v41 = &selRef_ringButton;
          swift_bridgeObjectRelease();
          v94._uint64_t countAndFlagsBits = v91;
          v94._object = v93;
          Class v42 = NSMutableAttributedString.__allocating_init(string:)(v94).super.super.isa;

          v150[1](v74, v72);
          goto LABEL_26;
        }
LABEL_25:
        Class v42 = 0;
        uint64_t v41 = &selRef_ringButton;
        goto LABEL_26;
      }

      a2 = v155;
    }
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  __swift_project_value_buffer(v57, (uint64_t)static Logger.conversationControls);
  id v58 = a1;
  char v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    v159[0] = v62;
    uint64_t v155 = a2;
    *(_DWORD *)uint64_t v61 = 136315138;
    unint64_t v154 = v61 + 4;
    __dst[0] = (id)v17();
    __dst[1] = v63;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Call);
    uint64_t v64 = String.init<A>(reflecting:)();
    __dst[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v159);
    a2 = v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v59, v60, "Failed to acquire video message call again recipe for call %s", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v62, -1, -1);
    MEMORY[0x1C87760E0](v61, -1, -1);
  }
  else
  {
  }
  uint64_t v66 = type metadata accessor for ConversationControlsRecipe();
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v66);
}

uint64_t ConversationControlsRecipeGenerator.collaborationHUDRecipe(controlsManager:alternateAppearance:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ForegroundCollaborationState(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for StagedCollaboration(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 280))() & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))();
  if (!v13) {
    goto LABEL_9;
  }
  unint64_t v67 = v13;
  uint64_t v14 = (char *)(*(uint64_t (**)(void))((*v12 & *a1) + 0x778))();
  if (!v14)
  {

    goto LABEL_9;
  }
  uint64_t v66 = v14;
  (*(void (**)(void))((*v12 & *a1) + 0x7D8))();
  if (swift_getEnumCaseMultiPayload())
  {

    outlined destroy of PushToTalkNotice((uint64_t)v8, (void (*)(void))type metadata accessor for ForegroundCollaborationState);
LABEL_9:
    uint64_t v15 = type metadata accessor for ConversationControlsRecipe();
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v15);
  }
  outlined init with take of ConversationControlsAction((uint64_t)v8, (uint64_t)v11, (void (*)(void))type metadata accessor for StagedCollaboration);
  id v17 = ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:usingAlternateApperance:)((uint64_t)v66, v67, a1, a2 & 1);
  uint64_t v19 = v18;
  unint64_t v65 = v20;
  type metadata accessor for ConversationControlsManager(0);
  id v21 = *(id *)&v11[*(int *)(v9 + 40)];
  id v22 = SWShareableContent.collaborationInitiator.getter();

  id v23 = &v11[*(int *)(v9 + 28)];
  unsigned __int8 v24 = *(void **)v23;
  uint64_t v25 = (void *)*((void *)v23 + 1);
  swift_bridgeObjectRetain();
  os_log_type_t v63 = v24;
  static ConversationControlsManager.collaborationHUDStrings(initiator:itemTitle:)();
  id v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;

  swift_bridgeObjectRelease();
  if (a2)
  {
    id v62 = v27;
    if (one-time initialization token for bundleIDToItemType != -1) {
      swift_once();
    }
    uint64_t v32 = *(void *)&v66[OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier];
    uint64_t v33 = *(void *)&v66[OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier + 8];
    swift_beginAccess();
    uint64_t v34 = static AppLaunchNotice.bundleIDToItemType;
    swift_bridgeObjectRetain();
    uint64_t v35 = specialized Dictionary.subscript.getter(v32, v33, v34);
    uint64_t v37 = v36;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v37)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1C3769620;
      id v39 = objc_msgSend(self, sel_conversationKit);
      id v61 = v17;
      id v40 = v39;
      v78._object = (void *)0xE000000000000000;
      v41._uint64_t countAndFlagsBits = v35;
      v41._object = v37;
      v42.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v42.value._object = (void *)0xEF74694B6E6F6974;
      v43._uint64_t countAndFlagsBits = 0;
      v43._object = (void *)0xE000000000000000;
      v78._uint64_t countAndFlagsBits = 0;
      Swift::String v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, (NSBundle)v40, v43, v78);
      Class isa = (Class)v31;

      id v17 = v61;
      *(Swift::String *)(v38 + 32) = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = (void **)v38;
    }
    id v27 = v62;
    if (v25)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v27 = v63;
      uint64_t v29 = v25;
    }
  }
  uint64_t v68 = 11;
  long long v69 = 0u;
  long long v70 = 0u;
  char v71 = 6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v62 = v19;
  swift_bridgeObjectRetain();
  id v61 = v17;
  v45._uint64_t countAndFlagsBits = (uint64_t)v27;
  os_log_type_t v63 = v29;
  v45._object = v29;
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v45).super.super.isa;
  uint64_t v46 = (char *)v31[2];
  uint64_t v47 = MEMORY[0x1E4FBC860];
  uint64_t v64 = v19;
  if (v46)
  {
    uint64_t v74 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v48 = v31 + 5;
    do
    {
      uint64_t v49 = (uint64_t)*(v48 - 1);
      id v50 = *v48;
      swift_bridgeObjectRetain();
      v51._uint64_t countAndFlagsBits = v49;
      v51._object = v50;
      NSMutableAttributedString.__allocating_init(string:)(v51);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v48 += 2;
      --v46;
    }
    while (v46);
    uint64_t v47 = v74;
    swift_bridgeObjectRelease();
  }
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  v59[1] = v59;
  MEMORY[0x1F4188790](v52 - 8);
  uint64_t v54 = (char *)v59 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v54, 1, 1, v55);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1C37696D0;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v72);
  uint64_t v74 = v56;
  long long v75 = v72[0];
  long long v76 = v72[1];
  char v77 = v73 | 0x80;
  uint64_t v57 = a3;
  id v58 = v61;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v68, 0, v61, v64, v65, isa, v47, 0, v57, 0, 0, (uint64_t)v54, OS_LOG_TYPE_DEFAULT, 0, 1, 2, (uint8_t *)&v74, 0, 0,
    0xFFu);

  outlined destroy of PushToTalkNotice((uint64_t)v11, (void (*)(void))type metadata accessor for StagedCollaboration);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ConversationControlsRecipeGenerator.shareNameAndPhotoRecipe(nameAndPhotoUtilities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v7 = objc_msgSend(self, sel_conversationKit);
  v38._object = (void *)0xE000000000000000;
  v8._object = (void *)0x80000001C3798600;
  v8._uint64_t countAndFlagsBits = 0xD000000000000021;
  v9.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v9.value._object = (void *)0xEF74694B6E6F6974;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v38._uint64_t countAndFlagsBits = 0;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v38);

  v12.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v11).super.super.isa;
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC15ConversationKit21NameAndPhotoUtilities_personalDisplayName);
  swift_beginAccess();
  uint64_t v14 = (void *)v13[1];
  if (v14)
  {
    uint64_t v15 = *v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1C3769830;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v15;
    v17._object = v14;
    *(NSMutableAttributedString *)(v16 + 32) = NSMutableAttributedString.__allocating_init(string:)(v17);
    uint64_t v34 = v16;
    specialized Array._endMutation()();
    uint64_t v18 = v34;
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
  swift_storeEnumTagMultiPayload();
  unint64_t v20 = (void **)(a1 + OBJC_IVAR____TtC15ConversationKit21NameAndPhotoUtilities_personalAvatarView);
  swift_beginAccess();
  id v21 = *v20;
  if (v21) {
    id v22 = objc_msgSend(v21, sel_hash);
  }
  else {
    id v22 = 0;
  }
  uint64_t v30 = 13;
  long long v31 = 0u;
  long long v32 = 0u;
  char v33 = 6;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v26);
  uint64_t v34 = v19;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v30, 0, v21, 0, (unint64_t)v22, v12.super.super.isa, v18, 0, (uint64_t)v6, 0, 0, (uint64_t)v25, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v34, 0, 0,
    0xFFu);
  uint64_t v27 = type metadata accessor for ConversationControlsRecipe();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v27) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v28 = 1;
  }
  else
  {
    outlined init with take of ConversationControlsAction((uint64_t)v6, a2, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    uint64_t v28 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a2, v28, 1, v27);
}

uint64_t ConversationControlsRecipeGenerator.shareNameRecipe(nameAndPhotoUtilities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v7 = objc_msgSend(self, sel_conversationKit);
  v36._object = (void *)0xE000000000000000;
  v8._object = (void *)0x80000001C37985E0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000017;
  v9.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v9.value._object = (void *)0xEF74694B6E6F6974;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v36._uint64_t countAndFlagsBits = 0;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v36);

  v12.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v11).super.super.isa;
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC15ConversationKit21NameAndPhotoUtilities_personalDisplayName);
  swift_beginAccess();
  uint64_t v14 = (void *)v13[1];
  if (v14)
  {
    uint64_t v15 = *v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1C3769830;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v15;
    v17._object = v14;
    *(NSMutableAttributedString *)(v16 + 32) = NSMutableAttributedString.__allocating_init(string:)(v17);
    uint64_t v32 = v16;
    specialized Array._endMutation()();
    uint64_t v18 = v32;
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v19;
  long long v33 = 0u;
  long long v34 = 0u;
  char v35 = 0;
  uint64_t v28 = 14;
  long long v29 = 0u;
  long long v30 = 0u;
  char v31 = 6;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v20 - 8);
  id v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 1, 1, v23);
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v28, 0, 0, 0, 0, v12.super.super.isa, v18, 0, (uint64_t)v6, 0, 0, (uint64_t)v22, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v32, 0, 0,
    0xFFu);
  uint64_t v24 = type metadata accessor for ConversationControlsRecipe();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v24) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v25 = 1;
  }
  else
  {
    outlined init with take of ConversationControlsAction((uint64_t)v6, a2, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    uint64_t v25 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a2, v25, 1, v24);
}

uint64_t ConversationControlsRecipeGenerator.incomingNameUpdateRecipe(nameAndPhotoUtilities:controlsManager:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v7 = objc_msgSend(self, sel_conversationKit);
  v55._object = (void *)0xE000000000000000;
  v8._object = (void *)0x80000001C37985C0;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v9.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v9.value._object = (void *)0xEF74694B6E6F6974;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v55._uint64_t countAndFlagsBits = 0;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v55);

  v12.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v11).super.super.isa;
  uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  NameAndPhotoUtilities.pendingIncomingName(from:)(v13, v14, v15, v16, v17, v18, v19, v20, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, v46, v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1),
    v49,
    v50,
    v51,
    v52,
    v53);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_unknownObjectRelease();
  if (v24)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1C3769830;
    v26._uint64_t countAndFlagsBits = v22;
    v26._object = v24;
    *(NSMutableAttributedString *)(v25 + 32) = NSMutableAttributedString.__allocating_init(string:)(v26);
    uint64_t v46 = v25;
    specialized Array._endMutation()();
    uint64_t v27 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
    type metadata accessor for ConversationControlsAction();
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1C3769620;
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = v28;
    long long v47 = 0u;
    long long v48 = 0u;
    LOBYTE(v49) = 0;
    uint64_t v42 = 14;
    long long v43 = 0u;
    long long v44 = 0u;
    LOBYTE(v45) = 6;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v29 - 8);
    char v31 = (char *)&v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v32 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v31, 1, 1, v32);
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v42, 0, 0, 0, 0, v12.super.super.isa, v27, 0, (uint64_t)v6, 0, 0, (uint64_t)v31, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v46, 0, 0,
      0xFFu);
    uint64_t v33 = type metadata accessor for ConversationControlsRecipe();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v33) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      uint64_t v34 = a2;
      uint64_t v35 = 1;
    }
    else
    {
      outlined init with take of ConversationControlsAction((uint64_t)v6, a2, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      uint64_t v34 = a2;
      uint64_t v35 = 0;
    }
    return __swift_storeEnumTagSinglePayload(v34, v35, 1, v33);
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationControls);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v39 = 0;
      _os_log_impl(&dword_1C2F90000, v37, v38, "Failed to create recipe for .incomingNameUpdate since failed to find pending incoming name for call", v39, 2u);
      MEMORY[0x1C87760E0](v39, -1, -1);
    }

    uint64_t v40 = type metadata accessor for ConversationControlsRecipe();
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v40);
  }
}

uint64_t ConversationControlsRecipeGenerator.liveVoicemailOngoingRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  Swift::String v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (*MEMORY[0x1E4FBC8C8] & *a1) + 624;
  NSMutableAttributedString v12 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  ((void (*)(uint64_t))v12)(v8);
  uint64_t v14 = v13;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v14) = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 136))(ObjectType, v14);
  swift_unknownObjectRelease();
  if ((v14 & 1) == 0)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationControls);
    uint64_t v29 = a1;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      v75[0] = v70;
      uint64_t v71 = a2;
      uint64_t v72 = v7;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v33 = v12();
      swift_getObjectType();
      v74[0] = v33;
      uint64_t v34 = String.init<A>(describing:)();
      v74[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v75);
      a2 = v71;
      uint64_t v7 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v30, v31, "liveVoicemailOngoingRecipe: No call in Live Voicemail, call: %s", v32, 0xCu);
      uint64_t v36 = v70;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v36, -1, -1);
      MEMORY[0x1C87760E0](v32, -1, -1);
    }
    else
    {
    }
    uint64_t v26 = a2;
    uint64_t v27 = v7;
    return __swift_storeEnumTagSinglePayload(v26, 1, 1, v27);
  }
  if (SBUIIsSystemApertureEnabled())
  {
    uint64_t v70 = v11;
    uint64_t v71 = a2;
    v75[0] = 21;
    memset(&v75[1], 0, 32);
    LOBYTE(v75[5]) = 6;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    id v16 = objc_msgSend(self, sel_conversationKit);
    v80._object = (void *)0xE000000000000000;
    v17._object = (void *)0x80000001C3798B90;
    v17._uint64_t countAndFlagsBits = 0xD000000000000019;
    v18.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v18.value._object = (void *)0xEF74694B6E6F6974;
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v80._uint64_t countAndFlagsBits = 0;
    Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v80);

    Class isa = NSMutableAttributedString.__allocating_init(string:)(v20).super.super.isa;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v22 - 8);
    uint64_t v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 1, v25);
    uint64_t v77 = 0;
    memset(v76, 0, sizeof(v76));
    char v78 = -2;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v75, 0, 0, 0, 0, isa, MEMORY[0x1E4FBC860], 0, (uint64_t)v6, 0, 0, (uint64_t)v24, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)v76, 0, 0,
      0xFFu);
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      uint64_t v26 = v71;
      uint64_t v27 = v7;
      return __swift_storeEnumTagSinglePayload(v26, 1, 1, v27);
    }
    outlined init with take of ConversationControlsAction((uint64_t)v6, (uint64_t)v10, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    (*(void (**)(void *__return_ptr, void, void, void *))(**(void **)(v72 + 24) + 112))(v73, 0, 0, a1);
    id v39 = (void *)v73[0];
    uint64_t v38 = v73[1];
    uint64_t v40 = v7;
    Swift::String v41 = (void *)v73[2];
    uint64_t v42 = v73[3];
    uint64_t v68 = (char *)v73[5];
    uint64_t v69 = v73[4];
    uint64_t v43 = v73[7];
    outlined init with take of ConversationControlsRecipe?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for SystemApertureIcon?);
    if (v74[7])
    {
      memcpy(v75, v74, sizeof(v75));
      uint64_t v44 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
      uint64_t v72 = v40;
      uint64_t v45 = v44;
      uint64_t v66 = v42;
      uint64_t v67 = v43;
      uint64_t v46 = v42;
      uint64_t v47 = v38;
      uint64_t v48 = v12();
      uint64_t v50 = v49;
      uint64_t v51 = v41;
      id v52 = objc_msgSend(self, sel_clearColor);
      uint64_t v53 = swift_getObjectType();
      uint64_t v54 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v48, 0, 0, v52, v45, v53, v50);
      id v55 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIncomingCallLeadingView());
      uint64_t v70 = (uint64_t)SystemApertureIncomingCallLeadingView.init(avatar:)(v54);
      uint64_t v56 = (objc_class *)type metadata accessor for SystemApertureIconView();
      id v57 = objc_allocWithZone(v56);
      uint64_t v58 = v69;
      LOBYTE(v52) = v68 & 1;
      outlined copy of SystemApertureIconAsset(v39, v47, v51, v46, v69, v68 & 1);
      swift_bridgeObjectRetain();
      uint64_t v68 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v75, 0);
      id v59 = objc_allocWithZone(v56);
      outlined copy of SystemApertureIconAsset(v39, v47, v51, v66, v58, (char)v52);
      swift_bridgeObjectRetain();
      os_log_type_t v60 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v75, 0);
      id v61 = objc_allocWithZone(v56);
      id v62 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v75, 1);
      os_log_type_t v63 = &v10[*(int *)(v72 + 72)];
      outlined consume of SystemApertureElement?(*(void **)v63, *((void *)v63 + 1), *((void **)v63 + 2), *((void *)v63 + 3), *((void **)v63 + 4), *((void *)v63 + 5), *((void **)v63 + 6));
      *(void *)os_log_type_t v63 = v70;
      *((void *)v63 + 1) = &protocol witness table for SystemApertureIncomingCallLeadingView;
      *((void *)v63 + 2) = v68;
      *((void *)v63 + 3) = &protocol witness table for SystemApertureIconView;
      *((void *)v63 + 4) = v60;
      *((void *)v63 + 5) = &protocol witness table for SystemApertureIconView;
      *((void *)v63 + 6) = v62;
      *((void *)v63 + 7) = &protocol witness table for SystemApertureIconView;
      *((void *)v63 + 8) = 3;
      v63[72] = 0x80;
      uint64_t v40 = v72;
    }
    uint64_t v64 = v71;
    _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v10, v71, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    __swift_storeEnumTagSinglePayload(v64, 0, 1, v40);
    return outlined destroy of PushToTalkNotice((uint64_t)v10, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
  else
  {
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
  }
}

uint64_t ConversationControlsRecipeGenerator.incomingGreenTea3PHUDRecipe(controlsManager:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  Swift::String v10 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  NSMutableAttributedString v12 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x270);
  uint64_t v121 = a1;
  uint64_t v13 = v12(v8);
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    id v115 = v6;
    uint64_t v106 = v10;
    uint64_t v117 = v7;
    swift_unknownObjectRetain();
    id v16 = specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(v15);
    uint64_t v116 = v17;
    uint64_t v118 = v18;
    swift_unknownObjectRelease();
    if (v16) {
      id v19 = v16;
    }
    id v20 = objc_msgSend(self, sel_clearColor);
    uint64_t v109 = v13;
    swift_unknownObjectRetain();
    char v119 = v16;
    uint64_t v21 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v15, 0, v16, v20);
    id v22 = objc_msgSend(v15, sel_uniqueProxyIdentifierUUID);
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v24 = *(void *)(v23 - 8);
    MEMORY[0x1F4188790](v23);
    uint64_t v26 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = (char *)(*(uint64_t (**)(char *))((*v11 & *v21) + 0x58))(v26);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    id v108 = v21;
    id v28 = objc_msgSend(v21, sel_view);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    id v29 = objc_msgSend(v15, sel_displayName);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    v33._id countAndFlagsBits = v30;
    v33._object = v32;
    v34.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v33).super.super.isa;
    id v35 = objc_msgSend(v15, sel_remoteParticipantHandles);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    uint64_t v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v37 = specialized Set.count.getter(v36);
    swift_bridgeObjectRelease();
    id v38 = objc_msgSend(self, sel_conversationKit);
    uint64_t v110 = a2;
    uint64_t v114 = v27;
    unint64_t v105 = 0xE000000000000000;
    if (v37 < 2)
    {
      unint64_t v40 = 0x80000001C3798BB0;
      unint64_t v39 = 0xD000000000000011;
    }
    else
    {
      unint64_t v39 = 0x4145544E45455247;
      unint64_t v40 = 0xEF4E494F4A5F5033;
    }
    v42.value._id countAndFlagsBits = 0x61737265766E6F43;
    v42.value._object = (void *)0xEF74694B6E6F6974;
    v43._id countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    uint64_t v44 = 0;
    Swift::String v45 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v39, v42, (NSBundle)v38, v43, *(Swift::String *)(&v105 - 1));
    object = v45._object;
    id countAndFlagsBits = (id)v45._countAndFlagsBits;

    uint64_t v127 = 22;
    long long v128 = 0u;
    long long v129 = 0u;
    char v130 = 6;
    id v107 = v28;
    uint64_t v46 = v34.super.super.isa;
    uint64_t v113 = ConversationControlsRecipeGenerator.callTypeSubtitles(for:)(v121);
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v47 - 8);
    uint64_t v49 = (char *)&v106 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v49, 1, 1, v50);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
    uint64_t v51 = *(void *)(type metadata accessor for ConversationControlsAction() - 8);
    uint64_t v52 = *(void *)(v51 + 72);
    uint64_t v53 = v28;
    unint64_t v54 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_1C37696D0;
    swift_storeEnumTagMultiPayload();
    uint64_t v56 = (void *)(v55 + v54 + v52);
    id v57 = object;
    *uint64_t v56 = countAndFlagsBits;
    v56[1] = v57;
    swift_storeEnumTagMultiPayload();
    static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v122);
    uint64_t v135 = v55;
    long long v136 = v122[0];
    long long v137 = v122[1];
    char v138 = v123 | 0x80;
    uint64_t v58 = (uint64_t)v115;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v127, 0, v53, 0, (unint64_t)v114, v46, v113, 0, (uint64_t)v115, 0, 0, (uint64_t)v49, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v135, 0, 0,
      0xFFu);
    uint64_t v59 = v117;
    if (__swift_getEnumTagSinglePayload(v58, 1, v117) == 1)
    {
      swift_unknownObjectRelease();
      outlined consume of (icon: UIImage, accessibilityLabel: String)?(v119);

      outlined destroy of SystemUpdateNotice?(v58, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v110, 1, 1, v59);
    }
    uint64_t v60 = (uint64_t)v106;
    outlined init with take of ConversationControlsAction(v58, (uint64_t)v106, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    if (SBUIIsSystemApertureEnabled())
    {
      (*(void (**)(void *__return_ptr, void, void, char *))(**((void **)v120 + 3) + 112))(v124, 0, 0, v121);
      id v61 = (void *)v124[0];
      uint64_t v62 = v124[1];
      uint64_t v64 = (void *)v124[2];
      uint64_t v63 = v124[3];
      uint64_t v65 = v124[4];
      uint64_t v121 = (char *)v124[5];
      uint64_t v66 = v124[7];
      outlined init with take of ConversationControlsRecipe?((uint64_t)v124, (uint64_t)v125, &demangling cache variable for type metadata for SystemApertureIcon?);
      if (v125[7])
      {
        memcpy(v126, v125, sizeof(v126));
        if (v119)
        {
          id v115 = (char *)v63;
          uint64_t v113 = v66;
          uint64_t v67 = one-time initialization token for conversationControls;
          uint64_t v68 = v119;
          swift_bridgeObjectRetain();
          if (v67 != -1) {
            swift_once();
          }
          uint64_t v120 = v46;
          uint64_t v69 = type metadata accessor for Logger();
          __swift_project_value_buffer(v69, (uint64_t)static Logger.conversationControls);
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v70, v71))
          {
            uint64_t v72 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v72 = 0;
            _os_log_impl(&dword_1C2F90000, v70, v71, "incomingGreenTea3PHUD: [SystemAperture] showing content", v72, 2u);
            MEMORY[0x1C87760E0](v72, -1, -1);
          }

          char v73 = v119;
          uint64_t v127 = (uint64_t)v119;
          long long v128 = 0u;
          long long v129 = 0u;
          char v130 = 0;
          uint64_t v131 = v116;
          uint64_t v132 = v118;
          char v133 = 1;
          uint64_t v134 = 0;
          uint64_t v74 = (objc_class *)type metadata accessor for SystemApertureIconView();
          id v75 = objc_allocWithZone(v74);
          id countAndFlagsBits = v68;
          swift_bridgeObjectRetain();
          outlined copy of SystemApertureIconAsset(v73, 0, 0, 0, 0, 0);
          swift_bridgeObjectRetain();
          uint64_t v114 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)&v127, 0);
          id v76 = objc_allocWithZone(v74);
          LOBYTE(v73) = v121 & 1;
          uint64_t v77 = (uint64_t)v115;
          outlined copy of SystemApertureIconAsset(v61, v62, v64, (uint64_t)v115, v65, v121 & 1);
          swift_bridgeObjectRetain();
          uint64_t v121 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v126, 0);
          id v78 = objc_allocWithZone(v74);
          outlined copy of SystemApertureIconAsset(v61, v62, v64, v77, v65, (char)v73);
          swift_bridgeObjectRetain();
          uint64_t v79 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v126, 0);
          id v80 = objc_allocWithZone(v74);
          Swift::String v81 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v126, 1);
          Swift::String_optional v82 = v119;
          outlined consume of SystemApertureIconAsset(v119, 0, 0, 0, 0, 0);

          swift_bridgeObjectRelease_n();
          outlined consume of (icon: UIImage, accessibilityLabel: String)?(v82);
          swift_unknownObjectRelease();
          uint64_t v83 = v117;
          uint64_t v84 = (uint64_t)v106;
          id v85 = &v106[*(int *)(v117 + 72)];
          outlined consume of SystemApertureElement?(*(void **)v85, *((void *)v85 + 1), *((void **)v85 + 2), *((void *)v85 + 3), *((void **)v85 + 4), *((void *)v85 + 5), *((void **)v85 + 6));
          *(void *)id v85 = v114;
          *((void *)v85 + 1) = &protocol witness table for SystemApertureIconView;
          *((void *)v85 + 2) = v121;
          *((void *)v85 + 3) = &protocol witness table for SystemApertureIconView;
          *((void *)v85 + 4) = v79;
          *((void *)v85 + 5) = &protocol witness table for SystemApertureIconView;
          *((void *)v85 + 6) = v81;
          *((void *)v85 + 7) = &protocol witness table for SystemApertureIconView;
          *((void *)v85 + 8) = 4;
          v85[72] = 1;
          uint64_t v86 = v110;
          _s15ConversationKit11ParticipantVWOcTm_3(v84, v110, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          __swift_storeEnumTagSinglePayload(v86, 0, 1, v83);
          uint64_t v87 = v84;
          return outlined destroy of PushToTalkNotice(v87, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        }
        id v98 = v46;
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v99 = type metadata accessor for Logger();
        __swift_project_value_buffer(v99, (uint64_t)static Logger.conversationControls);
        Swift::String_optional v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.default.getter();
        BOOL v102 = os_log_type_enabled(v100, v101);
        uint64_t v95 = v110;
        id v103 = v107;
        if (v102)
        {
          uint64_t v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v104 = 0;
          _os_log_impl(&dword_1C2F90000, v100, v101, "incomingGreenTea3PHUD: [SystemAperture] missing app badge icon", v104, 2u);
          MEMORY[0x1C87760E0](v104, -1, -1);

          outlined retain of SystemApertureIcon?(v124, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
          swift_unknownObjectRelease();

          Swift::String_optional v100 = v98;
        }
        else
        {

          swift_unknownObjectRelease();
          outlined retain of SystemApertureIcon?(v124, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
        }
      }
      else
      {
        uint64_t v90 = v46;
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v91 = type metadata accessor for Logger();
        __swift_project_value_buffer(v91, (uint64_t)static Logger.conversationControls);
        uint64_t v92 = Logger.logObject.getter();
        os_log_type_t v93 = static os_log_type_t.error.getter();
        BOOL v94 = os_log_type_enabled(v92, v93);
        uint64_t v95 = v110;
        id v96 = v107;
        if (v94)
        {
          NSMutableAttributedString v97 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)NSMutableAttributedString v97 = 0;
          _os_log_impl(&dword_1C2F90000, v92, v93, "incomingGreenTea3PHUD: [SystemAperture] missing status icon", v97, 2u);
          MEMORY[0x1C87760E0](v97, -1, -1);

          outlined consume of (icon: UIImage, accessibilityLabel: String)?(v119);
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          outlined consume of (icon: UIImage, accessibilityLabel: String)?(v119);
        }
      }
      _s15ConversationKit11ParticipantVWOcTm_3(v60, v95, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      uint64_t v89 = v95;
    }
    else
    {
      swift_unknownObjectRelease();
      outlined consume of (icon: UIImage, accessibilityLabel: String)?(v119);

      uint64_t v88 = v110;
      _s15ConversationKit11ParticipantVWOcTm_3(v60, v110, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      uint64_t v89 = v88;
    }
    __swift_storeEnumTagSinglePayload(v89, 0, 1, v59);
    uint64_t v87 = v60;
    return outlined destroy of PushToTalkNotice(v87, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
  swift_unknownObjectRelease();
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
}

uint64_t ConversationControlsRecipeGenerator.ongoingGreenTea3PHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v169 = (uint64_t)v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  NSMutableAttributedString v12 = (uint64_t (*)())((char *)v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (*MEMORY[0x1E4FBC8C8] & *a1) + 624;
  char v157 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  uint64_t v14 = v157(v10);
  self;
  uint64_t v15 = swift_dynamicCastObjCClass();
  if (v15)
  {
    uint64_t v23 = (void *)v15;
    uint64_t v167 = v9;
    ConversationControlsManager.heldCalls()(v15, v16, v17, v18, v19, v20, v21, v22, v153[0], v13, v154, v155, v156, (uint64_t)v157, v14, v158, (uint64_t)v159, (uint64_t)v160, v161,
      (uint64_t)v162,
      v163,
      v164);
    unint64_t v25 = v24;
    unint64_t v26 = v24 >> 62;
    uint64_t v158 = a2;
    int v156 = v12;
    unint64_t v154 = v6;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v28 = v3;
    id v29 = ConversationControlsRecipeGenerator.ongoingGreenTea3PLeadingAccessoryView(controlsManager:hasHeldCalls:)(a1, v27 > 0);
    long long v168 = v30;
    unint64_t v166 = v31;
    uint64_t v155 = v28;
    ConversationControlsRecipeGenerator.ongoingGreenTea3PActions(controlsManager:hasHeldCalls:)(a1, v27 > 0, (uint64_t)v170);
    uint64_t v32 = (void *)v170[0];
    uint64_t v163 = v170[2];
    uint64_t v164 = v170[1];
    uint64_t v161 = v170[4];
    long long v162 = (void *)v170[3];
    LODWORD(v160) = v171;
    unsigned int v33 = objc_msgSend(v23, sel_status);
    Swift::String v165 = v32;
    if (v33 == 2)
    {
      swift_bridgeObjectRelease();
      id v34 = objc_msgSend(v23, sel_displayName);
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v159 = v36;

      id v37 = objc_msgSend(v23, sel_provider);
      id v38 = objc_msgSend(v37, sel_localizedName);

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      uint64_t v175 = v39;
      *(void *)&long long v176 = v41;
      swift_bridgeObjectRetain();
      v42._id countAndFlagsBits = 2108704;
      v42._object = (void *)0xE300000000000000;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v175;
      uint64_t v44 = v176;
      id v45 = objc_msgSend(self, sel_conversationKit);
      v186._object = (void *)0xE000000000000000;
      v46._object = (void *)0x80000001C3798BD0;
      v46._id countAndFlagsBits = 0xD000000000000012;
      v47.value._id countAndFlagsBits = 0x61737265766E6F43;
      v47.value._object = (void *)0xEF74694B6E6F6974;
      v48._id countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      v186._id countAndFlagsBits = 0;
      Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v186);

      uint64_t v175 = v43;
      *(void *)&long long v176 = v44;
      uint64_t v50 = v35;
      swift_bridgeObjectRetain();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      uint64_t v73 = v175;
      uint64_t v72 = (void *)v176;
      goto LABEL_18;
    }
    if (v27 >= 1)
    {
      if (v26)
      {
        swift_bridgeObjectRetain();
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v74) {
          goto LABEL_12;
        }
      }
      else if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_12:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v25 & 0xC000000000000001) == 0, v25);
        if ((v25 & 0xC000000000000001) != 0) {
          id v52 = (id)MEMORY[0x1C87744F0](0, v25);
        }
        else {
          id v52 = *(id *)(v25 + 32);
        }
        uint64_t v53 = v52;
        swift_bridgeObjectRelease();
        id v54 = objc_msgSend(v23, sel_displayName);
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v57 = v56;

        uint64_t v175 = v55;
        *(void *)&long long v176 = v57;
        swift_bridgeObjectRetain();
        v58._id countAndFlagsBits = 2108704;
        v58._object = (void *)0xE300000000000000;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        uint64_t v59 = v175;
        uint64_t v159 = (uint64_t (*)(uint64_t))v176;
        id v60 = objc_msgSend(v53, sel_displayName);
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        uint64_t v175 = v61;
        *(void *)&long long v176 = v63;
        swift_bridgeObjectRetain();
        v64._id countAndFlagsBits = 2108704;
        v64._object = (void *)0xE300000000000000;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        uint64_t v65 = v175;
        uint64_t v66 = v176;
        id v67 = objc_msgSend(self, sel_conversationKit);
        v187._object = (void *)0xE000000000000000;
        v68._object = (void *)0x80000001C3798BD0;
        v68._id countAndFlagsBits = 0xD000000000000012;
        v69.value._id countAndFlagsBits = 0x61737265766E6F43;
        v69.value._object = (void *)0xEF74694B6E6F6974;
        v70._id countAndFlagsBits = 0;
        v70._object = (void *)0xE000000000000000;
        v187._id countAndFlagsBits = 0;
        Swift::String v71 = NSLocalizedString(_:tableName:bundle:value:comment:)(v68, v69, (NSBundle)v67, v70, v187);

        uint64_t v175 = v65;
        *(void *)&long long v176 = v66;
        uint64_t v50 = v59;
        swift_bridgeObjectRetain();
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v73 = v175;
        uint64_t v72 = (void *)v176;
LABEL_18:
        uint64_t v175 = 23;
        long long v176 = 0u;
        long long v177 = 0u;
        char v178 = 6;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        uint64_t v83 = v29;
        uint64_t v84 = v29;
        id v85 = v168;
        unint64_t v86 = v166;
        outlined copy of ConversationControlsRecipe.View?(v83, v168);
        v87._id countAndFlagsBits = v50;
        v87._object = v159;
        Class isa = NSMutableAttributedString.__allocating_init(string:)(v87).super.super.isa;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v89 = swift_allocObject();
        *(_OWORD *)(v89 + 16) = xmmword_1C3769830;
        v90._id countAndFlagsBits = v73;
        v90._object = v72;
        *(NSMutableAttributedString *)(v89 + 32) = NSMutableAttributedString.__allocating_init(string:)(v90);
        v174[0] = v89;
        specialized Array._endMutation()();
        uint64_t v91 = v174[0];
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        MEMORY[0x1F4188790](v92 - 8);
        BOOL v94 = (char *)v153 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v95 = type metadata accessor for AttributedString();
        __swift_storeEnumTagSinglePayload((uint64_t)v94, 1, 1, v95);
        v183[0] = v165;
        v183[1] = v164;
        v183[2] = v163;
        v183[3] = v162;
        v183[4] = v161;
        char v184 = (char)v160;
        uint64_t v96 = v169;
        ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v175, 0, v84, v85, v86, isa, v91, 0, v169, 0, 0, (uint64_t)v94, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)v183, 0, 0,
          0xFFu);
        uint64_t v97 = v167;
        if (__swift_getEnumTagSinglePayload(v96, 1, v167) == 1)
        {
          outlined consume of ConversationControlsRecipe.View?(v84, v85);
          swift_unknownObjectRelease();
          outlined destroy of SystemUpdateNotice?(v96, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          return __swift_storeEnumTagSinglePayload(v158, 1, 1, v97);
        }
        Swift::String v165 = v84;
        id v98 = v156;
        outlined init with take of ConversationControlsAction(v96, (uint64_t)v156, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        if (!SBUIIsSystemApertureEnabled())
        {
          outlined consume of ConversationControlsRecipe.View?(v165, v85);
          swift_unknownObjectRelease();
          uint64_t v135 = v158;
          _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v98, v158, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          __swift_storeEnumTagSinglePayload(v135, 0, 1, v97);
          uint64_t v134 = (uint64_t)v98;
          return outlined destroy of PushToTalkNotice(v134, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        }
        (*(void (**)(void *__return_ptr, void, void, void *))(*(void *)v155[3] + 112))(v172, 0, 0, a1);
        uint64_t v99 = (void *)v172[0];
        uint64_t v100 = v172[1];
        BOOL v102 = (void *)v172[2];
        uint64_t v101 = v172[3];
        uint64_t v103 = v172[4];
        uint64_t v169 = v172[5];
        uint64_t v104 = v172[7];
        outlined init with take of ConversationControlsRecipe?((uint64_t)v172, (uint64_t)v173, &demangling cache variable for type metadata for SystemApertureIcon?);
        if (v173[7])
        {
          uint64_t v163 = v103;
          uint64_t v164 = v101;
          long long v162 = v102;
          unint64_t v105 = memcpy(v174, v173, sizeof(v174));
          uint64_t v106 = v157((uint64_t)v105);
          uint64_t v108 = v107;
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v110 = (uint64_t (*)(uint64_t))specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(v106, (uint64_t)v154, ObjectType, v108);
          uint64_t v112 = v111;
          uint64_t v114 = v113;
          swift_unknownObjectRelease();
          if (v110)
          {
            uint64_t v161 = v104;
            if (one-time initialization token for conversationControls != -1) {
              swift_once();
            }
            uint64_t v115 = type metadata accessor for Logger();
            __swift_project_value_buffer(v115, (uint64_t)static Logger.conversationControls);
            uint64_t v116 = Logger.logObject.getter();
            os_log_type_t v117 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v116, v117))
            {
              uint64_t v118 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v118 = 0;
              _os_log_impl(&dword_1C2F90000, v116, v117, "ongoingGreenTea3PHUD: [SystemAperture] showing content", v118, 2u);
              MEMORY[0x1C87760E0](v118, -1, -1);
            }

            uint64_t v175 = (uint64_t)v110;
            char v157 = v110;
            long long v176 = 0u;
            long long v177 = 0u;
            char v178 = 0;
            uint64_t v179 = v112;
            long long v180 = v114;
            char v181 = 1;
            uint64_t v182 = 0;
            char v119 = (objc_class *)type metadata accessor for SystemApertureIconView();
            id v120 = objc_allocWithZone(v119);
            uint64_t v159 = v110;
            swift_bridgeObjectRetain();
            outlined copy of SystemApertureIconAsset(v110, 0, 0, 0, 0, 0);
            swift_bridgeObjectRetain();
            uint64_t v160 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)&v175, 0);
            id v121 = objc_allocWithZone(v119);
            char v122 = v169 & 1;
            char v123 = v162;
            uint64_t v124 = v163;
            uint64_t v155 = (uint64_t (**)(uint64_t, void *))v114;
            uint64_t v125 = v164;
            outlined copy of SystemApertureIconAsset(v99, v100, v162, v164, v163, v169 & 1);
            swift_bridgeObjectRetain();
            uint64_t v169 = (uint64_t)SystemApertureIconView.init(icon:isDetached:)((uint64_t)v174, 0);
            id v126 = objc_allocWithZone(v119);
            outlined copy of SystemApertureIconAsset(v99, v100, v123, v125, v124, v122);
            swift_bridgeObjectRetain();
            uint64_t v127 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v174, 0);
            id v128 = objc_allocWithZone(v119);
            long long v129 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v174, 1);
            swift_unknownObjectRelease();
            outlined consume of SystemApertureIconAsset(v157, 0, 0, 0, 0, 0);

            swift_bridgeObjectRelease_n();
            outlined consume of ConversationControlsRecipe.View?(v165, v168);
            uint64_t v130 = v167;
            uint64_t v131 = v156;
            uint64_t v132 = (char *)v156 + *(int *)(v167 + 72);
            outlined consume of SystemApertureElement?(*(void **)v132, *((void *)v132 + 1), *((void **)v132 + 2), *((void *)v132 + 3), *((void **)v132 + 4), *((void *)v132 + 5), *((void **)v132 + 6));
            *(void *)uint64_t v132 = v160;
            *((void *)v132 + 1) = &protocol witness table for SystemApertureIconView;
            *((void *)v132 + 2) = v169;
            *((void *)v132 + 3) = &protocol witness table for SystemApertureIconView;
            *((void *)v132 + 4) = v127;
            *((void *)v132 + 5) = &protocol witness table for SystemApertureIconView;
            *((void *)v132 + 6) = v129;
            *((void *)v132 + 7) = &protocol witness table for SystemApertureIconView;
            *((void *)v132 + 8) = 4;
            v132[72] = 1;
            uint64_t v133 = v158;
            _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v131, v158, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            __swift_storeEnumTagSinglePayload(v133, 0, 1, v130);
            uint64_t v134 = (uint64_t)v131;
            return outlined destroy of PushToTalkNotice(v134, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          }
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v147 = type metadata accessor for Logger();
          __swift_project_value_buffer(v147, (uint64_t)static Logger.conversationControls);
          long long v137 = Logger.logObject.getter();
          os_log_type_t v148 = static os_log_type_t.default.getter();
          BOOL v149 = os_log_type_enabled(v137, v148);
          uint64_t v140 = v158;
          char v141 = v156;
          uint64_t v150 = v168;
          if (v149)
          {
            uint64_t v151 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v151 = 0;
            _os_log_impl(&dword_1C2F90000, v137, v148, "ongoingGreenTea3PHUD: [SystemAperture] missing app badge icon", v151, 2u);
            uint64_t v152 = v151;
            uint64_t v97 = v167;
            MEMORY[0x1C87760E0](v152, -1, -1);

            swift_unknownObjectRelease();
            outlined retain of SystemApertureIcon?(v172, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
            id v145 = v165;
            uint64_t v146 = v150;
            goto LABEL_37;
          }
          outlined consume of ConversationControlsRecipe.View?(v165, v168);
          outlined retain of SystemApertureIcon?(v172, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
        }
        else
        {
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v136 = type metadata accessor for Logger();
          __swift_project_value_buffer(v136, (uint64_t)static Logger.conversationControls);
          long long v137 = Logger.logObject.getter();
          os_log_type_t v138 = static os_log_type_t.error.getter();
          BOOL v139 = os_log_type_enabled(v137, v138);
          uint64_t v140 = v158;
          char v141 = v156;
          uint64_t v142 = v168;
          if (v139)
          {
            long long v143 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)long long v143 = 0;
            _os_log_impl(&dword_1C2F90000, v137, v138, "ongoingGreenTea3PHUD: [SystemAperture] missing status icon", v143, 2u);
            uint64_t v144 = v143;
            uint64_t v97 = v167;
            MEMORY[0x1C87760E0](v144, -1, -1);

            swift_unknownObjectRelease();
            id v145 = v165;
            uint64_t v146 = v142;
LABEL_37:
            outlined consume of ConversationControlsRecipe.View?(v145, v146);
LABEL_41:
            _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v141, v140, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
            __swift_storeEnumTagSinglePayload(v140, 0, 1, v97);
            uint64_t v134 = (uint64_t)v141;
            return outlined destroy of PushToTalkNotice(v134, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          }
          outlined consume of ConversationControlsRecipe.View?(v165, v168);
        }

        swift_unknownObjectRelease();
        goto LABEL_41;
      }
    }
    swift_bridgeObjectRelease();
    id v75 = objc_msgSend(v23, sel_displayName);
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v159 = v76;

    id v77 = objc_msgSend(v23, sel_provider);
    id v78 = objc_msgSend(v77, sel_localizedName);

    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v81 = v80;

    uint64_t v175 = v79;
    *(void *)&long long v176 = v81;
    swift_bridgeObjectRetain();
    v82._id countAndFlagsBits = 2108704;
    v82._object = (void *)0xE300000000000000;
    String.append(_:)(v82);
    goto LABEL_17;
  }
  swift_unknownObjectRelease();
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v9);
}

uint64_t ConversationControlsRecipeGenerator.outgoingScreenSharingRequestHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  NSMutableAttributedString v12 = (char *)v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Participant(0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v92 - v17;
  if (!objc_msgSend(*(id *)((char *)a1 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_featureFlags), sel_requestToScreenShareEnabled))goto LABEL_9; {
  uint64_t v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))();
  }
  if (!v19) {
    goto LABEL_9;
  }
  id v20 = v19;
  if (objc_msgSend(v19, sel_state) != (id)3
    || !objc_msgSend(v20, sel_avMode)
    || (uint64_t v104 = v9,
        id v20 = v20,
        specialized Conversation.currentScreenSharingRequest(ignoring:)(),
        uint64_t v22 = v21,
        v20,
        !v22))
  {

    goto LABEL_9;
  }
  id v106 = v20;
  uint64_t v105 = a2;
  id v23 = objc_msgSend(v22, sel_handle);
  ConversationController.participant(with:)();

  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
  {

    outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for Participant?);
    a2 = v105;
LABEL_9:
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationControls);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = a2;
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v28 = 0;
      _os_log_impl(&dword_1C2F90000, v25, v26, "Cannot generate outgoing screen sharing request HUD", v28, 2u);
      id v29 = v28;
      a2 = v27;
      MEMORY[0x1C87760E0](v29, -1, -1);
    }

    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
  }
  outlined init with take of ConversationControlsAction((uint64_t)v12, (uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
  id v102 = v22;
  *(void *)&long long v101 = ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:)(v22, (uint64_t)v106, a1);
  *(void *)&long long v103 = v31;
  *(void *)&long long v100 = v32;
  id v98 = self;
  id v33 = objc_msgSend(v98, sel_conversationKit);
  v116._id object = (void *)0xE000000000000000;
  v34._id object = (void *)0x80000001C3798440;
  v34._id countAndFlagsBits = 0xD000000000000024;
  v35.value._id countAndFlagsBits = 0x61737265766E6F43;
  v35.value._id object = (void *)0xEF74694B6E6F6974;
  v36._id countAndFlagsBits = 0;
  v36._id object = (void *)0xE000000000000000;
  v116._id countAndFlagsBits = 0;
  Swift::String v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, (NSBundle)v33, v36, v116);
  id countAndFlagsBits = (id)v37._countAndFlagsBits;
  id object = v37._object;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v38 = swift_allocObject();
  long long v99 = xmmword_1C3769620;
  uint64_t v95 = (void *)v38;
  *(_OWORD *)(v38 + 16) = xmmword_1C3769620;
  uint64_t v39 = *(void **)&v18[*(int *)(v13 + 28)];
  if (!v39) {
    goto LABEL_23;
  }
  id v40 = v39;
  uint64_t v41 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v40);
  if (!v42)
  {

LABEL_23:
    _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v18, (uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    uint64_t v94 = *(void *)&v108[24];
    id v56 = *(id *)v108;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    outlined destroy of PushToTalkNotice((uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_24;
  }
  uint64_t v43 = v41;
  uint64_t v44 = v42;
  if ((objc_msgSend(v40, sel_shouldHideContact) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  id v93 = v40;
  uint64_t v94 = v43;
  uint64_t v45 = type metadata accessor for PersonNameComponents();
  v92[0] = v92;
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v44);
  Swift::String v49 = (char *)v92 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92[1] = v47;
  swift_bridgeObjectRetain();
  PersonNameComponents.init()();
  PersonNameComponents.givenName.setter();
  PersonNameComponents.familyName.setter();
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v50 = (id)static NSPersonNameComponentsFormatter.initials;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v52 = objc_msgSend(v50, sel_stringFromPersonNameComponents_, isa, v92[0]);

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
  *(void *)uint64_t v108 = v53;
  *(void *)&v108[8] = v55;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.localizedUppercase.getter();

  swift_bridgeObjectRelease();
  id v56 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = v95;
  v95[7] = MEMORY[0x1E4FBB1A0];
  v61[8] = lazy protocol witness table accessor for type String and conformance String();
  v61[4] = v58;
  v61[5] = v60;
  uint64_t v95 = (void *)String.init(format:_:)();
  uint64_t v63 = v62;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v108 = 24;
  memset(&v108[8], 0, 32);
  v108[40] = 6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id countAndFlagsBits = (id)v103;
  Swift::String v64 = (void *)v101;
  id object = (id)v101;
  id v65 = objc_msgSend(v98, sel_conversationKit);
  v117._id object = (void *)0xE000000000000000;
  v66._id countAndFlagsBits = 0x535F4E4545524353;
  v66._id object = (void *)0xEE00474E49524148;
  v67.value._id countAndFlagsBits = 0x61737265766E6F43;
  v67.value._id object = (void *)0xEF74694B6E6F6974;
  v68._id countAndFlagsBits = 0;
  v68._id object = (void *)0xE000000000000000;
  v117._id countAndFlagsBits = 0;
  Swift::String v69 = NSLocalizedString(_:tableName:bundle:value:comment:)(v66, v67, (NSBundle)v65, v68, v117);

  id v98 = NSMutableAttributedString.__allocating_init(string:)(v69).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_1C3769830;
  v71._id countAndFlagsBits = (uint64_t)v95;
  v71._id object = v63;
  *(NSMutableAttributedString *)(v70 + 32) = NSMutableAttributedString.__allocating_init(string:)(v71);
  uint64_t v112 = v70;
  specialized Array._endMutation()();
  uint64_t v95 = (void *)v112;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v72 - 8);
  uint64_t v74 = (char *)v92 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v74, 1, 1, v75);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = v99;
  swift_storeEnumTagMultiPayload();
  uint64_t v112 = v76;
  long long v113 = 0u;
  long long v114 = 0u;
  char v115 = 0;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v108, 0, v64, (void *)v103, v100, v98, (uint64_t)v95, 0, (uint64_t)v6, 0, 0, (uint64_t)v74, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v112, 0, 0,
    0xFFu);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    a2 = v105;
    id v77 = v106;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v78 = type metadata accessor for Logger();
    __swift_project_value_buffer(v78, (uint64_t)static Logger.conversationControls);
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v81 = 0;
      _os_log_impl(&dword_1C2F90000, v79, v80, "Error creating ConversationControlsRecipe for outgoing screen sharing request", v81, 2u);
      Swift::String v82 = v81;
      a2 = v105;
      MEMORY[0x1C87760E0](v82, -1, -1);
    }

    outlined destroy of PushToTalkNotice((uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
  }
  uint64_t v83 = (uint64_t)v104;
  outlined init with take of ConversationControlsAction((uint64_t)v6, (uint64_t)v104, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  int v84 = SBUIIsSystemApertureEnabled();
  id v85 = v106;
  if (v84)
  {
    ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(a1, 1, (uint64_t)v108);
    long long v107 = *(_OWORD *)v108;
    long long v103 = *(_OWORD *)&v108[16];
    long long v101 = *(_OWORD *)&v108[32];
    long long v100 = v109;
    uint64_t v86 = v110;
    char v87 = v111;

    outlined destroy of PushToTalkNotice((uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
    uint64_t v88 = v83 + *(int *)(v7 + 72);
    outlined consume of SystemApertureElement?(*(void **)v88, *(void *)(v88 + 8), *(void **)(v88 + 16), *(void *)(v88 + 24), *(void **)(v88 + 32), *(void *)(v88 + 40), *(void **)(v88 + 48));
    long long v89 = v103;
    *(_OWORD *)uint64_t v88 = v107;
    *(_OWORD *)(v88 + 16) = v89;
    long long v90 = v100;
    *(_OWORD *)(v88 + 32) = v101;
    *(_OWORD *)(v88 + 48) = v90;
    *(void *)(v88 + 64) = v86;
    *(unsigned char *)(v88 + 72) = v87;
  }
  else
  {
    outlined destroy of PushToTalkNotice((uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
  }
  uint64_t v91 = v105;
  _s15ConversationKit11ParticipantVWOcTm_3(v83, v105, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  __swift_storeEnumTagSinglePayload(v91, 0, 1, v7);
  return outlined destroy of PushToTalkNotice(v83, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t ConversationControlsRecipeGenerator.incomingScreenSharingRequestHUDRecipe(controlsManager:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void **)((char *)a1 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_featureFlags);
  if ((objc_msgSend(v18, sel_requestToScreenShareEnabled) & 1) == 0
    && !objc_msgSend(v18, sel_usesModernScreenSharingFromMessages))
  {
    goto LABEL_12;
  }
  uint64_t v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))();
  if (!v19) {
    goto LABEL_12;
  }
  id v20 = v19;
  if (objc_msgSend(v19, sel_state) != (id)3 || !objc_msgSend(v20, sel_avMode))
  {

LABEL_12:
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationControls);
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v28 = 0;
      _os_log_impl(&dword_1C2F90000, v26, v27, "Cannot generate incoming screen sharing request HUD", v28, 2u);
      MEMORY[0x1C87760E0](v28, -1, -1);
    }

    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v9);
  }
  uint64_t v72 = a2;
  id v21 = v20;
  specialized Conversation.currentScreenSharingRequest(ignoring:)();
  id v23 = v22;

  if (!v23)
  {

    goto LABEL_11;
  }
  id v71 = v21;
  *(void *)&long long v70 = v3;
  id v24 = objc_msgSend(v23, sel_handle);
  ConversationController.participant(with:)();

  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15) == 1)
  {

    outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for Participant?);
LABEL_11:
    a2 = v72;
    goto LABEL_12;
  }
  outlined init with take of ConversationControlsAction((uint64_t)v14, (uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
  id v69 = v23;
  id v30 = ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:)(v23, (uint64_t)v71, a1);
  uint64_t v61 = v30;
  uint64_t v32 = v31;
  *(void *)&long long v65 = v31;
  *(void *)&long long v66 = v33;
  type metadata accessor for ConversationControlsManager(0);
  uint64_t v34 = static ConversationControlsManager.screenShareHUDStrings(initiator:incomingRequest:)((uint64_t)v17, 1);
  Swift::String v36 = v35;
  uint64_t v63 = v37;
  uint64_t v62 = v38;
  *(void *)uint64_t v75 = 25;
  memset(&v75[8], 0, 32);
  v75[40] = 6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v67 = v32;
  id v68 = v30;
  v39._id countAndFlagsBits = v34;
  v39._id object = v36;
  *(NSMutableAttributedString *)&long long v64 = NSMutableAttributedString.__allocating_init(string:)(v39);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1C3769830;
  v41._id countAndFlagsBits = v63;
  v41._id object = v62;
  *(NSMutableAttributedString *)(v40 + 32) = NSMutableAttributedString.__allocating_init(string:)(v41);
  uint64_t v79 = v40;
  specialized Array._endMutation()();
  uint64_t v63 = v79;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  uint64_t v62 = &v60;
  MEMORY[0x1F4188790](v42 - 8);
  uint64_t v44 = (char *)&v60 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v44, 1, 1, v45);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1C37696D0;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v73);
  uint64_t v79 = v46;
  long long v80 = v73[0];
  long long v81 = v73[1];
  char v82 = v74 | 0x80;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v75, 0, v61, (void *)v65, v66, (void *)v64, v63, 0, (uint64_t)v8, 0, 0, (uint64_t)v44, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v79, 0, 0,
    0xFFu);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    a2 = v72;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationControls);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    id v51 = v71;
    if (v50)
    {
      id v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v52 = 0;
      _os_log_impl(&dword_1C2F90000, v48, v49, "Error creating ConversationControlsRecipe for incoming screen sharing request", v52, 2u);
      MEMORY[0x1C87760E0](v52, -1, -1);
    }

    outlined destroy of PushToTalkNotice((uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v9);
  }
  outlined init with take of ConversationControlsAction((uint64_t)v8, (uint64_t)v11, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  int v53 = SBUIIsSystemApertureEnabled();
  uint64_t v54 = v72;
  if (v53)
  {
    ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(a1, 65, (uint64_t)v75);
    long long v70 = *(_OWORD *)v75;
    long long v66 = *(_OWORD *)&v75[16];
    long long v65 = *(_OWORD *)&v75[32];
    long long v64 = v76;
    uint64_t v55 = v77;
    char v56 = v78;

    outlined destroy of PushToTalkNotice((uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
    uint64_t v57 = &v11[*(int *)(v9 + 72)];
    outlined consume of SystemApertureElement?(*(void **)v57, *((void *)v57 + 1), *((void **)v57 + 2), *((void *)v57 + 3), *((void **)v57 + 4), *((void *)v57 + 5), *((void **)v57 + 6));
    long long v58 = v66;
    *(_OWORD *)uint64_t v57 = v70;
    *((_OWORD *)v57 + 1) = v58;
    long long v59 = v64;
    *((_OWORD *)v57 + 2) = v65;
    *((_OWORD *)v57 + 3) = v59;
    *((void *)v57 + 8) = v55;
    v57[72] = v56;
  }
  else
  {
    outlined destroy of PushToTalkNotice((uint64_t)v17, (void (*)(void))type metadata accessor for Participant);
  }
  _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v11, v54, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  __swift_storeEnumTagSinglePayload(v54, 0, 1, v9);
  return outlined destroy of PushToTalkNotice((uint64_t)v11, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t ConversationControlsRecipeGenerator.enhancedEmergencyMediaUploadRequestRecipe(controlsManager:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  long long v81 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v6);
  uint64_t v83 = (uint64_t)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v88 = v5;
  uint64_t v89 = v6;
  uint64_t v82 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  v79[1] = __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C2F90000, v9, v10, "EnhancedEmergency: going to make recipe for enhancedEmergencyMediaUploadRequest", v11, 2u);
    MEMORY[0x1C87760E0](v11, -1, -1);
  }

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  uint64_t v12 = self;
  id v13 = objc_msgSend(v12, sel_conversationKit);
  v100._id object = (void *)0xE000000000000000;
  v14._id object = (void *)0x80000001C3798BF0;
  v14._id countAndFlagsBits = 0xD000000000000011;
  v15.value._id countAndFlagsBits = 0x61737265766E6F43;
  v15.value._id object = (void *)0xEF74694B6E6F6974;
  v16._id countAndFlagsBits = 0;
  v16._id object = (void *)0xE000000000000000;
  v100._id countAndFlagsBits = 0;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v100);

  Class isa = NSMutableAttributedString.__allocating_init(string:)(v17).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1C3769830;
  id v19 = objc_msgSend(v12, sel_conversationKit);
  v20._id countAndFlagsBits = 0xD000000000000014;
  v101._id object = (void *)0xE000000000000000;
  v20._id object = (void *)0x80000001C3798C10;
  v21.value._id countAndFlagsBits = 0x61737265766E6F43;
  v21.value._id object = (void *)0xEF74694B6E6F6974;
  v22._id countAndFlagsBits = 0;
  v22._id object = (void *)0xE000000000000000;
  v101._id countAndFlagsBits = 0;
  Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v101);

  *(NSMutableAttributedString *)(v18 + 32) = NSMutableAttributedString.__allocating_init(string:)(v23);
  __dst[0] = v18;
  specialized Array._endMutation()();
  uint64_t v86 = __dst[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1C37696D0;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v92);
  uint64_t v25 = v92[0];
  uint64_t v26 = v92[2];
  uint64_t v84 = v92[3];
  id v85 = (void *)v92[1];
  char v27 = v93;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v28 = @nonobjc UIImage.__allocating_init(systemName:)();
  if (v28)
  {
    id v29 = v28;
    id v30 = objc_msgSend(v28, sel_imageWithRenderingMode_, 2);
  }
  else
  {
    id v30 = 0;
  }
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v30);
  id v32 = objc_msgSend(self, sel_redColor);
  objc_msgSend(v31, sel_setTintColor_, v32);

  id v33 = v31;
  id v34 = objc_msgSend(v33, sel_hash);
  __dst[0] = 16;
  memset(&__dst[1], 0, 32);
  LOBYTE(__dst[5]) = 6;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v35 - 8);
  uint64_t v37 = (char *)v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v37, 1, 1, v38);
  v98[0] = v24;
  v98[1] = v25;
  v98[2] = v85;
  v98[3] = v26;
  v98[4] = v84;
  char v99 = v27 | 0x80;
  id v39 = v33;
  uint64_t v40 = isa;
  uint64_t v78 = (uint64_t)v37;
  uint64_t v41 = (uint64_t)v88;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, v33, 0, (unint64_t)v34, v40, v86, 0, (uint64_t)v88, 0, 0, v78, OS_LOG_TYPE_DEFAULT, 0, 3, 5, (uint8_t *)v98, 0, 0,
    0xFFu);
  uint64_t v42 = v89;
  if (__swift_getEnumTagSinglePayload(v41, 1, v89) == 1)
  {

    outlined destroy of SystemUpdateNotice?(v41, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    return __swift_storeEnumTagSinglePayload(v82, 1, 1, v42);
  }
  else
  {
    Class isa = (Class)v30;
    outlined init with take of ConversationControlsAction(v41, v83, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    uint64_t v44 = v81;
    (*(void (**)(void *__return_ptr, void, void, char *))(*v80[3] + 112))(v94, 0, 0, v81);
    uint64_t v45 = (void *)v94[0];
    uint64_t v46 = v94[1];
    uint64_t v47 = (void **)v94[2];
    uint64_t v88 = (char *)v94[3];
    char v48 = v95;
    uint64_t v86 = v94[4];
    outlined init with take of ConversationControlsRecipe?((uint64_t)v94, (uint64_t)v96, &demangling cache variable for type metadata for SystemApertureIcon?);
    if (v96[7])
    {
      long long v80 = v47;
      uint64_t v84 = v46;
      id v85 = v45;
      os_log_type_t v49 = memcpy(__dst, v96, sizeof(__dst));
      BOOL v50 = *(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *(void *)v44) + 0x270);
      v50(v49);
      uint64_t v51 = type metadata accessor for SystemApertureInCallLeadingView();
      uint64_t v52 = outlined retain of SystemApertureIcon((uint64_t)__dst);
      uint64_t v53 = ((uint64_t (*)(uint64_t))v50)(v52);
      uint64_t v55 = v54;
      uint64_t ObjectType = swift_getObjectType();
      v91[3] = ObjectType;
      uint64_t v57 = *(void *)(v55 + 8);
      v91[4] = v57;
      uint64_t v90 = v53;
      v91[0] = v53;
      swift_unknownObjectRetain();
      long long v58 = specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(__dst, (uint64_t)&v90, v51, ObjectType, v57);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
      self;
      long long v59 = (void *)swift_dynamicCastObjCClass();
      long long v81 = v58;
      if (v59) {
        swift_unknownObjectRetain();
      }
      type metadata accessor for SystemApertureInCallWaveformTrailingView();
      uint64_t v60 = SystemApertureInCallWaveformTrailingView.__allocating_init(call:)(v59);
      uint64_t v61 = (objc_class *)type metadata accessor for SystemApertureIconView();
      id v62 = objc_allocWithZone(v61);
      outlined copy of SystemApertureIconAsset(v85, v84, v80, (uint64_t)v88, v86, v48 & 1);
      swift_bridgeObjectRetain();
      uint64_t v63 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
      id v64 = objc_allocWithZone(v61);
      long long v65 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

      swift_unknownObjectRelease();
      uint64_t v66 = v89;
      uint64_t v67 = v83;
      uint64_t v68 = v83 + *(int *)(v89 + 72);
      outlined consume of SystemApertureElement?(*(void **)v68, *(void *)(v68 + 8), *(void **)(v68 + 16), *(void *)(v68 + 24), *(void **)(v68 + 32), *(void *)(v68 + 40), *(void **)(v68 + 48));
      *(void *)uint64_t v68 = v81;
      *(void *)(v68 + 8) = &protocol witness table for SystemApertureInCallLeadingView;
      *(void *)(v68 + 16) = v60;
      *(void *)(v68 + 24) = &protocol witness table for SystemApertureInCallWaveformTrailingView;
      *(void *)(v68 + 32) = v63;
      *(void *)(v68 + 40) = &protocol witness table for SystemApertureIconView;
      *(void *)(v68 + 48) = v65;
      *(void *)(v68 + 56) = &protocol witness table for SystemApertureIconView;
      *(void *)(v68 + 64) = 4;
      *(unsigned char *)(v68 + 72) = 65;
      uint64_t v69 = v82;
      _s15ConversationKit11ParticipantVWOcTm_3(v67, v82, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v69, 0, 1, v66);
      uint64_t v70 = v67;
    }
    else
    {
      id v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v73 = 0;
        _os_log_impl(&dword_1C2F90000, v71, v72, "EnhancedEmergency: [SystemAperture] missing status icon", v73, 2u);
        MEMORY[0x1C87760E0](v73, -1, -1);
        id v74 = isa;
        uint64_t v75 = (objc_class *)v39;
      }
      else
      {
        id v74 = v71;
        uint64_t v75 = v40;
        uint64_t v40 = (objc_class *)v39;
        id v71 = isa;
      }
      uint64_t v76 = v82;

      uint64_t v77 = v83;
      _s15ConversationKit11ParticipantVWOcTm_3(v83, v76, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v76, 0, 1, v42);
      uint64_t v70 = v77;
    }
    return outlined destroy of PushToTalkNotice(v70, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

uint64_t ConversationControlsRecipeGenerator.enhancedEmergencyVideoStreamingRequestRecipe(controlsManager:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v6);
  uint64_t v78 = (uint64_t)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v82 = v5;
  uint64_t v83 = v6;
  uint64_t v77 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  id v74 = (void *)__swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C2F90000, v9, v10, "EnhancedEmergency: going to make recipe for enhancedEmergencyVideoStreamingRequestRecipe", v11, 2u);
    MEMORY[0x1C87760E0](v11, -1, -1);
  }

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v12 = objc_msgSend(self, sel_conversationKit);
  v93._id object = (void *)0xE000000000000000;
  v13._id object = (void *)0x80000001C3798C30;
  v13._id countAndFlagsBits = 0xD000000000000016;
  v14.value._id countAndFlagsBits = 0x61737265766E6F43;
  v14.value._id object = (void *)0xEF74694B6E6F6974;
  v15._id countAndFlagsBits = 0;
  v15._id object = (void *)0xE000000000000000;
  v93._id countAndFlagsBits = 0;
  Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v93);

  Class isa = NSMutableAttributedString.__allocating_init(string:)(v16).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C37696D0;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v86);
  uint64_t v18 = v86[1];
  uint64_t v19 = v86[2];
  uint64_t v79 = (void *)v86[3];
  uint64_t v80 = v86[0];
  char v20 = v87;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v21 = @nonobjc UIImage.__allocating_init(systemName:)();
  if (v21)
  {
    Swift::String v22 = v21;
    id v23 = objc_msgSend(v21, sel_imageWithRenderingMode_, 2);
  }
  else
  {
    id v23 = 0;
  }
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v23);
  id v25 = objc_msgSend(self, sel_redColor);
  objc_msgSend(v24, sel_setTintColor_, v25);

  id v26 = v24;
  id v27 = objc_msgSend(v26, sel_hash);
  __dst[0] = 15;
  memset(&__dst[1], 0, 32);
  LOBYTE(__dst[5]) = 6;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v28 - 8);
  id v30 = (char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v30, 1, 1, v31);
  v91[0] = v17;
  v91[1] = v80;
  v91[2] = v18;
  v91[3] = v19;
  v91[4] = v79;
  char v92 = v20 | 0x80;
  id v32 = v26;
  id v33 = isa;
  uint64_t v34 = (uint64_t)v82;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, v26, 0, (unint64_t)v27, v33, MEMORY[0x1E4FBC860], 0, (uint64_t)v82, 0, 0, (uint64_t)v30, OS_LOG_TYPE_DEFAULT, 0, 3, 5, (uint8_t *)v91, 0, 0,
    0xFFu);
  uint64_t v35 = v83;
  if (__swift_getEnumTagSinglePayload(v34, 1, v83) == 1)
  {

    outlined destroy of SystemUpdateNotice?(v34, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    return __swift_storeEnumTagSinglePayload(v77, 1, 1, v35);
  }
  else
  {
    Class isa = (Class)v23;
    outlined init with take of ConversationControlsAction(v34, v78, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    uint64_t v37 = v76;
    (*(void (**)(void *__return_ptr, void, void, char *))(**(void **)(v75 + 24) + 112))(v88, 0, 0, v76);
    uint64_t v38 = (void *)v88[0];
    uint64_t v39 = v88[1];
    uint64_t v40 = (void *)v88[2];
    uint64_t v41 = v88[3];
    uint64_t v82 = (char *)v88[4];
    uint64_t v80 = v88[5];
    outlined init with take of ConversationControlsRecipe?((uint64_t)v88, (uint64_t)v89, &demangling cache variable for type metadata for SystemApertureIcon?);
    if (v89[7])
    {
      uint64_t v73 = v41;
      id v74 = v40;
      uint64_t v75 = v39;
      uint64_t v79 = v38;
      uint64_t v42 = memcpy(__dst, v89, sizeof(__dst));
      uint64_t v43 = *(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *(void *)v37) + 0x270);
      v43(v42);
      uint64_t v44 = type metadata accessor for SystemApertureInCallLeadingView();
      uint64_t v45 = outlined retain of SystemApertureIcon((uint64_t)__dst);
      uint64_t v46 = ((uint64_t (*)(uint64_t))v43)(v45);
      uint64_t v48 = v47;
      uint64_t ObjectType = swift_getObjectType();
      v85[3] = ObjectType;
      uint64_t v50 = *(void *)(v48 + 8);
      v85[4] = v50;
      uint64_t v84 = v46;
      v85[0] = v46;
      swift_unknownObjectRetain();
      uint64_t v51 = specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(__dst, (uint64_t)&v84, v44, ObjectType, v50);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      self;
      uint64_t v52 = (void *)swift_dynamicCastObjCClass();
      uint64_t v76 = v51;
      if (v52) {
        swift_unknownObjectRetain();
      }
      Class v53 = isa;
      type metadata accessor for SystemApertureInCallWaveformTrailingView();
      uint64_t v54 = SystemApertureInCallWaveformTrailingView.__allocating_init(call:)(v52);
      uint64_t v55 = (objc_class *)type metadata accessor for SystemApertureIconView();
      id v56 = objc_allocWithZone(v55);
      outlined copy of SystemApertureIconAsset(v79, v75, v74, v73, (uint64_t)v82, v80 & 1);
      swift_bridgeObjectRetain();
      uint64_t v57 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
      id v58 = objc_allocWithZone(v55);
      long long v59 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

      swift_unknownObjectRelease();
      uint64_t v60 = v83;
      uint64_t v61 = v78;
      uint64_t v62 = v78 + *(int *)(v83 + 72);
      outlined consume of SystemApertureElement?(*(void **)v62, *(void *)(v62 + 8), *(void **)(v62 + 16), *(void *)(v62 + 24), *(void **)(v62 + 32), *(void *)(v62 + 40), *(void **)(v62 + 48));
      *(void *)uint64_t v62 = v76;
      *(void *)(v62 + 8) = &protocol witness table for SystemApertureInCallLeadingView;
      *(void *)(v62 + 16) = v54;
      *(void *)(v62 + 24) = &protocol witness table for SystemApertureInCallWaveformTrailingView;
      *(void *)(v62 + 32) = v57;
      *(void *)(v62 + 40) = &protocol witness table for SystemApertureIconView;
      *(void *)(v62 + 48) = v59;
      *(void *)(v62 + 56) = &protocol witness table for SystemApertureIconView;
      *(void *)(v62 + 64) = 4;
      *(unsigned char *)(v62 + 72) = 65;
      uint64_t v63 = v77;
      _s15ConversationKit11ParticipantVWOcTm_3(v61, v77, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v63, 0, 1, v60);
      uint64_t v64 = v61;
    }
    else
    {
      long long v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v67 = 0;
        _os_log_impl(&dword_1C2F90000, v65, v66, "EnhancedEmergency: [SystemAperture] missing status icon.", v67, 2u);
        MEMORY[0x1C87760E0](v67, -1, -1);
        id v68 = isa;
        uint64_t v69 = (objc_class *)v32;
      }
      else
      {
        id v68 = v65;
        uint64_t v69 = v33;
        id v33 = (objc_class *)v32;
        long long v65 = isa;
      }
      uint64_t v70 = v77;

      uint64_t v71 = v78;
      _s15ConversationKit11ParticipantVWOcTm_3(v78, v70, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v70, 0, 1, v35);
      uint64_t v64 = v71;
    }
    return outlined destroy of PushToTalkNotice(v64, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

void ConversationControlsRecipeGenerator.enhancedEmergencyRTTMediaUploadRequestRecipe(controlsManager:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v25 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = v17 - v16;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationControls);
  char v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    Swift::String v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v22 = 0;
    _os_log_impl(&dword_1C2F90000, v20, v21, v5, v22, 2u);
    OUTLINED_FUNCTION_3();
  }

  v3(v7);
  OUTLINED_FUNCTION_9_1(v13);
  if (v23)
  {
    outlined destroy of SystemUpdateNotice?(v13, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    __swift_storeEnumTagSinglePayload(v25, 1, 1, v14);
  }
  else
  {
    outlined init with take of ConversationControlsAction(v13, v18, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    outlined destroy of ConversationControlsType(v18);
    *(void *)uint64_t v18 = v1;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(unsigned char *)(v18 + 40) = 6;
    uint64_t v24 = v18 + *(int *)(v14 + 72);
    outlined consume of SystemApertureElement?(*(void **)v24, *(void *)(v24 + 8), *(void **)(v24 + 16), *(void *)(v24 + 24), *(void **)(v24 + 32), *(void *)(v24 + 40), *(void **)(v24 + 48));
    *(void *)uint64_t v24 = 1;
    *(_OWORD *)(v24 + 8) = 0u;
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(unsigned char *)(v24 + 72) = 0;
    _s15ConversationKit11ParticipantVWOcTm_3(v18, v25, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    __swift_storeEnumTagSinglePayload(v25, 0, 1, v14);
    outlined destroy of PushToTalkNotice(v18, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
  OUTLINED_FUNCTION_28();
}

void ConversationControlsRecipeGenerator.swapCallsRecipe(shownCall:controlsManager:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(ObjectType, a2);
  unsigned int v13 = objc_msgSend(v12, sel_isSystemProvider);

  id v106 = a3;
  uint64_t v107 = a4;
  uint64_t v105 = v5;
  if (v13)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v16 = static UIImageView.appIcon(for:)(v14, v15);
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v16, sel_image);
  }
  else
  {
    id v17 = specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(a1, v10, ObjectType, a2);
    if (v17) {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v18 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
  uint64_t v19 = self;
  id v20 = v17;
  swift_unknownObjectRetain();
  id v98 = v19;
  uint64_t v99 = v18;
  os_log_type_t v21 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(a1, 0, v17, objc_msgSend(v19, sel_clearColor), v18, ObjectType, a2);
  id v108 = objc_msgSend(v21, sel_view);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25) == 1)
  {
    __break(1u);
  }
  else
  {
    id v101 = v20;
    unint64_t v103 = (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v21) + 0x58))(v24);
    uint64_t v26 = *(void *)(v25 - 8);
    id v27 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v94 = v26 + 8;
    uint64_t v95 = v25;
    uint64_t v92 = v26;
    Swift::String v93 = v27;
    v27(v24, v25);
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
    uint64_t v104 = ObjectType;
    uint64_t v29 = v28(ObjectType, a2);
    uint64_t v31 = v30;
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v32 = objc_msgSend(self, sel_sharedInstance);
      id v33 = TUCall.associatedCallGroup(in:)(v32);

      uint64_t v34 = v108;
      if (v33)
      {
        swift_bridgeObjectRelease();
        id v35 = objc_msgSend(v33, sel_displayName);
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v36;
      }
    }
    else
    {
      uint64_t v34 = v108;
    }
    __dst[0] = a1;
    __dst[1] = a2;
    LOBYTE(__dst[5]) = 5;
    uint64_t v37 = self;
    swift_unknownObjectRetain();
    id v108 = v34;
    id v97 = v37;
    id v38 = objc_msgSend(v37, sel_conversationKit);
    v116._id object = (void *)0xE000000000000000;
    unint64_t v96 = (unint64_t)"SHARE_LIVE_VIDEO_TITLE";
    v39._id object = (void *)0x80000001C3798C50;
    v39._id countAndFlagsBits = 0xD000000000000010;
    v40.value._id countAndFlagsBits = 0x61737265766E6F43;
    v40.value._id object = (void *)0xEF74694B6E6F6974;
    v41._id countAndFlagsBits = 0;
    v41._id object = (void *)0xE000000000000000;
    v116._id countAndFlagsBits = 0;
    Swift::String v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, (NSBundle)v38, v41, v116);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    Class isa = NSMutableAttributedString.__allocating_init(string:)(v42).super.super.isa;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v44._id countAndFlagsBits = v29;
    v44._id object = v31;
    v45.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v44).super.super.isa;
    Class v46 = v45.super.super.isa;
    uint64_t v47 = MEMORY[0x1E4FBC860];
    v110[0] = MEMORY[0x1E4FBC860];
    id v100 = v21;
    Class v102 = isa;
    if (v45.super.super.isa)
    {
      uint64_t v48 = v45.super.super.isa;
      MEMORY[0x1C87733A0]();
      if (*(void *)((v110[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v110[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v47 = v110[0];
    }

    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    MEMORY[0x1F4188790](v49 - 8);
    uint64_t v51 = (char *)&v92 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v52 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v51, 1, 1, v52);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
    type metadata accessor for ConversationControlsAction();
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_1C3769620;
    swift_storeEnumTagMultiPayload();
    uint64_t v112 = v53;
    long long v113 = 0u;
    long long v114 = 0u;
    char v115 = 0;
    uint64_t v55 = v107;
    uint64_t v54 = v108;
    uint64_t v56 = ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)__dst, 0, v108, 0, v103, v102, v47, 0, v107, 0, 0, (uint64_t)v51, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v112, 0, 0,
            0xFFu);
    uint64_t v57 = v105;
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v105[2]) + 0xD8))(v56))
    {
      uint64_t v58 = type metadata accessor for ConversationControlsRecipe();
      if (!__swift_getEnumTagSinglePayload(v55, 1, v58)) {
        *(unsigned char *)(v55 + *(int *)(v58 + 64)) = 1;
      }
    }
    long long v59 = v106;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)v57[3] + 112))(v109, a1, a2, v106);
    outlined init with take of ConversationControlsRecipe?((uint64_t)v109, (uint64_t)v110, &demangling cache variable for type metadata for SystemApertureIcon?);
    uint64_t v60 = v104;
    if (v110[7])
    {
      memcpy(__dst, v110, sizeof(__dst));
      swift_unknownObjectRetain();
      id v61 = objc_msgSend(v98, sel_clearColor);
      uint64_t v62 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(a1, 0, 0, v61, v99, v60, a2);
      id v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
      id v64 = objc_msgSend(v97, sel_conversationKit);
      v117._id object = (void *)0xE000000000000000;
      v65._id object = (void *)(v96 | 0x8000000000000000);
      v65._id countAndFlagsBits = 0xD000000000000010;
      v66.value._id countAndFlagsBits = 0x61737265766E6F43;
      v66.value._id object = (void *)0xEF74694B6E6F6974;
      v67._id countAndFlagsBits = 0;
      v67._id object = (void *)0xE000000000000000;
      v117._id countAndFlagsBits = 0;
      Swift::String v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v65, v66, (NSBundle)v64, v67, v117);

      outlined bridged method (mbnn) of @objc UILabel.text.setter(v68._countAndFlagsBits, (uint64_t)v68._object, v63);
      uint64_t v69 = type metadata accessor for ConversationControlsRecipe();
      if (__swift_getEnumTagSinglePayload(v55, 1, v69))
      {

        outlined retain of SystemApertureIcon?(v109, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIcon?);
      }
      else
      {
        uint64_t v105 = (uint64_t *)objc_msgSend(v62, sel_view);
        uint64_t v70 = MEMORY[0x1F4188790](v105);
        uint64_t v72 = (char *)&v92 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v73 = (void *)MEMORY[0x1E4FBC8C8];
        (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v59) + 0x278))(v70);
        uint64_t v74 = (*(uint64_t (**)(char *))((*v73 & *v62) + 0x58))(v72);
        v93(v72, v95);
        id v75 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIncomingCallLeadingView());
        uint64_t v76 = SystemApertureIncomingCallLeadingView.init(leadingViewType:)(v105, v74, 0);
        uint64_t v77 = (objc_class *)type metadata accessor for SystemApertureIconView();
        id v78 = objc_allocWithZone(v77);
        uint64_t v79 = v55;
        id v80 = v63;
        outlined retain of SystemApertureIcon?(v109, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined copy of SystemApertureIcon?);
        long long v81 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
        id v82 = objc_allocWithZone(v77);
        uint64_t v83 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

        uint64_t v84 = v79 + *(int *)(v69 + 72);
        id v85 = *(void **)v84;
        uint64_t v86 = *(void *)(v84 + 8);
        char v87 = *(void **)(v84 + 16);
        uint64_t v88 = *(void *)(v84 + 24);
        uint64_t v89 = *(void **)(v84 + 32);
        uint64_t v90 = *(void *)(v84 + 40);
        uint64_t v91 = *(void **)(v84 + 48);
        *(void *)uint64_t v84 = v76;
        *(void *)(v84 + 8) = &protocol witness table for SystemApertureIncomingCallLeadingView;
        *(void *)(v84 + 16) = v63;
        *(void *)(v84 + 24) = &protocol witness table for UILabel;
        *(void *)(v84 + 32) = v81;
        *(void *)(v84 + 40) = &protocol witness table for SystemApertureIconView;
        *(void *)(v84 + 48) = v83;
        *(void *)(v84 + 56) = &protocol witness table for SystemApertureIconView;
        *(void *)(v84 + 64) = 4;
        *(unsigned char *)(v84 + 72) = 64;
        outlined consume of SystemApertureElement?(v85, v86, v87, v88, v89, v90, v91);
      }
    }
    else
    {
    }
  }
}

uint64_t ConversationControlsRecipeGenerator.incomingRemoteControlRequestHUDRecipe(controlsManager:requestingParticipantDisplayName:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v8 - 8);
  *(void *)&long long v74 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v10 = MEMORY[0x1F4188790](v75);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v13 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v10);
  if (v14)
  {
    uint64_t v15 = v14;
    if (objc_msgSend(v14, sel_state) == (id)3 && objc_msgSend(v15, sel_avMode))
    {
      Swift::String_optional v66 = v12;
      uint64_t v67 = a4;
      static ConversationControlsRecipeGenerator.assetsForDefaultHUD(controlsManager:conversation:)();
      id v65 = v16;
      uint64_t v18 = v17;
      type metadata accessor for ConversationControlsBadgingAvatarViewController();
      id v64 = v18;
      id v19 = objc_msgSend(v18, sel_image);
      id v20 = objc_msgSend(self, sel_clearColor);
      *(void *)&long long v71 = a3;
      swift_bridgeObjectRetain();
      id v63 = v15;
      os_log_type_t v21 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v63, v19, a2, a3, v20);
      *(void *)&long long v73 = objc_msgSend(v21, sel_view);
      uint64_t v22 = type metadata accessor for UUID();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = MEMORY[0x1F4188790](v22);
      uint64_t v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t))((*v13 & *a1) + 0x278))(v24);
      id v27 = *(uint64_t (**)(char *))((*v13 & *v21) + 0x58);
      id v62 = v21;
      *(void *)&long long v72 = v27(v26);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      id v28 = objc_msgSend(self, sel_conversationKit);
      v88._id object = (void *)0xE000000000000000;
      v29._id object = (void *)0x80000001C3798C70;
      v29._id countAndFlagsBits = 0xD00000000000001CLL;
      v30.value._id countAndFlagsBits = 0x61737265766E6F43;
      v30.value._id object = (void *)0xEF74694B6E6F6974;
      v31._id countAndFlagsBits = 0;
      v31._id object = (void *)0xE000000000000000;
      v88._id countAndFlagsBits = 0;
      Swift::String v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v88);

      Class isa = NSMutableAttributedString.__allocating_init(string:)(v32).super.super.isa;
      uint64_t v33 = v71;
      Class v34 = ConversationControlsRecipeGenerator.incomingRemoteControlRequestSubtitle(requestingParticipantDisplayName:)(a2, v71).super.super.isa;
      *(void *)&v78[0] = a2;
      *((void *)&v78[0] + 1) = v33;
      BYTE8(v79) = 3;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1C3769830;
      *(void *)(v35 + 32) = v34;
      uint64_t v83 = v35;
      specialized Array._endMutation()();
      uint64_t v68 = v83;
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      uint64_t v70 = &v61;
      MEMORY[0x1F4188790](v36 - 8);
      id v38 = (char *)&v61 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v39 = type metadata accessor for AttributedString();
      __swift_storeEnumTagSinglePayload((uint64_t)v38, 1, 1, v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
      type metadata accessor for ConversationControlsAction();
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1C37696D0;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      Swift::String v41 = (void *)v73;
      id v42 = (id)v73;
      uint64_t v43 = isa;
      Swift::String v44 = v34;
      static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v76);
      uint64_t v83 = v40;
      long long v84 = v76[0];
      long long v85 = v76[1];
      char v86 = v77 | 0x80;
      uint64_t v45 = v74;
      ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v78, 0, v41, 0, v72, v43, v68, 0, v74, 0, 0, (uint64_t)v38, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v83, 0, 0,
        0xFFu);
      uint64_t v46 = v75;
      uint64_t result = __swift_getEnumTagSinglePayload(v45, 1, v75);
      if (result == 1)
      {
        __break(1u);
      }
      else
      {
        uint64_t v48 = (uint64_t)v66;
        outlined init with take of ConversationControlsAction(v45, (uint64_t)v66, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(a1, 1, (uint64_t)v78);
        long long v74 = v78[0];
        long long v73 = v78[1];
        long long v72 = v79;
        long long v71 = v80;
        uint64_t v49 = v81;
        char v50 = v82;

        uint64_t v51 = v48 + *(int *)(v46 + 72);
        outlined consume of SystemApertureElement?(*(void **)v51, *(void *)(v51 + 8), *(void **)(v51 + 16), *(void *)(v51 + 24), *(void **)(v51 + 32), *(void *)(v51 + 40), *(void **)(v51 + 48));
        long long v52 = v73;
        *(_OWORD *)uint64_t v51 = v74;
        *(_OWORD *)(v51 + 16) = v52;
        long long v53 = v71;
        *(_OWORD *)(v51 + 32) = v72;
        *(_OWORD *)(v51 + 48) = v53;
        *(void *)(v51 + 64) = v49;
        *(unsigned char *)(v51 + 72) = v50;
        uint64_t v54 = v67;
        _s15ConversationKit11ParticipantVWOcTm_3(v48, v67, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        __swift_storeEnumTagSinglePayload(v54, 0, 1, v46);
        return outlined destroy of PushToTalkNotice(v48, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      }
      return result;
    }
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  __swift_project_value_buffer(v55, (uint64_t)static Logger.conversationControls);
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  uint64_t v59 = v75;
  if (v58)
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v60 = 0;
    _os_log_impl(&dword_1C2F90000, v56, v57, "Cannot generate incoming remote control request HUD", v60, 2u);
    MEMORY[0x1C87760E0](v60, -1, -1);
  }

  return __swift_storeEnumTagSinglePayload(a4, 1, 1, v59);
}

uint64_t ConversationControlsRecipeGenerator.rejectedRemoteControlRequestHUDRecipe(controlsManager:context:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v8);
  if (v12)
  {
    unsigned int v13 = v12;
    if (objc_msgSend(v12, sel_state) == (id)3 && objc_msgSend(v13, sel_avMode))
    {
      uint64_t v68 = v10;
      uint64_t v69 = a2;
      static ConversationControlsRecipeGenerator.assetsForDefaultHUD(controlsManager:conversation:)();
      id v67 = v14;
      id v16 = v15;
      type metadata accessor for ConversationControlsBadgingAvatarViewController();
      id v66 = v16;
      id v17 = objc_msgSend(v16, sel_image);
      id v18 = objc_msgSend(self, sel_clearColor);
      id v65 = v13;
      id v19 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v65, v17, 0x796C6C6942, 0xE500000000000000, v18);
      uint64_t v75 = v7;
      id v20 = v19;
      *(void *)&long long v73 = objc_msgSend(v19, sel_view);
      uint64_t v21 = type metadata accessor for UUID();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = MEMORY[0x1F4188790](v21);
      uint64_t v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t))((*v11 & *a1) + 0x278))(v23);
      uint64_t v26 = *(uint64_t (**)(char *))((*v11 & *v20) + 0x58);
      id v64 = v20;
      uint64_t v27 = v75;
      *(void *)&long long v74 = v26(v25);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      id v28 = self;
      id v29 = objc_msgSend(v28, sel_conversationKit);
      v88._id object = (void *)0xE000000000000000;
      v30._id object = (void *)0x80000001C3798D50;
      v30._id countAndFlagsBits = 0xD000000000000017;
      v31.value._id countAndFlagsBits = 0x61737265766E6F43;
      v31.value._id object = (void *)0xEF74694B6E6F6974;
      v32._id countAndFlagsBits = 0;
      v32._id object = (void *)0xE000000000000000;
      v88._id countAndFlagsBits = 0;
      Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v88);

      *(NSMutableAttributedString *)&long long v72 = NSMutableAttributedString.__allocating_init(string:)(v33);
      id v34 = objc_msgSend(v28, sel_conversationKit);
      v35._id countAndFlagsBits = 0xD000000000000051;
      v89._id object = (void *)0xE000000000000000;
      v35._id object = (void *)0x80000001C3798D70;
      v36.value._id countAndFlagsBits = 0x61737265766E6F43;
      v36.value._id object = (void *)0xEF74694B6E6F6974;
      v37._id countAndFlagsBits = 0;
      v37._id object = (void *)0xE000000000000000;
      v89._id countAndFlagsBits = 0;
      Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v89);

      Class isa = NSMutableAttributedString.__allocating_init(string:)(v38).super.super.isa;
      BYTE8(v79) = 4;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1C3769830;
      *(void *)(v40 + 32) = isa;
      uint64_t v83 = v40;
      specialized Array._endMutation()();
      *(void *)&long long v71 = v83;
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      uint64_t v70 = &v63;
      MEMORY[0x1F4188790](v41 - 8);
      uint64_t v43 = (char *)&v63 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v44 = type metadata accessor for AttributedString();
      __swift_storeEnumTagSinglePayload((uint64_t)v43, 1, 1, v44);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
      type metadata accessor for ConversationControlsAction();
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_1C37696D0;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (void *)v73;
      id v47 = (id)v73;
      id v48 = (id)v72;
      uint64_t v49 = isa;
      static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v76);
      uint64_t v83 = v45;
      long long v84 = v76[0];
      long long v85 = v76[1];
      char v86 = v77 | 0x80;
      ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v78, 0, v46, 0, v74, v48, v71, 0, (uint64_t)v6, 0, 0, (uint64_t)v43, OS_LOG_TYPE_DEFAULT, 0, 1, 3, (uint8_t *)&v83, 0, 0,
        0xFFu);
      uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v27);
      if (result == 1)
      {
        __break(1u);
      }
      else
      {
        uint64_t v51 = (uint64_t)v6;
        uint64_t v52 = (uint64_t)v68;
        outlined init with take of ConversationControlsAction(v51, (uint64_t)v68, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(a1, 1, (uint64_t)v78);
        long long v74 = v78[0];
        long long v73 = v78[1];
        long long v72 = v79;
        long long v71 = v80;
        uint64_t v53 = v81;
        char v54 = v82;

        uint64_t v55 = v52 + *(int *)(v27 + 72);
        outlined consume of SystemApertureElement?(*(void **)v55, *(void *)(v55 + 8), *(void **)(v55 + 16), *(void *)(v55 + 24), *(void **)(v55 + 32), *(void *)(v55 + 40), *(void **)(v55 + 48));
        long long v56 = v73;
        *(_OWORD *)uint64_t v55 = v74;
        *(_OWORD *)(v55 + 16) = v56;
        long long v57 = v71;
        *(_OWORD *)(v55 + 32) = v72;
        *(_OWORD *)(v55 + 48) = v57;
        *(void *)(v55 + 64) = v53;
        *(unsigned char *)(v55 + 72) = v54;
        uint64_t v58 = v69;
        _s15ConversationKit11ParticipantVWOcTm_3(v52, v69, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        __swift_storeEnumTagSinglePayload(v58, 0, 1, v27);
        return outlined destroy of PushToTalkNotice(v52, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      }
      return result;
    }
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.conversationControls);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    id v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v62 = 0;
    _os_log_impl(&dword_1C2F90000, v60, v61, "Cannot generate incoming remote control request HUD", v62, 2u);
    MEMORY[0x1C87760E0](v62, -1, -1);
  }

  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v7);
}

uint64_t ConversationControlsRecipeGenerator.deinit()
{
  swift_release();
  return v0;
}

uint64_t ConversationControlsRecipeGenerator.__deallocating_deinit()
{
  ConversationControlsRecipeGenerator.deinit();
  return swift_deallocClassInstance();
}

uint64_t ConversationControlsRecipeGenerator.init()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static Features.shared;
  *(void *)(v0 + 16) = static Features.shared;
  type metadata accessor for SystemApertureIconFactory();
  id v2 = v1;
  *(void *)(v0 + 24) = swift_initStaticObject();
  return v0;
}

void *Call.isFromMessagesScreenShare.getter()
{
  self;
  uint64_t result = (void *)swift_dynamicCastObjCClass();
  if (result) {
    return (void *)(objc_msgSend(result, sel_originatingUIType) == 32);
  }
  return result;
}

id static ConversationControlsRecipeGenerator.badgeBackgroundColor(forCall:)()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  if (v0 && (objc_msgSend(v0, sel_isRecording) & 1) != 0) {
    uint64_t v1 = &selRef_systemRedColor;
  }
  else {
    uint64_t v1 = &selRef_clearColor;
  }
  id v2 = [self *v1];
  return v2;
}

void ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_23_17();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v40 - v9;
  OUTLINED_FUNCTION_5_49();
  if ((*(uint64_t (**)(void))(v11 + 800))())
  {
    OUTLINED_FUNCTION_41_2();
    if ((*(uint64_t (**)(void))(v12 + 2152))())
    {
      if (one-time initialization token for avLessLeaveConfirmationActions != -1) {
        swift_once();
      }
      uint64_t v13 = static ConversationControlsAction.avLessLeaveConfirmationActions;
      swift_bridgeObjectRetain();
      static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v44);
      long long v15 = v44[0];
      long long v14 = v44[1];
      char v16 = v45 | 0x80;
      goto LABEL_33;
    }
    uint64_t v41 = v6;
    *(void *)&v44[0] = MEMORY[0x1E4FBC860];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
    OUTLINED_FUNCTION_37_7();
    id v20 = (__n128 *)swift_allocObject();
    OUTLINED_FUNCTION_36_8(v20, (__n128)xmmword_1C37696D0);
    swift_storeEnumTagMultiPayload();
    v4[v0] = 1;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v41 = v6;
    *(void *)&v44[0] = MEMORY[0x1E4FBC860];
    id v17 = objc_msgSend(self, sel_currentDevice);
    id v18 = objc_msgSend(v17, sel_userInterfaceIdiom);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
    OUTLINED_FUNCTION_37_7();
    uint64_t v19 = swift_allocObject();
    if (v18 == (id)5)
    {
      *(_OWORD *)(v19 + 16) = xmmword_1C37696D0;
      *((unsigned char *)v17 + v19) = 0;
    }
    else
    {
      OUTLINED_FUNCTION_36_8((__n128 *)v19, (__n128)xmmword_1C376BA10);
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)v17 + v0) = 0;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_41_2();
  unsigned __int8 v22 = (*(uint64_t (**)(void))(v21 + 2112))();
  switch(v22 >> 5)
  {
    case 1:
      if ((v22 & 1) == 0) {
        goto LABEL_15;
      }
      break;
    case 2:
    case 4:
    case 5:
      break;
    case 3:
      if (v22 == 96) {
        goto LABEL_15;
      }
      break;
    default:
LABEL_15:
      swift_storeEnumTagMultiPayload();
      uint64_t v23 = *(void *)&v44[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = OUTLINED_FUNCTION_32_15();
      }
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v23);
      }
      *(void *)(v23 + 16) = v25 + 1;
      outlined init with take of ConversationControlsAction((uint64_t)v10, v23 + ((v1 + 32) & ~(unint64_t)v1) + v0 * v25, (void (*)(void))type metadata accessor for ConversationControlsAction);
      *(void *)&v44[0] = v23;
      break;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationControls);
  uint64_t v27 = v4;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v40 = v2;
    Swift::String v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)Swift::String v30 = 136315138;
    OUTLINED_FUNCTION_5_49();
    Swift::String v32 = (void *)(*(uint64_t (**)(void))(v31 + 656))();
    if (v32)
    {
      Swift::String v33 = v32;
      id v34 = objc_msgSend(v32, sel_state);

      uint64_t v42 = (uint64_t)v34;
      type metadata accessor for TUConversationState(0);
      uint64_t v35 = String.init<A>(reflecting:)();
      unint64_t v37 = v36;
    }
    else
    {
      unint64_t v37 = 0xE300000000000000;
      uint64_t v35 = 7104878;
    }
    uint64_t v6 = v41;
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v28, v29, "ConversationControlsRecipeGenerator: buttonShelfActions conversationState:%s", v30, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    uint64_t v2 = v40;
  }
  else
  {

    uint64_t v6 = v41;
  }
  static ConversationControlsAction.primaryCallAction(controlsManager:location:)();
  uint64_t v13 = *(void *)&v44[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = OUTLINED_FUNCTION_32_15();
  }
  unint64_t v39 = *(void *)(v13 + 16);
  unint64_t v38 = *(void *)(v13 + 24);
  if (v39 >= v38 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v13);
  }
  *(void *)(v13 + 16) = v39 + 1;
  outlined init with take of ConversationControlsAction(v2, v13 + ((v1 + 32) & ~(unint64_t)v1) + v0 * v39, (void (*)(void))type metadata accessor for ConversationControlsAction);
  long long v14 = xmmword_1C3765400;
  long long v15 = 0uLL;
  char v16 = -127;
LABEL_33:
  *(void *)uint64_t v6 = v13;
  *(_OWORD *)(v6 + 8) = v15;
  *(_OWORD *)(v6 + 24) = v14;
  *(unsigned char *)(v6 + 40) = v16;
  OUTLINED_FUNCTION_28();
}

void ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 24);
  (*(void (**)(void *__return_ptr, void, void, void *))(*(void *)v7 + 112))(v62, 0, 0, a1);
  uint64_t v8 = (void *)v62[0];
  uint64_t v9 = v62[1];
  uint64_t v11 = (void *)v62[2];
  uint64_t v10 = v62[3];
  uint64_t v12 = v62[4];
  char v57 = v63;
  outlined init with take of ConversationControlsRecipe?((uint64_t)v62, (uint64_t)__src, &demangling cache variable for type metadata for SystemApertureIcon?);
  if (__src[7])
  {
    uint64_t v53 = v11;
    uint64_t v54 = v10;
    uint64_t v55 = v12;
    char v56 = a2;
    uint64_t v13 = memcpy(__dst, __src, 0x50uLL);
    long long v14 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290);
    uint64_t v15 = ((uint64_t (*)(void *))v14)(v13);
    uint64_t v52 = v9;
    if (v15
      && (char v16 = (void *)v15,
          id v17 = specialized Conversation.avModeForSystemAperture.getter(),
          v16,
          v17 == (id)1))
    {
      int v18 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x320))() ^ 1;
    }
    else
    {
      LOBYTE(v18) = 0;
    }
    uint64_t v19 = (void *)v14();
    id v20 = objc_msgSend(v19, sel_joinedActivitySession);

    int v21 = v18 & (v20 == 0);
    (*(void (**)(void *__return_ptr, void *))(*(void *)v7 + 128))(v64, a1);
    outlined init with take of ConversationControlsRecipe?((uint64_t)v64, (uint64_t)v65, &demangling cache variable for type metadata for SystemApertureIcon?);
    if (v65[7])
    {
      memcpy(v66, v65, sizeof(v66));
      id v22 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIconView());
      id v23 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)v66, 0);
      unint64_t v24 = &protocol witness table for SystemApertureIconView;
    }
    else
    {
      if (v18)
      {
        ConversationControlsManager.isOneToOneConversation.getter();
        if (v37)
        {
          (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
          self;
          unint64_t v38 = (void *)swift_dynamicCastObjCClass();
          if (!v38) {
            swift_unknownObjectRelease();
          }
          type metadata accessor for SystemApertureInCallWaveformTrailingView();
          id v23 = (id)SystemApertureInCallWaveformTrailingView.__allocating_init(call:)(v38);
          uint64_t v51 = &protocol witness table for SystemApertureInCallWaveformTrailingView;
          goto LABEL_20;
        }
      }
      type metadata accessor for SystemApertureEmptyTrailingView();
      id v23 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
      unint64_t v24 = &protocol witness table for SystemApertureEmptyTrailingView;
    }
    uint64_t v51 = v24;
LABEL_20:
    if (v21)
    {
      uint64_t v39 = type metadata accessor for SystemApertureInCallLeadingView();
      uint64_t v40 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
      outlined copy of SystemApertureIconAsset(v8, v52, v53, v54, v55, v57 & 1);
      uint64_t v41 = swift_bridgeObjectRetain();
      uint64_t v42 = v40(v41);
      uint64_t v44 = v43;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v61 = *(void *)(v44 + 8);
      uint64_t v58 = v42;
      v59[0] = v42;
      swift_unknownObjectRetain();
      os_log_type_t v29 = specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(__dst, (uint64_t)&v58, v39, ObjectType, v61);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
      Swift::String v30 = &protocol witness table for SystemApertureInCallLeadingView;
    }
    else
    {
      id v45 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIconView());
      outlined copy of SystemApertureIconAsset(v8, v52, v53, v10, v55, v57 & 1);
      swift_bridgeObjectRetain();
      os_log_type_t v29 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
      Swift::String v30 = &protocol witness table for SystemApertureIconView;
    }
    uint64_t v36 = ConversationControlsManager.maximumLayoutMode.getter();
    uint64_t v46 = (objc_class *)type metadata accessor for SystemApertureIconView();
    id v47 = objc_allocWithZone(v46);
    outlined retain of SystemApertureIcon?(v62, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined copy of SystemApertureIcon?);
    id v48 = v29;
    id v49 = v23;
    Swift::String v32 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
    id v50 = objc_allocWithZone(v46);
    id v34 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

    Swift::String v33 = &protocol witness table for SystemApertureIconView;
    char v35 = v56;
    uint64_t v31 = v51;
    goto LABEL_24;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationControls);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v28 = 0;
    _os_log_impl(&dword_1C2F90000, v26, v27, "[SystemAperture] missing status icon for activeCall", v28, 2u);
    MEMORY[0x1C87760E0](v28, -1, -1);
  }

  os_log_type_t v29 = 0;
  Swift::String v30 = 0;
  id v23 = 0;
  uint64_t v31 = 0;
  Swift::String v32 = 0;
  Swift::String v33 = 0;
  id v34 = 0;
  char v35 = -2;
  uint64_t v36 = 4;
LABEL_24:
  *(void *)a3 = v29;
  *(void *)(a3 + 8) = v30;
  *(void *)(a3 + 16) = v23;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v32;
  *(void *)(a3 + 40) = v33;
  *(void *)(a3 + 48) = v34;
  *(void *)(a3 + 56) = v33;
  *(void *)(a3 + 64) = v36;
  *(unsigned char *)(a3 + 72) = v35;
}

Class static ConversationControlsRecipeGenerator.unauthorizedParticipantAssets(controlsMode:conversation:)(char a1, uint64_t a2)
{
  if (a2)
  {
    if ((a1 & 0xE1) == 0x41)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_1C3769830;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      uint64_t v3 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_47();
      unint64_t v4 = OUTLINED_FUNCTION_3_19(20);
      v5.super.Class isa = v3;
      uint64_t v9 = OUTLINED_FUNCTION_2_29(v4, v6, v7, v8, v5);
      uint64_t v11 = v10;

      v12._id countAndFlagsBits = v9;
      v12._id object = v11;
      *(NSMutableAttributedString *)(v2 + 32) = NSMutableAttributedString.__allocating_init(string:)(v12);
      specialized Array._endMutation()();
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    int v18 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    v19.super.Class isa = v18;
    uint64_t v20 = OUTLINED_FUNCTION_2_29(0x454D495445434146, 0xE800000000000000, 0x61737265766E6F43, 0xEF74694B6E6F6974, v19);
    id v22 = v21;

    v23._id countAndFlagsBits = v20;
    v23._id object = v22;
    return NSMutableAttributedString.__allocating_init(string:)(v23).super.super.isa;
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
    long long v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v16 = 0;
      _os_log_impl(&dword_1C2F90000, v14, v15, "No active conversation", v16, 2u);
      OUTLINED_FUNCTION_3();
    }

    return 0;
  }
}

uint64_t ConversationControlsRecipeGenerator.sessionActivationRequestNoticeRecipe(controlsManager:notice:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v11);
  if (v15)
  {
    char v16 = (void *)v15;
    *(void *)&long long v77 = v9;
    v69[1] = v3;
    uint64_t v70 = v13;
    uint64_t v80 = v10;
    uint64_t v79 = a3;
    type metadata accessor for ConversationControlsBadgingAvatarViewController();
    id v17 = self;
    id v18 = v16;
    id v19 = objc_msgSend(v17, sel_clearColor);
    id v76 = v18;
    uint64_t v20 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v18, 0, 0, 0, v19);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    id v78 = v69;
    uint64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    MEMORY[0x1F4188790](v21 - 8);
    unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v24 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v69 - v23, 1, 1, v24);
    uint64_t v25 = SBUIIsSystemApertureEnabled();
    if (v25)
    {
      MEMORY[0x1F4188790](v25);
      SessionActivationRequestNotice.fullSentence.getter();
      outlined destroy of SystemUpdateNotice?((uint64_t)v69 - v23, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      __swift_storeEnumTagSinglePayload((uint64_t)v69 - v23, 0, 1, v24);
      outlined init with take of ConversationControlsRecipe?((uint64_t)v69 - v23, (uint64_t)v69 - v23, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    }
    *((void *)&v86 + 1) = type metadata accessor for SessionActivationRequestNotice(0);
    *(void *)&long long v87 = &protocol witness table for SessionActivationRequestNotice;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v85);
    _s15ConversationKit11ParticipantVWOcTm_3(a2, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for SessionActivationRequestNotice);
    BYTE8(v87) = 0;
    *(void *)&long long v74 = objc_msgSend(v20, sel_view);
    uint64_t v27 = type metadata accessor for UUID();
    *(void *)&long long v72 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v75 = (char *)v69 - v23;
    uint64_t v29 = v28;
    uint64_t v30 = MEMORY[0x1F4188790](v27);
    Swift::String v32 = (char *)v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v33 = *a1;
    uint64_t v71 = v22;
    id v34 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & v33) + 0x278))(v30);
    *(void *)&long long v73 = (*(uint64_t (**)(char *))((*v34 & *v20) + 0x58))(v32);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v27);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    id v35 = objc_msgSend(self, sel_conversationKit);
    v94._id object = (void *)0xE000000000000000;
    v36._id object = (void *)0x80000001C3798A50;
    v36._id countAndFlagsBits = 0xD000000000000016;
    v37.value._id countAndFlagsBits = 0x61737265766E6F43;
    v37.value._id object = (void *)0xEF74694B6E6F6974;
    v38._id countAndFlagsBits = 0;
    v38._id object = (void *)0xE000000000000000;
    v94._id countAndFlagsBits = 0;
    Swift::String v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v37, (NSBundle)v35, v38, v94);

    Class isa = NSMutableAttributedString.__allocating_init(string:)(v39).super.super.isa;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1C3769830;
    MEMORY[0x1F4188790](v41);
    SessionActivationRequestNotice.attributedSubtitle.getter();
    uint64_t v42 = NSAttributedString.init(_:)();
    uint64_t v43 = (uint64_t)v75;
    *(void *)(v41 + 32) = v42;
    *(void *)&v91[0] = v41;
    uint64_t v44 = specialized Array._endMutation()();
    uint64_t v45 = *(void *)&v91[0];
    MEMORY[0x1F4188790](v44);
    uint64_t v46 = (char *)v69 - v72;
    outlined init with copy of Participant?(v43, (uint64_t)v69 - v72, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
    v91[0] = v81;
    v91[1] = v82;
    uint64_t v92 = v83;
    char v93 = v84;
    uint64_t v68 = (uint64_t)v46;
    uint64_t v47 = v77;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v85, 0, (void *)v74, 0, v73, isa, v45, 0, v77, 0, 0, v68, OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)v91, 0, 0,
      0xFFu);
    uint64_t v48 = v80;
    if (__swift_getEnumTagSinglePayload(v47, 1, v80) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

      outlined destroy of SystemUpdateNotice?(v47, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v79, 1, 1, v48);
    }
    else
    {
      uint64_t v61 = (uint64_t)v70;
      outlined init with take of ConversationControlsAction(v47, (uint64_t)v70, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      if (SBUIIsSystemApertureEnabled())
      {
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(a1, 64, (uint64_t)&v85);
        long long v77 = v85;
        long long v74 = v86;
        long long v73 = v87;
        long long v72 = v88;
        uint64_t v62 = v89;
        char v63 = v90;

        outlined destroy of SystemUpdateNotice?(v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        uint64_t v64 = v61 + *(int *)(v48 + 72);
        outlined consume of SystemApertureElement?(*(void **)v64, *(void *)(v64 + 8), *(void **)(v64 + 16), *(void *)(v64 + 24), *(void **)(v64 + 32), *(void *)(v64 + 40), *(void **)(v64 + 48));
        long long v65 = v74;
        *(_OWORD *)uint64_t v64 = v77;
        *(_OWORD *)(v64 + 16) = v65;
        long long v66 = v72;
        *(_OWORD *)(v64 + 32) = v73;
        *(_OWORD *)(v64 + 48) = v66;
        *(void *)(v64 + 64) = v62;
        *(unsigned char *)(v64 + 72) = v63;
      }
      else
      {
        outlined destroy of SystemUpdateNotice?(v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      }
      uint64_t v67 = v79;
      _s15ConversationKit11ParticipantVWOcTm_3(v61, v79, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v67, 0, 1, v48);
      return outlined destroy of PushToTalkNotice(v61, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationControls);
    uint64_t v51 = a1;
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      uint64_t v80 = v10;
      uint64_t v55 = (uint8_t *)v54;
      uint64_t v56 = swift_slowAlloc();
      *(void *)&long long v85 = v56;
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v57 = (*(uint64_t (**)(void))((*v14 & *v51) + 0x270))();
      swift_getObjectType();
      *(void *)&v91[0] = v57;
      uint64_t v58 = String.init<A>(describing:)();
      *(void *)&v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v52, v53, "sessionActionNoticeRecipe: No active conversation, call: %s", v55, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v56, -1, -1);
      uint64_t v60 = v55;
      uint64_t v10 = v80;
      MEMORY[0x1C87760E0](v60, -1, -1);
    }
    else
    {
    }
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v10);
  }
}

uint64_t ConversationControlsRecipeGenerator.accountUpdateNoticeRecipe(controlsManager:notice:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v68 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v5 - 8);
  *(void *)&long long v66 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  *(void *)&long long v69 = a1;
  v14(v11);
  uint64_t v16 = v15;
  uint64_t ObjectType = swift_getObjectType();
  id v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 464))(ObjectType, v16);
  swift_unknownObjectRelease();
  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v18);

  specialized BidirectionalCollection.last.getter(*(void *)(a2 + 8), (uint64_t)v13);
  uint64_t v20 = type metadata accessor for Participant(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v20);
  unint64_t v59 = v9;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v13, &demangling cache variable for type metadata for Participant?);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = *(void **)&v13[*(int *)(v20 + 28)];
    if (v22) {
      id v23 = v22;
    }
    outlined destroy of PushToTalkNotice((uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
  }
  uint64_t v67 = v7;
  type metadata accessor for ConversationControlsBadgingAvatarViewController();
  uint64_t v24 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:handle:badgeImage:)(v19, v22, 0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  long long v65 = &v58;
  uint64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
  MEMORY[0x1F4188790](v25 - 8);
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v28 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)&v58 - v27, 1, 1, v28);
  uint64_t v29 = SBUIIsSystemApertureEnabled();
  if (v29)
  {
    MEMORY[0x1F4188790](v29);
    AccountUpdateNotice.fullSentence.getter();
    outlined destroy of SystemUpdateNotice?((uint64_t)&v58 - v27, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    __swift_storeEnumTagSinglePayload((uint64_t)&v58 - v27, 0, 1, v28);
    outlined init with take of ConversationControlsRecipe?((uint64_t)&v58 - v27, (uint64_t)&v58 - v27, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  }
  *((void *)&v75 + 1) = type metadata accessor for AccountUpdateNotice(0);
  *(void *)&long long v76 = &protocol witness table for AccountUpdateNotice;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v74);
  _s15ConversationKit11ParticipantVWOcTm_3(a2, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for AccountUpdateNotice);
  BYTE8(v76) = 0;
  *(void *)&long long v63 = objc_msgSend(v24, sel_view);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v64 = (char *)&v58 - v27;
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  unint64_t v61 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v34 = v33;
  uint64_t v35 = MEMORY[0x1F4188790](v31);
  Swift::String_optional v37 = (char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)v69;
  uint64_t v60 = v26;
  Swift::String v39 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & v38) + 0x278))(v35);
  *(void *)&long long v62 = (*(uint64_t (**)(char *))((*v39 & *v24) + 0x58))(v37);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  AccountUpdateNotice.title.getter();
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v40).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1C3769830;
  MEMORY[0x1F4188790](v42);
  uint64_t v43 = (uint64_t)v64;
  AccountUpdateNotice.attributedSubtitle.getter();
  *(void *)(v42 + 32) = NSAttributedString.init(_:)();
  *(void *)&v80[0] = v42;
  uint64_t v44 = specialized Array._endMutation()();
  uint64_t v45 = *(void *)&v80[0];
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)&v58 - v61;
  outlined init with copy of Participant?(v43, (uint64_t)&v58 - v61, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  LOBYTE(v39) = static Platform.current.getter() < 2u;
  ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
  v80[0] = v70;
  v80[1] = v71;
  uint64_t v81 = v72;
  char v82 = v73;
  uint64_t v57 = (uint64_t)v46;
  uint64_t v47 = v66;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v74, 0, (void *)v63, 0, v62, isa, v45, 0, v66, 0, 0, v57, (os_log_type_t)v39, 1, 1, 1, (uint8_t *)v80, 0, 0,
    0xFFu);
  uint64_t v48 = v67;
  if (__swift_getEnumTagSinglePayload(v47, 1, v67) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

    outlined destroy of SystemUpdateNotice?(v47, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    return __swift_storeEnumTagSinglePayload(v68, 1, 1, v48);
  }
  else
  {
    uint64_t v50 = (uint64_t)v59;
    outlined init with take of ConversationControlsAction(v47, (uint64_t)v59, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    if (SBUIIsSystemApertureEnabled())
    {
      ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)((void *)v69, 64, (uint64_t)&v74);
      long long v69 = v74;
      long long v66 = v75;
      long long v63 = v76;
      long long v62 = v77;
      uint64_t v51 = v78;
      char v52 = v79;

      outlined destroy of SystemUpdateNotice?(v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      uint64_t v53 = v50 + *(int *)(v48 + 72);
      outlined consume of SystemApertureElement?(*(void **)v53, *(void *)(v53 + 8), *(void **)(v53 + 16), *(void *)(v53 + 24), *(void **)(v53 + 32), *(void *)(v53 + 40), *(void **)(v53 + 48));
      long long v54 = v66;
      *(_OWORD *)uint64_t v53 = v69;
      *(_OWORD *)(v53 + 16) = v54;
      long long v55 = v62;
      *(_OWORD *)(v53 + 32) = v63;
      *(_OWORD *)(v53 + 48) = v55;
      *(void *)(v53 + 64) = v51;
      *(unsigned char *)(v53 + 72) = v52;
    }
    else
    {
      outlined destroy of SystemUpdateNotice?(v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    }
    uint64_t v56 = v68;
    _s15ConversationKit11ParticipantVWOcTm_3(v50, v68, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    __swift_storeEnumTagSinglePayload(v56, 0, 1, v48);
    return outlined destroy of PushToTalkNotice(v50, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

uint64_t ConversationControlsRecipeGenerator.reactionNoticeRecipe(controlsManager:notice:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v73 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v5 - 8);
  *(void *)&long long v71 = &v64[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v72);
  long long v65 = &v64[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for ParticipantReaction(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = &v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for Participant(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v16 = &v64[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v17 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
  *(void *)&long long v74 = a1;
  v17(v14);
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 464))(ObjectType, v19);
  swift_unknownObjectRelease();
  uint64_t v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v21);

  uint64_t v23 = *(void *)a2;
  uint64_t v24 = *(void *)(*(void *)a2 + 16);
  uint64_t v25 = MEMORY[0x1E4FBC860];
  if (v24)
  {
    long long v69 = v22;
    long long v70 = (unsigned char *)a2;
    *(void *)&long long v79 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    uint64_t v26 = v23 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v27 = *(void *)(v9 + 72);
    uint64_t v25 = v79;
    do
    {
      _s15ConversationKit11ParticipantVWOcTm_3(v26, (uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantReaction);
      _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v11, (uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of PushToTalkNotice((uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantReaction);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v25 = v79;
      }
      unint64_t v29 = *(void *)(v25 + 16);
      unint64_t v28 = *(void *)(v25 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v25 = v79;
      }
      *(void *)(v25 + 16) = v29 + 1;
      outlined init with take of ConversationControlsAction((uint64_t)v16, v25+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v29, (void (*)(void))type metadata accessor for Participant);
      v26 += v27;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    a2 = (uint64_t)v70;
    uint64_t v22 = v69;
  }
  type metadata accessor for ConversationControlsBadgingAvatarViewController();
  ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:participants:badgeImage:)((uint64_t)v22, v25, 0);
  uint64_t v31 = v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  long long v70 = v64;
  uint64_t v33 = *(void *)(*(void *)(v32 - 8) + 64);
  MEMORY[0x1F4188790](v32 - 8);
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v35 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)&v64[-v34], 1, 1, v35);
  uint64_t v36 = SBUIIsSystemApertureEnabled();
  if (v36)
  {
    MEMORY[0x1F4188790](v36);
    ReactionNotice.fullSentence.getter();
    outlined destroy of SystemUpdateNotice?((uint64_t)&v64[-v34], (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    __swift_storeEnumTagSinglePayload((uint64_t)&v64[-v34], 0, 1, v35);
    outlined init with take of ConversationControlsRecipe?((uint64_t)&v64[-v34], (uint64_t)&v64[-v34], (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  }
  *((void *)&v80 + 1) = type metadata accessor for ReactionNotice(0);
  *(void *)&long long v81 = &protocol witness table for ReactionNotice;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v79);
  _s15ConversationKit11ParticipantVWOcTm_3(a2, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for ReactionNotice);
  BYTE8(v81) = 0;
  *(void *)&long long v68 = objc_msgSend(v31, sel_view);
  uint64_t v38 = type metadata accessor for UUID();
  *(void *)&long long v67 = v33;
  uint64_t v39 = v38;
  uint64_t v40 = *(void *)(v38 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  long long v69 = &v64[-v34];
  unint64_t v66 = v34;
  uint64_t v43 = &v64[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v44 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v74) + 0x278))(v41);
  unint64_t v45 = (*(uint64_t (**)(unsigned char *))((*v44 & *v31) + 0x58))(v43);
  (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v43, v39);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  ReactionNotice.title.getter();
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v46).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1C3769830;
  MEMORY[0x1F4188790](v48);
  ReactionNotice.attributedSubtitle.getter();
  uint64_t v49 = (uint64_t)v69;
  *(void *)(v48 + 32) = NSAttributedString.init(_:)();
  *(void *)&v85[0] = v48;
  uint64_t v50 = specialized Array._endMutation()();
  uint64_t v51 = *(void *)&v85[0];
  MEMORY[0x1F4188790](v50);
  char v52 = &v64[-v66];
  outlined init with copy of Participant?(v49, (uint64_t)&v64[-v66], (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
  v85[0] = v75;
  v85[1] = v76;
  uint64_t v86 = v77;
  char v87 = v78;
  uint64_t v63 = (uint64_t)v52;
  uint64_t v53 = v71;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v79, 0, (void *)v68, 0, v45, isa, v51, 0, v71, 0, 0, v63, OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)v85, 0, 0,
    0xFFu);
  uint64_t v54 = v72;
  if (__swift_getEnumTagSinglePayload(v53, 1, v72) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v49, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

    outlined destroy of SystemUpdateNotice?(v53, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    return __swift_storeEnumTagSinglePayload(v73, 1, 1, v54);
  }
  else
  {
    uint64_t v56 = v65;
    outlined init with take of ConversationControlsAction(v53, (uint64_t)v65, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    if (SBUIIsSystemApertureEnabled())
    {
      ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)((void *)v74, 64, (uint64_t)&v79);
      long long v74 = v79;
      long long v71 = v80;
      long long v68 = v81;
      long long v67 = v82;
      uint64_t v57 = v83;
      char v58 = v84;

      outlined destroy of SystemUpdateNotice?(v49, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      unint64_t v59 = &v56[*(int *)(v54 + 72)];
      outlined consume of SystemApertureElement?(*(void **)v59, *((void *)v59 + 1), *((void **)v59 + 2), *((void *)v59 + 3), *((void **)v59 + 4), *((void *)v59 + 5), *((void **)v59 + 6));
      long long v60 = v71;
      *(_OWORD *)unint64_t v59 = v74;
      *((_OWORD *)v59 + 1) = v60;
      long long v61 = v67;
      *((_OWORD *)v59 + 2) = v68;
      *((_OWORD *)v59 + 3) = v61;
      *((void *)v59 + 8) = v57;
      v59[72] = v58;
    }
    else
    {
      outlined destroy of SystemUpdateNotice?(v49, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    }
    uint64_t v62 = v73;
    _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v56, v73, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    __swift_storeEnumTagSinglePayload(v62, 0, 1, v54);
    return outlined destroy of PushToTalkNotice((uint64_t)v56, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

void ConversationControlsRecipeGenerator.sessionActionNoticeRecipe(controlsManager:notice:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v106 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v6 - 8);
  *(void *)&long long v103 = (char *)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for SessionActionNotice(0);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  id v17 = (void *)((char *)v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = (void *)MEMORY[0x1E4FBC8C8];
  id v108 = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v15);
  if (v108)
  {
    v94[1] = v3;
    uint64_t v102 = v8;
    uint64_t v19 = v14[7];
    *(void *)&long long v107 = a2;
    uint64_t v20 = (void *)(a2 + v19);
    uint64_t v21 = *(void *)(a2 + v19 + 24);
    uint64_t v22 = *(void *)(a2 + v19 + 32);
    __swift_project_boxed_opaque_existential_1((void *)(a2 + v19), v21);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v22 + 16))(&v113, v21, v22);
    *(void *)&long long v105 = a1;
    if (v113 == 6)
    {
      id v38 = 0;
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
      uint64_t v34 = v20[3];
      uint64_t v35 = v20[4];
      __swift_project_boxed_opaque_existential_1(v20, v34);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
      id v38 = static UIImageView.appIcon(for:)(v36, v37);
      swift_bridgeObjectRelease();
    }
    uint64_t v39 = v107;
    *(void *)&long long v99 = v14[8];
    int v40 = *(unsigned __int8 *)(v107 + v99);
    _s15ConversationKit11ParticipantVWOcTm_3(v107, (uint64_t)v17, (void (*)(void))type metadata accessor for SessionActionNotice);
    uint64_t v95 = v10;
    id v101 = v38;
    if (v40 == 1)
    {
      uint64_t v42 = *v17;
      uint64_t v41 = v17[1];
      unint64_t v44 = v17[2];
      uint64_t v43 = v17[3];
      if (v44 >> 62 != 3
        || (v44 == 0xC000000000000000 ? (BOOL v45 = (v41 | v42 | v43) == 0) : (BOOL v45 = 0),
            v45
         || (v42 == 1 ? (BOOL v46 = v41 == 0) : (BOOL v46 = 0),
             v46 ? (BOOL v47 = v44 == 0xC000000000000000) : (BOOL v47 = 0),
             v47 ? (BOOL v48 = v43 == 0) : (BOOL v48 = 0),
             v48
          || v42 == 2 && !v41 && v44 == 0xC000000000000000 && !v43
          || v42 == 3 && !v41 && v44 == 0xC000000000000000 && !v43
          || v42 == 4 && !v41 && v44 == 0xC000000000000000 && !v43
          || v42 == 5 && !v41 && v44 == 0xC000000000000000 && !v43
          || v42 == 6 && !v41 && v44 == 0xC000000000000000 && !v43
          || v42 != 7
          || v41
          || v44 != 0xC000000000000000
          || v43)))
      {
        outlined copy of SessionActionNotice.NoticeType(*v17, v17[1], v17[2]);
        outlined consume of SessionActionNotice.NoticeType(v42, v41, v44);
        outlined consume of SessionActionNotice.NoticeType(7, 0, 0xC000000000000000);
        outlined destroy of PushToTalkNotice((uint64_t)v17, (void (*)(void))type metadata accessor for SessionActionNotice);
        type metadata accessor for ConversationControlsBadgingAvatarViewController();
        id v54 = objc_msgSend(v38, sel_image);
        id v55 = objc_msgSend(self, sel_clearColor);
        uint64_t v104 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v108, v54, 0, 0, v55);
LABEL_59:
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        id v100 = v94;
        uint64_t v57 = *(void *)(*(void *)(v56 - 8) + 64);
        MEMORY[0x1F4188790](v56 - 8);
        unint64_t v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v59 = (char *)v94 - v58;
        uint64_t v60 = type metadata accessor for AttributedString();
        __swift_storeEnumTagSinglePayload((uint64_t)v94 - v58, 1, 1, v60);
        uint64_t v61 = SBUIIsSystemApertureEnabled();
        uint64_t v62 = v107;
        if (v61)
        {
          MEMORY[0x1F4188790](v61);
          SessionActionNotice.fullSentence.getter();
          outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
          __swift_storeEnumTagSinglePayload((uint64_t)v94 - v58, 0, 1, v60);
          outlined init with take of ConversationControlsRecipe?((uint64_t)v94 - v58, (uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        }
        id v98 = (char *)v94 - v58;
        *((void *)&v114 + 1) = v14;
        *(void *)&long long v115 = &protocol witness table for SessionActionNotice;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v113);
        _s15ConversationKit11ParticipantVWOcTm_3(v62, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for SessionActionNotice);
        BYTE8(v115) = 0;
        uint64_t v64 = v104;
        id v97 = objc_msgSend(v104, sel_view);
        uint64_t v65 = type metadata accessor for UUID();
        uint64_t v66 = *(void *)(v65 - 8);
        uint64_t v67 = MEMORY[0x1F4188790](v65);
        long long v69 = (char *)v94 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
        long long v70 = (void *)MEMORY[0x1E4FBC8C8];
        (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v105) + 0x278))(v67);
        unint64_t v96 = (*(uint64_t (**)(char *))((*v70 & *v64) + 0x58))(v69);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v65);
        int v71 = *(unsigned __int8 *)(v62 + v99);
        if (v71 == 1) {
          uint64_t v72 = SessionActionNotice.actionDescription.getter();
        }
        else {
          SessionActionNotice.attributionDescription.getter();
        }
        uint64_t v74 = v72;
        long long v75 = v73;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        v76._id countAndFlagsBits = v74;
        v76._id object = v75;
        *(NSMutableAttributedString *)&long long v99 = NSMutableAttributedString.__allocating_init(string:)(v76);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v77 = swift_allocObject();
        *(_OWORD *)(v77 + 16) = xmmword_1C3769830;
        MEMORY[0x1F4188790](v77);
        uint64_t v78 = (uint64_t)v98;
        if (v71) {
          SessionActionNotice.attributionDescription.getter();
        }
        else {
          SessionActionNotice.actionDescription.getter();
        }
        uint64_t v79 = type metadata accessor for AttributeContainer();
        MEMORY[0x1F4188790](v79 - 8);
        AttributeContainer.init()();
        AttributedString.init(_:attributes:)();
        *(void *)(v77 + 32) = NSAttributedString.init(_:)();
        *(void *)&v119[0] = v77;
        uint64_t v80 = specialized Array._endMutation()();
        uint64_t v81 = *(void *)&v119[0];
        MEMORY[0x1F4188790](v80);
        outlined init with copy of Participant?(v78, (uint64_t)v94 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        long long v82 = (void *)v105;
        ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
        v119[0] = v109;
        v119[1] = v110;
        uint64_t v120 = v111;
        char v121 = v112;
        uint64_t v83 = v103;
        ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v113, 0, v97, 0, v96, (void *)v99, v81, 0, v103, 0, 0, (uint64_t)v94 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0), OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)v119, 0, 0,
          0xFFu);
        uint64_t v84 = v102;
        if (__swift_getEnumTagSinglePayload(v83, 1, v102) == 1)
        {
          outlined destroy of SystemUpdateNotice?(v78, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

          outlined destroy of SystemUpdateNotice?(v83, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
          __swift_storeEnumTagSinglePayload(v106, 1, 1, v84);
        }
        else
        {
          uint64_t v85 = (uint64_t)v95;
          outlined init with take of ConversationControlsAction(v83, (uint64_t)v95, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          int v86 = SBUIIsSystemApertureEnabled();
          uint64_t v87 = v106;
          if (v86)
          {
            SessionActionNotice.noticeAccessory.getter();
            unint64_t v88 = *((void *)&v113 + 1);
            if (*((void *)&v113 + 1) >= 2uLL) {
              outlined consume of NoticeAccessory(v113, *((unint64_t *)&v113 + 1));
            }
            ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(v82, (v88 > 1) | 0x40, (uint64_t)&v113);
            long long v107 = v113;
            long long v105 = v114;
            long long v103 = v115;
            long long v99 = v116;
            uint64_t v89 = v117;
            char v90 = v118;

            outlined destroy of SystemUpdateNotice?(v78, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
            uint64_t v91 = v85 + *(int *)(v84 + 72);
            outlined consume of SystemApertureElement?(*(void **)v91, *(void *)(v91 + 8), *(void **)(v91 + 16), *(void *)(v91 + 24), *(void **)(v91 + 32), *(void *)(v91 + 40), *(void **)(v91 + 48));
            long long v92 = v105;
            *(_OWORD *)uint64_t v91 = v107;
            *(_OWORD *)(v91 + 16) = v92;
            long long v93 = v99;
            *(_OWORD *)(v91 + 32) = v103;
            *(_OWORD *)(v91 + 48) = v93;
            *(void *)(v91 + 64) = v89;
            *(unsigned char *)(v91 + 72) = v90;
          }
          else
          {
            outlined destroy of SystemUpdateNotice?(v78, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
          }
          _s15ConversationKit11ParticipantVWOcTm_3(v85, v87, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
          __swift_storeEnumTagSinglePayload(v87, 0, 1, v84);
          outlined destroy of PushToTalkNotice(v85, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
        }

        return;
      }
      outlined consume of SessionActionNotice.NoticeType(7, 0, 0xC000000000000000);
      outlined consume of SessionActionNotice.NoticeType(7, 0, 0xC000000000000000);
      uint64_t v39 = v107;
    }
    outlined destroy of PushToTalkNotice((uint64_t)v17, (void (*)(void))type metadata accessor for SessionActionNotice);
    id v49 = objc_msgSend(self, sel_tu_contactStoreConfigurationForConversation_, v108);
    id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v49);
    outlined init with copy of Participant?(v39 + v14[5], (uint64_t)v13, &demangling cache variable for type metadata for Participant?);
    uint64_t v51 = type metadata accessor for Participant(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v51) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v13, &demangling cache variable for type metadata for Participant?);
      char v52 = 0;
    }
    else
    {
      char v52 = *(void **)&v13[*(int *)(v51 + 28)];
      if (v52) {
        id v53 = v52;
      }
      outlined destroy of PushToTalkNotice((uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
    }
    type metadata accessor for ConversationControlsBadgingAvatarViewController();
    uint64_t v104 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:handle:badgeImage:)(v50, v52, objc_msgSend(v38, sel_image));

    goto LABEL_59;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationControls);
  uint64_t v24 = a1;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    unint64_t v29 = v18;
    uint64_t v30 = v28;
    *(void *)&long long v113 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v31 = (*(uint64_t (**)(void))((*v29 & *v24) + 0x270))();
    swift_getObjectType();
    *(void *)&v119[0] = v31;
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)&v119[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v25, v26, "sessionActionNoticeRecipe: No active conversation, call: %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v30, -1, -1);
    MEMORY[0x1C87760E0](v27, -1, -1);
  }
  else
  {
  }
  __swift_storeEnumTagSinglePayload(v106, 1, 1, v8);
}

uint64_t ConversationControlsRecipeGenerator.appLaunchNoticeRecipe(controlsManager:notice:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v11);
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    *(void *)&long long v86 = v9;
    v77[1] = v3;
    uint64_t v78 = v13;
    uint64_t v88 = v10;
    uint64_t v90 = a3;
    type metadata accessor for ConversationControlsBadgingAvatarViewController();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
    uint64_t v17 = type metadata accessor for AppLaunchNotice(0);
    uint64_t v18 = (uint64_t *)(*(void *)(a2 + *(int *)(v17 + 28))
                    + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier);
    uint64_t v19 = *v18;
    uint64_t v20 = (void *)v18[1];
    swift_bridgeObjectRetain();
    id v21 = static UIImageView.appIcon(for:)(v19, v20);
    swift_bridgeObjectRelease();
    id v22 = objc_msgSend(v21, sel_image);

    id v23 = objc_msgSend(self, sel_clearColor);
    id v85 = v16;
    uint64_t v24 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(v85, v22, 0, 0, v23);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    uint64_t v87 = v77;
    uint64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
    MEMORY[0x1F4188790](v25 - 8);
    *(void *)&long long v89 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v27 = (char *)v77 - v89;
    uint64_t v28 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v27, 1, 1, v28);
    uint64_t v29 = SBUIIsSystemApertureEnabled();
    if (v29)
    {
      MEMORY[0x1F4188790](v29);
      uint64_t v30 = (char *)v77 - v89;
      AppLaunchNotice.fullSentence.getter();
      outlined destroy of SystemUpdateNotice?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v28);
      outlined init with take of ConversationControlsRecipe?((uint64_t)v30, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    }
    *((void *)&v96 + 1) = v17;
    *(void *)&long long v97 = &protocol witness table for AppLaunchNotice;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v95);
    _s15ConversationKit11ParticipantVWOcTm_3(a2, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for AppLaunchNotice);
    BYTE8(v97) = 0;
    *(void *)&long long v83 = objc_msgSend(v24, sel_view);
    uint64_t v32 = type metadata accessor for UUID();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v84 = v27;
    uint64_t v34 = v33;
    uint64_t v35 = MEMORY[0x1F4188790](v32);
    Swift::String_optional v37 = (char *)v77 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v38 = *a1;
    uint64_t v81 = v26;
    uint64_t v39 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & v38) + 0x278))(v35);
    *(void *)&long long v82 = (*(uint64_t (**)(char *))((*v39 & *v24) + 0x58))(v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v32);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    uint64_t v40 = AppLaunchNotice.noticeContent.getter();
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    v43._id countAndFlagsBits = v40;
    v43._id object = v42;
    Class isa = NSMutableAttributedString.__allocating_init(string:)(v43).super.super.isa;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_1C3769830;
    MEMORY[0x1F4188790](v44);
    AppLaunchNotice.noticeContent.getter();
    swift_bridgeObjectRelease();
    uint64_t v45 = type metadata accessor for AttributeContainer();
    id v79 = v24;
    MEMORY[0x1F4188790](v45 - 8);
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    uint64_t v46 = NSAttributedString.init(_:)();
    uint64_t v47 = (uint64_t)v84;
    *(void *)(v44 + 32) = v46;
    *(void *)&v101[0] = v44;
    uint64_t v48 = specialized Array._endMutation()();
    uint64_t v49 = *(void *)&v101[0];
    MEMORY[0x1F4188790](v48);
    id v50 = (char *)v77 - v89;
    outlined init with copy of Participant?(v47, (uint64_t)v77 - v89, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
    v101[0] = v91;
    v101[1] = v92;
    uint64_t v102 = v93;
    char v103 = v94;
    uint64_t v76 = (uint64_t)v50;
    uint64_t v51 = v86;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v95, 0, (void *)v83, 0, v82, isa, v49, 0, v86, 0, 0, v76, OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)v101, 0, 0,
      0xFFu);
    uint64_t v52 = v88;
    if (__swift_getEnumTagSinglePayload(v51, 1, v88) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v47, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

      outlined destroy of SystemUpdateNotice?(v51, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v90, 1, 1, v52);
    }
    else
    {
      id v67 = v79;
      uint64_t v68 = (uint64_t)v78;
      outlined init with take of ConversationControlsAction(v51, (uint64_t)v78, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      int v69 = SBUIIsSystemApertureEnabled();
      uint64_t v70 = v90;
      if (v69)
      {
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(a1, 64, (uint64_t)&v95);
        long long v89 = v95;
        long long v86 = v96;
        long long v83 = v97;
        long long v82 = v98;
        uint64_t v71 = v99;
        char v72 = v100;

        outlined destroy of SystemUpdateNotice?(v47, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        uint64_t v73 = v68 + *(int *)(v52 + 72);
        outlined consume of SystemApertureElement?(*(void **)v73, *(void *)(v73 + 8), *(void **)(v73 + 16), *(void *)(v73 + 24), *(void **)(v73 + 32), *(void *)(v73 + 40), *(void **)(v73 + 48));
        long long v74 = v86;
        *(_OWORD *)uint64_t v73 = v89;
        *(_OWORD *)(v73 + 16) = v74;
        long long v75 = v82;
        *(_OWORD *)(v73 + 32) = v83;
        *(_OWORD *)(v73 + 48) = v75;
        *(void *)(v73 + 64) = v71;
        *(unsigned char *)(v73 + 72) = v72;
      }
      else
      {
        outlined destroy of SystemUpdateNotice?(v47, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      }
      _s15ConversationKit11ParticipantVWOcTm_3(v68, v70, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v70, 0, 1, v52);
      return outlined destroy of PushToTalkNotice(v68, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationControls);
    id v55 = a1;
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v90 = a3;
      unint64_t v59 = (uint8_t *)v58;
      uint64_t v60 = v10;
      uint64_t v61 = swift_slowAlloc();
      *(void *)&long long v95 = v61;
      *(_DWORD *)unint64_t v59 = 136315138;
      uint64_t v62 = (*(uint64_t (**)(void))((*v14 & *v55) + 0x270))();
      swift_getObjectType();
      *(void *)&v101[0] = v62;
      uint64_t v63 = String.init<A>(describing:)();
      *(void *)&v101[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v56, v57, "appLaunchNoticeRecipe: No active conversation, call: %s", v59, 0xCu);
      swift_arrayDestroy();
      uint64_t v65 = v61;
      uint64_t v10 = v60;
      MEMORY[0x1C87760E0](v65, -1, -1);
      uint64_t v66 = v59;
      a3 = v90;
      MEMORY[0x1C87760E0](v66, -1, -1);
    }
    else
    {
    }
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v10);
  }
}

uint64_t ConversationControlsRecipeGenerator.systemUpdateNoticeRecipe(controlsManager:notice:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    return ConversationControlsRecipeGenerator.handoffApprovalNoticeRecipe(controlsManager:notice:)(a1, a2, a3);
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1C2F90000, v6, v7, "Currently unsupported", v8, 2u);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    uint64_t v9 = type metadata accessor for ConversationControlsRecipe();
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v9);
  }
}

uint64_t ConversationControlsRecipeGenerator.pttNoticeRecipe(controlsManager:notice:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))(v12);
  self;
  uint64_t v16 = (void *)swift_dynamicCastObjCClass();
  if (v16 && (id v17 = ConversationControlsRecipeGenerator.pttLeadingAccessoryView(call:)(v16)) != 0)
  {
    uint64_t v20 = v17;
    id v21 = v18;
    uint64_t v41 = v15;
    void v37[2] = v4;
    uint64_t v38 = v14;
    uint64_t v46 = a3;
    unint64_t v44 = v19;
    v47[3] = type metadata accessor for PushToTalkNotice(0);
    v47[4] = (uint64_t)&protocol witness table for PushToTalkNotice;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v47);
    _s15ConversationKit11ParticipantVWOcTm_3(a2, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for PushToTalkNotice);
    char v48 = 0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    uint64_t v45 = v11;
    id v43 = v21;
    id v42 = v20;
    uint64_t v40 = v21;
    v23._id countAndFlagsBits = PushToTalkNotice.title.getter();
    Class isa = NSMutableAttributedString.__allocating_init(string:)(v23).super.super.isa;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1C3769830;
    uint64_t v25 = type metadata accessor for AttributedString();
    MEMORY[0x1F4188790](v25);
    v37[1] = a2;
    PushToTalkNotice.attributedSubtitle.getter();
    uint64_t v26 = v45;
    *(void *)(v24 + 32) = NSAttributedString.init(_:)();
    *(void *)&v49[0] = v24;
    specialized Array._endMutation()();
    uint64_t v27 = *(void *)&v49[0];
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 64);
    MEMORY[0x1F4188790](v28 - 8);
    v37[0] = v25;
    __swift_storeEnumTagSinglePayload((uint64_t)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v25);
    uint64_t v50 = 0;
    memset(v49, 0, sizeof(v49));
    char v51 = -2;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)v47, 0, v20, v40, v44, isa, v27, 0, (uint64_t)v10, 0, 0, (uint64_t)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)v49, 0, 0,
      0xFFu);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v26) == 1)
    {

      swift_unknownObjectRelease();
      outlined destroy of SystemUpdateNotice?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v46, 1, 1, v26);
    }
    else
    {
      id v31 = v43;
      id v32 = v42;
      uint64_t v33 = (uint64_t)v38;
      outlined init with take of ConversationControlsAction((uint64_t)v10, (uint64_t)v38, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      uint64_t v34 = SBUIIsSystemApertureEnabled();
      if (v34)
      {
        MEMORY[0x1F4188790](v34);
        uint64_t v35 = (char *)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        PushToTalkNotice.fullSentence.getter();
        __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37[0]);
        outlined assign with take of Participant?((uint64_t)v35, v33 + *(int *)(v26 + 36), (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        ConversationControlsRecipeGenerator.makePTTHUDSystemApertureElement(controlsManager:alertingStyle:)((uint64_t)a1, 64, (uint64_t)v47);

        swift_unknownObjectRelease();
        outlined assign with take of Participant?((uint64_t)v47, v33 + *(int *)(v26 + 72), (uint64_t *)&demangling cache variable for type metadata for SystemApertureElement?);
      }
      else
      {

        swift_unknownObjectRelease();
      }
      uint64_t v36 = v46;
      _s15ConversationKit11ParticipantVWOcTm_3(v33, v46, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v36, 0, 1, v26);
      return outlined destroy of PushToTalkNotice(v33, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    swift_unknownObjectRelease();
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v11);
  }
}

uint64_t ConversationControlsRecipeGenerator.faceIDUnavailableRecipe(controlsManager:notice:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v11);

  if (v15)
  {
    *(void *)&long long v79 = a2;
    *(void *)&long long v82 = v9;
    uint64_t v75 = v3;
    uint64_t v76 = v13;
    *(void *)&long long v83 = a1;
    uint64_t v86 = v10;
    uint64_t v84 = a3;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    uint64_t v16 = (void *)*MEMORY[0x1E4FB2998];
    v100[0] = 0x646965636166;
    v100[1] = 0xE600000000000000;
    v100[2] = 3;
    v100[3] = v16;
    __int16 v101 = 0;
    uint64_t v102 = 4;
    char v103 = 0;
    uint64_t v104 = 0;
    id v17 = v16;
    id v18 = static UIImage.symbolImage(for:)((uint64_t)v100);

    swift_bridgeObjectRelease();
    id v19 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
    id v80 = v18;
    id v20 = objc_msgSend(v19, sel_initWithImage_, v18);
    objc_msgSend(v20, sel_setContentMode_, 1);
    id v21 = objc_msgSend(self, sel_secondaryLabelColor);
    objc_msgSend(v20, sel_setTintColor_, v21);

    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    uint64_t v81 = &v75;
    uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
    MEMORY[0x1F4188790](v22 - 8);
    *(void *)&long long v85 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v24 = (char *)&v75 - v85;
    uint64_t v25 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 1, v25);
    uint64_t v26 = SBUIIsSystemApertureEnabled();
    if (v26)
    {
      Class isa = (Class)&v75;
      MEMORY[0x1F4188790](v26);
      uint64_t v27 = (char *)&v75 - v85;
      id v28 = objc_msgSend(self, sel_conversationKit);
      v105._id object = (void *)0xE000000000000000;
      v29._id object = (void *)0x80000001C3798A70;
      v29._id countAndFlagsBits = 0xD000000000000012;
      v30.value._id countAndFlagsBits = 0x61737265766E6F43;
      v30.value._id object = (void *)0xEF74694B6E6F6974;
      v31._id countAndFlagsBits = 0;
      v31._id object = (void *)0xE000000000000000;
      v105._id countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v105);

      uint64_t v32 = type metadata accessor for AttributeContainer();
      MEMORY[0x1F4188790](v32 - 8);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      outlined destroy of SystemUpdateNotice?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v25);
      outlined init with take of ConversationControlsRecipe?((uint64_t)v27, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    }
    *((void *)&v92 + 1) = type metadata accessor for FaceIDUnavailableNotice(0);
    *(void *)&long long v93 = &protocol witness table for FaceIDUnavailableNotice;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v91);
    _s15ConversationKit11ParticipantVWOcTm_3(v79, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for FaceIDUnavailableNotice);
    BYTE8(v93) = 0;
    id v34 = v20;
    *(void *)&long long v79 = objc_msgSend(v34, sel_hash);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    uint64_t v35 = self;
    id v36 = objc_msgSend(v35, sel_conversationKit);
    uint64_t v77 = v23;
    v106._id object = (void *)0xE000000000000000;
    v37._id object = (void *)0x80000001C3798A70;
    v37._id countAndFlagsBits = 0xD000000000000012;
    v38.value._id countAndFlagsBits = 0x61737265766E6F43;
    v38.value._id object = (void *)0xEF74694B6E6F6974;
    v39._id countAndFlagsBits = 0;
    v39._id object = (void *)0xE000000000000000;
    v106._id countAndFlagsBits = 0;
    Swift::String v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, (NSBundle)v36, v39, v106);

    Class isa = NSMutableAttributedString.__allocating_init(string:)(v40).super.super.isa;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1C3769830;
    MEMORY[0x1F4188790](v41);
    id v43 = [v35 (SEL)(v42 + 2609)];
    v107._id object = (void *)0xE000000000000000;
    v44._id countAndFlagsBits = 0x525F474E49525544;
    v44._id object = (void *)0xE900000000000043;
    v45.value._id countAndFlagsBits = 0x61737265766E6F43;
    v45.value._id object = (void *)0xEF74694B6E6F6974;
    v46._id countAndFlagsBits = 0;
    v46._id object = (void *)0xE000000000000000;
    v107._id countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v44, v45, (NSBundle)v43, v46, v107);

    uint64_t v47 = type metadata accessor for AttributeContainer();
    MEMORY[0x1F4188790](v47 - 8);
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    *(void *)(v41 + 32) = NSAttributedString.init(_:)();
    *(void *)&v97[0] = v41;
    uint64_t v48 = specialized Array._endMutation()();
    uint64_t v49 = *(void *)&v97[0];
    MEMORY[0x1F4188790](v48);
    uint64_t v50 = (char *)&v75 - v85;
    outlined init with copy of Participant?((uint64_t)v24, (uint64_t)&v75 - v85, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    char v51 = (void *)v83;
    ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
    v97[0] = v87;
    v97[1] = v88;
    uint64_t v98 = v89;
    char v99 = v90;
    uint64_t v74 = (uint64_t)v50;
    uint64_t v52 = v82;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v91, 0, v34, 0, v79, isa, v49, 0, v82, 0, 0, v74, OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)v97, 0, 0,
      0xFFu);
    uint64_t v53 = v86;
    if (__swift_getEnumTagSinglePayload(v52, 1, v86) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

      outlined destroy of SystemUpdateNotice?(v52, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v84, 1, 1, v53);
    }
    else
    {
      uint64_t v66 = (uint64_t)v76;
      outlined init with take of ConversationControlsAction(v52, (uint64_t)v76, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      int v67 = SBUIIsSystemApertureEnabled();
      uint64_t v68 = v84;
      if (v67)
      {
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(v51, 64, (uint64_t)&v91);
        long long v85 = v91;
        long long v83 = v92;
        long long v82 = v93;
        long long v79 = v94;
        uint64_t v69 = v95;
        char v70 = v96;

        outlined destroy of SystemUpdateNotice?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        uint64_t v71 = v66 + *(int *)(v53 + 72);
        outlined consume of SystemApertureElement?(*(void **)v71, *(void *)(v71 + 8), *(void **)(v71 + 16), *(void *)(v71 + 24), *(void **)(v71 + 32), *(void *)(v71 + 40), *(void **)(v71 + 48));
        long long v72 = v83;
        *(_OWORD *)uint64_t v71 = v85;
        *(_OWORD *)(v71 + 16) = v72;
        long long v73 = v79;
        *(_OWORD *)(v71 + 32) = v82;
        *(_OWORD *)(v71 + 48) = v73;
        *(void *)(v71 + 64) = v69;
        *(unsigned char *)(v71 + 72) = v70;
      }
      else
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      }
      _s15ConversationKit11ParticipantVWOcTm_3(v66, v68, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v68, 0, 1, v53);
      return outlined destroy of PushToTalkNotice(v66, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.conversationControls);
    uint64_t v56 = a1;
    os_log_type_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v86 = v10;
      uint64_t v60 = (uint8_t *)v59;
      uint64_t v61 = swift_slowAlloc();
      *(void *)&long long v91 = v61;
      *(_DWORD *)uint64_t v60 = 136315138;
      uint64_t v62 = (*(uint64_t (**)(void))((*v14 & *v56) + 0x270))();
      swift_getObjectType();
      v100[0] = v62;
      uint64_t v63 = String.init<A>(describing:)();
      v100[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, (uint64_t *)&v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v57, v58, "faceIDUnavailableRecipe: No active conversation, call: %s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v61, -1, -1);
      uint64_t v65 = v60;
      uint64_t v10 = v86;
      MEMORY[0x1C87760E0](v65, -1, -1);
    }
    else
    {
    }
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v10);
  }
}

uint64_t ConversationControlsRecipeGenerator.handoffApprovalNoticeRecipe(controlsManager:notice:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))(v11);

  if (v15)
  {
    *(void *)&long long v75 = a2;
    *(void *)&long long v71 = v9;
    uint64_t v65 = v3;
    uint64_t v66 = v13;
    *(void *)&long long v72 = a1;
    uint64_t v77 = v10;
    uint64_t v74 = a3;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    uint64_t v16 = (void *)*MEMORY[0x1E4FB2950];
    strcpy((char *)v91, "appletv.fill");
    BYTE5(v91[1]) = 0;
    HIWORD(v91[1]) = -5120;
    _OWORD v91[2] = 2;
    v91[3] = v16;
    __int16 v92 = 0;
    uint64_t v93 = 6;
    char v94 = 0;
    uint64_t v95 = 0;
    id v17 = v16;
    id v18 = static UIImage.symbolImage(for:)((uint64_t)v91);

    swift_bridgeObjectRelease();
    id v19 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
    id v69 = v18;
    id v20 = objc_msgSend(v19, sel_initWithImage_, v18);
    objc_msgSend(v20, sel_setContentMode_, 1);
    id v21 = objc_msgSend(self, sel_secondaryLabelColor);
    objc_msgSend(v20, sel_setTintColor_, v21);

    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    char v70 = &v64;
    uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
    MEMORY[0x1F4188790](v22 - 8);
    unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v25 = type metadata accessor for AttributedString();
    __swift_storeEnumTagSinglePayload((uint64_t)&v64 - v24, 1, 1, v25);
    uint64_t v26 = SBUIIsSystemApertureEnabled();
    if (v26)
    {
      MEMORY[0x1F4188790](v26);
      SystemUpdateNotice.fullSentence.getter();
      outlined destroy of SystemUpdateNotice?((uint64_t)&v64 - v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      __swift_storeEnumTagSinglePayload((uint64_t)&v64 - v24, 0, 1, v25);
      outlined init with take of ConversationControlsRecipe?((uint64_t)&v64 - v24, (uint64_t)&v64 - v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    }
    *((void *)&v83 + 1) = type metadata accessor for SystemUpdateNotice(0);
    *(void *)&long long v84 = &protocol witness table for SystemUpdateNotice;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v82);
    _s15ConversationKit11ParticipantVWOcTm_3(v75, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for SystemUpdateNotice);
    BYTE8(v84) = 0;
    id v28 = v20;
    *(void *)&long long v68 = objc_msgSend(v28, sel_hash);
    uint64_t v29 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    SystemUpdateNotice.title.getter(v29, v30, v31, v32, v33, v34, v35, v36, v64, v65, (uint64_t)v66, (uint64_t)isa, v68, *((uint64_t *)&v68 + 1), (uint64_t)v69, (uint64_t)v70, v71, *((uint64_t *)&v71 + 1), v72,
      *((uint64_t *)&v72 + 1),
      v73,
      v74,
      v75,
      *((uint64_t *)&v75 + 1),
      v76,
      v77);
    Class isa = NSMutableAttributedString.__allocating_init(string:)(v37).super.super.isa;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1C3769830;
    MEMORY[0x1F4188790](v38);
    SystemUpdateNotice.attributedSubtitle.getter();
    *(void *)(v38 + 32) = NSAttributedString.init(_:)();
    *(void *)&v88[0] = v38;
    uint64_t v39 = specialized Array._endMutation()();
    uint64_t v40 = *(void *)&v88[0];
    MEMORY[0x1F4188790](v39);
    outlined init with copy of Participant?((uint64_t)&v64 - v24, (uint64_t)&v64 - v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    uint64_t v41 = (void *)v72;
    ConversationControlsRecipeGenerator.buttonShelfActions(controlsManager:)();
    v88[0] = v78;
    v88[1] = v79;
    uint64_t v89 = v80;
    char v90 = v81;
    uint64_t v42 = v71;
    ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v82, 0, v28, 0, v68, isa, v40, 0, v71, 0, 0, (uint64_t)&v64 - v24, OS_LOG_TYPE_DEFAULT, 1, 1, 1, (uint8_t *)v88, 0, 0,
      0xFFu);
    uint64_t v43 = v77;
    if (__swift_getEnumTagSinglePayload(v42, 1, v77) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v64 - v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);

      outlined destroy of SystemUpdateNotice?(v42, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      return __swift_storeEnumTagSinglePayload(v74, 1, 1, v43);
    }
    else
    {
      uint64_t v56 = (uint64_t)v66;
      outlined init with take of ConversationControlsAction(v42, (uint64_t)v66, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      int v57 = SBUIIsSystemApertureEnabled();
      uint64_t v58 = v74;
      if (v57)
      {
        ConversationControlsRecipeGenerator.makeActiveFaceTimeCallSystemApertureElement(for:alertingStyle:)(v41, 64, (uint64_t)&v82);
        long long v75 = v82;
        long long v72 = v83;
        long long v71 = v84;
        long long v68 = v85;
        uint64_t v59 = v86;
        char v60 = v87;

        outlined destroy of SystemUpdateNotice?((uint64_t)&v64 - v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        uint64_t v61 = v56 + *(int *)(v43 + 72);
        outlined consume of SystemApertureElement?(*(void **)v61, *(void *)(v61 + 8), *(void **)(v61 + 16), *(void *)(v61 + 24), *(void **)(v61 + 32), *(void *)(v61 + 40), *(void **)(v61 + 48));
        long long v62 = v72;
        *(_OWORD *)uint64_t v61 = v75;
        *(_OWORD *)(v61 + 16) = v62;
        long long v63 = v68;
        *(_OWORD *)(v61 + 32) = v71;
        *(_OWORD *)(v61 + 48) = v63;
        *(void *)(v61 + 64) = v59;
        *(unsigned char *)(v61 + 72) = v60;
      }
      else
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)&v64 - v24, (uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      }
      _s15ConversationKit11ParticipantVWOcTm_3(v56, v58, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      __swift_storeEnumTagSinglePayload(v58, 0, 1, v43);
      return outlined destroy of PushToTalkNotice(v56, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.conversationControls);
    Swift::String v46 = a1;
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v77 = v10;
      uint64_t v50 = (uint8_t *)v49;
      uint64_t v51 = swift_slowAlloc();
      *(void *)&long long v82 = v51;
      *(_DWORD *)uint64_t v50 = 136315138;
      uint64_t v52 = (*(uint64_t (**)(void))((*v14 & *v46) + 0x270))();
      swift_getObjectType();
      v91[0] = v52;
      uint64_t v53 = String.init<A>(describing:)();
      v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v47, v48, "handoffApprovalNoticeRecipe: No active conversation, call: %s", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v51, -1, -1);
      uint64_t v55 = v50;
      uint64_t v10 = v77;
      MEMORY[0x1C87760E0](v55, -1, -1);
    }
    else
    {
    }
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v10);
  }
}

uint64_t ConversationControlsRecipeGenerator.multipleAuthorizationRequestRecipe(withNumber:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = 2;
  long long v56 = 0u;
  long long v57 = 0u;
  char v58 = 6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v12);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v51 = v8;
  uint64_t v53 = v6;
  v13.super.Class isa = (Class)static LocalizationSource.conversationControls;
  uint64_t v14 = *(void *)algn_1EA37DFB8;
  uint64_t v15 = (void *)qword_1EA37DFC0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = MEMORY[0x1E4FBB550];
  long long v52 = xmmword_1C3769620;
  *(_OWORD *)(v16 + 16) = xmmword_1C3769620;
  uint64_t v18 = MEMORY[0x1E4FBB5C8];
  *(void *)(v16 + 56) = v17;
  *(void *)(v16 + 64) = v18;
  *(void *)(v16 + 32) = a1;
  v63._id object = (void *)0xE000000000000000;
  v19._id countAndFlagsBits = 0x706F655020756C25;
  v19._id object = (void *)0xEA0000000000656CLL;
  v20.value._id countAndFlagsBits = v14;
  v20.value._id object = v15;
  v21._id countAndFlagsBits = 0;
  v21._id object = (void *)0xE000000000000000;
  v63._id countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, v13, v21, v63);
  uint64_t v22 = String.init(format:locale:arguments:)();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  outlined destroy of SystemUpdateNotice?((uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  v25._id countAndFlagsBits = v22;
  v25._id object = v24;
  v26.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v25).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1C3769830;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v28 = unk_1EA37DFA0;
  uint64_t v29 = (void *)qword_1EA37DFA8;
  id v30 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v64._id object = (void *)0xE000000000000000;
  v31._id object = (void *)0x80000001C3798A00;
  v31._id countAndFlagsBits = 0xD00000000000002FLL;
  v32.value._id countAndFlagsBits = v28;
  v32.value._id object = v29;
  v33._id countAndFlagsBits = 0;
  v33._id object = (void *)0xE000000000000000;
  v64._id countAndFlagsBits = 0;
  Swift::String v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v30, v33, v64);
  swift_bridgeObjectRelease();

  *(NSMutableAttributedString *)(v27 + 32) = NSMutableAttributedString.__allocating_init(string:)(v34);
  uint64_t v59 = v27;
  specialized Array._endMutation()();
  uint64_t v35 = v59;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v36 - 8);
  uint64_t v38 = (char *)&v50 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v38, 1, 1, v39);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v52;
  swift_storeEnumTagMultiPayload();
  uint64_t v59 = v40;
  long long v60 = 0u;
  long long v61 = 0u;
  char v62 = 0;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v55, 0, 0, 0, 0, v26.super.super.isa, v35, 0, (uint64_t)v5, 0, 0, (uint64_t)v38, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v59, 0, 0,
    0xFFu);
  uint64_t v41 = v53;
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v53) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    return __swift_storeEnumTagSinglePayload(v54, 1, 1, v41);
  }
  else
  {
    uint64_t v43 = (uint64_t)v51;
    outlined init with take of ConversationControlsAction((uint64_t)v5, (uint64_t)v51, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    if (SBUIIsSystemApertureEnabled())
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.conversationControls);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl(&dword_1C2F90000, v45, v46, "multipleAuthorizationRequestRecipe: [SystemAperture] showing content, but below system aperture", v47, 2u);
        MEMORY[0x1C87760E0](v47, -1, -1);
      }

      uint64_t v48 = v43 + *(int *)(v41 + 72);
      outlined consume of SystemApertureElement?(*(void **)v48, *(void *)(v48 + 8), *(void **)(v48 + 16), *(void *)(v48 + 24), *(void **)(v48 + 32), *(void *)(v48 + 40), *(void **)(v48 + 48));
      *(void *)uint64_t v48 = 1;
      *(_OWORD *)(v48 + 8) = 0u;
      *(_OWORD *)(v48 + 24) = 0u;
      *(_OWORD *)(v48 + 40) = 0u;
      *(_OWORD *)(v48 + 56) = 0u;
      *(unsigned char *)(v48 + 72) = 0;
    }
    uint64_t v49 = v54;
    _s15ConversationKit11ParticipantVWOcTm_3(v43, v54, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    __swift_storeEnumTagSinglePayload(v49, 0, 1, v41);
    return outlined destroy of PushToTalkNotice(v43, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

uint64_t ConversationControlsRecipeGenerator.singleAuthoriziationRequestRecipe(for:participant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v59 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = 0;
  if ((Participant.isDestinationTemporary.getter() & 1) == 0)
  {
    id v11 = objc_msgSend(self, sel_tu_contactStoreConfigurationForConversation_, a1);
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v11);
    NSBundle v13 = *(void **)(a2 + *(int *)(type metadata accessor for Participant(0) + 28));
    if (v13) {
      id v14 = v13;
    }
    type metadata accessor for ConversationControlsBadgingAvatarViewController();
    uint64_t v10 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:handle:badgeImage:)(v12, v13, 0);
  }
  uint64_t v66 = 2;
  long long v67 = 0u;
  long long v68 = 0u;
  char v69 = 6;
  id v58 = v10;
  if (v10)
  {
    id v57 = objc_msgSend(v10, sel_view);
    id v56 = objc_msgSend(v10, sel_hash);
  }
  else
  {
    id v56 = 0;
    id v57 = 0;
  }
  uint64_t v53 = v9;
  uint64_t v60 = v7;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  Participant.contactDetails.getter();
  uint64_t v15 = (void *)v62;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v17 = v16;
  Swift::String v19 = v18;
  swift_bridgeObjectRelease();
  v20._id countAndFlagsBits = v17;
  v20._id object = v19;
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v20).super.super.isa;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1C3769830;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v22 = unk_1EA37DFA0;
  uint64_t v23 = (void *)qword_1EA37DFA8;
  id v24 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v70._id object = (void *)0xE000000000000000;
  v25._id object = (void *)0x80000001C3798A00;
  v25._id countAndFlagsBits = 0xD00000000000002FLL;
  v26.value._id countAndFlagsBits = v22;
  v26.value._id object = v23;
  v27._id countAndFlagsBits = 0;
  v27._id object = (void *)0xE000000000000000;
  v70._id countAndFlagsBits = 0;
  Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, (NSBundle)v24, v27, v70);
  swift_bridgeObjectRelease();

  *(NSMutableAttributedString *)(v21 + 32) = NSMutableAttributedString.__allocating_init(string:)(v28);
  uint64_t v62 = v21;
  specialized Array._endMutation()();
  uint64_t v54 = v62;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x1F4188790](v29 - 8);
  Swift::String v31 = (char *)&v52 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for AttributedString();
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 1, 1, v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  uint64_t v33 = *(void *)(type metadata accessor for ConversationControlsAction() - 8);
  uint64_t v34 = *(void *)(v33 + 72);
  unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1C37696D0;
  unint64_t v37 = v36 + v35;
  uint64_t v38 = a2 + *(int *)(type metadata accessor for Participant(0) + 20);
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16);
  v40(v37, v38, v39);
  swift_storeEnumTagMultiPayload();
  v40(v37 + v34, v38, v39);
  swift_storeEnumTagMultiPayload();
  uint64_t v62 = v36;
  long long v63 = 0u;
  long long v64 = 0u;
  char v65 = 0;
  uint64_t v51 = (uint64_t)v31;
  uint64_t v41 = v59;
  ConversationControlsRecipe.init(type:avatar:leadingAccessoryView:title:subtitles:subtitleLeadingBadge:fullSentence:showsInfoButton:showsSubtitleChevron:titleConfiguration:subtitleConfiguration:actions:leadingViewType:)((uint64_t)&v66, 0, v57, 0, (unint64_t)v56, isa, v54, 0, v59, 0, 0, v51, OS_LOG_TYPE_DEFAULT, 0, 1, 1, (uint8_t *)&v62, 0, 0,
    0xFFu);
  uint64_t v42 = v60;
  if (__swift_getEnumTagSinglePayload(v41, 1, v60) == 1)
  {

    outlined destroy of SystemUpdateNotice?(v41, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    return __swift_storeEnumTagSinglePayload(v61, 1, 1, v42);
  }
  else
  {
    uint64_t v44 = (uint64_t)v53;
    outlined init with take of ConversationControlsAction(v41, (uint64_t)v53, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    if (SBUIIsSystemApertureEnabled())
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.conversationControls);
      os_log_type_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl(&dword_1C2F90000, v46, v47, "singleAuthoriziationRequest: [SystemAperture] showing content, but below system aperture", v48, 2u);
        MEMORY[0x1C87760E0](v48, -1, -1);
      }

      uint64_t v49 = v44 + *(int *)(v42 + 72);
      outlined consume of SystemApertureElement?(*(void **)v49, *(void *)(v49 + 8), *(void **)(v49 + 16), *(void *)(v49 + 24), *(void **)(v49 + 32), *(void *)(v49 + 40), *(void **)(v49 + 48));
      *(void *)uint64_t v49 = 1;
      *(_OWORD *)(v49 + 8) = 0u;
      *(_OWORD *)(v49 + 24) = 0u;
      *(_OWORD *)(v49 + 40) = 0u;
      *(_OWORD *)(v49 + 56) = 0u;
      *(unsigned char *)(v49 + 72) = 0;
    }
    else
    {
    }
    uint64_t v50 = v61;
    _s15ConversationKit11ParticipantVWOcTm_3(v44, v61, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    __swift_storeEnumTagSinglePayload(v50, 0, 1, v42);
    return outlined destroy of PushToTalkNotice(v44, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

id ConversationControlsRecipeGenerator.pttLeadingAccessoryView(call:)(void *a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
  uint64_t v2 = outlined bridged method (ob) of @objc TUCallProvider.bundleIdentifier.getter(objc_msgSend(a1, sel_provider));
  id v4 = static UIImageView.appIcon(for:)(v2, v3);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel_image);

  if (objc_msgSend(a1, sel_status) == 1
    && objc_msgSend(a1, sel_isReceivingTransmission)
    && (objc_msgSend(a1, sel_isSendingTransmission) & 1) == 0
    && (id v6 = objc_msgSend(a1, sel_activeRemoteParticipant)) != 0)
  {
    uint64_t v7 = v6;
    id v8 = a1;
    id v9 = v7;
    id v10 = v5;
    id v11 = specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:activeRemoteParticipant:badgeImage:)(v8, v9, v5);
    id v12 = v11;
    if (v11) {
      id v13 = objc_msgSend(v11, sel_view);
    }
    else {
      id v13 = 0;
    }
    Hasher.init()();
    if (v12)
    {
      Swift::String v25 = v12;
      id v26 = objc_msgSend(v8, sel_uniqueProxyIdentifierUUID);
      uint64_t v27 = type metadata accessor for UUID();
      uint64_t v28 = *(void *)(v27 - 8);
      MEMORY[0x1F4188790](v27);
      uint64_t v30 = &__src[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::UInt v31 = (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v25) + 0x58))(v30);
      (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v30, v27);
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v31);
    }
    else
    {
      Hasher._combine(_:)(0);
      Swift::String v25 = 0;
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v9, sel_hash));
    memcpy(__dst, __src, sizeof(__dst));
    Hasher.finalize()();
  }
  else
  {
    id v14 = a1;
    id v15 = v5;
    specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:badgeImage:)(v14, v5);
    if (v16)
    {
      uint64_t v17 = v16;
      id v13 = objc_msgSend(v16, sel_view);
      uint64_t v18 = v17;
      id v19 = objc_msgSend(v14, sel_uniqueProxyIdentifierUUID);
      uint64_t v20 = type metadata accessor for UUID();
      uint64_t v21 = *(void *)(v20 - 8);
      MEMORY[0x1F4188790](v20);
      uint64_t v23 = &__src[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x58))(v23);
      (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v23, v20);
    }
    else
    {

      return 0;
    }
  }
  return v13;
}

void ConversationControlsRecipeGenerator.makePTTHUDSystemApertureElement(controlsManager:alertingStyle:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(void *__return_ptr, void, void, uint64_t))(**(void **)(v3 + 24) + 112))(v29, 0, 0, a1);
  id v6 = (void *)v29[0];
  uint64_t v7 = v29[1];
  id v8 = (void *)v29[2];
  uint64_t v9 = v29[3];
  uint64_t v11 = v29[4];
  char v10 = v30;
  outlined init with take of ConversationControlsRecipe?((uint64_t)v29, (uint64_t)__src, &demangling cache variable for type metadata for SystemApertureIcon?);
  if (__src[7])
  {
    memcpy(__dst, __src, 0x50uLL);
    char v28 = a2;
    id v12 = (objc_class *)type metadata accessor for SystemApertureIconView();
    objc_allocWithZone(v12);
    outlined copy of SystemApertureIconAsset(v6, v7, v8, v9, v11, v10 & 1);
    swift_bridgeObjectRetain();
    uint64_t v13 = (uint64_t)SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
    type metadata accessor for SystemApertureEmptyTrailingView();
    id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    id v15 = objc_allocWithZone(v12);
    outlined retain of SystemApertureIcon?(v29, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined copy of SystemApertureIcon?);
    id v16 = (id)v13;
    id v17 = v14;
    uint64_t v18 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 0);
    char v19 = v28;
    id v20 = objc_allocWithZone(v12);
    uint64_t v21 = SystemApertureIconView.init(icon:isDetached:)((uint64_t)__dst, 1);

    int64x2_t v22 = vdupq_n_s64(4uLL);
    v22.i64[0] = (uint64_t)&protocol witness table for SystemApertureIconView;
    uint64_t v23 = &protocol witness table for SystemApertureEmptyTrailingView;
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationControls);
    Swift::String v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1C2F90000, v25, v26, "PushToTalk: [SystemAperture] missing status icon", v27, 2u);
      MEMORY[0x1C87760E0](v27, -1, -1);
    }

    id v14 = 0;
    uint64_t v23 = 0;
    uint64_t v18 = 0;
    uint64_t v21 = 0;
    char v19 = 0;
    int64x2_t v22 = 0uLL;
    uint64_t v13 = 1;
  }
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v22.i64[0];
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v23;
  *(void *)(a3 + 32) = v18;
  *(void *)(a3 + 40) = v22.i64[0];
  *(void *)(a3 + 48) = v21;
  *(int64x2_t *)(a3 + 56) = v22;
  *(unsigned char *)(a3 + 72) = v19;
}

NSMutableAttributedString ConversationControlsRecipeGenerator.handoffNearbySubtitle(conversation:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_resolvedAudioVideoMode);
  if (!v2)
  {
    id v3 = objc_msgSend(self, sel_conversationKit);
    unint64_t v28 = 0xE000000000000000;
    uint64_t v4 = 0x414C504552414853;
    unint64_t v6 = 0xE900000000000059;
LABEL_8:
    v7.value._id countAndFlagsBits = 0x61737265766E6F43;
    v7.value._id object = (void *)0xEF74694B6E6F6974;
    v8._id countAndFlagsBits = 0;
    v8._id object = (void *)0xE000000000000000;
    uint64_t v9 = 0;
    Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, v7, (NSBundle)v3, v8, *(Swift::String *)(&v28 - 1));

    id v11 = objc_msgSend(a1, sel_handoffEligibility);
    if (v11)
    {
      id v12 = outlined bridged method (ob) of @objc TUConversationHandoffEligibility.localizedDeviceCategory.getter(v11, (SEL *)&selRef_localizedDeviceCategory);
      if (v13)
      {
        uint64_t v14 = (uint64_t)v12;
        id v15 = v13;
        Swift::String v29 = v10;
        v16._id countAndFlagsBits = 2108704;
        v16._id object = (void *)0xE300000000000000;
        String.append(_:)(v16);
        v17._id countAndFlagsBits = v14;
        v17._id object = v15;
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
      }
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    return NSMutableAttributedString.__allocating_init(string:)(v10);
  }
  if (v2 == (id)1)
  {
    id v3 = objc_msgSend(self, sel_conversationKit);
    unint64_t v28 = 0xE000000000000000;
    uint64_t v4 = 0x454D495445434146;
    uint64_t v5 = 0x4F494455415FLL;
    goto LABEL_7;
  }
  if (v2 == (id)2)
  {
    id v3 = objc_msgSend(self, sel_conversationKit);
    unint64_t v28 = 0xE000000000000000;
    uint64_t v4 = 0x454D495445434146;
    uint64_t v5 = 0x4F454449565FLL;
LABEL_7:
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
    goto LABEL_8;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationControls);
  id v20 = a1;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v29._id countAndFlagsBits = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    id v30 = objc_msgSend(v20, sel_resolvedAudioVideoMode);
    uint64_t v25 = String.init<A>(reflecting:)();
    id v30 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v29._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v21, v22, "handoffNearbySubtitle: unexpected avMode %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v24, -1, -1);
    MEMORY[0x1C87760E0](v23, -1, -1);
  }
  else
  {
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v27._id countAndFlagsBits = 0;
  v27._id object = (void *)0xE000000000000000;
  return NSMutableAttributedString.__allocating_init(string:)(v27);
}

id ConversationControlsRecipeGenerator.handoffBadgeImage(conversation:)(void *a1)
{
  id result = objc_msgSend(a1, sel_resolvedAudioVideoMode);
  if (result)
  {
    if (result == (id)2 || result == (id)1)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v5 = static UIImageView.appIcon(for:)(v3, v4);
      swift_bridgeObjectRelease();
      return v5;
    }
    else
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
      id v7 = a1;
      Swift::String v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        Swift::String v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        uint64_t v14 = v11;
        *(_DWORD *)Swift::String v10 = 136315138;
        objc_msgSend(v7, sel_resolvedAudioVideoMode);
        uint64_t v12 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v8, v9, "handoffBadgeImage: unexpected avMode %s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v11, -1, -1);
        MEMORY[0x1C87760E0](v10, -1, -1);
      }
      else
      {
      }
      return 0;
    }
  }
  return result;
}

NSMutableAttributedString ConversationControlsRecipeGenerator.handoffCompletedSubtitle(localizedDeviceCategory:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    uint64_t v4 = self;
    swift_bridgeObjectRetain();
    id v5 = objc_msgSend(v4, sel_conversationKit);
    v20._id object = (void *)0xE000000000000000;
    v6._uint64_t countAndFlagsBits = 0x255F4E4F5F574F4ELL;
    v6._id object = (void *)0xE900000000000040;
    v7.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v7.value._id object = (void *)0xEF74694B6E6F6974;
    v8._uint64_t countAndFlagsBits = 0;
    v8._id object = (void *)0xE000000000000000;
    v20._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v20);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
    *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = a2;
    uint64_t countAndFlagsBits = String.init(format:_:)();
    id object = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    id v13 = objc_msgSend(self, sel_conversationKit);
    v21._id object = (void *)0xE000000000000000;
    v14._id object = (void *)0x80000001C3798A90;
    v14._uint64_t countAndFlagsBits = 0xD000000000000013;
    v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v15.value._id object = (void *)0xEF74694B6E6F6974;
    v16._uint64_t countAndFlagsBits = 0;
    v16._id object = (void *)0xE000000000000000;
    v21._uint64_t countAndFlagsBits = 0;
    Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v21);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    id object = v17._object;
  }
  v18._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18._id object = object;
  return NSMutableAttributedString.__allocating_init(string:)(v18);
}

id ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:)(void *a1, uint64_t a2, void *a3)
{
  type metadata accessor for ConversationControlsBadgingAvatarViewController();
  id v5 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:handle:badgeImage:)(objc_msgSend(*(id *)((char *)a3 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_callCenter), sel_contactStore), objc_msgSend(a1, sel_handle), 0);
  id v6 = objc_msgSend(v5, sel_view);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x278))(v9);
  (*(void (**)(char *))((*v12 & *v5) + 0x58))(v11);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v6;
}

uint64_t static ConversationControlsManager.screenShareHUDStrings(initiator:incomingRequest:)(uint64_t a1, char a2)
{
  uint64_t v3 = self;
  uint64_t v4 = (objc_class *)objc_msgSend(v3, sel_conversationKit);
  if (a2)
  {
    unint64_t v5 = OUTLINED_FUNCTION_3_19(17);
    v6.super.Class isa = v4;
    uint64_t v10 = OUTLINED_FUNCTION_2_29(v5, v7, v8, v9, v6);
  }
  else
  {
    v12.super.Class isa = v4;
    uint64_t v10 = OUTLINED_FUNCTION_2_29(0x535F4E4545524353, 0xEE00474E49524148, 0x61737265766E6F43, 0xEF74694B6E6F6974, v12);
  }

  uint64_t v11 = (objc_class *)objc_msgSend(v3, sel_conversationKit, 0xE000000000000000);
  OUTLINED_FUNCTION_7_7();
  v13.super.Class isa = v11;
  OUTLINED_FUNCTION_2_29(v14, v15, v16, v17, v13);
  OUTLINED_FUNCTION_26_15();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v18 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v18 + 16) = xmmword_1C3769620;
  Participant.contactDetails.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Participant.name(_:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  String.init(format:_:)();
  OUTLINED_FUNCTION_46_6();
  swift_bridgeObjectRelease();
  return v10;
}

NSMutableAttributedString ConversationControlsRecipeGenerator.incomingRemoteControlRequestSubtitle(requestingParticipantDisplayName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0xD00000000000002DLL;
  unint64_t v5 = (void *)0x80000001C3798D20;
  switch(static Platform.current.getter())
  {
    case 1u:
      NSBundle v6 = "SCREEN_SHARING_%@_WANTS_TO_CONTROL_YOUR_PAD";
      goto LABEL_5;
    case 2u:
      uint64_t v4 = 0xD00000000000002ALL;
      unint64_t v5 = (void *)0x80000001C3798CC0;
      break;
    case 3u:
      NSBundle v6 = "SCREEN_SHARING_%@_WANTS_TO_CONTROL_YOUR_MAC";
LABEL_5:
      unint64_t v5 = (void *)((unint64_t)(v6 - 32) | 0x8000000000000000);
      uint64_t v4 = 0xD00000000000002BLL;
      break;
    default:
      break;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v7 = objc_msgSend(self, sel_conversationKit);
  v25._id object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = v4;
  v8._id object = v5;
  v9.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v9.value._id object = (void *)0xEF74694B6E6F6974;
  v10._uint64_t countAndFlagsBits = 0;
  v10._id object = (void *)0xE000000000000000;
  v25._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v25);
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1C37696D0;
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v13 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v11 + 64) = v13;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  uint64_t v14 = self;
  swift_bridgeObjectRetain();
  id v15 = objc_msgSend(v14, sel_currentDevice);
  id v16 = objc_msgSend(v15, sel_model);

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v11 + 96) = v12;
  *(void *)(v11 + 104) = v13;
  *(void *)(v11 + 72) = v17;
  *(void *)(v11 + 80) = v19;
  uint64_t v20 = String.init(format:_:)();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = v20;
  v23._id object = v22;
  return NSMutableAttributedString.__allocating_init(string:)(v23);
}

id ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:usingAlternateApperance:)(uint64_t a1, void *a2, void *a3, char a4)
{
  if ((a4 & 1) != 0
    && (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView), (id v7 = static UIImageView.appIcon(for:)(*(void *)(a1 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier), *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier + 8))) != 0))
  {
    id v8 = v7;
    objc_msgSend(v8, sel_image);
    closure #1 in ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:usingAlternateApperance:)(a1, a3);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    Swift::String_optional v9 = (void *)static UIImage.appIcon(for:usingIconCrop:)(*(void *)(a1 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier), *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier + 8), 1);
    type metadata accessor for ConversationControlsBadgingAvatarViewController();
    Swift::String v10 = self;
    id v11 = v9;
    uint64_t v12 = (void *)ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(a2, v9, 0, 0, objc_msgSend(v10, sel_clearColor));
    id v8 = objc_msgSend(v12, sel_view);
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = MEMORY[0x1F4188790](v13);
    uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v18 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x278))(v15);
    (*(void (**)(char *))((*v18 & *v12) + 0x58))(v17);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  return v8;
}

void static ConversationControlsManager.collaborationHUDStrings(initiator:itemTitle:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  if (v1)
  {
    uint64_t v5 = v1;
    uint64_t v6 = v0;
    id v7 = self;
    swift_bridgeObjectRetain();
    id v8 = (objc_class *)objc_msgSend(v7, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    OUTLINED_FUNCTION_47();
    unint64_t v9 = OUTLINED_FUNCTION_3_19(28);
    v10.super.Class isa = v8;
    OUTLINED_FUNCTION_2_29(v9, v11, v12, v13, v10);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v14 + 16) = xmmword_1C3769620;
    *(void *)(v14 + 56) = v4;
    *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v14 + 32) = v6;
    *(void *)(v14 + 40) = v5;
    uint64_t v15 = String.init(format:_:)();
    uint64_t v94 = v16;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    v18.super.Class isa = v17;
    uint64_t v15 = OUTLINED_FUNCTION_2_29(v19, 0x80000001C37987C0, 0x61737265766E6F43, 0xEF74694B6E6F6974, v18);
    uint64_t v94 = v20;
  }
  id v21 = objc_msgSend(v3, sel_nameComponents);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v23 = OUTLINED_FUNCTION_8(v22);
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  uint64_t v26 = v25 - v24;
  if (v21)
  {
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = type metadata accessor for PersonNameComponents();
    uint64_t v28 = v26;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v27 = type metadata accessor for PersonNameComponents();
    uint64_t v28 = v26;
    uint64_t v29 = 1;
  }
  __swift_storeEnumTagSinglePayload(v28, v29, 1, v27);
  uint64_t v30 = outlined bridged method (pb) of @objc TUCollaborationInitiator.handle.getter(v3);
  uint64_t v32 = v31;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PersonNameComponents?, String?));
  uint64_t v34 = OUTLINED_FUNCTION_8(v33);
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_21();
  uint64_t v37 = v36 - v35;
  uint64_t v39 = (uint64_t *)(v36 - v35 + *(int *)(v38 + 56));
  outlined init with take of ConversationControlsRecipe?(v26, v36 - v35, &demangling cache variable for type metadata for PersonNameComponents?);
  *uint64_t v39 = v30;
  v39[1] = v32;
  type metadata accessor for PersonNameComponents();
  if (__swift_getEnumTagSinglePayload(v37, 1, v27) == 1)
  {
    if (v32)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v40 = swift_allocObject();
      long long v93 = xmmword_1C3769620;
      *(_OWORD *)(v40 + 16) = xmmword_1C3769620;
      uint64_t v41 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      v42.super.Class isa = v41;
      OUTLINED_FUNCTION_2_29(v43, 0x80000001C37987F0, 0x61737265766E6F43, 0xEF74694B6E6F6974, v42);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v44 = OUTLINED_FUNCTION_25_15();
      *(_OWORD *)(v44 + 16) = v93;
      *(void *)(v44 + 56) = v4;
      *(void *)(v44 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v44 + 32) = v30;
      *(void *)(v44 + 40) = v32;
      uint64_t v45 = String.init(format:_:)();
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      *(void *)(v40 + 32) = v45;
      *(void *)(v40 + 40) = v47;
    }
  }
  else
  {
    __int16 v92 = &v90;
    *(void *)&long long v93 = v15;
    long long v91 = &v90;
    OUTLINED_FUNCTION_5_3();
    if (v32)
    {
      *(void *)&long long v90 = v49;
      MEMORY[0x1F4188790](v48);
      OUTLINED_FUNCTION_60();
      uint64_t v50 = OUTLINED_FUNCTION_22_16();
      v51(v50);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_1C3769620;
      uint64_t v53 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      OUTLINED_FUNCTION_7_7();
      v54.super.Class isa = v53;
      OUTLINED_FUNCTION_2_29(v55, v56, v57, v58, v54);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1C37696D0;
      uint64_t v60 = self;
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v62 = objc_msgSend(v60, sel_localizedStringFromPersonNameComponents_style_options_, isa, 0, 0);

      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v64;

      uint64_t v66 = MEMORY[0x1E4FBB1A0];
      *(void *)(v59 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v67 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v59 + 32) = v63;
      *(void *)(v59 + 40) = v65;
      *(void *)(v59 + 96) = v66;
      *(void *)(v59 + 104) = v67;
      *(void *)(v59 + 64) = v67;
      *(void *)(v59 + 72) = v30;
      *(void *)(v59 + 80) = v32;
      uint64_t v68 = String.init(format:_:)();
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();
      *(void *)(v52 + 32) = v68;
      *(void *)(v52 + 40) = v70;
      OUTLINED_FUNCTION_45_4();
      OUTLINED_FUNCTION_26_2();
      v71();
    }
    else
    {
      MEMORY[0x1F4188790](v48);
      OUTLINED_FUNCTION_60();
      uint64_t v72 = OUTLINED_FUNCTION_22_16();
      v73(v72);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v74 = swift_allocObject();
      long long v90 = xmmword_1C3769620;
      *(_OWORD *)(v74 + 16) = xmmword_1C3769620;
      long long v75 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      v76.super.Class isa = v75;
      OUTLINED_FUNCTION_2_29(v77, 0x80000001C3798820, 0x61737265766E6F43, 0xEF74694B6E6F6974, v76);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v78 = OUTLINED_FUNCTION_25_15();
      *(_OWORD *)(v78 + 16) = v90;
      long long v79 = self;
      Class v80 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v81 = objc_msgSend(v79, sel_localizedStringFromPersonNameComponents_style_options_, v80, 0, 0);

      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v84 = v83;

      *(void *)(v78 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v78 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v78 + 32) = v82;
      *(void *)(v78 + 40) = v84;
      uint64_t v85 = String.init(format:_:)();
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      *(void *)(v74 + 32) = v85;
      *(void *)(v74 + 40) = v87;
      uint64_t v88 = OUTLINED_FUNCTION_45_4();
      v89(v88);
    }
  }
  OUTLINED_FUNCTION_28();
}

Swift::Int closure #1 in ConversationControlsRecipeGenerator.recipeViewFor(_:in:managedBy:usingAlternateApperance:)(uint64_t a1, void *a2)
{
  Hasher.init()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  id v7 = &__src[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x278))(v5);
  UUID.uuidString.getter();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  return Hasher.finalize()();
}

uint64_t static UIImage.appIcon(for:usingIconCrop:)(uint64_t a1, void *a2, char a3)
{
  if (!a2) {
    return 0;
  }
  BOOL v7 = static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v6 == a2;
  if (v7
    || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (v8 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return specialized static UIImage.image(named:)(4);
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    v10._uint64_t countAndFlagsBits = a1;
    v10._id object = a2;
    return (unint64_t)UIImage.init(bundleIdentifier:usingIconCrop:)(v10, a3 & 1);
  }
}

uint64_t static ConversationControlsRecipeGenerator.makeAvatarUsingCall(_:with:isThirdParty:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v8 = specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(a1, v4, ObjectType, a2);
    if (v8) {
      swift_bridgeObjectRelease();
    }
    uint64_t v9 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
    id v10 = objc_msgSend(self, sel_clearColor);
    uint64_t v11 = swift_unknownObjectRetain();
    uint64_t v12 = 0;
    uint64_t v13 = v8;
    uint64_t v14 = v10;
    uint64_t v15 = v9;
    uint64_t v16 = ObjectType;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
    uint64_t v19 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x290);
    uint64_t v20 = swift_unknownObjectRetain();
    uint64_t v21 = v19(v20);
    id v22 = objc_msgSend(self, sel_clearColor);
    uint64_t v16 = swift_getObjectType();
    uint64_t v11 = a1;
    uint64_t v12 = (void *)v21;
    uint64_t v13 = 0;
    uint64_t v14 = v22;
    uint64_t v15 = v18;
  }
  return specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v11, v12, v13, v14, v15, v16, a2);
}

id static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(a1, v2, ObjectType, a2);
}

uint64_t ConversationControlsRecipeGenerator.callTypeSubtitles(for:)(void *a1)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 160);
  uint64_t v6 = (void *)v5(ObjectType, v3);
  unsigned int v7 = objc_msgSend(v6, sel_isFaceTimeProvider);

  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769830;
    Class isa = ConversationControlsRecipeGenerator.faceTimeIncomingCallSubtitle(for:)(a1);
LABEL_17:
    *(void *)(v8 + 32) = isa;
    uint64_t v44 = v8;
    specialized Array._endMutation()();
    uint64_t v13 = v44;
    goto LABEL_18;
  }
  id v10 = (void *)v5(ObjectType, v3);
  unsigned int v11 = objc_msgSend(v10, sel_isSystemProvider);

  if (!v11)
  {
    uint64_t v23 = (void *)v5(ObjectType, v3);
    id v24 = objc_msgSend(v23, sel_localizedName);

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    LOBYTE(v24) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 376))(ObjectType, v3);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769830;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    id v28 = objc_msgSend(self, sel_conversationKit);
    unint64_t v42 = 0xE000000000000000;
    if (v24) {
      uint64_t v29 = "THIRD_PARTY_CALL_PROVIDER_%@_VIDEO";
    }
    else {
      uint64_t v29 = "THIRD_PARTY_CALL_PROVIDER_%@_AUDIO";
    }
    v30._id object = (void *)((unint64_t)(v29 - 32) | 0x8000000000000000);
    v30._uint64_t countAndFlagsBits = 0xD000000000000022;
    v31.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v31.value._id object = (void *)0xEF74694B6E6F6974;
    v32._uint64_t countAndFlagsBits = 0;
    v32._id object = (void *)0xE000000000000000;
    uint64_t v33 = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v28, v32, *(Swift::String *)(&v42 - 1));

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1C3769620;
    *(void *)(v34 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v34 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v34 + 32) = v25;
    *(void *)(v34 + 40) = v27;
    uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = v35;
    unint64_t v39 = v37;
LABEL_16:
    Class isa = NSMutableAttributedString.__allocating_init(string:)(*(Swift::String *)&v38).super.super.isa;
    goto LABEL_17;
  }
  unint64_t v12 = ConversationControlsRecipeGenerator.telephonyCallSubtitles(for:)(a1);
  uint64_t v13 = v12;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_18;
    }
    goto LABEL_6;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationControls);
    swift_unknownObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = v43;
      *(_DWORD *)uint64_t v17 = 136446210;
      uint64_t v18 = (void *)v5(ObjectType, v3);
      id v19 = objc_msgSend(v18, sel_identifier);

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v15, v16, "Unknown call type subtitle for provider: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v43, -1, -1);
      MEMORY[0x1C87760E0](v17, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769830;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    uint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    goto LABEL_16;
  }
LABEL_18:
  swift_unknownObjectRelease();
  return v13;
}

id ConversationControlsRecipeGenerator.subtitleBadgeView(incomingCall:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(ObjectType, a2);
  unsigned int v5 = objc_msgSend(v4, sel_isTelephonyProvider);

  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TPBadgeView);
    uint64_t v6 = swift_unknownObjectRetain();
    id v7 = TPBadgeView.init(telephonyCall:)(v6, a2);
    id v8 = v7;
    if (v7)
    {
      id v9 = v7;
      id v10 = objc_msgSend(v9, sel_title);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.hash.getter();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1C2F90000, v12, v13, "[SystemAperture][Badge] Not showing badge view for non-telephony calls", v14, 2u);
      MEMORY[0x1C87760E0](v14, -1, -1);
    }

    return 0;
  }
  return v8;
}

id ConversationControlsRecipeGenerator.makeLeadingViewType(using:avatarViewController:)(void *a1, void *a2)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v11 - 8);
  os_log_type_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 80))(ObjectType, v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
LABEL_5:
    id v15 = objc_msgSend(a2, sel_view);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = MEMORY[0x1F4188790](v16);
    uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v21 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x278))(v18);
    (*(void (**)(char *))((*v21 & *a2) + 0x58))(v20);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    return v15;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  v14._uint64_t countAndFlagsBits = URL.relativePath.getter();
  id v15 = (id)UIImage.__allocating_init(contentsOfFile:)(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v15) {
    goto LABEL_5;
  }
  swift_unknownObjectRelease();
  return v15;
}

id static ConversationControlsRecipeGenerator.badge(forCall:)()
{
  self;
  uint64_t v0 = swift_dynamicCastObjCClass();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  swift_unknownObjectRetain();
  if (!objc_msgSend(v1, sel_isRecording)
    || (objc_msgSend(v1, sel_isVideo) & 1) != 0
    || (id v2 = objc_msgSend(v1, sel_remoteParticipantHandles),
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle), lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle), uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(), v2, v4 = specialized Set.count.getter(v3), swift_bridgeObjectRelease(), v4 != 1))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v5 = @nonobjc UIImage.__allocating_init(systemName:)();
  if (v5)
  {
    id v6 = objc_msgSend(self, sel_systemWhiteColor);
    id v7 = objc_msgSend(v5, sel_imageWithTintColor_renderingMode_, v6, 1);

    uint64_t v5 = UIImage.withPadding(_:)(3.0);
  }
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v5);
  swift_unknownObjectRelease();

  return v8;
}

id specialized Conversation.cnk_allowsVideoMessaging.getter()
{
  id result = objc_msgSend(v0, sel_avMode);
  if (result)
  {
    id v2 = v0;
    id v3 = objc_msgSend(v2, sel_remoteMembers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = specialized Set.count.getter(v4);
    swift_bridgeObjectRelease();
    return (id)(v5 == 1);
  }
  return result;
}

id ConversationControlsRecipeGenerator.ongoingGreenTea3PLeadingAccessoryView(controlsManager:hasHeldCalls:)(void *a1, char a2)
{
  if (a2)
  {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    id v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 160))(ObjectType, v4);
    swift_unknownObjectRelease();
    uint64_t v7 = outlined bridged method (ob) of @objc TUCallProvider.bundleIdentifier.getter(v6);
    if (v8)
    {
      id v9 = (void *)MEMORY[0x1C87730B0](v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v9 = 0;
    }
    unint64_t v36 = self;
    id v37 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v37, sel_scale);
    double v39 = v38;

    id v40 = objc_msgSend(v36, sel__applicationIconImageForBundleIdentifier_format_scale_, v9, 2, v39);
    if (v40)
    {
      id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v40);
      NSObject.hashValue.getter();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = *v2;
    uint64_t v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270);
    uint64_t v12 = v11();
    uint64_t v14 = v13;
    uint64_t v15 = swift_getObjectType();
    id v16 = specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(v12, v10, v15, v14);
    v42[1] = v17;
    uint64_t v18 = swift_unknownObjectRelease();
    uint64_t v19 = ((uint64_t (*)(uint64_t))v11)(v18);
    uint64_t v21 = v20;
    if (v16) {
      id v22 = v16;
    }
    uint64_t v23 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
    id v24 = objc_msgSend(self, sel_clearColor);
    uint64_t v25 = swift_getObjectType();
    uint64_t v26 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(v19, 0, v16, v24, v23, v25, v21);
    v11();
    uint64_t v28 = v27;
    uint64_t v29 = swift_getObjectType();
    uint64_t v30 = type metadata accessor for UUID();
    uint64_t v31 = *(void *)(v30 - 8);
    MEMORY[0x1F4188790](v30);
    uint64_t v33 = (char *)v42 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t, uint64_t))(v28 + 200))(v29, v28);
    swift_unknownObjectRelease();
    (*(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v26) + 0x58))(v33);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    uint64_t v34 = v26;
    id v35 = objc_msgSend(v34, sel_view);
    outlined consume of (icon: UIImage, accessibilityLabel: String)?(v16);
  }
  return v35;
}

void ConversationControlsRecipeGenerator.ongoingGreenTea3PActions(controlsManager:hasHeldCalls:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  uint64_t v6 = v5;
  uint64_t ObjectType = swift_getObjectType();
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 184))(ObjectType, v6);
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  if (v8 == 2)
  {
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
    swift_storeEnumTagMultiPayload();
    char v10 = 0;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
  }
  else
  {
    uint64_t v9 = swift_allocObject();
    if (a2)
    {
      *(_OWORD *)(v9 + 16) = xmmword_1C376A6F0;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(_OWORD *)(v9 + 16) = xmmword_1C376BA10;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    static ConversationHUDControlsButtonShelfView.Configuration.fillEqually.getter((uint64_t)v13);
    long long v11 = v13[0];
    long long v12 = v13[1];
    char v10 = v14 | 0x80;
  }
  *(void *)a3 = v9;
  *(_OWORD *)(a3 + 8) = v11;
  *(_OWORD *)(a3 + 24) = v12;
  *(unsigned char *)(a3 + 40) = v10;
}

void static ConversationControlsRecipeGenerator.assetsForDefaultHUD(controlsManager:conversation:)()
{
  void (*v63)(long long *__return_ptr);
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  unsigned int v71;
  void *v72;
  uint64_t ObjectType;
  char v74;
  objc_class *v75;
  unint64_t v76;
  NSBundle v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  objc_class *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  void *v86;
  uint64_t v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  NSBundle v96;
  unsigned __int8 *v97;
  uint64_t v98;
  void (*v99)(uint64_t);
  uint64_t v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  objc_class *v108;
  uint64_t v109;
  NSBundle v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(void);
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  const void *v129;
  const void *v130;
  void (*v131)(void);
  char v132;
  int v133;
  uint64_t v134;
  unsigned int (*v135)(void);
  uint64_t v136;
  uint64_t (*v137)(uint64_t);
  id v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  void *v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t);
  char v145;
  char v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  char v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  objc_class *v157;
  NSBundle v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t *v163;
  long long *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(void);
  uint64_t v175;
  void (*v176)(void);
  char v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(void);
  uint64_t v181;
  char v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  void *v186;
  uint64_t *v187;
  long long *v188;
  uint64_t v189;
  char v190;
  uint64_t *v191;
  long long *v192;
  objc_class *v193;
  NSBundle v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  objc_class *v200;
  NSBundle v201;
  void *v202;
  uint64_t v203;
  objc_class *v204;
  NSBundle v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  Class isa;
  id v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void v240[3];
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  id v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  long long *v260;
  id v261;
  void *v262;
  void *v263;
  uint64_t v264;
  void v265[27];
  long long v266[21];
  void v267[27];
  void v268[3];
  uint64_t v269;
  uint64_t v270;

  OUTLINED_FUNCTION_31();
  v260 = v0;
  v261 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  v252 = (void *)(v8 - v7);
  v256 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_10_5();
  v254 = v10;
  OUTLINED_FUNCTION_8_1();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  char v14 = (char *)v240 - v13;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_8_4();
  v255 = v15;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v240 - v17;
  uint64_t v19 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_3();
  v251 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_23_17();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_8_4();
  v258 = v23;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_8_4();
  v264 = v25;
  OUTLINED_FUNCTION_8_1();
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)v240 - v28;
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_8_4();
  v263 = v30;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)v240 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v35 = OUTLINED_FUNCTION_8(v34);
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_10_5();
  v250 = v36;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_8_4();
  uint64_t v247 = v38;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_8_4();
  v249 = v40;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_8_4();
  objc_super v248 = v42;
  OUTLINED_FUNCTION_8_1();
  uint64_t v44 = MEMORY[0x1F4188790](v43);
  uint64_t v46 = (char *)v240 - v45;
  uint64_t v47 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x840);
  v262 = v4;
  unsigned __int8 v48 = v47(v44);
  unsigned __int8 v49 = v48;
  int v50 = v48 >> 5;
  if (v50 != 1)
  {
    if (v50 == 2)
    {
      id v81 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      if (v49)
      {
        OUTLINED_FUNCTION_13_22();
        OUTLINED_FUNCTION_47();
      }
      else
      {
        uint64_t v82 = OUTLINED_FUNCTION_17_23();
      }
      v96.super.Class isa = v81;
      OUTLINED_FUNCTION_2_29(v82, v83, 0x61737265766E6F43, 0xEF74694B6E6F6974, v96);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      uint64_t v58 = OUTLINED_FUNCTION_24_2();
      goto LABEL_21;
    }
    if (v50 == 3 && v48 == 96)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      uint64_t v51 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      uint64_t v52 = OUTLINED_FUNCTION_17_23();
      v53.super.Class isa = v51;
      uint64_t v55 = OUTLINED_FUNCTION_2_29(v52, v54, 0x61737265766E6F43, 0xEF74694B6E6F6974, v53);
      uint64_t v57 = v56;

      uint64_t v58 = v55;
      uint64_t v59 = v57;
LABEL_21:
      NSMutableAttributedString.__allocating_init(string:)(*(Swift::String *)&v58);
LABEL_148:
      OUTLINED_FUNCTION_45_4();
      OUTLINED_FUNCTION_28();
      return;
    }
LABEL_8:
    v253 = v14;
    uint64_t v243 = v46;
    v244 = v19;
    unint64_t v241 = v1;
    v242 = v29;
    uint64_t v60 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v262) + 0x270);
    v257 = v60();
    v259 = v61;
    static ConversationControlsRecipeGenerator.badge(forCall:)();
    OUTLINED_FUNCTION_5_49();
    uint64_t v63 = *(void (**)(long long *__return_ptr))(v62 + 2248);
    uint64_t v246 = v64;
    uint64_t v65 = v64;
    v63(v266);
    if (*((void *)&v266[1] + 1))
    {
      v245 = v65;
      outlined init with take of Notice(v266, (uint64_t)v268);
      uint64_t v66 = v269;
      unint64_t v67 = v270;
      __swift_project_boxed_opaque_existential_1(v268, v269);
      uint64_t v68 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v67 + 104))(v66, v67);
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = objc_msgSend(v68, sel_activity);
        long long v71 = objc_msgSend(v70, sel_isScreenSharingActivity);

        if (v71)
        {
          uint64_t v72 = v262;
          v60();
          OUTLINED_FUNCTION_46_6();
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v74 = (*((uint64_t (**)(uint64_t, id))v70 + 41))(ObjectType, v70);
          swift_unknownObjectRelease();
          if (v74)
          {
            long long v75 = (objc_class *)objc_msgSend(self, sel_conversationKit);
            OUTLINED_FUNCTION_13_22();
            NSBundle v76 = OUTLINED_FUNCTION_3_19(17);
            v77.super.Class isa = v75;
            OUTLINED_FUNCTION_2_29(v76, v78, v79, v80, v77);
            OUTLINED_FUNCTION_26_15();

LABEL_143:
            long long v93 = 0;
            goto LABEL_144;
          }
          long long v114 = *(void *)((char *)v72
                           + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_conversationController);
          long long v115 = ConversationController.visibleParticipants.getter();
          long long v116 = *(void *)(v115 + 16);
          v240[2] = v115;
          if (v116)
          {
            v240[1] = v114;
            OUTLINED_FUNCTION_42_7();
            char v119 = v117 + v118;
            v259 = &v267[4];
            v260 = &v266[6];
            v252 = &v265[4];
            v261 = *(id *)(v120 + 72);
            char v121 = v255;
            char v122 = (uint64_t)v253;
            while (1)
            {
              _s15ConversationKit11ParticipantVWOcTm_3(v119, (uint64_t)v33, (void (*)(void))type metadata accessor for Participant);
              _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v33, (uint64_t)v18, (void (*)(void))type metadata accessor for Participant.State);
              if (swift_getEnumCaseMultiPayload() == 4)
              {
                char v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                OUTLINED_FUNCTION_8_2((uint64_t *)&v18[*(int *)(v123 + 64)]);
                OUTLINED_FUNCTION_28_12();
                type metadata accessor for Date();
                OUTLINED_FUNCTION_0();
                OUTLINED_FUNCTION_26_2();
                v124();
                outlined init with copy of Participant?((uint64_t)v260, (uint64_t)v267, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
                outlined destroy of Participant.MediaInfo((uint64_t)v266);
                if (v267[3] != 1)
                {
                  memcpy(v266, v267, 0xD1uLL);
                  uint64_t v125 = BYTE8(v266[2]);
                  outlined destroy of Participant.ScreenInfo((uint64_t)v266);
                  char v121 = v255;
                  id v126 = v125;
                  goto LABEL_35;
                }
              }
              else
              {
                outlined destroy of PushToTalkNotice((uint64_t)v18, (void (*)(void))type metadata accessor for Participant.State);
                OUTLINED_FUNCTION_30_13();
                bzero(v259, 0xB1uLL);
              }
              outlined destroy of SystemUpdateNotice?((uint64_t)v267, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
              id v126 = 2;
LABEL_35:
              uint64_t v127 = (uint64_t)v263;
              _s15ConversationKit11ParticipantVWOcTm_3((uint64_t)v33, (uint64_t)v263, (void (*)(void))type metadata accessor for Participant);
              if (v126 != 2)
              {
                _s15ConversationKit11ParticipantVWOcTm_3(v127, v121, (void (*)(void))type metadata accessor for Participant.State);
                if (swift_getEnumCaseMultiPayload() == 4)
                {
                  id v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                  long long v129 = (const void *)(v121 + *(int *)(v128 + 48));
                  OUTLINED_FUNCTION_8_2((uint64_t *)(v121 + *(int *)(v128 + 64)));
                  uint64_t v130 = v129;
                  uint64_t v127 = (uint64_t)v263;
                  memcpy(v266, v130, sizeof(v266));
                  type metadata accessor for Date();
                  OUTLINED_FUNCTION_0();
                  OUTLINED_FUNCTION_26_2();
                  v131();
                  outlined init with copy of Participant?((uint64_t)v260, (uint64_t)v265, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
                  outlined destroy of Participant.MediaInfo((uint64_t)v266);
                  if (v265[3] != 1)
                  {
                    memcpy(v267, v265, 0xD1uLL);
                    uint64_t v132 = v267[5];
                    outlined destroy of Participant.ScreenInfo((uint64_t)v267);
                    outlined destroy of PushToTalkNotice(v127, (void (*)(void))type metadata accessor for Participant);
                    if (v132)
                    {
                      id v197 = (uint64_t)v243;
                      outlined init with take of ConversationControlsAction((uint64_t)v33, (uint64_t)v243, (void (*)(void))type metadata accessor for Participant);
                      uint64_t v198 = 0;
                      char v199 = v264;
                      goto LABEL_87;
                    }
                    goto LABEL_43;
                  }
                }
                else
                {
                  outlined destroy of PushToTalkNotice(v121, (void (*)(void))type metadata accessor for Participant.State);
                  memset(v265, 0, 24);
                  v265[3] = 1;
                  bzero(v252, 0xB1uLL);
                }
                outlined destroy of SystemUpdateNotice?((uint64_t)v265, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
              }
              outlined destroy of PushToTalkNotice(v127, (void (*)(void))type metadata accessor for Participant);
LABEL_43:
              outlined destroy of PushToTalkNotice((uint64_t)v33, (void (*)(void))type metadata accessor for Participant);
              v119 += (uint64_t)v261;
              --v116;
              char v199 = v264;
              if (!v116)
              {
                uint64_t v198 = 1;
                id v197 = (uint64_t)v243;
                goto LABEL_87;
              }
            }
          }
          uint64_t v198 = 1;
          id v197 = (uint64_t)v243;
          char v122 = (uint64_t)v253;
          char v199 = v264;
LABEL_87:
          uint64_t v160 = v244;
          __swift_storeEnumTagSinglePayload(v197, v198, 1, v244);
          swift_bridgeObjectRelease();
          ConversationControlsManager.isOneToOneConversation.getter();
          if (v161)
          {
            long long v162 = v248;
            outlined init with copy of Participant?(v197, v248, &demangling cache variable for type metadata for Participant?);
            OUTLINED_FUNCTION_9_1(v162);
            if (v190)
            {
              uint64_t v163 = &demangling cache variable for type metadata for Participant?;
              uint64_t v164 = (long long *)v162;
            }
            else
            {
              Participant.screenInfo.getter(v266);
              outlined destroy of PushToTalkNotice(v162, (void (*)(void))type metadata accessor for Participant);
              if (*((void *)&v266[1] + 1) != 1)
              {
                OUTLINED_FUNCTION_10_26();
                goto LABEL_121;
              }
              uint64_t v163 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
              uint64_t v164 = v266;
            }
            outlined destroy of SystemUpdateNotice?((uint64_t)v164, v163);
            uint64_t v160 = 0;
            long long v162 = 1;
LABEL_121:
            String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v160, v162, 0x20676E6972616853, 0xEE006E6565726353);
            OUTLINED_FUNCTION_47_6();
            Swift::String v193 = (objc_class *)objc_msgSend(self, sel_conversationKit);
            v194.super.Class isa = v193;
            OUTLINED_FUNCTION_2_29(v162, v160, 0x61737265766E6F43, 0xEF74694B6E6F6974, v194);
            OUTLINED_FUNCTION_33_15();

            v195 = v197;
LABEL_142:
            outlined destroy of SystemUpdateNotice?(v195, &demangling cache variable for type metadata for Participant?);
            goto LABEL_143;
          }
          Swift::String v165 = (void *)ConversationController.visibleParticipants.getter();
          unint64_t v166 = v165[2];
          if (v166)
          {
            OUTLINED_FUNCTION_42_7();
            long long v168 = (uint64_t)v165 + v167;
            v263 = &v267[4];
            v261 = v165;
            v262 = &v265[4];
            long long v170 = *(void *)(v169 + 72);
            unsigned __int8 v171 = v254;
            while (1)
            {
              _s15ConversationKit11ParticipantVWOcTm_3(v168, v199, (void (*)(void))type metadata accessor for Participant);
              id v172 = OUTLINED_FUNCTION_29_0();
              _s15ConversationKit11ParticipantVWOcTm_3(v172, v173, v174);
              if (swift_getEnumCaseMultiPayload() == 4)
              {
                uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                OUTLINED_FUNCTION_8_2((uint64_t *)(v122 + *(int *)(v175 + 64)));
                OUTLINED_FUNCTION_28_12();
                type metadata accessor for Date();
                OUTLINED_FUNCTION_0();
                OUTLINED_FUNCTION_26_2();
                v176();
                outlined init with copy of Participant?((uint64_t)&v266[6], (uint64_t)v267, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
                outlined destroy of Participant.MediaInfo((uint64_t)v266);
                if (v267[3] != 1)
                {
                  memcpy(v266, v267, 0xD1uLL);
                  long long v177 = BYTE8(v266[2]);
                  outlined destroy of Participant.ScreenInfo((uint64_t)v266);
                  unsigned __int8 v171 = v254;
                  goto LABEL_98;
                }
              }
              else
              {
                outlined destroy of PushToTalkNotice(v122, (void (*)(void))type metadata accessor for Participant.State);
                OUTLINED_FUNCTION_30_13();
                bzero(v263, 0xB1uLL);
              }
              outlined destroy of SystemUpdateNotice?((uint64_t)v267, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
              long long v177 = 2;
LABEL_98:
              char v178 = v258;
              _s15ConversationKit11ParticipantVWOcTm_3(v264, v258, (void (*)(void))type metadata accessor for Participant);
              if (v177 != 2)
              {
                _s15ConversationKit11ParticipantVWOcTm_3(v178, v171, (void (*)(void))type metadata accessor for Participant.State);
                if (swift_getEnumCaseMultiPayload() == 4)
                {
                  uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
                  OUTLINED_FUNCTION_8_2((uint64_t *)(v171 + *(int *)(v179 + 64)));
                  OUTLINED_FUNCTION_28_12();
                  type metadata accessor for Date();
                  OUTLINED_FUNCTION_0();
                  OUTLINED_FUNCTION_26_2();
                  v180();
                  outlined init with copy of Participant?((uint64_t)&v266[6], (uint64_t)v265, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
                  outlined destroy of Participant.MediaInfo((uint64_t)v266);
                  if (v265[3] != 1)
                  {
                    memcpy(v267, v265, 0xD1uLL);
                    char v181 = v178;
                    uint64_t v182 = v267[5];
                    outlined destroy of Participant.ScreenInfo((uint64_t)v267);
                    outlined destroy of PushToTalkNotice(v181, (void (*)(void))type metadata accessor for Participant);
                    if (v182)
                    {
                      v238 = v249;
                      outlined init with take of ConversationControlsAction(v264, v249, (void (*)(void))type metadata accessor for Participant);
                      uint64_t v239 = 0;
                      id v197 = (uint64_t)v243;
                      goto LABEL_112;
                    }
                    goto LABEL_106;
                  }
                }
                else
                {
                  outlined destroy of PushToTalkNotice(v171, (void (*)(void))type metadata accessor for Participant.State);
                  memset(v265, 0, 24);
                  v265[3] = 1;
                  bzero(v262, 0xB1uLL);
                }
                outlined destroy of SystemUpdateNotice?((uint64_t)v265, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
              }
              outlined destroy of PushToTalkNotice(v178, (void (*)(void))type metadata accessor for Participant);
LABEL_106:
              char v199 = v264;
              outlined destroy of PushToTalkNotice(v264, (void (*)(void))type metadata accessor for Participant);
              v168 += v170;
              --v166;
              char v122 = (uint64_t)v253;
              if (!v166)
              {
                uint64_t v239 = 1;
                id v197 = (uint64_t)v243;
                v238 = v249;
                goto LABEL_112;
              }
            }
          }
          uint64_t v239 = 1;
          v238 = v249;
LABEL_112:
          uint64_t v183 = v244;
          __swift_storeEnumTagSinglePayload(v238, v239, 1, v244);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_9_1(v238);
          char v184 = v246;
          int v185 = v250;
          if (!v190)
          {
            outlined init with take of ConversationControlsAction(v238, (uint64_t)v242, (void (*)(void))type metadata accessor for Participant);
            __int16 v189 = v247;
            outlined init with copy of Participant?(v197, v247, &demangling cache variable for type metadata for Participant?);
            OUTLINED_FUNCTION_9_1(v189);
            if (v190)
            {
              char v191 = &demangling cache variable for type metadata for Participant?;
              uint64_t v192 = (long long *)v189;
            }
            else
            {
              Participant.screenInfo.getter(v266);
              outlined destroy of PushToTalkNotice(v189, (void (*)(void))type metadata accessor for Participant);
              if (*((void *)&v266[1] + 1) != 1)
              {
                OUTLINED_FUNCTION_10_26();
LABEL_131:
                char v203 = (uint64_t)v242;
                String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v183, v189, 0xD000000000000011, 0x80000001C37988B0);
                OUTLINED_FUNCTION_46_6();
                uint64_t v204 = (objc_class *)objc_msgSend(self, sel_conversationKit);
                v205.super.Class isa = v204;
                long long v206 = (void *)OUTLINED_FUNCTION_2_29(v189, v238, 0x61737265766E6F43, 0xEF74694B6E6F6974, v205);
                long long v208 = v207;
                swift_bridgeObjectRelease();

                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
                uint64_t v209 = OUTLINED_FUNCTION_25_15();
                *(_OWORD *)(v209 + 16) = xmmword_1C3769620;
                char v210 = *(void **)(v203 + *(int *)(v244 + 28));
                uint64_t v211 = MEMORY[0x1E4FBB1A0];
                v263 = v206;
                v264 = v208;
                if (v210)
                {
                  char v212 = v210;
                  uint64_t v213 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v212);
                  if (v214)
                  {
                    v215 = (void *)v213;
                    unint64_t v216 = v214;
                    if (objc_msgSend(v212, sel_shouldHideContact))
                    {
                      v262 = v215;
                      v260 = (long long *)type metadata accessor for PersonNameComponents();
                      v261 = v240;
                      OUTLINED_FUNCTION_5_3();
                      unint64_t v218 = v217;
                      MEMORY[0x1F4188790](v219);
                      OUTLINED_FUNCTION_60();
                      swift_bridgeObjectRetain();
                      PersonNameComponents.init()();
                      PersonNameComponents.givenName.setter();
                      PersonNameComponents.familyName.setter();
                      if (one-time initialization token for initials != -1) {
                        swift_once();
                      }
                      swift_beginAccess();
                      char v220 = (id)static NSPersonNameComponentsFormatter.initials;
                      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                      v222 = objc_msgSend(v220, sel_stringFromPersonNameComponents_, isa);

                      uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v225 = v224;

                      (*(void (**)(uint64_t, long long *))(v218 + 8))(v208, v260);
                      *(void *)&v266[0] = v223;
                      *((void *)&v266[0] + 1) = v225;
                      lazy protocol witness table accessor for type String and conformance String();
                      StringProtocol.localizedUppercase.getter();

                      swift_bridgeObjectRelease();
                      unint64_t v226 = 0;
                      v227 = v216;
                      uint64_t v228 = (uint64_t)v242;
                      v229 = v262;
                      goto LABEL_141;
                    }

                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                  }
                  char v203 = (uint64_t)v242;
                }
                uint64_t v230 = v241;
                _s15ConversationKit11ParticipantVWOcTm_3(v203, v241, (void (*)(void))type metadata accessor for Participant);
                swift_retain();
                ParticipantContactDetailsCache.contactDetails(for:)();
                uint64_t v228 = v203;
                v229 = (void *)*((void *)&v266[1] + 1);
                v227 = *(void *)&v266[2];
                unint64_t v226 = *(id *)&v266[0];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_release();
                uint64_t v231 = v230;
                uint64_t v211 = MEMORY[0x1E4FBB1A0];
                outlined destroy of PushToTalkNotice(v231, (void (*)(void))type metadata accessor for Participant);
LABEL_141:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                *(void *)(v209 + 56) = v211;
                *(void *)(v209 + 64) = lazy protocol witness table accessor for type String and conformance String();
                *(void *)(v209 + 32) = v229;
                *(void *)(v209 + 40) = v227;
                String.init(format:_:)();
                OUTLINED_FUNCTION_26_15();
                swift_bridgeObjectRelease();
                outlined destroy of PushToTalkNotice(v228, (void (*)(void))type metadata accessor for Participant);
                v195 = (uint64_t)v243;
                goto LABEL_142;
              }
              char v191 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
              uint64_t v192 = v266;
            }
            outlined destroy of SystemUpdateNotice?((uint64_t)v192, v191);
            uint64_t v183 = 0;
            __int16 v189 = 1;
            goto LABEL_131;
          }
          outlined destroy of SystemUpdateNotice?(v238, &demangling cache variable for type metadata for Participant?);
          outlined init with copy of Participant?(v197, v185, &demangling cache variable for type metadata for Participant?);
          OUTLINED_FUNCTION_9_1(v185);
          if (v190)
          {
            Swift::String v186 = v184;
            Swift::String v187 = &demangling cache variable for type metadata for Participant?;
            int v188 = (long long *)v185;
          }
          else
          {
            id v196 = v185;
            Participant.screenInfo.getter(v266);
            outlined destroy of PushToTalkNotice(v185, (void (*)(void))type metadata accessor for Participant);
            Swift::String v186 = v184;
            if (*((void *)&v266[1] + 1) != 1)
            {
              OUTLINED_FUNCTION_10_26();
              goto LABEL_129;
            }
            Swift::String v187 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
            int v188 = v266;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v188, v187);
          uint64_t v183 = 0;
          id v196 = 1;
LABEL_129:
          String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v183, v196, 0x535F4E4545524353, 0xEE00474E49524148);
          OUTLINED_FUNCTION_47_6();
          unsigned __int8 v200 = (objc_class *)objc_msgSend(self, sel_conversationKit);
          v201.super.Class isa = v200;
          OUTLINED_FUNCTION_2_29(v196, v183, 0x61737265766E6F43, 0xEF74694B6E6F6974, v201);
          OUTLINED_FUNCTION_33_15();

          outlined destroy of SystemUpdateNotice?(v197, &demangling cache variable for type metadata for Participant?);
          long long v93 = 0;
          unsigned __int8 v202 = v186;
LABEL_145:
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
          v232 = v269;
          v233 = v270;
          __swift_project_boxed_opaque_existential_1(v268, v269);
          v234 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v233 + 72))(v232, v233);
          memset(v266, 0, 32);
          LOBYTE(v266[2]) = 1;
          uint64_t v235 = OUTLINED_FUNCTION_29_0();
          static NSAttributedString.localizedString(_:prefixImage:imageBounds:)(v235, v236, v234, v237);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          if (v202) {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v268);
          }
          goto LABEL_148;
        }
      }
      __swift_project_boxed_opaque_existential_1(v268, v269);
      uint64_t v84 = OUTLINED_FUNCTION_48_1();
      uint64_t v86 = (void *)v85(v84);

      outlined init with copy of IDSLookupManager((uint64_t)v268, (uint64_t)v266);
      if (v86)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v266);
LABEL_17:
        __swift_project_boxed_opaque_existential_1(v268, v269);
        uint64_t v87 = OUTLINED_FUNCTION_48_1();
        v88(v87);
        OUTLINED_FUNCTION_26_15();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
        uint64_t v89 = v269;
        long long v90 = v270;
        __swift_project_boxed_opaque_existential_1(v268, v269);
        long long v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 32))(v89, v90);
        long long v93 = static UIImageView.appIcon(for:)(v91, v92);
        swift_bridgeObjectRelease();
LABEL_144:
        unsigned __int8 v202 = v246;
        goto LABEL_145;
      }
      __swift_project_boxed_opaque_existential_1(v266, *((uint64_t *)&v266[1] + 1));
      long long v97 = (unsigned __int8 *)v252;
      uint64_t v98 = OUTLINED_FUNCTION_24_2();
      v99(v98);
      char v100 = type metadata accessor for Collaboration(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v97, 1, v100) == 1)
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v97, &demangling cache variable for type metadata for Collaboration?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v266);
        uint64_t v94 = v261;
        uint64_t v95 = v259;
      }
      else
      {
        uint64_t v133 = v97[16];
        outlined destroy of PushToTalkNotice((uint64_t)v97, (void (*)(void))type metadata accessor for Collaboration);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v266);
        uint64_t v94 = v261;
        uint64_t v95 = v259;
        if (v133 == 2) {
          goto LABEL_17;
        }
      }
      uint64_t v65 = v245;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v268);
    }
    else
    {

      outlined destroy of SystemUpdateNotice?((uint64_t)v266, &demangling cache variable for type metadata for Activity?);
      uint64_t v94 = v261;
      uint64_t v95 = v259;
    }
    uint64_t v134 = swift_getObjectType();
    uint64_t v135 = (unsigned int (*)(void))v95[23];
    OUTLINED_FUNCTION_27_15();
    if (v135() == 1
      && OUTLINED_FUNCTION_34_8() == (id)3
      && (((uint64_t (*)(uint64_t, void *))v95[12])(v134, v95) & 1) != 0)
    {
      LODWORD(v264) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v262) + 0x850))() ^ 1;
    }
    else
    {
      LODWORD(v264) = 0;
    }
    OUTLINED_FUNCTION_27_15();
    LODWORD(v263) = v135() != 5 && (OUTLINED_FUNCTION_27_15(), v135() != 6) && OUTLINED_FUNCTION_34_8() != (id)4;
    if ((objc_msgSend(v94, sel_isOneToOneModeEnabled) & 1) == 0
      && (((uint64_t (*)(uint64_t))v259[15])(v134) & 1) != 0
      && (OUTLINED_FUNCTION_34_8() == (id)2 || OUTLINED_FUNCTION_34_8() == (id)3)
      && (OUTLINED_FUNCTION_27_15(), v135() != 1)
      && (uint64_t v136 = OUTLINED_FUNCTION_39_8(), (v137(v136) & 1) != 0))
    {
      os_log_type_t v138 = objc_msgSend(v94, sel_activeRemoteParticipants);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      OUTLINED_FUNCTION_45_4();
      BOOL v139 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v140 = specialized Set.count.getter(v139);
      swift_bridgeObjectRelease();
      char v141 = v140 != 0;
    }
    else
    {
      char v141 = 1;
    }
    if (objc_msgSend(v261, sel_isOneToOneModeEnabled))
    {
      uint64_t v142 = v259;
      long long v143 = OUTLINED_FUNCTION_39_8();
      id v145 = v144(v143);
    }
    else
    {
      id v145 = 0;
      uint64_t v142 = v259;
    }
    if ((((uint64_t (*)(uint64_t, void *))v142[13])(v134, v142) & 1) == 0
      && ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v262) + 0x850))() & 1) == 0
      && (objc_msgSend(v261, sel_state) != (id)2) | v145 & 1
      && ((OUTLINED_FUNCTION_27_15(), v135() != 3)
       || (objc_msgSend(v261, sel_isOneToOneModeEnabled) & 1) != 0
       || objc_msgSend(v261, sel_letMeInRequestState))
      && objc_msgSend(v261, sel_state))
    {
      if (!((static Platform.current.getter() != 2) | v264 & 1))
      {
LABEL_75:
        uint64_t v146 = v263 & v141;
        goto LABEL_78;
      }
    }
    else if ((v264 & 1) == 0)
    {
      goto LABEL_75;
    }
    uint64_t v146 = 0;
LABEL_78:
    uint64_t v147 = v257;
    os_log_type_t v148 = v261;
    BOOL v149 = (uint64_t)v259;
    ConversationControlsManager.isOneToOneConversation.getter();
    if (v150)
    {
      static ConversationControlsRecipeGenerator.individualCallSubtitle(conversation:call:isConnecting:)(v148, v147, v149, v146);
      swift_unknownObjectRelease();
    }
    else
    {
      static ConversationControlsRecipeGenerator.groupCallSubtitle(conversation:isConnecting:)(v148, v146);
      swift_unknownObjectRelease();
    }
    goto LABEL_148;
  }
  if ((v48 & 1) == 0 || objc_msgSend(v261, sel_letMeInRequestState) == (id)3) {
    goto LABEL_8;
  }
  __int16 v101 = v261;
  uint64_t v102 = objc_msgSend(v261, sel_pendingMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  char v103 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v104 = specialized Set.count.getter(v103);
  swift_bridgeObjectRelease();
  Swift::String v105 = objc_msgSend(v101, sel_localParticipantAssociation);

  if (!v105 || objc_msgSend(v101, sel_state) != (id)1)
  {
    uint64_t v151 = objc_msgSend(v101, sel_activeRemoteParticipants);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    uint64_t v152 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    long long v113 = specialized Set.count.getter(v152);
    swift_bridgeObjectRelease();
    if (v113 || v104 < 1)
    {
      char v157 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      v158.super.Class isa = v157;
      OUTLINED_FUNCTION_2_29(v159, 0x80000001C37988F0, 0x61737265766E6F43, 0xEF74694B6E6F6974, v158);
      OUTLINED_FUNCTION_47_6();
    }
    else
    {
      OUTLINED_FUNCTION_47();
      String.localizedConversationControls.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v153 = OUTLINED_FUNCTION_25_15();
      unint64_t v154 = MEMORY[0x1E4FBB550];
      *(_OWORD *)(v153 + 16) = xmmword_1C3769620;
      uint64_t v155 = MEMORY[0x1E4FBB5C8];
      *(void *)(v153 + 56) = v154;
      *(void *)(v153 + 64) = v155;
      *(void *)(v153 + 32) = v104;
      OUTLINED_FUNCTION_24_2();
      uint64_t v104 = static String.localizedStringWithFormat(_:_:)();
      long long v113 = v156;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_85;
  }
  Swift::String v106 = (void *)MEMORY[0x1C87730B0](0xD000000000000011, 0x80000001C3798930);
  Swift::String v107 = (id)TUStringKeyForProduct();

  if (v107)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v108 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    long long v109 = OUTLINED_FUNCTION_24_2();
    v110.super.Class isa = v108;
    uint64_t v104 = OUTLINED_FUNCTION_2_29(v109, v111, 0x61737265766E6F43, 0xEF74694B6E6F6974, v110);
    long long v113 = v112;
    swift_bridgeObjectRelease();

LABEL_85:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    uint64_t v58 = v104;
    uint64_t v59 = v113;
    goto LABEL_21;
  }
  __break(1u);
}

void static ConversationControlsRecipeGenerator.individualCallSubtitle(conversation:call:isConnecting:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (static Platform.current.getter() == 2)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      uint64_t countAndFlagsBits = 0;
      id object = (void *)0xE000000000000000;
LABEL_8:
      NSMutableAttributedString.__allocating_init(string:)(*(Swift::String *)&countAndFlagsBits);
      return;
    }
    id v24 = objc_msgSend(self, sel_conversationKit);
    unint64_t v58 = 0xE000000000000000;
    uint64_t v25 = 0x495443454E4E4F43;
    unint64_t v26 = 0xEA0000000000474ELL;
    goto LABEL_22;
  }
  id v8 = objc_msgSend(a1, sel_localParticipantAssociation);

  if (v8 && objc_msgSend(a1, sel_state) == (id)1)
  {
    uint64_t v9 = (void *)MEMORY[0x1C87730B0](0xD000000000000011, 0x80000001C3798930);
    id v10 = (id)TUStringKeyForProduct();

    if (v10)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      id v14 = objc_msgSend(self, sel_conversationKit);
      v70._id object = (void *)0xE000000000000000;
      v15._uint64_t countAndFlagsBits = v11;
      v15._id object = v13;
      v16.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v16.value._id object = (void *)0xEF74694B6E6F6974;
      v17._uint64_t countAndFlagsBits = 0;
      v17._id object = (void *)0xE000000000000000;
      v70._uint64_t countAndFlagsBits = 0;
      Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v70);
      swift_bridgeObjectRelease();

      uint64_t countAndFlagsBits = v18._countAndFlagsBits;
      id object = v18._object;
      goto LABEL_8;
    }
    __break(1u);
  }
  else
  {
    if (!objc_msgSend(a1, sel_avMode))
    {
      id v27 = objc_msgSend(a1, sel_activeRemoteParticipants);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      uint64_t v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      char v29 = specialized Set.isEmpty.getter(v28);
      swift_bridgeObjectRelease();
      id v24 = objc_msgSend(self, sel_conversationKit);
      unint64_t v58 = 0xE000000000000000;
      if (v29)
      {
        uint64_t v25 = 0x44455449564E49;
        unint64_t v26 = 0xE700000000000000;
      }
      else
      {
        uint64_t v25 = 0x455649544341;
        unint64_t v26 = 0xE600000000000000;
      }
LABEL_22:
      v46.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v46.value._id object = (void *)0xEF74694B6E6F6974;
      v47._uint64_t countAndFlagsBits = 0;
      v47._id object = (void *)0xE000000000000000;
      uint64_t v48 = 0;
      Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v25, v46, (NSBundle)v24, v47, *(Swift::String *)(&v58 - 1));

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
      NSMutableAttributedString.__allocating_init(string:)(v49);
      return;
    }
    if (objc_msgSend(a1, sel_isVideo))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      uint64_t v19 = (void *)*MEMORY[0x1E4FB2950];
      uint64_t v62 = 0x69662E6F65646976;
      unint64_t v63 = 0xEA00000000006C6CLL;
      uint64_t v64 = 1;
      uint64_t v65 = v19;
      __int16 v66 = 0;
      uint64_t v67 = 4;
      char v68 = 0;
      uint64_t v69 = 0;
      id v20 = v19;
      id v21 = static UIImage.symbolImage(for:)((uint64_t)&v62);

      swift_bridgeObjectRelease();
      if (v21)
      {
        id v22 = objc_msgSend(self, sel_secondaryLabelColor);
        id v23 = objc_msgSend(v21, sel_imageWithTintColor_, v22);
      }
      else
      {
        id v23 = 0;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      id v50 = objc_msgSend(self, sel_conversationKit);
      unint64_t v59 = 0xE000000000000000;
      uint64_t v51 = 0x454D495445434146;
      uint64_t v52 = 0x4F454449565FLL;
    }
    else
    {
      uint64_t ObjectType = swift_getObjectType();
      if ((Call.isFromMessagesScreenShare.getter() & 1) != 0
        && (*(unsigned int (**)(uint64_t, uint64_t))(a3 + 184))(ObjectType, a3) == 3)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        id v31 = objc_msgSend(self, sel_conversationKit);
        v32._uint64_t countAndFlagsBits = 0xD000000000000027;
        v71._id object = (void *)0xE000000000000000;
        v32._id object = (void *)0x80000001C37989B0;
        v33.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v33.value._id object = (void *)0xEF74694B6E6F6974;
        v34._uint64_t countAndFlagsBits = 0;
        v34._id object = (void *)0xE000000000000000;
        v71._uint64_t countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v71);

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_1C3769620;
        uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(ObjectType, a3);
        uint64_t v38 = v37;
        *(void *)(v35 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v35 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v35 + 32) = v36;
        *(void *)(v35 + 40) = v38;
        uint64_t v39 = String.init(format:_:)();
        uint64_t v41 = v40;
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v39;
        id object = v41;
        goto LABEL_8;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      uint64_t v42 = (void *)*MEMORY[0x1E4FB2950];
      uint64_t v62 = 0x69662E656E6F6870;
      unint64_t v63 = 0xEA00000000006C6CLL;
      uint64_t v64 = 1;
      uint64_t v65 = v42;
      __int16 v66 = 0;
      uint64_t v67 = 4;
      char v68 = 0;
      uint64_t v69 = 0;
      id v43 = v42;
      id v44 = static UIImage.symbolImage(for:)((uint64_t)&v62);

      swift_bridgeObjectRelease();
      if (v44)
      {
        id v45 = objc_msgSend(self, sel_secondaryLabelColor);
        id v23 = objc_msgSend(v44, sel_imageWithTintColor_, v45);
      }
      else
      {
        id v23 = 0;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      id v50 = objc_msgSend(self, sel_conversationKit);
      unint64_t v59 = 0xE000000000000000;
      uint64_t v51 = 0x454D495445434146;
      uint64_t v52 = 0x4F494455415FLL;
    }
    unint64_t v53 = v52 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
    v54.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v54.value._id object = (void *)0xEF74694B6E6F6974;
    v55._uint64_t countAndFlagsBits = 0;
    v55._id object = (void *)0xE000000000000000;
    uint64_t v56 = 0;
    Swift::String v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v51, v54, (NSBundle)v50, v55, *(Swift::String *)(&v59 - 1));

    memset(v60, 0, sizeof(v60));
    char v61 = 1;
    static NSAttributedString.localizedString(_:prefixImage:imageBounds:)(v57._countAndFlagsBits, (uint64_t)v57._object, v23, (uint64_t)v60);
    swift_bridgeObjectRelease();
  }
}

void static ConversationControlsRecipeGenerator.groupCallSubtitle(conversation:isConnecting:)(void *a1, char a2)
{
  id v4 = objc_msgSend(a1, sel_mergedActiveRemoteParticipants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = specialized Set.count.getter(v5);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(a1, sel_pendingMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = specialized Set.count.getter(v8);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a1, sel_localParticipantAssociation);

  if (!v10 || objc_msgSend(a1, sel_state) != (id)1)
  {
    if (v6 || v9 < 1)
    {
      if (a2)
      {
        id v27 = objc_msgSend(self, sel_conversationKit);
        v38._id object = (void *)0xE000000000000000;
        v28._uint64_t countAndFlagsBits = 0x495443454E4E4F43;
        v28._id object = (void *)0xEA0000000000474ELL;
        v29.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v29.value._id object = (void *)0xEF74694B6E6F6974;
        v30._uint64_t countAndFlagsBits = 0;
        v30._id object = (void *)0xE000000000000000;
        v38._uint64_t countAndFlagsBits = 0;
        Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v38);
        uint64_t countAndFlagsBits = v31._countAndFlagsBits;
        id object = v31._object;

        goto LABEL_12;
      }
      String.localizedConversationControls.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      uint64_t v33 = MEMORY[0x1E4FBB550];
      *(_OWORD *)(v32 + 16) = xmmword_1C3769620;
      uint64_t v34 = MEMORY[0x1E4FBB5C8];
      *(void *)(v32 + 56) = v33;
      *(void *)(v32 + 64) = v34;
      *(void *)(v32 + 32) = v6;
      uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)();
      id object = v35;
      swift_bridgeObjectRelease();
    }
    else
    {
      String.localizedConversationControls.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = MEMORY[0x1E4FBB550];
      *(_OWORD *)(v23 + 16) = xmmword_1C3769620;
      uint64_t v25 = MEMORY[0x1E4FBB5C8];
      *(void *)(v23 + 56) = v24;
      *(void *)(v23 + 64) = v25;
      *(void *)(v23 + 32) = v9;
      uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)();
      id object = v26;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v11 = (void *)MEMORY[0x1C87730B0](0xD000000000000011, 0x80000001C3798930);
  id v12 = (id)TUStringKeyForProduct();

  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v15 = v14;

    id v16 = objc_msgSend(self, sel_conversationKit);
    v37._id object = (void *)0xE000000000000000;
    v17._uint64_t countAndFlagsBits = v13;
    v17._id object = v15;
    v18.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v18.value._id object = (void *)0xEF74694B6E6F6974;
    v19._uint64_t countAndFlagsBits = 0;
    v19._id object = (void *)0xE000000000000000;
    v37._uint64_t countAndFlagsBits = 0;
    Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v37);
    uint64_t countAndFlagsBits = v20._countAndFlagsBits;
    id object = v20._object;
    swift_bridgeObjectRelease();

LABEL_12:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v36._uint64_t countAndFlagsBits = countAndFlagsBits;
    v36._id object = object;
    NSMutableAttributedString.__allocating_init(string:)(v36);
    return;
  }
  __break(1u);
}

Class ConversationControlsRecipeGenerator.faceTimeIncomingCallSubtitle(for:)(void *a1)
{
  id v2 = (void *)0xEE004F494455415FLL;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  id v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x290))();
  if (v4)
  {
    uint64_t v5 = v4;
    if (objc_msgSend(v4, sel_resolvedAudioVideoMode) == (id)2) {
      id v2 = (void *)0xEE004F454449565FLL;
    }
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v6 = unk_1EA37DFA0;
    id v7 = (void *)qword_1EA37DFA8;
    id v8 = (id)static LocalizationSource.conversationKit;
    swift_bridgeObjectRetain();
    v42._id object = (void *)0xE000000000000000;
    v9._uint64_t countAndFlagsBits = 0x454D495445434146;
    v9._id object = v2;
    v10.value._uint64_t countAndFlagsBits = v6;
    v10.value._id object = v7;
    v11._uint64_t countAndFlagsBits = 0;
    v11._id object = (void *)0xE000000000000000;
    v42._uint64_t countAndFlagsBits = 0;
    Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v42);
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    id object = v12._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    id v15 = objc_msgSend(v5, sel_link);
    if (v15)
    {
      uint64_t v16 = outlined bridged method (ob) of @objc TUConversationLink.displayName.getter(v15);
      if (v17)
      {
        uint64_t v18 = v16;
        Swift::String v19 = v17;
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v18;
        id object = v19;
      }
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v20._uint64_t countAndFlagsBits = countAndFlagsBits;
    v20._id object = object;
    v21.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v20).super.super.isa;
  }
  else
  {
    (*(void (**)(void))((*v3 & *a1) + 0x270))();
    uint64_t v23 = v22;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationControls);
    swift_unknownObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v41 = v28;
      *(_DWORD *)id v27 = 136315138;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Call);
      uint64_t v29 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v25, v26, "Unable to find FaceTime conversation for call %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v28, -1, -1);
      MEMORY[0x1C87760E0](v27, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 128))(ObjectType, v23)) {
      uint64_t v32 = (void *)0xEE004F454449565FLL;
    }
    else {
      uint64_t v32 = (void *)0xEE004F494455415FLL;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v33 = unk_1EA37DFA0;
    uint64_t v34 = (void *)qword_1EA37DFA8;
    id v35 = (id)static LocalizationSource.conversationKit;
    swift_bridgeObjectRetain();
    v43._id object = (void *)0xE000000000000000;
    v36._uint64_t countAndFlagsBits = 0x454D495445434146;
    v36._id object = v32;
    v37.value._uint64_t countAndFlagsBits = v33;
    v37.value._id object = v34;
    v38._uint64_t countAndFlagsBits = 0;
    v38._id object = (void *)0xE000000000000000;
    v43._uint64_t countAndFlagsBits = 0;
    Swift::String v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v37, (NSBundle)v35, v38, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v21.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v39).super.super.isa;
    swift_unknownObjectRelease();
  }
  return v21.super.super.isa;
}

uint64_t ConversationControlsRecipeGenerator.telephonyCallSubtitles(for:)(void *a1)
{
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 160))(ObjectType, v5);
  unsigned int v8 = objc_msgSend(v7, sel_isTelephonyProvider);

  if (!v8)
  {
LABEL_15:
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for CallParticipantLabelDescriptor();
  char v9 = (*(uint64_t (**)(void))((*v2 & *a1) + 0x968))();
  Swift::String_optional v10 = static CallParticipantLabelDescriptor.labelDescriptor(for:callCount:alertAvailable:allowsDuration:)(v3, v5, 1, v9 & 1, 0);
  if (!v10)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationControls);
    swift_unknownObjectRetain_n();
    NSMutableAttributedString v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v28 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Call);
      uint64_t v25 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v21, v22, "Unable to obtain label descriptor for telephony call: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v24, -1, -1);
      MEMORY[0x1C87760E0](v23, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    goto LABEL_15;
  }
  Swift::String v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(void))((*v2 & *v10) + 0x80))();
  (*(void (**)(void))((*v2 & *v11) + 0x98))();
  if (v13) {
    specialized Array.replaceSubrange<A>(_:with:)();
  }
  uint64_t v14 = *(void *)(v12 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    return MEMORY[0x1E4FBC860];
  }
  uint64_t v28 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v15 = (void **)(v12 + 40);
  do
  {
    uint64_t v16 = (uint64_t)*(v15 - 1);
    Swift::String v17 = *v15;
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v16;
    v18._id object = v17;
    NSMutableAttributedString.__allocating_init(string:)(v18);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v15 += 2;
    --v14;
  }
  while (v14);
  uint64_t v19 = v28;
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();

  return v19;
}

UIImage *UIImage.withPadding(_:)(double a1)
{
  objc_msgSend(v1, sel_size);
  CGFloat v4 = a1 + a1 + v3;
  objc_msgSend(v1, sel_size);
  CGFloat v6 = a1 + a1 + v5;
  objc_msgSend(v1, sel_scale);
  CGFloat v8 = v7;
  v11.CGFloat width = v4;
  v11.CGFloat height = v6;
  UIGraphicsBeginImageContextWithOptions(v11, 0, v8);
  objc_msgSend(v1, sel_drawAtPoint_, a1, a1);
  char v9 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return v9;
}

void *outlined bridged method (ob) of @objc TUNearbyDeviceHandle.name.getter(void *a1)
{
  return outlined bridged method (ob) of @objc TUConversationHandoffEligibility.localizedDeviceCategory.getter(a1, (SEL *)&selRef_name);
}

void *outlined bridged method (ob) of @objc TUConversationHandoffEligibility.localizedDeviceCategory.getter(void *a1, SEL *a2)
{
  id v2 = a1;
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_47_6();

  return v2;
}

id outlined bridged method (mbgnnn) of @objc static UIImage._applicationIconImage(forBundleIdentifier:format:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CGFloat v6 = (void *)MEMORY[0x1C87730B0]();
  id v7 = objc_msgSend(a4, sel__applicationIconImageForBundleIdentifier_format_, v6, a3);

  return v7;
}

uint64_t outlined bridged method (pb) of @objc TUCollaborationInitiator.handle.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_handle);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_provider);
  unsigned __int8 v3 = objc_msgSend(v2, sel_isSystemProvider);

  id v4 = 0;
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = outlined bridged method (ob) of @objc TUCallProvider.bundleIdentifier.getter(objc_msgSend(a1, sel_provider));
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = v5;
      char v9 = self;
      id v4 = outlined bridged method (mbgnnn) of @objc static UIImage._applicationIconImage(forBundleIdentifier:format:)(v8, v7, 5, v9);
      if (v4)
      {
        id v10 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
        swift_bridgeObjectRetain();
        id v11 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v8, v7, 1);
        swift_bridgeObjectRelease();
        id v12 = objc_msgSend(v11, sel_localizedName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

id specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 160);
  uint64_t v6 = (void *)v5(a3, a4);
  unsigned __int8 v7 = objc_msgSend(v6, sel_isSystemProvider);

  id v8 = 0;
  if ((v7 & 1) == 0)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v10 = (void *)v5(ObjectType, a4);
    outlined bridged method (ob) of @objc TUCallProvider.bundleIdentifier.getter(v10);
    if (v11)
    {
      OUTLINED_FUNCTION_26_15();
      self;
      uint64_t v12 = OUTLINED_FUNCTION_29_0();
      id v8 = outlined bridged method (mbgnnn) of @objc static UIImage._applicationIconImage(forBundleIdentifier:format:)(v12, v13, 5, v14);
      if (v8)
      {
        objc_allocWithZone(MEMORY[0x1E4F223C8]);
        swift_bridgeObjectRetain();
        uint64_t v15 = OUTLINED_FUNCTION_29_0();
        id v17 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v15, v16, 1);
        swift_bridgeObjectRelease();
        id v18 = objc_msgSend(v17, sel_localizedName);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        OUTLINED_FUNCTION_46_6();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ConversationControlsRecipeGenerator()
{
  return self;
}

uint64_t method lookup function for ConversationControlsRecipeGenerator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsRecipeGenerator);
}

uint64_t dispatch thunk of ConversationControlsRecipeGenerator.generate(for:type:controlsManager:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationControlsRecipeGenerator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void outlined consume of SystemApertureElement?(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  if (a1 != (void *)1)
  {
  }
}

id outlined copy of ConversationControlsRecipe.View?(id result, void *a2)
{
  if (result)
  {
    id v3 = result;
    id v2 = a2;
    return v3;
  }
  return result;
}

void outlined consume of ConversationControlsRecipe.View?(void *a1, void *a2)
{
  if (a1)
  {
  }
}

uint64_t outlined init with take of ConversationControlsRecipe?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_26_0(a1, a2, a3);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return v3;
}

uint64_t outlined consume of NoticeAccessory(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of SessionActionNotice.NoticeType(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62 == 2) {
    return swift_bridgeObjectRetain();
  }
  if ((a3 >> 62) <= 1) {
    return outlined copy of CallScreening.EndingAction(result, a2, a3);
  }
  return result;
}

uint64_t outlined consume of SessionActionNotice.NoticeType(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62 == 2) {
    return swift_bridgeObjectRelease();
  }
  if ((a3 >> 62) <= 1) {
    return outlined consume of CallScreening.EndingAction(result, a2, a3);
  }
  return result;
}

void *outlined retain of SystemApertureIcon?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_3(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

void *outlined consume of (icon: UIImage, accessibilityLabel: String)?(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of ConversationControlsAction(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of PushToTalkNotice(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

void Logger.traceFunctionStart(file:function:line:)()
{
  logCGFloat a = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_22(v1, v2, v3, v4, v5, v6, v7, v8, v16, loga))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315650;
    uint64_t v10 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v19);
    OUTLINED_FUNCTION_11_24();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v12 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_40();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, log, v0, "%s%s:%lu Called", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    OUTLINED_FUNCTION_16();
  }
  else
  {
    OUTLINED_FUNCTION_16();
  }
}

uint64_t specialized Logger.traceFunction<A>(returning:file:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    OUTLINED_FUNCTION_15_22();
    uint64_t v17 = OUTLINED_FUNCTION_9_32();
    *(_DWORD *)uint64_t v9 = 136315906;
    unint64_t v12 = OUTLINED_FUNCTION_8_31();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, 0x80000001C3798DD0, &v17);
    OUTLINED_FUNCTION_3_58();
    *(_WORD *)(v9 + 12) = 2080;
    __dst[0] = OUTLINED_FUNCTION_12_26((uint64_t)"traceFunction(returning:file:function:line:)");
    OUTLINED_FUNCTION_3_58();
    OUTLINED_FUNCTION_7_38();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2080;
    memcpy(__dst, a9, sizeof(__dst));
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = String.init<A>(reflecting:)();
    __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v10, v11, "%s%s:#%ld returning %s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void specialized Logger.traceFunction<A>(returning:file:function:line:)()
{
  logCGFloat a = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_22(v1, v2, v3, v4, v5, v6, v7, v8, v15, loga))
  {
    uint64_t v9 = OUTLINED_FUNCTION_15_22();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315906;
    unint64_t v10 = OUTLINED_FUNCTION_8_31();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, 0x80000001C3798DD0, &v21);
    OUTLINED_FUNCTION_11_24();
    OUTLINED_FUNCTION_3_58();
    *(_WORD *)(v9 + 12) = 2080;
    OUTLINED_FUNCTION_13_23((uint64_t)"traceFunction(returning:file:function:line:)", v16, (uint64_t)log, v20);
    OUTLINED_FUNCTION_3_58();
    OUTLINED_FUNCTION_6_40();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2080;
    swift_retain();
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, logb, v0, "%s%s:#%ld returning %s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
    swift_release();

    OUTLINED_FUNCTION_10_27();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_10_27();
  }
}

{
  uint64_t v0;
  os_log_type_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v11;
  uint64_t v12;

  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    OUTLINED_FUNCTION_15_22();
    unint64_t v12 = OUTLINED_FUNCTION_9_32();
    *(_DWORD *)os_log_type_t v0 = 136315906;
    int v2 = OUTLINED_FUNCTION_8_31();
    uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, 0x80000001C3798DD0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v0 + 12) = 2080;
    OUTLINED_FUNCTION_13_23((uint64_t)"traceFunction(returning:file:function:line:)", v8, (uint64_t)oslog, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_38();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v0 + 32) = 2080;
    swift_retain();
    int v3 = specialized CKStateMachine.description.getter();
    int v5 = v4;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, osloga, v1, "%s%s:#%ld returning %s", (uint8_t *)v0, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
    swift_release();

    OUTLINED_FUNCTION_10_27();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_10_27();
  }
}

void Logger.traceFunction<A>(returning:file:function:line:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  OUTLINED_FUNCTION_5_3();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain_n();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v17))
  {
    OUTLINED_FUNCTION_15_22();
    v24[1] = a11;
    uint64_t v25 = OUTLINED_FUNCTION_9_32();
    uint64_t v28 = v25;
    *(_DWORD *)a11 = 136315906;
    unint64_t v18 = OUTLINED_FUNCTION_8_31();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, 0x80000001C3798DD0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(a11 + 12) = 2080;
    uint64_t v27 = OUTLINED_FUNCTION_12_26((uint64_t)"traceFunction(returning:file:function:line:)");
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(a11 + 22) = 2048;
    uint64_t v27 = 16;
    uint64_t v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(a11 + 32) = 2080;
    a1(v19);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, a10);
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v26, v17, "%s%s:#%ld returning %s", (uint8_t *)a11, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_release_n();
    uint64_t v23 = v26;
  }
}

void Logger.traceFunctionReturn(file:function:line:)()
{
  OUTLINED_FUNCTION_4_46();
  Logger.traceFunctionReturn(file:function:line:)(v0, v1, v2, v3, v4, v5, v6, 0xD000000000000028, v7, v8, v9);
}

void Logger.traceFunctionSuspensionStart(file:function:line:)()
{
  OUTLINED_FUNCTION_4_46();
  Logger.traceFunctionReturn(file:function:line:)(v0, v1, v2, v3, v4, v5, v6, 0xD000000000000031, v7, v8, v9);
}

void Logger.traceFunctionSuspensionEnd(file:function:line:)()
{
  OUTLINED_FUNCTION_4_46();
  Logger.traceFunctionReturn(file:function:line:)(v0, v1, v2, v3, v4, v5, v6, 0xD00000000000002FLL, v7, v8, v9);
}

void Logger.traceFunctionReturn(file:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, const char *a11)
{
  logCGFloat a = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_22(v13, v14, v15, v16, v17, v18, v19, v20, v24, loga))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000052, 0x80000001C3798DD0, &v27);
    OUTLINED_FUNCTION_11_24();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a8, a9, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_6_40();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, log, v11, a11, (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    OUTLINED_FUNCTION_16();
  }
  else
  {
    OUTLINED_FUNCTION_16();
  }
}

Swift::Void __swiftcall MultiwayViewController.registerForSystemEventsIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __n128 v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(__n128))((*MEMORY[0x1E4FBC8C8] & **(void **)&v0[OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_features])
                                          + 0x100))(v3) & 1) != 0)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationKit);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1C2F90000, v7, v8, "dockkit registering for system events", v9, 2u);
      MEMORY[0x1C87760E0](v9, -1, -1);
    }

    id v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SystemEventsAgent()), sel_init);
    os_log_type_t v11 = (void **)&v1[OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_remoteControlAccessoryEventsAgent];
    swift_beginAccess();
    uint64_t v12 = *v11;
    *os_log_type_t v11 = v10;

    uint64_t v13 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v13);
    type metadata accessor for MainActor();
    int v14 = v1;
    uint64_t v15 = static MainActor.shared.getter();
    int v16 = (void *)swift_allocObject();
    uint64_t v17 = MEMORY[0x1E4FBCFD8];
    v16[2] = v15;
    v16[3] = v17;
    v16[4] = v14;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationKit);
    os_log_t v22 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v19))
    {
      int v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v20 = 0;
      _os_log_impl(&dword_1C2F90000, v22, v19, "DockKit system events control feature not enabled", v20, 2u);
      MEMORY[0x1C87760E0](v20, -1, -1);
    }
    os_log_t v21 = v22;
  }
}

uint64_t closure #1 in MultiwayViewController.registerForSystemEventsIfNecessary()()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in MultiwayViewController.registerForSystemEventsIfNecessary();
  return MultiwayViewController.registerForSystemEvents()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in MultiwayViewController.registerForSystemEventsIfNecessary(), v4, v3);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t MultiwayViewController.registerForSystemEvents()()
{
  v1[5] = v0;
  type metadata accessor for MainActor();
  v1[6] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[7] = v3;
  v1[8] = v2;
  return MEMORY[0x1F4188298](MultiwayViewController.registerForSystemEvents(), v3, v2);
}

{
  void *v0;
  void **v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(void);
  uint64_t (*v7)(void (*)(void *), uint64_t);
  uint64_t v8;

  uint64_t v1 = (void **)(v0[5] + OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_remoteControlAccessoryEventsAgent);
  swift_beginAccess();
  uint64_t v2 = *v1;
  v0[9] = *v1;
  if (v2)
  {
    uint64_t v3 = swift_allocObject();
    v0[10] = v3;
    swift_unknownObjectWeakInit();
    unint64_t v7 = (uint64_t (*)(void (*)(void *), uint64_t))((int)*MEMORY[0x1E4F5F7A0] + MEMORY[0x1E4F5F7A0]);
    v2;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *uint64_t v4 = v0;
    v4[1] = MultiwayViewController.registerForSystemEvents();
    return v7(partial apply for closure #1 in MultiwayViewController.registerForSystemEvents(), v3);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_6();
    return v6();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 72);
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release_n();

  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 56);
  return MEMORY[0x1F4188298](MultiwayViewController.registerForSystemEvents(), v6, v5);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

Swift::Void __swiftcall MultiwayViewController.deregisterForSystemEventsIfNecessary()()
{
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                   + OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_features))
                             + 0x100))() & 1) != 0)
  {
    MultiwayViewController.deregisterForSystemEvents()();
  }
}

void MultiwayViewController.deregisterForSystemEvents()()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_remoteControlAccessoryEventsAgent);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    id v3 = v2;
    dispatch thunk of SystemEventsAgent.deregisterSync()();

    uint64_t v2 = *v1;
  }
  *uint64_t v1 = 0;
}

void closure #1 in MultiwayViewController.registerForSystemEvents()(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    MultiwayViewController.handleDockKitEventCallback(event:)(a1);
  }
}

void MultiwayViewController.handleDockKitEventCallback(event:)(void *a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v4 = AccessorySystemEvent.header.getter();
  type metadata accessor for AccessorySystemEvent();
  if (static AccessorySystemEvent.kHeaderCameraShutter.getter() == v4)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationKit);
    id v6 = a1;
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109120;
      LODWORD(aBlock) = AccessorySystemEvent.payload.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2F90000, v7, v8, "Remote control accessory shutter button pressed with payload %u", v9, 8u);
      MEMORY[0x1C87760E0](v9, -1, -1);
    }
    else
    {
    }
    int v16 = AccessorySystemEvent.payload.getter();
    if (v16 == static AccessorySystemEvent.kHeaderEventRelease.getter())
    {
      type metadata accessor for OS_dispatch_queue();
      uint64_t v40 = static OS_dispatch_queue.main.getter();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v1;
      id v45 = partial apply for closure #1 in MultiwayViewController.handleDockKitEventCallback(event:);
      uint64_t v46 = v17;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v42 = 1107296256;
      uint64_t v15 = &block_descriptor_21_0;
LABEL_32:
      Swift::String v43 = thunk for @escaping @callee_guaranteed () -> ();
      id v44 = v15;
      uint64_t v28 = _Block_copy(&aBlock);
      id v29 = v2;
      swift_release();
      uint64_t v30 = type metadata accessor for DispatchQoS();
      uint64_t v39 = (uint64_t)&v39;
      uint64_t v31 = *(void *)(v30 - 8);
      MEMORY[0x1F4188790](v30);
      uint64_t v33 = (char *)&v39 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      static DispatchQoS.unspecified.getter();
      uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
      uint64_t v35 = *(void *)(v34 - 8);
      MEMORY[0x1F4188790](v34);
      Swift::String_optional v37 = (char *)&v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t aBlock = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      Swift::String v38 = v40;
      MEMORY[0x1C8773BA0](0, v33, v37, v28);
      _Block_release(v28);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    }
  }
  else
  {
    if (static AccessorySystemEvent.kHeaderCameraFlip.getter() == v4)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationKit);
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1C2F90000, v11, v12, "Remote control accessory flip button pressed.", v13, 2u);
        MEMORY[0x1C87760E0](v13, -1, -1);
      }

      type metadata accessor for OS_dispatch_queue();
      uint64_t v40 = static OS_dispatch_queue.main.getter();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v2;
      id v45 = partial apply for closure #2 in MultiwayViewController.handleDockKitEventCallback(event:);
      uint64_t v46 = v14;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v42 = 1107296256;
      uint64_t v15 = &block_descriptor_15;
      goto LABEL_32;
    }
    if (static AccessorySystemEvent.kHeaderCameraZoom.getter() == v4)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationKit);
      id v19 = a1;
      int v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_t v22 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_t v22 = 67109120;
        LODWORD(aBlock) = AccessorySystemEvent.payload.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1C2F90000, v20, v21, "Remote control accessory zoom button pressed with payload %u", v22, 8u);
        MEMORY[0x1C87760E0](v22, -1, -1);
      }
      else
      {
      }
      if (AccessorySystemEvent.payload.getter()) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = -1;
      }
      type metadata accessor for OS_dispatch_queue();
      uint64_t v40 = static OS_dispatch_queue.main.getter();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v1;
      *(void *)(v27 + 24) = v26;
      id v45 = partial apply for closure #3 in MultiwayViewController.handleDockKitEventCallback(event:);
      uint64_t v46 = v27;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v42 = 1107296256;
      uint64_t v15 = &block_descriptor_21;
      goto LABEL_32;
    }
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationKit);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1C2F90000, v40, v24, "Remote control accessory unknown button pressed, ignoring", v25, 2u);
      MEMORY[0x1C87760E0](v25, -1, -1);
    }
  }
}

void closure #2 in MultiwayViewController.handleDockKitEventCallback(event:)()
{
}

void closure #3 in MultiwayViewController.handleDockKitEventCallback(event:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (id *)(a1 + OBJC_IVAR____TtC15ConversationKit22MultiwayViewController_pipZoomControl);
  swift_beginAccess();
  unsigned __int8 v4 = *(void (**)(uint64_t, float))((*MEMORY[0x1E4FBC8C8] & *(void *)*v3) + 0x1B0);
  id v5 = *v3;
  v4(a2, 0.1);
}

uint64_t sub_1C30F0F40()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MultiwayViewController.registerForSystemEventsIfNecessary()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return closure #1 in MultiwayViewController.registerForSystemEventsIfNecessary()();
}

uint64_t sub_1C30F1034()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in MultiwayViewController.registerForSystemEvents()(void *a1)
{
  closure #1 in MultiwayViewController.registerForSystemEvents()(a1, v1);
}

uint64_t sub_1C30F1074()
{
  return swift_deallocObject();
}

void partial apply for closure #3 in MultiwayViewController.handleDockKitEventCallback(event:)()
{
  closure #3 in MultiwayViewController.handleDockKitEventCallback(event:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C30F10B4()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in MultiwayViewController.handleDockKitEventCallback(event:)()
{
}

void partial apply for closure #1 in MultiwayViewController.handleDockKitEventCallback(event:)()
{
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySS15ConversationKit16ContactHandleMapV06RemoteG033_F6BD99B7C429375F74659E621438887DLLO_G_So9CNContactCs5NeverOTg504_s15e5Kit16ghi20V11allContactsSaySo9Q13CGvgAFSSXEfU_AJTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t result = specialized _NativeDictionary.startIndex.getter(a1);
  if (result < 0 || (unint64_t v5 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    uint64_t v12 = v14;
    swift_bridgeObjectRelease();
    return v12;
  }
  int v6 = v4;
  uint64_t v7 = a1 + 64;
  while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
  {
    if (v6 != *(_DWORD *)(a1 + 36)) {
      goto LABEL_18;
    }
    os_log_type_t v8 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
    uint64_t v9 = *v8;
    uint64_t v10 = (void *)v8[1];
    uint64_t v13 = v1;
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = v9;
    v11._id object = v10;
    ContactHandleMap.contact(for:)(v11);
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized ContiguousArray._endMutation()();
    if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
      goto LABEL_19;
    }
    if ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_20;
    }
    if (v6 != *(_DWORD *)(a1 + 36)) {
      goto LABEL_21;
    }
    uint64_t result = _HashTable.occupiedBucket(after:)();
    --v1;
    if (v13 == 1) {
      goto LABEL_14;
    }
    unint64_t v5 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      int v6 = *(_DWORD *)(a1 + 36);
      if (result < 1 << *(unsigned char *)(a1 + 32)) {
        continue;
      }
    }
    goto LABEL_13;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

ConversationKit::ContactHandleMap __swiftcall ContactHandleMap.init()()
{
  uint64_t v1 = v0;
  result.store._rawValue = (void *)Dictionary.init(dictionaryLiteral:)();
  v1->store._rawValue = result.store._rawValue;
  return result;
}

ConversationKit::ContactHandleMap __swiftcall ContactHandleMap.init(contactsByHandle:)(Swift::OpaquePointer contactsByHandle)
{
  *uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  ContactHandleMap.onContactsUpdated(_:)(contactsByHandle);
  return (ConversationKit::ContactHandleMap)swift_bridgeObjectRelease();
}

{
  uint64_t *v1;
  uint64_t *v3;
  void *v4;
  ConversationKit::ContactHandleMap result;

  uint64_t v3 = v1;
  *uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  int v4 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)contactsByHandle._rawValue);
  swift_bridgeObjectRelease();
  result.store._rawValue = (void *)swift_bridgeObjectRelease();
  *uint64_t v3 = (uint64_t)v4;
  return result;
}

Swift::Void __swiftcall ContactHandleMap.onContactsUpdated(_:)(Swift::OpaquePointer a1)
{
  specialized _NativeDictionary.makeIterator()((uint64_t)a1._rawValue, v41);
  uint64_t v38 = v41[0];
  int64_t v39 = v41[3];
  unint64_t v1 = v41[4];
  uint64_t v36 = v41[1];
  int64_t v37 = (unint64_t)(v41[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  if (!v1) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v40 = (v1 - 1) & v1;
  for (unint64_t i = __clz(__rbit64(v1)) | (v39 << 6); ; unint64_t i = __clz(__rbit64(v5)) + (v6 << 6))
  {
    Swift::String v11 = *(void **)(*(void *)(v38 + 48) + 8 * i);
    uint64_t v12 = *(void **)(*(void *)(v38 + 56) + 8 * i);
    id v13 = v12;
    id v14 = v11;
    id v15 = objc_msgSend(v14, sel_value);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = v13;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
    uint64_t v23 = v2[2];
    BOOL v24 = (v22 & 1) == 0;
    Swift::Int v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    unint64_t v26 = v21;
    char v27 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CNContact?>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25))
    {
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_39;
      }
      unint64_t v26 = v28;
    }
    if (v27)
    {
      uint64_t v30 = v2[7];

      *(void *)(v30 + 8 * v26) = v12;
    }
    else
    {
      v2[(v26 >> 6) + 8] |= 1 << v26;
      uint64_t v31 = (uint64_t *)(v2[6] + 16 * v26);
      *uint64_t v31 = v16;
      v31[1] = v18;
      *(void *)(v2[7] + 8 * v26) = v12;
      uint64_t v32 = v2[2];
      BOOL v8 = __OFADD__(v32, 1);
      uint64_t v33 = v32 + 1;
      if (v8) {
        goto LABEL_37;
      }
      v2[2] = v33;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v1 = v40;
    if (v40) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v4 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      goto LABEL_38;
    }
    if (v4 >= v37) {
      goto LABEL_35;
    }
    unint64_t v5 = *(void *)(v36 + 8 * v4);
    int64_t v6 = v39 + 1;
    if (!v5)
    {
      OUTLINED_FUNCTION_6_41();
      if (v7 == v8) {
        goto LABEL_35;
      }
      OUTLINED_FUNCTION_5_14();
      if (!v5)
      {
        OUTLINED_FUNCTION_6_41();
        if (v7 == v8) {
          goto LABEL_35;
        }
        OUTLINED_FUNCTION_5_14();
        if (!v5)
        {
          OUTLINED_FUNCTION_6_41();
          if (v7 == v8) {
            goto LABEL_35;
          }
          OUTLINED_FUNCTION_5_14();
          if (!v5)
          {
            OUTLINED_FUNCTION_6_41();
            if (v7 == v8) {
              goto LABEL_35;
            }
            OUTLINED_FUNCTION_5_14();
            if (!v5)
            {
              int64_t v6 = v9 + 5;
              if (v9 + 5 >= v37) {
                goto LABEL_35;
              }
              unint64_t v5 = *(void *)(v36 + 8 * v6);
              if (!v5)
              {
                int64_t v10 = v39 + 7;
                while (v10 < v37)
                {
                  unint64_t v5 = *(void *)(v36 + 8 * v10++);
                  if (v5)
                  {
                    int64_t v6 = v10 - 1;
                    goto LABEL_24;
                  }
                }
LABEL_35:
                swift_release();
                uint64_t v34 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v2);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                *uint64_t v35 = v34;
                return;
              }
            }
          }
        }
      }
    }
LABEL_24:
    int64_t v39 = v6;
    uint64_t v40 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

{
  void *v1;
  void *v2;

  uint64_t v2 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)a1._rawValue);
  swift_bridgeObjectRelease();
  *unint64_t v1 = v2;
}

uint64_t ContactHandleMap.contactLiteral(for:)(void *a1)
{
  return ContactHandleMap.contactLiteral(for:)(a1, (uint64_t (*)(uint64_t, uint64_t))ContactHandleMap.contactLiteral(for:));
}

CNContact_optional __swiftcall ContactHandleMap.contactLiteral(for:)(Swift::String a1)
{
  OUTLINED_FUNCTION_4_47();
  if (v4)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
    if (v6)
    {
      char v7 = *(void **)(*(void *)(v2 + 56) + 8 * v5);
      id v8 = v7;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationKit);
  swift_bridgeObjectRetain_n();
  Swift::String v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    OUTLINED_FUNCTION_1_58(4.8149e-34);
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v15, v16, "[ContactHandleMap] Contact info requested for unrecognized handle %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_3_9();
  }
  char v7 = 0;
LABEL_11:
  uint64_t v17 = (objc_class *)v7;
  result.value.super.Class isa = v17;
  result.is_nil = v9;
  return result;
}

uint64_t ContactHandleMap.contact(for:)(void *a1)
{
  return ContactHandleMap.contactLiteral(for:)(a1, (uint64_t (*)(uint64_t, uint64_t))ContactHandleMap.contact(for:));
}

uint64_t ContactHandleMap.contactLiteral(for:)(void *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  id v3 = objc_msgSend(a1, sel_value);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v7 = a2(v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

CNContact __swiftcall ContactHandleMap.contact(for:)(Swift::String a1)
{
  OUTLINED_FUNCTION_4_47();
  if (!v4) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationKit);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      OUTLINED_FUNCTION_1_58(4.8149e-34);
      uint64_t v12 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_3_9();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v14, v15, "[ContactHandleMap] Contact info requested for unrecognized handle %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_3_9();
    }
    goto LABEL_11;
  }
  uint64_t v7 = *(void **)(*(void *)(v2 + 56) + 8 * v5);
  id v8 = v7;
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_11:
    type metadata accessor for CNContact();
    swift_bridgeObjectRetain();
    return (CNContact)@nonobjc CNContact.init(displayName:emailOrPhoneNumber:)(0, 0, v3, v1);
  }
  return (CNContact)v8;
}

CNContact ContactHandleMap.subscript.getter(uint64_t a1, uint64_t a2)
{
  return ContactHandleMap.contact(for:)(*(Swift::String *)&a1);
}

Class ContactHandleMap.subscript.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_value);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._id object = v4;
  Class isa = ContactHandleMap.contact(for:)(v5).super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

Class ContactHandleMap.oneToOneModeContact.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized Collection.first.getter(*v0);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v2;
  char v6 = v3;

  if (*(void *)(v1 + 16) >= 2uLL)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationKit);
    swift_bridgeObjectRetain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : ContactHandleMap.RemoteContact]);
      uint64_t v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v8, v9, "[ContactHandleMap] 1:1 contact requested but returning the first of multiple: %s", v10, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v16 = v1;
  v14._uint64_t countAndFlagsBits = v5;
  v14._id object = v6;
  Class isa = ContactHandleMap.contact(for:)(v14).super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t ContactHandleMap.allContacts.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySS15ConversationKit16ContactHandleMapV06RemoteG033_F6BD99B7C429375F74659E621438887DLLO_G_So9CNContactCs5NeverOTg504_s15e5Kit16ghi20V11allContactsSaySo9Q13CGvgAFSSXEfU_AJTf1cn_n(v0);
}

id @nonobjc CNContact.init(displayName:emailOrPhoneNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    char v6 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  char v6 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](a3, a4);
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_contactWithDisplayName_emailOrPhoneNumber_, v6, v7);

  return v8;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ContactHandleMap.RemoteContact>);
  CNContact_optional result = (void *)static _DictionaryStorage.copy(original:)();
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = (char *)(result + 8);
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v18 = *v16;
    CNContact_optional result = (void *)v16[1];
    *(void *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    id v19 = (void *)(v3[6] + 16 * i);
    void *v19 = v18;
    v19[1] = result;
    *(void *)(v3[7] + 8 * i) = v17;
    uint64_t v20 = v3[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v22;
    swift_bridgeObjectRetain();
    CNContact_optional result = v17;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return v3;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for CNContact()
{
  unint64_t result = lazy cache variable for type metadata for CNContact;
  if (!lazy cache variable for type metadata for CNContact)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactHandleMap()
{
  return &type metadata for ContactHandleMap;
}

void **initializeBufferWithCopyOfBuffer for ContactHandleMap.RemoteContact(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for ContactHandleMap.RemoteContact(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for ContactHandleMap.RemoteContact(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

void *type metadata accessor for ContactHandleMap.RemoteContact()
{
  return &unk_1F1E99FC8;
}

uint64_t ClarityUIDialerKeypadView.init(enteredNumbers:isPresented:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)a8 = static ClarityUIPreferences.shared;
  *(void *)(a8 + 8) = a1;
  *(void *)(a8 + 16) = a2;
  *(void *)(a8 + 24) = a3;
  *(void *)(a8 + 32) = a4;
  *(void *)(a8 + 40) = a5;
  *(void *)(a8 + 48) = a6;
  *(unsigned char *)(a8 + 56) = a7 & 1;
  return swift_retain();
}

uint64_t ClarityUIDialerKeypadView.enteredNumbers.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](&v2, v0);
  return v2;
}

uint64_t key path setter for ClarityUIDialerKeypadView.enteredNumbers : ClarityUIDialerKeypadView()
{
  return ClarityUIDialerKeypadView.enteredNumbers.setter();
}

uint64_t ClarityUIDialerKeypadView.enteredNumbers.setter()
{
  return Binding.wrappedValue.setter();
}

void (*ClarityUIDialerKeypadView.enteredNumbers.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x78uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  v3[11] = v1;
  v3[12] = v4;
  v3[13] = v5;
  long long v6 = *(_OWORD *)(v1 + 24);
  *((_OWORD *)v3 + 3) = v6;
  v3[10] = v4;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((_OWORD *)v3 + 1) = v6;
  outlined retain of AnyLocation<String>?((uint64_t)(v3 + 10));
  swift_retain();
  outlined retain of String((uint64_t)(v3 + 6));
  v3[14] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0]();
  return ClarityUIDialerKeypadView.enteredNumbers.modify;
}

void ClarityUIDialerKeypadView.enteredNumbers.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)a1 + 48;
  uint64_t v5 = *(void *)(*(void *)a1 + 88);
  uint64_t v6 = *(void *)(*(void *)a1 + 104);
  *uint64_t v2 = *(void *)(*(void *)a1 + 96);
  v2[1] = v6;
  long long v7 = *(_OWORD *)(v5 + 24);
  v2[8] = v3;
  uint64_t v8 = v2[5];
  *((_OWORD *)v2 + 1) = v7;
  v2[9] = v8;
  if (a2)
  {
    swift_bridgeObjectRetain();
    Binding.wrappedValue.setter();
    outlined release of Transaction((uint64_t)(v2 + 10));
    swift_release();
    outlined release of String(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Binding.wrappedValue.setter();
    outlined release of Transaction((uint64_t)(v2 + 10));
    swift_release();
    outlined release of String(v4);
  }
  free(v2);
}

uint64_t ClarityUIDialerKeypadView.$enteredNumbers.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t ClarityUIDialerKeypadView.isPresented.getter()
{
  OUTLINED_FUNCTION_4_9();
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x1C87728E0](&v2, v0);
  return v2;
}

uint64_t ClarityUIDialerKeypadView.isPresented.setter()
{
  return Binding.wrappedValue.setter();
}

void (*ClarityUIDialerKeypadView.isPresented.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  v3[4] = v4;
  v3[5] = v5;
  char v6 = *(unsigned char *)(v1 + 56);
  *((unsigned char *)v3 + 19) = v6;
  _OWORD v3[3] = v4;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  outlined retain of AnyLocation<String>?((uint64_t)(v3 + 3));
  swift_retain();
  v3[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x1C87728E0]();
  return ClarityUIDialerView.isPresented.modify;
}

uint64_t ClarityUIDialerKeypadView.$isPresented.getter()
{
  OUTLINED_FUNCTION_4_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t ClarityUIDialerKeypadView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v70 = a1;
  type metadata accessor for MoveTransition();
  OUTLINED_FUNCTION_4();
  uint64_t v68 = v5;
  uint64_t v69 = v4;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v67 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  __int16 v66 = (char *)&v59 - v8;
  type metadata accessor for DynamicTypeSize();
  OUTLINED_FUNCTION_4();
  uint64_t v64 = v10;
  uint64_t v65 = v9;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_3();
  uint64_t v63 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>);
  MEMORY[0x1F4188790](v12 - 8);
  OUTLINED_FUNCTION_62();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t v19 = v18 - 8;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_21();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>);
  uint64_t v24 = v23 - 8;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  uint64_t v27 = v26 - v25;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
  uint64_t v29 = v28 - 8;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_2_3();
  uint64_t v60 = v30;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>)
      - 8;
  MEMORY[0x1F4188790](v62);
  OUTLINED_FUNCTION_2_3();
  uint64_t v61 = v31;
  *(void *)uint64_t v2 = static HorizontalAlignment.center.getter();
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>);
  closure #1 in ClarityUIDialerKeypadView.body.getter(v3, v2 + *(int *)(v32 + 44));
  LOBYTE(v3) = static Edge.Set.vertical.getter();
  static ClarityUIMetrics.standardSpacing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v2, v17, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>);
  uint64_t v41 = v17 + *(int *)(v14 + 44);
  *(unsigned char *)uint64_t v41 = (_BYTE)v3;
  *(void *)(v41 + 8) = v34;
  *(void *)(v41 + 16) = v36;
  *(void *)(v41 + 24) = v38;
  *(void *)(v41 + 32) = v40;
  *(unsigned char *)(v41 + 40) = 0;
  outlined destroy of Conversation?(v2, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>);
  uint64_t v42 = static Color.clarityUIContentBackground.getter();
  LOBYTE(v14) = static Edge.Set.all.getter();
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v17, v22, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>);
  uint64_t v43 = v22 + *(int *)(v19 + 44);
  *(void *)uint64_t v43 = v42;
  *(unsigned char *)(v43 + 8) = v14;
  outlined destroy of Conversation?(v17, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>);
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v22, v27, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>);
  *(_WORD *)(v27 + *(int *)(v24 + 44)) = 256;
  outlined destroy of Conversation?(v22, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v46 = v63;
  uint64_t v45 = v64;
  uint64_t v47 = v65;
  (*(void (**)(uint64_t, void, uint64_t))(v64 + 104))(v63, *MEMORY[0x1E4F3CB28], v65);
  uint64_t v48 = v60;
  Swift::String v49 = (uint64_t *)(v60 + *(int *)(v29 + 44));
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))((char *)v49 + *(int *)(v50 + 28), v46, v47);
  *Swift::String v49 = KeyPath;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v27, v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
  outlined destroy of Conversation?(v27, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>);
  uint64_t v51 = v66;
  MoveTransition.init(edge:)();
  uint64_t v52 = v68;
  uint64_t v53 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v67, v51, v69);
  lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
  uint64_t v54 = v53;
  uint64_t v55 = AnyTransition.init<A>(_:)();
  uint64_t v56 = v61;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v48, v61, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
  *(void *)(v56 + *(int *)(v62 + 44)) = v55;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v54);
  outlined destroy of Conversation?(v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
  uint64_t v57 = v70;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v56, v70, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>);
  *(unsigned char *)(v57
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>, _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>>)
                    + 36)) = 0;
  return outlined destroy of Conversation?(v56, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>);
}

uint64_t closure #1 in ClarityUIDialerKeypadView.body.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v43[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v43[-v12];
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t v15 = v14;
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = v15;
  v6[16] = 0;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>);
  closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter(a1, &v6[*(int *)(v16 + 44)]);
  char v17 = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.standardSpacing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>((uint64_t)v6, (uint64_t)v11, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>);
  uint64_t v26 = &v11[*(int *)(v8 + 44)];
  *uint64_t v26 = v17;
  *((void *)v26 + 1) = v19;
  *((void *)v26 + 2) = v21;
  *((void *)v26 + 3) = v23;
  *((void *)v26 + 4) = v25;
  unsigned char v26[40] = 0;
  outlined destroy of Conversation?((uint64_t)v6, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>);
  outlined init with take of ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>((uint64_t)v11, (uint64_t)v13);
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t v28 = v27;
  uint64_t v29 = (_OWORD *)swift_allocObject();
  long long v30 = a1[1];
  v29[1] = *a1;
  v29[2] = v30;
  v29[3] = a1[2];
  *(_OWORD *)((char *)v29 + 57) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  outlined retain of ClarityUIDialerKeypadView((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  uint64_t v31 = v48;
  uint64_t v32 = v49;
  int v44 = v50;
  uint64_t v33 = v51;
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t v35 = v34;
  uint64_t v36 = closure #1 in variable initialization expression of ClarityUIKeypadView.numberPadStrings();
  id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADA18]), sel_init);
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>);
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>((uint64_t)v11, a2, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView));
  uint64_t v39 = a2 + *(int *)(v38 + 48);
  *(void *)uint64_t v39 = v28;
  *(unsigned char *)(v39 + 8) = 0;
  uint64_t v40 = a2 + *(int *)(v38 + 64);
  *(void *)uint64_t v40 = v31;
  *(void *)(v40 + 8) = v32;
  *(unsigned char *)(v40 + 16) = v44;
  *(void *)(v40 + 24) = v33;
  *(void *)(v40 + 32) = 0x4020000000000000;
  *(void *)(v40 + 40) = v35;
  *(void *)(v40 + 48) = v36;
  *(void *)(v40 + 56) = v37;
  *(void *)(v40 + 64) = partial apply for closure #2 in closure #1 in ClarityUIDialerKeypadView.body.getter;
  *(void *)(v40 + 72) = v29;
  swift_retain();
  swift_bridgeObjectRetain();
  id v41 = v37;
  swift_retain();
  outlined destroy of Conversation?((uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>);
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return outlined destroy of Conversation?((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>);
}

unint64_t lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition;
  if (!lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition)
  {
    type metadata accessor for MoveTransition();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIDialerKeypadView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter@<X0>(_OWORD *a1@<X0>, char *a2@<X8>)
{
  char v47 = a2;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v49 = *(void *)(v46 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v46);
  int v44 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v45 = (char *)&v38 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<VStack<TupleView<(Image, Text)>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v10 = *(void *)(v43 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v43);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v48 = (char *)&v38 - v14;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  long long v16 = a1[1];
  v15[1] = *a1;
  void v15[2] = v16;
  v15[3] = a1[2];
  *(_OWORD *)((char *)v15 + 57) = *(_OWORD *)((char *)a1 + 41);
  outlined retain of ClarityUIDialerKeypadView((uint64_t)a1);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Image, Text)>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(Image, Text)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Image, Text)>>);
  Button.init(action:label:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<VStack<TupleView<(Image, Text)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<VStack<TupleView<(Image, Text)>>>);
  lazy protocol witness table accessor for type ClarityUIDialerKeypadView.BackButtonStyle and conformance ClarityUIDialerKeypadView.BackButtonStyle();
  id v41 = v13;
  View.buttonStyle<A>(_:)();
  uint64_t v17 = v7 + 8;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v40 = v17;
  v18(v9, v6);
  uint64_t v19 = v10;
  uint64_t v39 = v10;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v21 = v48;
  uint64_t v22 = v43;
  v20(v48, v13, v43);
  uint64_t v23 = (_OWORD *)swift_allocObject();
  long long v24 = a1[1];
  v23[1] = *a1;
  v23[2] = v24;
  v23[3] = a1[2];
  *(_OWORD *)((char *)v23 + 57) = *(_OWORD *)((char *)a1 + 41);
  outlined retain of ClarityUIDialerKeypadView((uint64_t)a1);
  Button.init(action:label:)();
  lazy protocol witness table accessor for type ClarityUIDialerKeypadView.PrimaryActionButtonStyle and conformance ClarityUIDialerKeypadView.PrimaryActionButtonStyle();
  uint64_t v25 = v44;
  View.buttonStyle<A>(_:)();
  v18(v9, v6);
  uint64_t v26 = v49;
  uint64_t v28 = v45;
  uint64_t v27 = v46;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v45, v25, v46);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  long long v30 = v41;
  v29(v41, v21, v22);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v32 = v28;
  v31(v25, v28, v27);
  uint64_t v33 = v47;
  v29(v47, v30, v22);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0));
  v31(&v33[*(int *)(v34 + 48)], v25, v27);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v49 + 8);
  v35(v32, v27);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v39 + 8);
  v36(v48, v22);
  v35(v25, v27);
  return ((uint64_t (*)(char *, uint64_t))v36)(v30, v22);
}

uint64_t closure #1 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter()
{
  return Binding.wrappedValue.setter();
}

double closure #2 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = closure #2 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter((void (*)(unint64_t *__return_ptr))closure #1 in closure #2 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter, a1).n128_u64[0];
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  id v3 = objc_msgSend(self, sel_conversationKit);
  v10._id object = (void *)0xE000000000000000;
  v4._id object = (void *)0x80000001C3798F20;
  v4._uint64_t countAndFlagsBits = 0xD000000000000015;
  v5.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v5.value._id object = (void *)0xEF74694B6E6F6974;
  v6._uint64_t countAndFlagsBits = 0;
  v6._id object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v10);

  *(void *)a1 = v2;
  *(Swift::String *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  swift_retain();
  outlined copy of Text.Storage(v7._countAndFlagsBits, (uint64_t)v7._object, 0);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v7._countAndFlagsBits, (uint64_t)v7._object, 0);
  swift_release();
  return swift_bridgeObjectRelease();
}

void ClarityUIDialerKeypadView.makeCall()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  id v3 = objc_msgSend(v2, sel_telephonyProvider);
  type metadata accessor for TUHandle();
  long long v4 = *(_OWORD *)((char *)v0 + 24);
  long long v12 = *(_OWORD *)((char *)v0 + 8);
  long long v13 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](v16, v5);
  id v6 = TUHandle.__allocating_init(type:value:)(2, v16[0], v16[1]);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBC0]), sel_initWithProvider_, v3, v12, v13);
  objc_msgSend(v7, sel_setHandle_, v6);
  objc_msgSend(v7, sel_setOriginatingUIType_, 29);
  uint64_t v8 = swift_allocObject();
  long long v9 = v1[1];
  *(_OWORD *)(v8 + 24) = *v1;
  *(void *)(v8 + 16) = v7;
  *(_OWORD *)(v8 + 40) = v9;
  *(_OWORD *)(v8 + 56) = v1[2];
  *(_OWORD *)(v8 + 65) = *(_OWORD *)((char *)v1 + 41);
  uint64_t v14 = partial apply for closure #1 in ClarityUIDialerKeypadView.makeCall();
  uint64_t v15 = v8;
  *(void *)&long long v12 = MEMORY[0x1E4F143A8];
  *((void *)&v12 + 1) = 1107296256;
  *(void *)&long long v13 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  *((void *)&v13 + 1) = &block_descriptor_22;
  Swift::String v10 = _Block_copy(&v12);
  id v11 = v7;
  outlined retain of ClarityUIDialerKeypadView((uint64_t)v1);
  swift_release();
  objc_msgSend(v2, sel_launchAppForDialRequest_completion_, v11, v10);
  _Block_release(v10);
}

double closure #4 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = closure #2 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter((void (*)(unint64_t *__return_ptr))closure #1 in closure #4 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter, a1).n128_u64[0];
  return result;
}

__n128 closure #2 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter@<Q0>(void (*a1)(unint64_t *__return_ptr)@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  a1(&v9);
  unint64_t v5 = v9;
  unsigned __int8 v6 = v11;
  unint64_t v7 = v12;
  __n128 result = v10;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = 0;
  a2[1].n128_u8[0] = 1;
  a2[1].n128_u64[1] = v5;
  a2[2] = result;
  a2[3].n128_u8[0] = v6;
  a2[3].n128_u64[1] = v7;
  return result;
}

uint64_t closure #1 in closure #4 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  id v3 = objc_msgSend(self, sel_conversationKit);
  v10._id object = (void *)0xE000000000000000;
  v4._id object = (void *)0x80000001C3798F00;
  v4._uint64_t countAndFlagsBits = 0xD000000000000015;
  v5.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v5.value._id object = (void *)0xEF74694B6E6F6974;
  v6._uint64_t countAndFlagsBits = 0;
  v6._id object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v10);

  *(void *)a1 = v2;
  *(Swift::String *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  swift_retain();
  outlined copy of Text.Storage(v7._countAndFlagsBits, (uint64_t)v7._object, 0);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v7._countAndFlagsBits, (uint64_t)v7._object, 0);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in ClarityUIDialerKeypadView.body.getter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  long long v10 = *(_OWORD *)(a3 + 24);
  uint64_t v9 = v5;
  outlined retain of AnyLocation<String>?((uint64_t)&v9);
  swift_retain();
  outlined retain of String((uint64_t)&v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  MEMORY[0x1C87728E0](&v8);
  v6._uint64_t countAndFlagsBits = a1;
  v6._id object = a2;
  String.append(_:)(v6);
  Binding.wrappedValue.setter();
  outlined release of Transaction((uint64_t)&v9);
  swift_release();
  return outlined release of String((uint64_t)&v10);
}

void closure #1 in ClarityUIDialerKeypadView.makeCall()(void *a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    id v6 = a1;
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.clarityUI);
    id v8 = a1;
    id v9 = a2;
    outlined retain of ClarityUIDialerKeypadView(a3);
    id v10 = a1;
    id v11 = v9;
    outlined retain of ClarityUIDialerKeypadView(a3);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v22 = v19;
      *(_DWORD *)uint64_t v13 = 138412802;
      id v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v11;

      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
      MEMORY[0x1C87728E0](v21, v16);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21[0], v21[1], &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ClarityUIDialerKeypadView(a3);
      outlined release of ClarityUIDialerKeypadView(a3);
      *(_WORD *)(v13 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, oslog, v12, "Unable to launch app for dial request: %@, phone number: %s, error: %s", (uint8_t *)v13, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v19, -1, -1);
      MEMORY[0x1C87760E0](v13, -1, -1);
    }
    else
    {

      outlined release of ClarityUIDialerKeypadView(a3);
      outlined release of ClarityUIDialerKeypadView(a3);
    }
  }
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance ClarityUIDialerKeypadView.BackButtonStyle(uint64_t a1)
{
  return ClarityUIDialerKeypadView.BackButtonStyle.makeBody(configuration:)(a1, MEMORY[0x1E4F3EB20], MEMORY[0x1E4F3EB48]);
}

uint64_t ClarityUIDialerKeypadView.BackButtonStyle.makeBody(configuration:)(uint64_t a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t v7 = type metadata accessor for PlatterButtonType();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  type metadata accessor for ButtonStyleConfiguration();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13 - v12, a1);
  a2(v15);
  a3();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v3, *MEMORY[0x1E4F3D350], v7);
  return PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance ClarityUIDialerKeypadView.PrimaryActionButtonStyle(uint64_t a1)
{
  return ClarityUIDialerKeypadView.BackButtonStyle.makeBody(configuration:)(a1, MEMORY[0x1E4F3EB30], MEMORY[0x1E4F3EB38]);
}

double ClarityUIDialerKeypadView.BarShape.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  id v6 = objc_msgSend(self, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, a2, a3, a4, a5, 40.0, 40.0);
  id v7 = objc_msgSend(v6, sel_CGPath);

  Path.init(_:)();
  double result = *(double *)&v9;
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t static ClarityUIDialerKeypadView.BarShape.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F3F0D8];
  uint64_t v3 = type metadata accessor for ShapeRole();
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

double protocol witness for Shape.path(in:) in conformance ClarityUIDialerKeypadView.BarShape@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  ClarityUIDialerKeypadView.BarShape.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance ClarityUIDialerKeypadView.BarShape()
{
  return MEMORY[0x1F40FC6A0]();
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance ClarityUIDialerKeypadView.BarShape()
{
  return MEMORY[0x1F40FC680]();
}

void (*protocol witness for Animatable.animatableData.modify in conformance ClarityUIDialerKeypadView.BarShape(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for Control.cnkContentAlpha.modify in conformance BaseButton;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ClarityUIDialerKeypadView.BarShape()
{
  return MEMORY[0x1F40F7DA0]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ClarityUIDialerKeypadView.BarShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape();
  return MEMORY[0x1F40FC6D8](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ClarityUIDialerKeypadView.BarShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape();
  return MEMORY[0x1F40FC690](a1, a2, a3, v6);
}

uint64_t protocol witness for View.body.getter in conformance ClarityUIDialerKeypadView.BarShape(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape();
  return MEMORY[0x1F40FC6B0](a1, v2);
}

uint64_t protocol witness for View.body.getter in conformance ClarityUIDialerKeypadView@<X0>(uint64_t a1@<X8>)
{
  return ClarityUIDialerKeypadView.body.getter(a1);
}

uint64_t sub_1C30F44CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ClarityUIDialerKeypadView.enteredNumbers.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C30F44FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ClarityUIDialerKeypadView.isPresented.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C30F452C()
{
  return ClarityUIDialerKeypadView.isPresented.setter();
}

uint64_t destroy for ClarityUIDialerKeypadView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ClarityUIDialerKeypadView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ClarityUIDialerKeypadView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClarityUIDialerKeypadView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClarityUIDialerKeypadView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClarityUIDialerKeypadView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIDialerKeypadView()
{
  return &type metadata for ClarityUIDialerKeypadView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>, _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>, _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>, _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>, _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey> and conformance _PreferenceWritingModifier<A>, &demangling cache variable for type metadata for _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>, _PreferenceWritingModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>, &demangling cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DynamicTypeSize> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<ClarityUIDialerKeypadView.BarShape> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<ClarityUIDialerKeypadView.BarShape>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<ClarityUIDialerKeypadView.BarShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *type metadata accessor for ClarityUIDialerKeypadView.BarShape()
{
  return &unk_1F1E9A070;
}

void *type metadata accessor for ClarityUIDialerKeypadView.PrimaryActionButtonStyle()
{
  return &unk_1F1E9A090;
}

void *type metadata accessor for ClarityUIDialerKeypadView.BackButtonStyle()
{
  return &unk_1F1E9A0B0;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in ClarityUIDialerKeypadView.BackButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in ClarityUIDialerKeypadView.PrimaryActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIDialerKeypadView.BarShape()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ClarityUIDialerKeypadView.BarShape, ForegroundStyle> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<ClarityUIDialerKeypadView.BarShape, ForegroundStyle>);
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape;
  if (!lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape;
  if (!lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape;
  if (!lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BarShape and conformance ClarityUIDialerKeypadView.BarShape);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in ClarityUIDialerKeypadView.body.getter(uint64_t a1, void *a2)
{
  return closure #2 in closure #1 in ClarityUIDialerKeypadView.body.getter(a1, a2, v2 + 16);
}

uint64_t outlined retain of ClarityUIDialerKeypadView(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter()
{
  return closure #1 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter();
}

unint64_t lazy protocol witness table accessor for type ClarityUIDialerKeypadView.BackButtonStyle and conformance ClarityUIDialerKeypadView.BackButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BackButtonStyle and conformance ClarityUIDialerKeypadView.BackButtonStyle;
  if (!lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BackButtonStyle and conformance ClarityUIDialerKeypadView.BackButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.BackButtonStyle and conformance ClarityUIDialerKeypadView.BackButtonStyle);
  }
  return result;
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #3 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter()
{
}

unint64_t lazy protocol witness table accessor for type ClarityUIDialerKeypadView.PrimaryActionButtonStyle and conformance ClarityUIDialerKeypadView.PrimaryActionButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.PrimaryActionButtonStyle and conformance ClarityUIDialerKeypadView.PrimaryActionButtonStyle;
  if (!lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.PrimaryActionButtonStyle and conformance ClarityUIDialerKeypadView.PrimaryActionButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIDialerKeypadView.PrimaryActionButtonStyle and conformance ClarityUIDialerKeypadView.PrimaryActionButtonStyle);
  }
  return result;
}

uint64_t sub_1C30F5064()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ClarityUIDialerKeypadView.makeCall()(void *a1)
{
  closure #1 in ClarityUIDialerKeypadView.makeCall()(a1, *(void **)(v1 + 16), v1 + 24);
}

uint64_t outlined release of ClarityUIDialerKeypadView(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter()
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIDialerKeypadView.body.getter();
}

uint64_t sub_1C30F5164()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>, &demangling cache variable for type metadata for PlatterButtonStyleView<Color>);
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  uint64_t v30 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v24 = v3;
      unint64_t v5 = 0;
      unint64_t v6 = v3 & 0xC000000000000001;
      uint64_t v28 = a2;
      unint64_t v29 = v3 + 32;
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
      unint64_t v26 = v6;
      uint64_t v27 = v4;
      unint64_t v25 = v3;
      while (v6)
      {
        id v7 = (id)MEMORY[0x1C87744F0](v5, v24);
LABEL_7:
        uint64_t v8 = v7;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_24;
        }
        uint64_t v10 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          id v11 = v8;
          char v12 = __CocoaSet.contains(_:)();
          swift_bridgeObjectRelease();

          if ((v12 & 1) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          if (!*(void *)(v10 + 16)) {
            goto LABEL_19;
          }
          Swift::Int v13 = *(void *)(v10 + 40);
          swift_bridgeObjectRetain();
          Swift::Int v14 = NSObject._rawHashValue(seed:)(v13);
          uint64_t v15 = -1 << *(unsigned char *)(v10 + 32);
          unint64_t v16 = v14 & ~v15;
          if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
            goto LABEL_18;
          }
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
          id v17 = *(id *)(*(void *)(v10 + 48) + 8 * v16);
          char v18 = static NSObject.== infix(_:_:)();

          if ((v18 & 1) == 0)
          {
            uint64_t v19 = ~v15;
            while (1)
            {
              unint64_t v16 = (v16 + 1) & v19;
              if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
                break;
              }
              id v20 = *(id *)(*(void *)(v10 + 48) + 8 * v16);
              char v21 = static NSObject.== infix(_:_:)();

              if (v21) {
                goto LABEL_17;
              }
            }
LABEL_18:
            swift_bridgeObjectRelease();
            uint64_t v4 = v27;
            a2 = v28;
            unint64_t v3 = v25;
            unint64_t v6 = v26;
LABEL_19:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_20;
          }
LABEL_17:

          swift_bridgeObjectRelease();
          uint64_t v4 = v27;
          a2 = v28;
          unint64_t v3 = v25;
          unint64_t v6 = v26;
        }
LABEL_20:
        if (v5 == v4)
        {
          uint64_t v22 = v30;
          goto LABEL_27;
        }
      }
      if (v5 < *(void *)(v3 + 16)) {
        break;
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_26;
      }
    }
    id v7 = *(id *)(v29 + 8 * v5);
    goto LABEL_7;
  }
LABEL_26:
  uint64_t v22 = MEMORY[0x1E4FBC860];
LABEL_27:
  swift_bridgeObjectRelease();
  return v22;
}

{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;

  id v20 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_20;
  }
  unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        unint64_t v5 = (id)MEMORY[0x1C87744F0](v4, a1);
LABEL_7:
        unint64_t v6 = v5;
        id v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_19;
        }
        uint64_t v8 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v5, (SEL *)&selRef_address);
        if (v9)
        {
          uint64_t v10 = (void *)MEMORY[0x1C87730B0](v8);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v10 = 0;
        }
        id v11 = (id)TUCopyIDSCanonicalAddressForDestinationID();

        if (!v11) {
          goto LABEL_14;
        }
        char v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v14 = v13;

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1C3769620;
        *(void *)(inited + 32) = v12;
        *(void *)(inited + 40) = v14;
        specialized Set.init(_nonEmptyArrayLiteral:)();
        LOBYTE(v12) = PeoplePickerViewController.isMultiwayAllowed(for:)(v16, (SEL *)&selRef_isFaceTimeMultiwayAvailableForAnyDestinationInDestinations_);
        swift_bridgeObjectRelease();
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_14:
        }
        ++v4;
        if (v7 == v3)
        {
          id v17 = v20;
          goto LABEL_22;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_21;
      }
    }
    unint64_t v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_21:
  id v17 = MEMORY[0x1E4FBC860];
LABEL_22:

  swift_bridgeObjectRelease();
  return v17;
}

{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;

  id v20 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_20;
  }
  unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        unint64_t v5 = (id)MEMORY[0x1C87744F0](v4, a1);
LABEL_7:
        unint64_t v6 = v5;
        id v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_19;
        }
        uint64_t v8 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v5, (SEL *)&selRef_address);
        if (v9)
        {
          uint64_t v10 = (void *)MEMORY[0x1C87730B0](v8);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v10 = 0;
        }
        id v11 = (id)TUCopyIDSCanonicalAddressForDestinationID();

        if (!v11) {
          goto LABEL_13;
        }
        char v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v14 = v13;

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1C3769620;
        *(void *)(inited + 32) = v12;
        *(void *)(inited + 40) = v14;
        specialized Set.init(_nonEmptyArrayLiteral:)();
        LOBYTE(v12) = PeoplePickerViewController.isMultiwayAllowed(for:)(v16, (SEL *)&selRef_isFaceTimeMultiwayAvailableForAnyDestinationInDestinations_);
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_13:
        }
        ++v4;
        if (v7 == v3)
        {
          id v17 = v20;
          goto LABEL_22;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_21;
      }
    }
    unint64_t v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_21:
  id v17 = MEMORY[0x1E4FBC860];
LABEL_22:

  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1C87744F0](v5 - 4, a1);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5);
        swift_retain();
      }
      uint64_t v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (RecipientResultWrapper.isDuetHandle.getter())
      {
        uint64_t v8 = RecipientResultWrapper.idsHandle.getter();
        if (v9)
        {
          char v10 = a2(v8);
          swift_bridgeObjectRelease();
          if (v10)
          {
            swift_bridgeObjectRelease();
            return v6;
          }
        }
      }
      swift_release();
      ++v5;
      if (v7 == v4) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

void specialized Sequence.first(where:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type CNComposeRecipient and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v27;
    uint64_t v25 = v28;
    uint64_t v3 = v29;
    int64_t v4 = v30;
    unint64_t v5 = v31;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  int64_t v24 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v24)
    {
      unint64_t v15 = *(void *)(v25 + 8 * v14);
      int64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v24) {
        goto LABEL_44;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v24) {
        goto LABEL_44;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v24) {
        goto LABEL_44;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v12);
      if (v15)
      {
LABEL_28:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
        id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
        if (v13)
        {
          while (1)
          {
            uint64_t v17 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a2, (SEL *)&selRef_address);
            uint64_t v19 = v18;
            uint64_t v20 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v13, (SEL *)&selRef_address);
            if (!v19) {
              break;
            }
            if (!v21) {
              goto LABEL_39;
            }
            if (v17 == v20 && v19 == v21)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_44;
            }
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v23) {
              goto LABEL_44;
            }

LABEL_40:
            int64_t v4 = v12;
            unint64_t v5 = v10;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v13 = v32;
              swift_unknownObjectRelease();
              int64_t v12 = v4;
              uint64_t v10 = v5;
              if (v32) {
                continue;
              }
            }
            goto LABEL_44;
          }
          if (!v21) {
            goto LABEL_44;
          }
LABEL_39:

          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        goto LABEL_44;
      }
      int64_t v12 = v4 + 5;
      if (v4 + 5 < v24)
      {
        unint64_t v15 = *(void *)(v25 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v4 + 6;
          do
          {
            if (v16 >= v24) {
              goto LABEL_44;
            }
            unint64_t v15 = *(void *)(v25 + 8 * v16++);
          }
          while (!v15);
          int64_t v12 = v16 - 1;
        }
        goto LABEL_28;
      }
    }
LABEL_44:
    outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

    return;
  }
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  id v18;
  char v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v22;
    uint64_t v21 = v23;
    int64_t v4 = v24;
    unint64_t v5 = v25;
    uint64_t v6 = v26;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v4 = v8;
    unint64_t v5 = 0;
  }
  uint64_t v20 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v6)
  {
    unint64_t v11 = (v6 - 1) & v6;
    int64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    id v13 = v5;
    goto LABEL_29;
  }
  unint64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 < v20)
    {
      int64_t v16 = *(void *)(v21 + 8 * v15);
      id v13 = v5 + 1;
      if (v16) {
        goto LABEL_28;
      }
      id v13 = v5 + 2;
      if (v5 + 2 >= v20) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v21 + 8 * v13);
      if (v16) {
        goto LABEL_28;
      }
      id v13 = v5 + 3;
      if (v5 + 3 >= v20) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v21 + 8 * v13);
      if (v16) {
        goto LABEL_28;
      }
      id v13 = v5 + 4;
      if (v5 + 4 >= v20) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v21 + 8 * v13);
      if (v16)
      {
LABEL_28:
        unint64_t v11 = (v16 - 1) & v16;
        int64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_29:
        int64_t v14 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
        if (v14)
        {
          do
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            uint64_t v18 = objc_msgSend(v14, sel_handle);
            uint64_t v19 = static NSObject.== infix(_:_:)();

            if (v19) {
              break;
            }

            unint64_t v5 = v13;
            uint64_t v6 = v11;
            if ((v3 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            int64_t v14 = v27;
            swift_unknownObjectRelease();
            id v13 = v5;
            unint64_t v11 = v6;
          }
          while (v27);
        }
        goto LABEL_33;
      }
      id v13 = v5 + 5;
      if (v5 + 5 < v20)
      {
        int64_t v16 = *(void *)(v21 + 8 * v13);
        if (!v16)
        {
          uint64_t v17 = v5 + 6;
          while (v17 < v20)
          {
            int64_t v16 = *(void *)(v21 + 8 * v17++);
            if (v16)
            {
              id v13 = v17 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

    return;
  }
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  char v23;
  unint64_t v24;
  id v25;
  char v26;
  id v27;
  char v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  void *v42;

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v37;
    int64_t v4 = v38;
    unint64_t v5 = v39;
    uint64_t v6 = v40;
    uint64_t v7 = v41;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    int64_t v4 = a1 + 56;
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    uint64_t v7 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    unint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  uint64_t v30 = v5;
  uint64_t v34 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v33 = v4;
  unint64_t v31 = v3;
  while (1)
  {
    if (v3 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v15 = v42;
      swift_unknownObjectRelease();
      int64_t v14 = v6;
      int64_t v12 = v7;
      if (!v42) {
        goto LABEL_45;
      }
      goto LABEL_26;
    }
    if (!v7) {
      break;
    }
    int64_t v12 = (v7 - 1) & v7;
    id v13 = __clz(__rbit64(v7)) | (v6 << 6);
    int64_t v14 = v6;
LABEL_25:
    unint64_t v15 = *(id *)(*(void *)(v3 + 48) + 8 * v13);
    if (!v15) {
      goto LABEL_45;
    }
LABEL_26:
    uint64_t v35 = v12;
    uint64_t v36 = v14;
    uint64_t v18 = v3;
    uint64_t v19 = a2;
    uint64_t v20 = objc_msgSend(v15, sel_handles, v30);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    _sSo14TUConversationCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v21 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = a2;
      char v23 = __CocoaSet.contains(_:)();
      swift_bridgeObjectRelease();

      if (v23) {
        goto LABEL_45;
      }

      uint64_t v7 = v35;
      uint64_t v6 = v36;
      uint64_t v3 = v18;
    }
    else if (*(void *)(v21 + 16))
    {
      int64_t v24 = NSObject._rawHashValue(seed:)(*(void *)(v21 + 40)) & ~(-1 << *(unsigned char *)(v21 + 32));
      if ((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
      {
        uint64_t v32 = -1 << *(unsigned char *)(v21 + 32);
        uint64_t v25 = *(id *)(*(void *)(v21 + 48) + 8 * v24);
        unint64_t v26 = static NSObject.== infix(_:_:)();

        if (v26)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          a2 = v19;
LABEL_45:
          outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

          return;
        }
        while (1)
        {
          int64_t v24 = (v24 + 1) & ~v32;
          if (((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            break;
          }
          uint64_t v27 = *(id *)(*(void *)(v21 + 48) + 8 * v24);
          uint64_t v28 = static NSObject.== infix(_:_:)();

          if (v28) {
            goto LABEL_44;
          }
        }

        swift_bridgeObjectRelease();
        uint64_t v7 = v35;
        uint64_t v6 = v36;
        a2 = v19;
        uint64_t v3 = v31;
        int64_t v4 = v33;
      }
      else
      {

        swift_bridgeObjectRelease();
        uint64_t v7 = v35;
        uint64_t v6 = v36;
        int64_t v4 = v33;
        uint64_t v3 = v18;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      uint64_t v7 = v35;
      uint64_t v6 = v36;
      uint64_t v3 = v18;
    }
  }
  int64_t v14 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v14 >= v34) {
      goto LABEL_45;
    }
    int64_t v16 = *(void *)(v4 + 8 * v14);
    if (!v16)
    {
      uint64_t v17 = v6 + 2;
      if (v6 + 2 >= v34) {
        goto LABEL_45;
      }
      int64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16) {
        goto LABEL_23;
      }
      uint64_t v17 = v6 + 3;
      if (v6 + 3 >= v34) {
        goto LABEL_45;
      }
      int64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16) {
        goto LABEL_23;
      }
      uint64_t v17 = v6 + 4;
      if (v6 + 4 >= v34) {
        goto LABEL_45;
      }
      int64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_23:
        int64_t v14 = v17;
      }
      else
      {
        int64_t v14 = v6 + 5;
        if (v6 + 5 >= v34) {
          goto LABEL_45;
        }
        int64_t v16 = *(void *)(v4 + 8 * v14);
        if (!v16)
        {
          uint64_t v29 = v6 + 6;
          while (v29 < v34)
          {
            int64_t v16 = *(void *)(v4 + 8 * v29++);
            if (v16)
            {
              int64_t v14 = v29 - 1;
              goto LABEL_24;
            }
          }
          goto LABEL_45;
        }
      }
    }
LABEL_24:
    int64_t v12 = (v16 - 1) & v16;
    id v13 = __clz(__rbit64(v16)) + (v14 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  id v17;
  id v18;
  char v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;

  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUScreenSharingRequest and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v23;
    uint64_t v21 = v24;
    uint64_t v3 = v25;
    int64_t v4 = v26;
    unint64_t v5 = v27;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  uint64_t v20 = (unint64_t)(v3 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v20)
    {
      unint64_t v15 = *(void *)(v21 + 8 * v14);
      int64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v20) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v20) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v12);
      if (v15) {
        goto LABEL_28;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v20) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v12);
      if (v15)
      {
LABEL_28:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
        id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
        if (v13)
        {
          do
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            uint64_t v17 = objc_msgSend(v13, sel_handle);
            uint64_t v18 = objc_msgSend(a2, sel_handle);
            uint64_t v19 = static NSObject.== infix(_:_:)();

            if (v19) {
              break;
            }

            int64_t v4 = v12;
            unint64_t v5 = v10;
            if ((v2 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v13 = v28;
            swift_unknownObjectRelease();
            int64_t v12 = v4;
            uint64_t v10 = v5;
          }
          while (v28);
        }
        goto LABEL_33;
      }
      int64_t v12 = v4 + 5;
      if (v4 + 5 < v20)
      {
        unint64_t v15 = *(void *)(v21 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v4 + 6;
          while (v16 < v20)
          {
            unint64_t v15 = *(void *)(v21 + 8 * v16++);
            if (v15)
            {
              int64_t v12 = v16 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

    return;
  }
  __break(1u);
}

unint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  uint64_t v29 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
LABEL_35:

    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_35;
  }
LABEL_3:
  uint64_t v6 = 0;
  unint64_t v7 = v3 & 0xC000000000000001;
  uint64_t v25 = (char *)(v3 + 32);
  uint64_t v8 = &selRef_trailingBarAlpha;
  char v23 = a2;
  unint64_t v24 = v3;
  unint64_t v26 = v3 & 0xC000000000000001;
  uint64_t v27 = v5;
  while (1)
  {
    if (v7) {
      id v9 = (id)MEMORY[0x1C87744F0](v6, v3);
    }
    else {
      id v9 = *(id *)&v25[8 * v6];
    }
    uint64_t v10 = v9;
    if (__OFADD__(v6++, 1)) {
      goto LABEL_33;
    }
    if ([v9 v8[153]]) {
      break;
    }
    id v19 = PeoplePickerViewController.pickablePerson(for:)(v10);
    if (v19)
    {
      id v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1C3769830;
      *(void *)(v21 + 32) = v20;
      specialized Array._endMutation()();

LABEL_29:
      uint64_t v8 = &selRef_trailingBarAlpha;
      goto LABEL_30;
    }

LABEL_30:
    specialized Array.append<A>(contentsOf:)();
    if (v6 == v5)
    {

      swift_bridgeObjectRelease();
      return v29;
    }
  }
  unint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.children()(v10);
  if (result)
  {
    unint64_t v13 = result;
    uint64_t v28 = v4;
    if (result >> 62)
    {
      id v22 = a2;
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      if (v14)
      {
LABEL_12:
        a2 = (void *)(v13 & 0xC000000000000001);
        uint64_t v4 = 4;
        while (1)
        {
          id v16 = a2 ? (id)MEMORY[0x1C87744F0](v4 - 4, v13) : *(id *)(v13 + 8 * v4);
          unint64_t v3 = (unint64_t)v16;
          uint64_t v17 = v4 - 3;
          if (__OFADD__(v4 - 4, 1)) {
            break;
          }
          id v18 = PeoplePickerViewController.pickablePerson(for:)(v16);

          if (v18)
          {
            MEMORY[0x1C87733A0]();
            if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v4;
          if (v17 == v14)
          {
            swift_bridgeObjectRelease();
            a2 = v23;
            unint64_t v3 = v24;
            uint64_t v4 = MEMORY[0x1E4FBC860];
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v15 = a2;
      swift_bridgeObjectRetain();
      if (v14) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_28:

    swift_bridgeObjectRelease();
    unint64_t v7 = v26;
    uint64_t v5 = v27;
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      char v9 = PeoplePickerViewController.isIDSMultiwayLookupPending(for:)(v6);

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  char v9 = 0;
LABEL_14:

  swift_bridgeObjectRelease();
  return v9 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      uint64_t v4 = 4;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          uint64_t v5 = (id)MEMORY[0x1C87744F0](v4 - 4, a1);
        }
        else {
          uint64_t v5 = *(id *)(a1 + 8 * v4);
        }
        id v6 = v5;
        unint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v8 = v3;
        char v9 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a2, (SEL *)&selRef_address);
        unint64_t v11 = v10;
        int64_t v12 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v6, (SEL *)&selRef_address);
        if (!v11) {
          break;
        }
        if (!v13) {
          goto LABEL_18;
        }
        if (v9 == v12 && v11 == v13)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_22:
          swift_bridgeObjectRelease();
          return 1;
        }
        id v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v15)
        {

          goto LABEL_22;
        }
LABEL_19:
        ++v4;
        unint64_t v3 = v8;
        if (v7 == v8) {
          goto LABEL_26;
        }
      }
      if (!v13)
      {

        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_18:

      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
LABEL_26:

  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type CNComposeRecipient and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v28;
    uint64_t v26 = v29;
    uint64_t v4 = v30;
    int64_t v5 = v31;
    unint64_t v6 = v32;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  int64_t v25 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    int64_t v10 = v5;
    if (v2 < 0)
    {
      uint64_t v13 = __CocoaSet.Iterator.next()();
      if (!v13) {
        goto LABEL_46;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v14 = v33;
      swift_unknownObjectRelease();
      if (!v33) {
        goto LABEL_42;
      }
      goto LABEL_31;
    }
    if (!v6) {
      break;
    }
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_30:
    id v14 = *(id *)(*(void *)(v2 + 48) + 8 * v12);
    if (!v14) {
      goto LABEL_42;
    }
LABEL_31:
    uint64_t v18 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a2, (SEL *)&selRef_address);
    uint64_t v20 = v19;
    uint64_t v21 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v14, (SEL *)&selRef_address);
    if (v20)
    {
      if (!v22) {
        goto LABEL_41;
      }
      if (v18 == v21 && v20 == v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_45;
      }
    }
    else
    {
      if (!v22)
      {

LABEL_45:
        uint64_t v13 = 1;
        goto LABEL_46;
      }
LABEL_41:

      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v25) {
      goto LABEL_42;
    }
    unint64_t v16 = *(void *)(v26 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v10 + 2;
      if (v10 + 2 >= v25) {
        goto LABEL_42;
      }
      unint64_t v16 = *(void *)(v26 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v10 + 3;
        if (v10 + 3 >= v25) {
          goto LABEL_42;
        }
        unint64_t v16 = *(void *)(v26 + 8 * v5);
        if (!v16)
        {
          int64_t v5 = v10 + 4;
          if (v10 + 4 >= v25) {
            goto LABEL_42;
          }
          unint64_t v16 = *(void *)(v26 + 8 * v5);
          if (!v16)
          {
            int64_t v5 = v10 + 5;
            if (v10 + 5 >= v25) {
              goto LABEL_42;
            }
            unint64_t v16 = *(void *)(v26 + 8 * v5);
            if (!v16)
            {
              int64_t v17 = v10 + 6;
              while (v17 < v25)
              {
                unint64_t v16 = *(void *)(v26 + 8 * v17++);
                if (v16)
                {
                  int64_t v5 = v17 - 1;
                  goto LABEL_29;
                }
              }
LABEL_42:
              uint64_t v13 = 0;
LABEL_46:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

              return v13;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v5 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  void v21[3];
  uint64_t v22;
  uint64_t v23;
  long long v24[2];
  void v25[5];

  specialized _NativeDictionary.makeIterator()(v25, a1);
  unint64_t v3 = v25[0];
  uint64_t v4 = v25[1];
  int64_t v5 = v25[3];
  unint64_t v6 = v25[4];
  uint64_t v7 = (unint64_t)(v25[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v6)
    {
      uint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    unint64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    uint64_t v13 = v5 + 1;
    if (!v12)
    {
      uint64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        uint64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          uint64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            uint64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_24;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              id v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  uint64_t v13 = v14 - 1;
                  goto LABEL_19;
                }
              }
LABEL_24:

              swift_release();
              return 0;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v6 = (v12 - 1) & v12;
    int64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
LABEL_20:
    outlined init with copy of Conversation(*(void *)(v3 + 56) + 40 * v10, (uint64_t)v24);
    outlined init with take of Notice(v24, (uint64_t)v21);
    int64_t v15 = v22;
    unint64_t v16 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    int64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    LOBYTE(v16) = v18;
    uint64_t v19 = objc_msgSend(a2, sel_streamToken);
    if (v16)
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      uint64_t v20 = v19;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      if ((id)v17 == v20)
      {

        swift_release();
        return 1;
      }
    }
  }
  __break(1u);
  return result;
}

ConversationKit::PeoplePickerStyle_optional __swiftcall PeoplePickerStyle.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (ConversationKit::PeoplePickerStyle_optional)rawValue;
}

uint64_t PeoplePickerStyle.rawValue.getter()
{
  return *v0;
}

ConversationKit::PeoplePickerStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PeoplePickerStyle(Swift::Int *a1)
{
  return PeoplePickerStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PeoplePickerStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PeoplePickerStyle.rawValue.getter();
  *a1 = result;
  return result;
}

void one-time initialization function for navigationTitleContainerSpacing()
{
  static LayoutConstants.navigationTitleContainerSpacing = 0x3FF0000000000000;
}

id TPPillView.__allocating_init(title:frame:theme:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  int64_t v15 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v14, sel_initWithTitle_frame_theme_, v15, a3, a4, a5, a6, a7);

  return v16;
}

id PeoplePickerViewController.navigationSubtitle.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) != 2) {
    return 0;
  }
  OUTLINED_FUNCTION_5_13();
  char v2 = (void *)(*(uint64_t (**)(void))(v1 + 912))();
  if (!v2
    || (uint64_t v3 = outlined bridged method (ob) of @objc TUConversationActivity.concatenatedMetadataDescription.getter(v2, (SEL *)&selRef_concatenatedMetadataDescription), !v4))
  {
    OUTLINED_FUNCTION_5_13();
    uint64_t v5 = (*(uint64_t (**)(void))(v7 + 888))();
    uint64_t v6 = v8;
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v5 = v3;
  uint64_t v6 = v4;
LABEL_6:
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v9, sel_setNumberOfLines_, 1);
  objc_msgSend(v9, sel_setClipsToBounds_, 1);
  objc_msgSend(v9, sel_setLineBreakMode_, 4);
  id v10 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28E0]);
  objc_msgSend(v9, sel_setFont_, v10);

  objc_msgSend(v9, sel_setAdjustsFontForContentSizeCategory_, 1);
  id v11 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v9, sel_setTextColor_, v11);

  id v12 = objc_msgSend(self, sel_conversationKit);
  v21._id object = (void *)0xE000000000000000;
  v13._id object = (void *)0x80000001C3799580;
  v13._uint64_t countAndFlagsBits = 0xD000000000000014;
  v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v14.value._id object = (void *)0xEF74694B6E6F6974;
  v15._uint64_t countAndFlagsBits = 0;
  v15._id object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v21);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v16 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v16 + 16) = xmmword_1C3769620;
  *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v16 + 32) = v5;
  *(void *)(v16 + 40) = v6;
  uint64_t v17 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc UILabel.text.setter(v17, v19, v9);
  return v9;
}

uint64_t PeoplePickerViewController.idsDestinations.setter(uint64_t a1)
{
  return PeoplePickerViewController.idsDestinations.setter(a1);
}

{
  void *v1;

  OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t PeoplePickerViewController.idsGroupDestinations.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_13_24(a1);
}

uint64_t PeoplePickerViewController.meHandles.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_13_24(a1);
}

uint64_t PeoplePickerViewController.restrictionPolicy.setter(uint64_t a1)
{
  return PeoplePickerViewController.idsDestinations.setter(a1);
}

uint64_t key path getter for PeoplePickerViewController.selectedSenderIdentity : PeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2C8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for PeoplePickerViewController.selectedSenderIdentity : PeoplePickerViewController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2D0);
  id v4 = *a1;
  return v3(v2);
}

void *PeoplePickerViewController.selectedSenderIdentity.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void PeoplePickerViewController.selectedSenderIdentity.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v1;
  *uint64_t v1 = a1;
}

uint64_t (*PeoplePickerViewController.selectedSenderIdentity.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

void PeoplePickerViewController.actionBar.setter(uint64_t a1)
{
}

void PeoplePickerViewController.currentConversationLink.setter(uint64_t a1)
{
}

void *PeoplePickerViewController.currentConversationIsAVLess.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 856))() & 1) == 0) {
    return 0;
  }
  uint64_t result = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation);
  if (result) {
    return (void *)(objc_msgSend(result, sel_avMode) == 0);
  }
  return result;
}

void *PeoplePickerViewController.smsAccount.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___smsAccount;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___smsAccount);
  uint64_t v3 = v2;
  if (v2 == (void *)1)
  {
    closure #1 in PeoplePickerViewController.smsAccount.getter();
    uint64_t v3 = v4;
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v6 = v4;
    outlined consume of UIView??(v5);
  }
  outlined copy of UIView??(v2);
  return v3;
}

void closure #1 in PeoplePickerViewController.smsAccount.getter()
{
  id v0 = objc_msgSend(self, sel_sharedInstance);
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = objc_msgSend(self, sel_smsService);
    id v3 = objc_msgSend(v1, sel_accountsForService_, v2);

    if (v3)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for IMAccount);
      unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v6)
        {
LABEL_5:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v4 & 0xC000000000000001) == 0, v4);
          if ((v4 & 0xC000000000000001) != 0) {
            MEMORY[0x1C87744F0](0, v4);
          }
          else {
            id v5 = *(id *)(v4 + 32);
          }
        }
      }
      else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
}

uint64_t PeoplePickerViewController.maxParticipantLimit.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___maxParticipantLimit);
  if (*(unsigned char *)(v0
                + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___maxParticipantLimit
                + 8) != 1)
    return *(void *)v1;
  uint64_t result = closure #1 in PeoplePickerViewController.maxParticipantLimit.getter();
  *(void *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t closure #1 in PeoplePickerViewController.maxParticipantLimit.getter()
{
  id v0 = objc_msgSend(self, sel_sharedInstance);
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = outlined bridged method (mbnn) of @objc FTServerBag.object(forKey:)(0xD000000000000013, 0x80000001C3799560, v0);

    if (v2)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v6 = 0u;
      long long v7 = 0u;
    }
    _sypSgWObTm_0((uint64_t)&v6, (uint64_t)v8, &demangling cache variable for type metadata for Any?);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)v8, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v7 + 1)) {
    goto LABEL_11;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    uint64_t v3 = 32;
    goto LABEL_13;
  }
  uint64_t v3 = (uint64_t)objc_msgSend(v5, sel_unsignedIntegerValue);

  if (v3 < 0)
  {
    __break(1u);
LABEL_11:
    outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
LABEL_13:
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
  return v3;
}

uint64_t key path getter for PeoplePickerViewController.delegate : PeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x360))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for PeoplePickerViewController.delegate : PeoplePickerViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x368);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t PeoplePickerViewController.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t PeoplePickerViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  *(void *)(v2 + 8) = a2;
  OUTLINED_FUNCTION_41_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PeoplePickerViewController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_41_0();
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  _OWORD v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t key path getter for PeoplePickerViewController.appName : PeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x378))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for PeoplePickerViewController.appName : PeoplePickerViewController(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x380);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

void PeoplePickerViewController.appName.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_appName);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  if (!v6)
  {
    if (!a2) {
      return;
    }
    goto LABEL_10;
  }
  if (!a2 || (*v5 == a1 ? (BOOL v7 = v6 == a2) : (BOOL v7 = 0), !v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)) {
LABEL_10:
  }
    PeoplePickerViewController.updateNavigationTitle()();
}

void PeoplePickerViewController.updateNavigationTitle()()
{
  uint64_t v1 = v0;
  if (!*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style))
  {
    id v25 = objc_msgSend(v0, sel_navigationItem);
    id v2 = objc_msgSend(self, sel_conversationKit);
    unint64_t v24 = 0xE000000000000000;
    uint64_t v3 = 0x454341465F57454ELL;
    unint64_t v4 = 0xEC000000454D4954;
    goto LABEL_5;
  }
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) == 1)
  {
    id v25 = objc_msgSend(v0, sel_navigationItem);
    id v2 = objc_msgSend(self, sel_conversationKit);
    unint64_t v24 = 0xE000000000000000;
    uint64_t v3 = 0x504F45505F444441;
    unint64_t v4 = 0xEA0000000000454CLL;
LABEL_5:
    v5.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v5.value._id object = (void *)0xEF74694B6E6F6974;
    v6._uint64_t countAndFlagsBits = 0;
    v6._id object = (void *)0xE000000000000000;
    uint64_t v7 = 0;
    Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, v5, (NSBundle)v2, v6, *(Swift::String *)(&v24 - 1));

    outlined bridged method (mbnn) of @objc UINavigationItem.title.setter(v8._countAndFlagsBits, (uint64_t)v8._object, v25);
    goto LABEL_11;
  }
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  id v10 = objc_msgSend(self, sel_conversationKit);
  v28._id object = (void *)0xE000000000000000;
  v11._id object = (void *)0x80000001C3799970;
  v11._uint64_t countAndFlagsBits = 0xD000000000000017;
  v12.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v12.value._id object = (void *)0xEF74694B6E6F6974;
  v13._uint64_t countAndFlagsBits = 0;
  v13._id object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v28);

  outlined bridged method (mbnn) of @objc UILabel.text.setter(v14._countAndFlagsBits, (uint64_t)v14._object, v9);
  id v15 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  Class isa = UIFont.withTraits(_:)(2u).super.isa;

  objc_msgSend(v9, sel_setFont_, isa);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C3769830;
  *(void *)(v17 + 32) = v9;
  v26._rawValue = (void *)v17;
  specialized Array._endMutation()();
  id v18 = v9;
  UIStackView.__allocating_init(arrangedSubviews:)(v19, v26);
  Swift::String v21 = v20;
  id v22 = PeoplePickerViewController.navigationSubtitle.getter();
  if (v22)
  {
    char v23 = v22;
    if (one-time initialization token for navigationTitleContainerSpacing != -1) {
      swift_once();
    }
    objc_msgSend(v21, sel_setSpacing_, *(double *)&static LayoutConstants.navigationTitleContainerSpacing);
    objc_msgSend(v21, sel_addArrangedSubview_, v23);
  }
  objc_msgSend(v21, sel_setAxis_, 1);
  objc_msgSend(v21, sel_setAlignment_, 3);
  objc_msgSend(v21, sel_setDistribution_, 3);
  id v25 = objc_msgSend(v1, sel_navigationItem);
  objc_msgSend(v25, sel_setTitleView_, v21);

LABEL_11:
}

uint64_t PeoplePickerViewController.appName.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PeoplePickerViewController.appName.setter(uint64_t a1, uint64_t a2)
{
  Swift::String_optional v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_appName);
  OUTLINED_FUNCTION_11_0();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *Swift::String_optional v5 = a1;
  v5[1] = a2;
  PeoplePickerViewController.appName.didset(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t PeoplePickerViewController.appName.modify(void *a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  unint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_appName);
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4[1];
  _OWORD v3[3] = *v4;
  v3[4] = v5;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_34_9();
}

void PeoplePickerViewController.appName.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    swift_bridgeObjectRetain();
    PeoplePickerViewController.appName.setter(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    PeoplePickerViewController.appName.setter(*(void *)(*(void *)a1 + 24), v4);
  }
  free(v2);
}

uint64_t key path getter for PeoplePickerViewController.stagedActivity : PeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x390))();
  *a2 = result;
  return result;
}

uint64_t key path setter for PeoplePickerViewController.stagedActivity : PeoplePickerViewController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x398);
  id v4 = *a1;
  return v3(v2);
}

void PeoplePickerViewController.stagedActivity.didset(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!*v4)
  {
    if (!a1) {
      return;
    }
    goto LABEL_6;
  }
  if (!a1
    || (type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationActivity),
        id v6 = v5,
        id v7 = a1,
        char v8 = static NSObject.== infix(_:_:)(),
        v6,
        v7,
        (v8 & 1) == 0))
  {
LABEL_6:
    PeoplePickerViewController.updateNavigationTitle()();
  }
}

void *PeoplePickerViewController.stagedActivity.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void PeoplePickerViewController.stagedActivity.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity);
  OUTLINED_FUNCTION_11_0();
  id v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;
  PeoplePickerViewController.stagedActivity.didset(v4);
}

uint64_t PeoplePickerViewController.stagedActivity.modify(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity);
  OUTLINED_FUNCTION_2();
  id v5 = *v4;
  _OWORD v3[3] = *v4;
  id v6 = v5;
  return OUTLINED_FUNCTION_34_9();
}

void PeoplePickerViewController.stagedActivity.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  id v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  if (a2)
  {
    id v5 = v3;
    PeoplePickerViewController.stagedActivity.setter(v3);
  }
  else
  {
    PeoplePickerViewController.stagedActivity.setter(*(void **)(*(void *)a1 + 24));
  }
  free(v2);
}

uint64_t key path getter for PeoplePickerViewController.initialRecipientDestinations : PeoplePickerViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x3A8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for PeoplePickerViewController.initialRecipientDestinations : PeoplePickerViewController(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x3B0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t PeoplePickerViewController.initialRecipientDestinations.didset(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_initialRecipientDestinations];
  swift_beginAccess();
  uint64_t result = specialized static Array<A>.== infix(_:_:)(*(void **)v3, a1);
  if ((result & 1) == 0)
  {
    id v5 = v1;
    uint64_t v6 = swift_bridgeObjectRetain();
    unint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6, v5);
    swift_bridgeObjectRelease();
    char v8 = *(void **)&v5[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, sel_setRecipients_, isa);

    if (v7 >> 62) {
      goto LABEL_13;
    }
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    Swift::String v11 = v5;
    swift_bridgeObjectRetain();
    for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v12 = 4;
      while (1)
      {
        id v13 = (v7 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1C87744F0](v12 - 4, v7)
            : *(id *)(v7 + 8 * v12);
        Swift::String v14 = v13;
        uint64_t v15 = v12 - 3;
        if (__OFADD__(v12 - 4, 1)) {
          break;
        }
        PeoplePickerViewController.addRecipient(_:)(v13);

        ++v12;
        if (v15 == v10) {
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_13:
      uint64_t v16 = v5;
      swift_bridgeObjectRetain();
    }
LABEL_10:

    return swift_bridgeObjectRelease_n();
  }
  return result;
}

id PeoplePickerViewController.composeRecipient(for:)()
{
  uint64_t v0 = (void *)MEMORY[0x1C87730B0]();
  uint64_t v1 = outlined bridged method (ob) of @objc TUConversationActivity.concatenatedMetadataDescription.getter(v0, (SEL *)&selRef_stringByRemovingWhitespace);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  id v6 = objc_msgSend(self, sel_sharedInstance);
  id v7 = objc_msgSend(v6, sel_contactStore);

  uint64_t v8 = MEMORY[0x1C87730B0](v3, v4);
  id v9 = objc_msgSend(v7, sel_contactForDestinationId_, v8);

  uint64_t v10 = (void *)MEMORY[0x1C87730B0](v3, v4);
  LOBYTE(v8) = objc_msgSend(v10, sel_destinationIdIsEmailAddress);

  if (v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
    id v13 = (void *)MEMORY[0x1C87730B0](v3, v4);
    unsigned int v14 = objc_msgSend(v13, sel_destinationIdIsPhoneNumber);

    if (v14) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = 5;
    }
  }
  id v15 = objc_allocWithZone(MEMORY[0x1E4F5A138]);
  return @nonobjc CNComposeRecipient.init(contact:address:kind:)(v9, v3, v4, v11);
}

void PeoplePickerViewController.addRecipient(_:)(void *a1)
{
  unint64_t v2 = v1;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationKit);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    id v10 = v5;
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v6, v7, "[PeoplePickerViewController] Adding recipient: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v9, -1, -1);
    MEMORY[0x1C87760E0](v8, -1, -1);
  }
  else
  {
  }
  id v13 = objc_msgSend(self, sel_sharedManager);
  CNComposeRecipient.idsDestinations()();
  v14.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x3C0))(v15)) {
    uint64_t v16 = 63;
  }
  else {
    uint64_t v16 = 47;
  }
  objc_msgSend(v13, sel_beginQueryWithDestinations_services_, v14.super.isa, v16, v18, v19);

  PeoplePickerViewController.currentRecipientsAddresses()();
  uint64_t v17 = PeoplePickerViewController.callFilterPolicy(for:)();
  swift_bridgeObjectRelease();
  PeoplePickerViewController.restrictionPolicy.setter(v17);
  PeoplePickerViewController.updateState()();
}

uint64_t PeoplePickerViewController.initialRecipientDestinations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PeoplePickerViewController.initialRecipientDestinations.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_initialRecipientDestinations);
  OUTLINED_FUNCTION_11_0();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  PeoplePickerViewController.initialRecipientDestinations.didset(v4);
  return swift_bridgeObjectRelease();
}

uint64_t PeoplePickerViewController.initialRecipientDestinations.modify(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_initialRecipientDestinations);
  OUTLINED_FUNCTION_2();
  _OWORD v3[3] = *v4;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_34_9();
}

void PeoplePickerViewController.initialRecipientDestinations.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = (void *)swift_bridgeObjectRetain();
    PeoplePickerViewController.initialRecipientDestinations.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    PeoplePickerViewController.initialRecipientDestinations.setter(v3);
  }
  free(v2);
}

uint64_t PeoplePickerViewController.setPreventsApplicationTerminationWhenModal.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t PeoplePickerViewController.includeMessagesInIDSQueries.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) == 2) {
    return 1;
  }
  else {
    return (uint64_t)PeoplePickerViewController.currentConversationIsAVLess.getter();
  }
}

unint64_t PeoplePickerViewController.defaultActionBarButtonStyle.getter()
{
  if (!*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style)) {
    return 2;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) == 1) {
    return (unint64_t)PeoplePickerViewController.currentConversationIsAVLess.getter() & 1;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 856))()) {
    return 4;
  }
  else {
    return 2;
  }
}

uint64_t (*default argument 4 of PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void PeoplePickerViewController.__allocating_init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(a1, a2, a3, a4, a5, a6);
}

void PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v145 = a6;
  uint64_t v146 = a3;
  uint64_t v144 = a2;
  char v9 = *a1;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_availableRecipientTintColor;
  uint64_t v11 = self;
  unint64_t v12 = v6;
  *(void *)&v6[v10] = objc_msgSend(v11, sel_systemTealColor);
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_unavailableRecipientTintColor;
  *(void *)&v12[v13] = objc_msgSend(v11, sel_systemGrayColor);
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_gondolaRecipientTintColor;
  *(void *)&v12[v14] = objc_msgSend(v11, sel_systemGreenColor);
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_restrictedRecipientTintColor;
  *(void *)&v12[v15] = objc_msgSend(v11, sel_systemRedColor);
  uint64_t v16 = &v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_constants];
  *(_OWORD *)uint64_t v16 = xmmword_1C376F9F0;
  *((void *)v16 + 2) = 0x4034000000000000;
  uint64_t v17 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_callProviderManager;
  *(void *)&v12[v17] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  uint64_t v18 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_senderIdentityPillView;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TPPillView);
  *(void *)&v12[v18] = OUTLINED_FUNCTION_2_42();
  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_reporter;
  *(void *)&v12[v19] = objc_msgSend(objc_allocWithZone((Class)CNKCoreAnalyticsReporter), sel_init);
  uint64_t v20 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v22 = MEMORY[0x1E4FBC870];
  uint64_t v147 = a5;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) == 0)
  {
    *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients] = MEMORY[0x1E4FBC870];
    uint64_t v23 = v22;
    goto LABEL_4;
  }
  uint64_t v124 = MEMORY[0x1E4FBC860];
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    *(void *)&v12[v20] = v125;
  }
  else
  {
    *(void *)&v12[v20] = v22;
    uint64_t v23 = v22;
    if ((v124 & 0xC000000000000000) == 0) {
      goto LABEL_4;
    }
  }
  if (_CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v23 = MEMORY[0x1E4FBC870];
  }
LABEL_4:
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_loggedInvalidRecipients] = v23;
  uint64_t v24 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses] = v22;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsDestinations] = v22;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsGroupDestinations] = v22;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_meHandles] = v22;
  *(_DWORD *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_keyboardHeight] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_selectedSenderIdentity] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar] = 0;
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversationLink] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___smsAccount] = 1;
  Swift::OpaquePointer v26 = &v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___maxParticipantLimit];
  *(void *)Swift::OpaquePointer v26 = 0;
  v26[8] = 1;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v27 = &v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_appName];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  Swift::String v28 = (void **)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity];
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_initialRecipientDestinations] = v21;
  uint64_t v29 = &v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addButtonHandler];
  *(void *)uint64_t v29 = 0;
  *((void *)v29 + 1) = 0;
  uint64_t v30 = &v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_linkShareCoordinator];
  *(_OWORD *)uint64_t v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((void *)v30 + 4) = 0;
  uint64_t v31 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQuerySubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  OUTLINED_FUNCTION_26_16();
  *(void *)&v12[v31] = PassthroughSubject.init()();
  uint64_t v32 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupSubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v12[v32] = PassthroughSubject.init()();
  uint64_t v33 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQuerySubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v12[v33] = PassthroughSubject.init()();
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryDebouncer] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupDebouncer] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQueryDebouncer] = 0;
  v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style] = v9;
  uint64_t v34 = *(void **)&v12[v25];
  uint64_t v35 = v146;
  *(void *)&v12[v25] = v146;
  id v36 = v35;

  OUTLINED_FUNCTION_11_0();
  id v37 = *v28;
  *Swift::String v28 = a4;
  id v128 = a4;

  if (v144)
  {
    *(void *)&v12[v24] = v144;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = &v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_setPreventsApplicationTerminationWhenModal];
  uint64_t v39 = v145;
  *(void *)uint64_t v38 = v147;
  *((void *)v38 + 1) = v39;
  id v40 = objc_allocWithZone(MEMORY[0x1E4F5A0F8]);
  swift_retain();
  id v41 = objc_msgSend(v40, sel_initWithSearchType_, 2);
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController] = v41;
  type metadata accessor for PeoplePickerViewModel();
  swift_allocObject();
  id v127 = v36;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel] = PeoplePickerViewModel.init(activeConversation:)((uint64_t)v35);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_restrictionPolicy] = Dictionary.init(dictionaryLiteral:)();
  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stackView] = v42;
  id v43 = objc_msgSend(self, sel_buttonWithType_, 1);
  id v44 = OUTLINED_FUNCTION_38_5((uint64_t)v43, OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_audioButton);
  id v45 = OUTLINED_FUNCTION_38_5((uint64_t)v44, OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_videoButton);
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addPeopleButton] = v45;

  v150.receiver = v12;
  v150.super_class = (Class)type metadata accessor for PeoplePickerViewController();
  id v46 = objc_msgSendSuper2(&v150, sel_initWithNibName_bundle_, 0, 0);
  id v47 = objc_allocWithZone((Class)type metadata accessor for iOSPeoplePickerAddButtonHandler());
  uint64_t v48 = (char *)v46;
  id v49 = objc_msgSend(v47, sel_init);
  unsigned __int8 v50 = &v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addButtonHandler];
  *(void *)unsigned __int8 v50 = v49;
  *((void *)v50 + 1) = &protocol witness table for iOSPeoplePickerAddButtonHandler;
  swift_unknownObjectRelease();
  if (*(void *)v50)
  {
    uint64_t v51 = *((void *)v50 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v53 = OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_30_14();
    uint64_t v54 = *(void (**)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v51 + 64);
    swift_unknownObjectRetain();
    swift_retain();
    v54(partial apply for closure #1 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:), v53, ObjectType, v51);
    swift_unknownObjectRelease();
    swift_release();
    if (*(void *)v50)
    {
      uint64_t v55 = *((void *)v50 + 1);
      uint64_t v56 = swift_getObjectType();
      uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
      unint64_t v58 = v48;
      swift_unknownObjectRetain();
      v57(v48, v56, v55);
      swift_unknownObjectRelease();
      if (*(void *)v50)
      {
        uint64_t v59 = *((void *)v50 + 1);
        uint64_t v60 = swift_getObjectType();
        uint64_t v61 = *(void **)&v58[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController];
        uint64_t v62 = *(void (**)(void *, uint64_t, uint64_t))(v59 + 40);
        swift_unknownObjectRetain();
        id v63 = v61;
        v62(v61, v60, v59);
        swift_unknownObjectRelease();
      }
    }
  }
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  OUTLINED_FUNCTION_18_25(v130, v64, v65, v66, v67, v68, v69, v70, v126[0]);
  OUTLINED_FUNCTION_5_3();
  uint64_t v146 = v71;
  v126[0] = *(void *)(v72 + 64);
  MEMORY[0x1F4188790](v73);
  OUTLINED_FUNCTION_5_10();
  uint64_t v131 = v74;
  uint64_t v148 = *(void *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQuerySubject];
  uint64_t v129 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  uint64_t v133 = v126;
  OUTLINED_FUNCTION_5_3();
  uint64_t v147 = v75;
  uint64_t v142 = *(void *)(v76 + 64);
  MEMORY[0x1F4188790](v77);
  OUTLINED_FUNCTION_5_10();
  uint64_t v143 = v78;
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v141 = self;
  id v149 = objc_msgSend(v141, sel_mainRunLoop);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v80 = OUTLINED_FUNCTION_8(v79);
  uint64_t v139 = *(void *)(v81 + 64);
  MEMORY[0x1F4188790](v80);
  OUTLINED_FUNCTION_5_10();
  uint64_t v140 = v82;
  uint64_t v84 = v83 - v82;
  uint64_t v138 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v84, 1, 1, v138);
  uint64_t v137 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  uint64_t v136 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  uint64_t v135 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v84, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  uint64_t v85 = *(void *)(v147 + 8);
  v147 += 8;
  uint64_t v134 = v85;
  OUTLINED_FUNCTION_26_2();
  v86();
  swift_release();
  uint64_t v87 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_30_14();
  uint64_t v88 = OUTLINED_FUNCTION_26();
  *(void *)(v88 + 16) = partial apply for closure #2 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:);
  *(void *)(v88 + 24) = v87;
  uint64_t v133 = (uint64_t *)lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop> and conformance Publishers.Debounce<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  OUTLINED_FUNCTION_39_9();
  uint64_t v89 = Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v90 = v146[1];
  ++v146;
  uint64_t v132 = v90;
  OUTLINED_FUNCTION_26_2();
  v91();
  OUTLINED_FUNCTION_25_16();
  *(void *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryDebouncer] = v89;
  uint64_t v92 = swift_release();
  OUTLINED_FUNCTION_18_25(v92, v93, v94, v95, v96, v97, v98, v99, v126[0]);
  MEMORY[0x1F4188790](v100);
  uint64_t v148 = *(void *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupSubject];
  MEMORY[0x1F4188790](v148);
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v149 = objc_msgSend(v141, sel_mainRunLoop);
  MEMORY[0x1F4188790](v149);
  __int16 v101 = (char *)v126 - v140;
  __swift_storeEnumTagSinglePayload((uint64_t)v126 - v140, 1, 1, v138);
  OUTLINED_FUNCTION_16_19();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  OUTLINED_FUNCTION_26_2();
  v102();
  swift_release();
  uint64_t v103 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_30_14();
  uint64_t v104 = OUTLINED_FUNCTION_26();
  *(void *)(v104 + 16) = partial apply for closure #3 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:);
  *(void *)(v104 + 24) = v103;
  OUTLINED_FUNCTION_39_9();
  uint64_t v105 = Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v106();
  OUTLINED_FUNCTION_25_16();
  *(void *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupDebouncer] = v105;
  uint64_t v107 = swift_release();
  OUTLINED_FUNCTION_18_25(v107, v108, v109, v110, v111, v112, v113, v114, v126[0]);
  MEMORY[0x1F4188790](v115);
  uint64_t v148 = *(void *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQuerySubject];
  MEMORY[0x1F4188790](v148);
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v149 = objc_msgSend(v141, sel_mainRunLoop);
  MEMORY[0x1F4188790](v149);
  long long v116 = (char *)v126 - v140;
  __swift_storeEnumTagSinglePayload((uint64_t)v126 - v140, 1, 1, v138);
  OUTLINED_FUNCTION_16_19();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  OUTLINED_FUNCTION_26_2();
  v117();
  swift_release();
  uint64_t v118 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_30_14();
  uint64_t v119 = OUTLINED_FUNCTION_26();
  *(void *)(v119 + 16) = partial apply for closure #4 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:);
  *(void *)(v119 + 24) = v118;
  uint64_t v120 = Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v121();
  OUTLINED_FUNCTION_25_16();
  *(void *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQueryDebouncer] = v120;
  swift_release();
  if (v144)
  {
    if (*(void *)(v144 + 16))
    {
      specialized Sequence.compactMap<A>(_:)(v144);
      OUTLINED_FUNCTION_15_23();
      uint64_t v122 = specialized Set.init<A>(_:)(v120);
      char v123 = (uint64_t *)&v48[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsDestinations];
      OUTLINED_FUNCTION_11_0();
      *char v123 = v122;
      swift_bridgeObjectRelease();
      PeoplePickerViewController.scheduleIDSQuery()();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }

  swift_release();
  OUTLINED_FUNCTION_28();
}

void closure #1 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_addRecipient_, a1);
  }
}

void PeoplePickerViewController.scheduleIDSQuery()()
{
  id v0 = objc_msgSend(self, sel_sharedManager);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_beginBatchQueryWithDestinations_, isa);
}

void PeoplePickerViewController.scheduleIDSQueryForGroups()()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized Set.union<A>(_:)(v1);
  PeoplePickerViewController.idsDestinations.setter(v2);
  id v3 = objc_msgSend(self, sel_sharedManager);
  swift_bridgeObjectRetain();
  v4.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C0))(v5)) {
    uint64_t v6 = 63;
  }
  else {
    uint64_t v6 = 47;
  }
  objc_msgSend(v3, sel_beginBatchQueryWithDestinations_services_, v4.super.isa, v6);
}

void closure #2 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  OUTLINED_FUNCTION_2();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    a2();
  }
}

void PeoplePickerViewController.scheduleIDSCachedQuery()()
{
  id v1 = objc_msgSend(self, sel_sharedManager);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized Set.union<A>(_:)(v2);
  v3.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  uint64_t v4 = swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C0))(v4)) {
    uint64_t v5 = 63;
  }
  else {
    uint64_t v5 = 47;
  }
  objc_msgSend(v1, sel_beginCachedQueryWithDestinations_services_, v3.super.isa, v5);
}

id PeoplePickerViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PeoplePickerViewController.init(coder:)()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_availableRecipientTintColor;
  id v3 = self;
  *(void *)&v1[v2] = objc_msgSend(v3, sel_systemTealColor);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_unavailableRecipientTintColor;
  *(void *)&v1[v4] = objc_msgSend(v3, sel_systemGrayColor);
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_gondolaRecipientTintColor;
  *(void *)&v1[v5] = objc_msgSend(v3, sel_systemGreenColor);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_restrictedRecipientTintColor;
  *(void *)&v1[v6] = objc_msgSend(v3, sel_systemRedColor);
  os_log_type_t v7 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_constants];
  *(_OWORD *)os_log_type_t v7 = xmmword_1C376F9F0;
  *((void *)v7 + 2) = 0x4034000000000000;
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_callProviderManager;
  *(void *)&v1[v8] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_senderIdentityPillView;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TPPillView);
  *(void *)&v1[v9] = OUTLINED_FUNCTION_2_42();
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_reporter;
  *(void *)&v1[v10] = objc_msgSend(objc_allocWithZone((Class)CNKCoreAnalyticsReporter), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v13 = MEMORY[0x1E4FBC870];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
      *(void *)&v1[v11] = v15;
    }
    else
    {
      *(void *)&v1[v11] = v13;
      uint64_t v16 = v13;
      if ((v14 & 0xC000000000000000) == 0) {
        goto LABEL_9;
      }
    }
    if (_CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      uint64_t v16 = MEMORY[0x1E4FBC870];
    }
  }
  else
  {
    *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients] = MEMORY[0x1E4FBC870];
    uint64_t v16 = v13;
  }
LABEL_9:
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_loggedInvalidRecipients] = v16;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses] = v13;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsDestinations] = v13;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsGroupDestinations] = v13;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_meHandles] = v13;
  *(_DWORD *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_keyboardHeight] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_selectedSenderIdentity] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversationLink] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___smsAccount] = 1;
  uint64_t v17 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___maxParticipantLimit];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v18 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_appName];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_initialRecipientDestinations] = v12;
  uint64_t v19 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addButtonHandler];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v20 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_linkShareCoordinator];
  *(_OWORD *)uint64_t v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((void *)v20 + 4) = 0;
  uint64_t v21 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQuerySubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  OUTLINED_FUNCTION_26_16();
  *(void *)&v1[v21] = PassthroughSubject.init()();
  uint64_t v22 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupSubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v1[v22] = PassthroughSubject.init()();
  uint64_t v23 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQuerySubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v1[v23] = PassthroughSubject.init()();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryDebouncer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupDebouncer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQueryDebouncer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id PeoplePickerViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PeoplePickerViewController.init(nibName:bundle:)()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_availableRecipientTintColor;
  id v3 = self;
  *(void *)&v1[v2] = objc_msgSend(v3, sel_systemTealColor);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_unavailableRecipientTintColor;
  *(void *)&v1[v4] = objc_msgSend(v3, sel_systemGrayColor);
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_gondolaRecipientTintColor;
  *(void *)&v1[v5] = objc_msgSend(v3, sel_systemGreenColor);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_restrictedRecipientTintColor;
  *(void *)&v1[v6] = objc_msgSend(v3, sel_systemRedColor);
  id v7 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_constants];
  *(_OWORD *)id v7 = xmmword_1C376F9F0;
  *((void *)v7 + 2) = 0x4034000000000000;
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_callProviderManager;
  *(void *)&v1[v8] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_senderIdentityPillView;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TPPillView);
  *(void *)&v1[v9] = OUTLINED_FUNCTION_2_42();
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_reporter;
  *(void *)&v1[v10] = objc_msgSend(objc_allocWithZone((Class)CNKCoreAnalyticsReporter), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v13 = MEMORY[0x1E4FBC870];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
      *(void *)&v1[v11] = v15;
    }
    else
    {
      *(void *)&v1[v11] = v13;
      uint64_t v16 = v13;
      if ((v14 & 0xC000000000000000) == 0) {
        goto LABEL_9;
      }
    }
    if (_CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      uint64_t v16 = MEMORY[0x1E4FBC870];
    }
  }
  else
  {
    *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients] = MEMORY[0x1E4FBC870];
    uint64_t v16 = v13;
  }
LABEL_9:
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_loggedInvalidRecipients] = v16;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses] = v13;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsDestinations] = v13;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsGroupDestinations] = v13;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_meHandles] = v13;
  *(_DWORD *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_keyboardHeight] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_selectedSenderIdentity] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversationLink] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___smsAccount] = 1;
  uint64_t v17 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController____lazy_storage___maxParticipantLimit];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v18 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_appName];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stagedActivity] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_initialRecipientDestinations] = v12;
  uint64_t v19 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addButtonHandler];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v20 = &v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_linkShareCoordinator];
  *(_OWORD *)uint64_t v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((void *)v20 + 4) = 0;
  uint64_t v21 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQuerySubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  OUTLINED_FUNCTION_26_16();
  *(void *)&v1[v21] = PassthroughSubject.init()();
  uint64_t v22 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupSubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v1[v22] = PassthroughSubject.init()();
  uint64_t v23 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQuerySubject;
  OUTLINED_FUNCTION_6_36();
  *(void *)&v1[v23] = PassthroughSubject.init()();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryDebouncer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSQueryGroupDebouncer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_scheduleIDSCachedQueryDebouncer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall PeoplePickerViewController.viewDidLoad()()
{
  v19.receiver = v0;
  v19.super_class = (Class)type metadata accessor for PeoplePickerViewController();
  objc_msgSendSuper2(&v19, sel_viewDidLoad);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_callProviderManager], sel_addDelegate_queue_, v0, 0);
  PeoplePickerViewController.initializeMeHandles()();
  id v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, sel_setPreservesSuperviewLayoutMargins_, 1);

    id v3 = objc_msgSend(v0, sel_view);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = objc_msgSend(self, sel_systemBackgroundColor);
      objc_msgSend(v4, sel_setBackgroundColor_, v5);

      PeoplePickerViewController.setUpStackView()();
      uint64_t v6 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stackView;
      id v7 = *(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stackView];
      PeoplePickerViewController.setUpPillView(containerView:)(v7);

      id v8 = *(id *)&v0[v6];
      PeoplePickerViewController.setUpSearchControllerView(containerView:)(v8);

      PeoplePickerViewController.refreshLocalizedSenderIdentity()();
      uint64_t v9 = self;
      id v10 = objc_msgSend(v9, sel_defaultCenter);
      OUTLINED_FUNCTION_21_18(v10, v11, v12, (uint64_t)sel_keyboardWillShowWithNotification_, *MEMORY[0x1E4FB2C58]);

      id v13 = objc_msgSend(v9, sel_defaultCenter);
      OUTLINED_FUNCTION_21_18(v13, v14, v15, (uint64_t)sel_keyboardWillHideWithNotification_, *MEMORY[0x1E4FB2C50]);

      id v16 = objc_msgSend(v9, sel_defaultCenter);
      OUTLINED_FUNCTION_21_18(v16, v17, v18, (uint64_t)sel_handleIDSStatusChangedWithNotification_, *MEMORY[0x1E4FADEC0]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t PeoplePickerViewController.initializeMeHandles()()
{
  id v0 = objc_msgSend(self, sel_sharedInstance);
  if (v0)
  {
    id v1 = v0;
    objc_msgSend(v0, sel_blockUntilConnected);
  }
  uint64_t v2 = MEMORY[0x1E4FBC870];
  uint64_t v17 = MEMORY[0x1E4FBC870];
  id v3 = objc_msgSend(self, sel_sharedInstance);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(self, sel_facetimeService);
    id v6 = objc_msgSend(v4, sel_accountsForService_, v5);

    if (v6)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for IMAccount);
      unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v7 >> 62)
      {
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v8) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v8)
        {
LABEL_7:
          uint64_t v9 = 4;
          while (1)
          {
            if ((v7 & 0xC000000000000001) != 0) {
              id v10 = (id)MEMORY[0x1C87744F0](v9 - 4, v7);
            }
            else {
              id v10 = *(id *)(v7 + 8 * v9);
            }
            uint64_t v11 = v10;
            uint64_t v12 = v9 - 3;
            if (__OFADD__(v9 - 4, 1))
            {
              __break(1u);
              goto LABEL_19;
            }
            if (objc_msgSend(v10, sel_registrationStatus) == (id)5)
            {
              uint64_t result = outlined bridged method (pb) of @objc IMAccount.strippedLogin.getter(v11);
              if (!v14)
              {
                __break(1u);
                return result;
              }
              Swift::String v15 = String.lowercased()();
              swift_bridgeObjectRelease();
              specialized Set._Variant.insert(_:)(v16, v15._countAndFlagsBits, v15._object);

              swift_bridgeObjectRelease();
            }
            else
            {
            }
            ++v9;
            if (v12 == v8)
            {
              swift_bridgeObjectRelease();
              uint64_t v2 = v17;
              goto LABEL_22;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v2 = MEMORY[0x1E4FBC870];
  }
LABEL_22:
  return PeoplePickerViewController.meHandles.setter(v2);
}

void PeoplePickerViewController.setUpStackView()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stackView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_stackView], sel_setAxis_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setAlignment_, 3);
  objc_msgSend(*(id *)&v0[v1], sel_setDistribution_, 0);
  objc_msgSend(*(id *)&v0[v1], sel_setPreservesSuperviewLayoutMargins_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  id v3 = v2;
  objc_msgSend(v2, sel_addSubview_, *(void *)&v0[v1]);

  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id v5 = v4;
  id v6 = objc_msgSend(v4, sel_safeAreaLayoutGuide);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769580;
  id v8 = objc_msgSend(*(id *)&v0[v1], sel_topAnchor);
  id v9 = objc_msgSend(v6, sel_topAnchor);
  id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  *(void *)(v7 + 32) = v10;
  id v11 = objc_msgSend(*(id *)&v0[v1], sel_leadingAnchor);
  id v12 = objc_msgSend(v6, sel_leadingAnchor);
  id v13 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v12);

  *(void *)(v7 + 40) = v13;
  id v14 = objc_msgSend(*(id *)&v0[v1], sel_bottomAnchor);
  id v15 = objc_msgSend(v0, sel_view);
  if (!v15)
  {
LABEL_9:
    __break(1u);
    return;
  }
  id v16 = v15;
  id v17 = objc_msgSend(v15, sel_bottomAnchor);

  id v18 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v17, (float)-*(float *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_keyboardHeight]);
  *(void *)(v7 + 48) = v18;
  id v19 = objc_msgSend(*(id *)&v0[v1], sel_trailingAnchor);
  id v20 = objc_msgSend(v6, sel_trailingAnchor);
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(void *)(v7 + 56) = v21;
  specialized Array._endMutation()();
  uint64_t v22 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_activateConstraints_, isa);
}

id PeoplePickerViewController.setUpPillView(containerView:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_senderIdentityPillView);
  objc_msgSend(v4, sel_setDelegate_, v2);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return objc_msgSend(a1, sel_addArrangedSubview_, v4);
}

void PeoplePickerViewController.setUpSearchControllerView(containerView:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController];
  id v5 = objc_msgSend(v4, sel_view);
  if (v5)
  {
    id v6 = v5;
    objc_msgSend(v4, sel_setDelegate_, v2);
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc CNAutocompleteSearchController.otherRecipientAddresses.setter(v8, v4);
    objc_msgSend(v4, sel_setExpandRecipientsInNamedGroups_, 0);
    objc_msgSend(v6, sel_setPreservesSuperviewLayoutMargins_, 1);
    objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v2, sel_addChildViewController_, v4);
    objc_msgSend(a1, sel_addArrangedSubview_, v6);
    objc_msgSend(v4, sel_didMoveToParentViewController_, v2);
    id v21 = objc_msgSend(a1, sel_safeAreaLayoutGuide);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C3769F40;
    id v10 = objc_msgSend(v6, sel_leadingAnchor);
    id v11 = objc_msgSend(v21, sel_leadingAnchor);
    id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

    *(void *)(v9 + 32) = v12;
    id v13 = objc_msgSend(v6, sel_bottomAnchor);
    id v14 = objc_msgSend(v21, sel_bottomAnchor);
    id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

    *(void *)(v9 + 40) = v15;
    id v16 = objc_msgSend(v6, sel_trailingAnchor);
    id v17 = objc_msgSend(v21, sel_trailingAnchor);
    id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

    *(void *)(v9 + 48) = v18;
    specialized Array._endMutation()();
    id v19 = self;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_activateConstraints_, isa);

    PeoplePickerViewController.setUpSearchControllerFooterView(containerView:)();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
  }
}

Swift::Void __swiftcall PeoplePickerViewController.refreshLocalizedSenderIdentity()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_callProviderManager);
  id v2 = objc_msgSend(v1, sel_faceTimeProvider);
  id v3 = objc_msgSend(v2, sel_identifier);

  if (!v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = (id)MEMORY[0x1C87730B0](v4);
    swift_bridgeObjectRelease();
  }
  id v5 = objc_msgSend(v1, sel_providerWithIdentifier_, v3);

  if (!v5) {
    goto LABEL_14;
  }
  id v6 = objc_msgSend(v5, sel_prioritizedSenderIdentities);
  uint64_t v7 = (uint64_t)objc_msgSend(v6, sel_count);

  if (v7 < 2) {
    goto LABEL_12;
  }
  id v8 = objc_msgSend(v5, sel_prioritizedSenderIdentities);
  id v9 = objc_msgSend(v8, sel_firstObject);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  _sypSgWObTm_0((uint64_t)v14, (uint64_t)v15, &demangling cache variable for type metadata for Any?);
  if (!v16)
  {

    outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUSenderIdentity);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:

    goto LABEL_14;
  }
  id v10 = v13;
  id v11 = objc_msgSend(v13, sel_localizedName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = String.count.getter();
  swift_bridgeObjectRelease();

  if (v12 < 1)
  {

LABEL_14:
    id v10 = 0;
  }
  PeoplePickerViewController.updateLocalizedSenderIdentity(_:)(v10);
}

Swift::Void __swiftcall PeoplePickerViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PeoplePickerViewController();
  objc_msgSendSuper2(&v3, sel_viewWillAppear_, a1);
  PeoplePickerViewController.setUpNavigationBar()();
  PeoplePickerViewController.updateState()();
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_becomeFirstResponder);
}

void PeoplePickerViewController.setUpNavigationBar()()
{
  id v1 = objc_msgSend(v0, sel_navigationController);
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v1, sel_navigationBar);
    objc_msgSend(v3, sel_setPrefersLargeTitles_, v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style] != 2);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    uint64_t inited = swift_initStackObject();
    id v5 = (void **)MEMORY[0x1E4FB0700];
    *(_OWORD *)(inited + 16) = xmmword_1C3769620;
    id v6 = *v5;
    *(void *)(inited + 32) = *v5;
    uint64_t v7 = self;
    id v8 = v6;
    id v9 = objc_msgSend(v7, sel_labelColor);
    *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    *(void *)(inited + 40) = v9;
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    outlined bridged method (mbnn) of @objc UINavigationBar.largeTitleTextAttributes.setter(v10, v3);
    v19[3] = type metadata accessor for PeoplePickerViewController();
    v19[0] = v0;
    objc_allocWithZone(MEMORY[0x1E4FB14A8]);
    id v11 = v0;
    id v12 = @nonobjc UIBarButtonItem.init(barButtonSystemItem:target:action:)(1, v19, (uint64_t)sel_cancelButtonTapped);
    id v13 = objc_msgSend(v11, sel_navigationItem);
    objc_msgSend(v13, sel_setRightBarButtonItem_, v12);

    PeoplePickerViewController.updateNavigationTitle()();
    id v14 = objc_msgSend(v11, sel_navigationItem);
    objc_msgSend(v14, sel__setLargeTitleTwoLineMode_, 2);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationKit);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl(&dword_1C2F90000, oslog, v16, "Navigation controller doesn't exist", v17, 2u);
      MEMORY[0x1C87760E0](v17, -1, -1);
    }
  }
}

void PeoplePickerViewController.updateState()()
{
  uint64_t v1 = v0;
  PeoplePickerViewController.activeParticipantsAddresses()();
  PeoplePickerViewController.currentRecipientsAddresses()();
  specialized Set.union<A>(_:)(v2);
  LOBYTE(v63[0]) = *(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style);
  int v3 = LOBYTE(v63[0]);
  PeoplePickerViewModel.update(for:style:)(v4, (char *)v63);
  swift_bridgeObjectRelease();
  PeoplePickerViewController.updateActionBarState()();
  PeoplePickerViewController.updateHelpText()();
  id v5 = (id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients);
  swift_beginAccess();
  unint64_t v6 = (unint64_t)*v5;
  int v59 = v3;
  if (((unint64_t)*v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type CNComposeRecipient and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    Set.Iterator.init(_cocoa:)();
    unint64_t v6 = v63[0];
    uint64_t v60 = (char *)v63[1];
    uint64_t v7 = v63[2];
    uint64_t v8 = v63[3];
    unint64_t v9 = v63[4];
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v60 = (char *)(v6 + 56);
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(v6 + 56);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  id v13 = (void *)((unint64_t)(v7 + 64) >> 6);
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v14 = (v9 - 1) & v9;
      unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
      uint64_t v16 = v8;
      goto LABEL_27;
    }
    uint64_t v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_71;
    }
    if (v19 >= (uint64_t)v13) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)&v60[8 * v19];
    uint64_t v16 = v8 + 1;
    if (!v20)
    {
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= (uint64_t)v13) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)&v60[8 * v16];
      if (!v20)
      {
        uint64_t v16 = v8 + 3;
        if (v8 + 3 >= (uint64_t)v13) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)&v60[8 * v16];
        if (!v20)
        {
          uint64_t v16 = v8 + 4;
          if (v8 + 4 >= (uint64_t)v13) {
            goto LABEL_32;
          }
          unint64_t v20 = *(void *)&v60[8 * v16];
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v14 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_27:
    id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
    if (!v18) {
      goto LABEL_32;
    }
    while (1)
    {
      uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
      uint64_t v23 = (void *)PeoplePickerViewController.tintColor(for:isChild:)(v18, 0);
      objc_msgSend(v22, sel_setTintColor_forRecipient_, v23, v18);

      id v24 = PeoplePickerViewController.preferredRecipient(for:)(v18);
      if (v24)
      {
        uint64_t v25 = v24;
        objc_msgSend(v22, sel_setPreferredRecipient_forRecipient_, v24, v18);
      }
      uint64_t v8 = v16;
      unint64_t v9 = v14;
      if ((v6 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      id v17 = (void *)__CocoaSet.Iterator.next()();
      if (v17)
      {
        id v61 = v17;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v18 = v62;
        swift_unknownObjectRelease();
        uint64_t v16 = v8;
        uint64_t v14 = v9;
        if (v62) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  uint64_t v21 = v8 + 5;
  while (v21 < (uint64_t)v13)
  {
    unint64_t v20 = *(void *)&v60[8 * v21++];
    if (v20)
    {
      uint64_t v16 = v21 - 1;
      goto LABEL_26;
    }
  }
LABEL_32:
  outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    Swift::OpaquePointer v26 = (void *)MEMORY[0x1E4FBC870];
  }
  uint64_t v62 = v26;
  unint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
  id v27 = objc_msgSend((id)v6, sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v29)
  {
    uint64_t v31 = 0x8000;
    goto LABEL_49;
  }
  if (v29 < 1)
  {
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0x8000;
  do
  {
    if ((v28 & 0xC000000000000001) != 0) {
      id v32 = (id)MEMORY[0x1C87744F0](v30, v28);
    }
    else {
      id v32 = *(id *)(v28 + 8 * v30 + 32);
    }
    uint64_t v33 = v32;
    unint64_t v34 = PeoplePickerViewController.presentationOptions(for:)(v32);
    if ((v34 & 0x10001) != 0)
    {
      objc_msgSend((id)v6, sel_setPresentationOptions_forRecipient_, v34, v33);
      specialized Set._Variant.insert(_:)(&v61, v33);
    }
    else
    {

      if ((v34 & 2) != 0) {
        uint64_t v31 = 2;
      }
    }
    ++v30;
  }
  while (v29 != v30);
LABEL_49:
  swift_bridgeObjectRelease();
  unint64_t v35 = swift_bridgeObjectRetain();
  unint64_t v36 = specialized _ArrayProtocol.filter(_:)(v35, &v62);
  PeoplePickerViewController.updatePresentationOptions(_:for:)(v31, v36);
  swift_bridgeObjectRelease();
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = specialized Set.count.getter(v37);
  swift_bridgeObjectRelease();
  if (v38 >= 1) {
    PeoplePickerViewController.setActionUnavailable()();
  }
  uint64_t v39 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation);
  if (!v39)
  {
    swift_bridgeObjectRelease();
LABEL_69:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v6 = v39;
  id v40 = objc_msgSend((id)v6, sel_link);

  if (!v40) {
    goto LABEL_68;
  }
  id v41 = objc_msgSend((id)v6, sel_otherInvitedHandles);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v42 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = specialized Set.count.getter(v42);
  swift_bridgeObjectRelease();
  if (v43 || v59 != 1) {
    goto LABEL_68;
  }
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v44 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v44 != 1 || !v29)
  {
LABEL_68:
    swift_bridgeObjectRelease();

    goto LABEL_69;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v28 & 0xC000000000000001) == 0, v28);
  if ((v28 & 0xC000000000000001) != 0)
  {
LABEL_84:
    id v45 = (id)MEMORY[0x1C87744F0](0, v28);
    goto LABEL_63;
  }
  id v45 = *(id *)(v28 + 32);
LABEL_63:
  id v13 = v45;
  swift_bridgeObjectRelease();
  if ((objc_msgSend(v13, sel_isGroup) & 1) != 0
    || *(void *)(*(void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses)
                 + 16) > 1uLL
    || (PeoplePickerViewController.isIDSLookupPendingForCurrentRecipients()() & 1) != 0)
  {
    goto LABEL_76;
  }
  uint64_t v46 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v13, (SEL *)&selRef_address);
  if (v47)
  {
    uint64_t v48 = (void *)MEMORY[0x1C87730B0](v46);
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v48 = 0;
LABEL_72:
  id v49 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (!v49)
  {
LABEL_76:
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  v53._uint64_t countAndFlagsBits = v50;
  v53._id object = v52;
  if (!PeoplePickerViewModel.isWebCapableAvailable(for:)(v53))
  {
    swift_bridgeObjectRelease();
    goto LABEL_78;
  }
  v54._uint64_t countAndFlagsBits = v50;
  v54._id object = v52;
  Swift::Bool v55 = PeoplePickerViewModel.isModernAvailable(for:)(v54);
  swift_bridgeObjectRelease();
  if (!v55)
  {
    PeoplePickerViewController.setActionUnavailable()();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C3769830;
    *(void *)(inited + 32) = v13;
    id v61 = (id)inited;
    specialized Array._endMutation()();
    unint64_t v57 = (unint64_t)v61;
    id v58 = v13;
    PeoplePickerViewController.reportIncompatibilityEvent(with:reason:recipients:)(3, 3, v57);
    swift_bridgeObjectRelease();

    goto LABEL_69;
  }
LABEL_78:
  swift_bridgeObjectRelease();
}

uint64_t PeoplePickerViewController.viewWillTransition(to:with:)(uint64_t a1, double a2, double a3)
{
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for PeoplePickerViewController();
  objc_msgSendSuper2(&v13, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)v3 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_linkShareCoordinator, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  if (!v12) {
    return outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  }
  outlined init with copy of Conversation((uint64_t)v11, (uint64_t)v10);
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  uint64_t v7 = OUTLINED_FUNCTION_34_9();
  v8(v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

Swift::Void __swiftcall PeoplePickerViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for PeoplePickerViewController();
  objc_msgSendSuper2(&v7, sel_viewDidDisappear_, a1);
  id v3 = objc_msgSend(v1, sel_presentedViewController);

  if (!v3)
  {
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x360))())
    {
      uint64_t v5 = v4;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
      swift_unknownObjectRelease();
    }
  }
}

Swift::Void __swiftcall PeoplePickerViewController.willDismissViewAnimated(_:)(Swift::Bool a1)
{
  id v3 = objc_msgSend(v1, sel_presentedViewController);
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, a1, 0);
  }
}

id PeoplePickerViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeoplePickerViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.delegate.getter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.delegate.setter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
}

uint64_t (*protocol witness for PeoplePickerViewControllerProtocol.delegate.modify in conformance PeoplePickerViewController(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x370))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.appName.getter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.appName.setter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
}

uint64_t (*protocol witness for PeoplePickerViewControllerProtocol.appName.modify in conformance PeoplePickerViewController(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x388))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.stagedActivity.getter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x390))();
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.stagedActivity.setter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t (*protocol witness for PeoplePickerViewControllerProtocol.stagedActivity.modify in conformance PeoplePickerViewController(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3A0))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.initialRecipientDestinations.getter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t protocol witness for PeoplePickerViewControllerProtocol.initialRecipientDestinations.setter in conformance PeoplePickerViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B0))();
}

uint64_t (*protocol witness for PeoplePickerViewControllerProtocol.initialRecipientDestinations.modify in conformance PeoplePickerViewController(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3B8))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

void PeoplePickerViewController.keyboardWillShow(notification:)(void *a1)
{
  if (!outlined bridged method (pb) of @objc NSNotification.userInfo.getter(a1))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    goto LABEL_6;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v12);
  if (!*((void *)&v14 + 1))
  {
LABEL_6:
    outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  if (swift_dynamicCast())
  {
    id v2 = v12[0];
    objc_msgSend(v12[0], sel_CGRectValue);
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;

    v15.origin.x = v4;
    v15.origin.CGFloat y = v6;
    v15.size.CGFloat width = v8;
    v15.size.CGFloat height = v10;
    float Height = CGRectGetHeight(v15);
    *(float *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_keyboardHeight) = Height;
    PeoplePickerViewController.updateState()();
  }
}

uint64_t PeoplePickerViewController.handleIDSStatusChanged(notification:)()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.info.getter();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  os_log(_:dso:log:type:_:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v16 = static OS_dispatch_queue.main.getter();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in PeoplePickerViewController.handleIDSStatusChanged(notification:);
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_23;
  double v3 = _Block_copy(aBlock);
  id v4 = v0;
  swift_release();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  CGFloat v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = v1;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1F41AAEE0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v13 = (void *)v16;
  MEMORY[0x1C8773BA0](0, v8, v12, v3);
  _Block_release(v3);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PeoplePickerViewController.cancelButtonTapped()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.info.getter();
  os_log(_:dso:log:type:_:)();
  return PeoplePickerViewController.handleCancel()();
}

uint64_t PeoplePickerViewController.handleCancel()()
{
  id v1 = PeoplePickerViewController.reset()();
  uint64_t result = (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))(v1);
  if (result)
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

id PeoplePickerViewController.reset()()
{
  uint64_t v1 = v0;
  PeoplePickerViewController.cancelQueries()();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSNumber]._Variant);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_possibleRecipients);
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1E4FBC870];
  *uint64_t v2 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_loggedInvalidRecipients);
  swift_beginAccess();
  *uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_idsDestinations);
  swift_beginAccess();
  *uint64_t v5 = v3;
  swift_bridgeObjectRelease();
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses) = v3;
  swift_bridgeObjectRelease();
  PeoplePickerViewController.currentConversationLink.setter(0);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_prepareForReuse);
}

uint64_t PeoplePickerViewController.startCall(videoEnabled:)(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessagesGroup?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&ObjectType - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel];
  swift_beginAccess();
  PeoplePickerViewController.reportIncompatibilityEvent(with:reason:)(*(unsigned char *)(v6 + 16), 0);
  id v7 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = v1;
  unint64_t v10 = specialized Sequence.flatMap<A>(_:)(v8, v9);
  uint64_t v11 = swift_bridgeObjectRelease();
  uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
  if (!(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x360))(v11)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = v13;
  uint64_t v15 = &OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_videoButton;
  unsigned int v22 = a1 & 1;
  if ((a1 & 1) == 0) {
    uint64_t v15 = &OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_audioButton;
  }
  uint64_t v16 = *(void **)&v9[*v15];
  uint64_t ObjectType = swift_getObjectType();
  id v17 = *(uint64_t (**)(void))((*v12 & *(void *)v9) + 0x2C8);
  id v18 = v16;
  uint64_t v19 = (void *)v17();
  CNAutocompleteSearchController.messagesGroup.getter((uint64_t)v5);
  (*(void (**)(unint64_t, void, id, void *, char *, uint64_t, uint64_t))(v14 + 24))(v10, v22, v18, v19, v5, ObjectType, v14);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for MessagesGroup?);
}

id PeoplePickerViewController.reportIncompatibilityEvent(with:reason:)(char a1, uint64_t a2)
{
  id v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_reporter);
  uint64_t v9 = *off_1E6482DA0[a1];
  return objc_msgSend(v8, v9, v7, a2);
}

void PeoplePickerViewController.addPeople()()
{
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = OUTLINED_FUNCTION_41_7();

  uint64_t v3 = v0;
  unint64_t v4 = specialized Sequence.flatMap<A>(_:)(v2, v3);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  if (one-time initialization token for peoplePicker != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v100 = __swift_project_value_buffer(v6, (uint64_t)static Logger.peoplePicker);
  uint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v8))
  {
    uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v9);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v10, v11, "Add people.");
    OUTLINED_FUNCTION_3();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v12;
  v13[3] = v4;
  v13[4] = v5;
  uint64_t v14 = *(void **)&v3[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation];
  if (v14)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v15 = v14;
    id v16 = objc_msgSend(v15, sel_link);

    uint64_t v97 = v3;
    uint64_t v99 = v15;
    if (!v16)
    {
      swift_bridgeObjectRelease();
LABEL_28:
      uint64_t v33 = (void *)Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_12(v34))
      {
        unint64_t v35 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_22_1(v35);
        OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v36, v37, "shouldAddOtherInvitedToRemoteMembers = false");
        id v15 = v99;
        OUTLINED_FUNCTION_3();
      }

LABEL_31:
      uint64_t v98 = v5;
      id v38 = objc_msgSend(v15, sel_messagesGroupUUID);
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v40 = OUTLINED_FUNCTION_8(v39);
      uint64_t v42 = *(void *)(v41 + 64);
      MEMORY[0x1F4188790](v40);
      if (v38)
      {
        uint64_t v43 = type metadata accessor for UUID();
        v95[0] = v95;
        OUTLINED_FUNCTION_5_3();
        uint64_t v44 = v12;
        id v45 = v13;
        unint64_t v46 = v4;
        uint64_t v48 = v47;
        MEMORY[0x1F4188790](v49);
        uint64_t v51 = (char *)v95 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, char *, uint64_t))(v48 + 32))((char *)v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), v51, v43);
        unint64_t v4 = v46;
        uint64_t v13 = v45;
        uint64_t v12 = v44;
        __swift_storeEnumTagSinglePayload((uint64_t)v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v43);
        uint64_t v52 = v43;
        id v15 = v99;
        if (__swift_getEnumTagSinglePayload((uint64_t)v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v52) != 1)
        {
          outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if ((PeoplePickerViewController.currentConversationIsAVLess.getter() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            Swift::String v53 = (void *)Logger.logObject.getter();
            os_log_type_t v54 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_2_12(v54))
            {
              Swift::Bool v55 = (_WORD *)OUTLINED_FUNCTION_8_0();
              OUTLINED_FUNCTION_22_1(v55);
              OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v56, v57, "calling PlatformAlert.confirmAddToMessagesGroup");
              id v15 = v99;
              OUTLINED_FUNCTION_3();
            }

            type metadata accessor for PlatformAlert();
            swift_retain();
            uint64_t v58 = OUTLINED_FUNCTION_35();
            specialized static PlatformAlert.confirmAddToMessagesGroup(fromViewController:_:)(v58, v59, v60, (uint64_t)v13);
            swift_release();
            swift_release();

LABEL_49:
            OUTLINED_FUNCTION_28();
            return;
          }
LABEL_39:
          v95[1] = v13;
          unint64_t v96 = v4;
          id v62 = v15;
          id v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = (uint8_t *)swift_slowAlloc();
            uint64_t v66 = swift_slowAlloc();
            uint64_t v99 = v95;
            uint64_t v100 = v66;
            uint64_t v103 = v66;
            *(_DWORD *)uint64_t v65 = 136315138;
            MEMORY[0x1F4188790](v66);
            unint64_t v67 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v68 = (char *)v95 - v67;
            id v69 = objc_msgSend(v62, sel_messagesGroupUUID);
            uint64_t v97 = v95;
            uint64_t v70 = (char *)v95 - v67;
            if (MEMORY[0x1F4188790](v69))
            {
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v71 = type metadata accessor for UUID();
              uint64_t v72 = (char *)v95 - v67;
              uint64_t v73 = 0;
            }
            else
            {
              uint64_t v71 = type metadata accessor for UUID();
              uint64_t v72 = (char *)v95 - v67;
              uint64_t v73 = 1;
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v72, v73, 1, v71);
            _sypSgWObTm_0((uint64_t)v95 - v67, (uint64_t)v95 - v67, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            type metadata accessor for UUID();
            if (__swift_getEnumTagSinglePayload((uint64_t)v95 - v67, 1, v71))
            {
              outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v95 - v67, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              unint64_t v74 = 0xE300000000000000;
              uint64_t v75 = 7104878;
            }
            else
            {
              v95[0] = v95;
              OUTLINED_FUNCTION_5_3();
              uint64_t v77 = v76;
              MEMORY[0x1F4188790](v78);
              OUTLINED_FUNCTION_16_0();
              (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v70, v68, v71);
              outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              uint64_t v79 = UUID.uuidString.getter();
              uint64_t v81 = v80;
              (*(void (**)(char *, uint64_t))(v77 + 8))(v70, v71);
              uint64_t v101 = v79;
              uint64_t v102 = v81;
              uint64_t v75 = String.init<A>(reflecting:)();
              unint64_t v74 = v82;
            }
            uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v74, &v103);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C2F90000, v63, v64, "non-avless conversation messagesGroupUUID: %s", v65, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }
          else
          {
          }
          closure #1 in PeoplePickerViewController.addPeople()(v12, v96, v98);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v61 = type metadata accessor for UUID();
        __swift_storeEnumTagSinglePayload((uint64_t)v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v61);
      }
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_39;
    }
    id v17 = objc_msgSend(v15, sel_otherInvitedHandles);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = specialized Set.count.getter(v18);
    swift_bridgeObjectRelease();
    if (v19 >= 1)
    {
      if (v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v20 == 1
        && *(void *)(*(void *)((char *)v97
                                 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses)
                     + 16) <= 1uLL)
      {
        if (v2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v32)
          {
LABEL_14:
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2);
            if ((v2 & 0xC000000000000001) != 0) {
              id v21 = (id)MEMORY[0x1C87744F0](0, v2);
            }
            else {
              id v21 = *(id *)(v2 + 32);
            }
            unsigned int v22 = v21;
            swift_bridgeObjectRelease();
            if (objc_msgSend(v22, sel_isGroup)) {
              goto LABEL_56;
            }
            uint64_t v23 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v22, (SEL *)&selRef_address);
            if (v24)
            {
              uint64_t v25 = (void *)MEMORY[0x1C87730B0](v23);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v25 = 0;
            }
            id v83 = (id)TUCopyIDSCanonicalAddressForDestinationID();

            if (!v83)
            {
LABEL_56:
            }
            else
            {
              uint64_t v84 = v22;
              uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v87 = v86;

              v88._uint64_t countAndFlagsBits = v85;
              v88._id object = v87;
              Swift::Bool v89 = PeoplePickerViewModel.isWebCapableAvailable(for:)(v88);
              swift_bridgeObjectRelease();
              if (v89)
              {
                uint64_t v90 = (void *)Logger.logObject.getter();
                os_log_type_t v91 = static os_log_type_t.default.getter();
                if (OUTLINED_FUNCTION_2_12(v91))
                {
                  uint64_t v92 = (_WORD *)OUTLINED_FUNCTION_8_0();
                  OUTLINED_FUNCTION_22_1(v92);
                  OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v93, v94, "shouldAddOtherInvitedToRemoteMembers = true");
                  OUTLINED_FUNCTION_3();
                }

                OUTLINED_FUNCTION_11_0();
                *(unsigned char *)(v5 + 16) = 1;
                id v15 = v99;
                goto LABEL_31;
              }
            }
            goto LABEL_27;
          }
        }
        else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_14;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_27:
    id v15 = v99;
    goto LABEL_28;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  Swift::OpaquePointer v26 = (void *)Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v27))
  {
    unint64_t v28 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v28);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v29, v30, "currentConversation is nil.");
    OUTLINED_FUNCTION_3();
  }

  closure #1 in PeoplePickerViewController.addPeople()(v12, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28();
  swift_release();
}

void closure #1 in PeoplePickerViewController.addPeople()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (one-time initialization token for peoplePicker != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.peoplePicker);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C2F90000, v9, v10, "Did add people.", v11, 2u);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }

    uint64_t v12 = *(void *)((char *)v7 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel);
    swift_beginAccess();
    id v13 = PeoplePickerViewController.reportIncompatibilityEvent(with:reason:)(*(unsigned char *)(v12 + 16), 1);
    if ((*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x360))(v13))
    {
      uint64_t v15 = v14;
      uint64_t ObjectType = swift_getObjectType();
      swift_beginAccess();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 32))(a2, *(unsigned __int8 *)(a3 + 16), ObjectType, v15);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t closure #2 in PeoplePickerViewController.addPeople()(uint64_t result, uint64_t (*a2)(void))
{
  if (result) {
    return a2();
  }
  return result;
}

void PeoplePickerViewController.dialTelephonyCall(handle:rttType:)(void *a1, char a2)
{
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel];
  swift_beginAccess();
  PeoplePickerViewController.reportIncompatibilityEvent(with:reason:)(*(unsigned char *)(v5 + 16), 0);
  id v6 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = v2;
  unint64_t v9 = specialized Sequence.flatMap<A>(_:)(v7, v8);
  swift_bridgeObjectRelease();
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_3:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v9 & 0xC000000000000001) == 0, v9);
      if ((v9 & 0xC000000000000001) != 0) {
        uint64_t v11 = (char *)MEMORY[0x1C87744F0](0, v9);
      }
      else {
        uint64_t v11 = (char *)*(id *)(v9 + 32);
      }
      uint64_t v12 = v11;
      uint64_t v13 = swift_bridgeObjectRelease_n();
      uint64_t v14 = qword_1C376FBB0[a2];
      uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
      if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v8) + 0x360))(v13))
      {
        uint64_t v17 = v16;
        id v18 = objc_msgSend(self, sel_sharedInstance);
        id v19 = objc_msgSend(v18, sel_providerManager);

        id v20 = objc_msgSend(v19, sel_telephonyProvider);
        uint64_t v29 = *(void *)&v12[OBJC_IVAR____TtC15ConversationKit14PickablePerson_contact];
        uint64_t v30 = v12;
        if (a1)
        {
          id v21 = a1;
          id v22 = a1;
        }
        else
        {
          id v21 = 0;
          id v22 = *(id *)&v12[OBJC_IVAR____TtC15ConversationKit14PickablePerson_handle];
        }
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v24 = (void *)(*(uint64_t (**)(void *))((*v15 & *(void *)v8) + 0x2C8))(v21);
        (*(void (**)(id, void, uint64_t, id, void *, uint64_t, uint64_t, uint64_t))(v17 + 40))(v20, 0, v29, v22, v24, v14, ObjectType, v17);

        swift_unknownObjectRelease();
      }
      else
      {
      }
      return;
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1C3769620;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PickablePerson]);
  uint64_t v26 = String.init<A>(reflecting:)();
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v25 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

void PeoplePickerViewController.setUpSearchControllerFooterView(containerView:)()
{
  id v1 = v0;
  unint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  char v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C8))();
  id v4 = objc_allocWithZone((Class)type metadata accessor for PeoplePickerActionBar());
  uint64_t v5 = PeoplePickerActionBar.init(frame:buttonsStyle:)(v3);
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v6 = *(void (**)(uint64_t, _UNKNOWN **))((*v2 & *(void *)v5) + 0x128);
  uint64_t v7 = swift_unknownObjectRetain();
  v6(v7, &protocol witness table for PeoplePickerViewController);
  uint64_t v8 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
  objc_msgSend(v8, sel_setFooterView_, v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769610;
  id v10 = objc_msgSend(v5, sel_leadingAnchor);
  id v11 = objc_msgSend(v8, sel_view);
  if (!v11)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v12 = v11;
  id v13 = objc_msgSend(v11, sel_leadingAnchor);

  id v14 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v13);
  *(void *)(v9 + 32) = v14;
  id v15 = objc_msgSend(v5, sel_trailingAnchor);
  id v16 = objc_msgSend(v8, sel_view);
  if (!v16)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v17 = v16;
  id v18 = self;
  id v19 = objc_msgSend(v17, sel_trailingAnchor);

  id v20 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v19);
  *(void *)(v9 + 40) = v20;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_activateConstraints_, isa);

  id v22 = v5;
  PeoplePickerViewController.actionBar.setter((uint64_t)v5);
}

void PeoplePickerViewController.activeParticipantsAddresses()()
{
  void v25[2] = MEMORY[0x1E4FBC870];
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation);
  if (v1)
  {
    id v23 = v1;
    id v2 = objc_msgSend(v23, sel_activeRemoteParticipants);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v3 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v3 = v25[3];
      uint64_t v24 = v25[4];
      uint64_t v4 = v25[5];
      int64_t v5 = v25[6];
      unint64_t v6 = v25[7];
    }
    else
    {
      int64_t v5 = 0;
      uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
      uint64_t v24 = v3 + 56;
      uint64_t v4 = ~v7;
      uint64_t v8 = -v7;
      if (v8 < 64) {
        uint64_t v9 = ~(-1 << v8);
      }
      else {
        uint64_t v9 = -1;
      }
      unint64_t v6 = v9 & *(void *)(v3 + 56);
    }
    int64_t v10 = (unint64_t)(v4 + 64) >> 6;
    if (v3 < 0) {
      goto LABEL_11;
    }
LABEL_9:
    if (v6)
    {
      uint64_t v11 = (v6 - 1) & v6;
      unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
      int64_t v13 = v5;
      goto LABEL_28;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return;
    }
    if (v15 >= v10) {
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v15);
    int64_t v13 = v5 + 1;
    if (!v16)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v10) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v24 + 8 * v13);
      if (v16) {
        goto LABEL_27;
      }
      int64_t v13 = v5 + 3;
      if (v5 + 3 >= v10) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v24 + 8 * v13);
      if (v16) {
        goto LABEL_27;
      }
      int64_t v13 = v5 + 4;
      if (v5 + 4 >= v10)
      {
LABEL_34:
        outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();

        return;
      }
      unint64_t v16 = *(void *)(v24 + 8 * v13);
      if (!v16)
      {
        int64_t v17 = v5 + 5;
        while (v17 < v10)
        {
          unint64_t v16 = *(void *)(v24 + 8 * v17++);
          if (v16)
          {
            int64_t v13 = v17 - 1;
            goto LABEL_27;
          }
        }
        goto LABEL_34;
      }
    }
LABEL_27:
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_28:
    id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
    if (v14)
    {
      while (1)
      {
        id v18 = objc_msgSend(v14, sel_handle);
        id v19 = objc_msgSend(v18, sel_value);

        if (!v19)
        {
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v19 = (id)MEMORY[0x1C87730B0](v20);
          swift_bridgeObjectRelease();
        }
        uint64_t v21 = outlined bridged method (ob) of @objc NSString._im_normalizedURI()(v19);
        if (!v22) {
          goto LABEL_37;
        }
        specialized Set._Variant.insert(_:)(v25, v21, v22);

        swift_bridgeObjectRelease();
        int64_t v5 = v13;
        unint64_t v6 = v11;
        if ((v3 & 0x8000000000000000) == 0) {
          goto LABEL_9;
        }
LABEL_11:
        if (__CocoaSet.Iterator.next()())
        {
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v14 = (id)v25[0];
          swift_unknownObjectRelease();
          int64_t v13 = v5;
          uint64_t v11 = v6;
          if (v14) {
            continue;
          }
        }
        goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
}

void PeoplePickerViewController.currentRecipientsAddresses()()
{
  uint64_t v15 = MEMORY[0x1E4FBC870];
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x1C87744F0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      unint64_t v6 = v5;
      uint64_t v7 = *(void *)(CNComposeRecipient.normalizedAddresses()() + 16);
      swift_bridgeObjectRelease();
      if (v7)
      {
        uint64_t v8 = CNComposeRecipient.normalizedAddresses()();
        uint64_t v9 = specialized Set.init<A>(_:)(v8);
        specialized Set.union<A>(_:)(v9);
        uint64_t v11 = v10;

        uint64_t v15 = v11;
      }
      else
      {
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        specialized Set._Variant.insert(_:)(v14, v12, v13);

        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
  }
}

void PeoplePickerViewController.updateActionBarState()()
{
  id v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar);
  if (!v1) {
    return;
  }
  unint64_t v2 = v0;
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
  uint64_t v4 = v1;
  id v5 = objc_msgSend(v3, sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == 1)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = 0;
LABEL_8:
        uint64_t v7 = 1;
        goto LABEL_13;
      }
LABEL_5:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0, v6);
      if ((v6 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1C87744F0](0, v6);
      }
      else {
        id v8 = *(id *)(v6 + 32);
      }
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      uint64_t v10 = CNComposeRecipient.tuHandle.getter();

      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7 == 1)
    {
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }
  }
  uint64_t v10 = 0;
LABEL_13:
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x158))(v10);
  if (!v7) {
    goto LABEL_20;
  }
  if (PeoplePickerViewController.isIDSLookupPendingForCurrentRecipients()()) {
    goto LABEL_20;
  }
  if (PeoplePickerViewController.recipientsIncludeInvalidAddresses()()) {
    goto LABEL_20;
  }
  swift_beginAccess();
  uint64_t v12 = swift_bridgeObjectRetain();
  PeoplePickerViewController.isCallAllowed(policy:)(v12);
  char v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0
    || v7 >= 2
    && (id v15 = objc_msgSend(self, sel_sharedInstance)) != 0
    && (unint64_t v16 = v15, v17 = objc_msgSend(v15, sel_isGreenTea), v16, v17))
  {
LABEL_20:
    swift_bridgeObjectRelease();
    (*(void (**)(void))((*v11 & *v4) + 0x188))(0);
  }
  else
  {
    uint64_t v18 = *(void *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel);
    swift_beginAccess();
    int v19 = *(unsigned __int8 *)(v18 + 16);
    char v35 = PeoplePickerViewController.isAudioAllowedForCurrentRecipients()();
    char v20 = PeoplePickerViewController.isMultiwayAllowedForCurrentRecipients()();
    char v21 = PeoplePickerViewController.isVideoAllowedForCurrentRecipients()();
    PeoplePickerViewController.isAVLessSharePlayAllowedForCurrentRecipients()();
    char v23 = v22;
    if (v19 == 3)
    {
      (*(void (**)(uint64_t))((*v11 & *v4) + 0x140))(3);
      PeoplePickerViewController.reportIncompatibilityEvent(with:reason:recipients:)(3, 4, v6);
      swift_bridgeObjectRelease();
      uint64_t v26 = 0;
    }
    else if (v19)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))((*v11 & *v4) + 0x140))(3);
      uint64_t v26 = 0x10000;
    }
    else
    {
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v25 = (*(uint64_t (**)(uint64_t))((*v11 & *v2) + 0x3C8))(v24);
      (*(void (**)(uint64_t))((*v11 & *v4) + 0x140))(v25);
      if (v21) {
        uint64_t v26 = 0x10000;
      }
      else {
        uint64_t v26 = 0;
      }
    }
    char v27 = PeoplePickerViewController.isTelephonyAllowedForCurrentState()();
    uint64_t v28 = 0x100000000;
    if ((v23 & 1) == 0) {
      uint64_t v28 = 0;
    }
    uint64_t v29 = 0x1000000;
    if ((v20 & 1) == 0) {
      uint64_t v29 = 0;
    }
    uint64_t v30 = 256;
    if ((v35 & 1) == 0) {
      uint64_t v30 = 0;
    }
    (*(void (**)(uint64_t))((*v11 & *v4) + 0x188))(v29 | v30 | v28 | v26 | v27 & 1);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1C3769620;
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v31 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

void PeoplePickerViewController.updateHelpText()()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
  id v2 = objc_msgSend(v1, sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 < 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = PeoplePickerViewController.isIDSLookupPendingForCurrentRecipients()();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if ((unint64_t)v4 < 2
        || (id v6 = objc_msgSend(self, sel_sharedInstance)) == 0
        || (uint64_t v7 = v6, v8 = objc_msgSend(v6, sel_isGreenTea), v7, (v8 & 1) == 0))
      {
        uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel);
        swift_beginAccess();
        int v10 = *(unsigned __int8 *)(v9 + 16);
        if ((v10 - 1) >= 2)
        {
          char v14 = 0;
          if (!v10)
          {
LABEL_17:
            objc_msgSend(v1, sel_setComposeFieldInfoText_, v14);

            return;
          }
          id v15 = objc_msgSend(self, sel_conversationKit);
          v21._id object = (void *)0xE000000000000000;
          v16._id object = (void *)0x80000001C37998F0;
          v16._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
          v17.value._id object = (void *)0xEF74694B6E6F6974;
          v18._uint64_t countAndFlagsBits = 0;
          v18._id object = (void *)0xE000000000000000;
          v21._uint64_t countAndFlagsBits = 0;
          Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v21);
          uint64_t countAndFlagsBits = v19._countAndFlagsBits;
          id object = v19._object;
        }
        else
        {
          uint64_t countAndFlagsBits = PeoplePickerViewController.webInviteeExplanation()();
          id object = v12;
        }
        char v14 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
  }
  objc_msgSend(v1, sel_setComposeFieldInfoText_, 0);
}

unint64_t PeoplePickerViewController.tintColor(for:isChild:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  if (objc_msgSend(a1, sel_isGroup))
  {
    uint64_t v6 = (uint64_t)objc_retain(*(id *)(v2
                                    + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_availableRecipientTintColor));
    unint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.children()(a1);
    if (result)
    {
      unint64_t v8 = result;
      if (result >> 62) {
        goto LABEL_43;
      }
      for (uint64_t i = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
      {
        uint64_t v39 = (void *)v6;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        uint64_t v6 = 4;
        uint64_t v10 = v3;
        while (1)
        {
          id v11 = (v8 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x1C87744F0](v6 - 4, v8)
              : *(id *)(v8 + 8 * v6);
          uint64_t v12 = v11;
          uint64_t v13 = v6 - 3;
          if (__OFADD__(v6 - 4, 1)) {
            break;
          }
          uint64_t v14 = PeoplePickerViewController.tintColor(for:isChild:)(v11, 1);
          if (static NSObject.== infix(_:_:)())
          {

            id v15 = v39;
            uint64_t v39 = (void *)v14;
          }
          else
          {
            char v16 = static NSObject.== infix(_:_:)();

            if (v16)
            {

              swift_bridgeObjectRelease();
              return v14;
            }
            id v15 = (void *)v14;
          }

          ++v6;
          uint64_t v3 = v10;
          if (v13 == i)
          {
            swift_bridgeObjectRelease();
            return (unint64_t)v39;
          }
        }
        __break(1u);
LABEL_43:
        ;
      }
      swift_bridgeObjectRelease();
      return v6;
    }
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v17 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a1, (SEL *)&selRef_address);
  if (v18)
  {
    Swift::String v19 = (void *)MEMORY[0x1C87730B0](v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v19 = 0;
  }
  id v20 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (!v20) {
    goto LABEL_22;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v23 = v22;

  if (!PeoplePickerViewController.isIDSLookupPending(for:)(v21, (uint64_t)v23))
  {
    unint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a1, (SEL *)&selRef_address);
    if (!v26)
    {
LABEL_48:
      __break(1u);
      return result;
    }
    char v27 = (void *)MEMORY[0x1C87730B0](result);
    swift_bridgeObjectRelease();
    unsigned int v28 = objc_msgSend(v27, sel_destinationIdIsPhoneNumber);

    uint64_t v29 = &OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_gondolaRecipientTintColor;
    if (!v28) {
      uint64_t v29 = &OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_unavailableRecipientTintColor;
    }
    uint64_t v30 = *(void **)(v3 + *v29);
    if (a2)
    {
      id v31 = v30;
    }
    else
    {
      uint64_t v32 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
      uint64_t v6 = v30;
      id v33 = objc_msgSend(v32, sel_recipients);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
      unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v34 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v35 <= 0 && *(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) != 1)
      {
        BOOL v38 = PeoplePickerViewController.isFaceTimeAvailable(for:)(v21, v23);
        swift_bridgeObjectRelease();
        if (v38)
        {

          goto LABEL_38;
        }
        return v6;
      }
    }
    v36._uint64_t countAndFlagsBits = v21;
    v36._id object = v23;
    Swift::Bool v37 = PeoplePickerViewModel.isMultiwayAvailable(for:)(v36);
    swift_bridgeObjectRelease();
    if (v37)
    {

LABEL_38:
      uint64_t v24 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_availableRecipientTintColor;
      goto LABEL_23;
    }
    return (unint64_t)v30;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v24 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_unavailableRecipientTintColor;
LABEL_23:
  uint64_t v25 = *(void **)(v3 + v24);
  return (unint64_t)v25;
}

id PeoplePickerViewController.preferredRecipient(for:)(void *a1)
{
  uint64_t v2 = v1;
  if (objc_msgSend(a1, sel_isGroup)) {
    return a1;
  }
  unint64_t v4 = outlined bridged method (pb) of @objc CNComposeRecipient.children()(a1);
  if (!v4) {
    return a1;
  }
  unint64_t v5 = v4;
  if (v4 >> 62) {
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 < 2)
  {
    swift_bridgeObjectRelease();
    return a1;
  }
  if (one-time initialization token for peoplePickerAutocomplete != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.peoplePickerAutocomplete);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  id v11 = &unk_1C3768000;
  uint64_t v81 = v8;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    v85[0] = v83;
    *(_DWORD *)uint64_t v12 = 136315138;
    v86[0] = v8;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    id v13 = v8;
    uint64_t v14 = String.init<A>(reflecting:)();
    v86[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v11 = (void *)&unk_1C3768000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v9, v10, "Find preferred recepient for %s.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v83, -1, -1);
    MEMORY[0x1C87760E0](v12, -1, -1);
  }
  else
  {
  }
  v85[0] = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v19 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v20 = (id)MEMORY[0x1C87744F0](v19, v5);
    }
    else {
      id v20 = *(id *)(v5 + 8 * v19 + 32);
    }
    id v21 = v20;
    ++v19;
    type metadata accessor for RecipientResultWrapper();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 24) = xmmword_1C376E330;
    *(void *)(v22 + 16) = v21;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v6 != v19);
  unint64_t v23 = v85[0];
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v26 > 0 || v2[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style] == 1)
  {
    char v27 = (uint64_t (*)(uint64_t))partial apply for implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:);
    char v28 = 1;
  }
  else
  {
    char v28 = 0;
    char v27 = (uint64_t (*)(uint64_t))partial apply for implicit closure #6 in implicit closure #5 in PeoplePickerViewController.preferredRecipient(for:);
  }
  *(void *)(swift_allocObject() + 16) = v2;
  uint64_t v29 = v2;
  uint64_t v30 = specialized Sequence.first(where:)(v23, v27);
  swift_release();
  if (v30)
  {
    swift_bridgeObjectRelease();
    swift_retain_n();
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v86[0] = (id)v34;
      *(_DWORD *)id v33 = v11[454];
      uint64_t v35 = RecipientResultWrapper.idsHandle.getter();
      if (v36)
      {
        v85[0] = v35;
        v85[1] = v36;
        uint64_t v37 = String.init<A>(reflecting:)();
        unint64_t v39 = v38;
      }
      else
      {
        unint64_t v39 = 0xE300000000000000;
        uint64_t v37 = 7104878;
      }
      v85[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v31, v32, "Return duet handle %s.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v34, -1, -1);
      MEMORY[0x1C87760E0](v33, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    id v17 = *(id *)(v30 + 16);
LABEL_72:
    swift_release();
    return v17;
  }
  if (v23 >> 62)
  {
    uint64_t v72 = v29;
    unint64_t v73 = swift_bridgeObjectRetain();
    uint64_t v40 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v73);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = v23 & 0xFFFFFFFFFFFFFF8;
    uint64_t v41 = v29;
    swift_bridgeObjectRetain();
  }
  v85[0] = v40;
  specialized MutableCollection<>.sort(by:)(v85, v28, v29);
  uint64_t v42 = v85[0];
  swift_bridgeObjectRetain();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  uint64_t v84 = v42;
  if (os_log_type_enabled(v43, v44))
  {
    id v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    v85[0] = v76;
    os_log_t log = v43;
    *(_DWORD *)id v45 = v11[454];
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v46 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v47 = MEMORY[0x1E4FBC860];
    if (v46)
    {
      v86[0] = (id)MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v46 < 0)
      {
        __break(1u);
        goto LABEL_81;
      }
      uint64_t v48 = 0;
      uint64_t v47 = (uint64_t)v86[0];
      do
      {
        if ((v23 & 0xC000000000000001) != 0) {
          MEMORY[0x1C87744F0](v48, v23);
        }
        else {
          swift_retain();
        }
        uint64_t v49 = RecipientResultWrapper.idsHandle.getter();
        uint64_t v51 = v50;
        swift_release();
        v86[0] = (id)v47;
        unint64_t v52 = *(void *)(v47 + 16);
        if (v52 >= *(void *)(v47 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = (uint64_t)v86[0];
        }
        ++v48;
        *(void *)(v47 + 16) = v52 + 1;
        uint64_t v53 = v47 + 16 * v52;
        *(void *)(v53 + 32) = v49;
        *(void *)(v53 + 40) = v51;
      }
      while (v46 != v48);
    }
    v86[0] = (id)v47;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String?]);
    uint64_t v54 = String.init<A>(reflecting:)();
    v86[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, log, v44, "Unsorted handles: %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v76, -1, -1);
    MEMORY[0x1C87760E0](v45, -1, -1);

    id v11 = &unk_1C3768000;
    uint64_t v42 = v84;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v56, v57))
  {

    swift_release_n();
    uint64_t v68 = v42 & 0x4000000000000000;
    goto LABEL_67;
  }
  os_log_type_t v78 = v57;
  uint64_t v58 = (uint8_t *)swift_slowAlloc();
  uint64_t v77 = swift_slowAlloc();
  v85[0] = v77;
  logCGFloat a = v58;
  *(_DWORD *)uint64_t v58 = v11[454];
  if (v42 < 0 || (v42 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v59 = *(void *)(v42 + 16);
  }
  uint64_t v60 = MEMORY[0x1E4FBC860];
  uint64_t v82 = v42 & 0x4000000000000000;
  if (!v59)
  {
LABEL_66:
    v86[0] = (id)v60;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String?]);
    uint64_t v69 = String.init<A>(reflecting:)();
    v86[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v56, v78, "Sorted handles: %s", loga, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v77, -1, -1);
    MEMORY[0x1C87760E0](loga, -1, -1);

    uint64_t v68 = v82;
LABEL_67:
    if (v42 < 0 || v68)
    {
      swift_bridgeObjectRetain();
      uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v74) {
        goto LABEL_70;
      }
    }
    else if (*(void *)(v42 + 16))
    {
LABEL_70:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v42 & 0xC000000000000001) == 0, v42);
      if ((v42 & 0xC000000000000001) != 0)
      {
        uint64_t v75 = MEMORY[0x1C87744F0](0, v42);
        swift_release();
        id v17 = *(id *)(v75 + 16);
        swift_unknownObjectRelease();
        return v17;
      }
      uint64_t v71 = *(void *)(v42 + 32);
      swift_retain();
      swift_release();
      id v17 = *(id *)(v71 + 16);
      goto LABEL_72;
    }
    swift_release();
    return v81;
  }
  v86[0] = (id)MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v59 & 0x8000000000000000) == 0)
  {
    uint64_t v61 = 0;
    uint64_t v60 = (uint64_t)v86[0];
    unint64_t v62 = v42 & 0xC000000000000001;
    do
    {
      if (v62) {
        MEMORY[0x1C87744F0](v61, v42);
      }
      else {
        swift_retain();
      }
      uint64_t v63 = RecipientResultWrapper.idsHandle.getter();
      uint64_t v65 = v64;
      swift_release();
      v86[0] = (id)v60;
      unint64_t v66 = *(void *)(v60 + 16);
      if (v66 >= *(void *)(v60 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v60 = (uint64_t)v86[0];
      }
      ++v61;
      *(void *)(v60 + 16) = v66 + 1;
      uint64_t v67 = v60 + 16 * v66;
      *(void *)(v67 + 32) = v63;
      *(void *)(v67 + 40) = v65;
      uint64_t v42 = v84;
    }
    while (v59 != v61);
    goto LABEL_66;
  }
LABEL_81:
  __break(1u);
  id result = (id)swift_release();
  __break(1u);
  return result;
}

unint64_t PeoplePickerViewController.presentationOptions(for:)(void *a1)
{
  unint64_t v4 = v1;
  unint64_t v5 = (unint64_t)a1;
  if (objc_msgSend(a1, sel_isGroup))
  {
    unint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.children()((void *)v5);
    if (result)
    {
      unint64_t v5 = result;
      if (result >> 62)
      {
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        if (v7) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v7 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v7)
        {
LABEL_5:
          if (v7 >= 1)
          {
            uint64_t v8 = 0;
            uint64_t v9 = 0;
            do
            {
              if ((v5 & 0xC000000000000001) != 0) {
                id v10 = (id)MEMORY[0x1C87744F0](v9, v5);
              }
              else {
                id v10 = *(id *)(v5 + 8 * v9 + 32);
              }
              id v11 = v10;
              ++v9;
              uint64_t v12 = PeoplePickerViewController.presentationOptions(for:)();

              if ((v12 & ~v8) != 0) {
                uint64_t v13 = v12;
              }
              else {
                uint64_t v13 = 0;
              }
              v8 |= v13;
            }
            while (v7 != v9);
            swift_bridgeObjectRelease();
            return v8;
          }
          __break(1u);
          goto LABEL_52;
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v14 = CNComposeRecipient.normalizedAddresses()();
  PeoplePickerViewController.currentRecipientsAddresses()();
  uint64_t v16 = v15;
  uint64_t v17 = swift_bridgeObjectRetain();
  specialized Set.union<A>(_:)(v17, v16);
  uint64_t v18 = PeoplePickerViewController.callFilterPolicy(for:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    uint64_t v47 = (void *)v5;
    id v20 = (uint64_t *)(v14 + 40);
    while (1)
    {
      if (*(void *)(v18 + 16))
      {
        uint64_t v21 = *(v20 - 1);
        uint64_t v22 = *v20;
        swift_bridgeObjectRetain();
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
        if (v24)
        {
          id v25 = *(id *)(*(void *)(v18 + 56) + 8 * v23);
          swift_bridgeObjectRelease();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
          unsigned __int8 v27 = objc_msgSend(v25, sel_isEqualToNumber_, isa);

          if (v27)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1C3769830;
            *(void *)(inited + 32) = v47;
            unint64_t v48 = inited;
            specialized Array._endMutation()();
            id v43 = v47;
            PeoplePickerViewController.reportIncompatibilityEvent(with:reason:recipients:)(3, 5, v48);
            swift_bridgeObjectRelease();

            return 8193;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      v20 += 2;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        unint64_t v5 = (unint64_t)v47;
        goto LABEL_25;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t v28 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter((void *)v5, (SEL *)&selRef_address);
  if (v29)
  {
    uint64_t v30 = (void *)MEMORY[0x1C87730B0](v28);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = 0;
  }
  id v31 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (!v31) {
    return 1;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v32;

  if (PeoplePickerViewController.isIDSLookupPending(for:)(v7, (uint64_t)v2))
  {
    swift_bridgeObjectRelease();
    unint64_t result = (unint64_t)objc_msgSend(v4, sel_view);
    if (result)
    {
      id v33 = (void *)result;
      id v34 = objc_msgSend((id)result, sel_effectiveUserInterfaceLayoutDirection);

      if (v34 == (id)1) {
        return 66048;
      }
      else {
        return 65540;
      }
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  unint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter((void *)v5, (SEL *)&selRef_address);
  if (v35)
  {
    uint64_t v36 = (void *)MEMORY[0x1C87730B0](result);
    swift_bridgeObjectRelease();
    unsigned __int8 v3 = objc_msgSend(v36, sel_destinationIdIsPhoneNumber);

    id v37 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v38 >> 62))
    {
      uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_37;
    }
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_37:
    swift_bridgeObjectRelease();
    if (v39 > 1 || v4[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style] == 1)
    {
      v40._uint64_t countAndFlagsBits = v7;
      v40._id object = v2;
      Swift::Bool v41 = PeoplePickerViewModel.isMultiwayAvailable(for:)(v40);
    }
    else
    {
      Swift::Bool v41 = PeoplePickerViewController.isFaceTimeAvailable(for:)(v7, v2);
    }
    Swift::Bool v44 = v41;
    swift_bridgeObjectRelease();
    if (v44) {
      uint64_t v8 = 0x8000;
    }
    else {
      uint64_t v8 = 2;
    }
    if ((v44 | v3)) {
      return v8;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v45 = swift_initStackObject();
    *(_OWORD *)(v45 + 16) = xmmword_1C3769830;
    *(void *)(v45 + 32) = v5;
    unint64_t v49 = v45;
    specialized Array._endMutation()();
    id v46 = (id)v5;
    PeoplePickerViewController.reportIncompatibilityEvent(with:reason:recipients:)(3, 6, v49);
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t PeoplePickerViewController.updatePresentationOptions(_:for:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
  do
  {
    if ((a2 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x1C87744F0](v7, a2);
    }
    else {
      id v9 = *(id *)(a2 + 8 * v7 + 32);
    }
    id v10 = v9;
    ++v7;
    objc_msgSend(v8, sel_setPresentationOptions_forRecipient_, a1, v9);
  }
  while (v5 != v7);
LABEL_9:
  return swift_bridgeObjectRelease();
}

void PeoplePickerViewController.setActionUnavailable()()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_setComposeFieldInfoText_, 0);
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x188);
    unsigned __int8 v3 = v1;
    v2(0);
  }
}

uint64_t PeoplePickerViewController.isIDSLookupPendingForCurrentRecipients()()
{
  id v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController];
  id v2 = objc_msgSend(v1, sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_22;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000001) == 0, v3);
  if ((v3 & 0xC000000000000001) != 0) {
    id v4 = (id)MEMORY[0x1C87744F0](0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v1, sel_recipients);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 > 1
    || v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style] == 1
    || objc_msgSend(v5, sel_isGroup))
  {
    id v9 = objc_msgSend(v1, sel_recipients);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v0) = specialized Sequence.contains(where:)(v10, v0);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  id v11 = objc_msgSend(v1, sel_recipients);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v13 != 1)
  {

LABEL_23:
    LOBYTE(v0) = 0;
    return v0 & 1;
  }
  uint64_t v14 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v5, (SEL *)&selRef_address);
  if (v15)
  {
    uint64_t v16 = (void *)MEMORY[0x1C87730B0](v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v0 = (char *)(id)TUCopyIDSCanonicalAddressForDestinationID();

  if (v0)
  {
    id v17 = objc_msgSend(self, sel_sharedManager);
    unsigned int v18 = objc_msgSend(v17, sel_faceTimeVideoAvailabilityForDestination_, v0);

    LOBYTE(v0) = v18 == 0;
    return v0 & 1;
  }
LABEL_11:

  return v0 & 1;
}

uint64_t PeoplePickerViewController.reportIncompatibilityEvent(with:reason:recipients:)(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 >> 62) {
    goto LABEL_38;
  }
  uint64_t v4 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v35 = *(id *)(v29 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
    unint64_t v36 = v3 & 0xC000000000000001;
    os_log_type_t v32 = (uint64_t *)(v29 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_loggedInvalidRecipients);
    swift_beginAccess();
    unint64_t v5 = 0;
    uint64_t v33 = v3;
    uint64_t v34 = v4;
    uint64_t v30 = v3 + 32;
    uint64_t v31 = v3 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v36)
      {
        id v6 = (id)MEMORY[0x1C87744F0](v5, v33);
      }
      else
      {
        if (v5 >= *(void *)(v31 + 16)) {
          goto LABEL_37;
        }
        id v6 = *(id *)(v30 + 8 * v5);
      }
      unint64_t v7 = v6;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      id v9 = objc_msgSend(v35, sel_recipients);
      uint64_t v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11) {
          goto LABEL_29;
        }
      }
      unint64_t v12 = v10 & 0xC000000000000001;
      if ((v10 & 0xC000000000000001) != 0) {
        id v13 = (id)MEMORY[0x1C87744F0](0, v10);
      }
      else {
        id v13 = *(id *)(v10 + 32);
      }
      uint64_t v14 = v13;
      char v15 = static NSObject.== infix(_:_:)();

      if (v15)
      {
LABEL_19:
        swift_bridgeObjectRelease_n();
        uint64_t v19 = *v32;
        swift_bridgeObjectRetain();
        uint64_t v3 = specialized Set.contains(_:)(v7, v19);
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_beginAccess();
          specialized Set._Variant.insert(_:)(&v37, v7);
          id v20 = v37;
          swift_endAccess();

          uint64_t v3 = v29;
          PeoplePickerViewController.reportIncompatibilityEvent(with:reason:)(a1, a2);
        }
        goto LABEL_30;
      }
      if (v11 != 1)
      {
        if (v12) {
          id v16 = (id)MEMORY[0x1C87744F0](1, v10);
        }
        else {
          id v16 = *(id *)(v10 + 40);
        }
        id v17 = v16;
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_19;
        }
        if (v11 != 2) {
          break;
        }
      }
LABEL_29:
      swift_bridgeObjectRelease_n();
LABEL_30:

      if (v5 == v34) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v21 = 6;
    while (1)
    {
      id v22 = v12 ? (id)MEMORY[0x1C87744F0](v21 - 4, v10) : *(id *)(v10 + 8 * v21);
      unint64_t v23 = v22;
      uint64_t v24 = v21 - 3;
      if (__OFADD__(v21 - 4, 1)) {
        break;
      }
      char v25 = static NSObject.== infix(_:_:)();

      if (v25) {
        goto LABEL_19;
      }
      ++v21;
      if (v24 == v11) {
        goto LABEL_29;
      }
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t PeoplePickerViewController.webInviteeExplanation()()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(self, sel_conversationKit);
  if (v3 <= 1) {
    uint64_t v5 = 5459283;
  }
  else {
    uint64_t v5 = 5459277;
  }
  v28._id object = (void *)0xE000000000000000;
  unint64_t v6 = 0xE300000000000000;
  v7.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v7.value._id object = (void *)0xEF74694B6E6F6974;
  v8._uint64_t countAndFlagsBits = 0;
  v8._id object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, v7, (NSBundle)v4, v8, v28);

  int v10 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style);
  id v11 = objc_msgSend(self, sel_conversationKit);
  unint64_t v27 = 0xE000000000000000;
  if (v10)
  {
    uint64_t v12 = 0x4C465F4552414853;
    unint64_t v13 = 0xEA0000000000574FLL;
  }
  else
  {
    uint64_t v12 = 0x465F455441455243;
    unint64_t v13 = 0xEB00000000574F4CLL;
  }
  v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v14.value._id object = (void *)0xEF74694B6E6F6974;
  v15._uint64_t countAndFlagsBits = 0;
  v15._id object = (void *)0xE000000000000000;
  uint64_t v16 = 0;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, v14, (NSBundle)v11, v15, *(Swift::String *)(&v27 - 1));

  id v18 = objc_msgSend(self, sel_conversationKit);
  v29._id object = (void *)0xE000000000000000;
  v19._id object = (void *)0x80000001C3799910;
  v19._uint64_t countAndFlagsBits = 0xD000000000000017;
  v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v20.value._id object = (void *)0xEF74694B6E6F6974;
  v21._uint64_t countAndFlagsBits = 0;
  v21._id object = (void *)0xE000000000000000;
  v29._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v29);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1C37696D0;
  uint64_t v23 = MEMORY[0x1E4FBB1A0];
  *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
  *(Swift::String *)(v22 + 32) = v9;
  *(void *)(v22 + 96) = v23;
  *(void *)(v22 + 104) = v24;
  *(void *)(v22 + 64) = v24;
  *(Swift::String *)(v22 + 72) = v17;
  uint64_t v25 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t CNComposeRecipient.tuHandle.getter()
{
  id v2 = objc_msgSend(v1, sel_kind);
  if (v2)
  {
    if (v2 != (id)1) {
      return 0;
    }
    uint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v1, (SEL *)&selRef_address);
    if (v4)
    {
      OUTLINED_FUNCTION_36_9();
      uint64_t v5 = self;
      MEMORY[0x1C87730B0](v0, v1);
      OUTLINED_FUNCTION_15_23();
      id v6 = objc_msgSend(v5, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v0, 0);
LABEL_7:
      id v9 = v6;

      return (uint64_t)v9;
    }
    __break(1u);
  }
  else
  {
    uint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v1, (SEL *)&selRef_address);
    if (v7)
    {
      OUTLINED_FUNCTION_36_9();
      Swift::String v8 = self;
      MEMORY[0x1C87730B0](v0, v1);
      OUTLINED_FUNCTION_15_23();
      id v6 = objc_msgSend(v8, sel_normalizedEmailAddressHandleForValue_, v0);
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t PeoplePickerViewController.recipientsIncludeInvalidAddresses()()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_31;
  }
LABEL_3:
  uint64_t v4 = 0;
  unint64_t v5 = v2 & 0xC000000000000001;
  unint64_t v6 = v2 + 32;
  uint64_t v7 = &selRef_trailingBarAlpha;
  uint64_t v27 = v3;
  unint64_t v28 = v2;
  unint64_t v25 = v2 + 32;
  unint64_t v26 = v2 & 0xC000000000000001;
  while (1)
  {
    if (v5) {
      id v8 = (id)MEMORY[0x1C87744F0](v4, v2);
    }
    else {
      id v8 = *(id *)(v6 + 8 * v4);
    }
    id v9 = v8;
    if (__OFADD__(v4++, 1)) {
      goto LABEL_36;
    }
    if (![v8 v7[153]]) {
      break;
    }
    unint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.children()(v9);
    if (!result)
    {
      __break(1u);
      return result;
    }
    unint64_t v12 = result;
    if (result >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13)
      {
LABEL_12:
        unint64_t v2 = 4;
        while (1)
        {
          id v14 = (v12 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x1C87744F0](v2 - 4, v12)
              : *(id *)(v12 + 8 * v2);
          Swift::String v15 = v14;
          unint64_t v16 = v2 - 3;
          if (__OFADD__(v2 - 4, 1)) {
            break;
          }
          uint64_t v17 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v14, (SEL *)&selRef_address);
          if (v18)
          {
            Swift::String v19 = (void *)MEMORY[0x1C87730B0](v17);
            swift_bridgeObjectRelease();
          }
          else
          {
            Swift::String v19 = 0;
          }
          id v20 = (id)TUCopyIDSCanonicalAddressForDestinationID();

          if (!v20)
          {
            swift_bridgeObjectRelease_n();

            swift_bridgeObjectRelease_n();
            return 1;
          }

          ++v2;
          if (v16 == v13)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v3 = v27;
            unint64_t v2 = v28;
            unint64_t v6 = v25;
            unint64_t v5 = v26;
            uint64_t v7 = &selRef_trailingBarAlpha;
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v13) {
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease_n();
LABEL_30:
    if (v4 == v3) {
      goto LABEL_31;
    }
  }
  uint64_t v21 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v9, (SEL *)&selRef_address);
  if (v22)
  {
    uint64_t v23 = (void *)MEMORY[0x1C87730B0](v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = 0;
  }
  id v24 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (v24)
  {

    goto LABEL_30;
  }
  swift_bridgeObjectRelease_n();

  return 1;
}

void PeoplePickerViewController.isCallAllowed(policy:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_20:
    uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * v9);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    id v14 = v13;
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    unsigned int v16 = objc_msgSend(v14, sel_isEqualToNumber_, isa);

    if (v16)
    {
LABEL_21:
      swift_release();
      return;
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v10 >= v6) {
    goto LABEL_21;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_19;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_21;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_19;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_21;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_19:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_20;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v6) {
    goto LABEL_21;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_19;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t PeoplePickerViewController.isAudioAllowedForCurrentRecipients()()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_3;
      }
      swift_bridgeObjectRelease();
      __break(1u);
    }
  }
  else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
  {
LABEL_3:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2);
    if ((v2 & 0xC000000000000001) != 0) {
      id v3 = (id)MEMORY[0x1C87744F0](0, v2);
    }
    else {
      id v3 = *(id *)(v2 + 32);
    }
    uint64_t v4 = v3;
    swift_bridgeObjectRelease();
    CNComposeRecipient.idsDestinationsMatchingAddress()();
    uint64_t v6 = v5;
    if (objc_msgSend(self, sel_supportsDisplayingFaceTimeAudioCalls))
    {
      unsigned __int8 v7 = PeoplePickerViewController.isMultiwayAllowed(for:)(v6, (SEL *)&selRef_isFaceTimeAudioAvailableForAnyDestinationInDestinations_);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();

      unsigned __int8 v7 = 0;
    }
    return v7 & 1;
  }
  swift_bridgeObjectRelease();
  return PeoplePickerViewController.isMultiwayAllowedForCurrentRecipients()();
}

uint64_t PeoplePickerViewController.isMultiwayAllowedForCurrentRecipients()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    BOOL v5 = v6 > 0;
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v5 = v4 != 0;
    swift_bridgeObjectRetain();
    uint64_t v6 = v4;
    if (v4)
    {
LABEL_3:
      unint64_t v7 = 0;
LABEL_4:
      BOOL v17 = v5;
      unint64_t v8 = v7;
      do
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          id v9 = (id)MEMORY[0x1C87744F0](v8, v3);
        }
        else
        {
          if (v8 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_21;
          }
          id v9 = *(id *)(v3 + 8 * v8 + 32);
        }
        uint64_t v10 = v9;
        unint64_t v7 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        CNComposeRecipient.idsDestinationsMatchingAddress()();
        unsigned __int8 v12 = PeoplePickerViewController.isMultiwayAllowed(for:)(v11, (SEL *)&selRef_isFaceTimeMultiwayAvailableForAnyDestinationInDestinations_);
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
        {

LABEL_15:
          BOOL v5 = 0;
          if (v7 != v4) {
            goto LABEL_4;
          }
          swift_bridgeObjectRelease_n();
          return 0;
        }
        PeoplePickerViewController.hasMatchingMeHandle(for:)(v10);
        char v14 = v13;

        if (v14) {
          goto LABEL_15;
        }
        ++v8;
      }
      while (v7 != v4);
      swift_bridgeObjectRelease();
      if (!v17) {
        goto LABEL_24;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_18:
    uint64_t v15 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses)
                    + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (!__OFADD__(v15, v6)) {
      return PeoplePickerViewController.maxParticipantLimit.getter() >= v15 + v6;
    }
    __break(1u);
    return result;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PeoplePickerViewController.isVideoAllowedForCurrentRecipients()()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_3;
      }
      swift_bridgeObjectRelease();
      __break(1u);
    }
  }
  else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
  {
LABEL_3:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2);
    if ((v2 & 0xC000000000000001) != 0) {
      id v3 = (id)MEMORY[0x1C87744F0](0, v2);
    }
    else {
      id v3 = *(id *)(v2 + 32);
    }
    uint64_t v4 = v3;
    swift_bridgeObjectRelease();
    CNComposeRecipient.idsDestinationsMatchingAddress()();
    unsigned __int8 v6 = PeoplePickerViewController.isMultiwayAllowed(for:)(v5, (SEL *)&selRef_isFaceTimeVideoAvailableForAnyDestinationInDestinations_);

    swift_bridgeObjectRelease();
    return v6 & 1;
  }
  swift_bridgeObjectRelease();
  return PeoplePickerViewController.isMultiwayAllowedForCurrentRecipients()();
}

void PeoplePickerViewController.isAVLessSharePlayAllowedForCurrentRecipients()()
{
  uint64_t v2 = v0;
  id v3 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (char **)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v5 = *(char ***)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
  }
  uint64_t v6 = *(void *)(*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses)
                 + 16);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v6, v7))
  {
LABEL_28:
    __break(1u);
  }
  else
  {
    if (PeoplePickerViewController.maxParticipantLimit.getter() < v6 + v7) {
      goto LABEL_8;
    }
    unint64_t v1 = v4 & 0xC000000000000001;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v4 & 0xC000000000000001) == 0, v4);
    if ((v4 & 0xC000000000000001) == 0)
    {
      id v8 = *(id *)(v4 + 32);
      goto LABEL_11;
    }
  }
  id v8 = (id)MEMORY[0x1C87744F0](0, v4);
LABEL_11:
  uint64_t v9 = v8;
  CNComposeRecipient.idsDestinationsMatchingAddress()();
  if (PeoplePickerViewController.isMultiwayAllowed(for:)(v10, (SEL *)&selRef_isiMessageAvailableForAnyDestinationInDestinations_))
  {
    unsigned __int8 v11 = PeoplePickerViewController.isAVLessSharePlayCapable(for:)();
    swift_bridgeObjectRelease();

    if (v11)
    {
      unsigned __int8 v12 = 0;
      char v13 = (char *)v5 - 1;
      uint64_t v5 = &selRef_isiMessageAvailableForAnyDestinationInDestinations_;
      while (v13 != v12)
      {
        char v14 = v12 + 1;
        if (v1)
        {
          id v15 = (id)MEMORY[0x1C87744F0](v12 + 1, v4);
        }
        else
        {
          if ((unint64_t)v14 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v15 = *(id *)(v4 + 8 * (void)v12 + 40);
        }
        uint64_t v9 = v15;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        CNComposeRecipient.idsDestinationsMatchingAddress()();
        if ((PeoplePickerViewController.isMultiwayAllowed(for:)(v16, (SEL *)&selRef_isiMessageAvailableForAnyDestinationInDestinations_) & 1) == 0)goto LABEL_23; {
        unsigned __int8 v17 = PeoplePickerViewController.isAVLessSharePlayCapable(for:)();
        }
        swift_bridgeObjectRelease();

        ++v12;
        if ((v17 & 1) == 0) {
          goto LABEL_8;
        }
      }
    }
    goto LABEL_8;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t PeoplePickerViewController.isTelephonyAllowedForCurrentState()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style)) {
    return 0;
  }
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v8 != 1
    || (swift_bridgeObjectRetain(), uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), !v9))
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)MEMORY[0x1C87744F0](0, v2);
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v4, (SEL *)&selRef_address);
  if (v6)
  {
    unsigned __int8 v7 = PeoplePickerViewController.isTelephonyCallAllowed(for:)(result, v6);

    swift_bridgeObjectRelease();
    return v7 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PeoplePickerViewController.updatePillView(senderIdentity:)(void *a1)
{
  if (a1)
  {
    unint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_senderIdentityPillView);
    id v3 = a1;
    objc_msgSend(v2, sel_setHidden_, 0);
    id v4 = objc_msgSend(v3, sel_localizedShortName);
    if (!v4)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v4 = (id)MEMORY[0x1C87730B0](v5);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v2, sel_setBadgeText_, v4);

    id v6 = objc_msgSend(v3, sel_localizedName);
    if (!v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = (id)MEMORY[0x1C87730B0](v7);
      swift_bridgeObjectRelease();
      id v6 = v9;
    }
    id v10 = v6;
    objc_msgSend(v2, sel_setTitle_);
  }
  else
  {
    uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_senderIdentityPillView);
    objc_msgSend(v8, sel_setHidden_, 1);
  }
}

void PeoplePickerViewController.cancelQueries()()
{
  id v0 = objc_msgSend(self, sel_sharedManager);
  objc_msgSend(v0, sel_cancelQueries);
}

void CNComposeRecipient.idsDestinations()()
{
  uint64_t v50 = MEMORY[0x1E4FBC870];
  if (!objc_msgSend(v0, sel_isGroup))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1C3769610;
    char v13 = (void *)*MEMORY[0x1E4F1ADC8];
    char v14 = (void *)*MEMORY[0x1E4F1AEE0];
    *(void *)(v12 + 32) = *MEMORY[0x1E4F1ADC8];
    *(void *)(v12 + 40) = v14;
    uint64_t v49 = v12;
    specialized Array._endMutation()();
    id v15 = v13;
    id v16 = v14;
    id v17 = outlined bridged method (mbnn) of @objc CNComposeRecipient.contactWithKeys(toFetch:)(v49, v0);
    if (!v17)
    {
      uint64_t v41 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v0, (SEL *)&selRef_address);
      if (!v42) {
        return;
      }
      id v43 = (void *)MEMORY[0x1C87730B0](v41);
      swift_bridgeObjectRelease();
      id v44 = (id)TUCopyIDSCanonicalAddressForDestinationID();

      if (!v44) {
        return;
      }
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;

      specialized Set._Variant.insert(_:)(&v49, v45, v47);
      goto LABEL_48;
    }
    unint64_t v2 = v17;
    id v18 = objc_msgSend(v17, sel_emailAddresses);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v1 >> 62))
    {
      uint64_t v19 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v19)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        id v28 = objc_msgSend(v2, sel_phoneNumbers);
        unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v29 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v30)
          {
LABEL_26:
            unint64_t v48 = v2;
            if (v30 >= 1)
            {
              for (uint64_t i = 0; i != v30; ++i)
              {
                if ((v29 & 0xC000000000000001) != 0) {
                  id v32 = (id)MEMORY[0x1C87744F0](i, v29);
                }
                else {
                  id v32 = *(id *)(v29 + 8 * i + 32);
                }
                uint64_t v33 = v32;
                id v34 = objc_msgSend(v32, sel_value, v48);
                id v35 = objc_msgSend(v34, sel_stringValue);

                if (!v35)
                {
                  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  id v35 = (id)MEMORY[0x1C87730B0](v36);
                  swift_bridgeObjectRelease();
                }
                id v37 = (id)TUCopyIDSCanonicalAddressForDestinationID();

                if (v37)
                {
                  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v40 = v39;

                  specialized Set._Variant.insert(_:)(&v49, v38, v40);
                  swift_bridgeObjectRelease();
                }
                else
                {
                }
              }

              goto LABEL_48;
            }
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v30) {
            goto LABEL_26;
          }
        }

LABEL_48:
        swift_bridgeObjectRelease();
        return;
      }
LABEL_15:
      if (v19 < 1)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      for (uint64_t j = 0; j != v19; ++j)
      {
        if ((v1 & 0xC000000000000001) != 0) {
          id v21 = (id)MEMORY[0x1C87744F0](j, v1);
        }
        else {
          id v21 = *(id *)(v1 + 8 * j + 32);
        }
        uint64_t v22 = v21;
        id v23 = objc_msgSend(v21, sel_value);
        id v24 = (id)TUCopyIDSCanonicalAddressForDestinationID();

        if (v24)
        {
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          specialized Set._Variant.insert(_:)(&v49, v25, v27);
          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      goto LABEL_24;
    }
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  unint64_t v3 = outlined bridged method (pb) of @objc CNComposeRecipient.children()(v0);
  if (!v3)
  {
LABEL_52:
    __break(1u);
    return;
  }
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_48;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v6 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x1C87744F0](v6, v4);
    }
    else {
      id v7 = *(id *)(v4 + 8 * v6 + 32);
    }
    uint64_t v8 = v7;
    ++v6;
    uint64_t v9 = CNComposeRecipient.idsDestinations()();
    specialized Set.union<A>(_:)(v9);
    uint64_t v11 = v10;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
  uint64_t v50 = v11;
}

uint64_t PeoplePickerViewController.callFilterPolicy(for:)()
{
  id v0 = objc_msgSend(self, sel_sharedInstance);
  id v1 = objc_msgSend(v0, sel_callFilterController);

  v2.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  id v3 = (id)TUPreferredFaceTimeBundleIdentifier();
  if (!v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = (id)MEMORY[0x1C87730B0](v4);
    swift_bridgeObjectRelease();
  }
  id v5 = objc_msgSend(v1, sel_policyForAddresses_forBundleIdentifier_, v2.super.isa, v3);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void PeoplePickerViewController.removeRecipient(_:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769620;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  a1;
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v2 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  CNComposeRecipient.idsDestinations()();
  uint64_t v7 = v6;
  swift_beginAccess();
  specialized Set._subtract<A>(_:)(v7);
  swift_endAccess();
  swift_bridgeObjectRelease();
  PeoplePickerViewController.currentRecipientsAddresses()();
  uint64_t v8 = PeoplePickerViewController.callFilterPolicy(for:)();
  swift_bridgeObjectRelease();
  PeoplePickerViewController.restrictionPolicy.setter(v8);
  PeoplePickerViewController.updateState()();
}

id PeoplePickerViewController.isTelephonyCallAllowed(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = self;
  if ((objc_msgSend(v4, sel_supportsPrimaryCalling) & 1) != 0
    || !objc_msgSend(v4, sel_supportsTelephonyCalls))
  {
    return 0;
  }
  uint64_t v5 = (void *)MEMORY[0x1C87730B0](a1, a2);
  id v6 = objc_msgSend(v5, sel_destinationIdIsPhoneNumber);

  return v6;
}

void CNComposeRecipient.idsDestinationsMatchingAddress()()
{
  if (objc_msgSend(v0, sel_isGroup))
  {
    unint64_t v1 = outlined bridged method (pb) of @objc CNComposeRecipient.children()(v0);
    if (!v1)
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    unint64_t v2 = v1;
    if (v1 >> 62) {
      goto LABEL_25;
    }
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
      while (1)
      {
        uint64_t v34 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        if (v3 < 0) {
          break;
        }
        uint64_t v4 = 0;
        uint64_t v5 = v34;
        while (v3 != v4)
        {
          if ((v2 & 0xC000000000000001) != 0) {
            id v6 = (id)MEMORY[0x1C87744F0](v4, v2);
          }
          else {
            id v6 = *(id *)(v2 + 8 * v4 + 32);
          }
          uint64_t v7 = v6;
          uint64_t v8 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v6, (SEL *)&selRef_address);
          if (v9)
          {
            uint64_t v10 = (void *)MEMORY[0x1C87730B0](v8);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v10 = 0;
          }
          id v11 = (id)TUCopyIDSCanonicalAddressForDestinationID();

          if (!v11) {
            goto LABEL_38;
          }
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v14 = v13;

          unint64_t v15 = *(void *)(v34 + 16);
          if (v15 >= *(void *)(v34 + 24) >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v4;
          *(void *)(v34 + 16) = v15 + 1;
          uint64_t v16 = v34 + 16 * v15;
          *(void *)(v16 + 32) = v12;
          *(void *)(v16 + 40) = v14;
          if (v3 == v4)
          {
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_25:
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3) {
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1C3769620;
    uint64_t v17 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v0, (SEL *)&selRef_address);
    if (v18)
    {
      uint64_t v19 = (void *)MEMORY[0x1C87730B0](v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = 0;
    }
    id v20 = (id)TUCopyIDSCanonicalAddressForDestinationID();

    if (!v20) {
      goto LABEL_40;
    }
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    *(void *)(v5 + 32) = v21;
    *(void *)(v5 + 40) = v23;
  }
LABEL_27:
  uint64_t v24 = *(void *)(v5 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v26 = v25;
    uint64_t v27 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v29 = *(v27 - 1);
      uint64_t v28 = *v27;
      unint64_t v30 = *(void *)(v26 + 16);
      unint64_t v31 = *(void *)(v26 + 24);
      swift_bridgeObjectRetain();
      if (v30 >= v31 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v26 = v33;
      }
      v27 += 2;
      *(void *)(v26 + 16) = v30 + 1;
      uint64_t v32 = v26 + 16 * v30;
      *(void *)(v32 + 32) = v29;
      *(void *)(v32 + 40) = v28;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  specialized Set.init<A>(_:)(v26);
}

void PeoplePickerViewController.hasMatchingMeHandle(for:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_meHandles);
  uint64_t v4 = v3 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (v7)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_20:
    unint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)MEMORY[0x1C87730B0](v16, v17);
    swift_bridgeObjectRelease();
    uint64_t v19 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a1, (SEL *)&selRef_address);
    if (v20)
    {
      uint64_t v21 = (void *)MEMORY[0x1C87730B0](v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = 0;
    }
    int v22 = TUDestinationIDsAreEqual();

    if (v22)
    {
LABEL_24:
      swift_release();
      return;
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v8) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_19;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v8) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v9);
  if (v13) {
    goto LABEL_19;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v8) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v9);
  if (v13)
  {
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_20;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v8) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t PeoplePickerViewController.isIDSMultiwayLookupPending(for:)(void *a1)
{
  if (!objc_msgSend(a1, sel_isGroup))
  {
    uint64_t v5 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a1, (SEL *)&selRef_address);
    if (v6)
    {
      unint64_t v7 = (void *)MEMORY[0x1C87730B0](v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v7 = 0;
    }
    id v8 = (id)TUCopyIDSCanonicalAddressForDestinationID();

    if (v8)
    {
      id v9 = objc_msgSend(self, sel_sharedManager);
      unsigned int v10 = objc_msgSend(v9, sel_faceTimeMultiwayAvailabilityForDestination_, v8);

      char v4 = v10 == 0;
    }
    else
    {
      char v4 = 0;
    }
    return v4 & 1;
  }
  uint64_t result = outlined bridged method (pb) of @objc CNComposeRecipient.children()(a1);
  if (result)
  {
    char v4 = specialized Sequence.contains(where:)(result, v1);
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  __break(1u);
  return result;
}

BOOL PeoplePickerViewController.isIDSLookupPending(for:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v7 > 1 || *(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) == 1)
  {
    id v8 = objc_msgSend(self, sel_sharedManager);
    id v9 = (void *)MEMORY[0x1C87730B0](a1, a2);
    unsigned int v10 = objc_msgSend(v8, sel_faceTimeMultiwayAvailabilityForDestination_, v9);
  }
  else
  {
    id v8 = objc_msgSend(self, sel_sharedManager);
    id v9 = (void *)MEMORY[0x1C87730B0](a1, a2);
    unsigned int v10 = objc_msgSend(v8, sel_faceTimeVideoAvailabilityForDestination_, v9);
  }
  unsigned int v11 = v10;

  return v11 == 0;
}

id PeoplePickerViewController.isMultiwayAllowed(for:)(uint64_t a1, SEL *a2)
{
  id v3 = objc_msgSend(self, sel_sharedManager);
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v5 = objc_msgSend(v3, *a2, isa);

  return v5;
}

id PeoplePickerViewController.isAVLessSharePlayCapable(for:)()
{
  id v0 = objc_msgSend(self, sel_sharedManager);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  id v2 = objc_msgSend(v0, sel_isAVLessSharePlayCapableForAnyDestinationInDestinations_, isa);

  return v2;
}

BOOL PeoplePickerViewController.isFaceTimeAvailable(for:)(uint64_t a1, void *a2)
{
  if (PeoplePickerViewModel.isAudioAvailable(for:)(*(Swift::String *)&a1)) {
    return 1;
  }
  v5._uint64_t countAndFlagsBits = a1;
  v5._id object = a2;
  return PeoplePickerViewModel.isVideoAvailable(for:)(v5);
}

id PeoplePickerViewController.pickablePerson(for:)(void *a1)
{
  uint64_t v2 = CNComposeRecipient.tuHandle.getter();
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = objc_msgSend(a1, sel_contact);
    if (v4)
    {
      id v5 = v4;
      id v6 = objc_allocWithZone((Class)type metadata accessor for PickablePerson());
      uint64_t v7 = v5;
    }
    else
    {
      id v14 = objc_allocWithZone((Class)type metadata accessor for PickablePerson());
      uint64_t v7 = 0;
    }
    return PickablePerson.init(contact:handle:)(v7, v3);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
    outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(a1, (SEL *)&selRef_address);
    uint64_t v9 = MEMORY[0x1E4FBB1A0];
    if (v10)
    {
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    *(void *)(v8 + 56) = v9;
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t CNComposeRecipient.normalizedAddresses()()
{
  if (!objc_msgSend(v0, sel_isGroup))
  {
    uint64_t v18 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v0, (SEL *)&selRef_normalizedAddress);
    if (!v19) {
      goto LABEL_36;
    }
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v22)
    {
LABEL_36:
      id v0 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v3 = v30;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v5 = v31;
      unint64_t v1 = *(void *)(v31 + 16);
      uint64_t v4 = v1 + 1;
      if (v1 < *(void *)(v31 + 24) >> 1)
      {
LABEL_37:
        *(void *)(v5 + 16) = v4;
        uint64_t v32 = v5 + 16 * v1;
        *(void *)(v32 + 32) = v0;
        *(void *)(v32 + 40) = v3;
        return v5;
      }
LABEL_47:
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v5 = v34;
      goto LABEL_37;
    }
    uint64_t v23 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v0, (SEL *)&selRef_normalizedAddress);
    if (v24)
    {
      uint64_t v25 = v23;
      uint64_t v26 = v24;
      swift_bridgeObjectRetain();
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v5 = v27;
      unint64_t v28 = *(void *)(v27 + 16);
      if (v28 >= *(void *)(v27 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v35;
      }
      *(void *)(v5 + 16) = v28 + 1;
      uint64_t v29 = v5 + 16 * v28;
      *(void *)(v29 + 32) = v25;
      *(void *)(v29 + 40) = v26;
LABEL_35:
      swift_bridgeObjectRelease();
      return v5;
    }
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v2 = outlined bridged method (pb) of @objc CNComposeRecipient.children()(v0);
  if (v2)
  {
    unint64_t v3 = v2;
    if (v2 >> 62) {
      goto LABEL_42;
    }
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
      while (v4 >= 1)
      {
        unint64_t v1 = 0;
        uint64_t v5 = MEMORY[0x1E4FBC860];
        while (1)
        {
          id v6 = (v3 & 0xC000000000000001) != 0
             ? (id)MEMORY[0x1C87744F0](v1, v3)
             : *(id *)(v3 + 8 * v1 + 32);
          id v0 = v6;
          uint64_t v7 = CNComposeRecipient.normalizedAddresses()();
          uint64_t v8 = *(void *)(v7 + 16);
          uint64_t v9 = *(void *)(v5 + 16);
          if (__OFADD__(v9, v8)) {
            break;
          }
          uint64_t v10 = v7;
          if (!swift_isUniquelyReferenced_nonNull_native() || v9 + v8 > *(void *)(v5 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v5 = v11;
          }
          if (*(void *)(v10 + 16))
          {
            uint64_t v12 = *(void *)(v5 + 16);
            if ((*(void *)(v5 + 24) >> 1) - v12 < v8) {
              goto LABEL_40;
            }
            unint64_t v13 = v5 + 16 * v12 + 32;
            if (v10 + 32 < v13 + 16 * v8 && v13 < v10 + 32 + 16 * v8) {
              goto LABEL_49;
            }
            swift_arrayInitWithCopy();
            if (v8)
            {
              uint64_t v15 = *(void *)(v5 + 16);
              BOOL v16 = __OFADD__(v15, v8);
              uint64_t v17 = v15 + v8;
              if (v16) {
                goto LABEL_41;
              }
              *(void *)(v5 + 16) = v17;
            }
          }
          else if (v8)
          {
            goto LABEL_39;
          }
          ++v1;
          swift_bridgeObjectRelease();

          if (v4 == v1) {
            goto LABEL_35;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4) {
          goto LABEL_43;
        }
      }
      __break(1u);
      goto LABEL_47;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  __break(1u);
LABEL_49:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:)(uint64_t a1, uint64_t a2)
{
  return PeoplePickerViewModel.isMultiwayAvailable(for:)(*(Swift::String *)&a1);
}

uint64_t PeoplePickerViewController.addPossibleRecipient(_:)(void *a1)
{
  swift_beginAccess();
  id v2 = a1;
  specialized Set._Variant.insert(_:)(&v9, v2);
  unint64_t v3 = v9;
  swift_endAccess();

  if (objc_msgSend(v2, sel_isGroup))
  {
    swift_bridgeObjectRetain();
    CNComposeRecipient.idsDestinations()();
    specialized Set.union<A>(_:)(v4);
    PeoplePickerViewController.idsGroupDestinations.setter(v5);
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    CNComposeRecipient.idsDestinations()();
    specialized Set.union<A>(_:)(v6);
    PeoplePickerViewController.idsDestinations.setter(v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Subject<>.send()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  return Subject<>.send()();
}

void PeoplePickerViewController.removePossibleRecipient(_:)(void *a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  id v4 = a1;
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v5, v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_beginAccess();
    uint64_t v8 = (void *)specialized Set._Variant.remove(_:)(v7);
    swift_endAccess();

    id v9 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v11 = v4;
    char v12 = specialized Sequence.contains(where:)(v10, v11);
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_5:

      return;
    }
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_existingAddresses);
    swift_bridgeObjectRetain();
    uint64_t v14 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v11, (SEL *)&selRef_address);
    if (v15)
    {
      specialized Set.contains(_:)(v14, v15, v13);
      char v17 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_5;
      }
      CNComposeRecipient.idsDestinations()();
      uint64_t v19 = v18;
      swift_beginAccess();
      specialized Set._subtract<A>(_:)(v19);
      swift_endAccess();

      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

void PeoplePickerViewController.updateLocalizedSenderIdentity(_:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  unint64_t v3 = *(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x2D0);
  id v4 = a1;
  v3(a1);
  PeoplePickerViewController.updatePillView(senderIdentity:)(a1);
}

void PeoplePickerViewController.menu(for:)()
{
  id v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_callProviderManager), sel_faceTimeProvider);
  UIMenuElementSize v75 = MEMORY[0x1E4FBC860];
  v58[2] = type metadata accessor for NSFastEnumerationIterator();
  OUTLINED_FUNCTION_5_3();
  v58[1] = v3;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  id v59 = v2;
  id v5 = objc_msgSend(v2, sel_prioritizedSenderIdentities);
  NSOrderedSet.makeIterator()();

  uint64_t v70 = v1;
  NSFastEnumerationIterator.next()();
  if (v74)
  {
    uint64_t v65 = 0x80000001C3799060;
    long long v64 = xmmword_1C3769620;
    unint64_t v6 = 0x1F6E52000uLL;
    uint64_t v63 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      outlined init with take of Any(&v73, &v72);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUSenderIdentity);
      if (swift_dynamicCast()) {
        break;
      }
LABEL_21:
      NSFastEnumerationIterator.next()();
      if (!v74) {
        goto LABEL_22;
      }
    }
    uint64_t v7 = v71;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    uint64_t v8 = OUTLINED_FUNCTION_26();
    id v9 = v66;
    *(void *)(v8 + 16) = v66;
    *(void *)(v8 + 24) = v7;
    uint64_t v67 = v9;
    id v10 = v7;
    OUTLINED_FUNCTION_29_1();
    unint64_t v11 = v6;
    char v12 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    id v13 = objc_msgSend(self, sel_conversationKit);
    uint64_t v14 = OUTLINED_FUNCTION_11_1(0xD000000000000023, v65);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v15 + 16) = v64;
    id v16 = objc_msgSend(v10, sel_localizedName);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    OUTLINED_FUNCTION_41_0();
    String.init(format:_:)();
    OUTLINED_FUNCTION_36_9();
    swift_bridgeObjectRelease();
    MEMORY[0x1C87730B0](v15, v14);
    OUTLINED_FUNCTION_15_23();
    id v68 = v12;
    objc_msgSend(v12, sel_setTitle_, v15);

    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v21 = OUTLINED_FUNCTION_8(v20);
    uint64_t v23 = *(void *)(v22 + 64);
    MEMORY[0x1F4188790](v21);
    uint64_t v24 = (char *)v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v69 = v10;
    id v25 = [v10 (SEL)(v11 + 152)];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = type metadata accessor for UUID();
    uint64_t v27 = 1;
    uint64_t v28 = __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
    uint64_t v29 = MEMORY[0x1F4188790](v28);
    unint64_t v30 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v67) + 0x2C8))(v29);
    if (v30)
    {
      uint64_t v31 = v30;
      id v32 = [v30 (SEL)(v11 + 152)];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = 0;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v24, v27, 1, v26);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v34 = OUTLINED_FUNCTION_8(v33);
    uint64_t v35 = MEMORY[0x1F4188790](v34);
    id v37 = (char *)v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v38 = (uint64_t)&v37[*(int *)(v35 + 56)];
    outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)v24, (uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v39 = OUTLINED_FUNCTION_35();
    outlined init with copy of LinkShareCoordinatorProtocol?(v39, v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v41 = OUTLINED_FUNCTION_27_16((uint64_t)v37);
    if (v43)
    {
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_27_16(v38);
      if (v43)
      {
        outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_16:
        uint64_t v49 = 1;
LABEL_18:
        unint64_t v6 = 0x1F6E52000;
        id v50 = v68;
        objc_msgSend(v68, sel_setState_, v49);
        id v51 = v50;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v67 = v58;
      MEMORY[0x1F4188790](v41);
      uint64_t v42 = (char *)v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)v37, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_27_16(v38);
      if (!v43)
      {
        uint64_t v61 = v58;
        OUTLINED_FUNCTION_5_3();
        unint64_t v62 = v58;
        uint64_t v46 = v45;
        MEMORY[0x1F4188790](v47);
        OUTLINED_FUNCTION_16_0();
        (*(void (**)(void *, uint64_t, uint64_t))(v46 + 32))(&demangling cache variable for type metadata for UUID?, v38, v26);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1F418BC78]);
        int v60 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v48 = *(void (**)(void *, uint64_t))(v46 + 8);
        v48(&demangling cache variable for type metadata for UUID?, v26);
        outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v48(v42, v26);
        outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (v60) {
          goto LABEL_16;
        }
LABEL_17:
        uint64_t v49 = 0;
        goto LABEL_18;
      }
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_26_2();
      v44();
    }
    outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_17;
  }
LABEL_22:
  OUTLINED_FUNCTION_26_2();
  v52();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  id v53 = objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_11_1(0xD000000000000026, 0x80000001C3799030);

  UIMenuElementSize v56 = v75;
  OUTLINED_FUNCTION_29_1();
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v54, v55, v76, (UIMenuIdentifier_optional)2, 0xFFFFFFFFFFFFFFFFLL, v56, v57);

  OUTLINED_FUNCTION_28();
}

void PeoplePickerViewController.providersChanged(for:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C37696D0;
  *(void *)(v3 + 56) = type metadata accessor for PeoplePickerViewController();
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PeoplePickerViewController and conformance NSObject, v4, (void (*)(uint64_t))type metadata accessor for PeoplePickerViewController);
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 96) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUCallProviderManager);
  *(void *)(v3 + 104) = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUCallProviderManager and conformance NSObject, &lazy cache variable for type metadata for TUCallProviderManager);
  *(void *)(v3 + 72) = a1;
  id v5 = v1;
  id v6 = a1;
  OUTLINED_FUNCTION_32_16();
  swift_bridgeObjectRelease();
  PeoplePickerViewController.refreshLocalizedSenderIdentity()();
}

id PeoplePickerViewController.searchController(_:composeRecipientForAddress:)()
{
  return PeoplePickerViewController.composeRecipient(for:)();
}

void PeoplePickerViewController.searchController(_:didAdd:)(uint64_t a1, void *a2)
{
}

void PeoplePickerViewController.searchController(_:didRemove:)(uint64_t a1, void *a2)
{
}

uint64_t PeoplePickerViewController.searchController(_:willDisplayRowFor:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_2();
  id v3 = a2;
  uint64_t v4 = swift_bridgeObjectRetain();
  char v5 = specialized Sequence.contains(where:)(v4, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v5 & 1) == 0) {
    return PeoplePickerViewController.addPossibleRecipient(_:)(v3);
  }
  return result;
}

void PeoplePickerViewController.searchController(_:didEndDisplayingRowFor:)(uint64_t a1, void *a2)
{
}

id PeoplePickerViewController.searchController(_:preferredRecipientFor:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_2();
  id v3 = a2;
  uint64_t v4 = swift_bridgeObjectRetain();
  char v5 = specialized Sequence.contains(where:)(v4, v3);
  swift_bridgeObjectRelease();
  id result = 0;
  if (v5) {
    return PeoplePickerViewController.preferredRecipient(for:)(v3);
  }
  return result;
}

unint64_t PeoplePickerViewController.searchController(_:tintColorFor:)(uint64_t a1, void *a2)
{
  return PeoplePickerViewController.tintColor(for:isChild:)(a2, 0);
}

unint64_t PeoplePickerViewController.searchController(_:presentationOptionsFor:)(uint64_t a1, void *a2)
{
  return PeoplePickerViewController.presentationOptions(for:)(a2);
}

void PeoplePickerViewController.searchController(_:didTapTableAccessoryFor:)(uint64_t a1, void *a2)
{
  id v3 = v2;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v5 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769620;
  *(void *)(v5 + 56) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  *(void *)(v5 + 64) = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type CNComposeRecipient and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  *(void *)(v5 + 32) = a2;
  id v6 = a2;
  OUTLINED_FUNCTION_32_16();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v6, sel_contact);
  if (v7)
  {
    id v8 = v7;
    unsigned int v9 = objc_msgSend(v7, sel_hasBeenPersisted);
    id v10 = self;
    if (v9) {
      id v11 = objc_msgSend(v10, sel_viewControllerForContact_, v8);
    }
    else {
      id v11 = objc_msgSend(v10, sel_viewControllerForUnknownContact_, v8);
    }
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
    uint64_t v12 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v6, (SEL *)&selRef_address);
    id v8 = @nonobjc CNContact.init(displayName:emailOrPhoneNumber:)(0, 0, v12, v13);
    id v11 = objc_msgSend(self, sel_viewControllerForUnknownContact_, v8);
  }
  id v14 = v11;

  uint64_t v15 = *(void *)&v3[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation];
  if (v15) {
    id v16 = objc_msgSend(self, sel_tu_contactStoreConfigurationForConversation_, v15);
  }
  else {
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B990]), sel_init);
  }
  id v22 = v16;
  objc_msgSend(v16, sel_setIncludeDonatedContacts_, 1);
  objc_msgSend(v22, sel_setIncludeSuggestedContacts_, 1);
  id v17 = objc_msgSend(v14, sel_view);
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = objc_msgSend(self, sel_systemBackgroundColor);
    objc_msgSend(v18, sel_setBackgroundColor_, v19);

    objc_msgSend(v14, sel_setAllowsEditing_, 0);
    objc_msgSend(v14, sel_setAllowsActions_, 0);
    id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v22);
    objc_msgSend(v14, sel_setContactStore_, v20);

    id v21 = objc_msgSend(v3, sel_navigationController);
    objc_msgSend(v21, sel_pushViewController_animated_, v14, 1);
  }
  else
  {
    __break(1u);
  }
}

void PeoplePickerViewController.didTapTextViewAccessoryButton(for:anchoredTo:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationKit);
  id v6 = a2;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unsigned int v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)unsigned int v9 = 136315138;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v10 = v6;
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v7, v8, "Showing contact picker from accessory button, anchorView: %s", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  if (*(void *)(v3 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addButtonHandler))
  {
    uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_addButtonHandler + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = *(void (**)(id, uint64_t, uint64_t))(v13 + 80);
    swift_unknownObjectRetain();
    v15(v6, ObjectType, v13);
    swift_unknownObjectRelease();
  }
}

uint64_t PeoplePickerViewController.searchController(_:contextMenuConfigurationFor:)()
{
  return 0;
}

void PeoplePickerViewController.actionBar(_:selectedAction:)(uint64_t a1, void *a2, char a3)
{
  switch((unint64_t)a2)
  {
    case 1uLL:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      char v4 = 0;
      goto LABEL_13;
    case 2uLL:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      char v4 = 1;
LABEL_13:
      PeoplePickerViewController.startCall(videoEnabled:)(v4);
      break;
    case 3uLL:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      PeoplePickerViewController.addPeople()();
      break;
    case 4uLL:
      PeoplePickerViewController.handleShareLinkWithMessagesAction()();
      break;
    case 5uLL:
      PeoplePickerViewController.presentMessageComposeSheetWithActivity()();
      break;
    case 6uLL:
      objc_msgSend(v3, sel_cancelButtonTapped);
      break;
    default:
      uint64_t v7 = one-time initialization token for conversationKit;
      id v8 = a2;
      if (v7 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      PeoplePickerViewController.dialTelephonyCall(handle:rttType:)(a2, a3);
      outlined consume of PeoplePickerAction(a2);
      break;
  }
}

void PeoplePickerViewController.handleShareLinkWithMessagesAction()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel);
  swift_beginAccess();
  PeoplePickerViewController.reportIncompatibilityEvent(with:reason:)(*(unsigned char *)(v1 + 16), 2);
  uint64_t v2 = PeoplePickerViewController.smsAccount.getter();

  if (v2)
  {
    uint64_t v3 = PeoplePickerViewController.smsAccount.getter();
    if (!v3)
    {
      __break(1u);
      goto LABEL_10;
    }
    char v4 = v3;
    unsigned int v5 = objc_msgSend(v3, sel_isSMSRelayCapable);

    if (v5)
    {
      id v6 = PeoplePickerViewController.smsAccount.getter();
      if (v6)
      {
        uint64_t v7 = v6;
        unsigned __int8 v8 = objc_msgSend(v6, sel_allowsSMSRelay);

        if ((v8 & 1) == 0)
        {
          uint64_t v9 = swift_allocObject();
          swift_unknownObjectWeakInit();
          swift_retain();
          PeoplePickerViewController.showSMSRelayUpgradeAlert(withCompletion:)((uint64_t)partial apply for closure #1 in PeoplePickerViewController.handleShareLinkWithMessagesAction(), v9);
          swift_release_n();
          return;
        }
        goto LABEL_6;
      }
LABEL_10:
      __break(1u);
      return;
    }
  }
LABEL_6:
  PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()();
}

uint64_t PeoplePickerViewController.presentMessageComposeSheetWithActivity()()
{
  if (one-time initialization token for conversationKit != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController), sel_recipients);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = (void *)v0;
    if (!v3)
    {
      uint64_t v5 = MEMORY[0x1E4FBC860];
LABEL_28:
      uint64_t v17 = swift_bridgeObjectRelease_n();
      if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v24) + 0x360))(v17))
      {
        uint64_t v19 = v18;
        uint64_t ObjectType = swift_getObjectType();
        id v21 = CNAutocompleteSearchController.messagesChatGUID.getter();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t))(v19 + 48))(v5, v21, v22, ObjectType, v19);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    if (v3 < 1) {
      break;
    }
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x1E4FBC860];
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v4, v2) : *(id *)(v2 + 8 * v4 + 32);
      uint64_t v7 = v6;
      uint64_t v0 = CNComposeRecipient.normalizedAddresses()();

      uint64_t v8 = *(void *)(v0 + 16);
      uint64_t v9 = *(void *)(v5 + 16);
      if (__OFADD__(v9, v8)) {
        break;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v9 + v8 > *(void *)(v5 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v10;
      }
      if (*(void *)(v0 + 16))
      {
        uint64_t v11 = *(void *)(v5 + 16);
        if ((*(void *)(v5 + 24) >> 1) - v11 < v8) {
          goto LABEL_35;
        }
        unint64_t v12 = v5 + 16 * v11 + 32;
        if (v0 + 32 < v12 + 16 * v8 && v12 < v0 + 32 + 16 * v8) {
          goto LABEL_40;
        }
        swift_arrayInitWithCopy();
        if (v8)
        {
          uint64_t v14 = *(void *)(v5 + 16);
          BOOL v15 = __OFADD__(v14, v8);
          uint64_t v16 = v14 + v8;
          if (v15) {
            goto LABEL_36;
          }
          *(void *)(v5 + 16) = v16;
        }
      }
      else if (v8)
      {
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
      if (v3 == ++v4) {
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once();
  }
  __break(1u);
LABEL_40:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in PeoplePickerViewController.handleShareLinkWithMessagesAction()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()();
  }
}

void PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationKit != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    static os_log_type_t.default.getter();
    uint64_t v2 = MEMORY[0x1E4FBC860];
    os_log(_:dso:log:type:_:)();
    uint64_t v3 = OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar;
    uint64_t v4 = *(char **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_actionBar);
    uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
    if (v4)
    {
      id v6 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x170);
      uint64_t v7 = v4;
      v6(0);
    }
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v9 = *(char **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversationLink);
    if (!v9)
    {
      uint64_t v24 = v8;
      uint64_t v25 = v3;
      uint64_t v26 = *(char **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversation);
      if (v26)
      {
        uint64_t v27 = self;
        id v28 = v26;
        id v29 = objc_msgSend(v27, sel_sharedInstance);
        id v30 = objc_msgSend(v29, sel_conversationManager);

        uint64_t v47 = partial apply for closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink();
        uint64_t v48 = v24;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v44 = 1107296256;
        uint64_t v45 = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
        uint64_t v46 = &block_descriptor_119;
        uint64_t v31 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v30, sel_generateLinkForConversation_completionHandler_, v28, v31);
        swift_release();
        _Block_release(v31);
      }
      else
      {
        id v32 = objc_msgSend(self, sel_sharedInstance);
        id v33 = objc_msgSend(v32, sel_conversationManager);

        PeoplePickerViewController.currentRecipientHandlesWithFaceTimeAvailable()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v47 = partial apply for closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink();
        uint64_t v48 = v24;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v44 = 1107296256;
        uint64_t v45 = thunk for @escaping @callee_guaranteed (@guaranteed ASCLockupRequest?, @guaranteed Error?) -> ();
        uint64_t v46 = &block_descriptor_116;
        uint64_t v35 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v33, sel_generateLinkWithInvitedMemberHandles_linkLifetimeScope_completionHandler_, isa, 0, v35);
        swift_release();
        _Block_release(v35);
      }
LABEL_26:
      id v37 = *(char **)((char *)v1 + v25);
      if (v37)
      {
        uint64_t v38 = *(void (**)(uint64_t))((*v5 & *v37) + 0x170);
        uint64_t v39 = v37;
        v38(1);
      }
      return;
    }
    uint64_t v42 = v3;
    uint64_t v10 = *(char **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController);
    id v41 = v9;
    id v11 = objc_msgSend(v10, sel_recipients);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v13)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        uint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_25:
        uint64_t v36 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel);
        swift_beginAccess();
        specialized PeoplePickerViewController.presentMessageComposeViewController(for:withRecipientHandles:shouldIgnoreEmails:delegate:)(v41, v15, *(unsigned __int8 *)(v36 + 16) != 1, (uint64_t)v1, v1);

        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v25 = v42;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v13) {
        goto LABEL_24;
      }
    }
    uint64_t aBlock = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v13 < 0) {
      break;
    }
    uint64_t v40 = v1;
    uint64_t v14 = 0;
    uint64_t v15 = aBlock;
    uint64_t v1 = &selRef_address;
    while (v13 != v14)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x1C87744F0](v14, v12);
      }
      else {
        id v16 = *(id *)(v12 + 8 * v14 + 32);
      }
      uint64_t v17 = v16;
      uint64_t v18 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v16, (SEL *)&selRef_address);
      if (!v19) {
        goto LABEL_30;
      }
      uint64_t v20 = v18;
      uint64_t v21 = v19;

      uint64_t aBlock = v15;
      unint64_t v22 = *(void *)(v15 + 16);
      if (v22 >= *(void *)(v15 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v15 = aBlock;
      }
      ++v14;
      *(void *)(v15 + 16) = v22 + 1;
      uint64_t v23 = v15 + 16 * v22;
      *(void *)(v23 + 32) = v20;
      *(void *)(v23 + 40) = v21;
      if (v13 == v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v40;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_22:
    swift_once();
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

void PeoplePickerViewController.showSMSRelayUpgradeAlert(withCompletion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = PeoplePickerViewController.smsAccount.getter();
  if (v5)
  {
    id v6 = v5;
    id v32 = v2;
    uint64_t v33 = a1;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
    uint64_t v7 = self;
    id v8 = objc_msgSend(v7, sel_conversationKit);
    v36._id object = (void *)0xE000000000000000;
    v9._id object = (void *)0x80000001C3799720;
    v9._uint64_t countAndFlagsBits = 0xD000000000000012;
    v10.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v10.value._id object = (void *)0xEF74694B6E6F6974;
    v11._uint64_t countAndFlagsBits = 0;
    v11._id object = (void *)0xE000000000000000;
    v36._uint64_t countAndFlagsBits = 0;
    Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v36);

    id v13 = objc_msgSend(v7, (SEL)&selRef_viewIfLoaded + 1);
    v14._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v37._id object = (void *)0xE000000000000000;
    v14._id object = (void *)0x80000001C3799740;
    v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v15.value._id object = (void *)0xEF74694B6E6F6974;
    v16._uint64_t countAndFlagsBits = 0;
    v16._id object = (void *)0xE000000000000000;
    v37._uint64_t countAndFlagsBits = 0;
    Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v37);

    id v34 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v12._countAndFlagsBits, (uint64_t)v12._object, v17._countAndFlagsBits, (uint64_t)v17._object, 1);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
    id v18 = objc_msgSend(v7, sel_conversationKit);
    v38._id object = (void *)0xE000000000000000;
    v19._uint64_t countAndFlagsBits = 0x4E4F5F4E525554;
    v19._id object = (void *)0xE700000000000000;
    v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v20.value._id object = (void *)0xEF74694B6E6F6974;
    v21._uint64_t countAndFlagsBits = 0;
    v21._id object = (void *)0xE000000000000000;
    v38._uint64_t countAndFlagsBits = 0;
    Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v38);

    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v6;
    v23[3] = v33;
    v23[4] = a2;
    id v24 = v6;
    swift_retain();
    id v25 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v22._countAndFlagsBits, (uint64_t)v22._object, 0, (uint64_t)partial apply for closure #1 in PeoplePickerViewController.showSMSRelayUpgradeAlert(withCompletion:), (uint64_t)v23);
    objc_msgSend(v34, sel_addAction_, v25);

    id v26 = objc_msgSend(v7, sel_conversationKit);
    v39._id object = (void *)0xE000000000000000;
    v27._uint64_t countAndFlagsBits = 0x4C45434E4143;
    v27._id object = (void *)0xE600000000000000;
    v28.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v28.value._id object = (void *)0xEF74694B6E6F6974;
    v29._uint64_t countAndFlagsBits = 0;
    v29._id object = (void *)0xE000000000000000;
    v39._uint64_t countAndFlagsBits = 0;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v39);

    id v31 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v30._countAndFlagsBits, (uint64_t)v30._object, 1, 0, 0);
    objc_msgSend(v34, sel_addAction_, v31);

    objc_msgSend(v32, sel_presentViewController_animated_completion_, v34, 1, 0);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

void closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (a2)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
      aBlock[0] = a2;
      id v9 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v10 = String.init<A>(reflecting:)();
      uint64_t v12 = v11;
      *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v8 + 32) = v10;
      *(void *)(v8 + 40) = v12;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    else if (a1)
    {
      id v13 = a1;
      PeoplePickerViewController.currentConversationLink.setter((uint64_t)a1);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v29 = static OS_dispatch_queue.main.getter();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v7;
      *(void *)(v14 + 24) = v13;
      aBlock[4] = partial apply for closure #1 in closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink();
      aBlock[5] = v14;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_125;
      Swift::String_optional v15 = _Block_copy(aBlock);
      id v27 = v13;
      id v26 = v7;
      swift_release();
      uint64_t v16 = type metadata accessor for DispatchQoS();
      Swift::String_optional v28 = &v25;
      uint64_t v17 = *(void *)(v16 - 8);
      MEMORY[0x1F4188790](v16);
      Swift::String v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      static DispatchQoS.unspecified.getter();
      uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
      uint64_t v25 = (uint64_t)&v25;
      uint64_t v21 = *(void *)(v20 - 8);
      MEMORY[0x1F4188790](v20);
      uint64_t v23 = (char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      aBlock[0] = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1F41AAEE0]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v24 = (void *)v29;
      MEMORY[0x1C8773BA0](0, v19, v23, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    }
    else
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:type:_:)();
    }
  }
}

void closure #1 in closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()(char *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      uint64_t v19 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v6 < 0) {
        break;
      }
      uint64_t v17 = a2;
      uint64_t v18 = v3;
      a2 = 0;
      uint64_t v7 = v19;
      uint64_t v3 = (char *)(v5 & 0xC000000000000001);
      while ((void *)v6 != a2)
      {
        if (v3) {
          id v8 = (id)MEMORY[0x1C87744F0](a2, v5);
        }
        else {
          id v8 = *(id *)(v5 + 8 * (void)a2 + 32);
        }
        id v9 = v8;
        uint64_t v10 = outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(v8, (SEL *)&selRef_address);
        if (!v11) {
          goto LABEL_19;
        }
        uint64_t v12 = v10;
        uint64_t v13 = v11;

        unint64_t v14 = *(void *)(v19 + 16);
        if (v14 >= *(void *)(v19 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        a2 = (char *)a2 + 1;
        *(void *)(v19 + 16) = v14 + 1;
        uint64_t v15 = v19 + 16 * v14;
        *(void *)(v15 + 32) = v12;
        *(void *)(v15 + 40) = v13;
        if ((void *)v6 == a2)
        {
          swift_bridgeObjectRelease();
          a2 = v17;
          uint64_t v3 = v18;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_17:
    uint64_t v16 = *(void *)&v3[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_viewModel];
    swift_beginAccess();
    specialized PeoplePickerViewController.presentMessageComposeViewController(for:withRecipientHandles:shouldIgnoreEmails:delegate:)(a2, v7, *(unsigned __int8 *)(v16 + 16) != 1, (uint64_t)v3, v3);
    swift_bridgeObjectRelease();
  }
}

uint64_t PeoplePickerViewController.currentRecipientHandlesWithFaceTimeAvailable()()
{
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  unint64_t v2 = OUTLINED_FUNCTION_41_7();

  unint64_t v3 = specialized _ArrayProtocol.filter(_:)(v2, v0);
  unint64_t v4 = v3;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x1E4FBC860];
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_15;
  }
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x1C87744F0](i, v4);
    }
    else {
      id v8 = *(id *)(v4 + 8 * i + 32);
    }
    id v9 = v8;
    uint64_t v10 = (void *)CNComposeRecipient.tuHandle.getter();
    id v11 = (id)TUNormalizedHandleForTUHandle();

    if (v11)
    {
      MEMORY[0x1C87733A0]();
      if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v13;
LABEL_16:
  swift_bridgeObjectRelease();
  return specialized Set.init<A>(_:)(v12);
}

id PeoplePickerViewController.currentRecipientsWithFaceTimeAvailable()()
{
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  OUTLINED_FUNCTION_41_7();

  unint64_t v2 = v0;
  unint64_t v3 = OUTLINED_FUNCTION_35_7();
  unint64_t v5 = specialized _ArrayProtocol.filter(_:)(v3, v4);
  specialized Sequence.compactMap<A>(_:)(v5, v1);
  OUTLINED_FUNCTION_15_23();
  return v1;
}

id PeoplePickerViewController.currentRecipientsWithFaceTimeUnvailable()()
{
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_searchController], sel_recipients);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  OUTLINED_FUNCTION_41_7();

  unint64_t v2 = v0;
  unint64_t v3 = OUTLINED_FUNCTION_35_7();
  unint64_t v5 = specialized _ArrayProtocol.filter(_:)(v3, v4);
  specialized Sequence.compactMap<A>(_:)(v5, v1);
  OUTLINED_FUNCTION_15_23();
  return v1;
}

Swift::Void __swiftcall PeoplePickerViewController.messageComposeViewController(_:didFinishWith:)(MFMessageComposeViewController *_, MessageComposeResult didFinishWith)
{
  [(MFMessageComposeViewController *)_ dismissViewControllerAnimated:1 completion:0];
  PeoplePickerViewController.handleMessageComposeCompletion(withResult:)(didFinishWith);
}

void PeoplePickerViewController.handleMessageComposeCompletion(withResult:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_style) == 1 && a1 == 1) {
      PeoplePickerViewController.addPeople()();
    }
  }
  else
  {
    PeoplePickerViewController.handleMessageComposeCompletionForInviteFlow(withResult:)(a1);
  }
}

void PeoplePickerViewController.handleMessageComposeCompletionForInviteFlow(withResult:)(uint64_t a1)
{
  unint64_t v2 = v1;
  unint64_t v3 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26PeoplePickerViewController_currentConversationLink);
  if (v3)
  {
    if (a1 != 1)
    {
      uint64_t v19 = self;
      id v20 = v3;
      id v21 = objc_msgSend(v19, sel_sharedInstance);
      id v22 = objc_msgSend(v21, sel_conversationManager);

      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v20;
      aBlock[4] = partial apply for closure #1 in PeoplePickerViewController.handleMessageComposeCompletionForInviteFlow(withResult:);
      aBlock[5] = v23;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
      aBlock[3] = &block_descriptor_101;
      id v24 = _Block_copy(aBlock);
      id v25 = v20;
      swift_release();
      objc_msgSend(v22, sel_invalidateLink_completionHandler_, v25, v24);
      _Block_release(v24);

      PeoplePickerViewController.currentConversationLink.setter(0);
      return;
    }
    id v34 = v3;
    unint64_t v4 = (unint64_t)PeoplePickerViewController.currentRecipientsWithFaceTimeUnvailable()();
    uint64_t v5 = (uint64_t)PeoplePickerViewController.currentRecipientsWithFaceTimeAvailable()();
    unint64_t v6 = v5;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v5 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v7 >= 1)
    {
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v5 = swift_bridgeObjectRelease();
        if (v30 == 1)
        {
          swift_bridgeObjectRetain();
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
            swift_bridgeObjectRelease();
LABEL_20:
            swift_bridgeObjectRelease();
            if (one-time initialization token for conversationKit != -1) {
              swift_once();
            }
            static os_log_type_t.error.getter();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            uint64_t v26 = swift_allocObject();
            *(_OWORD *)(v26 + 16) = xmmword_1C3769620;
            aBlock[0] = v6;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PickablePerson]);
            uint64_t v27 = String.init<A>(reflecting:)();
            uint64_t v29 = v28;
            *(void *)(v26 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v26 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v26 + 32) = v27;
            *(void *)(v26 + 40) = v29;
            os_log(_:dso:log:type:_:)();
            swift_bridgeObjectRelease();

            return;
          }
LABEL_9:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0, v6);
          if ((v6 & 0xC000000000000001) != 0) {
            id v8 = (char *)MEMORY[0x1C87744F0](0, v6);
          }
          else {
            id v8 = (char *)*(id *)(v6 + 32);
          }
          id v9 = v8;
          swift_bridgeObjectRelease();
          uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address];
          uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address + 8];
          swift_bridgeObjectRetain();
          uint64_t v12 = (void *)MEMORY[0x1C87730B0](v10, v11);
          swift_bridgeObjectRelease();
          id v13 = (id)TUCopyIDSCanonicalAddressForDestinationID();

          if (v13)
          {
            uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v16 = v15;

            v17._uint64_t countAndFlagsBits = v14;
            v17._id object = v16;
            Swift::Bool v18 = PeoplePickerViewModel.isWebCapableAvailable(for:)(v17);

            uint64_t v5 = swift_bridgeObjectRelease();
LABEL_28:
            if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x360))(v5))
            {
              uint64_t v32 = v31;
              uint64_t ObjectType = swift_getObjectType();
              (*(void (**)(id, unint64_t, unint64_t, Swift::Bool, uint64_t, uint64_t))(v32 + 56))(v34, v4, v6, v18, ObjectType, v32);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            return;
          }

          goto LABEL_20;
        }
      }
      else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
      {
        swift_bridgeObjectRetain();
        goto LABEL_9;
      }
    }
    Swift::Bool v18 = 0;
    goto LABEL_28;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
}

void closure #1 in PeoplePickerViewController.handleMessageComposeCompletionForInviteFlow(withResult:)(int a1, id a2, void *a3)
{
  if (a2)
  {
    id v5 = a2;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1C37696D0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationLink);
    id v7 = a3;
    uint64_t v8 = String.init<A>(reflecting:)();
    uint64_t v10 = v9;
    uint64_t v11 = MEMORY[0x1E4FBB1A0];
    *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v6 + 64) = v12;
    *(void *)(v6 + 32) = v8;
    *(void *)(v6 + 40) = v10;
    id v13 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v14 = String.init<A>(reflecting:)();
    *(void *)(v6 + 96) = v11;
    *(void *)(v6 + 104) = v12;
    *(void *)(v6 + 72) = v14;
    *(void *)(v6 + 80) = v15;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  id v6 = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  uint64_t v8 = *(void *)(v5 + 16);
  v10[0] = v5 + 32;
  v10[1] = v8;
  id v9 = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v10, a2 & 1, v9);
  specialized ContiguousArray._endMutation()();
}

id @nonobjc CNComposeRecipient.init(contact:address:kind:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a3)
  {
    uint64_t v8 = (void *)MEMORY[0x1C87730B0](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  id v9 = objc_msgSend(v5, sel_initWithContact_address_kind_, a1, v8, a4);

  return v9;
}

uint64_t type metadata accessor for PeoplePickerViewController()
{
  return self;
}

uint64_t sub_1C3107AE4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(uint64_t a1)
{
  closure #1 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(a1, v1);
}

void partial apply for closure #2 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)()
{
  closure #2 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(v0, PeoplePickerViewController.scheduleIDSQuery());
}

uint64_t _sIeg_ytIegn_TRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

void partial apply for closure #3 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)()
{
  closure #2 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(v0, PeoplePickerViewController.scheduleIDSQueryForGroups());
}

void partial apply for closure #4 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)()
{
  closure #2 in PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(v0, PeoplePickerViewController.scheduleIDSCachedQuery());
}

uint64_t sub_1C3107BBC()
{
  swift_release();
  return swift_deallocObject();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = v3;
  Swift::Int v7 = a1[1];
  id v8 = a3;
  Swift::Int v9 = _minimumMergeRunLength(_:)(v7);
  if (v9 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      if (v7) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v7, 1, a1, a2 & 1, v8);
      }
      else {

      }
      goto LABEL_115;
    }
    goto LABEL_138;
  }
  Swift::Int v10 = v9;
  uint64_t v11 = specialized static Array._allocateUninitialized(_:)(v7 / 2);
  uint64_t v113 = v12;
  uint64_t v121 = v11;
  uint64_t v110 = v7;
  uint64_t v120 = v8;
  uint64_t v103 = a1;
  if (v7 <= 0)
  {
LABEL_98:
    uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v4 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_99:
    if (v4 < 2)
    {
LABEL_113:
      swift_bridgeObjectRelease();
      if (v110 >= -1) {
        goto LABEL_114;
      }
      goto LABEL_142;
    }
    uint64_t v96 = *v103;
    uint64_t v115 = *v103;
    while (1)
    {
      unint64_t v97 = v4 - 2;
      if (v4 < 2) {
        break;
      }
      if (!v96) {
        goto LABEL_146;
      }
      Swift::Int v7 = (Swift::Int)v15;
      uint64_t v98 = *(void *)&v15[16 * v97 + 32];
      uint64_t v99 = *(void *)&v15[16 * v4 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v96 + 8 * v98), (uint64_t *)(v96 + 8 * *(void *)&v15[16 * v4 + 16]), v96 + 8 * v99, v113, a2 & 1, v8);
      if (v5) {
        goto LABEL_96;
      }
      if (v99 < v98) {
        goto LABEL_133;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v15);
      }
      if (v97 >= *((void *)v15 + 2)) {
        goto LABEL_134;
      }
      uint64_t v100 = &v15[16 * v97 + 32];
      *(void *)uint64_t v100 = v98;
      *((void *)v100 + 1) = v99;
      unint64_t v101 = *((void *)v15 + 2);
      if (v4 > v101) {
        goto LABEL_135;
      }
      Swift::Int v7 = v101 - 1;
      memmove(&v15[16 * v4 + 16], &v15[16 * v4 + 32], 16 * (v101 - v4));
      *((void *)v15 + 2) = v101 - 1;
      unint64_t v4 = v101 - 1;
      BOOL v79 = v101 > 2;
      id v8 = v120;
      uint64_t v96 = v115;
      if (!v79) {
        goto LABEL_113;
      }
    }
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:

    __break(1u);
LABEL_144:
    id v8 = v120;

    __break(1u);
LABEL_145:

    __break(1u);
LABEL_146:

    __break(1u);
    return;
  }
  int64_t v104 = v10;
  int64_t v13 = 0;
  uint64_t v14 = *a1;
  uint64_t v102 = *a1 - 8;
  uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v16 = v7;
  uint64_t v118 = v14;
  while (1)
  {
    int64_t v17 = v13;
    unint64_t v4 = v13 + 1;
    int64_t v114 = v13;
    if (v13 + 1 < v16)
    {
      uint64_t v18 = *(void *)(v14 + 8 * v4);
      uint64_t v19 = *(void *)(v14 + 8 * v13);
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 16) = v8;
      uint64_t v111 = swift_allocObject();
      *(void *)(v111 + 16) = v8;
      id v20 = v8;
      swift_retain_n();
      uint64_t v21 = v19;
      swift_retain_n();
      unint64_t v4 = (unint64_t)v20;
      uint64_t v22 = v21;
      Swift::Int v7 = v111;
      int v116 = specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(v18, v22, a2 & 1, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:), v106, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #6 in implicit closure #5 in PeoplePickerViewController.preferredRecipient(for:));
      swift_release_n();
      swift_release_n();
      swift_release();
      swift_release();
      if (v17 + 2 >= v110)
      {
        int64_t v32 = v17 + 2;
      }
      else
      {
        uint64_t v107 = v15;
        uint64_t v23 = v5;
        int64_t v24 = v17;
        while (1)
        {
          uint64_t v25 = v14 + 8 * v24;
          Swift::Int v7 = *(void *)(v25 + 8);
          uint64_t v26 = *(void *)(v25 + 16);
          uint64_t v27 = swift_allocObject();
          *(void *)(v27 + 16) = v4;
          *(void *)(swift_allocObject() + 16) = v4;
          id v28 = (id)v4;
          swift_retain_n();
          swift_retain_n();
          id v29 = v28;
          int v30 = specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(v26, v7, a2 & 1, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:), v27, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #6 in implicit closure #5 in PeoplePickerViewController.preferredRecipient(for:));
          swift_release_n();
          swift_release_n();
          swift_release();
          swift_release();
          if ((v116 ^ v30)) {
            break;
          }
          uint64_t v31 = v24 + 3;
          ++v24;
          uint64_t v14 = v118;
          if (v31 >= v110)
          {
            uint64_t v15 = v107;
            int64_t v32 = v110;
            uint64_t v5 = v23;
            goto LABEL_12;
          }
        }
        int64_t v32 = v24 + 2;
        uint64_t v5 = v23;
        uint64_t v15 = v107;
        uint64_t v14 = v118;
LABEL_12:
        int64_t v17 = v114;
      }
      if (v116)
      {
        if (v32 < v17) {
          goto LABEL_139;
        }
        int64_t v33 = v32;
        if (v17 >= v32)
        {
          Swift::Int v16 = v110;
          unint64_t v4 = v32;
          goto LABEL_23;
        }
        id v34 = (uint64_t *)(v102 + 8 * v32);
        int64_t v35 = v17;
        Swift::String v36 = (uint64_t *)(v14 + 8 * v17);
        do
        {
          if (v35 != --v33)
          {
            if (!v14) {
              goto LABEL_145;
            }
            uint64_t v37 = *v36;
            *Swift::String v36 = *v34;
            *id v34 = v37;
          }
          ++v35;
          --v34;
          ++v36;
        }
        while (v35 < v33);
      }
      Swift::Int v16 = v110;
      unint64_t v4 = v32;
    }
LABEL_23:
    if ((uint64_t)v4 < v16)
    {
      if (__OFSUB__(v4, v17)) {
        goto LABEL_137;
      }
      if ((uint64_t)(v4 - v17) < v104)
      {
        if (__OFADD__(v17, v104)) {
          goto LABEL_140;
        }
        if (v17 + v104 >= v16) {
          Swift::Int v38 = v16;
        }
        else {
          Swift::Int v38 = v17 + v104;
        }
        if (v38 < v17) {
          goto LABEL_141;
        }
        if (v4 != v38)
        {
          uint64_t v105 = v5;
          uint64_t v108 = v15;
          Swift::String v39 = (unint64_t *)(v102 + 8 * v4);
          unint64_t v112 = v38;
          do
          {
            uint64_t v40 = *(void *)(v14 + 8 * v4);
            int64_t v41 = v17;
            uint64_t v117 = v39;
            while (1)
            {
              unint64_t v42 = v4;
              unint64_t v4 = *v39;
              uint64_t v43 = swift_allocObject();
              *(void *)(v43 + 16) = v120;
              *(void *)(swift_allocObject() + 16) = v120;
              id v44 = v120;
              swift_retain_n();
              swift_retain_n();
              Swift::Int v7 = (Swift::Int)v44;
              char v45 = specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(v40, v4, a2 & 1, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in closure #2 in PeoplePickerViewController.preferredRecipient(for:), v43, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in closure #2 in PeoplePickerViewController.preferredRecipient(for:));
              swift_release_n();
              swift_release_n();
              swift_release();
              swift_release();
              if ((v45 & 1) == 0) {
                break;
              }
              uint64_t v14 = v118;
              if (!v118) {
                goto LABEL_143;
              }
              unint64_t v4 = v42;
              unint64_t v46 = *v39;
              uint64_t v40 = v39[1];
              *Swift::String v39 = v40;
              v39[1] = v46;
              --v39;
              if (v42 == ++v41) {
                goto LABEL_39;
              }
            }
            uint64_t v14 = v118;
            unint64_t v4 = v42;
LABEL_39:
            ++v4;
            int64_t v17 = v114;
            Swift::String v39 = v117 + 1;
          }
          while (v4 != v112);
          unint64_t v4 = v112;
          uint64_t v5 = v105;
          uint64_t v15 = v108;
        }
      }
    }
    if ((uint64_t)v4 < v17) {
      goto LABEL_136;
    }
    int64_t v109 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
    }
    unint64_t v48 = *((void *)v15 + 2);
    unint64_t v47 = *((void *)v15 + 3);
    unint64_t v4 = v48 + 1;
    if (v48 >= v47 >> 1) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, v15);
    }
    *((void *)v15 + 2) = v4;
    uint64_t v49 = &v15[16 * v48 + 32];
    *(void *)uint64_t v49 = v17;
    *((void *)v49 + 1) = v109;
    if (v48) {
      break;
    }
    unint64_t v4 = 1;
    id v8 = v120;
LABEL_90:
    int64_t v13 = v109;
    Swift::Int v16 = v110;
    if (v109 >= v110) {
      goto LABEL_99;
    }
  }
  id v8 = v120;
  id v50 = v15 + 32;
  while (1)
  {
    unint64_t v51 = v4 - 1;
    if (v4 >= 4)
    {
      UIMenuElementSize v56 = &v50[16 * v4];
      uint64_t v57 = *((void *)v56 - 8);
      uint64_t v58 = *((void *)v56 - 7);
      BOOL v62 = __OFSUB__(v58, v57);
      uint64_t v59 = v58 - v57;
      if (v62) {
        goto LABEL_121;
      }
      uint64_t v61 = *((void *)v56 - 6);
      uint64_t v60 = *((void *)v56 - 5);
      BOOL v62 = __OFSUB__(v60, v61);
      uint64_t v54 = v60 - v61;
      char v55 = v62;
      if (v62) {
        goto LABEL_122;
      }
      unint64_t v63 = v4 - 2;
      long long v64 = &v50[16 * v4 - 32];
      uint64_t v66 = *(void *)v64;
      uint64_t v65 = *((void *)v64 + 1);
      BOOL v62 = __OFSUB__(v65, v66);
      uint64_t v67 = v65 - v66;
      if (v62) {
        goto LABEL_123;
      }
      BOOL v62 = __OFADD__(v54, v67);
      uint64_t v68 = v54 + v67;
      if (v62) {
        goto LABEL_125;
      }
      if (v68 >= v59)
      {
        uint64_t v86 = &v50[16 * v51];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v62 = __OFSUB__(v87, v88);
        uint64_t v89 = v87 - v88;
        if (v62) {
          goto LABEL_131;
        }
        BOOL v79 = v54 < v89;
        goto LABEL_79;
      }
    }
    else
    {
      if (v4 != 3)
      {
        uint64_t v80 = *((void *)v15 + 4);
        uint64_t v81 = *((void *)v15 + 5);
        BOOL v62 = __OFSUB__(v81, v80);
        uint64_t v73 = v81 - v80;
        char v74 = v62;
        goto LABEL_73;
      }
      uint64_t v53 = *((void *)v15 + 4);
      uint64_t v52 = *((void *)v15 + 5);
      BOOL v62 = __OFSUB__(v52, v53);
      uint64_t v54 = v52 - v53;
      char v55 = v62;
    }
    if (v55) {
      goto LABEL_124;
    }
    unint64_t v63 = v4 - 2;
    id v69 = &v50[16 * v4 - 32];
    uint64_t v71 = *(void *)v69;
    uint64_t v70 = *((void *)v69 + 1);
    BOOL v72 = __OFSUB__(v70, v71);
    uint64_t v73 = v70 - v71;
    char v74 = v72;
    if (v72) {
      goto LABEL_126;
    }
    UIMenuElementSize v75 = &v50[16 * v51];
    uint64_t v77 = *(void *)v75;
    uint64_t v76 = *((void *)v75 + 1);
    BOOL v62 = __OFSUB__(v76, v77);
    uint64_t v78 = v76 - v77;
    if (v62) {
      goto LABEL_128;
    }
    if (__OFADD__(v73, v78)) {
      goto LABEL_130;
    }
    if (v73 + v78 >= v54)
    {
      BOOL v79 = v54 < v78;
LABEL_79:
      if (v79) {
        unint64_t v51 = v63;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v74) {
      goto LABEL_127;
    }
    uint64_t v82 = &v50[16 * v51];
    uint64_t v84 = *(void *)v82;
    uint64_t v83 = *((void *)v82 + 1);
    BOOL v62 = __OFSUB__(v83, v84);
    uint64_t v85 = v83 - v84;
    if (v62) {
      goto LABEL_129;
    }
    if (v85 < v73) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v90 = v51 - 1;
    if (v51 - 1 >= v4)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v14) {
      goto LABEL_144;
    }
    unint64_t v4 = (unint64_t)&v50[16 * v90];
    os_log_type_t v91 = v50;
    uint64_t v92 = *(void *)v4;
    unint64_t v93 = v51;
    Swift::Int v7 = (Swift::Int)&v91[16 * v51];
    uint64_t v94 = *(void *)(v7 + 8);
    specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v14 + 8 * *(void *)v4), (uint64_t *)(v14 + 8 * *(void *)v7), v14 + 8 * v94, v113, a2 & 1, v120);
    if (v5) {
      break;
    }
    if (v94 < v92) {
      goto LABEL_118;
    }
    if (v93 > *((void *)v15 + 2)) {
      goto LABEL_119;
    }
    *(void *)unint64_t v4 = v92;
    id v50 = v15 + 32;
    *(void *)&v15[16 * v90 + 40] = v94;
    unint64_t v95 = *((void *)v15 + 2);
    if (v93 >= v95) {
      goto LABEL_120;
    }
    unint64_t v4 = v95 - 1;
    memmove((void *)v7, (const void *)(v7 + 16), 16 * (v95 - 1 - v93));
    *((void *)v15 + 2) = v95 - 1;
    BOOL v79 = v95 > 2;
    id v8 = v120;
    uint64_t v14 = v118;
    if (!v79) {
      goto LABEL_90;
    }
  }
  id v8 = v120;
LABEL_96:
  swift_bridgeObjectRelease();
  if (v110 < -1)
  {
    __break(1u);
    goto LABEL_98;
  }
LABEL_114:
  *(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()();

  swift_bridgeObjectRelease();
LABEL_115:
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5, void *a6)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v20 = *a4;
    id v8 = (uint64_t *)(*a4 + 8 * a3 - 8);
    char v19 = a5 & 1;
    while (2)
    {
      uint64_t v9 = *(void *)(v20 + 8 * v7);
      uint64_t v10 = a1;
      uint64_t v18 = v8;
      do
      {
        uint64_t v11 = *v8;
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = a6;
        *(void *)(swift_allocObject() + 16) = a6;
        swift_retain_n();
        swift_retain_n();
        id v13 = a6;
        char v14 = specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(v9, v11, v19, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:), v12, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #6 in implicit closure #5 in PeoplePickerViewController.preferredRecipient(for:));
        swift_release_n();
        swift_release_n();
        swift_release();
        swift_release();
        if ((v14 & 1) == 0) {
          break;
        }
        if (!v20)
        {
          __break(1u);
          return;
        }
        uint64_t v15 = *v8;
        uint64_t v9 = v8[1];
        *id v8 = v9;
        v8[1] = v15;
        --v8;
        ++v10;
      }
      while (v7 != v10);
      ++v7;
      id v8 = v18 + 1;
      if (v7 != a2) {
        continue;
      }
      break;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, char a5, void *a6)
{
  id v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = (char *)a2 - (char *)a1;
  uint64_t v11 = a2 - a1;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 8;
  if (v11 >= v13)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    Swift::Int v38 = a4;
    char v14 = &a4[v13];
    if (v9 >= v8 || v12 < 8)
    {
      Swift::Int v16 = a4;
      goto LABEL_41;
    }
    uint64_t v26 = (uint64_t *)(a3 - 8);
    while (1)
    {
      unint64_t v39 = (unint64_t)v14;
      int64_t v41 = v26 + 1;
      uint64_t v27 = *--v14;
      id v28 = v8 - 1;
      uint64_t v29 = *(v8 - 1);
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = a6;
      *(void *)(swift_allocObject() + 16) = a6;
      id v31 = a6;
      swift_retain_n();
      swift_retain_n();
      id v32 = v31;
      char v33 = specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(v27, v29, a5 & 1, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:), v30, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #6 in implicit closure #5 in PeoplePickerViewController.preferredRecipient(for:));
      swift_release_n();
      swift_release_n();
      swift_release();
      swift_release();
      if (v33)
      {
        char v14 = (uint64_t *)v39;
        BOOL v34 = v41 != v8 || v26 >= v8;
        --v8;
        if (!v34) {
          goto LABEL_36;
        }
      }
      else
      {
        BOOL v35 = v41 != (uint64_t *)v39 || (unint64_t)v26 >= v39;
        id v28 = v14;
        if (!v35) {
          goto LABEL_36;
        }
      }
      *uint64_t v26 = *v28;
LABEL_36:
      --v26;
      if (v8 <= v9 || v14 <= v38)
      {
        Swift::Int v16 = v38;
        goto LABEL_41;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  char v14 = &a4[v11];
  BOOL v15 = (unint64_t)v8 >= a3 || v10 < 8;
  Swift::Int v16 = a4;
  if (!v15)
  {
    unint64_t v40 = a3;
    do
    {
      uint64_t v17 = *v8;
      uint64_t v18 = *v16;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = a6;
      *(void *)(swift_allocObject() + 16) = a6;
      swift_retain_n();
      swift_retain_n();
      id v20 = a6;
      char v21 = specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(v17, v18, a5 & 1, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:), v19, (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #6 in implicit closure #5 in PeoplePickerViewController.preferredRecipient(for:));
      swift_release_n();
      swift_release_n();
      swift_release();
      swift_release();
      if (v21)
      {
        uint64_t v22 = v8;
        BOOL v23 = v9 == v8++;
      }
      else
      {
        uint64_t v22 = v16;
        BOOL v23 = v9 == v16++;
      }
      if (!v23) {
        uint64_t *v9 = *v22;
      }
      ++v9;
    }
    while (v16 < v14 && (unint64_t)v8 < v40);
  }
  id v8 = v9;
LABEL_41:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v14 - v16, v8);

  return 1;
}

void outlined bridged method (mbnn) of @objc UINavigationItem.title.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setTitle_, v4);
}

uint64_t outlined bridged method (ob) of @objc TUConversationActivity.concatenatedMetadataDescription.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_41_0();
}

id outlined bridged method (mbnn) of @objc CNComposeRecipient.contactWithKeys(toFetch:)(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(a2, sel_contactWithKeysToFetch_, isa);

  return v4;
}

void partial apply for closure #1 in PeoplePickerViewController.menu(for:)()
{
  PeoplePickerViewController.updateLocalizedSenderIdentity(_:)(*(void **)(v0 + 24));
}

void outlined consume of PeoplePickerAction(id a1)
{
  if ((char *)a1 - 1 >= (char *)6) {
}
  }

unint64_t lazy protocol witness table accessor for type PeoplePickerStyle and conformance PeoplePickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PeoplePickerStyle and conformance PeoplePickerStyle;
  if (!lazy protocol witness table cache variable for type PeoplePickerStyle and conformance PeoplePickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PeoplePickerStyle and conformance PeoplePickerStyle);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PeoplePickerStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3108D68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeoplePickerStyle()
{
  return &type metadata for PeoplePickerStyle;
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.appName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.appName.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.appName.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.stagedActivity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.stagedActivity.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.stagedActivity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.initialRecipientDestinations.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.initialRecipientDestinations.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerProtocol.initialRecipientDestinations.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerCancelled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerDismissed()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerInvited(_:withVideo:button:senderIdentity:messagesGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerAdded(_:shouldAddOtherInvitedToRemoteMembers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerRequestedDialCall(using:video:contact:handle:senderIdentity:ttyType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 40))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerRequestedMessageController(with:chatGUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerSentInvitation(with:facetimeUnavailablePeople:facetimeAvailablePeople:shouldAddOtherInvitedToRemoteMembers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of PeoplePickerViewControllerDelegate.peoplePickerRequestedUnknownContactPopover(for:sourceView:sourceRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t method lookup function for PeoplePickerViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PeoplePickerViewController);
}

uint64_t dispatch thunk of PeoplePickerViewController.selectedSenderIdentity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of PeoplePickerViewController.selectedSenderIdentity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of PeoplePickerViewController.selectedSenderIdentity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of PeoplePickerViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of PeoplePickerViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of PeoplePickerViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of PeoplePickerViewController.appName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of PeoplePickerViewController.appName.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of PeoplePickerViewController.appName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of PeoplePickerViewController.stagedActivity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of PeoplePickerViewController.stagedActivity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of PeoplePickerViewController.stagedActivity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of PeoplePickerViewController.initialRecipientDestinations.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of PeoplePickerViewController.initialRecipientDestinations.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of PeoplePickerViewController.initialRecipientDestinations.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of PeoplePickerViewController.includeMessagesInIDSQueries.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of PeoplePickerViewController.defaultActionBarButtonStyle.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of PeoplePickerViewController.__allocating_init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)()
{
  return (*(uint64_t (**)(void))(v0 + 1096))();
}

uint64_t dispatch thunk of PeoplePickerViewController.willDismissViewAnimated(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x450))();
}

void *type metadata accessor for PeoplePickerViewController.Constants()
{
  return &unk_1F1E9A3C0;
}

void partial apply for closure #1 in PeoplePickerViewController.handleIDSStatusChanged(notification:)()
{
}

uint64_t outlined bridged method (pb) of @objc CNComposeRecipient.children()(void *a1)
{
  id v1 = objc_msgSend(a1, sel_children);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc CNComposeRecipient.address.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_36_9();
  }
  return OUTLINED_FUNCTION_35();
}

void outlined bridged method (mbnn) of @objc CNAutocompleteSearchController.otherRecipientAddresses.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setOtherRecipientAddresses_, isa);
}

void outlined bridged method (mbnn) of @objc UINavigationBar.largeTitleTextAttributes.setter(uint64_t a1, void *a2)
{
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setLargeTitleTextAttributes_, isa);
}

uint64_t outlined bridged method (pb) of @objc NSNotification.userInfo.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_userInfo);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined init with copy of LinkShareCoordinatorProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_48();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

void partial apply for closure #1 in PeoplePickerViewController.handleMessageComposeCompletionForInviteFlow(withResult:)(int a1, void *a2)
{
  closure #1 in PeoplePickerViewController.handleMessageComposeCompletionForInviteFlow(withResult:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1C3109664()
{
  return swift_deallocObject();
}

uint64_t sub_1C3109674()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PeoplePickerViewController.addPeople()()
{
  closure #1 in PeoplePickerViewController.addPeople()(v0[2], v0[3], v0[4]);
}

uint64_t _sypSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_48();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void partial apply for closure #1 in PeoplePickerViewController.handleShareLinkWithMessagesAction()()
{
  closure #1 in PeoplePickerViewController.handleShareLinkWithMessagesAction()(v0);
}

uint64_t sub_1C3109730()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PeoplePickerViewController.showSMSRelayUpgradeAlert(withCompletion:)()
{
  return (*(uint64_t (**)(id))(v0 + 24))(objc_msgSend(*(id *)(v0 + 16), sel_enrollSelfDeviceInSMSRelay));
}

void partial apply for closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()(void *a1, void *a2)
{
  closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()(a1, a2, v2);
}

uint64_t specialized static PeoplePickerRanker.sort(lhs:rhs:isGroupFaceTime:isGroupFaceTimeAvailable:isFaceTimeAvailable:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v41 = type metadata accessor for RecipientResultWrapper();
  unint64_t v42 = &protocol witness table for RecipientResultWrapper;
  v40[0] = a1;
  void v39[3] = v41;
  _DWORD v39[4] = &protocol witness table for RecipientResultWrapper;
  v39[0] = a2;
  swift_retain();
  swift_retain();
  uint64_t v11 = RecipientResultWrapper.idsHandle.getter();
  uint64_t v13 = v12;
  uint64_t v14 = RecipientResultWrapper.idsHandle.getter();
  uint64_t v16 = v15;
  if (!v13)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    if (one-time initialization token for peoplePicker != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.peoplePicker);
    outlined init with copy of Conversation((uint64_t)v40, (uint64_t)v38);
    outlined init with copy of Conversation((uint64_t)v39, (uint64_t)v37);
    int64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v36 = v27;
      *(_DWORD *)uint64_t v26 = 136315394;
      outlined init with copy of Conversation((uint64_t)v38, (uint64_t)v35);
      uint64_t v28 = specialized >> prefix<A>(_:)((uint64_t)v35);
      unint64_t v30 = v29;
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for PeoplePickerHandle?);
      v35[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      *(_WORD *)(v26 + 12) = 2080;
      outlined init with copy of Conversation((uint64_t)v37, (uint64_t)v35);
      uint64_t v31 = specialized >> prefix<A>(_:)((uint64_t)v35);
      unint64_t v33 = v32;
      outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for PeoplePickerHandle?);
      v35[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      _os_log_impl(&dword_1C2F90000, v24, v25, "Missing IDS Handle for %s, %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v27, -1, -1);
      MEMORY[0x1C87760E0](v26, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    }

    if (v13)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v18) = 1;
      goto LABEL_23;
    }
LABEL_22:
    LOBYTE(v18) = 0;
    goto LABEL_23;
  }
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v17 = v14;
  if (a3) {
    a6 = a4;
  }
  unsigned int v18 = a6(v11, v13);
  if ((v18 ^ a6(v17, v16))) {
    goto LABEL_12;
  }
  uint64_t v19 = (void *)MEMORY[0x1C87730B0](v11, v13);
  unsigned int v18 = objc_msgSend(v19, sel_destinationIdIsPhoneNumber);

  id v20 = (void *)MEMORY[0x1C87730B0](v17, v16);
  unsigned int v21 = objc_msgSend(v20, sel_destinationIdIsPhoneNumber);

  if (v18 != v21) {
    goto LABEL_12;
  }
  if (v11 == v17 && v13 == v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  LOBYTE(v18) = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_23:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return v18 & 1;
}

uint64_t specialized PeoplePickerViewController.presentMessageComposeViewController(for:withRecipientHandles:shouldIgnoreEmails:delegate:)(void *a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  int v42 = a3;
  uint64_t v41 = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (char *)&v40 - v11;
  id v13 = objc_msgSend(a1, sel_URL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  unsigned int v18 = (char *)&v40 - v17;
  if (v13)
  {
    id v40 = a5;
    MEMORY[0x1F4188790](v15);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v19(v18, (char *)&v40 - v11, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v8);
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v8) != 1)
    {
      v19(v12, v18, v8);
      id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F350F8]), sel_init);
      objc_msgSend(v20, sel_setMessageComposeDelegate_, a4);
      outlined bridged method (mbgnn) of @objc MFMessageComposeViewController.recipients.setter(v41, v20);
      id v21 = objc_msgSend(self, sel_conversationKit);
      v44._id object = (void *)0xE000000000000000;
      v22._id object = (void *)0x80000001C3799820;
      v22._uint64_t countAndFlagsBits = 0xD000000000000010;
      v23.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v23.value._id object = (void *)0xEF74694B6E6F6974;
      v24._uint64_t countAndFlagsBits = 0;
      v24._id object = (void *)0xE000000000000000;
      v44._uint64_t countAndFlagsBits = 0;
      Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v44);

      outlined bridged method (mbnn) of @objc MFMessageComposeViewController.body.setter(v25._countAndFlagsBits, (uint64_t)v25._object, v20);
      objc_msgSend(v20, sel__setCanEditRecipients_, 0);
      objc_msgSend(v20, sel_setShouldHideClearPluginButton_, 1);
      objc_msgSend(v20, sel__setShouldIgnoreEmailsWhenSending_, v42 & 1);
      id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBF0]), sel_initWithTUConversationLink_, a1);
      uint64_t v27 = TULinkShareItem.dataRepresentation.getter();
      unint64_t v29 = v28;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      URL._bridgeToObjectiveC()(v31);
      unint64_t v33 = v32;
      objc_msgSend(v20, sel_addRichLinkData_withWebpageURL_, isa, v32);

      objc_msgSend(v40, sel_presentViewController_animated_completion_, v20, 1, 0);
      outlined consume of Data._Representation(v27, v29);

      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)&v40 - v17, 1, 1, v8);
  }
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1C3769620;
  uint64_t v43 = a1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationLink);
  id v36 = a1;
  uint64_t v37 = String.init<A>(reflecting:)();
  uint64_t v39 = v38;
  *(void *)(v35 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v35 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v35 + 32) = v37;
  *(void *)(v35 + 40) = v39;
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  id v19;
  id v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Class isa;
  NSURL *v30;
  void *v31;
  void *v32;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  int v41;
  void *v42;
  Swift::String v43;

  uint64_t v41 = a3;
  id v40 = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = objc_msgSend(a1, sel_URL, MEMORY[0x1F4188790](v8).n128_f64[0]);
  id v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v17 = (char *)&v39 - v16;
  if (v12)
  {
    uint64_t v39 = a5;
    MEMORY[0x1F4188790](v14);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unsigned int v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v18(v17, (char *)&v39 - v10, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v8);
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v8) != 1)
    {
      v18(v11, v17, v8);
      uint64_t v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F350F8]), sel_init);
      objc_msgSend(v19, sel_setMessageComposeDelegate_, a4);
      outlined bridged method (mbgnn) of @objc MFMessageComposeViewController.recipients.setter(v40, v19);
      id v20 = objc_msgSend(self, sel_conversationKit);
      v43._id object = (void *)0xE000000000000000;
      v21._id object = (void *)0x80000001C3799820;
      v21._uint64_t countAndFlagsBits = 0xD000000000000010;
      v22.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v22.value._id object = (void *)0xEF74694B6E6F6974;
      v23._uint64_t countAndFlagsBits = 0;
      v23._id object = (void *)0xE000000000000000;
      v43._uint64_t countAndFlagsBits = 0;
      Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v43);

      outlined bridged method (mbnn) of @objc MFMessageComposeViewController.body.setter(v24._countAndFlagsBits, (uint64_t)v24._object, v19);
      objc_msgSend(v19, sel__setCanEditRecipients_, 0);
      objc_msgSend(v19, sel_setShouldHideClearPluginButton_, 1);
      objc_msgSend(v19, sel__setShouldIgnoreEmailsWhenSending_, v41 & 1);
      Swift::String v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBF0]), sel_initWithTUConversationLink_, a1);
      id v26 = TULinkShareItem.dataRepresentation.getter();
      unint64_t v28 = v27;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      URL._bridgeToObjectiveC()(v30);
      unint64_t v32 = v31;
      objc_msgSend(v19, sel_addRichLinkData_withWebpageURL_, isa, v31);

      objc_msgSend(v39, sel_presentViewController_animated_completion_, v19, 1, 0);
      outlined consume of Data._Representation(v26, v28);

      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)&v39 - v16, 1, 1, v8);
  }
  outlined destroy of URL?((uint64_t)v17);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  BOOL v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1C3769620;
  int v42 = a1;
  type metadata accessor for TUConversationLink();
  uint64_t v35 = a1;
  id v36 = String.init<A>(reflecting:)();
  uint64_t v38 = v37;
  *(void *)(v34 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v34 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v34 + 32) = v36;
  *(void *)(v34 + 40) = v38;
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1C310A070()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()()
{
  closure #1 in closure #1 in PeoplePickerViewController.presentMessageComposeSheetWithConversationLink()(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1C310A0B8()
{
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #2 in implicit closure #1 in closure #2 in PeoplePickerViewController.preferredRecipient(for:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #4 in implicit closure #3 in PeoplePickerViewController.preferredRecipient(for:)(a1, a2);
}

BOOL partial apply for implicit closure #4 in implicit closure #3 in closure #2 in PeoplePickerViewController.preferredRecipient(for:)(uint64_t a1, void *a2)
{
  return PeoplePickerViewController.isFaceTimeAvailable(for:)(a1, a2);
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t key path getter for InCallControlsOpenMessagesCell.delegate : InCallControlsOpenMessagesCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for InCallControlsOpenMessagesCell.delegate : InCallControlsOpenMessagesCell(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t InCallControlsOpenMessagesCell.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t InCallControlsOpenMessagesCell.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsOpenMessagesCell.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  _OWORD v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

void InCallControlsOpenMessagesCell.buttonHeightConstraint.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_buttonHeightConstraint);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_buttonHeightConstraint) = a1;
}

uint64_t closure #1 in variable initialization expression of InCallControlsOpenMessagesCell.openMessagesButton()
{
  type metadata accessor for InCallControlButton();
  uint64_t v9 = &type metadata for SymbolImageDescribers.DrawerTable;
  uint64_t v10 = &protocol witness table for SymbolImageDescribers.DrawerTable;
  v8[0] = 0;
  id v0 = objc_msgSend(self, sel_conversationKit);
  v11._id object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x4547415353454DLL;
  v1._id object = (void *)0xE700000000000000;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._id object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._id object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v11);

  uint64_t v5 = InCallControlButton.__allocating_init(style:symbolDescriber:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(4, (uint64_t)v8, v4._countAndFlagsBits, (uint64_t)v4._object, 0x402C000000000000, 0, 0, 0, 56.0, 256);
  uint64_t v6 = *(void **)(v5 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
  objc_msgSend(v6, sel_setAdjustsFontForContentSizeCategory_, 1);
  if (v6) {
    objc_msgSend(v6, sel_setNumberOfLines_, 2);
  }
  objc_msgSend(v6, sel_setAdjustsFontSizeToFitWidth_, 1);
  return v5;
}

id InCallControlsOpenMessagesCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void *InCallControlsOpenMessagesCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_buttonHeightConstraint] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_openMessagesButton;
  Swift::String_optional v2 = v0;
  *(void *)&v0[v1] = closure #1 in variable initialization expression of InCallControlsOpenMessagesCell.openMessagesButton();

  uint64_t v10 = type metadata accessor for InCallControlsOpenMessagesCell();
  double v3 = OUTLINED_FUNCTION_6_2();
  uint64_t v6 = objc_msgSendSuper2(v4, v5, v3, v2, v10);
  uint64_t v7 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x98);
  uint64_t v8 = v6;
  v7();

  return v8;
}

uint64_t type metadata accessor for InCallControlsOpenMessagesCell()
{
  return self;
}

Swift::Void __swiftcall InCallControlsOpenMessagesCell.configureSubviews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v2 - 8);
  double v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIBackgroundConfiguration.listPlainCell()();
  id v5 = objc_msgSend(self, sel_clearColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  uint64_t v6 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v6);
  MEMORY[0x1C8773CE0](v4);
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_openMessagesButton);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  UIControl.addAction(for:handler:)(64, (uint64_t)partial apply for closure #1 in InCallControlsOpenMessagesCell.configureSubviews(), v8);
  swift_release_n();
  if (one-time initialization token for brickButton != -1) {
    swift_once();
  }
  uint64_t v9 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x188);
  uint64_t v10 = swift_bridgeObjectRetain();
  v9(v10);
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v11 = OUTLINED_FUNCTION_0_37();
  objc_msgSend(v11, sel_addSubview_, v7);

  id v12 = objc_msgSend(v7, sel_heightAnchor);
  id v13 = objc_msgSend(v12, sel_constraintGreaterThanOrEqualToConstant_, 52.0);

  InCallControlsOpenMessagesCell.buttonHeightConstraint.setter((uint64_t)v13);
  InCallControlsOpenMessagesCell.updateConstraintsConstants()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C376FBD0;
  id v15 = objc_msgSend(v7, sel_leadingAnchor);
  id v16 = OUTLINED_FUNCTION_0_37();
  id v17 = objc_msgSend(v16, sel_leadingAnchor);

  id v18 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v17);
  *(void *)(v14 + 32) = v18;
  uint64_t v19 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_buttonHeightConstraint);
  if (v19)
  {
    id v20 = self;
    *(void *)(v14 + 40) = v19;
    id v21 = v19;
    id v22 = objc_msgSend(v7, sel_centerYAnchor);
    id v23 = OUTLINED_FUNCTION_0_37();
    id v24 = objc_msgSend(v23, sel_centerYAnchor);

    id v25 = OUTLINED_FUNCTION_1_59();
    *(void *)(v14 + 48) = v25;
    id v26 = objc_msgSend(v7, sel_topAnchor);
    id v27 = OUTLINED_FUNCTION_0_37();
    id v28 = objc_msgSend(v27, sel_topAnchor);

    id v29 = OUTLINED_FUNCTION_1_59();
    *(void *)(v14 + 56) = v29;
    id v30 = objc_msgSend(v7, sel_bottomAnchor);
    id v31 = OUTLINED_FUNCTION_0_37();
    id v32 = objc_msgSend(v31, sel_bottomAnchor);

    id v33 = OUTLINED_FUNCTION_1_59();
    *(void *)(v14 + 64) = v33;
    id v34 = objc_msgSend(v7, sel_trailingAnchor);
    id v35 = OUTLINED_FUNCTION_0_37();
    id v36 = objc_msgSend(v35, sel_trailingAnchor);

    id v37 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v36);
    *(void *)(v14 + 72) = v37;
    v39[1] = v14;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel_activateConstraints_, isa);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1C310AC08()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in InCallControlsOpenMessagesCell.configureSubviews()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (char *)MEMORY[0x1C8776240](v2);
  if (v3)
  {
    double v4 = v3;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v3) + 0x68))())
    {
      uint64_t v6 = v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v8 = *(void (**)(char *, id, uint64_t, uint64_t))(v6 + 8);
      id v9 = *(id *)&v4[OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_openMessagesButton];
      v8(v4, v9, ObjectType, v6);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void partial apply for closure #1 in InCallControlsOpenMessagesCell.configureSubviews()(uint64_t a1)
{
  closure #1 in InCallControlsOpenMessagesCell.configureSubviews()(a1, v1);
}

id InCallControlsOpenMessagesCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsOpenMessagesCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_buttonHeightConstraint] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_openMessagesButton;
  *(void *)&v0[v1] = closure #1 in variable initialization expression of InCallControlsOpenMessagesCell.openMessagesButton();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall InCallControlsOpenMessagesCell.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for InCallControlsOpenMessagesCell();
  objc_msgSendSuper2(&v11, sel_traitCollectionDidChange_, isa);
  if (isa) {
    Class isa = (Class)[(objc_class *)isa preferredContentSizeCategory];
  }
  id v3 = objc_msgSend(v1, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  if (isa)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_13;
    }
  }
  else
  {
  }
  InCallControlsOpenMessagesCell.updateConstraintsConstants()();
LABEL_13:
}

void InCallControlsOpenMessagesCell.updateConstraintsConstants()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_buttonHeightConstraint);
  if (v1)
  {
    uint64_t v2 = *(void **)(*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30InCallControlsOpenMessagesCell_openMessagesButton)
                  + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
    id v4 = v1;
    id v3 = objc_msgSend(v2, sel_font);
    if (!v3) {
      id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
    }
    NSLayoutConstraint.setConstant(_:scaledToFont:)(v3, 52.0);
  }
  else
  {
    __break(1u);
  }
}

id InCallControlsOpenMessagesCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsOpenMessagesCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of InCallControlsOpenMessagesCellDelegate.openMessages(cell:tappedOpenMessagesButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for InCallControlsOpenMessagesCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsOpenMessagesCell);
}

uint64_t dispatch thunk of InCallControlsOpenMessagesCell.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of InCallControlsOpenMessagesCell.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InCallControlsOpenMessagesCell.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of InCallControlsOpenMessagesCell.configureSubviews()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t one-time initialization function for reuseIdentifier()
{
  type metadata accessor for ParticipantCell();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantCell.Type);
  uint64_t result = String.init<A>(describing:)();
  static ParticipantCell.reuseIdentifier = result;
  *(void *)algn_1EA37DF48 = v1;
  return result;
}

uint64_t *ParticipantCell.reuseIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for reuseIdentifier != -1) {
    swift_once();
  }
  return &static ParticipantCell.reuseIdentifier;
}

uint64_t static ParticipantCell.reuseIdentifier.getter()
{
  if (one-time initialization token for reuseIdentifier != -1) {
    swift_once();
  }
  uint64_t v0 = static ParticipantCell.reuseIdentifier;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ParticipantCell.participantIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantIdentifier;
  swift_beginAccess();
  return outlined init with copy of UUID?(v3, a1);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id ParticipantCell.participantView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantView);
}

id ParticipantCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id ParticipantCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_13_18(v2);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantView;
  id v4 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  uint64_t v5 = v0;
  *(void *)&v0[v3] = OUTLINED_FUNCTION_1_60();
  uint64_t v6 = &v5[OBJC_IVAR____TtC15ConversationKit15ParticipantCell_accessibilityDisplayName];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0xE000000000000000;

  double v7 = OUTLINED_FUNCTION_6_2();
  id v10 = objc_msgSendSuper2(v8, v9, v7, v5, ObjectType);
  id v11 = objc_msgSend(v10, sel_contentView);
  ParticipantCell.configureSubviews(in:)(v11);

  return v10;
}

id ParticipantCell.configureSubviews(in:)(void *a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantView);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  ParticipantView.isInRoster.setter(1);
  UIView.addTapInteraction(withTapCount:)(1);
  objc_msgSend(a1, sel_addSubview_, v3);
  id v4 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769580;
  id v6 = objc_msgSend(v3, sel_leadingAnchor);
  id v7 = objc_msgSend(a1, sel_leadingAnchor);
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(void *)(v5 + 32) = v8;
  id v9 = objc_msgSend(v3, sel_trailingAnchor);
  id v10 = objc_msgSend(a1, sel_trailingAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v5 + 40) = v11;
  id v12 = objc_msgSend(v3, sel_topAnchor);
  id v13 = objc_msgSend(a1, sel_topAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v5 + 48) = v14;
  id v15 = objc_msgSend(v3, sel_bottomAnchor);
  id v16 = objc_msgSend(a1, sel_bottomAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v5 + 56) = v17;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, isa);

  static Platform.current.getter();
  objc_msgSend(a1, sel__setContinuousCornerRadius_, 10.0);
  return objc_msgSend(a1, sel_setClipsToBounds_, 1);
}

id ParticipantCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantCell.init(coder:)()
{
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_13_18(v1);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantView;
  id v3 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  *(void *)&v0[v2] = OUTLINED_FUNCTION_1_60();
  id v4 = &v0[OBJC_IVAR____TtC15ConversationKit15ParticipantCell_accessibilityDisplayName];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0xE000000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ParticipantCell.prepareForReuse()()
{
  v7.receiver = v0;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_prepareForReuse);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  uint64_t v6 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantIdentifier;
  swift_beginAccess();
  outlined assign with take of UUID?(v4, v6);
  swift_endAccess();
  ParticipantView.reset()();
}

uint64_t ParticipantCell.configure(with:)()
{
  uint64_t v1 = type metadata accessor for ParticipantViewModel(0);
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  ParticipantViewModel.participantDetails.getter();
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, v9, v14);
  outlined destroy of ParticipantViewModel.ParticipantDetails(v9, type metadata accessor for ParticipantViewModel.ParticipantDetails);
  __swift_storeEnumTagSinglePayload(v13, 0, 1, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantIdentifier;
  swift_beginAccess();
  outlined assign with take of UUID?(v13, v15);
  swift_endAccess();
  ParticipantViewModel.participantDetails.getter();
  id v16 = (uint64_t *)(v9 + *(int *)(v6 + 28));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  swift_bridgeObjectRetain();
  outlined destroy of ParticipantViewModel.ParticipantDetails(v9, type metadata accessor for ParticipantViewModel.ParticipantDetails);
  uint64_t v19 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_accessibilityDisplayName);
  void *v19 = v18;
  v19[1] = v17;
  swift_bridgeObjectRelease();
  ParticipantViewModel.compatibleWithRoster.getter();
  ParticipantView.configure(with:isOneToOneMode:)(v4, 0);
  return outlined destroy of ParticipantViewModel.ParticipantDetails(v4, type metadata accessor for ParticipantViewModel);
}

Swift::Void __swiftcall ParticipantCell.updateAudioPowerForParticipantCell(withPower:)(Swift::Float withPower)
{
}

uint64_t ParticipantCell.accessibilityDisplayName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_accessibilityDisplayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ParticipantCell.accessibilityDisplayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_accessibilityDisplayName);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

id ParticipantCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ParticipantViewModel.ParticipantDetails(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ObjC metadata update function for ParticipantCell()
{
  return type metadata accessor for ParticipantCell();
}

uint64_t type metadata accessor for ParticipantCell()
{
  uint64_t result = type metadata singleton initialization cache for ParticipantCell;
  if (!type metadata singleton initialization cache for ParticipantCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ParticipantCell()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CallControlsFullScreenStatusViewModel.view.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t key path getter for CallControlsFullScreenStatusViewModel.view : CallControlsFullScreenStatusViewModel@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for CallControlsFullScreenStatusViewModel.view : CallControlsFullScreenStatusViewModel(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  return CallControlsFullScreenStatusViewModel.view.setter(v2, v1);
}

uint64_t CallControlsFullScreenStatusViewModel.view.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  CallControlsFullScreenStatusViewModel.view.didset();
  return swift_unknownObjectRelease();
}

uint64_t CallControlsFullScreenStatusViewModel.view.didset()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(1, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void (*CallControlsFullScreenStatusViewModel.view.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  _OWORD v3[3] = v6;
  v3[4] = v7;
  return CallControlsFullScreenStatusViewModel.view.modify;
}

void CallControlsFullScreenStatusViewModel.view.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    CallControlsFullScreenStatusViewModel.view.didset();
  }
  free(v3);
}

id CallControlsFullScreenStatusViewModel.__allocating_init(powerSaverManager:videoStatusProvider:)()
{
  id v0 = objc_allocWithZone((Class)OUTLINED_FUNCTION_4_4());
  return CallControlsFullScreenStatusViewModel.init(powerSaverManager:videoStatusProvider:)();
}

id CallControlsFullScreenStatusViewModel.init(powerSaverManager:videoStatusProvider:)()
{
  OUTLINED_FUNCTION_4_4();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_cancellable] = 0;
  uint64_t v6 = &v1[OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_powerSaverManager];
  *(void *)uint64_t v6 = v4;
  *((void *)v6 + 1) = v3;
  uint64_t v7 = &v1[OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_videoStatusProvider];
  *(void *)uint64_t v7 = v2;
  *((void *)v7 + 1) = v0;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

Swift::Void __swiftcall CallControlsFullScreenStatusViewModel.startObservingStatesIfNeeded()()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_cancellable)) {
    CallControlsFullScreenStatusViewModel.startObservation(_:)(0, 0);
  }
}

uint64_t CallControlsFullScreenStatusViewModel.startObservation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<AnyPublisher<(), Never>>);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_16_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Concatenate<Publishers.Sequence<[()], Never>, Publishers.MergeMany<AnyPublisher<(), Never>>>);
  OUTLINED_FUNCTION_4();
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = v2;
  if (*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_videoStatusProvider))
  {
    uint64_t v20 = *(void *)(v2
                    + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_videoStatusProvider
                    + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(ObjectType, v20);
  }
  else
  {
    Empty.init(completeImmediately:)();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>, &demangling cache variable for type metadata for Empty<(), Never>);
    uint64_t v22 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v12);
  }
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Concatenate<Publishers.Sequence<[()], Never>, Publishers.MergeMany<AnyPublisher<(), Never>>>, NSRunLoop>);
  unint64_t v46 = &v43;
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_21();
  uint64_t v28 = v27 - v26;
  uint64_t v29 = *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_powerSaverManager + 8);
  uint64_t v30 = swift_getObjectType();
  id v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v30, v29);
  uint64_t v51 = v22;
  id v52 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(), Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(), Never>);
  Publisher.merge(with:)();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.MergeMany<AnyPublisher<(), Never>> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<AnyPublisher<(), Never>>);
  uint64_t v32 = v44;
  Publisher.prepend(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v32);
  id v52 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v33 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v34 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v34);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Concatenate<Publishers.Sequence<[()], Never>, Publishers.MergeMany<AnyPublisher<(), Never>>> and conformance Publishers.Concatenate<A, B>, &demangling cache variable for type metadata for Publishers.Concatenate<Publishers.Sequence<[()], Never>, Publishers.MergeMany<AnyPublisher<(), Never>>>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  uint64_t v35 = v48;
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v3);

  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v11, v35);
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v37 = (void *)swift_allocObject();
  void v37[2] = v36;
  uint64_t v38 = v49;
  uint64_t v39 = v50;
  uint64_t v37[3] = v49;
  v37[4] = v39;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v38);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Concatenate<Publishers.Sequence<[()], Never>, Publishers.MergeMany<AnyPublisher<(), Never>>>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Concatenate<Publishers.Sequence<[()], Never>, Publishers.MergeMany<AnyPublisher<(), Never>>>, NSRunLoop>);
  uint64_t v40 = v45;
  uint64_t v41 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v40);
  *(void *)(v19 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_cancellable) = v41;
  return swift_release();
}

uint64_t sub_1C310CA4C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in CallControlsFullScreenStatusViewModel.startObservation(_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    CallControlsFullScreenStatusViewModel.updateStatus()();
  }
  if (a3) {
    a3();
  }
}

uint64_t sub_1C310CAF8()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in CallControlsFullScreenStatusViewModel.startObservation(_:)(uint64_t a1)
{
  closure #1 in CallControlsFullScreenStatusViewModel.startObservation(_:)(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

Swift::Void __swiftcall CallControlsFullScreenStatusViewModel.updateStatus()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_view;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v2))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_powerSaverManager + 8);
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4))
    {
      uint64_t v6 = swift_getObjectType();
      uint64_t v7 = self;
      id v8 = objc_msgSend(v7, sel_conversationKit);
      v30._id object = (void *)0xE000000000000000;
      OUTLINED_FUNCTION_2_43();
      v9._uint64_t countAndFlagsBits = 0;
      v9._id object = (void *)0xE000000000000000;
      v30._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v8, v9, v30);

      id v12 = objc_msgSend(v7, sel_conversationKit);
      OUTLINED_FUNCTION_0_23(0xD000000000000013, 0x80000001C3799B80);

      OUTLINED_FUNCTION_3_59();
      v14(v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4) & 1) == 0
        || ((*(void (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4), !v15))
      {
        if (*(void *)(v1
                       + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_videoStatusProvider))
        {
          uint64_t v21 = *(void *)(v1
                          + OBJC_IVAR____TtC15ConversationKit37CallControlsFullScreenStatusViewModel_videoStatusProvider
                          + 8);
          uint64_t v22 = swift_getObjectType();
          uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
          swift_unknownObjectRetain();
          if (v23(v22, v21))
          {
            uint64_t v24 = swift_getObjectType();
            id v25 = objc_msgSend(self, sel_conversationKit);
            OUTLINED_FUNCTION_0_23(0xD000000000000011, 0x80000001C3799B60);

            uint64_t v26 = OUTLINED_FUNCTION_7_39();
            v27(v26);
            swift_bridgeObjectRelease();
            (*(void (**)(void, uint64_t, uint64_t))(v3 + 16))(0, v24, v3);
            swift_unknownObjectRelease();
            goto LABEL_13;
          }
          swift_unknownObjectRelease();
        }
        uint64_t v28 = swift_getObjectType();
        OUTLINED_FUNCTION_7_39();
        OUTLINED_FUNCTION_3_59();
        v29();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(1, v28, v3);
        goto LABEL_13;
      }
      uint64_t v6 = swift_getObjectType();
      id v16 = objc_msgSend(self, sel_conversationKit);
      v31._id object = (void *)0xE000000000000000;
      OUTLINED_FUNCTION_2_43();
      v17._uint64_t countAndFlagsBits = 0;
      v17._id object = (void *)0xE000000000000000;
      v31._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v16, v17, v31);

      OUTLINED_FUNCTION_3_59();
      v20();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 16))(0, v6, v3);
LABEL_13:
    swift_unknownObjectRelease();
  }
}

id CallControlsFullScreenStatusViewModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CallControlsFullScreenStatusViewModel.init()()
{
}

id CallControlsFullScreenStatusViewModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of CallControlsFullScreenStatusViewing.isHidden.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallControlsFullScreenStatusViewing.isHidden.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CallControlsFullScreenStatusViewing.isHidden.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CallControlsFullScreenStatusViewing.set(title:subtitle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of CallControlsFullScreenStatusViewing.update(statusLayoutGuide:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata accessor for CallControlsFullScreenStatusViewModel()
{
  return self;
}

uint64_t method lookup function for CallControlsFullScreenStatusViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallControlsFullScreenStatusViewModel);
}

uint64_t dispatch thunk of CallControlsFullScreenStatusViewModel.__allocating_init(powerSaverManager:videoStatusProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void CGAffineTransform.rotatingTranslationComponent(by:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, CGAffineTransform *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, CGFloat a10@<D0>)
{
  uint64_t v13 = *v10;
  uint64_t v14 = v10[1];
  uint64_t v15 = v10[2];
  uint64_t v16 = v10[3];
  uint64_t v17 = v10[4];
  uint64_t v18 = v10[5];
  if (!OUTLINED_FUNCTION_2_44(a1, a2, a3, a4, a5, a6, a7, a8, v27, v30, v33, v36, v39, v42, *(uint64_t *)&v45.a, *(uint64_t *)&v45.b, *(uint64_t *)&v45.c, *(uint64_t *)&v45.d, *(uint64_t *)&v45.tx,
          *(uint64_t *)&v45.ty)
    && (*(void *)&a10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    int Rotation = CGAffineTransformMakeRotation(&v45, a10);
    OUTLINED_FUNCTION_1_61(Rotation, v20, v21, v22, v23, v24, v25, v26, v28, v31, v34, v37, v40, v43, *(CGAffineTransform **)&v45.a);
    uint64_t v13 = v29;
    uint64_t v14 = v32;
    uint64_t v15 = v35;
    uint64_t v16 = v38;
    uint64_t v17 = v41;
    uint64_t v18 = v44;
  }
  *a9 = v13;
  a9[1] = v14;
  a9[2] = v15;
  a9[3] = v16;
  a9[4] = v17;
  a9[5] = v18;
}

void __swiftcall CGAffineTransform.transformingTranslationComponent(using:)(CGAffineTransform *__return_ptr retstr, CGAffineTransform *using)
{
  CGFloat v5 = *v2;
  CGFloat v6 = v2[1];
  CGFloat v7 = v2[2];
  CGFloat v8 = v2[3];
  double v10 = v2[4];
  double v9 = v2[5];
  v12.CGFloat a = *v2;
  v12.CGFloat b = v6;
  v12.double c = v7;
  v12.CGFloat d = v8;
  v12.CGFloat tx = v10;
  v12.tCGFloat y = v9;
  if (!CGAffineTransformIsIdentity(&v12))
  {
    double v11 = v10 * using->b;
    double v10 = using->tx + v10 * using->a + v9 * using->c;
    double v9 = using->ty + v11 + v9 * using->d;
  }
  retstr->CGFloat a = v5;
  retstr->CGFloat b = v6;
  retstr->double c = v7;
  retstr->CGFloat d = v8;
  retstr->CGFloat tx = v10;
  retstr->tCGFloat y = v9;
}

void __swiftcall CGAffineTransform.transformingTranslationComponent(using:)(CGAffineTransform *__return_ptr retstr, CATransform3D *using)
{
  double m44 = using->m44;
  CGFloat a = *v2;
  CGFloat b = v2[1];
  CGFloat c = v2[2];
  CGFloat d = v2[3];
  CGFloat tx = v2[4];
  tCGFloat y = v2[5];
  usinga.CGFloat m11 = *v2;
  usinga.CGFloat m12 = b;
  usinga.CGFloat m13 = c;
  usinga.CGFloat m14 = d;
  usinga.CGFloat m21 = tx;
  usinga.CGFloat m22 = ty;
  if (!CGAffineTransformIsIdentity((CGAffineTransform *)&usinga))
  {
    double v18 = OUTLINED_FUNCTION_0_38(v10, v11, v12, v13, v14, v15, v16, v17, m44);
    if (MEMORY[0x1C8774D30](&usinga, v18))
    {
      OUTLINED_FUNCTION_0_38(v19, v20, v21, v22, v23, v24, v25, v26, v28);
      CATransform3DGetAffineTransform(&v30, &usinga);
      *(_OWORD *)&usinga.CGFloat m11 = *(_OWORD *)&v30.a;
      *(_OWORD *)&usinga.CGFloat m13 = *(_OWORD *)&v30.c;
      *(_OWORD *)&usinga.CGFloat m21 = *(_OWORD *)&v30.tx;
      CGAffineTransform.transformingTranslationComponent(using:)(&v30, (CGAffineTransform *)&usinga);
      CGFloat a = v30.a;
      CGFloat b = v30.b;
      CGFloat c = v30.c;
      CGFloat d = v30.d;
      CGFloat tx = v30.tx;
      tCGFloat y = v30.ty;
    }
  }
  retstr->CGFloat a = a;
  retstr->CGFloat b = b;
  retstr->CGFloat c = c;
  retstr->CGFloat d = d;
  retstr->CGFloat tx = tx;
  retstr->tCGFloat y = ty;
}

void CGAffineTransform.rotatingTranslationComponent(for:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, CGAffineTransform *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v11 = *v9;
  uint64_t v12 = v9[1];
  uint64_t v13 = v9[2];
  uint64_t v14 = v9[3];
  CGFloat v15 = 0.0;
  uint64_t v16 = v9[4];
  uint64_t v17 = v9[5];
  if (a1 <= 3) {
    CGFloat v15 = dbl_1C376FCF8[a1];
  }
  if (!OUTLINED_FUNCTION_2_44(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v32, v35, v38, v41, *(uint64_t *)&v44.a, *(uint64_t *)&v44.b, *(uint64_t *)&v44.c, *(uint64_t *)&v44.d, *(uint64_t *)&v44.tx,
          *(uint64_t *)&v44.ty)
    && (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    int Rotation = CGAffineTransformMakeRotation(&v44, v15);
    OUTLINED_FUNCTION_1_61(Rotation, v19, v20, v21, v22, v23, v24, v25, v27, v30, v33, v36, v39, v42, *(CGAffineTransform **)&v44.a);
    uint64_t v11 = v28;
    uint64_t v12 = v31;
    uint64_t v13 = v34;
    uint64_t v14 = v37;
    uint64_t v16 = v40;
    uint64_t v17 = v43;
  }
  *a9 = v11;
  a9[1] = v12;
  a9[2] = v13;
  a9[3] = v14;
  a9[4] = v16;
  a9[5] = v17;
}

double static _ColorMatrix.buttonPlatter.getter@<D0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1C376FD20;
  a1[1] = xmmword_1C376FD30;
  a1[2] = xmmword_1C376FD40;
  a1[3] = xmmword_1C376FD50;
  double result = 0.0;
  a1[4] = xmmword_1C376D040;
  return result;
}

double static _ColorMatrix.secondaryText.getter@<D0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1C376FD60;
  a1[1] = xmmword_1C376FD70;
  a1[2] = xmmword_1C376FD80;
  a1[3] = xmmword_1C376FD90;
  double result = 0.0;
  a1[4] = xmmword_1C376D040;
  return result;
}

uint64_t ModalOverlayTransition.body(content:phase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect>);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  double v18 = 0.0;
  if (TransitionPhase.isIdentity.getter()) {
    double v19 = 1.0;
  }
  else {
    double v19 = 0.0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlaceholderContentView<ModalOverlayTransition>);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v7, a1);
  *(double *)(v7 + *(int *)(v4 + 44)) = v19;
  if ((TransitionPhase.isIdentity.getter() & 1) == 0) {
    double v18 = 25.0;
  }
  outlined init with copy of FeatureEligibility?(v7, v12, &demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>);
  uint64_t v21 = v12 + *(int *)(v9 + 44);
  *(double *)uint64_t v21 = v18;
  *(unsigned char *)(v21 + 8) = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v7, &demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>);
  if (TransitionPhase.isIdentity.getter()) {
    double v22 = 1.0;
  }
  else {
    double v22 = 0.8;
  }
  static UnitPoint.center.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  outlined init with copy of FeatureEligibility?(v12, v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>);
  uint64_t v27 = v17 + *(int *)(v14 + 44);
  *(double *)uint64_t v27 = v22;
  *(double *)(v27 + 8) = v22;
  *(void *)(v27 + 16) = v24;
  *(void *)(v27 + 24) = v26;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>);
  return outlined init with take of Any?(v17, a2, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect>);
}

uint64_t protocol witness for static Transition.properties.getter in conformance ModalOverlayTransition()
{
  return MEMORY[0x1F40F7FC8]();
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance ModalOverlayTransition()
{
  return MEMORY[0x1F40F7FC0]();
}

id ActivityIndicator.makeUIView(context:)()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1400]), sel_init);
  objc_msgSend(v0, sel_setActivityIndicatorViewStyle_, 16);
  id v1 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v0, sel_setColor_, v1);

  objc_msgSend(v0, sel_startAnimating);
  return v0;
}

id ActivityIndicator.updateUIView(_:context:)(void *a1)
{
  type metadata accessor for ControlSize();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_62();
  specialized Environment.wrappedValue.getter();
  uint64_t v4 = OUTLINED_FUNCTION_39();
  int v6 = v5(v4);
  if (v6 == *MEMORY[0x1E4F3C610]) {
    return objc_msgSend(a1, sel__setCustomWidth_, *(double *)(v1 + *(int *)(type metadata accessor for ActivityIndicator(0) + 20)));
  }
  int v8 = v6;
  int v9 = *MEMORY[0x1E4F3C608];
  uint64_t v10 = type metadata accessor for ActivityIndicator(0);
  if (v8 == v9) {
    return objc_msgSend(a1, sel__setCustomWidth_, *(double *)(v1 + *(int *)(v10 + 24)));
  }
  objc_msgSend(a1, sel__setCustomWidth_, *(double *)(v1 + *(int *)(v10 + 28)));
  uint64_t v11 = OUTLINED_FUNCTION_39();
  return (id)v12(v11);
}

uint64_t type metadata accessor for ActivityIndicator(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ActivityIndicator);
}

int *ActivityIndicator.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
  swift_storeEnumTagMultiPayload();
  double result = (int *)type metadata accessor for ActivityIndicator(0);
  *(uint64_t *)((char *)a1 + result[5]) = 0x402C000000000000;
  *(uint64_t *)((char *)a1 + result[6]) = 0x403E000000000000;
  *(uint64_t *)((char *)a1 + result[7]) = 0x4038000000000000;
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ActivityIndicator()
{
  return ActivityIndicator.makeUIView(context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ActivityIndicator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ActivityIndicator and conformance ActivityIndicator, (void (*)(uint64_t))type metadata accessor for ActivityIndicator);
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ActivityIndicator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ActivityIndicator and conformance ActivityIndicator, (void (*)(uint64_t))type metadata accessor for ActivityIndicator);
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance ActivityIndicator()
{
}

double one-time initialization function for regularButtonSize()
{
  double result = 170.0;
  regularButtonSize = (CGSize)xmmword_1C376FDA0;
  return result;
}

double one-time initialization function for compactButtonSize()
{
  double result = 142.0;
  compactButtonSize = (CGSize)xmmword_1C376FDB0;
  return result;
}

uint64_t ScreenSharingOverlayPlatterButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v127 = a2;
  uint64_t v3 = type metadata accessor for Capsule();
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v5);
  uint64_t v6 = type metadata accessor for UserInterfaceSizeClass();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  OUTLINED_FUNCTION_0();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v105[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v16);
  double v18 = &v105[-v17];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v20 = OUTLINED_FUNCTION_8(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = &v105[-v29];
  MEMORY[0x1F4188790](v28);
  uint64_t v32 = &v105[-v31];
  uint64_t v114 = type metadata accessor for ButtonStyleConfiguration.Label();
  OUTLINED_FUNCTION_4();
  uint64_t v113 = v33;
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_21();
  uint64_t v37 = v36 - v35;
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v38);
  OUTLINED_FUNCTION_21();
  uint64_t v41 = v40 - v39;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v43);
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v45);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v46);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v47);
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v48);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v49);
  uint64_t v115 = a1;
  ButtonStyleConfiguration.label.getter();
  specialized Environment.wrappedValue.getter();
  int v50 = *MEMORY[0x1E4F3DA58];
  uint64_t v130 = v8;
  uint64_t v51 = *(void (**)(void))(v8 + 104);
  int v133 = v50;
  uint64_t v132 = v8 + 104;
  uint64_t v131 = v51;
  v51(v30);
  __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v6);
  uint64_t v129 = v11;
  uint64_t v52 = (uint64_t)&v18[*(int *)(v11 + 48)];
  uint64_t v53 = &demangling cache variable for type metadata for UserInterfaceSizeClass?;
  outlined init with copy of FeatureEligibility?((uint64_t)v32, (uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?((uint64_t)v30, v52, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  OUTLINED_FUNCTION_6_42((uint64_t)v18);
  uint64_t v121 = v15;
  if (v55)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v30, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v32, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    OUTLINED_FUNCTION_6_42(v52);
    uint64_t v53 = v117;
    uint64_t v54 = v116;
    if (v55)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      OUTLINED_FUNCTION_42_8();
LABEL_11:
      uint64_t v57 = static Font.headline.getter();
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  uint64_t v54 = v108;
  outlined init with copy of FeatureEligibility?((uint64_t)v18, (uint64_t)v108, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  OUTLINED_FUNCTION_6_42(v52);
  if (v55)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v30, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v32, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(void, uint64_t))(v130 + 8))(v54, v6);
    OUTLINED_FUNCTION_38_6();
LABEL_9:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    OUTLINED_FUNCTION_42_8();
    goto LABEL_12;
  }
  uint64_t v56 = v130;
  uint64_t v53 = v110;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v130 + 32))(v110, v52, v6);
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
  int v106 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v54 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
  v54(v53, v6);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v30, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v32, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v54((uint64_t *)v108, v6);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  OUTLINED_FUNCTION_42_8();
  OUTLINED_FUNCTION_38_6();
  if (v106) {
    goto LABEL_11;
  }
LABEL_12:
  static Font.subheadline.getter();
  static Font.Weight.medium.getter();
  uint64_t v57 = Font.weight(_:)();
  swift_release();
LABEL_13:
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v59 = v113;
  uint64_t v60 = v114;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16))(v41, v37, v114);
  OUTLINED_FUNCTION_31_15();
  BOOL v62 = (uint64_t *)(v41 + v61);
  *BOOL v62 = KeyPath;
  v62[1] = v57;
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v37, v60);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v63 = 0.5;
  }
  else {
    double v63 = 1.0;
  }
  uint64_t v64 = v135;
  outlined init with copy of FeatureEligibility?(v41, v135, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>);
  OUTLINED_FUNCTION_31_15();
  *(double *)(v64 + v65) = v63;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v41, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v66 = v128;
  specialized Environment.wrappedValue.getter();
  OUTLINED_FUNCTION_19_23();
  v67();
  __swift_storeEnumTagSinglePayload((uint64_t)v54, 0, 1, v6);
  uint64_t v68 = (uint64_t)v53 + *((int *)v30 + 12);
  outlined init with copy of FeatureEligibility?(v66, (uint64_t)v53, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?((uint64_t)v54, v68, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v53, 1, v6);
  uint64_t v70 = (uint64_t)v121;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v54, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v66, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    OUTLINED_FUNCTION_6_42(v68);
    uint64_t v71 = v118;
    if (!v55) {
      goto LABEL_23;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v53, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  }
  else
  {
    uint64_t v72 = v109;
    outlined init with copy of FeatureEligibility?((uint64_t)v53, v109, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    OUTLINED_FUNCTION_6_42(v68);
    uint64_t v71 = v118;
    if (v55)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v54, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v66, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v72, v6);
LABEL_23:
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v53, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
      goto LABEL_27;
    }
    uint64_t v73 = v130;
    uint64_t v74 = OUTLINED_FUNCTION_20_17();
    v75(v74);
    lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
    LODWORD(v117) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    uint64_t v30 = (unsigned char *)(v73 + 8);
    v76(v66, v6);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v54, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v128, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    v76(v109, v6);
    OUTLINED_FUNCTION_42_8();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v53, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if ((v117 & 1) == 0)
    {
LABEL_27:
      if (one-time initialization token for compactButtonSize == -1) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  if (one-time initialization token for regularButtonSize != -1) {
LABEL_28:
  }
    swift_once();
LABEL_29:
  uint64_t v77 = v134;
  specialized Environment.wrappedValue.getter();
  OUTLINED_FUNCTION_19_23();
  v78();
  __swift_storeEnumTagSinglePayload(v71, 0, 1, v6);
  uint64_t v79 = v70 + *((int *)v30 + 12);
  outlined init with copy of FeatureEligibility?(v77, v70, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v71, v79, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  OUTLINED_FUNCTION_6_42(v70);
  if (v55)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v71, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v134, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    OUTLINED_FUNCTION_6_42(v79);
    if (v55)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v70, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  uint64_t v80 = v107;
  outlined init with copy of FeatureEligibility?(v70, v107, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  OUTLINED_FUNCTION_6_42(v79);
  if (v81)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v71, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v134, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v80, v6);
LABEL_37:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v70, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_41;
  }
  uint64_t v82 = v130;
  uint64_t v83 = OUTLINED_FUNCTION_20_17();
  v84(v83);
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
  char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  v86(v66, v6);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v71, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v134, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v86(v80, v6);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v70, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (v85)
  {
LABEL_39:
    if (one-time initialization token for regularButtonSize == -1) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_41:
  if (one-time initialization token for compactButtonSize != -1) {
LABEL_42:
  }
    swift_once();
LABEL_43:
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v87 = v135;
  uint64_t v88 = v123;
  outlined init with copy of FeatureEligibility?(v135, v123, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>);
  OUTLINED_FUNCTION_31_15();
  memcpy((void *)(v88 + v89), __src, 0x70uLL);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v87, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>);
  uint64_t v136 = static Alignment.center.getter();
  uint64_t v135 = v90;
  OUTLINED_FUNCTION_31_15();
  uint64_t v91 = v125;
  uint64_t v93 = v125 + v92;
  type metadata accessor for RoundedCornerStyle();
  OUTLINED_FUNCTION_0();
  unint64_t v95 = *(void (**)(void))(v94 + 104);
  OUTLINED_FUNCTION_40_7();
  v95();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>);
  uint64_t v137 = 0x4059000000000000;
  char v138 = 1;
  long long v140 = xmmword_1C376FD20;
  long long v141 = xmmword_1C376FD30;
  long long v142 = xmmword_1C376FD40;
  long long v143 = xmmword_1C376FD50;
  long long v144 = xmmword_1C376D040;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect>);
  lazy protocol witness table accessor for type ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect> and conformance <> ModifiedContent<A, B>();
  View._colorMatrix(_:)();
  uint64_t v96 = (uint64_t *)(v93
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>)
                           + 36));
  uint64_t v97 = v135;
  *uint64_t v96 = v136;
  v96[1] = v97;
  outlined init with take of Any?(v88, v91, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>);
  uint64_t v98 = v126;
  OUTLINED_FUNCTION_40_7();
  v95();
  OUTLINED_FUNCTION_31_15();
  uint64_t v99 = v124;
  uint64_t v101 = v124 + v100;
  outlined init with copy of Capsule(v98, v124 + v100, MEMORY[0x1E4F3EE58]);
  *(unsigned char *)(v101
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContentShapeModifier<Capsule>)
                    + 36)) = 0;
  uint64_t v102 = OUTLINED_FUNCTION_39();
  outlined init with copy of FeatureEligibility?(v102, v103, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>);
  outlined destroy of Capsule(v98, MEMORY[0x1E4F3EE58]);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v91, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>);
  return outlined init with take of Any?(v99, v127, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>>);
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>??, ModifiedContent<Text, _FixedSizeLayout>)>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>??, ModifiedContent<Text, _FixedSizeLayout>)>>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_32_17(v0, v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, _OffsetEffect>, _OpacityEffect>, _AllowsHitTestingModifier>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(VStack<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>, TupleView<(ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>, Spacer)>>>, _ConditionalContent<HStack<TupleView<(Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, _PaddingLayout>,, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(VStack<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>, TupleView<(ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>, Spacer)>>>, _ConditionalContent<HStack<TupleView<(Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>,);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>>>, Spacer)>>, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>>>, Spacer)>>, _SafeAreaRegionsIgnoringLayout>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<MovieScrubber, _ClipEffect<RoundedRectangle>>, _FixedSizeLayout>, _FrameLayout>)>>, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<MovieScrubber, _ClipEffect<RoundedRectangle>>, _FixedSizeLayout>, _FrameLayout>)>>, _SafeAreaRegionsIgnoringLayout>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_32_17(v0, v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for VStack<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _BackgroundModifier<_ShapeView<Capsule, HierarchicalShapeStyle>>>, _InsettableBackgroundShapeModifier<Material, Capsule>>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>)>>, _EnvironmentKeyWritingModifier<ColorScheme>>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _BackgroundModifier<_ShapeView<Capsule, HierarchicalShapeStyle>>>, _InsettableBackgroundShapeModifier<Material, Capsule>>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>)>>, _EnvironmentKeyWritingModifier<ColorScheme>>>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TranscriptList, TranscriptView.BackgroundModifier>, TranscriptView.ClipShapeModifier>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TranscriptList, TranscriptView.BackgroundModifier>, TranscriptView.ClipShapeModifier>, _FlexFrameLayout>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_0_39();
  return OUTLINED_FUNCTION_1_62(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, (uint64_t)&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<GroupIconView, _PaddingLayout>, AccessibilityAttachmentModifier>?, Text)>>, (uint64_t)&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<GroupIconView, _PaddingLayout>, AccessibilityAttachmentModifier>?, Text)>>, _FlexFrameLayout>);
}

#error "1C310EBF4: call analysis failed (funcsize=89)"

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double v8 = OUTLINED_FUNCTION_2_45(a1);
  if (!v9) {
    double v8 = -INFINITY;
  }
  double v10 = v4;
  if (v5) {
    double v10 = v8;
  }
  double v11 = v6;
  if (v7) {
    double v11 = v10;
  }
  BOOL v12 = v8 > v10 || v10 > v11;
  if (v12 || ((OUTLINED_FUNCTION_26_17(), v15 <= v13) ? (BOOL v16 = v13 > v14) : (BOOL v16 = 1), v16))
  {
    static os_log_type_t.fault.getter();
    uint64_t v17 = (void *)static Log.runtimeIssuesLog.getter();
    OUTLINED_FUNCTION_14_23();
  }
  OUTLINED_FUNCTION_28_13();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v18 = v2[1];
  long long v24 = *v2;
  long long v25 = v18;
  outlined init with take of Text.Storage((uint64_t)&v24, (uint64_t)v27);
  uint64_t v26 = *((void *)&v25 + 1);
  uint64_t v22 = *((void *)v2 + 4);
  char v23 = *((unsigned char *)v2 + 40);
  long long v19 = v2[1];
  *a2 = *v2;
  a2[1] = v19;
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)v2 + 25);
  memcpy(a2 + 3, __src, 0x70uLL);
  outlined retain of Text.Storage((uint64_t)v27);
  outlined retain of [Participant]((uint64_t)&v26);
  return outlined retain of AnyLocation<String>?((uint64_t)&v22);
}

#error "1C310EEE8: call analysis failed (funcsize=59)"

#error "1C310F064: call analysis failed (funcsize=82)"

#error "1C310F1D4: call analysis failed (funcsize=59)"

#error "1C310F2C8: call analysis failed (funcsize=59)"

#error "1C310F3BC: call analysis failed (funcsize=59)"

#error "1C310F564: call analysis failed (funcsize=94)"

#error "1C310F774: call analysis failed (funcsize=108)"

#error "1C310F9EC: call analysis failed (funcsize=93)"

#error "1C310FC18: call analysis failed (funcsize=79)"

uint64_t ScreenSharingOverlayPlatterButtonStyle.init(horizontalSizeClass:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of Any?(a1, a2, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
}

uint64_t static ButtonStyle<>.screenSharingOverlayPlatter.getter@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ScreenSharingSpectatorModalOverlay.title.getter()
{
  uint64_t v0 = type metadata accessor for Participant(0);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v99 = (uint64_t)v95 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  char v5 = (char *)v95 - v4;
  MEMORY[0x1F4188790](v3);
  char v7 = (char *)v95 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  double v11 = (char *)v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  double v13 = (char *)v95 - v12;
  type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v15 = v14;
  uint64_t v16 = swift_release();
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 648))(&v103, v16);
  swift_release();
  unint64_t v17 = v103;
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v19 = v18;
  uint64_t v20 = swift_release();
  char v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 504))(v20);
  swift_release();
  switch(v17 >> 61)
  {
    case 1uLL:
      id v22 = objc_msgSend(self, sel_conversationKit);
      v104._id object = (void *)0xE000000000000000;
      v23._id object = (void *)0x80000001C3798C70;
      v23._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v24.value._id object = (void *)0xEF74694B6E6F6974;
      v25._uint64_t countAndFlagsBits = 0;
      v25._id object = (void *)0xE000000000000000;
      v104._uint64_t countAndFlagsBits = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v104)._countAndFlagsBits;

      goto LABEL_3;
    case 2uLL:
      outlined consume of RemoteControlState(v17);
      goto LABEL_5;
    case 4uLL:
      if (v21)
      {
        unint64_t v38 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        outlined consume of RemoteControlState(v17);
        if (v38 >> 61 != 2) {
          return 0;
        }
LABEL_5:
        id v27 = objc_msgSend(self, sel_conversationKit);
        v28._uint64_t countAndFlagsBits = 0xD000000000000022;
        v105._id object = (void *)0xE000000000000000;
        v28._id object = (void *)0x80000001C3799D40;
        v29.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
        v29.value._id object = (void *)0xEF74694B6E6F6974;
        v30._uint64_t countAndFlagsBits = 0;
        v30._id object = (void *)0xE000000000000000;
        v105._uint64_t countAndFlagsBits = 0;
        uint64_t v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v105)._countAndFlagsBits;

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_1C3769620;
        swift_retain();
        specialized Environment.wrappedValue.getter();
        uint64_t v34 = v33;
        uint64_t v35 = swift_release();
        (*(void (**)(uint64_t))(*(void *)v34 + 216))(v35);
        swift_release();
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v0))
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for Participant?);
          uint64_t v36 = 0;
          unint64_t v37 = 0;
LABEL_33:
          *(void *)(v32 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v32 + 64) = lazy protocol witness table accessor for type String and conformance String();
          if (v37) {
            uint64_t v88 = v36;
          }
          else {
            uint64_t v88 = 0;
          }
          unint64_t v89 = 0xE000000000000000;
          if (v37) {
            unint64_t v89 = v37;
          }
          *(void *)(v32 + 32) = v88;
          *(void *)(v32 + 40) = v89;
          uint64_t countAndFlagsBits = String.init(format:_:)();
          swift_bridgeObjectRelease();
          return countAndFlagsBits;
        }
        outlined init with copy of Capsule((uint64_t)v13, (uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for Participant?);
        uint64_t v54 = *(void **)&v7[*(int *)(v0 + 28)];
        uint64_t v99 = v31;
        if (v54)
        {
          id v55 = v54;
          uint64_t v56 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v55);
          if (v57)
          {
            uint64_t v58 = v56;
            if (objc_msgSend(v55, sel_shouldHideContact))
            {
              uint64_t v98 = v58;
              uint64_t v96 = type metadata accessor for PersonNameComponents();
              id object = v95;
              uint64_t v59 = *(void *)(v96 - 8);
              MEMORY[0x1F4188790](v96);
              uint64_t v61 = (char *)v95 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_bridgeObjectRetain();
              PersonNameComponents.init()();
              PersonNameComponents.givenName.setter();
              PersonNameComponents.familyName.setter();
              if (one-time initialization token for initials != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v62 = (id)static NSPersonNameComponentsFormatter.initials;
              Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
              id v64 = objc_msgSend(v62, sel_stringFromPersonNameComponents_, isa);

              uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v67 = v66;

              (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v96);
              uint64_t v100 = v65;
              uint64_t v101 = v67;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol.localizedUppercase.getter();

              swift_bridgeObjectRelease();
              id v68 = 0;
              goto LABEL_32;
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
        outlined init with copy of Capsule((uint64_t)v7, (uint64_t)v5, (void (*)(void))type metadata accessor for Participant);
        swift_retain();
        ParticipantContactDetailsCache.contactDetails(for:)();
        id v68 = v102;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        outlined destroy of Capsule((uint64_t)v5, (void (*)(void))type metadata accessor for Participant);
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        Participant.name(_:)();
        uint64_t v36 = v86;
        unint64_t v37 = v87;
        swift_bridgeObjectRelease();
        outlined destroy of Capsule((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
        goto LABEL_33;
      }
      if (*(unsigned char *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) != 2)
      {
LABEL_15:
        outlined consume of RemoteControlState(v17);
        return 0;
      }
      id v43 = objc_msgSend(self, sel_conversationKit);
      v44._uint64_t countAndFlagsBits = 0xD000000000000030;
      v107._id object = (void *)0xE000000000000000;
      v44._id object = (void *)0x80000001C3799D00;
      v45.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v45.value._id object = (void *)0xEF74694B6E6F6974;
      v46._uint64_t countAndFlagsBits = 0;
      v46._id object = (void *)0xE000000000000000;
      v107._uint64_t countAndFlagsBits = 0;
      Swift::String v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v44, v45, (NSBundle)v43, v46, v107);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1C3769620;
      swift_retain();
      specialized Environment.wrappedValue.getter();
      uint64_t v50 = v49;
      uint64_t v51 = swift_release();
      (*(void (**)(uint64_t))(*(void *)v50 + 216))(v51);
      swift_release();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v0))
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for Participant?);
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        goto LABEL_44;
      }
      uint64_t v69 = v99;
      outlined init with copy of Capsule((uint64_t)v11, v99, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for Participant?);
      uint64_t v70 = *(void **)(v69 + *(int *)(v0 + 28));
      id object = v47._object;
      uint64_t v98 = v47._countAndFlagsBits;
      if (!v70) {
        goto LABEL_42;
      }
      id v71 = v70;
      uint64_t v72 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v71);
      if (!v73)
      {

LABEL_42:
        outlined init with copy of Capsule(v69, (uint64_t)v5, (void (*)(void))type metadata accessor for Participant);
        swift_retain();
        ParticipantContactDetailsCache.contactDetails(for:)();
        id v85 = v102;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        outlined destroy of Capsule((uint64_t)v5, (void (*)(void))type metadata accessor for Participant);
        goto LABEL_43;
      }
      uint64_t v74 = v72;
      if ((objc_msgSend(v71, sel_shouldHideContact) & 1) == 0)
      {

        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      uint64_t v96 = v74;
      uint64_t v75 = type metadata accessor for PersonNameComponents();
      v95[1] = v95;
      uint64_t v76 = *(void *)(v75 - 8);
      MEMORY[0x1F4188790](v75);
      uint64_t v78 = (char *)v95 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_bridgeObjectRetain();
      PersonNameComponents.init()();
      PersonNameComponents.givenName.setter();
      PersonNameComponents.familyName.setter();
      if (one-time initialization token for initials != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v79 = (id)static NSPersonNameComponentsFormatter.initials;
      Class v80 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v81 = objc_msgSend(v79, sel_stringFromPersonNameComponents_, v80);

      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v84 = v83;

      (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
      uint64_t v100 = v82;
      uint64_t v101 = v84;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.localizedUppercase.getter();

      swift_bridgeObjectRelease();
      id v85 = 0;
      uint64_t v69 = v99;
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Participant.name(_:)();
      uint64_t v52 = v91;
      unint64_t v53 = v92;
      swift_bridgeObjectRelease();
      outlined destroy of Capsule(v69, (void (*)(void))type metadata accessor for Participant);
LABEL_44:
      *(void *)(v48 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v48 + 64) = lazy protocol witness table accessor for type String and conformance String();
      if (v53) {
        uint64_t v93 = v52;
      }
      else {
        uint64_t v93 = 0;
      }
      unint64_t v94 = 0xE000000000000000;
      if (v53) {
        unint64_t v94 = v53;
      }
      *(void *)(v48 + 32) = v93;
      *(void *)(v48 + 40) = v94;
      uint64_t countAndFlagsBits = String.init(format:_:)();
      swift_bridgeObjectRelease();
LABEL_3:
      outlined consume of RemoteControlState(v17);
      return countAndFlagsBits;
    case 5uLL:
      if ((v17 | 0x10) != 0xA000000000000010) {
        goto LABEL_15;
      }
      id v39 = objc_msgSend(self, sel_conversationKit);
      v106._id object = (void *)0xE000000000000000;
      v40._id object = (void *)0x80000001C3798C70;
      v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v41.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v41.value._id object = (void *)0xEF74694B6E6F6974;
      v42._uint64_t countAndFlagsBits = 0;
      v42._id object = (void *)0xE000000000000000;
      v106._uint64_t countAndFlagsBits = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v106)._countAndFlagsBits;

      return countAndFlagsBits;
    default:
      goto LABEL_15;
  }
}

uint64_t ScreenSharingSpectatorModalOverlay.statusText.getter()
{
  uint64_t v0 = type metadata accessor for Participant(0);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  char v5 = (char *)&v57 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v10 = v9;
  uint64_t v11 = swift_release();
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 648))(&v66, v11);
  swift_release();
  unint64_t v12 = v66;
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v14 = v13;
  uint64_t v15 = swift_release();
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 504))(v15);
  swift_release();
  switch(v12 >> 61)
  {
    case 1uLL:
      id v17 = objc_msgSend(self, sel_conversationKit);
      v18._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
      v67._id object = (void *)0xE000000000000000;
      v18._id object = (void *)0x80000001C3799CD0;
      v19.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v19.value._id object = (void *)0xEF74694B6E6F6974;
      v20._uint64_t countAndFlagsBits = 0;
      v20._id object = (void *)0xE000000000000000;
      v67._uint64_t countAndFlagsBits = 0;
      Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v67);
      uint64_t countAndFlagsBits = v21._countAndFlagsBits;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_1C3769620;
      swift_retain();
      specialized Environment.wrappedValue.getter();
      uint64_t v24 = v23;
      uint64_t v25 = swift_release();
      (*(void (**)(uint64_t))(*(void *)v24 + 216))(v25);
      swift_release();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v0))
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        goto LABEL_22;
      }
      outlined init with copy of Capsule((uint64_t)v8, (uint64_t)v5, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
      uint64_t v36 = *(void **)&v5[*(int *)(v0 + 28)];
      id object = v21._object;
      if (!v36) {
        goto LABEL_20;
      }
      id v37 = v36;
      uint64_t v38 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v37);
      if (!v39)
      {

LABEL_20:
        outlined init with copy of Capsule((uint64_t)v5, (uint64_t)v3, (void (*)(void))type metadata accessor for Participant);
        swift_retain();
        ParticipantContactDetailsCache.contactDetails(for:)();
        id v50 = v65;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        outlined destroy of Capsule((uint64_t)v3, (void (*)(void))type metadata accessor for Participant);
        goto LABEL_21;
      }
      uint64_t v40 = v38;
      if ((objc_msgSend(v37, sel_shouldHideContact) & 1) == 0)
      {

        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      uint64_t v60 = v40;
      uint64_t v58 = type metadata accessor for PersonNameComponents();
      uint64_t v59 = &v57;
      uint64_t v41 = *(void *)(v58 - 8);
      MEMORY[0x1F4188790](v58);
      id v43 = (char *)&v57 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_bridgeObjectRetain();
      PersonNameComponents.init()();
      PersonNameComponents.givenName.setter();
      PersonNameComponents.familyName.setter();
      if (one-time initialization token for initials != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v44 = (id)static NSPersonNameComponentsFormatter.initials;
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v46 = objc_msgSend(v44, sel_stringFromPersonNameComponents_, isa);

      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v58);
      uint64_t v63 = v47;
      uint64_t v64 = v49;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.localizedUppercase.getter();

      swift_bridgeObjectRelease();
      id v50 = 0;
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Participant.name(_:)();
      uint64_t v26 = v51;
      unint64_t v27 = v52;
      swift_bridgeObjectRelease();
      outlined destroy of Capsule((uint64_t)v5, (void (*)(void))type metadata accessor for Participant);
LABEL_22:
      *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
      if (v27) {
        uint64_t v53 = v26;
      }
      else {
        uint64_t v53 = 0;
      }
      unint64_t v54 = 0xE000000000000000;
      if (v27) {
        unint64_t v54 = v27;
      }
      *(void *)(v22 + 32) = v53;
      *(void *)(v22 + 40) = v54;
      uint64_t v35 = String.init(format:_:)();
      swift_bridgeObjectRelease();
      outlined consume of RemoteControlState(v12);
      return v35;
    case 2uLL:
      outlined consume of RemoteControlState(v12);
      goto LABEL_6;
    case 4uLL:
      BOOL v28 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) >> 61 == 2;
      outlined consume of RemoteControlState(v12);
      if ((v28 & v16 & 1) == 0) {
        return 0;
      }
LABEL_6:
      id v29 = objc_msgSend(self, sel_conversationKit);
      unint64_t v56 = 0xE000000000000000;
      Swift::String v30 = "SCREEN_SHARING_CONTROL_TITLE";
      goto LABEL_9;
    case 5uLL:
      if ((v12 | 0x10) != 0xA000000000000010) {
        goto LABEL_10;
      }
      id v29 = objc_msgSend(self, sel_conversationKit);
      unint64_t v56 = 0xE000000000000000;
      Swift::String v30 = "SCREEN_SHARING_CONTROL_ENDED";
LABEL_9:
      v31._id object = (void *)((unint64_t)(v30 - 32) | 0x8000000000000000);
      v31._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v32.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v32.value._id object = (void *)0xEF74694B6E6F6974;
      v33._uint64_t countAndFlagsBits = 0;
      v33._id object = (void *)0xE000000000000000;
      uint64_t v34 = 0;
      uint64_t v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v29, v33, *(Swift::String *)(&v56 - 1))._countAndFlagsBits;

      return v35;
    default:
LABEL_10:
      outlined consume of RemoteControlState(v12);
      return 0;
  }
}

uint64_t ScreenSharingSpectatorModalOverlay.statusView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v86 = a1;
  uint64_t v2 = type metadata accessor for ControlSize();
  uint64_t v80 = *(void *)(v2 - 8);
  unint64_t v81 = v2;
  MEMORY[0x1F4188790](v2);
  id v79 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for ActivityIndicator(0);
  uint64_t v4 = MEMORY[0x1F4188790](v77);
  uint64_t v6 = (uint64_t *)((char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v78 = (uint64_t)&v63 - v7;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>);
  MEMORY[0x1F4188790](v85);
  uint64_t v76 = (uint64_t *)((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>.Storage);
  MEMORY[0x1F4188790](v82);
  uint64_t v84 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>.Storage);
  MEMORY[0x1F4188790](v72);
  uint64_t v74 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>);
  MEMORY[0x1F4188790](v83);
  uint64_t v75 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for ScreenSharingOverlayPlatterButtonStyle(0);
  uint64_t v12 = MEMORY[0x1F4188790](v71);
  uint64_t v14 = (uint64_t *)((char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v67 = (uint64_t)&v63 - v15;
  uint64_t v16 = type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  uint64_t v64 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v64 + 64);
  MEMORY[0x1F4188790](v16);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v66 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  Swift::String_optional v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v69 = *(void *)(v73 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v73);
  id v65 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  id v68 = (char *)&v63 - v22;
  uint64_t v23 = v1;
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v25 = v24;
  uint64_t v26 = swift_release();
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v25 + 648))(&v91, v26);
  swift_release();
  unint64_t v27 = v91;
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v29 = v28;
  uint64_t v30 = swift_release();
  char v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 504))(v30);
  swift_release();
  if (v27 >> 61 == 4)
  {
    if ((v31 & 1) == 0 && *(unsigned char *)((v27 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == 2)
    {
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
      uint64_t v47 = lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ScreenSharingOverlayPlatterButtonStyle and conformance ScreenSharingOverlayPlatterButtonStyle, (void (*)(uint64_t))type metadata accessor for ScreenSharingOverlayPlatterButtonStyle);
      uint64_t v87 = v70;
      uint64_t v88 = v71;
      uint64_t v89 = v46;
      uint64_t v90 = v47;
      swift_getOpaqueTypeConformance2();
      uint64_t v48 = (uint64_t)v75;
      _ConditionalContent<>.init(storage:)();
      outlined init with copy of FeatureEligibility?(v48, v84, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>);
      _ConditionalContent<>.init(storage:)();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v48, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>);
      unint64_t v45 = v27;
      return outlined consume of RemoteControlState(v45);
    }
  }
  else if (v27 >> 61 == 1)
  {
    unint64_t v81 = v27;
    outlined init with copy of Capsule(v23, (uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for ScreenSharingSpectatorModalOverlay);
    unint64_t v32 = (*(unsigned __int8 *)(v64 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    uint64_t v33 = swift_allocObject();
    outlined init with take of ActivityIndicator((uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v33 + v32, (void (*)(void))type metadata accessor for ScreenSharingSpectatorModalOverlay);
    Button.init(action:label:)();
    *uint64_t v14 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = (uint64_t)v14;
    uint64_t v35 = v67;
    outlined init with take of ActivityIndicator(v34, v67, (void (*)(void))type metadata accessor for ScreenSharingOverlayPlatterButtonStyle);
    uint64_t v36 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    uint64_t v37 = lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ScreenSharingOverlayPlatterButtonStyle and conformance ScreenSharingOverlayPlatterButtonStyle, (void (*)(uint64_t))type metadata accessor for ScreenSharingOverlayPlatterButtonStyle);
    uint64_t v38 = v65;
    uint64_t v39 = v70;
    uint64_t v40 = v71;
    View.buttonStyle<A>(_:)();
    outlined destroy of Capsule(v35, (void (*)(void))type metadata accessor for ScreenSharingOverlayPlatterButtonStyle);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v39);
    uint64_t v41 = v69;
    uint64_t v42 = v68;
    uint64_t v43 = v73;
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v38, v73);
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v74, v42, v43);
    swift_storeEnumTagMultiPayload();
    uint64_t v87 = v39;
    uint64_t v88 = v40;
    uint64_t v89 = v36;
    uint64_t v90 = v37;
    swift_getOpaqueTypeConformance2();
    uint64_t v44 = (uint64_t)v75;
    _ConditionalContent<>.init(storage:)();
    outlined init with copy of FeatureEligibility?(v44, v84, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>);
    _ConditionalContent<>.init(storage:)();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v44, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    unint64_t v45 = v81;
    return outlined consume of RemoteControlState(v45);
  }
  outlined consume of RemoteControlState(v27);
  uint64_t v50 = static Alignment.center.getter();
  uint64_t v51 = (uint64_t)v76;
  *uint64_t v76 = v50;
  *(void *)(v51 + 8) = v52;
  uint64_t v53 = v51
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>)
               + 44);
  *uint64_t v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = v77;
  *(uint64_t *)((char *)v6 + *(int *)(v77 + 20)) = 0x402C000000000000;
  *(uint64_t *)((char *)v6 + *(int *)(v54 + 24)) = 0x403E000000000000;
  *(uint64_t *)((char *)v6 + *(int *)(v54 + 28)) = 0x4038000000000000;
  uint64_t v55 = (uint64_t)v6;
  uint64_t v56 = v78;
  outlined init with take of ActivityIndicator(v55, v78, (void (*)(void))type metadata accessor for ActivityIndicator);
  uint64_t v58 = v79;
  uint64_t v57 = v80;
  unint64_t v59 = v81;
  (*(void (**)(char *, void, unint64_t))(v80 + 104))(v79, *MEMORY[0x1E4F3C618], v81);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v61 = (uint64_t *)(v53
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>)
                           + 36));
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  (*(void (**)(char *, char *, unint64_t))(v57 + 16))((char *)v61 + *(int *)(v62 + 28), v58, v59);
  *uint64_t v61 = KeyPath;
  outlined init with copy of Capsule(v56, v53, (void (*)(void))type metadata accessor for ActivityIndicator);
  (*(void (**)(char *, unint64_t))(v57 + 8))(v58, v59);
  outlined destroy of Capsule(v56, (void (*)(void))type metadata accessor for ActivityIndicator);
  outlined init with copy of FeatureEligibility?(v51, v84, &demangling cache variable for type metadata for ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>);
  swift_storeEnumTagMultiPayload();
  lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>);
  _ConditionalContent<>.init(storage:)();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v51, &demangling cache variable for type metadata for ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>);
}

uint64_t closure #1 in ScreenSharingSpectatorModalOverlay.statusView.getter()
{
  type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v1 = v0;
  uint64_t v2 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 904))(v2);
  return swift_release();
}

uint64_t closure #2 in ScreenSharingSpectatorModalOverlay.statusView.getter@<X0>(uint64_t a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_conversationKit);
  v10._id object = (void *)0xE000000000000000;
  v3._id object = (void *)0x80000001C3799C90;
  v3._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v4.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v4.value._id object = (void *)0xEF74694B6E6F6974;
  v5._uint64_t countAndFlagsBits = 0;
  v5._id object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v10);

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8 & 1;
  *(void *)(a1 + 24) = v9;
  return result;
}

uint64_t ScreenSharingSpectatorModalOverlay.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_62();
  *(void *)uint64_t v9 = static HorizontalAlignment.center.getter();
  *(void *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 16) = 1;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>);
  closure #1 in ScreenSharingSpectatorModalOverlay.body.getter(v3, (void *)(v9 + *(int *)(v12 + 44)));
  uint64_t v13 = static Alignment.center.getter();
  char v25 = 1;
  char v24 = 1;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v24, 0, v25, v13, v14, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v9, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>);
  uint64_t v15 = static Animation.default.getter();
  type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v17 = v16;
  uint64_t v18 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v17 + 648))(&v26, v18);
  swift_release();
  uint64_t v19 = v26;
  outlined init with copy of FeatureEligibility?(v2, a1, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>);
  uint64_t v20 = (uint64_t *)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>, _AnimationModifier<RemoteControlState>>)
                           + 36));
  *uint64_t v20 = v15;
  v20[1] = v19;
  uint64_t v21 = OUTLINED_FUNCTION_39();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v21, v22);
}

void closure #1 in ScreenSharingSpectatorModalOverlay.body.getter(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v180 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>);
  MEMORY[0x1F4188790](v3 - 8);
  Swift::String v193 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>);
  uint64_t v5 = MEMORY[0x1F4188790](v182);
  uint64_t v195 = (uint64_t)&v153 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v181 = (uint64_t)&v153 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v194 = (uint64_t)&v153 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v159 = (uint64_t *)((char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>);
  uint64_t v12 = MEMORY[0x1F4188790](v158);
  uint64_t v197 = (uint64_t)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v157 = (uint64_t)&v153 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v196 = (uint64_t)&v153 - v16;
  uint64_t v17 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v198 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  Swift::String v187 = (char *)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  id v172 = (char *)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  Swift::String v186 = (char *)&v153 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v192 = (uint64_t)&v153 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v191 = (uint64_t)&v153 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v153 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v155 = (uint64_t)&v153 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v190 = (uint64_t)&v153 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  long long v170 = (char *)&v153 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v154 = (uint64_t)&v153 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v169 = (char *)&v153 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v185 = (uint64_t)&v153 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v153 = (uint64_t)&v153 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  char v184 = (char *)&v153 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v188 = (uint64_t)&v153 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v167 = (uint64_t)&v153 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  long long v168 = (char *)&v153 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v183 = (uint64_t)&v153 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v166 = (uint64_t)&v153 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  unint64_t v59 = (char *)&v153 - v58;
  MEMORY[0x1F4188790](v57);
  uint64_t v61 = (char *)&v153 - v60;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v62 - 8);
  uint64_t v64 = (char *)&v153 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = a1 + *(int *)(type metadata accessor for ScreenSharingSpectatorModalOverlay(0) + 20);
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v66 = v65;
  uint64_t v67 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v66 + 216))(v67);
  uint64_t v68 = a1;
  swift_release();
  LOBYTE(v214) = 1;
  ParticipantAvatar.init(_:colorStyle:)((uint64_t)v64, (unsigned __int8 *)&v214, (uint64_t)__src);
  uint64_t v178 = __src[2];
  uint64_t v179 = __src[1];
  uint64_t v176 = __src[4];
  uint64_t v177 = __src[3];
  uint64_t v175 = __src[5];
  id v173 = (void *)__src[0];
  uint64_t v174 = __src[6];
  int v171 = LOBYTE(__src[7]);
  specialized Environment.wrappedValue.getter();
  uint64_t v69 = *(void (**)(void))(v198 + 104);
  unsigned int v201 = *MEMORY[0x1E4F3DA58];
  char v199 = (void (*)(uint64_t, void, uint64_t))v69;
  uint64_t v200 = v198 + 104;
  v69(v59);
  __swift_storeEnumTagSinglePayload((uint64_t)v59, 0, 1, v17);
  uint64_t v189 = v19;
  uint64_t v70 = (uint64_t)&v29[*(int *)(v19 + 48)];
  outlined init with copy of FeatureEligibility?((uint64_t)v61, (uint64_t)v29, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?((uint64_t)v59, v70, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v17) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v59, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v61, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v70, 1, v17);
    uint64_t v72 = v191;
    uint64_t v73 = (uint64_t)v168;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v29, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      uint64_t v74 = 0x4056800000000000;
      uint64_t v75 = v189;
      uint64_t v76 = (uint64_t)v184;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v77 = v166;
    outlined init with copy of FeatureEligibility?((uint64_t)v29, v166, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v70, 1, v17) != 1)
    {
      uint64_t v78 = v68;
      uint64_t v79 = v198;
      uint64_t v80 = v187;
      (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v187, v70, v17);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
      LODWORD(v165) = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v81 = *(void (**)(char *, uint64_t))(v79 + 8);
      v81(v80, v17);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v59, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v61, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v81((char *)v77, v17);
      uint64_t v68 = v78;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v29, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      uint64_t v74 = 0x4056800000000000;
      uint64_t v75 = v189;
      uint64_t v76 = (uint64_t)v184;
      uint64_t v72 = v191;
      uint64_t v73 = (uint64_t)v168;
      if (v165) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v59, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v61, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v77, v17);
    uint64_t v72 = v191;
    uint64_t v73 = (uint64_t)v168;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v29, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  uint64_t v75 = v189;
  uint64_t v76 = (uint64_t)v184;
LABEL_8:
  uint64_t v74 = 0x4052C00000000000;
LABEL_9:
  long long v168 = (char *)v74;
  uint64_t v82 = v183;
  specialized Environment.wrappedValue.getter();
  v199(v73, v201, v17);
  __swift_storeEnumTagSinglePayload(v73, 0, 1, v17);
  uint64_t v83 = v72 + *(int *)(v75 + 48);
  outlined init with copy of FeatureEligibility?(v82, v72, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v73, v83, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v72, 1, v17) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v73, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v82, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    int v84 = __swift_getEnumTagSinglePayload(v83, 1, v17);
    uint64_t v85 = (uint64_t)v186;
    if (v84 == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v191, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v86 = v167;
  outlined init with copy of FeatureEligibility?(v72, v167, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  int v87 = __swift_getEnumTagSinglePayload(v83, 1, v17);
  uint64_t v88 = v198;
  if (v87 == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v73, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v82, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v17);
    uint64_t v85 = (uint64_t)v186;
LABEL_14:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v191, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_16;
  }
  uint64_t v89 = v86;
  uint64_t v90 = v187;
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v187, v83, v17);
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
  dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v91 = *(void (**)(char *, uint64_t))(v88 + 8);
  v91(v90, v17);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v73, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v183, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v91((char *)v89, v17);
  uint64_t v76 = (uint64_t)v184;
  uint64_t v75 = v189;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v191, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v85 = (uint64_t)v186;
LABEL_16:
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v191 = v202;
  LODWORD(v184) = v203;
  uint64_t v183 = v204;
  LODWORD(v168) = v205;
  uint64_t v166 = v207;
  uint64_t v167 = v206;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v165 = v208;
  int v164 = v209;
  uint64_t v163 = v210;
  int v162 = v211;
  uint64_t v160 = v213;
  uint64_t v161 = v212;
  uint64_t v92 = static HorizontalAlignment.center.getter();
  uint64_t v93 = (uint64_t)v159;
  *uint64_t v159 = v92;
  *(void *)(v93 + 8) = 0;
  *(unsigned char *)(v93 + 16) = 1;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>);
  closure #1 in closure #1 in ScreenSharingSpectatorModalOverlay.body.getter(v68, (void *)(v93 + *(int *)(v94 + 44)));
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v96 = v95;
  uint64_t v97 = swift_release();
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v96 + 648))(__src, v97);
  swift_release();
  uint64_t v98 = __src[0];
  uint64_t v99 = v157;
  outlined init with copy of FeatureEligibility?(v93, v157, &demangling cache variable for type metadata for VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>);
  *(void *)(v99 + *(int *)(v158 + 52)) = v98;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v93, &demangling cache variable for type metadata for VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>);
  outlined init with take of Any?(v99, v196, &demangling cache variable for type metadata for IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>);
  uint64_t v100 = v188;
  specialized Environment.wrappedValue.getter();
  v199(v76, v201, v17);
  __swift_storeEnumTagSinglePayload(v76, 0, 1, v17);
  uint64_t v101 = v192;
  uint64_t v102 = v192 + *(int *)(v75 + 48);
  outlined init with copy of FeatureEligibility?(v100, v192, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v76, v102, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v101, 1, v17) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v76, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v100, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    int v103 = __swift_getEnumTagSinglePayload(v102, 1, v17);
    uint64_t v104 = (uint64_t)v193;
    uint64_t v105 = (uint64_t)v169;
    if (v103 == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v192, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      uint64_t v106 = v185;
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v107 = v153;
  outlined init with copy of FeatureEligibility?(v101, v153, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v102, 1, v17) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v76, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v188, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v107, v17);
    uint64_t v104 = (uint64_t)v193;
    uint64_t v105 = (uint64_t)v169;
LABEL_21:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v192, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    uint64_t v106 = v185;
    goto LABEL_23;
  }
  uint64_t v108 = v198;
  uint64_t v109 = v187;
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v187, v102, v17);
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v110 = v75;
  uint64_t v111 = v107;
  uint64_t v112 = *(void (**)(char *, uint64_t))(v108 + 8);
  v112(v109, v17);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v76, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v188, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v113 = v111;
  uint64_t v75 = v110;
  v112((char *)v113, v17);
  uint64_t v85 = (uint64_t)v186;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v192, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v104 = (uint64_t)v193;
  uint64_t v105 = (uint64_t)v169;
  uint64_t v106 = v185;
LABEL_23:
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v192 = v214;
  LODWORD(v188) = v215;
  Swift::String v186 = v216;
  LODWORD(v169) = v217;
  uint64_t v158 = v219;
  uint64_t v159 = v218;
  ScreenSharingSpectatorModalOverlay.statusView.getter(v104);
  specialized Environment.wrappedValue.getter();
  v199(v105, v201, v17);
  __swift_storeEnumTagSinglePayload(v105, 0, 1, v17);
  uint64_t v114 = v85 + *(int *)(v75 + 48);
  outlined init with copy of FeatureEligibility?(v106, v85, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v105, v114, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v85, 1, v17) == 1)
  {
    uint64_t v115 = v75;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v105, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v106, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v114, 1, v17) == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v85, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      uint64_t v116 = (uint64_t)v172;
      uint64_t v117 = (uint64_t)v170;
      unint64_t v118 = 0x1EA345000;
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  uint64_t v119 = v154;
  outlined init with copy of FeatureEligibility?(v85, v154, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v114, 1, v17) == 1)
  {
    uint64_t v115 = v75;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v105, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v106, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v119, v17);
LABEL_28:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v85, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    uint64_t v116 = (uint64_t)v172;
    uint64_t v117 = (uint64_t)v170;
    unint64_t v118 = 0x1EA345000uLL;
    goto LABEL_32;
  }
  uint64_t v120 = v198;
  uint64_t v121 = v119;
  uint64_t v122 = v187;
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v187, v114, v17);
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
  char v123 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v124 = v120;
  uint64_t v125 = v85;
  uint64_t v126 = *(void (**)(char *, uint64_t))(v124 + 8);
  v126(v122, v17);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v105, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v185, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v126((char *)v121, v17);
  uint64_t v115 = v189;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v125, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v116 = (uint64_t)v172;
  uint64_t v117 = (uint64_t)v170;
  unint64_t v118 = 0x1EA345000;
  if ((v123 & 1) == 0)
  {
LABEL_32:
    if (*(void *)(v118 + 1304) == -1) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_30:
  if (one-time initialization token for regularButtonSize != -1) {
LABEL_33:
  }
    swift_once();
LABEL_34:
  specialized Environment.wrappedValue.getter();
  uint64_t v127 = v190;
  v199(v190, v201, v17);
  __swift_storeEnumTagSinglePayload(v127, 0, 1, v17);
  uint64_t v128 = v116 + *(int *)(v115 + 48);
  outlined init with copy of FeatureEligibility?(v117, v116, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?(v127, v128, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v116, 1, v17) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v127, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v117, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    int v129 = __swift_getEnumTagSinglePayload(v128, 1, v17);
    uint64_t v130 = (uint64_t)v193;
    if (v129 == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v116, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  uint64_t v131 = v155;
  outlined init with copy of FeatureEligibility?(v116, v155, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v128, 1, v17) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v190, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v117, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v131, v17);
    uint64_t v130 = (uint64_t)v193;
LABEL_39:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v116, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_43;
  }
  uint64_t v132 = v198;
  int v133 = v187;
  (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v187, v128, v17);
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
  char v134 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v135 = *(void (**)(char *, uint64_t))(v132 + 8);
  v135(v133, v17);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v190, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v117, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v135((char *)v131, v17);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v116, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v130 = (uint64_t)v193;
  if (v134)
  {
LABEL_41:
    if (one-time initialization token for regularButtonSize == -1) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_43:
  if (*(void *)(v118 + 1304) != -1) {
LABEL_44:
  }
    swift_once();
LABEL_45:
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v136 = v181;
  outlined init with copy of FeatureEligibility?(v130, v181, &demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>);
  memcpy((void *)(v136 + *(int *)(v182 + 36)), __src, 0x70uLL);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v130, &demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>);
  uint64_t v137 = v136;
  uint64_t v138 = v194;
  outlined init with take of Any?(v137, v194, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>);
  outlined init with copy of FeatureEligibility?(v196, v197, &demangling cache variable for type metadata for IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>);
  outlined init with copy of FeatureEligibility?(v138, v195, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>);
  uint64_t v139 = v173;
  uint64_t v140 = v174;
  uint64_t v142 = v179;
  long long v141 = v180;
  *long long v180 = v173;
  v141[1] = v142;
  uint64_t v144 = v177;
  uint64_t v143 = v178;
  v141[2] = v178;
  v141[3] = v144;
  uint64_t v145 = v175;
  v141[4] = v176;
  v141[5] = v145;
  v141[6] = v140;
  *((unsigned char *)v141 + 56) = v171;
  v141[8] = v191;
  *((unsigned char *)v141 + 72) = (_BYTE)v184;
  v141[10] = v183;
  *((unsigned char *)v141 + 88) = (_BYTE)v168;
  uint64_t v146 = v166;
  v141[12] = v167;
  v141[13] = v146;
  v141[14] = 0;
  *((unsigned char *)v141 + 120) = 1;
  v141[16] = v165;
  *((unsigned char *)v141 + 136) = v164;
  v141[18] = v163;
  *((unsigned char *)v141 + 152) = v162;
  uint64_t v147 = v160;
  v141[20] = v161;
  v141[21] = v147;
  uint64_t v148 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>));
  outlined init with copy of FeatureEligibility?(v197, (uint64_t)v141 + v148[16], &demangling cache variable for type metadata for IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>);
  id v149 = (char *)v141 + v148[20];
  *(void *)id v149 = 0;
  v149[8] = 1;
  *((void *)v149 + 2) = v192;
  v149[24] = v188;
  *((void *)v149 + 4) = v186;
  v149[40] = (char)v169;
  uint64_t v150 = v158;
  *((void *)v149 + 6) = v159;
  *((void *)v149 + 7) = v150;
  uint64_t v151 = (uint64_t)v141 + v148[24];
  uint64_t v152 = v195;
  outlined init with copy of FeatureEligibility?(v195, v151, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>);
  outlined copy of ParticipantContactDetails?(v139, v142, v143);
  outlined copy of ParticipantContactDetails?(v139, v142, v143);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v194, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v196, &demangling cache variable for type metadata for IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>);
  outlined consume of ParticipantContactDetails?(v139, v142, v143);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v152, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v197, &demangling cache variable for type metadata for IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>);
  outlined consume of ParticipantContactDetails?(v139, v142, v143);
}