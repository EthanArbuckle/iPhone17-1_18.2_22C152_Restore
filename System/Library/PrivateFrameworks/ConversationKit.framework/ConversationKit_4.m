uint64_t type metadata accessor for BezelOutlineEffectView()
{
  return self;
}

uint64_t type metadata accessor for BezelEffectView()
{
  return self;
}

uint64_t initializeWithCopy for BezelEffectModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BezelEffectModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for BezelEffectModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

void type metadata accessor for BezelEffectModifier()
{
}

uint64_t sub_1C31AEE24(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy15ConversationKit19BezelShieldMaterialOGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BezelShieldMaterial> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_1C31AEE38(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy15ConversationKit19BezelShieldMaterialOGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy15ConversationKit19BezelShieldMaterialOGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<BezelEffectModifier>, _OverlayModifier<BezelEffectViewRepresentable>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<BezelEffectModifier>, _OverlayModifier<BezelEffectViewRepresentable>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<BezelEffectModifier>, _OverlayModifier<BezelEffectViewRepresentable>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<BezelEffectModifier>, _OverlayModifier<BezelEffectViewRepresentable>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<BezelEffectModifier> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<BezelEffectModifier>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<BezelEffectViewRepresentable> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<BezelEffectViewRepresentable>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<BezelEffectModifier>, _OverlayModifier<BezelEffectViewRepresentable>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C31AEFAC()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type BezelEffectModifier and conformance BezelEffectModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type BezelEffectModifier and conformance BezelEffectModifier;
  if (!lazy protocol witness table cache variable for type BezelEffectModifier and conformance BezelEffectModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelEffectModifier and conformance BezelEffectModifier);
  }
  return result;
}

uint64_t destroy for BezelEffectViewRepresentable(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BezelEffectViewRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  char v6 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BezelEffectViewRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v9 = *(_OWORD *)(a2 + 40);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for BezelEffectViewRepresentable(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  swift_release();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 80) = a2[10];
  return a1;
}

uint64_t getEnumTagSinglePayload for BezelEffectViewRepresentable(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BezelEffectViewRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for BezelEffectViewRepresentable()
{
  return &unk_1F1E9E848;
}

void *type metadata accessor for BezelOutlineColorKey()
{
  return &unk_1F1E9E878;
}

unint64_t lazy protocol witness table accessor for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable;
  if (!lazy protocol witness table cache variable for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable;
  if (!lazy protocol witness table cache variable for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

uint64_t sub_1C31AF40C()
{
  return swift_deallocObject();
}

id partial apply for closure #3 in BezelEffectView.updateEffectViews(animated:)()
{
  return closure #3 in BezelEffectView.updateEffectViews(animated:)();
}

uint64_t sub_1C31AF44C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in BezelEffectView.updateEffectViews(animated:)()
{
}

id partial apply for closure #2 in BezelEffectView.updateEffectViews(animated:)()
{
  return BezelEffectView._updateEffectViewVisibility()();
}

unint64_t lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation()
{
  unint64_t result = lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation;
  if (!lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation)
  {
    type metadata accessor for UIInterfaceOrientation(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc CABackdropLayer.groupName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setGroupName_, v4);
}

uint64_t key path getter for PushToTalkSessionDetailsView.avatarView : PushToTalkSessionDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t key path setter for PushToTalkSessionDetailsView.avatarView : PushToTalkSessionDetailsView(id *a1, void **a2)
{
  id v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x98);
  id v4 = *a1;
  return v3(v2);
}

void PushToTalkSessionDetailsView.avatarView.willset(void *a1)
{
  v3 = (id *)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_avatarView];
  swift_beginAccess();
  if (*v3) {
    objc_msgSend(*v3, sel_removeFromSuperview);
  }
  if (a1)
  {
    id v4 = a1;
    objc_msgSend(v1, sel_addSubview_, v4);
    PushToTalkSessionDetailsView.setupAvatarViewConstraints(avatarView:)(v4);
  }
}

void *PushToTalkSessionDetailsView.avatarView.getter()
{
  OUTLINED_FUNCTION_5_4();
  v1 = *v0;
  id v2 = v1;
  return v1;
}

void PushToTalkSessionDetailsView.avatarView.setter(void *a1)
{
  PushToTalkSessionDetailsView.avatarView.willset(a1);
  OUTLINED_FUNCTION_0_1();
  v3 = *v1;
  void *v1 = a1;
}

void (*PushToTalkSessionDetailsView.avatarView.modify(void *a1))(uint64_t a1, char a2)
{
  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_avatarView);
  swift_beginAccess();
  char v5 = *v4;
  v3[3] = *v4;
  id v6 = v5;
  return PushToTalkSessionDetailsView.avatarView.modify;
}

void PushToTalkSessionDetailsView.avatarView.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  id v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  if (a2)
  {
    id v5 = v3;
    PushToTalkSessionDetailsView.avatarView.setter(v3);
  }
  else
  {
    PushToTalkSessionDetailsView.avatarView.setter(*(void **)(*(void *)a1 + 24));
  }
  free(v2);
}

uint64_t key path getter for PushToTalkSessionDetailsView.avatarViewHash : PushToTalkSessionDetailsView@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA8))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t key path setter for PushToTalkSessionDetailsView.avatarViewHash : PushToTalkSessionDetailsView(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB0))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t PushToTalkSessionDetailsView.avatarViewHash.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(void *)v0;
}

uint64_t PushToTalkSessionDetailsView.avatarViewHash.setter(uint64_t a1, char a2)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *(void *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PushToTalkSessionDetailsView.avatarViewHash.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for PushToTalkSessionDetailsView.titleLabel : PushToTalkSessionDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for PushToTalkSessionDetailsView.titleLabel : PushToTalkSessionDetailsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC8))(*a1);
}

id PushToTalkSessionDetailsView.titleLabel.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView____lazy_storage___titleLabel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView____lazy_storage___titleLabel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView____lazy_storage___titleLabel);
  }
  else
  {
    id v4 = closure #1 in PushToTalkSessionDetailsView.titleLabel.getter();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in PushToTalkSessionDetailsView.titleLabel.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  if (one-time initialization token for channelNameLabel != -1) {
    swift_once();
  }
  objc_msgSend(v0, sel_setFont_, static Fonts.PTT.channelNameLabel);
  if (one-time initialization token for channelNameLabel != -1) {
    swift_once();
  }
  objc_msgSend(v0, sel_setTextColor_, static Colors.PTT.channelNameLabel);
  objc_msgSend(v0, sel_setNumberOfLines_, 1);
  objc_msgSend(v0, sel_setClipsToBounds_, 1);
  objc_msgSend(v0, sel_setLineBreakMode_, 4);
  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  LODWORD(v1) = 1132068864;
  objc_msgSend(v0, sel_setContentCompressionResistancePriority_forAxis_, 0, v1);
  objc_msgSend(v0, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v0, sel_setMinimumScaleFactor_, 0.9);
  objc_msgSend(v0, sel_setMaximumContentSizeCategory_, *MEMORY[0x1E4FB27B0]);
  objc_msgSend(v0, sel_setMinimumContentSizeCategory_, *MEMORY[0x1E4FB27E8]);
  objc_msgSend(v0, sel_setMarqueeEnabled_, 1);
  objc_msgSend(v0, sel_setMarqueeRunning_, 1);
  return v0;
}

void PushToTalkSessionDetailsView.titleLabel.setter(uint64_t a1)
{
}

void (*PushToTalkSessionDetailsView.titleLabel.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = PushToTalkSessionDetailsView.titleLabel.getter();
  return PushToTalkSessionDetailsView.titleLabel.modify;
}

void PushToTalkSessionDetailsView.titleLabel.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    PushToTalkSessionDetailsView.titleLabel.setter((uint64_t)v3);
  }
  else
  {
    PushToTalkSessionDetailsView.titleLabel.setter((uint64_t)v2);
  }
}

id PushToTalkSessionDetailsView.disclosureButton.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton);
}

void PushToTalkSessionDetailsView.textAreaLeadingAnchorConstraint.setter(uint64_t a1)
{
}

void PushToTalkSessionDetailsView.textAreaCenterYAnchorConstraint.setter(uint64_t a1)
{
}

id PushToTalkSessionDetailsView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void *PushToTalkSessionDetailsView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_avatarView] = 0;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_avatarViewHash];
  *(void *)id v1 = 0;
  v1[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView____lazy_storage___titleLabel] = 0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton;
  type metadata accessor for PushToTalkDisclosureButton();
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  double v4 = v0;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_init);
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide;
  *(void *)&v4[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButtonLayoutGuide;
  *(void *)&v4[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLeadingAnchorConstraint] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaCenterYAnchorConstraint] = 0;

  uint64_t v15 = type metadata accessor for PushToTalkSessionDetailsView();
  double v7 = OUTLINED_FUNCTION_6_2();
  long long v10 = objc_msgSendSuper2(v8, v9, v7, v4, v15);
  v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0xC0);
  v12 = v10;
  v13 = (void *)v11();
  objc_msgSend(v12, sel_addSubview_, v13);

  objc_msgSend(v12, sel_addSubview_, *(void *)((char *)v12 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton));
  objc_msgSend(v12, sel_addLayoutGuide_, *(void *)((char *)v12 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide));
  objc_msgSend(v12, sel_addLayoutGuide_, *(void *)((char *)v12 + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButtonLayoutGuide));
  PushToTalkSessionDetailsView.setupConstraints()();

  return v12;
}

uint64_t type metadata accessor for PushToTalkSessionDetailsView()
{
  return self;
}

id PushToTalkSessionDetailsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PushToTalkSessionDetailsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_avatarView] = 0;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_avatarViewHash];
  *(void *)id v1 = 0;
  v1[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView____lazy_storage___titleLabel] = 0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton;
  type metadata accessor for PushToTalkDisclosureButton();
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButtonLayoutGuide;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLeadingAnchorConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaCenterYAnchorConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall PushToTalkSessionDetailsView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v16.receiver = v1;
  v16.super_class = (Class)type metadata accessor for PushToTalkSessionDetailsView();
  objc_msgSendSuper2(&v16, sel_traitCollectionDidChange_, isa);
  if (isa) {
    id v3 = [(objc_class *)isa _backlightLuminance];
  }
  else {
    id v3 = 0;
  }
  id v4 = objc_msgSend(v1, sel_traitCollection);
  id v5 = objc_msgSend(v4, sel__backlightLuminance);

  if (!isa || v3 != v5)
  {
    id v6 = objc_msgSend(v1, sel_traitCollection);
    id v7 = objc_msgSend(v6, sel__backlightLuminance);

    OUTLINED_FUNCTION_10_1();
    SEL v9 = *(uint64_t (**)(void))(v8 + 192);
    long long v10 = (void *)v9();
    objc_msgSend(v10, sel_setMarqueeRunning_, v7 != (id)1);

    v11 = (void *)v9();
    objc_msgSend(v11, sel_setMarqueeEnabled_, v7 != (id)1);

    OUTLINED_FUNCTION_10_1();
    v13 = (void *)(*(uint64_t (**)(void))(v12 + 144))();
    if (v13)
    {
      v14 = v13;
      double v15 = 0.2;
      if (v7 != (id)1) {
        double v15 = 1.0;
      }
      objc_msgSend(v13, sel_setAlpha_, v15);
    }
  }
}

void PushToTalkSessionDetailsView.setupAvatarViewConstraints(avatarView:)(id a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLeadingAnchorConstraint];
  if (v4) {
    objc_msgSend(v4, sel_setActive_, 0);
  }
  objc_msgSend(a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v5 = objc_msgSend(a1, sel_bottomAnchor);
  id v6 = objc_msgSend(v2, sel_bottomAnchor);
  id v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v6);

  LODWORD(v8) = 1132068864;
  objc_msgSend(v7, sel_setPriority_, v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769600;
  id v10 = objc_msgSend(a1, sel_topAnchor);
  id v11 = OUTLINED_FUNCTION_9_42((uint64_t)objc_msgSend(v2, sel_topAnchor));

  *(void *)(v9 + 32) = v11;
  id v12 = objc_msgSend(a1, sel_leadingAnchor);
  id v13 = OUTLINED_FUNCTION_9_42((uint64_t)objc_msgSend(v2, sel_leadingAnchor));

  *(void *)(v9 + 40) = v13;
  id v14 = objc_msgSend(a1, sel_widthAnchor);
  id v15 = objc_msgSend(v14, sel_constraintEqualToConstant_, 60.0);

  *(void *)(v9 + 48) = v15;
  id v16 = objc_msgSend(a1, sel_heightAnchor);
  id v17 = objc_msgSend(v16, sel_constraintEqualToConstant_, 60.0);

  *(void *)(v9 + 56) = v17;
  *(void *)(v9 + 64) = v7;
  specialized Array._endMutation()();
  v18 = self;
  type metadata accessor for NSLayoutConstraint();
  id v22 = v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_activateConstraints_, isa);

  id v20 = PushToTalkSessionDetailsView.setupTextAreaLeadingAnchorConstraint(avatarView:)(a1);
  PushToTalkSessionDetailsView.textAreaLeadingAnchorConstraint.setter((uint64_t)v20);
  id v21 = PushToTalkSessionDetailsView.setupTextAreaCenterYAnchorConstraint(avatarView:)(a1);
  PushToTalkSessionDetailsView.textAreaCenterYAnchorConstraint.setter((uint64_t)v21);
}

void PushToTalkSessionDetailsView.setupConstraints()()
{
  id v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0xC0);
  id v3 = (void *)v2();
  id v4 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton];
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769830;
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide;
  id v7 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide], sel_trailingAnchor);
  id v8 = objc_msgSend(v1, (SEL)&selRef_supportsDynamicSystemUI + 4);
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v8);

  *(void *)(v5 + 32) = v9;
  unint64_t v54 = v5;
  uint64_t v10 = specialized Array._endMutation()();
  unint64_t v11 = v5;
  id v12 = (void *)((uint64_t (*)(uint64_t))v2)(v10);
  id v13 = objc_msgSend(v12, sel_topAnchor);

  id v14 = objc_msgSend(*(id *)&v1[v6], sel_topAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  id v16 = (void *)v2();
  id v17 = objc_msgSend(v16, sel_leadingAnchor);

  id v18 = objc_msgSend(*(id *)&v1[v6], sel_leadingAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  v52 = v2;
  id v20 = (void *)v2();
  id v21 = objc_msgSend(v20, sel_trailingAnchor);

  id v22 = objc_msgSend(*(id *)&v1[v6], sel_trailingAnchor);
  id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v24, 3))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v24 + 3, 1);
    specialized Array._endMutation()();
    unint64_t v11 = (unint64_t)v15;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_5;
    }
  }
  OUTLINED_FUNCTION_1_4();
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v25 = v19;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_1_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v26 = v23;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_1_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v27 = objc_msgSend(v4, sel_topAnchor);
  v28 = (void *)v52();
  id v29 = objc_msgSend(v28, sel_bottomAnchor);

  id v53 = objc_msgSend(v27, sel_constraintEqualToAnchor_constant_, v29, -2.0);
  id v30 = objc_msgSend(v4, sel_leadingAnchor);
  id v31 = objc_msgSend(*(id *)&v1[v6], sel_leadingAnchor);
  v32 = &selRef_ringButton;
  id v33 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  id v34 = objc_msgSend(v4, sel_trailingAnchor);
  uint64_t v35 = OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButtonLayoutGuide;
  id v36 = OUTLINED_FUNCTION_8_38((uint64_t)objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButtonLayoutGuide], sel_leadingAnchor));

  id v37 = objc_msgSend(v4, sel_bottomAnchor);
  id v38 = OUTLINED_FUNCTION_8_38((uint64_t)objc_msgSend(*(id *)&v1[v6], sel_bottomAnchor));

  id v39 = objc_msgSend(*(id *)&v1[v35], sel_trailingAnchor);
  id v40 = objc_msgSend(*(id *)&v1[v6], sel_trailingAnchor);
  id v41 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v40);

  if (v54 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v42, 5))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v42 + 5, 1);
    specialized Array._endMutation()();
    v32 = (char **)v53;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_1_66();
    if (!v43) {
      goto LABEL_13;
    }
  }
  OUTLINED_FUNCTION_1_4();
LABEL_13:
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v44 = v33;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v43) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v45 = v36;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v43) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v46 = v38;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v43) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v47 = v41;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v43) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  v48 = self;
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_activateConstraints_, isa);

  id v50 = PushToTalkSessionDetailsView.setupTextAreaLeadingAnchorConstraint(avatarView:)(0);
  PushToTalkSessionDetailsView.textAreaLeadingAnchorConstraint.setter((uint64_t)v50);
  id v51 = PushToTalkSessionDetailsView.setupTextAreaCenterYAnchorConstraint(avatarView:)(0);
  PushToTalkSessionDetailsView.textAreaCenterYAnchorConstraint.setter((uint64_t)v51);
}

id PushToTalkSessionDetailsView.setupTextAreaLeadingAnchorConstraint(avatarView:)(void *a1)
{
  id v3 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide], sel_leadingAnchor);
  if (!a1 || (id v4 = objc_msgSend(a1, sel_trailingAnchor)) == 0) {
    id v4 = objc_msgSend(v1, sel_leadingAnchor);
  }
  double v5 = 12.0;
  if (!a1) {
    double v5 = 0.0;
  }
  id v6 = objc_msgSend(v3, sel_constraintEqualToAnchor_constant_, v4, v5);

  objc_msgSend(v6, sel_setActive_, 1);
  return v6;
}

id PushToTalkSessionDetailsView.setupTextAreaCenterYAnchorConstraint(avatarView:)(void *a1)
{
  id v3 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_textAreaLayoutGuide], sel_centerYAnchor);
  if (!a1 || (id v4 = objc_msgSend(a1, sel_centerYAnchor)) == 0) {
    id v4 = objc_msgSend(v1, sel_centerYAnchor);
  }
  id v5 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v4);

  objc_msgSend(v5, sel_setActive_, 1);
  return v5;
}

id PushToTalkSessionDetailsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkSessionDetailsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PushToTalkSessionDetailsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkSessionDetailsView);
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.avatarView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.avatarView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.avatarView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.avatarViewHash.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.avatarViewHash.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xB0))(a1, a2 & 1);
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.avatarViewHash.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.titleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.titleLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PushToTalkSessionDetailsView.titleLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

id RestrictedConversationChecker.__allocating_init(callCenter:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return RestrictedConversationChecker.init(callCenter:)(a1);
}

uint64_t *RestrictedConversationChecker.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static RestrictedConversationChecker.shared;
}

id static RestrictedConversationChecker.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  Class v0 = (void *)static RestrictedConversationChecker.shared;
  return v0;
}

id RestrictedConversationChecker.init(callCenter:)(void *a1)
{
  id v3 = v1;
  id v4 = objc_msgSend(a1, sel_callFilterController);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29RestrictedConversationChecker_callFilterController] = v4;
  type metadata accessor for UUID();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit29RestrictedConversationChecker_unrestrictedAddressesForConversation] = Dictionary.init(dictionaryLiteral:)();

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for RestrictedConversationChecker();
  id v5 = objc_msgSendSuper2(&v10, sel_init);
  id v6 = objc_msgSend(a1, sel_conversationManager);
  id v7 = v5;
  id v8 = objc_msgSend(a1, sel_queue);
  objc_msgSend(v6, sel_addDelegate_queue_, v7, v8);

  return v7;
}

uint64_t type metadata accessor for RestrictedConversationChecker()
{
  return self;
}

void RestrictedConversationChecker.shouldRestrict(conversation:)()
{
  OUTLINED_FUNCTION_31();
  objc_super v2 = v1;
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_42();
  id v9 = (v7 - v8);
  id v10 = objc_msgSend(v2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit29RestrictedConversationChecker_callFilterController);
  id v12 = objc_msgSend(v11, sel_addressesToCheckForRestrictionsInConversation_, v2);
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v13 + 16)) {
    goto LABEL_4;
  }
  id v14 = (uint64_t *)(v0
                  + OBJC_IVAR____TtC15ConversationKit29RestrictedConversationChecker_unrestrictedAddressesForConversation);
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized Dictionary.subscript.getter(v9, v15);
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    char v18 = specialized static Set.== infix(_:_:)(v17, v16);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      if (one-time initialization token for screenTime != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.screenTime);
      MEMORY[0x1F4188790](v20);
      OUTLINED_FUNCTION_10_42();
      OUTLINED_FUNCTION_7_55();
      v21();
      id v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = OUTLINED_FUNCTION_4_24();
        v62 = &v58;
        id v25 = (uint8_t *)v24;
        v63[0] = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)id v25 = 136315138;
        os_log_t v61 = v9;
        _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v63);
        OUTLINED_FUNCTION_8_5(v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v29 = *(void (**)(void))(v5 + 8);
        OUTLINED_FUNCTION_4_1();
        v29();
        _os_log_impl(&dword_1C2F90000, v22, v23, "Conversation %s not restricted: addresses are known to be unrestricted.", v25, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        OUTLINED_FUNCTION_4_1();
        v29();
      }
      else
      {

        id v30 = *(void (**)(void))(v5 + 8);
        OUTLINED_FUNCTION_4_1();
        v30();
        OUTLINED_FUNCTION_4_1();
        v30();
      }
      goto LABEL_23;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v31.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  unsigned int v32 = objc_msgSend(v11, sel_shouldRestrictAddresses_performSynchronously_, v31.super.isa, 0);

  if (v32)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for screenTime != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Log.screenTime);
    MEMORY[0x1F4188790](v34);
    OUTLINED_FUNCTION_10_42();
    OUTLINED_FUNCTION_7_55();
    v35();
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    uint64_t v38 = v3;
    if (os_log_type_enabled(v36, v37))
    {
      os_log_t v61 = v36;
      uint64_t v39 = OUTLINED_FUNCTION_4_24();
      v62 = &v58;
      id v40 = (uint8_t *)v39;
      uint64_t v60 = OUTLINED_FUNCTION_9_0();
      v63[0] = v60;
      *(_DWORD *)id v40 = 136315138;
      _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v63);
      OUTLINED_FUNCTION_8_5(v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v44 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_4_1();
      v44();
      os_log_t v45 = v61;
      _os_log_impl(&dword_1C2F90000, v61, v37, "Conversation %s is restricted.", v40, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      id v44 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_4_1();
      v44();
    }
    RestrictedConversationChecker.removeUnrestrictedAddresses(for:)();
    swift_bridgeObjectRelease();
    ((void (*)(NSObject *, uint64_t))v44)(v9, v38);
  }
  else
  {
    if (one-time initialization token for screenTime != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    uint64_t v47 = __swift_project_value_buffer(v46, (uint64_t)static Log.screenTime);
    v62 = &v58;
    MEMORY[0x1F4188790](v47);
    OUTLINED_FUNCTION_10_42();
    OUTLINED_FUNCTION_7_55();
    v48();
    v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      os_log_t v61 = v49;
      id v51 = (uint8_t *)OUTLINED_FUNCTION_4_24();
      uint64_t v60 = OUTLINED_FUNCTION_9_0();
      v63[0] = v60;
      v59 = v51;
      *(_DWORD *)id v51 = 136315138;
      v31.super.Class isa = (Class)((char *)v49 + (void)v51);
      uint64_t v47 = (uint64_t)(v51 + 4);
      _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v63);
      OUTLINED_FUNCTION_8_5(v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v55 = OUTLINED_FUNCTION_5_65();
      ((void (*)(uint64_t))v31.super.isa)(v55);
      os_log_t v56 = v61;
      _os_log_impl(&dword_1C2F90000, v61, v50, "Conversation %s not restricted. Caching addresses.", v59, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      uint64_t v57 = OUTLINED_FUNCTION_5_65();
      ((void (*)(uint64_t))v31.super.isa)(v57);
    }
    swift_beginAccess();
    specialized Dictionary._Variant.setValue(_:forKey:)(v13, (uint64_t)v9);
    swift_endAccess();
    ((void (*)(NSObject *, uint64_t))v31.super.isa)(v9, v47);
  }
LABEL_23:
  OUTLINED_FUNCTION_28();
}

void RestrictedConversationChecker.removeUnrestrictedAddresses(for:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_18_32();
  uint64_t v2 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  if (v2)
  {
    if (one-time initialization token for screenTime != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.screenTime);
    uint64_t v4 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v6 = v5;
    MEMORY[0x1F4188790](v7);
    id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v1, v4);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = OUTLINED_FUNCTION_4_24();
      v18[1] = v18;
      uint64_t v13 = (uint8_t *)v12;
      uint64_t v19 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v13 = 136315138;
      v18[0] = v13 + 4;
      _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
      OUTLINED_FUNCTION_21_23(v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_139();
      v17();
      _os_log_impl(&dword_1C2F90000, v10, v11, "Removed cached addresses for conversation %s.", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    }
  }
  OUTLINED_FUNCTION_28();
}

id RestrictedConversationChecker.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void RestrictedConversationChecker.init()()
{
}

id RestrictedConversationChecker.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RestrictedConversationChecker();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void RestrictedConversationChecker.conversationManager(_:migratingFrom:to:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  id v5 = objc_msgSend(v4, sel_UUID);
  uint64_t v6 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  RestrictedConversationChecker.removeUnrestrictedAddresses(for:)();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(void))(v8 + 8);
  OUTLINED_FUNCTION_139();
  v14();
  if (v13)
  {
    id v15 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit29RestrictedConversationChecker_callFilterController), sel_addressesToCheckForRestrictionsInConversation_, v3);
    uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v15) = specialized static Set.== infix(_:_:)(v13, v16);
    uint64_t v17 = swift_bridgeObjectRelease();
    if (v15)
    {
      uint64_t v35 = v14;
      os_log_type_t v37 = &v32;
      MEMORY[0x1F4188790](v17);
      unint64_t v18 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      id v19 = objc_msgSend(v3, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      if (one-time initialization token for screenTime != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Log.screenTime);
      uint64_t v34 = &v32;
      MEMORY[0x1F4188790](v21);
      id v22 = (char *)&v32 - v18;
      os_log_type_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      uint64_t v36 = (uint64_t)&v32 - v18;
      v23((char *)&v32 - v18, (char *)&v32 - v18, v6);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_4_24();
        uint64_t v33 = OUTLINED_FUNCTION_9_0();
        uint64_t v38 = v33;
        *(_DWORD *)uint64_t v26 = 136315138;
        unsigned int v32 = v26 + 4;
        _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v38);
        OUTLINED_FUNCTION_21_23(v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v30 = v35;
        OUTLINED_FUNCTION_139();
        v30();
        _os_log_impl(&dword_1C2F90000, v24, v25, "Migrating cached addresses to conversation %s.", v26, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        NSSet v31 = v22;
        id v30 = v35;
        ((void (*)(char *, uint64_t))v35)(v31, v6);
      }

      OUTLINED_FUNCTION_18_32();
      specialized Dictionary._Variant.setValue(_:forKey:)(v13, v36);
      swift_endAccess();
      OUTLINED_FUNCTION_139();
      v30();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_28();
}

void specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  OUTLINED_FUNCTION_3_75();
  if (!v8) {
    return;
  }
  OUTLINED_FUNCTION_1_78();
  do
  {
LABEL_5:
    if (v7)
    {
      OUTLINED_FUNCTION_15_34();
      goto LABEL_21;
    }
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    if (v9 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v9);
    ++v6;
    if (v10) {
      goto LABEL_20;
    }
    uint64_t v6 = v9 + 1;
    if (v9 + 1 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6);
    if (v10) {
      goto LABEL_20;
    }
    uint64_t v6 = v9 + 2;
    if (v9 + 2 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6);
    if (v10) {
      goto LABEL_20;
    }
    uint64_t v11 = v9 + 3;
    if (v11 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v11);
    if (!v10)
    {
      while (1)
      {
        uint64_t v6 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_29;
        }
        if (v6 >= v5) {
          return;
        }
        uint64_t v10 = *(void *)(v4 + 8 * v6);
        ++v11;
        if (v10) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v6 = v11;
LABEL_20:
    uint64_t v7 = (v10 - 1) & v10;
LABEL_21:
    OUTLINED_FUNCTION_28_16();
    Hasher._combine(_:)(v3);
    Hasher._finalize()();
    OUTLINED_FUNCTION_9_43();
    if ((v13 & 1) == 0) {
      return;
    }
  }
  while (v3 == *(unsigned __int8 *)(*(void *)(v2 + 48) + v12));
  while (1)
  {
    OUTLINED_FUNCTION_11_31();
    if ((v16 & 1) == 0) {
      break;
    }
    if (v3 == *(unsigned __int8 *)(v14 + v15)) {
      goto LABEL_5;
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  if (a1 != a2)
  {
    OUTLINED_FUNCTION_3_75();
    if (v39)
    {
      uint64_t v4 = 0;
      OUTLINED_FUNCTION_14_30();
      char v8 = v7 << v6;
      if (v8 < 64) {
        uint64_t v9 = ~(-1 << v8);
      }
      else {
        uint64_t v9 = -1;
      }
      uint64_t v10 = v9 & v5;
      uint64_t v11 = v2 + 56;
      if (v10) {
        goto LABEL_8;
      }
LABEL_9:
      if (__OFADD__(v4, 1))
      {
        __break(1u);
      }
      else
      {
        OUTLINED_FUNCTION_25_21();
        if (v13 == v14) {
          return;
        }
        OUTLINED_FUNCTION_24_21();
        uint64_t v4 = v15;
        if (v16) {
          goto LABEL_30;
        }
        uint64_t v4 = v15 + 1;
        OUTLINED_FUNCTION_27_19();
        if (v13 == v14) {
          return;
        }
        OUTLINED_FUNCTION_23_23();
        if (v18) {
          goto LABEL_30;
        }
        uint64_t v4 = v17 + 2;
        OUTLINED_FUNCTION_27_19();
        if (v13 == v14) {
          return;
        }
        OUTLINED_FUNCTION_23_23();
        if (v20) {
          goto LABEL_30;
        }
        uint64_t v4 = v19 + 3;
        OUTLINED_FUNCTION_27_19();
        if (v13 == v14) {
          return;
        }
        OUTLINED_FUNCTION_23_23();
        if (v21) {
          goto LABEL_30;
        }
        OUTLINED_FUNCTION_25_21();
        if (v13 == v14) {
          return;
        }
        OUTLINED_FUNCTION_24_21();
        if (v23)
        {
          uint64_t v4 = v22;
LABEL_30:
          OUTLINED_FUNCTION_19_27();
          uint64_t v41 = v26;
          for (i = v27 + (v4 << 6); ; i = __clz(__rbit64(v10)) | (v4 << 6))
          {
            unint64_t v28 = (unsigned __int8 *)(*(void *)(v3 + 48) + 24 * i);
            uint64_t v29 = *v28;
            NSSet v31 = *((void *)v28 + 1);
            id v30 = *((void *)v28 + 2);
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v29);
            if (v30)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain_n();
              String.hash(into:)();
            }
            else
            {
              Hasher._combine(_:)(0);
            }
            swift_bridgeObjectRelease();
            unsigned int v32 = Hasher._finalize()();
            uint64_t v33 = -1 << *(unsigned char *)(v2 + 32);
            uint64_t v34 = v32 & ~v33;
            if (((*(void *)(v11 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
            {
LABEL_51:
              swift_bridgeObjectRelease();
              return;
            }
            id v40 = v4;
            uint64_t v35 = ~v33;
            uint64_t v36 = *(void *)(v2 + 48);
            while (1)
            {
              os_log_type_t v37 = (unsigned __int8 *)(v36 + 24 * v34);
              if (*v37 != v29) {
                goto LABEL_46;
              }
              uint64_t v38 = *((void *)v37 + 2);
              if (v38) {
                break;
              }
              if (!v30) {
                goto LABEL_48;
              }
LABEL_46:
              uint64_t v34 = (v34 + 1) & v35;
              if (((*(void *)(v11 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
                goto LABEL_51;
              }
            }
            if (!v30) {
              goto LABEL_46;
            }
            uint64_t v39 = *((void *)v37 + 1) == v31 && v38 == v30;
            if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_46;
            }
LABEL_48:
            swift_bridgeObjectRelease();
            uint64_t v4 = v40;
            uint64_t v10 = v41;
            if (!v41) {
              goto LABEL_9;
            }
LABEL_8:
            uint64_t v41 = (v10 - 1) & v10;
          }
        }
        while (1)
        {
          uint64_t v4 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            break;
          }
          OUTLINED_FUNCTION_27_19();
          if (v13 == v14) {
            return;
          }
          OUTLINED_FUNCTION_23_23();
          id v22 = v24 + 1;
          if (v25) {
            goto LABEL_30;
          }
        }
      }
      __break(1u);
    }
  }
}

{
  uint64_t v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (a1 == a2) {
    return;
  }
  OUTLINED_FUNCTION_3_75();
  if (!v8) {
    return;
  }
  OUTLINED_FUNCTION_1_78();
  do
  {
LABEL_5:
    if (v7)
    {
      OUTLINED_FUNCTION_15_34();
      goto LABEL_23;
    }
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return;
    }
    if (v9 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v9);
    ++v6;
    if (v10) {
      goto LABEL_22;
    }
    uint64_t v6 = v9 + 1;
    if (v9 + 1 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6);
    if (v10) {
      goto LABEL_22;
    }
    uint64_t v6 = v9 + 2;
    if (v9 + 2 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6);
    if (v10) {
      goto LABEL_22;
    }
    uint64_t v6 = v9 + 3;
    if (v9 + 3 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6);
    if (v10) {
      goto LABEL_22;
    }
    uint64_t v11 = v9 + 4;
    if (v11 >= v5) {
      return;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v11);
    if (!v10)
    {
      while (1)
      {
        uint64_t v6 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_31;
        }
        if (v6 >= v5) {
          return;
        }
        uint64_t v10 = *(void *)(v4 + 8 * v6);
        ++v11;
        if (v10) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v6 = v11;
LABEL_22:
    uint64_t v7 = (v10 - 1) & v10;
LABEL_23:
    OUTLINED_FUNCTION_28_16();
    Hasher._combine(_:)(v3);
    Hasher._finalize()();
    OUTLINED_FUNCTION_9_43();
    if ((v13 & 1) == 0) {
      return;
    }
  }
  while (*(unsigned __int8 *)(*(void *)(v2 + 48) + v12) == v3);
  while (1)
  {
    OUTLINED_FUNCTION_11_31();
    if ((v16 & 1) == 0) {
      break;
    }
    if (*(unsigned __int8 *)(v14 + v15) == v3) {
      goto LABEL_5;
    }
  }
}

void specialized static Set.== infix(_:_:)()
{
  OUTLINED_FUNCTION_31();
  if (v0 == v1 || (uint64_t v2 = v1, v3 = v0, *(void *)(v0 + 16) != *(void *)(v1 + 16)))
  {
LABEL_34:
    OUTLINED_FUNCTION_28();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v46 = v0 + 56;
    uint64_t v5 = 1 << *(unsigned char *)(v0 + 32);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    uint64_t v8 = type metadata accessor for UUID();
    os_log_t v45 = v41;
    OUTLINED_FUNCTION_4();
    uint64_t v10 = v9;
    MEMORY[0x1F4188790](v11);
    char v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v14 = 0;
    int64_t v47 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v55 = v10 + 16;
    uint64_t v56 = v12;
    uint64_t v54 = v2 + 56;
    uint64_t v57 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v43 = v10;
    uint64_t v44 = v3;
    v41[1] = v10 + 32;
    unint64_t v42 = v13;
    if (!v7) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v49 = (v7 - 1) & v7;
    uint64_t v50 = v14;
    for (unint64_t i = __clz(__rbit64(v7)) | (v14 << 6); ; unint64_t i = v28 + (v27 << 6))
    {
      uint64_t v29 = *(void *)(v10 + 72);
      unint64_t v30 = *(void *)(v3 + 48) + v29 * i;
      uint64_t v52 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16);
      uint64_t v53 = v29;
      uint64_t v31 = v52(v13, v30, v8);
      id v51 = v41;
      MEMORY[0x1F4188790](v31);
      unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v41 - v33, v13, v8);
      _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v35 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v36 = v34 & ~v35;
      if (((*(void *)(v54 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
      {
        (*v57)((char *)v41 - v33, v8);
        goto LABEL_34;
      }
      uint64_t v48 = (unint64_t)v57 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = v2;
      uint64_t v38 = ~v35;
      while (1)
      {
        MEMORY[0x1F4188790](v34);
        v52((char *)v41 - v33, *(void *)(v37 + 48) + v36 * v53, v8);
        _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
        char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v40 = *v57;
        uint64_t v34 = ((uint64_t (*)(char *, uint64_t))*v57)((char *)v41 - v33, v8);
        if (v39) {
          break;
        }
        unint64_t v36 = (v36 + 1) & v38;
        if (((*(void *)(v54 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        {
          v40((char *)v41 - v33, v8);
          goto LABEL_34;
        }
      }
      v40((char *)v41 - v33, v8);
      uint64_t v14 = v50;
      uint64_t v2 = v37;
      uint64_t v10 = v43;
      uint64_t v3 = v44;
      char v13 = v42;
      unint64_t v7 = v49;
      if (v49) {
        goto LABEL_7;
      }
LABEL_8:
      int64_t v16 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_38;
      }
      if (v16 >= v47) {
        goto LABEL_34;
      }
      if (!*(void *)(v46 + 8 * v16))
      {
        OUTLINED_FUNCTION_17_29();
        if (v17 == v18) {
          goto LABEL_34;
        }
        OUTLINED_FUNCTION_30_17();
        if (!v19)
        {
          OUTLINED_FUNCTION_17_29();
          if (v17 == v18) {
            goto LABEL_34;
          }
          OUTLINED_FUNCTION_30_17();
          if (!v20)
          {
            OUTLINED_FUNCTION_17_29();
            if (v17 == v18) {
              goto LABEL_34;
            }
            OUTLINED_FUNCTION_30_17();
            if (!v22)
            {
              int64_t v23 = v21 + 4;
              if (v23 >= v47) {
                goto LABEL_34;
              }
              if (!*(void *)(v46 + 8 * v23)) {
                break;
              }
            }
          }
        }
      }
LABEL_26:
      OUTLINED_FUNCTION_19_27();
      uint64_t v49 = v26;
      uint64_t v50 = v27;
    }
    while (!__OFADD__(v23, 1))
    {
      OUTLINED_FUNCTION_17_29();
      if (v17 == v18) {
        goto LABEL_34;
      }
      OUTLINED_FUNCTION_30_17();
      int64_t v23 = v24 + 1;
      if (v25) {
        goto LABEL_26;
      }
    }
LABEL_38:
    __break(1u);
  }
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v30 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v4;
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 + 56;
  if ((v6 & v4) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v32 = v3;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = result;
    int64_t v16 = (uint64_t *)(*(void *)(result + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v22 = *(void *)(a2 + 48);
    int64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v25 = ~v20;
      for (unint64_t j = v21 + 1; ; unint64_t j = v27 + 1)
      {
        uint64_t v27 = j & v25;
        if (((*(void *)(v8 + (((j & v25) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v25)) & 1) == 0) {
          break;
        }
        uint64_t v28 = (void *)(v22 + 16 * v27);
        BOOL v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_30;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t result = v15;
    int64_t v3 = v32;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v11 >= v31) {
      return 1;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v11);
    int64_t v13 = v3 + 1;
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v31) {
        return 1;
      }
      unint64_t v12 = *(void *)(v30 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v31) {
          return 1;
        }
        unint64_t v12 = *(void *)(v30 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v3 + 4;
          if (v3 + 4 >= v31) {
            return 1;
          }
          unint64_t v12 = *(void *)(v30 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v32 = v13;
  }
  uint64_t v14 = v3 + 5;
  if (v3 + 5 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v3 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v31) {
      return 1;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t RestrictedConversationChecker.conversationManager(_:removedActiveConversation:)(int a1, id a2)
{
  id v2 = objc_msgSend(a2, sel_UUID);
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  RestrictedConversationChecker.removeUnrestrictedAddresses(for:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v3);
}

uint64_t method lookup function for RestrictedConversationChecker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RestrictedConversationChecker);
}

uint64_t dispatch thunk of RestrictedConversationChecker.__allocating_init(callCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of RestrictedConversationChecker.shouldRestrict(conversation:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t key path setter for DelayedAnsweringMachine.taskQueue : <A>DelayedAnsweringMachine<A>(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 136);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t DelayedAnsweringMachine.taskQueue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TaskPriority();
  MEMORY[0x1F4188790](v2 - 8);
  if (*(void *)(v0 + 16))
  {
    uint64_t v3 = *(void *)(v0 + 16);
  }
  else
  {
    type metadata accessor for TaskQueue();
    static TaskPriority.userInitiated.getter();
    uint64_t v3 = TaskQueue.__allocating_init(priority:)();
    *(void *)(v1 + 16) = v3;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v3;
}

uint64_t DelayedAnsweringMachine.taskQueue.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*DelayedAnsweringMachine.taskQueue.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = DelayedAnsweringMachine.taskQueue.getter();
  return DelayedAnsweringMachine.taskQueue.modify;
}

uint64_t DelayedAnsweringMachine.taskQueue.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return DelayedAnsweringMachine.taskQueue.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  DelayedAnsweringMachine.taskQueue.setter(v2);
  return swift_release();
}

uint64_t key path setter for DelayedAnsweringMachine.currentTrackedCallUUID : <A>DelayedAnsweringMachine<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t DelayedAnsweringMachine.currentTrackedCallUUID.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DelayedAnsweringMachine.currentTrackedCallUUID.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DelayedAnsweringMachine.currentTrackedCallUUID.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t DelayedAnsweringMachine.__allocating_init(isAnsweringMachineAvailable:makeAnsweringMachine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(a1, a2, a3, a4);
  return v8;
}

uint64_t *DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v4[6] = a1;
  v4[7] = a2;
  uint64_t v8 = *(void (**)(uint64_t))(v7 + 128);
  uint64_t v9 = v7 + 128;
  uint64_t v10 = swift_retain();
  v8(v10);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  unint64_t v12 = (void *)swift_allocObject();
  v12[2] = *(void *)(v9 - 48);
  v12[3] = *(void *)(v9 - 40);
  v12[4] = v11;
  v12[5] = a3;
  v12[6] = a4;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
  dispatch thunk of TaskQueue.async<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_1C31B366C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static CallScreeningActor.shared;
  v4[9] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:), v5, 0);
}

uint64_t closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_6_59();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 80) = Strong;
  if (Strong)
  {
    uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 56) + **(int **)(v0 + 56));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:);
    return v5();
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    OUTLINED_FUNCTION_6();
    return v4();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  *(void *)(v6 + 96) = v5;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:), v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  *(void *)(*(void *)(v0 + 80) + 24) = *(void *)(v0 + 96);
  swift_release();
  swift_unknownObjectRelease();
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 80) == 0;
  OUTLINED_FUNCTION_6();
  return v1();
}

uint64_t sub_1C31B39C8()
{
  return objectdestroy_2Tm_0(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_98(v2);
  void *v3 = v4;
  v3[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v5 = OUTLINED_FUNCTION_13_36();
  return closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(v5, v6, v7, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DelayedAnsweringMachine.start()()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = v0 + 128;
  (*(void (**)(void))(v0 + 128))();
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = *(void *)(v1 - 48);
  v3[3] = *(void *)(v1 - 40);
  v3[4] = v2;
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t closure #1 in DelayedAnsweringMachine.start()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CallScreeningActor.shared;
  v3[9] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.start(), v4, 0);
}

uint64_t closure #1 in DelayedAnsweringMachine.start()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_6_59();
  uint64_t Strong = swift_weakLoadStrong();
  v0[10] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(Strong + 24);
    v0[11] = v2;
    if (v2)
    {
      uint64_t v3 = v0[8];
      v0[12] = *(void *)(v3 + 8);
      v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0xBD92000000000000;
      uint64_t v4 = one-time initialization token for shared;
      swift_unknownObjectRetain();
      if (v4 != -1) {
        swift_once();
      }
      uint64_t v5 = static CKStateMachineActor.shared;
      return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.start(), v5, 0);
    }
    swift_release();
  }
  OUTLINED_FUNCTION_6();
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_28_0();
  (*(void (**)(void, void))(v0 + 96))(*(void *)(v0 + 56), *(void *)(v0 + 64));
  *(void *)(v0 + 112) = 0;
  uint64_t v1 = *(void *)(v0 + 72);
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.start(), v1, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  if (one-time initialization token for answeringMachine != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.answeringMachine);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 112);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v11 = v8;
    unint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_1C2F90000, v5, v6, "Failed to initialize AnsweringMachine with error: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v10, -1, -1);
    MEMORY[0x1C87760E0](v9, -1, -1);
    swift_unknownObjectRelease();

    swift_release();
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_6();
  return v13();
}

uint64_t sub_1C31B4044()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DelayedAnsweringMachine.start()()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_98(v4);
  *uint64_t v5 = v6;
  v5[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return closure #1 in DelayedAnsweringMachine.start()(v3, v1, v2);
}

uint64_t @objc DelayedAnsweringMachine.enabled.getter()
{
  swift_retain();
  char v0 = DelayedAnsweringMachine.enabled.getter();
  swift_release();
  return v0 & 1;
}

uint64_t DelayedAnsweringMachine.enabled.getter()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 48);
  uint64_t v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

uint64_t DelayedAnsweringMachine.open(_:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[2] = v2;
  v1[3] = v0;
  OUTLINED_FUNCTION_3_2();
  v1[4] = v3;
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v5;
  v1[7] = v4;
  return MEMORY[0x1F4188298](DelayedAnsweringMachine.open(_:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t, void *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0;
  uint64_t v15 = v0 + 88;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  *(void *)(v0 + 64) = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 128))();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  uint64_t v8 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v3, v5);
  uint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (char *)swift_allocObject();
  *(void *)(v1 + 72) = v10;
  *((void *)v10 + 2) = *(void *)(v2 + 80);
  *((void *)v10 + 3) = *(void *)(v2 + 88);
  *((void *)v10 + 4) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(&v10[v9], v8, v5);
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t, void *, char *, uint64_t))((int)*MEMORY[0x1E4FAD9F0] + MEMORY[0x1E4FAD9F0]);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 80) = v11;
  void *v11 = v1;
  v11[1] = DelayedAnsweringMachine.open(_:);
  unint64_t v12 = MEMORY[0x1E4FBB390];
  return v14(v15, &async function pointer to partial apply for closure #1 in DelayedAnsweringMachine.open(_:), v10, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v3 = v2;
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 48);
  return MEMORY[0x1F4188298](DelayedAnsweringMachine.open(_:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t closure #1 in DelayedAnsweringMachine.open(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CallScreeningActor.shared;
  v3[21] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.open(_:), v4, 0);
}

uint64_t closure #1 in DelayedAnsweringMachine.open(_:)()
{
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_6_59();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 176) = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void **)(Strong + 24);
    *(void *)(v0 + 184) = v2;
    if (v2)
    {
      swift_unknownObjectRetain();
      URL._bridgeToObjectiveC()(v3);
      uint64_t v5 = v4;
      *(void *)(v0 + 192) = v4;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 200;
      *(void *)(v0 + 24) = closure #1 in DelayedAnsweringMachine.open(_:);
      uint64_t v6 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
      *(void *)(v0 + 104) = &block_descriptor_39;
      *(void *)(v0 + 112) = v6;
      objc_msgSend(v2, sel_openURL_completion_, v5, v0 + 80);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
    swift_release();
  }
  **(unsigned char **)(v0 + 144) = 0;
  OUTLINED_FUNCTION_6();
  return v7();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  NSURL *v3 = v1;
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.open(_:), v2, 0);
}

{
  uint64_t v0;
  void *v1;
  unsigned char *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(unsigned char **)(v0 + 144);
  swift_release();
  swift_unknownObjectRelease();
  *uint64_t v2 = *(unsigned char *)(v0 + 200);

  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t sub_1C31B491C()
{
  uint64_t v1 = type metadata accessor for URL();
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DelayedAnsweringMachine.open(_:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_98(v6);
  *uint64_t v7 = v8;
  v7[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return closure #1 in DelayedAnsweringMachine.open(_:)(v2, v4, v5);
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool(uint64_t a1, char a2)
{
  return specialized _resumeUnsafeContinuation<A>(_:_:)(*(void *)(a1 + 32), a2);
}

uint64_t @objc DelayedAnsweringMachine.open(_:)(uint64_t a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = v6;
  v7[4] = a1;
  id v8 = a3;
  swift_retain();
  return _runTaskForBridgedAsyncMethod(_:)((uint64_t)&async function pointer to partial apply for @objc closure #1 in DelayedAnsweringMachine.open(_:), (uint64_t)v7);
}

uint64_t @objc closure #1 in DelayedAnsweringMachine.open(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](@objc closure #1 in DelayedAnsweringMachine.open(_:), v5, v4);
}

uint64_t @objc closure #1 in DelayedAnsweringMachine.open(_:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = (const void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v1);
  uint64_t v2 = type metadata accessor for URL();
  v0[7] = v2;
  v0[8] = *(void *)(v2 - 8);
  v0[9] = swift_task_alloc();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  void *v3 = v0;
  v3[1] = @objc closure #1 in DelayedAnsweringMachine.open(_:);
  return DelayedAnsweringMachine.open(_:)();
}

{
  uint64_t *v0;
  char v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(void, void);
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_49_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_5();
  uint64_t v4 = v3[9];
  uint64_t v5 = v3[8];
  uint64_t v6 = v3[7];
  uint64_t v7 = (void (**)(void, void))v3[6];
  id v8 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  v7[2](v7, v2 & 1);
  _Block_release(v7);
  OUTLINED_FUNCTION_6();
  return v10();
}

uint64_t DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)()
{
  OUTLINED_FUNCTION_17_2();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 97) = v3;
  *(void *)(v1 + 16) = v4;
  OUTLINED_FUNCTION_3_2();
  *(void *)(v1 + 40) = v5;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v1 + 56) = v7;
  *(void *)(v1 + 64) = v6;
  return MEMORY[0x1F4188298](DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, void *, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(unsigned char *)(v0 + 97);
  uint64_t v4 = *(void *)(v0 + 16);
  char v3 = *(void *)(v0 + 24);
  *(void *)(v0 + 72) = (*(uint64_t (**)(void))(**(void **)(v0 + 32) + 128))();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 80) = v6;
  *(void *)(v6 + 16) = *(void *)(v1 + 80);
  *(void *)(v6 + 24) = *(void *)(v1 + 88);
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v3;
  *(unsigned char *)(v6 + 56) = v2;
  uint64_t v10 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAD9F0] + MEMORY[0x1E4FAD9F0]);
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = DelayedAnsweringMachine.screenCall(withUUID:manualScreening:);
  id v8 = MEMORY[0x1E4FBB390];
  return v10(v0 + 96, &async function pointer to partial apply for closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v6, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v3 = v2;
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 56);
  return MEMORY[0x1F4188298](DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 209) = a5;
  *(void *)(v5 + 160) = a3;
  *(void *)(v5 + 168) = a4;
  *(void *)(v5 + 144) = a1;
  *(void *)(v5 + 152) = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static CallScreeningActor.shared;
  *(void *)(v5 + 176) = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v6, 0);
}

uint64_t closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)()
{
  OUTLINED_FUNCTION_6_59();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 184) = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void **)(Strong + 24);
    *(void *)(v0 + 192) = v2;
    if (v2)
    {
      uint64_t v3 = *(unsigned __int8 *)(v0 + 209);
      uint64_t v5 = *(void *)(v0 + 160);
      uint64_t v4 = *(void *)(v0 + 168);
      swift_unknownObjectRetain();
      uint64_t v6 = MEMORY[0x1C87730B0](v5, v4);
      *(void *)(v0 + 200) = v6;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 208;
      *(void *)(v0 + 24) = closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:);
      uint64_t v7 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
      *(void *)(v0 + 104) = &block_descriptor_0;
      *(void *)(v0 + 112) = v7;
      objc_msgSend(v2, sel_screenCallWithUUID_manualScreening_completion_, v6, v3, v0 + 80);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
    swift_release();
  }
  **(unsigned char **)(v0 + 144) = 0;
  OUTLINED_FUNCTION_6();
  return v8();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v3 = v1;
  return MEMORY[0x1F4188298](closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v2, 0);
}

{
  uint64_t v0;
  void *v1;
  unsigned char *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = *(unsigned char **)(v0 + 144);
  swift_release();
  swift_unknownObjectRelease();
  *uint64_t v2 = *(unsigned char *)(v0 + 208);

  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t sub_1C31B55CC()
{
  return objectdestroy_2Tm_0(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_2Tm_0(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_98(v3);
  *uint64_t v4 = v5;
  v4[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v6 = OUTLINED_FUNCTION_13_36();
  return closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)(v6, v7, v8, v1, v2);
}

uint64_t @objc DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)(uint64_t a1, int a2, void *a3, char a4, void *aBlock)
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(unsigned char *)(v9 + 24) = a4;
  *(void *)(v9 + 32) = v8;
  *(void *)(v9 + 40) = a1;
  id v10 = a3;
  swift_retain();
  return _runTaskForBridgedAsyncMethod(_:)((uint64_t)&async function pointer to partial apply for @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v9);
}

uint64_t @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(unsigned char *)(v4 + 72) = a2;
  *(void *)(v4 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v4 + 40) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](@objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:), v6, v5);
}

uint64_t @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = (const void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v1);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0[7] = v2;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  void *v3 = v0;
  v3[1] = @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:);
  return DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)();
}

{
  uint64_t *v0;
  char v1;
  char v2;
  uint64_t v3;
  void (**v4)(void, void);
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_5();
  uint64_t v4 = *(void (***)(void, void))(v3 + 48);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  v4[2](v4, v2 & 1);
  _Block_release(v4);
  OUTLINED_FUNCTION_6();
  return v7();
}

uint64_t DelayedAnsweringMachine.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DelayedAnsweringMachine.__deallocating_deinit()
{
  DelayedAnsweringMachine.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnsweringMachine.start() in conformance DelayedAnsweringMachine<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_1C31B5AF8@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 128))();
  *a1 = result;
  return result;
}

uint64_t sub_1C31B5B4C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 176))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t type metadata completion function for DelayedAnsweringMachine()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DelayedAnsweringMachine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for DelayedAnsweringMachine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DelayedAnsweringMachine);
}

uint64_t dispatch thunk of DelayedAnsweringMachine.taskQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.taskQueue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.taskQueue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.currentTrackedCallUUID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.currentTrackedCallUUID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.currentTrackedCallUUID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.__allocating_init(isAnsweringMachineAvailable:makeAnsweringMachine:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.start()()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.enabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of DelayedAnsweringMachine.open(_:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_50();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 248) + **(int **)(v2 + 248));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_98(v3);
  *uint64_t v4 = v5;
  v4[1] = dispatch thunk of DelayedAnsweringMachine.open(_:);
  return v7(v1);
}

uint64_t dispatch thunk of DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_50();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 256) + **(int **)(v6 + 256));
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_98(v7);
  *uint64_t v8 = v9;
  v8[1] = dispatch thunk of DelayedAnsweringMachine.screenCall(withUUID:manualScreening:);
  return v11(v5, v3, v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_1C31B604C()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_98(v5);
  *uint64_t v6 = v7;
  v6[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v8 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:)
                                                               + async function pointer to @objc closure #1 in DelayedAnsweringMachine.screenCall(withUUID:manualScreening:));
  return v8(v1, v2, v4, v3);
}

uint64_t sub_1C31B6150()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in DelayedAnsweringMachine.open(_:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_98(v4);
  *uint64_t v5 = v6;
  v5[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in DelayedAnsweringMachine.open(_:)
                                                         + async function pointer to @objc closure #1 in DelayedAnsweringMachine.open(_:));
  return v7(v1, v2, v3);
}

ConversationKit::InCallControlsBlockCell::BlockFlow_optional __swiftcall InCallControlsBlockCell.BlockFlow.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (ConversationKit::InCallControlsBlockCell::BlockFlow_optional)rawValue;
}

uint64_t InCallControlsBlockCell.BlockFlow.rawValue.getter(uint64_t result)
{
  return result;
}

ConversationKit::InCallControlsBlockCell::BlockFlow_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InCallControlsBlockCell.BlockFlow@<W0>(Swift::Int *a1@<X0>, ConversationKit::InCallControlsBlockCell::BlockFlow_optional *a2@<X8>)
{
  result.value = InCallControlsBlockCell.BlockFlow.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InCallControlsBlockCell.BlockFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = InCallControlsBlockCell.BlockFlow.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t InCallControlsBlockCell.ViewModel.flow.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (v2)
  {
    while (1)
    {
      id v3 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](0, a1) : *(id *)(a1 + 32);
      uint64_t v4 = v3;
      Swift::Bool v5 = TUHandle.isBlocked()();

      if (!v5) {
        break;
      }
      if (v2 != 1)
      {
        uint64_t v8 = 5;
        while (1)
        {
          id v9 = (a1 & 0xC000000000000001) != 0
             ? (id)MEMORY[0x1C87744F0](v8 - 4, a1)
             : *(id *)(a1 + 8 * v8);
          uint64_t v10 = v9;
          uint64_t v11 = v8 - 3;
          if (__OFADD__(v8 - 4, 1)) {
            break;
          }
          Swift::Bool v6 = TUHandle.isBlocked()();

          if (v6)
          {
            ++v8;
            if (v11 != v2) {
              continue;
            }
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain_n();
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        if (v2) {
          continue;
        }
      }
      goto LABEL_7;
    }
    Swift::Bool v6 = 0;
  }
  else
  {
LABEL_7:
    Swift::Bool v6 = 1;
  }
LABEL_9:
  swift_bridgeObjectRelease_n();
  return v6;
}

uint64_t InCallControlsBlockCell.ViewModel.cellTitle.getter(unint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1)
    {
      BOOL v2 = InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter(a1);
      id v3 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_11();
      if (v2) {
        Swift::Bool v5 = "ACTION_TITLE_UNBLOCK_ALL_PARTICIPANTS";
      }
      else {
        Swift::Bool v5 = "ACTION_TITLE_BLOCK_ALL_PARTICIPANTS";
      }
    }
    else
    {
      BOOL v7 = InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter(a1);
      id v3 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_11();
      if (v7) {
        Swift::Bool v5 = "ACTION_TITLE_UNBLOCK_UNKNOWN_PARTICIPANTS";
      }
      else {
        Swift::Bool v5 = "ACTION_TITLE_BLOCK_UNKNOWN_PARTICIPANTS";
      }
    }
    goto LABEL_12;
  }
  BOOL v6 = InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter(a1);
  id v3 = objc_msgSend(self, sel_conversationKit);
  if (v6)
  {
    OUTLINED_FUNCTION_13_11();
    Swift::Bool v5 = "ACTION_TITLE_UNBLOCK_CALLER";
LABEL_12:
    unint64_t v8 = (unint64_t)(v5 - 32) | 0x8000000000000000;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_13_11();
  unint64_t v8 = 0x80000001C379F3E0;
  unint64_t v4 = 0xD000000000000019;
LABEL_13:
  v9.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v9.value._object = (void *)0xEF74694B6E6F6974;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  uint64_t v11 = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, v9, (NSBundle)v3, v10, *(Swift::String *)(&v14 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

id InCallControlsBlockCell.ViewModel.cellTitleColor.getter(unint64_t a1)
{
  BOOL v1 = InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter(a1);
  BOOL v2 = self;
  id v3 = &selRef_systemWhiteColor;
  if (!v1) {
    id v3 = &selRef_systemRedColor;
  }
  id v4 = [v2 *v3];
  return v4;
}

uint64_t static InCallControlsBlockCell.ViewModel.== infix(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8 = a4;
  int v9 = a2;
  specialized static Array<A>.== infix(_:_:)(a1, a3, a3, a4, a5, a6, a7, a8, v12, v13, vars0, vars8);
  return v10 & (v9 == v8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InCallControlsBlockCell.ViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static InCallControlsBlockCell.ViewModel.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8), a5, a6, a7, a8);
}

uint64_t InCallControlsBlockCell.viewModel.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for InCallControlsBlockCell.viewModel : InCallControlsBlockCell@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell_viewModel;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 8);
  *(void *)a2 = *(void *)v3;
  *(unsigned char *)(a2 + 8) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for InCallControlsBlockCell.viewModel : InCallControlsBlockCell(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v2 = swift_bridgeObjectRetain();
  return InCallControlsBlockCell.viewModel.setter(v2, v1);
}

uint64_t InCallControlsBlockCell.viewModel.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell_viewModel;
  swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2;
  swift_bridgeObjectRelease();
  return InCallControlsBlockCell.viewModel.didset();
}

uint64_t InCallControlsBlockCell.viewModel.didset()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell_viewModel;
  uint64_t result = swift_beginAccess();
  if (*(void *)v1)
  {
    ConversationKit::InCallControlsBlockCell::BlockFlow v3 = *(unsigned char *)(v1 + 8);
    v4.unknownHandles._rawValue = (void *)swift_bridgeObjectRetain();
    v4.flow = v3;
    InCallControlsBlockCell.updateCell(viewModel:)(v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall InCallControlsBlockCell.updateCell(viewModel:)(ConversationKit::InCallControlsBlockCell::ViewModel viewModel)
{
  ConversationKit::InCallControlsBlockCell::BlockFlow flow = viewModel.flow;
  rawValue = viewModel.unknownHandles._rawValue;
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v4 - 8);
  OUTLINED_FUNCTION_16_0();
  InCallControlsBlockCell.ViewModel.cellTitle.getter((unint64_t)rawValue, flow);
  InCallControlsBlockCell.cellContentConfiguration.getter(v1);
  UIListContentConfiguration.text.setter();
  InCallControlsBlockCell.cellContentConfiguration.setter(v1);
  BOOL v5 = InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter((unint64_t)rawValue);
  BOOL v6 = self;
  BOOL v7 = &selRef_systemWhiteColor;
  if (!v5) {
    BOOL v7 = &selRef_systemRedColor;
  }
  id v8 = [v6 *v7];
  InCallControlsBlockCell.cellContentConfiguration.getter(v1);
  int v9 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v9(v10, 0);
  InCallControlsBlockCell.cellContentConfiguration.setter(v1);
  InCallControlsBlockCell.configureContent()();
}

uint64_t (*InCallControlsBlockCell.viewModel.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return InCallControlsBlockCell.viewModel.modify;
}

uint64_t InCallControlsBlockCell.viewModel.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return InCallControlsBlockCell.viewModel.didset();
  }
  return result;
}

uint64_t InCallControlsBlockCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  BOOL v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  id v8 = &v12[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___cellContentConfiguration;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v9, (uint64_t)v8, &demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v10 = type metadata accessor for UIListContentConfiguration();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v8, v10);
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for UIListContentConfiguration?);
  closure #1 in InCallControlsBlockCell.cellContentConfiguration.getter();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v6, a1, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v6, v9, &demangling cache variable for type metadata for UIListContentConfiguration?);
  return swift_endAccess();
}

uint64_t closure #1 in InCallControlsBlockCell.cellContentConfiguration.getter()
{
  MEMORY[0x1C8773D30]();
  id v0 = objc_msgSend(self, sel_conversationKit);
  v15._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001C379F3E0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v15);

  UIListContentConfiguration.text.setter();
  uint64_t v4 = self;
  uint64_t v5 = *MEMORY[0x1E4FB28C8];
  id v6 = objc_msgSend(v4, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  UIFont.caseSensitive()();

  uint64_t v7 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v7(v14, 0);
  id v8 = objc_msgSend(self, sel_systemRedColor);
  uint64_t v9 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v9(v14, 0);
  uint64_t v10 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  v10(v14, 0);
  id v11 = objc_msgSend(v4, sel_preferredFontForTextStyle_, v5);
  Class isa = UIFont.caseSensitive()().super.isa;

  InCallControlsBlockCell.verticalInset(_:scaledToFont:)(isa, 18.5);
  return UIListContentConfiguration.directionalLayoutMargins.setter();
}

double InCallControlsBlockCell.verticalInset(_:scaledToFont:)(void *a1, double a2)
{
  id v3 = objc_msgSend(a1, sel_fontDescriptor);
  id v4 = objc_msgSend(v3, sel_objectForKey_, *MEMORY[0x1E4FB0948]);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for UIFontTextStyle(0);
    if (swift_dynamicCast())
    {
      id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17A8]), sel_initForTextStyle_, v8);
      objc_msgSend(v5, sel_scaledValueForValue_, a2);
      a2 = v6;
    }
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  }
  return a2;
}

uint64_t InCallControlsBlockCell.cellContentConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x1F4188790](v3 - 8);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  uint64_t v7 = v1 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___cellContentConfiguration;
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v5, v7, &demangling cache variable for type metadata for UIListContentConfiguration?);
  return swift_endAccess();
}

id InCallControlsBlockCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsBlockCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = v0 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell_viewModel;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_30_12(v3);
  uint64_t v4 = v0 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___blockImageAccessory;
  uint64_t v5 = type metadata accessor for UICellAccessory();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  __swift_storeEnumTagSinglePayload(v0 + OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___unblockImageAccessory, 1, 1, v5);
  double v6 = OUTLINED_FUNCTION_6_2();
  id v9 = objc_msgSendSuper2(v7, v8, v6, v0, ObjectType);
  InCallControlsBlockCell.configureContent()();

  return v9;
}

uint64_t InCallControlsBlockCell.configureContent()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v21[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIBackgroundConfiguration.listGroupedCell()();
  id v4 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v5);
  MEMORY[0x1C8773CE0](v3);
  objc_msgSend(v0, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  v21[3] = type metadata accessor for UIListContentConfiguration();
  v21[4] = MEMORY[0x1E4FB0F88];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  InCallControlsBlockCell.cellContentConfiguration.getter((uint64_t)boxed_opaque_existential_1);
  MEMORY[0x1C8773CD0](v21);
  uint64_t v7 = &v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell_viewModel];
  swift_beginAccess();
  if (*(void *)v7
    && (unint64_t v8 = swift_bridgeObjectRetain(),
        BOOL v9 = InCallControlsBlockCell.ViewModel.allHandlesBlocked.getter(v8),
        swift_bridgeObjectRelease(),
        v9))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
    uint64_t v10 = *(void *)(type metadata accessor for UICellAccessory() - 8);
    unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1C3769620;
    uint64_t v13 = v12 + v11;
    uint64_t v14 = &OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___unblockImageAccessory;
    Swift::String v15 = &selRef_systemWhiteColor;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
    uint64_t v16 = *(void *)(type metadata accessor for UICellAccessory() - 8);
    unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1C3769620;
    uint64_t v13 = v18 + v17;
    uint64_t v14 = &OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___blockImageAccessory;
    Swift::String v15 = &selRef_systemRedColor;
  }
  InCallControlsBlockCell.unblockImageAccessory.getter(v14, (SEL *)v15, v13);
  return UICollectionViewListCell.accessories.setter();
}

id InCallControlsBlockCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsBlockCell.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell_viewModel];
  *(void *)uint64_t v1 = 0;
  v1[8] = 0;
  uint64_t v2 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___cellContentConfiguration];
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  uint64_t v4 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___blockImageAccessory];
  uint64_t v5 = type metadata accessor for UICellAccessory();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  __swift_storeEnumTagSinglePayload((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsBlockCell____lazy_storage___unblockImageAccessory], 1, 1, v5);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t InCallControlsBlockCell.unblockImageAccessory.getter@<X0>(void *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v16[-v11];
  uint64_t v13 = v3 + *a1;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v13, (uint64_t)v12, &demangling cache variable for type metadata for UICellAccessory?);
  uint64_t v14 = type metadata accessor for UICellAccessory();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(a3, v12, v14);
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, &demangling cache variable for type metadata for UICellAccessory?);
  closure #1 in InCallControlsBlockCell.blockImageAccessory.getter(a2, a3);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v10, a3, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v14);
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v10, v13, &demangling cache variable for type metadata for UICellAccessory?);
  return swift_endAccess();
}

uint64_t closure #1 in InCallControlsBlockCell.blockImageAccessory.getter@<X0>(SEL *a1@<X2>, uint64_t a2@<X8>)
{
  v25[1] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x1F4188790](v3 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v4 = type metadata accessor for UICellAccessory.Placement();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UICellAccessory.CustomViewConfiguration();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  Swift::String v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v16 = @nonobjc UIImage.__allocating_init(systemName:)();
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v16);

  id v18 = [self *a1];
  objc_msgSend(v17, sel_setTintColor_, v18);

  Swift::Int v19 = (uint64_t (**)())&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                   + 48)];
  uint64_t v20 = *MEMORY[0x1E4FB0E18];
  type metadata accessor for UICellAccessory.DisplayedState();
  OUTLINED_FUNCTION_0();
  (*(void (**)(char *, uint64_t))(v21 + 104))(v9, v20);
  *Swift::Int v19 = OUTLINED_FUNCTION_17_1;
  v19[1] = 0;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FB0E60], v4);
  uint64_t v22 = type metadata accessor for UICellAccessory.LayoutDimension();
  OUTLINED_FUNCTION_30_12(v22);
  id v23 = v17;
  UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
  static UICellAccessory.customView(configuration:)();

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v10);
}

id InCallControlsBlockCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type InCallControlsBlockCell.BlockFlow and conformance InCallControlsBlockCell.BlockFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsBlockCell.BlockFlow and conformance InCallControlsBlockCell.BlockFlow;
  if (!lazy protocol witness table cache variable for type InCallControlsBlockCell.BlockFlow and conformance InCallControlsBlockCell.BlockFlow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsBlockCell.BlockFlow and conformance InCallControlsBlockCell.BlockFlow);
  }
  return result;
}

uint64_t ObjC metadata update function for InCallControlsBlockCell()
{
  return type metadata accessor for InCallControlsBlockCell();
}

uint64_t type metadata accessor for InCallControlsBlockCell()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsBlockCell;
  if (!type metadata singleton initialization cache for InCallControlsBlockCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for InCallControlsBlockCell()
{
  type metadata accessor for UIListContentConfiguration?(319, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?, MEMORY[0x1E4FB0F90]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UIListContentConfiguration?(319, &lazy cache variable for type metadata for UICellAccessory?, MEMORY[0x1E4FB0E68]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for UIListContentConfiguration?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for InCallControlsBlockCell.BlockFlow(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31B7DFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsBlockCell.BlockFlow()
{
  return &type metadata for InCallControlsBlockCell.BlockFlow;
}

uint64_t initializeBufferWithCopyOfBuffer for InCallControlsBlockCell.ViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InCallControlsBlockCell.ViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for InCallControlsBlockCell.ViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InCallControlsBlockCell.ViewModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallControlsBlockCell.ViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsBlockCell.ViewModel()
{
  return &type metadata for InCallControlsBlockCell.ViewModel;
}

id ConversationControlsTrailingActionButtonProvider.__allocating_init(controlsManager:context:)(void *a1, char a2)
{
  return ConversationControlsTrailingActionButtonProvider.init(controlsManager:context:)(a1, a2);
}

id ConversationControlsTrailingActionButtonProvider.init(controlsManager:context:)(void *a1, char a2)
{
  *(void *)(v2 + 136) = a1;
  uint64_t v4 = ControlsButtonProvider.init(context:shape:)(a2, 2);
  uint64_t v5 = self;
  uint64_t v6 = *MEMORY[0x1E4FB28D0];
  id v7 = a1;
  swift_retain();
  id result = objc_msgSend(v5, sel__preferredFontForTextStyle_variant_, v6, 264);
  if (result)
  {
    ControlsButtonProvider.titleFont.setter(result);
    swift_release();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConversationControlsTrailingActionButtonProvider.buttonConfiguration.getter()
{
  uint64_t v1 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ControlsButtonProvider.defaultButtonConfiguration.getter();
  if (one-time initialization token for buttonContentInsets != -1) {
    swift_once();
  }
  UIButton.Configuration.contentInsets.setter();
  UIButton.Configuration.titleLineBreakMode.setter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FB1270], v1);
  UIButton.Configuration.buttonSize.setter();
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 104))
  {
    id v6 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2998]);
    id v7 = objc_msgSend(self, sel_configurationWithFont_scale_, v6, 2);

    return UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  }
  return result;
}

void ConversationControlsTrailingActionButtonProvider.__allocating_init(controlsManager:context:shape:)()
{
}

void ConversationControlsTrailingActionButtonProvider.init(controlsManager:context:shape:)()
{
}

uint64_t ConversationControlsTrailingActionButtonProvider.deinit()
{
  uint64_t v0 = ControlsButtonProvider.deinit();

  return v0;
}

uint64_t ConversationControlsTrailingActionButtonProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationControlsTrailingActionButtonProvider()
{
  return self;
}

uint64_t method lookup function for ConversationControlsTrailingActionButtonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsTrailingActionButtonProvider);
}

uint64_t dispatch thunk of ConversationControlsTrailingActionButtonProvider.__allocating_init(controlsManager:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 480))();
}

id SystemApertureAlertingManager.systemApertureElementContext.getter()
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v1 = objc_msgSend(Strong, sel_systemApertureElementContext);

  return v1;
}

uint64_t SystemApertureAlertingManager.invalidationInProgressSubject.getter()
{
  return swift_retain();
}

uint64_t SystemApertureAlertingManager.__allocating_init(systemApertureElement:sceneStateDescriber:)()
{
  OUTLINED_FUNCTION_6_11();
  swift_allocObject();
  swift_getObjectType();
  swift_getObjectType();
  uint64_t v0 = (void *)OUTLINED_FUNCTION_10_43();
  return specialized SystemApertureAlertingManager.init(systemApertureElement:sceneStateDescriber:)(v0, v1, v2, v3, v4, v5);
}

uint64_t SystemApertureAlertingManager.init(systemApertureElement:sceneStateDescriber:)()
{
  OUTLINED_FUNCTION_6_11();
  swift_getObjectType();
  swift_getObjectType();
  uint64_t v0 = (void *)OUTLINED_FUNCTION_10_43();
  return specialized SystemApertureAlertingManager.init(systemApertureElement:sceneStateDescriber:)(v0, v1, v2, v3, v4, v5);
}

Swift::Bool __swiftcall SystemApertureAlertingManager.requestEphemeralAlertingAssertion(reason:shouldOverridePersistentAssertion:includingWhileFullscreen:)(Swift::String reason, Swift::Bool shouldOverridePersistentAssertion, Swift::Bool includingWhileFullscreen)
{
  uint64_t v4 = v3;
  object = reason._object;
  uint64_t countAndFlagsBits = reason._countAndFlagsBits;
  uint64_t v8 = *(void **)(v4 + 40);
  if (!v8
    || (unsigned int v10 = objc_msgSend(v8, sel_isAutomaticallyInvalidatable), shouldOverridePersistentAssertion)
    || v10)
  {
    char v11 = SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)(countAndFlagsBits, (unint64_t)object, includingWhileFullscreen);
    uint64_t v12 = *(void **)(v4 + 40);
    if (v12)
    {
      if ((objc_msgSend((id)swift_unknownObjectRetain(), sel_isAutomaticallyInvalidatable) & 1) == 0) {
        objc_msgSend(v12, sel_setAutomaticallyInvalidatable_, 1);
      }
      swift_unknownObjectRelease();
    }
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      OUTLINED_FUNCTION_15_1();
      uint64_t v22 = OUTLINED_FUNCTION_7_56();
      *(_DWORD *)uint64_t countAndFlagsBits = 136315394;
      if (*(void *)(v4 + 40))
      {
        uint64_t v21 = *(void *)(v4 + 40);
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SBUISystemApertureAutomaticallyInvalidatable);
        uint64_t v15 = String.init<A>(reflecting:)();
        unint64_t v17 = v16;
      }
      else
      {
        unint64_t v17 = 0xE300000000000000;
        uint64_t v15 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v22);
      OUTLINED_FUNCTION_5_66();
      OUTLINED_FUNCTION_39_2();
      swift_bridgeObjectRelease();
      *(_WORD *)(countAndFlagsBits + 12) = 2080;
      id v18 = *(void **)(v4 + 40);
      if (v18)
      {
        LOBYTE(v21) = objc_msgSend(v18, sel_isAutomaticallyInvalidatable);
        id v18 = (void *)String.init<A>(reflecting:)();
      }
      OUTLINED_FUNCTION_24_22((uint64_t)v18, v21, v22);
      OUTLINED_FUNCTION_19_28();
      OUTLINED_FUNCTION_39_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_18_33(&dword_1C2F90000, v19, v14, "Successfully requested an ephemeral alerting assertion %s isAutomaticallyInvalidatable %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

Swift::Bool __swiftcall SystemApertureAlertingManager.requestPersistentAlertingAssertion(reason:includingWhileFullscreen:)(Swift::String reason, Swift::Bool includingWhileFullscreen)
{
  uint64_t v3 = v2;
  char v4 = SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)(reason._countAndFlagsBits, (unint64_t)reason._object, includingWhileFullscreen);
  uint64_t v5 = *(void **)(v2 + 40);
  if (v5)
  {
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_isAutomaticallyInvalidatable)) {
      objc_msgSend(v5, sel_setAutomaticallyInvalidatable_, 0);
    }
    swift_unknownObjectRelease();
  }
  swift_retain_n();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    OUTLINED_FUNCTION_15_1();
    uint64_t v15 = OUTLINED_FUNCTION_7_56();
    LODWORD(selRef_contactStoreDidChange_) = 136315394;
    if (*(void *)(v3 + 40))
    {
      uint64_t v14 = *(void *)(v3 + 40);
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SBUISystemApertureAutomaticallyInvalidatable);
      uint64_t v8 = String.init<A>(reflecting:)();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v8 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v15);
    OUTLINED_FUNCTION_5_66();
    OUTLINED_FUNCTION_39_2();
    swift_bridgeObjectRelease();
    WORD2(selRef_setLargeTitleDisplayMode_) = 2080;
    char v11 = *(void **)(v3 + 40);
    if (v11)
    {
      LOBYTE(v14) = objc_msgSend(v11, sel_isAutomaticallyInvalidatable);
      char v11 = (void *)String.init<A>(reflecting:)();
    }
    OUTLINED_FUNCTION_24_22((uint64_t)v11, v14, v15);
    OUTLINED_FUNCTION_19_28();
    OUTLINED_FUNCTION_39_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_33(&dword_1C2F90000, v12, v7, "Successfully requested a persistent alerting assertion %s isAutomaticallyInvalidatable %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_release_n();
  }

  return v4 & 1;
}

Swift::Void __swiftcall SystemApertureAlertingManager.updatePersistentToEphemeralAlertIfNeeded(reason:)(Swift::String reason)
{
  if (!*(void *)(v1 + 40))
  {
LABEL_4:
    oslogb = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_4_14(v2, v3, v4, v5, v6, v7, v8, v9, v22, oslogb))
    {
      unint64_t v10 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v10);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, oslog, v11, "Ignoring request to update persistent alert because none exist");
      OUTLINED_FUNCTION_3();
    }
LABEL_13:
    OUTLINED_FUNCTION_12_2();

    return;
  }
  if (objc_msgSend((id)OUTLINED_FUNCTION_16_26(), sel_isAutomaticallyInvalidatable))
  {
    swift_unknownObjectRelease();
    goto LABEL_4;
  }
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v13 = objc_msgSend(Strong, sel_activeLayoutMode);

  if (v13 != (id)4)
  {
    osloga = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(osloga, v17))
    {
      id v18 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v18);
      OUTLINED_FUNCTION_8_39(&dword_1C2F90000, osloga, v19, "Ignoring request to update persistent alert while not in custom layout");
      OUTLINED_FUNCTION_3();
    }
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  uint64_t v14 = OUTLINED_FUNCTION_39();
  v15(v14);
  OUTLINED_FUNCTION_12_2();
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall SystemApertureAlertingManager.invalidatePersistentAlertingAssertion(reason:)(Swift::String reason)
{
  if (!*(void *)(v1 + 40))
  {
LABEL_4:
    oslogb = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_4_14(v2, v3, v4, v5, v6, v7, v8, v9, v22, oslogb))
    {
      unint64_t v10 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v10);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, oslog, v11, "Ignoring request to invalidate persistent alert because none exist");
      OUTLINED_FUNCTION_3();
    }
LABEL_13:
    OUTLINED_FUNCTION_12_2();

    return;
  }
  if (objc_msgSend((id)OUTLINED_FUNCTION_16_26(), sel_isAutomaticallyInvalidatable))
  {
    swift_unknownObjectRelease();
    goto LABEL_4;
  }
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v13 = objc_msgSend(Strong, sel_activeLayoutMode);

  if (v13 != (id)4)
  {
    osloga = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(osloga, v17))
    {
      id v18 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v18);
      OUTLINED_FUNCTION_8_39(&dword_1C2F90000, osloga, v19, "Ignoring request to invalidate persistent alert while not in custom layout");
      OUTLINED_FUNCTION_3();
    }
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  uint64_t v14 = OUTLINED_FUNCTION_39();
  v15(v14);
  OUTLINED_FUNCTION_12_2();
  swift_unknownObjectRelease();
}

uint64_t SystemApertureAlertingManager.handleRecipeTransition(from:to:)(uint64_t a1, uint64_t a2)
{
  v112 = (uint64_t *)a2;
  uint64_t v110 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v108 = (uint64_t)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_8_4();
  uint64_t v109 = v5;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_8_4();
  uint64_t v106 = v7;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_8_4();
  uint64_t v107 = v9;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_8_4();
  v111 = v11;
  OUTLINED_FUNCTION_8_1();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v102 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  id v18 = (char *)&v102 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v102 - v20;
  MEMORY[0x1F4188790](v19);
  id v23 = (char *)&v102 - v22;
  uint64_t v24 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  int64_t v31 = (char *)&v102 - v30;
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v34 = (uint64_t *)((char *)&v102 - v33);
  MEMORY[0x1F4188790](v32);
  unint64_t v36 = (char *)&v102 - v35;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v112, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  OUTLINED_FUNCTION_2_9((uint64_t)v23);
  if (v41)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
LABEL_4:
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      char v39 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)char v39 = 0;
      _os_log_impl(&dword_1C2F90000, v37, v38, "No alerting required because controls did not change", v39, 2u);
      OUTLINED_FUNCTION_3();
    }

    goto LABEL_45;
  }
  v104 = v15;
  v105 = v28;
  v112 = v34;
  v103 = v31;
  outlined init with take of ConversationControlsRecipe((uint64_t)v23, (uint64_t)v36);
  uint64_t v40 = v110;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v110, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  OUTLINED_FUNCTION_2_9((uint64_t)v21);
  if (v41)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    memset(v121, 0, sizeof(v121));
    uint64_t v122 = 0;
    char v123 = -1;
  }
  else
  {
    outlined init with copy of ConversationControlsType((uint64_t)v21, (uint64_t)v121);
    outlined destroy of ConversationControlsRecipe((uint64_t)v21);
  }
  uint64_t v42 = (uint64_t)v18;
  outlined init with copy of ConversationControlsType((uint64_t)v36, (uint64_t)v120);
  uint64_t v43 = &demangling cache variable for type metadata for ConversationControlsType?;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v121, (uint64_t)v116, &demangling cache variable for type metadata for ConversationControlsType?);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v120, (uint64_t)v118, &demangling cache variable for type metadata for ConversationControlsType?);
  if (v117 == 255)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v120, &demangling cache variable for type metadata for ConversationControlsType?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v121, &demangling cache variable for type metadata for ConversationControlsType?);
    if (v119 == 255)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v116, &demangling cache variable for type metadata for ConversationControlsType?);
      outlined init with copy of Environment<DynamicTypeSize>.Content(v40, v42, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      OUTLINED_FUNCTION_12_34();
      uint64_t v45 = (uint64_t)v111;
      goto LABEL_16;
    }
LABEL_20:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for (ConversationControlsType?, ConversationControlsType?));
    outlined init with copy of Environment<DynamicTypeSize>.Content(v40, v42, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    OUTLINED_FUNCTION_12_34();
    uint64_t v45 = (uint64_t)v111;
LABEL_21:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v42, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v48 = v113;
LABEL_22:
    outlined destroy of ConversationControlsRecipe((uint64_t)v43);
    goto LABEL_23;
  }
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v116, (uint64_t)v115, &demangling cache variable for type metadata for ConversationControlsType?);
  if (v119 == 255)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v120, &demangling cache variable for type metadata for ConversationControlsType?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v121, &demangling cache variable for type metadata for ConversationControlsType?);
    outlined destroy of ConversationControlsType((uint64_t)v115);
    goto LABEL_20;
  }
  outlined init with take of ConversationControlsType(v118, v114);
  char v44 = static ConversationControlsType.== infix(_:_:)((uint64_t)v115);
  outlined destroy of ConversationControlsType((uint64_t)v114);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v120, &demangling cache variable for type metadata for ConversationControlsType?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v121, &demangling cache variable for type metadata for ConversationControlsType?);
  outlined destroy of ConversationControlsType((uint64_t)v115);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v116, &demangling cache variable for type metadata for ConversationControlsType?);
  outlined init with copy of Environment<DynamicTypeSize>.Content(v40, v42, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  OUTLINED_FUNCTION_12_34();
  uint64_t v45 = (uint64_t)v111;
  if ((v44 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v46 = v42;
  uint64_t v47 = (uint64_t)v104;
  outlined init with take of ConversationControlsRecipe?(v46, (uint64_t)v104);
  OUTLINED_FUNCTION_2_9(v47);
  if (v41)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v47, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    unsigned int v82 = 254;
    uint64_t v48 = v113;
  }
  else
  {
    uint64_t v76 = v47 + *(int *)(v24 + 72);
    id v77 = *(id *)v76;
    v78 = *(void **)(v76 + 16);
    v79 = *(void **)(v76 + 32);
    uint64_t v80 = v47;
    v81 = *(void **)(v76 + 48);
    unsigned int v82 = *(unsigned __int8 *)(v76 + 72);
    outlined copy of SystemApertureElement?(*(id *)v76, *(void *)(v76 + 8), v78, *(void *)(v76 + 24), v79, *(void *)(v76 + 40), v81);
    outlined destroy of ConversationControlsRecipe(v80);
    if (v77 == (id)1)
    {
      unsigned int v82 = 254;
    }
    else
    {
    }
    uint64_t v43 = v112;
    uint64_t v48 = v113;
    uint64_t v45 = (uint64_t)v111;
  }
  v83 = (char *)v43 + *(int *)(v24 + 72);
  uint64_t v84 = *(void *)v83;
  unsigned __int8 v85 = v83[72];
  if (v84 == 1) {
    unsigned __int8 v86 = -2;
  }
  else {
    unsigned __int8 v86 = v85;
  }
  if (v82 > 0xFD)
  {
    if (v86 <= 0xFDu) {
      goto LABEL_22;
    }
    outlined destroy of ConversationControlsRecipe((uint64_t)v43);
    goto LABEL_59;
  }
  if (v86 > 0xFDu) {
    goto LABEL_22;
  }
  char v87 = static SystemApertureElement.AlertingStyle.== infix(_:_:)(v82, v86);
  outlined destroy of ConversationControlsRecipe((uint64_t)v43);
  if (v87)
  {
LABEL_59:
    outlined destroy of ConversationControlsRecipe((uint64_t)v36);
    goto LABEL_4;
  }
LABEL_23:
  outlined init with copy of ConversationControlsType((uint64_t)v36, (uint64_t)v116);
  if (v117 == 2)
  {
    outlined destroy of ConversationControlsType((uint64_t)v116);
  }
  else if (v117 != 6 {
         || v116[0] != 5
  }
         || (int8x16_t v49 = vorrq_s8(*(int8x16_t *)&v116[1], *(int8x16_t *)&v116[3]),
             *(void *)&vorr_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL))))
  {
    outlined destroy of ConversationControlsType((uint64_t)v116);
    uint64_t v50 = &v36[*(int *)(v24 + 72)];
    if (*(void *)v50 == 1 || *((void *)v50 + 8) != 4)
    {
      v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v59, v60))
      {
        os_log_t v61 = (uint8_t *)OUTLINED_FUNCTION_8_0();
        *(_WORD *)os_log_t v61 = 0;
        _os_log_impl(&dword_1C2F90000, v59, v60, "No alerting required because the new recipe doesn't allow a custom layout mode", v61, 2u);
        OUTLINED_FUNCTION_3();
      }

      (*(void (**)(unint64_t, unint64_t))(*(void *)v48 + 216))(0xD00000000000001FLL, 0x80000001C379F5D0);
      goto LABEL_43;
    }
    unsigned int v51 = v50[72];
    if (v51 <= 0xFD)
    {
      outlined init with copy of Environment<DynamicTypeSize>.Content(v40, v45, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      OUTLINED_FUNCTION_2_9(v45);
      if (v41)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v45, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
        unsigned int v93 = 254;
      }
      else
      {
        uint64_t v88 = v45 + *(int *)(v24 + 72);
        id v89 = *(id *)v88;
        v90 = *(void **)(v88 + 16);
        v91 = *(void **)(v88 + 32);
        v92 = *(void **)(v88 + 48);
        unsigned int v93 = *(unsigned __int8 *)(v88 + 72);
        outlined copy of SystemApertureElement?(*(id *)v88, *(void *)(v88 + 8), v90, *(void *)(v88 + 24), v91, *(void *)(v88 + 40), v92);
        outlined destroy of ConversationControlsRecipe(v45);
        if (v89 == (id)1)
        {
          unsigned int v93 = 254;
        }
        else
        {
        }
        uint64_t v40 = v110;
      }
      if ((v51 & 0x80) == 0 || v93 > 0xFD || (v93 & 0xC0) != 0x40)
      {
        char v74 = SystemApertureAlertingManager.requestAlertingAssertion(style:type:)(v51, (uint64_t)v36);
        outlined destroy of ConversationControlsRecipe((uint64_t)v36);
        return v74 & 1;
      }
    }
    uint64_t v52 = v40;
    uint64_t v53 = v107;
    outlined init with copy of Environment<DynamicTypeSize>.Content(v52, v107, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v54 = (uint64_t)v103;
    outlined init with copy of ConversationControlsRecipe((uint64_t)v36, (uint64_t)v103);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      OUTLINED_FUNCTION_15_1();
      *(void *)&v121[0] = OUTLINED_FUNCTION_7_56();
      *(_DWORD *)uint64_t v54 = 136315394;
      uint64_t v57 = v53;
      uint64_t v58 = v106;
      outlined init with copy of Environment<DynamicTypeSize>.Content(v57, v106, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      OUTLINED_FUNCTION_2_9(v58);
      if (v41)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v58, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
        memset(v116, 0, sizeof(v116));
        unsigned __int8 v117 = -1;
      }
      else
      {
        outlined init with copy of ConversationControlsType(v58, (uint64_t)v116);
        outlined destroy of ConversationControlsRecipe(v58);
      }
      uint64_t v94 = specialized >> prefix<A>(_:)((uint64_t)v116);
      unint64_t v96 = v95;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v116, &demangling cache variable for type metadata for ConversationControlsType?);
      v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v96, (uint64_t *)v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v107, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      *(_WORD *)(v54 + 12) = 2080;
      uint64_t v97 = (uint64_t)v103;
      outlined init with copy of ConversationControlsType((uint64_t)v103, (uint64_t)v116);
      uint64_t v98 = specialized >> prefix<A>(_:)((uint64_t)v116);
      unint64_t v100 = v99;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v116, &demangling cache variable for type metadata for ConversationControlsType?);
      v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v100, (uint64_t *)v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsRecipe(v97);
      OUTLINED_FUNCTION_18_33(&dword_1C2F90000, v101, v56, "No alerting required for transition from %s to %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
      goto LABEL_42;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v53, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v73 = v54;
LABEL_41:
    outlined destroy of ConversationControlsRecipe(v73);
LABEL_42:

LABEL_43:
    uint64_t v72 = (uint64_t)v36;
    goto LABEL_44;
  }
  uint64_t v62 = v109;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v40, v109, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v63 = (uint64_t)v105;
  outlined init with copy of ConversationControlsRecipe((uint64_t)v36, (uint64_t)v105);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  uint64_t v65 = v64;
  if (!os_log_type_enabled(v55, v64))
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v62, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v73 = v63;
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_15_1();
  LODWORD(v112) = v65;
  uint64_t v113 = OUTLINED_FUNCTION_7_56();
  v116[0] = v113;
  *(_DWORD *)uint64_t v65 = 136315394;
  uint64_t v66 = specialized >> prefix<A>(_:)();
  *(void *)&v121[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v62, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  *(_WORD *)(v65 + 12) = 2080;
  v111 = v36;
  uint64_t v68 = v108;
  outlined init with copy of ConversationControlsRecipe(v63, v108);
  __swift_storeEnumTagSinglePayload(v68, 0, 1, v24);
  uint64_t v69 = specialized >> prefix<A>(_:)();
  unint64_t v71 = v70;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v68, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  *(void *)&v121[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of ConversationControlsRecipe(v63);
  _os_log_impl(&dword_1C2F90000, v55, (os_log_type_t)v112, "Ignoring recipe transition update (%s -> %s) because new recipe does not support alerting", (uint8_t *)v65, 0x16u);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3();

  uint64_t v72 = (uint64_t)v111;
LABEL_44:
  outlined destroy of ConversationControlsRecipe(v72);
LABEL_45:
  char v74 = 0;
  return v74 & 1;
}

Swift::Void __swiftcall SystemApertureAlertingManager.invalidateAlertingAssertonIfFullScreen()()
{
  swift_unknownObjectUnownedLoadStrong();
  uint64_t v1 = v0[4];
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  swift_unknownObjectRelease();
  if (v1)
  {
    uint64_t v3 = *(void (**)(unint64_t, unint64_t))(*v0 + 216);
    v3(0xD00000000000001ELL, 0x80000001C379F5F0);
  }
  else
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_4_14(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15))
    {
      uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v12);
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, v16, v13, "Ignoring invalidation request, full-screen presentation hasn't happened yet");
      OUTLINED_FUNCTION_3();
    }
  }
}

uint64_t SystemApertureAlertingManager.requestAlertingAssertion(style:type:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v15 = 0;
  *(void *)&long long v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v6._object = (void *)0x80000001C379F6D0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v6);
  unsigned __int8 v19 = a1;
  v7._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  if (a1 >> 6)
  {
    if (a1 >> 6 == 1)
    {
      OUTLINED_FUNCTION_4_19();
      uint64_t v9 = v8;
      if ((a1 & 1) == 0)
      {
LABEL_4:
        char v10 = (*(uint64_t (**)(void, unint64_t, uint64_t, void))(v9 + 160))(0, 0xE000000000000000, 1, 0);
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v15 = 3;
      long long v16 = 0u;
      long long v17 = 0u;
      char v18 = 6;
      char v11 = static ConversationControlsType.== infix(_:_:)(a2);
      outlined destroy of ConversationControlsType((uint64_t)&v15);
      OUTLINED_FUNCTION_4_19();
      uint64_t v9 = v12;
      if ((v11 & 1) == 0) {
        goto LABEL_4;
      }
    }
    char v10 = (*(uint64_t (**)(void, unint64_t, void))(v9 + 168))(0, 0xE000000000000000, 0);
    goto LABEL_10;
  }
  if (a1) {
    char v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v2 + 168))(v15, v16, 1);
  }
  else {
    char v10 = SystemApertureAlertingManager.requestPersistentAlertingAssertionUntilFirstFullScreenPresentation(reason:)();
  }
LABEL_10:
  char v13 = v10;
  swift_bridgeObjectRelease();
  return v13 & 1;
}

Swift::Void __swiftcall SystemApertureAlertingManager.invalidateAlertingAssertion(reason:)(Swift::String reason)
{
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2)
  {
    if (objc_msgSend((id)OUTLINED_FUNCTION_16_26(), sel_isValid))
    {
      CurrentValueSubject.send(_:)();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        int v5 = (uint8_t *)OUTLINED_FUNCTION_8_0();
        *(_WORD *)int v5 = 0;
        _os_log_impl(&dword_1C2F90000, v3, v4, "Invalidating alerting assertion", v5, 2u);
        OUTLINED_FUNCTION_3();
      }

      uint64_t v6 = OUTLINED_FUNCTION_39();
      Swift::String v7 = (void *)MEMORY[0x1C87730B0](v6);
      objc_msgSend(v2, sel_invalidateWithReason_, v7);
      swift_unknownObjectRelease();

      OUTLINED_FUNCTION_12_2();
      return;
    }
    swift_unknownObjectRelease();
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_24(v9);
    OUTLINED_FUNCTION_6_7(&dword_1C2F90000, oslog, v10, "Ignoring invalidation request, there's no valid alert to invalidate");
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_12_2();
}

uint64_t SystemApertureAlertingManager.requestPersistentAlertingAssertionUntilFirstFullScreenPresentation(reason:)()
{
  swift_unknownObjectUnownedLoadStrong();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  swift_unknownObjectRelease();
  if (v1)
  {
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12(v4))
    {
      int v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v5);
      OUTLINED_FUNCTION_8_39(&dword_1C2F90000, v3, v6, "Ignoring request for alerting assertion because full-screen presentation has already happened");
      OUTLINED_FUNCTION_3();
    }

    return 0;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_39();
    return v9(v8);
  }
}

uint64_t SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectUnownedLoadStrong();
  uint64_t v12 = *(void *)(v3 + 32);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v12) = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
  swift_unknownObjectRelease();
  if ((v12 & 1) != 0 && (a3 & 1) == 0)
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12(v15))
    {
      long long v16 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v16);
      char v18 = "No alerting required for recipe transition because call UI is full-screen";
LABEL_11:
      OUTLINED_FUNCTION_8_39(&dword_1C2F90000, v14, v17, v18);
      OUTLINED_FUNCTION_3();
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  id v19 = objc_msgSend(SystemApertureAlertingManager.systemApertureElementContext.getter(), sel_requestAlertingAssertion);
  swift_unknownObjectRelease();
  if (!v19)
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (OUTLINED_FUNCTION_12(v30))
    {
      int64_t v31 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v31);
      char v18 = "Unable to obtain alerting assertion, likely because the system aperture element context isn't ready";
      goto LABEL_11;
    }
LABEL_15:

    return 0;
  }
  if (!objc_msgSend(v19, sel_isValid))
  {
    os_log_type_t v32 = v3 + OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_logger;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12(v33))
    {
      uint64_t v34 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1C2F90000, v14, v32, "Received an invalid alerting assertion", v34, 2u);
      OUTLINED_FUNCTION_3();
    }
    swift_unknownObjectRelease();
    goto LABEL_15;
  }
  uint64_t v37 = a1;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = v3 + OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_logger;
  (*(void (**)(char *))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v23 + v21, v11, v8);
  *(void *)(v23 + v22) = v20;
  aBlock[4] = (uint64_t)partial apply for closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SBUISystemApertureAutomaticallyInvalidatable, @guaranteed String) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_37;
  uint64_t v24 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v19, sel_addInvalidationBlock_, v24);
  _Block_release(v24);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = OUTLINED_FUNCTION_15_1();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = (uint64_t)v19;
    aBlock[0] = v38;
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SBUISystemApertureAutomaticallyInvalidatable);
    uint64_t v28 = String.init<A>(reflecting:)();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v25, v26, "Obtained alerting assertion %s for reason: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
  }

  *(void *)(v4 + 40) = v19;
  swift_unknownObjectRelease();
  return 1;
}

uint64_t closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_unknownObjectRetain_n();
  Swift::String v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    aBlock[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v42 = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SBUISystemApertureAutomaticallyInvalidatable);
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v7, v8, "Invalidated assertion %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v10, -1, -1);
    MEMORY[0x1C87760E0](v9, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(Strong + 40) = 0;
    swift_release();
    swift_unknownObjectRelease();
  }
  type metadata accessor for OS_dispatch_queue();
  uint64_t v40 = static OS_dispatch_queue.main.getter();
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v38 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  char v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v37 - v19;
  static DispatchTime.now()();
  uint64_t v21 = type metadata accessor for DispatchTimeInterval();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (void *)((char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v24 = 500;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E4FBCAC0], v21);
  MEMORY[0x1C8772E10](v20, v24);
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v37[3] = v15 + 8;
  uint64_t v39 = v25;
  v25(v20, v14);
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:);
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_10;
  os_log_type_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v27 = type metadata accessor for DispatchQoS();
  v37[2] = v37;
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  os_log_type_t v30 = (char *)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  v37[1] = v37;
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v35 = (void *)v40;
  MEMORY[0x1C8773B10](v18, v30, v34, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  return v39(v18, v38);
}

uint64_t closure #1 in closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    CurrentValueSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed SBUISystemApertureAutomaticallyInvalidatable, @guaranteed String) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  swift_retain();
  uint64_t v5 = swift_unknownObjectRetain();
  v1(v5, v2, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t SystemApertureAlertingManager.deinit()
{
  outlined destroy of unowned CNKCallDetailsDeferredPresentationManager(v0 + 16);
  outlined destroy of unowned CNKCallDetailsDeferredPresentationManager(v0 + 24);
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  return v0;
}

uint64_t SystemApertureAlertingManager.__deallocating_deinit()
{
  SystemApertureAlertingManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized SystemApertureAlertingManager.init(systemApertureElement:sceneStateDescriber:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a3 + 40) = 0;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_logger;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationControls);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a3 + v9, v11, v10);
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_invalidationInProgressSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  *(void *)(a3 + v12) = CurrentValueSubject.init(_:)();
  swift_unknownObjectUnownedInit();
  *(void *)(a3 + 32) = a6;
  swift_unknownObjectUnownedInit();
  CurrentValueSubject.send(_:)();

  swift_unknownObjectRelease();
  return a3;
}

id outlined copy of SystemApertureElement?(id result, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  if (result != (id)1)
  {
    uint64_t v9 = result;
    id v10 = a7;
    id v11 = v9;
    id v12 = a3;
    return a5;
  }
  return result;
}

uint64_t outlined init with take of ConversationControlsRecipe?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for SystemApertureAlertingManager()
{
  return type metadata accessor for SystemApertureAlertingManager();
}

uint64_t type metadata accessor for SystemApertureAlertingManager()
{
  uint64_t result = type metadata singleton initialization cache for SystemApertureAlertingManager;
  if (!type metadata singleton initialization cache for SystemApertureAlertingManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SystemApertureAlertingManager()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SystemApertureAlertingManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureAlertingManager);
}

uint64_t dispatch thunk of SystemApertureAlertingManager.__allocating_init(systemApertureElement:sceneStateDescriber:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.requestEphemeralAlertingAssertion(reason:shouldOverridePersistentAssertion:includingWhileFullscreen:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.requestPersistentAlertingAssertion(reason:includingWhileFullscreen:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.updatePersistentToEphemeralAlertIfNeeded(reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.invalidatePersistentAlertingAssertion(reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.handleRecipeTransition(from:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.invalidateAlertingAssertonIfFullScreen()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SystemApertureAlertingManager.invalidateAlertingAssertion(reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t sub_1C31BADF4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C31BAE2C()
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)()
{
  OUTLINED_FUNCTION_6_11();
  type metadata accessor for Logger();
  uint64_t v1 = OUTLINED_FUNCTION_39();
  return closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)(v1, v2, v0, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)()
{
  return closure #1 in closure #1 in SystemApertureAlertingManager.startAlerting(reason:includingWhileFullscreen:)();
}

id @nonobjc UIImage.init(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v4 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_imageNamed_inBundle_, v4, a3);

  return v5;
}

id RecentsJoinButton.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t key path getter for RecentsJoinButton.conversationMetadata : RecentsJoinButton(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
}

uint64_t key path setter for RecentsJoinButton.conversationMetadata : RecentsJoinButton(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RecentOngoingConversationMetadata?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60))(v6);
}

uint64_t RecentsJoinButton.conversationMetadata.didset()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for RecentOngoingConversationMetadata(0);
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit17RecentsJoinButton_conversationMetadata;
  swift_beginAccess();
  outlined init with copy of RecentOngoingConversationMetadata?(v11, (uint64_t)v7);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v7);
LABEL_7:
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1C3769620;
    outlined init with copy of RecentOngoingConversationMetadata?(v11, (uint64_t)v5);
    uint64_t v19 = specialized >> prefix<A>(_:)();
    uint64_t v21 = v20;
    outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v5);
    *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  outlined init with take of RecentOngoingConversationMetadata((uint64_t)v7, (uint64_t)v10);
  id v12 = objc_msgSend(self, sel_sharedInstance);
  id v13 = objc_msgSend(v12, sel_conversationManager);

  uint64_t v14 = (void *)TUConversationManager.conversation(with:)((uint64_t)v10);
  if (!v14)
  {
    outlined destroy of RecentOngoingConversationMetadata((uint64_t)v10);
    goto LABEL_7;
  }
  id v15 = objc_msgSend(v14, sel_resolvedAudioVideoMode);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v16 = objc_msgSend(self, sel_conversationKit);
  if (v15 == (id)1)
  {
    id v17 = @nonobjc UIImage.init(named:in:)(0xD000000000000011, 0x80000001C379FA60, v16);
    objc_msgSend(v1, sel_setImage_forState_, v17, 0);
  }
  else
  {
    id v17 = v14;
    uint64_t v14 = @nonobjc UIImage.init(named:in:)(0x7475622D6E696F6ALL, 0xEB000000006E6F74, v16);
    objc_msgSend(v1, sel_setImage_forState_, v14, 0);
  }

  return outlined destroy of RecentOngoingConversationMetadata((uint64_t)v10);
}

uint64_t RecentsJoinButton.conversationMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit17RecentsJoinButton_conversationMetadata;
  OUTLINED_FUNCTION_1_79();
  return outlined init with copy of RecentOngoingConversationMetadata?(v3, a1);
}

uint64_t outlined init with copy of RecentOngoingConversationMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t RecentsJoinButton.conversationMetadata.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit17RecentsJoinButton_conversationMetadata;
  swift_beginAccess();
  outlined assign with copy of RecentOngoingConversationMetadata?(a1, v3);
  swift_endAccess();
  RecentsJoinButton.conversationMetadata.didset();
  return outlined destroy of RecentOngoingConversationMetadata?(a1);
}

uint64_t outlined assign with copy of RecentOngoingConversationMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RecentOngoingConversationMetadata?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*RecentsJoinButton.conversationMetadata.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return RecentsJoinButton.conversationMetadata.modify;
}

uint64_t RecentsJoinButton.conversationMetadata.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return RecentsJoinButton.conversationMetadata.didset();
  }
  return result;
}

id RecentsJoinButton.init()()
{
  uint64_t v1 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0_53(v1);
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for RecentsJoinButton();
  id v2 = objc_msgSendSuper2(&v12, sel_initWithFrame_, 0.0, 0.0, 32.0, 32.0);
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = objc_msgSend(v3, sel_clearColor);
  objc_msgSend(v4, sel_setBackgroundColor_, v5);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v6 = self;
  id v7 = v4;
  id v8 = @nonobjc UIImage.init(named:in:)(0x7475622D6E696F6ALL, 0xEB000000006E6F74, objc_msgSend(v6, sel_conversationKit));
  objc_msgSend(v7, sel_setImage_forState_, v8, 0);

  id v9 = v7;
  Class v10 = RecentsJoinButton.handoffOrJoinMenu.getter();
  objc_msgSend(v9, sel_setMenu_, v10);

  objc_msgSend(v9, sel_setShowsMenuAsPrimaryAction_, 1);
  objc_msgSend(v9, sel__setChangesSelectionAsPrimaryAction_, 1);

  return v9;
}

uint64_t type metadata accessor for RecentsJoinButton()
{
  uint64_t result = type metadata singleton initialization cache for RecentsJoinButton;
  if (!type metadata singleton initialization cache for RecentsJoinButton) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Class RecentsJoinButton.handoffOrJoinMenu.getter()
{
  id v0 = objc_msgSend(self, sel_currentDeviceRouteGlyphForDisplayStyle_, 0);
  if (!v0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    uint64_t v14 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return 0;
  }
  uint64_t v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  id v2 = objc_msgSend(self, sel_conversationKit);
  swift__string._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001C379F8F0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000017;
  v4.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v4.value._object = (void *)0xEF74694B6E6F6974;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  swift__string._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, swift__string);

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v6 = v1;
  id v7 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  RecentsJoinButton.handoffContext.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String?, UIImage?));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UIImage));
  if (!swift_dynamicCast())
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    id v15 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return 0;
  }
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v8 = v17;
  uint64_t v9 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769610;
  *(void *)(v10 + 32) = v9;
  *(void *)(v10 + 40) = v7;
  UIMenuElementSize preferredElementSize = v10;
  specialized Array._endMutation()();
  id v11 = v7;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v19.value.super.Class isa = 0;
  v19.is_nil = 0;
  v13.super.super.Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v19, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0).super.super.isa;

  return v13.super.super.isa;
}

id RecentsJoinButton.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void RecentsJoinButton.init(coder:)()
{
  uint64_t v1 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0_53(v1);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

UIControlEvents __swiftcall RecentsJoinButton._controlEventsForActionTriggered()()
{
  return 64;
}

UIContextMenuConfiguration_optional __swiftcall RecentsJoinButton.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  MEMORY[0x1F4188790](v3 - 8);
  Swift::String v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x58))();
  uint64_t v7 = specialized >> prefix<A>(_:)();
  uint64_t v9 = v8;
  outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v5);
  *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (RecentsJoinButton.isHandoffEligible.getter())
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextMenuConfiguration);
    *(void *)(swift_allocObject() + 16) = v2;
    uint64_t v10 = v2;
    UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)();
  }
  else
  {
    RecentsJoinButton.joinOngoingConversation()();
    id v11 = 0;
  }
  result.value.super.Class isa = v11;
  result.is_nil = v12;
  return result;
}

id RecentsJoinButton.isHandoffEligible.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))(v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4) == 1)
  {
    outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v3);
    return 0;
  }
  else
  {
    outlined init with take of RecentOngoingConversationMetadata((uint64_t)v3, (uint64_t)v7);
    id v9 = objc_msgSend(*(id *)&v7[*(int *)(v4 + 24)], sel_handoffEligibility);
    if (v9)
    {
      uint64_t v10 = v9;
      id v8 = objc_msgSend(v9, sel_isEligible);
    }
    else
    {
      id v8 = 0;
    }
    outlined destroy of RecentOngoingConversationMetadata((uint64_t)v7);
  }
  return v8;
}

uint64_t RecentsJoinButton.joinOngoingConversation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58);
  ((void (*)(uint64_t))v11)(v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
  {
    outlined init with take of RecentOngoingConversationMetadata((uint64_t)v6, (uint64_t)v10);
    uint64_t v12 = self;
    id v13 = objc_msgSend(v12, sel_sharedInstance);
    id v14 = objc_msgSend(v13, sel_conversationManager);

    id v15 = (void *)TUConversationManager.conversation(with:)((uint64_t)v10);
    if (!v15)
    {
      outlined destroy of RecentOngoingConversationMetadata((uint64_t)v10);
      goto LABEL_9;
    }
    if (objc_msgSend(v15, sel_state))
    {
      id v16 = objc_msgSend(self, sel_faceTimeShowInCallUIURL);
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      MEMORY[0x1F4188790](v17 - 8);
      UIImage_optional v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v16)
      {
        uint64_t v20 = type metadata accessor for URL();
        uint64_t v21 = *(void *)(v20 - 8);
        MEMORY[0x1F4188790](v20);
        uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v19, v23, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v20);
        uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20);
        if (result != 1)
        {
          URL._bridgeToObjectiveC()(v25);
          id v27 = v26;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
          TUOpenURL();
          id v28 = v15;
LABEL_13:

          return outlined destroy of RecentOngoingConversationMetadata((uint64_t)v10);
        }
      }
      else
      {
        uint64_t v33 = type metadata accessor for URL();
        uint64_t result = __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v33);
      }
      __break(1u);
      return result;
    }
    id v27 = objc_msgSend(v12, sel_sharedInstance);
    id v28 = TUConversation.joinConversationRequest()();
    objc_msgSend(v27, sel_launchAppForJoinRequest_, v28);

    goto LABEL_13;
  }
  outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v6);
LABEL_9:
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1C3769620;
  v11();
  uint64_t v30 = specialized >> prefix<A>(_:)();
  uint64_t v32 = v31;
  outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v4);
  *(void *)(v29 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v29 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

id RecentsJoinButton.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void RecentsJoinButton.init(frame:)()
{
}

id RecentsJoinButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecentsJoinButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t RecentsJoinButton.handoffOngoingConversation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecentOngoingConversationMetadata?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v23 - v5;
  uint64_t v7 = type metadata accessor for RecentOngoingConversationMetadata(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58);
  ((void (*)(uint64_t))v11)(v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v6);
  }
  else
  {
    outlined init with take of RecentOngoingConversationMetadata((uint64_t)v6, (uint64_t)v10);
    uint64_t v12 = self;
    id v13 = objc_msgSend(v12, sel_sharedInstance);
    id v14 = objc_msgSend(v13, sel_conversationManager);

    id v15 = (void *)TUConversationManager.conversation(with:)((uint64_t)v10);
    if (v15)
    {
      id v16 = objc_msgSend(v15, sel_handoffEligibility);

      if (v16)
      {
        id v17 = objc_msgSend(v12, sel_sharedInstance);
        objc_msgSend(v17, sel_continueHandoffForConversationWithEligibility_, v16);

        return outlined destroy of RecentOngoingConversationMetadata((uint64_t)v10);
      }
    }
    outlined destroy of RecentOngoingConversationMetadata((uint64_t)v10);
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
  v11();
  uint64_t v20 = specialized >> prefix<A>(_:)();
  uint64_t v22 = v21;
  outlined destroy of RecentOngoingConversationMetadata?((uint64_t)v4);
  *(void *)(v19 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

id RecentsJoinButton.handoffContext.getter()
{
  id result = objc_msgSend(self, sel_sharedInstance);
  if (result)
  {
    uint64_t v1 = result;
    id v2 = objc_msgSend(result, sel_deviceType);

    if (v2 == (id)4)
    {
      id v12 = objc_msgSend(self, sel_conversationKit);
      v18._object = (void *)0xE000000000000000;
      v13._uint64_t countAndFlagsBits = 0x4F52465F4E494F4ALL;
      v13._object = (void *)0xEE00444150495F4DLL;
      v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v14.value._object = (void *)0xEF74694B6E6F6974;
      v15._uint64_t countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      v18._uint64_t countAndFlagsBits = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v18)._countAndFlagsBits;

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    }
    else if (v2 == (id)3)
    {
      id v8 = objc_msgSend(self, sel_conversationKit);
      v17._object = (void *)0xE000000000000000;
      v9._uint64_t countAndFlagsBits = 0x4F52465F4E494F4ALL;
      v9._object = (void *)0xEE00444F50495F4DLL;
      v10.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v10.value._object = (void *)0xEF74694B6E6F6974;
      v11._uint64_t countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      v17._uint64_t countAndFlagsBits = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v17)._countAndFlagsBits;

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    }
    else
    {
      if (v2 != (id)2) {
        return 0;
      }
      id v3 = objc_msgSend(self, sel_conversationKit);
      v4._uint64_t countAndFlagsBits = 0xD000000000000010;
      v16._object = (void *)0xE000000000000000;
      v4._object = (void *)0x80000001C379F9E0;
      v5.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v5.value._object = (void *)0xEF74694B6E6F6974;
      v6._uint64_t countAndFlagsBits = 0;
      v6._object = (void *)0xE000000000000000;
      v16._uint64_t countAndFlagsBits = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v16)._countAndFlagsBits;

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    }
    @nonobjc UIImage.__allocating_init(systemName:)();
    return (id)countAndFlagsBits;
  }
  __break(1u);
  return result;
}

void closure #1 in RecentsJoinButton.handoffOrJoinMenu.getter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = a2 + 16;
  OUTLINED_FUNCTION_1_79();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  if (v5)
  {
    Swift::String v6 = (void *)v5;
    a3();
  }
}

uint64_t sub_1C31BCD50()
{
  return swift_deallocObject();
}

Class partial apply for closure #1 in RecentsJoinButton.contextMenuInteraction(_:configurationForMenuAtLocation:)()
{
  return RecentsJoinButton.handoffOrJoinMenu.getter();
}

uint64_t ObjC metadata update function for RecentsJoinButton()
{
  return type metadata accessor for RecentsJoinButton();
}

void type metadata completion function for RecentsJoinButton()
{
  type metadata accessor for RecentOngoingConversationMetadata?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for RecentsJoinButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsJoinButton);
}

uint64_t dispatch thunk of RecentsJoinButton.conversationMetadata.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of RecentsJoinButton.conversationMetadata.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of RecentsJoinButton.conversationMetadata.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

void type metadata accessor for RecentOngoingConversationMetadata?()
{
  if (!lazy cache variable for type metadata for RecentOngoingConversationMetadata?)
  {
    type metadata accessor for RecentOngoingConversationMetadata(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RecentOngoingConversationMetadata?);
    }
  }
}

uint64_t outlined destroy of RecentOngoingConversationMetadata(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecentOngoingConversationMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C31BCFB4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in RecentsJoinButton.handoffOrJoinMenu.getter(uint64_t a1)
{
  closure #1 in RecentsJoinButton.handoffOrJoinMenu.getter(a1, v1, (void (*)(void))RecentsJoinButton.joinOngoingConversation());
}

void partial apply for closure #2 in RecentsJoinButton.handoffOrJoinMenu.getter(uint64_t a1)
{
  closure #1 in RecentsJoinButton.handoffOrJoinMenu.getter(a1, v1, (void (*)(void))RecentsJoinButton.handoffOngoingConversation());
}

BOOL ScreenShareAttributes.Style.isWindowed.getter(uint64_t a1)
{
  return a1 == 2;
}

uint64_t ScreenShareAttributes.Style.debugDescription.getter(void *a1)
{
  if (!a1) {
    return 0x656E6F6E2ELL;
  }
  if (a1 == (void *)1) {
    return 0x7263536C6C75662ELL;
  }
  if (a1 == (void *)2) {
    return 0x776F646E69772ELL;
  }
  outlined copy of ScreenShareAttributes.Style(a1);
  id v3 = objc_msgSend(a1, sel_description);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  outlined consume of ScreenShareAttributes.Style(a1);
  return 0x79616C707369642ELL;
}

id outlined copy of ScreenShareAttributes.Style(id result)
{
  if ((unint64_t)result >= 3) {
    return result;
  }
  return result;
}

void outlined consume of ScreenShareAttributes.Style(id a1)
{
  if ((unint64_t)a1 >= 3) {
}
  }

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ScreenShareAttributes.Style()
{
  return ScreenShareAttributes.Style.debugDescription.getter(*v0);
}

void *ScreenShareAttributes.defaultScaleFactor.unsafeMutableAddressor()
{
  return &static ScreenShareAttributes.defaultScaleFactor;
}

double static ScreenShareAttributes.defaultScaleFactor.getter()
{
  return 1.0;
}

uint64_t ScreenShareAttributes.sessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

void *ScreenShareAttributes.style.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 20));
  outlined copy of ScreenShareAttributes.Style(v1);
  return v1;
}

uint64_t type metadata accessor for ScreenShareAttributes(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ScreenShareAttributes);
}

double ScreenShareAttributes.displayScale.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 24));
}

uint64_t ScreenShareAttributes.displayCornerRadius.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 28));
}

double ScreenShareAttributes.scaleFactor.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 32));
}

BOOL ScreenShareAttributes.displayIsScaled.getter()
{
  double v1 = *(double *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 32));
  id v2 = objc_msgSend(self, sel_defaultScaleFactor);
  objc_msgSend(v2, sel_floatValue);
  float v4 = v3;

  return v1 != v4;
}

BOOL ScreenShareAttributes.isWindowed.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 20)) == 2;
}

double ScreenShareAttributes.originalResolution.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 36));
}

uint64_t ScreenShareAttributes.originalResolution.setter(double a1, double a2, double a3, double a4)
{
  uint64_t result = type metadata accessor for ScreenShareAttributes(0);
  Swift::String_optional v10 = (double *)(v4 + *(int *)(result + 36));
  *Swift::String_optional v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t (*ScreenShareAttributes.originalResolution.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL ScreenShareAttributes.isValid.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 20)) != 0;
}

uint64_t ScreenShareAttributes.debugDescription.getter()
{
  _StringGuts.grow(_:)(178);
  OUTLINED_FUNCTION_0_43(0xD000000000000022, (uint64_t)"ScreenShareAttributes(sessionUUID=");
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = (unsigned __int16)OUTLINED_FUNCTION_7_57() | 0x3D656C7974730000;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  float v3 = (int *)type metadata accessor for ScreenShareAttributes(0);
  uint64_t v4 = *(void *)(v0 + v3[5]);
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = (unsigned __int16)OUTLINED_FUNCTION_7_57() | 0x616C707369640000;
  v5._object = (void *)0xEF3D656C61635379;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_43(0xD000000000000016, (uint64_t)", displayCornerRadius=");
  if (*(unsigned char *)(v0 + v3[7] + 8))
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v8 = 7104878;
  }
  else
  {
    uint64_t v8 = String.init<A>(reflecting:)();
    unint64_t v7 = v9;
  }
  unint64_t v10 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = (unsigned __int16)OUTLINED_FUNCTION_7_57() | 0x46656C6163730000;
  v11._object = (void *)0xEE003D726F746361;
  String.append(_:)(v11);
  double v12 = *(double *)(v0 + v3[8]);
  v13._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x80000001C379FAD0;
  v14._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v14);
  id v15 = objc_msgSend(self, sel_defaultScaleFactor);
  objc_msgSend(v15, sel_floatValue);
  float v17 = v16;

  if (v12 == v17) {
    uint64_t v18 = 0x65736C6166;
  }
  else {
    uint64_t v18 = 1702195828;
  }
  if (v12 == v17) {
    unint64_t v19 = 0xE500000000000000;
  }
  else {
    unint64_t v19 = 0xE400000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_43(0xD000000000000015, (uint64_t)", originalResolution=");
  v21._uint64_t countAndFlagsBits = CGRect.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = (unsigned __int16)OUTLINED_FUNCTION_7_57() | 0x646E695773690000;
  v22._object = (void *)0xED00003D6465776FLL;
  String.append(_:)(v22);
  if (v4 == 2) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if (v4 == 2) {
    unint64_t v24 = 0xE400000000000000;
  }
  else {
    unint64_t v24 = 0xE500000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = (unsigned __int16)OUTLINED_FUNCTION_7_57() | 0x7274744175740000;
  v26._object = (void *)0xEF3D736574756269;
  String.append(_:)(v26);
  ScreenShareAttributes.tuCallScreenShareAttributes.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUCallScreenShareAttributes?);
  v27._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  return 0;
}

id ScreenShareAttributes.tuCallScreenShareAttributes.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAC0]), sel_init);
  Swift::String v2 = (int *)type metadata accessor for ScreenShareAttributes(0);
  unint64_t v3 = *(void *)(v0 + v2[5]);
  if (v3 >= 2)
  {
    if (v3 == 2)
    {
      objc_msgSend(v1, sel_setWindowed_, 1);
    }
    else
    {
      objc_msgSend(v1, sel_setDisplayID_, (id)v3);
      objc_msgSend(v1, sel_setWindowed_, 0);
      outlined consume of ScreenShareAttributes.Style((id)v3);
    }
  }
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_setWindowUUID_, isa);

  Swift::String v5 = self;
  objc_msgSend(v1, sel_setDeviceFamily_, objc_msgSend(v5, sel_currentDeviceFamily));
  objc_msgSend(v1, sel_setDeviceHomeButtonType_, objc_msgSend(v5, sel_currentDeviceHomeButtonType));
  if (v3 > 2) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = qword_1C3774670[v3];
  }
  objc_msgSend(v1, sel_setStyle_, v6);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithDouble_, *(double *)(v0 + v2[6]));
  objc_msgSend(v1, sel_setDisplayScale_, v7);

  uint64_t v8 = v0 + v2[7];
  if (*(unsigned char *)(v8 + 8)) {
    id v9 = 0;
  }
  else {
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithDouble_, *(double *)v8);
  }
  objc_msgSend(v1, sel_setCornerRadius_, v9);

  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithDouble_, *(double *)(v0 + v2[8]));
  objc_msgSend(v1, sel_setScaleFactor_, v10);

  Swift::String v11 = (double *)(v0 + v2[9]);
  id v12 = objc_msgSend(self, sel_valueWithRect_, *v11, v11[1], v11[2], v11[3]);
  OUTLINED_FUNCTION_5_67((uint64_t)v12, sel_setOriginalResolution_);

  return v1;
}

double default argument 5 of ScreenShareAttributes.init(sessionUUID:style:displayScale:displayCornerRadius:scaleFactor:originalResolution:)()
{
  return 0.0;
}

int *ScreenShareAttributes.init(sessionUUID:style:displayScale:displayCornerRadius:scaleFactor:originalResolution:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>, double a11@<D5>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(a5, a1);
  uint64_t result = (int *)type metadata accessor for ScreenShareAttributes(0);
  *(void *)(a5 + result[5]) = a2;
  *(double *)(a5 + result[6]) = a6;
  uint64_t v24 = a5 + result[7];
  *(void *)uint64_t v24 = a3;
  *(unsigned char *)(v24 + 8) = a4 & 1;
  *(double *)(a5 + result[8]) = a7;
  unint64_t v25 = (double *)(a5 + result[9]);
  *unint64_t v25 = a8;
  v25[1] = a9;
  void v25[2] = a10;
  v25[3] = a11;
  return result;
}

uint64_t ScreenShareAttributes.tuStyle.getter()
{
  unint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ScreenShareAttributes(0) + 20));
  if (v1 > 2) {
    return 2;
  }
  else {
    return qword_1C3774670[v1];
  }
}

void TUScreenShareAttributes.update(with:)(void *a1)
{
  Swift::String v2 = v1;
  objc_msgSend(v1, sel_setWindowed_, objc_msgSend(a1, sel_isWindowed));
  Class isa = (Class)objc_msgSend(a1, sel_windowUUID);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  if (isa)
  {
    uint64_t v9 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v11 = v10;
    MEMORY[0x1F4188790](v12);
    OUTLINED_FUNCTION_21();
    uint64_t v15 = v14 - v13;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v8, v15, v9);
    __swift_storeEnumTagSinglePayload(v8, 0, 1, v9);
    Class isa = 0;
    if (__swift_getEnumTagSinglePayload(v8, 1, v9) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v9);
    }
  }
  else
  {
    uint64_t v16 = type metadata accessor for UUID();
    __swift_storeEnumTagSinglePayload(v8, 1, 1, v16);
  }
  objc_msgSend(v2, sel_setWindowUUID_, isa);

  objc_msgSend(v2, sel_setDeviceFamily_, objc_msgSend(a1, sel_deviceFamily));
  objc_msgSend(v2, sel_setDeviceHomeButtonType_, objc_msgSend(a1, sel_deviceHomeButtonType));
  objc_msgSend(v2, sel_setStyle_, objc_msgSend(a1, sel_style));
  id v17 = objc_msgSend(a1, sel_displayScale);
  OUTLINED_FUNCTION_5_67((uint64_t)v17, sel_setDisplayScale_);

  id v18 = objc_msgSend(a1, sel_scaleFactor);
  OUTLINED_FUNCTION_5_67((uint64_t)v18, sel_setScaleFactor_);

  id v19 = objc_msgSend(a1, sel_originalResolution);
  OUTLINED_FUNCTION_5_67((uint64_t)v19, sel_setOriginalResolution_);

  id v20 = objc_msgSend(a1, sel_displayID);
  OUTLINED_FUNCTION_5_67((uint64_t)v20, sel_setDisplayID_);
}

uint64_t key path getter for SingleDisplaySharingSession.sessionDidCreateNewSession : SingleDisplaySharingSession@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ScreenShareAttributes?) -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
}

uint64_t key path setter for SingleDisplaySharingSession.sessionDidCreateNewSession : SingleDisplaySharingSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ScreenShareAttributes?) -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t SingleDisplaySharingSession.sessionDidCreateNewSession.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t SingleDisplaySharingSession.sessionDidCreateNewSession.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*v1);
  uint64_t *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SingleDisplaySharingSession.sessionDidCreateNewSession.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SingleDisplaySharingSession.sessionDidBegin : SingleDisplaySharingSession@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ScreenShareAttributes?) -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
}

uint64_t key path setter for SingleDisplaySharingSession.sessionDidBegin : SingleDisplaySharingSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ScreenShareAttributes?) -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t SingleDisplaySharingSession.sessionDidBegin.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t SingleDisplaySharingSession.sessionDidBegin.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*SingleDisplaySharingSession.sessionDidBegin.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SingleDisplaySharingSession.sessionDidEnd : SingleDisplaySharingSession@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
}

uint64_t key path setter for SingleDisplaySharingSession.sessionDidEnd : SingleDisplaySharingSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t SingleDisplaySharingSession.sessionDidEnd.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t SingleDisplaySharingSession.sessionDidEnd.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v1 + 32));
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

uint64_t (*SingleDisplaySharingSession.sessionDidEnd.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SingleDisplaySharingSession.sessionDidChangeAttributes : SingleDisplaySharingSession@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ScreenShareAttributes?) -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
}

uint64_t key path setter for SingleDisplaySharingSession.sessionDidChangeAttributes : SingleDisplaySharingSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ScreenShareAttributes?) -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t SingleDisplaySharingSession.sessionDidChangeAttributes.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t SingleDisplaySharingSession.sessionDidChangeAttributes.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v1 + 48));
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

uint64_t (*SingleDisplaySharingSession.sessionDidChangeAttributes.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SingleDisplaySharingSession.sessionDidChangeContent : SingleDisplaySharingSession@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
}

uint64_t key path setter for SingleDisplaySharingSession.sessionDidChangeContent : SingleDisplaySharingSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 64);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  *(void *)(a2 + 64) = v6;
  *(void *)(a2 + 72) = v5;
  return result;
}

uint64_t SingleDisplaySharingSession.sessionDidChangeContent.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t SingleDisplaySharingSession.sessionDidChangeContent.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v1 + 64));
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  return result;
}

uint64_t (*SingleDisplaySharingSession.sessionDidChangeContent.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for SingleDisplaySharingSession.sessionPickerCanceled : SingleDisplaySharingSession@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
}

uint64_t key path setter for SingleDisplaySharingSession.sessionPickerCanceled : SingleDisplaySharingSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 80);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  *(void *)(a2 + 80) = v6;
  *(void *)(a2 + 88) = v5;
  return result;
}

uint64_t SingleDisplaySharingSession.sessionPickerCanceled.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t SingleDisplaySharingSession.sessionPickerCanceled.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v1 + 80));
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v0;
  return result;
}

uint64_t (*SingleDisplaySharingSession.sessionPickerCanceled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SingleDisplaySharingSession.begin(with:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenShareAttributes?);
  MEMORY[0x1F4188790](v0 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v3 = v2 - v1;
  uint64_t v4 = (int *)type metadata accessor for ScreenShareAttributes(0);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v45 - v9;
  id v11 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v11, sel_scale);
  uint64_t v13 = v12;

  uint64_t v14 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  UUID.init()();
  Swift::String v21 = self;
  id v22 = objc_msgSend(v21, sel_defaultCornerRadius);
  uint64_t v23 = v22;
  if (v22)
  {
    objc_msgSend(v22, sel_doubleValue);
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v25 = 0;
  }
  id v26 = objc_msgSend(v21, sel_defaultScaleFactor);
  objc_msgSend(v26, sel_floatValue);
  float v28 = v27;

  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v10, v20, v14);
  *(void *)&v10[v4[5]] = 1;
  *(void *)&v10[v4[6]] = v13;
  uint64_t v29 = &v10[v4[7]];
  *(void *)uint64_t v29 = v25;
  v29[8] = v23 == 0;
  *(double *)&v10[v4[8]] = v28;
  uint64_t v30 = &v10[v4[9]];
  *(_OWORD *)uint64_t v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.screenSharing);
  outlined init with copy of ScreenShareAttributes((uint64_t)v10, (uint64_t)v8);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v50 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v47 = v34 + 4;
    outlined init with copy of ScreenShareAttributes((uint64_t)v8, v3);
    __swift_storeEnumTagSinglePayload(v3, 0, 1, (uint64_t)v4);
    uint64_t v36 = specialized >> prefix<A>(_:)();
    uint64_t v46 = v8;
    uint64_t v37 = v36;
    unint64_t v39 = v38;
    outlined destroy of ScreenShareAttributes?(v3);
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ScreenShareAttributes((uint64_t)v46);
    _os_log_impl(&dword_1C2F90000, v32, v33, "Began single display sharing session with attributes %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v35, -1, -1);
    MEMORY[0x1C87760E0](v34, -1, -1);
  }
  else
  {
    outlined destroy of ScreenShareAttributes((uint64_t)v8);
  }

  uint64_t v40 = *v48;
  if (*v48)
  {
    outlined init with copy of ScreenShareAttributes((uint64_t)v10, v3);
    uint64_t v41 = OUTLINED_FUNCTION_9_44();
    v40(v41);
    outlined destroy of ScreenShareAttributes?(v3);
  }
  uint64_t v42 = v48[2];
  if (v42)
  {
    outlined init with copy of ScreenShareAttributes((uint64_t)v10, v3);
    uint64_t v43 = OUTLINED_FUNCTION_9_44();
    v42(v43);
    outlined destroy of ScreenShareAttributes?(v3);
  }
  return outlined destroy of ScreenShareAttributes((uint64_t)v10);
}

Swift::Void __swiftcall SingleDisplaySharingSession.end()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.screenSharing);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Ending single display sharing session", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  uint64_t v6 = *(void (**)(void))(v1 + 32);
  if (v6) {
    v6();
  }
}

double SingleDisplaySharingSession.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 SingleDisplaySharingSession.init(sessionDidCreateNewSession:sessionDidBegin:sessionDidEnd:sessionDidChangeAttributes:sessionDidChangeContent:sessionPickerCanceled:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11, unint64_t a12)
{
  __n128 result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  a9[5].n128_u64[1] = a12;
  return result;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidCreateNewSession.getter in conformance SingleDisplaySharingSession()
{
  uint64_t v1 = *v0;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v0);
  return v1;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidCreateNewSession.setter in conformance SingleDisplaySharingSession(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*v2);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*protocol witness for ScreenSharingSessionProvider.sessionDidCreateNewSession.modify in conformance SingleDisplaySharingSession())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidBegin.getter in conformance SingleDisplaySharingSession()
{
  uint64_t v1 = *(void *)(v0 + 16);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v1;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidBegin.setter in conformance SingleDisplaySharingSession(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v2 + 16));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*protocol witness for ScreenSharingSessionProvider.sessionDidBegin.modify in conformance SingleDisplaySharingSession())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidEnd.getter in conformance SingleDisplaySharingSession()
{
  uint64_t v1 = *(void *)(v0 + 32);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v1;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidEnd.setter in conformance SingleDisplaySharingSession(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v2 + 32));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*protocol witness for ScreenSharingSessionProvider.sessionDidEnd.modify in conformance SingleDisplaySharingSession())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidChangeAttributes.getter in conformance SingleDisplaySharingSession()
{
  uint64_t v1 = *(void *)(v0 + 48);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v1;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidChangeAttributes.setter in conformance SingleDisplaySharingSession(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v2 + 48));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*protocol witness for ScreenSharingSessionProvider.sessionDidChangeAttributes.modify in conformance SingleDisplaySharingSession())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidChangeContent.getter in conformance SingleDisplaySharingSession()
{
  uint64_t v1 = *(void *)(v0 + 64);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v1;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionDidChangeContent.setter in conformance SingleDisplaySharingSession(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v2 + 64));
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*protocol witness for ScreenSharingSessionProvider.sessionDidChangeContent.modify in conformance SingleDisplaySharingSession())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionPickerCanceled.getter in conformance SingleDisplaySharingSession()
{
  uint64_t v1 = *(void *)(v0 + 80);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v1;
}

uint64_t protocol witness for ScreenSharingSessionProvider.sessionPickerCanceled.setter in conformance SingleDisplaySharingSession(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v2 + 80));
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*protocol witness for ScreenSharingSessionProvider.sessionPickerCanceled.modify in conformance SingleDisplaySharingSession())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t outlined init with copy of ScreenShareAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScreenShareAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ScreenShareAttributes(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScreenShareAttributes(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ScreenShareAttributes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenShareAttributes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScreenShareAttributes(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = *(void **)((char *)a2 + v8);
    if ((unint64_t)v9 >= 3) {
      id v10 = v9;
    }
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    uint64_t v11 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v15 = (_OWORD *)((char *)a1 + v14);
    uint64_t v16 = (_OWORD *)((char *)a2 + v14);
    long long v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
  }
  return a1;
}

void destroy for ScreenShareAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
  if ((unint64_t)v5 >= 3)
  {
  }
}

uint64_t initializeWithCopy for ScreenShareAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  if ((unint64_t)v8 >= 3) {
    id v9 = v8;
  }
  *(void *)(a1 + v7) = v8;
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  long long v16 = v15[1];
  _OWORD *v14 = *v15;
  v14[1] = v16;
  return a1;
}

uint64_t assignWithCopy for ScreenShareAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  id v9 = *(void **)(a2 + v7);
  if ((unint64_t)v8 >= 3)
  {
    if ((unint64_t)v9 >= 3)
    {
      *(void *)(a1 + v7) = v9;
      id v11 = v9;

      goto LABEL_8;
    }

    id v9 = *(void **)(a2 + v7);
    goto LABEL_6;
  }
  if ((unint64_t)v9 < 3)
  {
LABEL_6:
    *(void *)(a1 + v7) = v9;
    goto LABEL_8;
  }
  *(void *)(a1 + v7) = v9;
  id v10 = v9;
LABEL_8:
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  *(unsigned char *)(v13 + 8) = *((unsigned char *)v14 + 8);
  *(void *)uint64_t v13 = v15;
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v16 = a3[9];
  long long v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  *long long v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  v17[3] = v18[3];
  return a1;
}

uint64_t initializeWithTake for ScreenShareAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(void *)uint64_t v10 = *(void *)v11;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v12 = a3[9];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  long long v15 = v14[1];
  _OWORD *v13 = *v14;
  v13[1] = v15;
  return a1;
}

uint64_t assignWithTake for ScreenShareAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  unint64_t v9 = *(void *)(a2 + v7);
  if ((unint64_t)v8 >= 3)
  {
    if (v9 >= 3)
    {
      *(void *)(a1 + v7) = v9;
    }
    else
    {

      *(void *)(a1 + v7) = *(void *)(a2 + v7);
    }
  }
  else
  {
    *(void *)(a1 + v7) = v9;
  }
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  long long v15 = (_OWORD *)(a2 + v13);
  long long v16 = v15[1];
  _OWORD *v14 = *v15;
  v14[1] = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenShareAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31BF778);
}

uint64_t sub_1C31BF778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 3;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ScreenShareAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31BF824);
}

void sub_1C31BF824(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 + 2);
  }
}

uint64_t type metadata completion function for ScreenShareAttributes()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ScreenShareAttributes.Style(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for ScreenShareAttributes.Style(void **a1)
{
  unint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for ScreenShareAttributes.Style(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for ScreenShareAttributes.Style(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenShareAttributes.Style(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScreenShareAttributes.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenShareAttributes.Style()
{
  return &type metadata for ScreenShareAttributes.Style;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScreenSharingSessionConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ScreenSharingSessionConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 1, v2);
  if (!result)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ScreenSharingSessionConfiguration(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for ScreenSharingSessionConfiguration(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for ScreenSharingSessionConfiguration(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for ScreenSharingSessionConfiguration(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingSessionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31C0104);
}

uint64_t sub_1C31C0104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 2) {
    return EnumTagSinglePayload - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScreenSharingSessionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31C0160);
}

uint64_t sub_1C31C0160(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for ScreenSharingSessionConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  return __swift_getEnumTagSinglePayload(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for ScreenSharingSessionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v4);
}

uint64_t type metadata accessor for ScreenSharingSessionConfiguration(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ScreenSharingSessionConfiguration);
}

uint64_t type metadata completion function for ScreenSharingSessionConfiguration()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidCreateNewSession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidCreateNewSession.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidCreateNewSession.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidBegin.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidBegin.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidBegin.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidEnd.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidEnd.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidChangeAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidChangeAttributes.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidChangeAttributes.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidChangeContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidChangeContent.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionDidChangeContent.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionPickerCanceled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionPickerCanceled.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.sessionPickerCanceled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.begin(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.update(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of ScreenSharingSessionProvider.end()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

void *destroy for SingleDisplaySharingSession(void *result)
{
  unint64_t v1 = result;
  if (*result) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[2]) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[4]) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[6]) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[8]) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[10])
  {
    return (void *)swift_release();
  }
  return result;
}

void *initializeWithCopy for SingleDisplaySharingSession(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  uint64_t v7 = a2[4];
  if (v7)
  {
    uint64_t v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  uint64_t v9 = a2[6];
  if (v9)
  {
    uint64_t v10 = a2[7];
    a1[6] = v9;
    a1[7] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  }
  uint64_t v11 = a2[8];
  if (v11)
  {
    uint64_t v12 = a2[9];
    a1[8] = v11;
    a1[9] = v12;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  uint64_t v13 = a2[10];
  if (v13)
  {
    uint64_t v14 = a2[11];
    a1[10] = v13;
    a1[11] = v14;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  }
  return a1;
}

void *assignWithCopy for SingleDisplaySharingSession(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (a1[6])
  {
    if (v13)
    {
      uint64_t v14 = a2[7];
      a1[6] = v13;
      a1[7] = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    uint64_t v15 = a2[7];
    a1[6] = v13;
    a1[7] = v15;
    swift_retain();
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  uint64_t v16 = a2[8];
  if (a1[8])
  {
    if (v16)
    {
      uint64_t v17 = a2[9];
      a1[8] = v16;
      a1[9] = v17;
      swift_retain();
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else if (v16)
  {
    uint64_t v18 = a2[9];
    a1[8] = v16;
    a1[9] = v18;
    swift_retain();
    goto LABEL_36;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_36:
  uint64_t v19 = a2[10];
  if (!a1[10])
  {
    if (v19)
    {
      uint64_t v21 = a2[11];
      a1[10] = v19;
      a1[11] = v21;
      swift_retain();
      return a1;
    }
LABEL_42:
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_42;
  }
  uint64_t v20 = a2[11];
  a1[10] = v19;
  a1[11] = v20;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SingleDisplaySharingSession(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (a1[6])
  {
    if (v13)
    {
      uint64_t v14 = a2[7];
      a1[6] = v13;
      a1[7] = v14;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    uint64_t v15 = a2[7];
    a1[6] = v13;
    a1[7] = v15;
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  uint64_t v16 = a2[8];
  if (a1[8])
  {
    if (v16)
    {
      uint64_t v17 = a2[9];
      a1[8] = v16;
      a1[9] = v17;
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else if (v16)
  {
    uint64_t v18 = a2[9];
    a1[8] = v16;
    a1[9] = v18;
    goto LABEL_36;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_36:
  uint64_t v19 = a2[10];
  if (!a1[10])
  {
    if (v19)
    {
      uint64_t v21 = a2[11];
      a1[10] = v19;
      a1[11] = v21;
      return a1;
    }
LABEL_42:
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_42;
  }
  uint64_t v20 = a2[11];
  a1[10] = v19;
  a1[11] = v20;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleDisplaySharingSession(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 96))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleDisplaySharingSession(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleDisplaySharingSession()
{
  return &type metadata for SingleDisplaySharingSession;
}

uint64_t sub_1C31C0B28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t JoinButtonViewModel.__allocating_init(service:letMeInViewModel:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  JoinButtonViewModel.init(service:letMeInViewModel:)(a1, a2);
  return v4;
}

uint64_t JoinButtonViewModel.init(service:letMeInViewModel:)(long long *a1, uint64_t a2)
{
  *(void *)(v2 + 64) = 0;
  outlined init with take of Notice(a1, v2 + 24);
  *(void *)(v2 + 16) = a2;
  return v2;
}

uint64_t JoinButtonViewModel.controlType.getter()
{
  return JoinButtonViewModel.config.getter();
}

uint64_t JoinButtonViewModel.config.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CallControlTextButtonStyle(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(v1 + 64))
  {
    uint64_t v5 = *(void *)(v1 + 64);
  }
  else
  {
    id v6 = objc_msgSend(self, sel_systemGreenColor);
    uint64_t v7 = MEMORY[0x1C87725F0](v6);
    uint64_t v8 = (uint64_t)v4 + *(int *)(v2 + 20);
    uint64_t v9 = type metadata accessor for ButtonRole();
    __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
    *uint64_t v4 = v7;
    uint64_t v10 = self;
    id v11 = objc_msgSend(v10, sel_conversationKit);
    v24._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_4_6();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0;
    Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v11, v12, v24);

    id v16 = objc_msgSend(v10, sel_conversationKit);
    v25._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_4_6();
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v25._uint64_t countAndFlagsBits = 0;
    Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v16, v17, v25);

    uint64_t v21 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for CallControlsTextButtonConfiguration(0);
    swift_allocObject();
    uint64_t v5 = CallControlsTextButtonConfiguration.init(buttonStyle:text:accessibilityLabel:accessibilityIdentifier:enabled:didTap:)((uint64_t)v4, v15._countAndFlagsBits, (uint64_t)v15._object, v20._countAndFlagsBits, (uint64_t)v20._object, 0x747475426E696F6ALL, 0xEA00000000006E6FLL, 1, (uint64_t)partial apply for closure #1 in JoinButtonViewModel.config.getter, v21);
    *(void *)(v1 + 64) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v5;
}

uint64_t JoinButtonViewModel.enabled(for:)(unint64_t a1, uint64_t a2)
{
  LOBYTE(v3) = 0;
  switch(BYTE4(a1) >> 5)
  {
    case 1:
      uint64_t v3 = HIDWORD(a1) & 1;
      break;
    case 2:
      LOBYTE(v3) = (a1 & 0x100000000) == 0;
      break;
    case 3:
      if (BYTE4(a1) == 96 && a2 == 3)
      {
        uint64_t v5 = *(void *)(v2 + 16);
        swift_beginAccess();
        LOBYTE(v3) = *(unsigned char *)(v5 + 16) ^ 1;
      }
      else
      {
        LOBYTE(v3) = 0;
      }
      break;
    default:
      return v3 & 1;
  }
  return v3 & 1;
}

Swift::Void __swiftcall JoinButtonViewModel.didTap()()
{
  LetMeInCountdownViewModel.resetCountdown()();
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v2, v1);
}

Swift::Void __swiftcall JoinButtonViewModel.onAppearance()()
{
  __swift_project_boxed_opaque_existential_1(v0 + 3, v0[6]);
  uint64_t v1 = OUTLINED_FUNCTION_3_24();
  if (v2(v1) == 96)
  {
    __swift_project_boxed_opaque_existential_1(v0 + 3, v0[6]);
    uint64_t v3 = OUTLINED_FUNCTION_3_24();
    if (v4(v3) == 3)
    {
      uint64_t v6 = v0[6];
      uint64_t v5 = v0[7];
      __swift_project_boxed_opaque_existential_1(v0 + 3, v6);
      (*(void (**)(uint64_t, uint64_t))(v5 + 160))(v6, v5);
    }
  }
}

uint64_t key path setter for JoinButtonViewModel.config : JoinButtonViewModel()
{
  uint64_t v0 = swift_retain();
  return JoinButtonViewModel.config.setter(v0);
}

uint64_t JoinButtonViewModel.config.setter(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t sub_1C31C10B0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in JoinButtonViewModel.config.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    JoinButtonViewModel.didTap()();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in JoinButtonViewModel.config.getter()
{
  return closure #1 in JoinButtonViewModel.config.getter();
}

uint64_t JoinButtonViewModel.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  return v0;
}

uint64_t JoinButtonViewModel.__deallocating_deinit()
{
  JoinButtonViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CallControlsInCallButtonViewModel.enabled(for:) in conformance JoinButtonViewModel(uint64_t a1, uint64_t a2)
{
  return JoinButtonViewModel.enabled(for:)(a1 & 0xFFFFFFFFFFLL, a2) & 1;
}

uint64_t protocol witness for CallControlsButtonViewModel.controlType.getter in conformance JoinButtonViewModel()
{
  return JoinButtonViewModel.controlType.getter();
}

uint64_t sub_1C31C1208@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = JoinButtonViewModel.config.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for JoinButtonViewModel()
{
  return self;
}

uint64_t method lookup function for JoinButtonViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JoinButtonViewModel);
}

uint64_t dispatch thunk of JoinButtonViewModel.__allocating_init(service:letMeInViewModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t key path getter for CameraViewController.cameraDelegate : CameraViewController@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for CameraViewController.cameraDelegate : CameraViewController(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CameraViewController.cameraDelegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t CameraViewController.cameraDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CameraViewController.cameraDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

void CameraViewController.effectBrowserViewController(_:didSelectAppWith:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = String.init<A>(reflecting:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  *(void *)(v9 + 56) = v10;
  *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v14 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v14 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      Swift::String v15 = &v3[OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate];
      swift_beginAccess();
      if (MEMORY[0x1C8776240](v15))
      {
        uint64_t v16 = *((void *)v15 + 1);
        uint64_t v17 = swift_getObjectType();
        (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 8))(a2, a3, v17, v16);
        swift_unknownObjectRelease();
      }
    }
    Swift::String v18 = (void *)MEMORY[0x1C87730B0](a2, a3);
  }
  else
  {
    Swift::String v18 = 0;
  }
  v19.receiver = v4;
  v19.super_class = ObjectType;
  objc_msgSendSuper2(&v19, sel_effectBrowserViewController_didSelectAppWithIdentifier_, a1, v18);
}

uint64_t CameraViewController.effectBrowserViewController(_:didSelect:)(uint64_t a1, uint64_t a2)
{
  v9.receiver = v2;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_effectBrowserViewController_didSelectEffect_, a1, a2);
  uint64_t v5 = &v2[OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate];
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v5);
  if (result)
  {
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

id CameraViewController.__allocating_init(captureMode:devicePosition:flashMode:aspectRatioCrop:)()
{
  id v0 = objc_allocWithZone((Class)OUTLINED_FUNCTION_4_4());
  OUTLINED_FUNCTION_1_80();
  return [v1 v2];
}

id CameraViewController.init(captureMode:devicePosition:flashMode:aspectRatioCrop:)()
{
  OUTLINED_FUNCTION_4_4();
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit20CameraViewController_cameraDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  OUTLINED_FUNCTION_1_80();
  return objc_msgSendSuper2(v2, v3, v0, ObjectType);
}

id CameraViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of CameraViewControllerDelegate.didSelectApp(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CameraViewControllerDelegate.didSelectEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for CameraViewController()
{
  return self;
}

BOOL static MovingToScreeningStateService.Error.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MovingToScreeningStateService.Error.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int MovingToScreeningStateService.Error.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MovingToScreeningStateService.Error(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MovingToScreeningStateService.Error.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MovingToScreeningStateService.Error()
{
  return MovingToScreeningStateService.Error.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MovingToScreeningStateService.Error(uint64_t a1)
{
  MovingToScreeningStateService.Error.hash(into:)(a1, *v1);
}

uint64_t MovingToScreeningStateService.OnCreationResult.provider.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t MovingToScreeningStateService.OnCreationResult.callUUID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t MovingToScreeningStateService.logger.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t MovingToScreeningStateService.getStreamToken.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MovingToScreeningStateService() + 20));
  swift_retain();
  return v1;
}

uint64_t type metadata accessor for MovingToScreeningStateService()
{
  uint64_t result = type metadata singleton initialization cache for MovingToScreeningStateService;
  if (!type metadata singleton initialization cache for MovingToScreeningStateService) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MovingToScreeningStateService.onProviderCreation.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MovingToScreeningStateService() + 24));
  swift_retain();
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MovingToScreeningStateService.startScreening(callUUID:)(Swift::String callUUID)
{
  object = callUUID._object;
  uint64_t countAndFlagsBits = callUUID._countAndFlagsBits;
  type metadata accessor for MovingToScreeningStateService();
  OUTLINED_FUNCTION_1_6();
  uint64_t v58 = v5;
  MEMORY[0x1F4188790](v6);
  uint64_t v59 = v7;
  uint64_t v61 = (uint64_t)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  os_log_type_t v60 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  unint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v57 = (char *)&v53 - v14;
  __n128 v16 = MEMORY[0x1F4188790](v15);
  Swift::String v18 = (char *)&v53 - v17;
  uint64_t v19 = *(int *)(v1 + 28);
  uint64_t v64 = v2;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void *, __n128))(v2 + v19))(countAndFlagsBits, object, v16);
  uint64_t v62 = type metadata accessor for Defaults();
  swift_allocObject();
  Defaults.init()();
  OUTLINED_FUNCTION_2_10();
  char v22 = (*(uint64_t (**)(void))(v21 + 792))();
  swift_release();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  if ((v22 & 1) == 0 && !v20)
  {
    uint64_t v24 = v63;
    v23(v12, v64, v63);
    swift_bridgeObjectRetain_n();
    Swift::String v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      float v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)float v27 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v25, v26, "Recieved 0 stream token for call: %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v63);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
    }
    char v33 = 0;
    goto LABEL_9;
  }
  uint64_t v56 = v20;
  uint64_t v28 = v63;
  uint64_t v54 = v23;
  v23(v18, v64, v63);
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v55 = countAndFlagsBits;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    uint64_t v66 = v53;
    *(_DWORD *)uint64_t v32 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2050;
    uint64_t v65 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v29, v30, "Connecting call %{public}s to captionsClient with token %{public}ld", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    uint64_t v28 = v63;
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v28);
  swift_allocObject();
  Defaults.init()();
  OUTLINED_FUNCTION_2_10();
  char v36 = (*(uint64_t (**)(void))(v35 + 792))();
  swift_release();
  if (v36)
  {
    type metadata accessor for MockCaptionsProvider();
    swift_allocObject();
    uint64_t v37 = MockCaptionsProvider.init()();
    unint64_t v38 = &protocol witness table for MockCaptionsProvider;
  }
  else
  {
    uint64_t v39 = (uint64_t)v57;
    v54(v57, v64, v28);
    id v40 = objc_allocWithZone((Class)type metadata accessor for CaptionsClientParticipantCaptionsProvider());
    id v41 = CaptionsClientParticipantCaptionsProvider.init(logger:token:usage:)(v39, v56, 2);
    if (!v41)
    {
      char v33 = 1;
LABEL_9:
      lazy protocol witness table accessor for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error();
      swift_allocError();
      *uint64_t v34 = v33;
      swift_willThrow();
      return;
    }
    uint64_t v37 = (uint64_t)v41;
    unint64_t v38 = &protocol witness table for CaptionsClientParticipantCaptionsProvider;
  }
  uint64_t v63 = (uint64_t)v38;
  uint64_t v42 = (uint64_t)v60;
  static TaskPriority.userInitiated.getter();
  uint64_t v43 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v42, 0, 1, v43);
  uint64_t v44 = v61;
  outlined init with copy of MovingToScreeningStateService(v64, v61);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v45 = static MainActor.shared.getter();
  unint64_t v46 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  unint64_t v47 = (v59 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = swift_allocObject();
  uint64_t v49 = MEMORY[0x1E4FBCFD8];
  *(void *)(v48 + 16) = v45;
  *(void *)(v48 + 24) = v49;
  outlined init with take of MovingToScreeningStateService(v44, v48 + v46);
  uint64_t v50 = (uint64_t *)(v48 + v47);
  uint64_t v51 = v63;
  *uint64_t v50 = v37;
  v50[1] = v51;
  uint64_t v52 = (uint64_t *)(v48 + ((v47 + 23) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v52 = v55;
  v52[1] = (uint64_t)object;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  swift_unknownObjectRelease();
}

uint64_t closure #2 in MovingToScreeningStateService.startScreening(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for MainActor();
  swift_unknownObjectRetain();
  v8[7] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[8] = v10;
  v8[9] = v9;
  return MEMORY[0x1F4188298](closure #2 in MovingToScreeningStateService.startScreening(callUUID:), v10, v9);
}

uint64_t closure #2 in MovingToScreeningStateService.startScreening(callUUID:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for MovingToScreeningStateService() + 24));
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*v2 + *(int *)*v2);
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  void *v3 = v0;
  v3[1] = closure #2 in MovingToScreeningStateService.startScreening(callUUID:);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  return v9(v7, v6, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return MEMORY[0x1F4188298](closure #2 in MovingToScreeningStateService.startScreening(callUUID:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t MovingToScreeningStateService.init(logger:getStreamToken:onProviderCreation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(a6, a1);
  uint64_t result = type metadata accessor for MovingToScreeningStateService();
  uint64_t v14 = (void *)(a6 + *(int *)(result + 20));
  void *v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a6 + *(int *)(result + 24));
  *uint64_t v15 = a4;
  v15[1] = a5;
  return result;
}

unint64_t lazy protocol witness table accessor for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error;
  if (!lazy protocol witness table cache variable for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error;
  if (!lazy protocol witness table cache variable for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MovingToScreeningStateService.Error and conformance MovingToScreeningStateService.Error);
  }
  return result;
}

uint64_t outlined init with copy of MovingToScreeningStateService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MovingToScreeningStateService();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C31C2798()
{
  type metadata accessor for MovingToScreeningStateService();
  OUTLINED_FUNCTION_1_6();
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(unint64_t))(v3 + 8))(v0 + v2);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of MovingToScreeningStateService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MovingToScreeningStateService();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in MovingToScreeningStateService.startScreening(callUUID:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MovingToScreeningStateService() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = (uint64_t *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #2 in MovingToScreeningStateService.startScreening(callUUID:)(a1, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t *initializeBufferWithCopyOfBuffer for MovingToScreeningStateService(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)v4 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for MovingToScreeningStateService(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MovingToScreeningStateService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MovingToScreeningStateService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MovingToScreeningStateService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for MovingToScreeningStateService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MovingToScreeningStateService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31C2EA8);
}

uint64_t sub_1C31C2EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MovingToScreeningStateService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31C2F48);
}

void sub_1C31C2F48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MovingToScreeningStateService()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MovingToScreeningStateService.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31C3138);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MovingToScreeningStateService.Error()
{
  return &type metadata for MovingToScreeningStateService.Error;
}

uint64_t destroy for MovingToScreeningStateService.OnCreationResult()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MovingToScreeningStateService.OnCreationResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MovingToScreeningStateService.OnCreationResult(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MovingToScreeningStateService.OnCreationResult(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MovingToScreeningStateService.OnCreationResult()
{
  return &type metadata for MovingToScreeningStateService.OnCreationResult;
}

uint64_t key path getter for InsulatingView.content : <A>InsulatingView<A>@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InsulatingView.content : <A>InsulatingView<A>(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70))(*a1);
}

id InsulatingView.content.getter()
{
  OUTLINED_FUNCTION_5_4();
  unint64_t v1 = *v0;
  return v1;
}

void InsulatingView.content.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v1;
  void *v1 = a1;
}

uint64_t (*InsulatingView.content.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for InsulatingView.forwardHits : <A>InsulatingView<A>@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x80))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for InsulatingView.forwardHits : <A>InsulatingView<A>(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x88))(*a1);
}

uint64_t InsulatingView.forwardHits.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t InsulatingView.forwardHits.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  unsigned char *v1 = a1;
  return result;
}

uint64_t (*InsulatingView.forwardHits.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id InsulatingView.__allocating_init(frame:content:forwardHits:)(void *a1)
{
  OUTLINED_FUNCTION_7();
  id v3 = objc_allocWithZone(v1);
  OUTLINED_FUNCTION_6_2();
  return InsulatingView.init(frame:content:forwardHits:)(a1);
}

id InsulatingView.init(frame:content:forwardHits:)(void *a1)
{
  OUTLINED_FUNCTION_7();
  *(void *)(v1 + direct field offset for InsulatingView.content) = v3;
  *(unsigned char *)(v1 + direct field offset for InsulatingView.forwardHits) = v4;
  uint64_t v15 = type metadata accessor for InsulatingView();
  id v5 = a1;
  double v6 = OUTLINED_FUNCTION_6_2();
  id v9 = objc_msgSendSuper2(v7, v8, v6, v1, v15);
  id v10 = v5;
  id v11 = v9;
  objc_msgSend(v11, sel_bounds);
  objc_msgSend(v10, sel_setBounds_);

  id v12 = v10;
  objc_msgSend(v11, sel_center);
  objc_msgSend(v12, sel_setCenter_);

  objc_msgSend(v12, sel_setAutoresizingMask_, 18);
  objc_msgSend(v12, sel__setHostsLayoutEngine_, 1);
  objc_msgSend(v11, sel_addSubview_, v12);
  objc_msgSend(v12, sel_setNeedsLayout);
  objc_msgSend(v12, sel_layoutIfNeeded);
  id v13 = v11;
  objc_msgSend(v13, sel_setAutoresizingMask_, 18);

  return v13;
}

uint64_t type metadata accessor for InsulatingView()
{
  return __swift_instantiateGenericMetadata();
}

id InsulatingView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InsulatingView.init(coder:)()
{
}

void @objc InsulatingView.init(coder:)()
{
}

void __swiftcall InsulatingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  OUTLINED_FUNCTION_5_13();
  if ((*(uint64_t (**)(void))(v7 + 128))())
  {
    OUTLINED_FUNCTION_5_13();
    id v9 = *(uint64_t (**)(void))(v8 + 104);
    id v10 = (void *)v9();
    objc_msgSend(v3, sel_convertPoint_toCoordinateSpace_, v10, x, y);
    double v12 = v11;
    double v14 = v13;

    uint64_t v15 = (void *)v9();
    objc_msgSend(v15, sel_hitTest_withEvent_, isa, v12, v14);
  }
}

id @objc InsulatingView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  InsulatingView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  double v13 = v12;

  return v13;
}

id InsulatingView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void InsulatingView.init(frame:)()
{
}

void @objc InsulatingView.init(frame:)()
{
}

id InsulatingView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InsulatingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc InsulatingView.__ivar_destroyer(uint64_t a1)
{
}

void *sub_1C31C3AD8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for InsulatingView()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for InsulatingView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InsulatingView);
}

uint64_t dispatch thunk of InsulatingView.content.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of InsulatingView.content.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InsulatingView.content.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of InsulatingView.forwardHits.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of InsulatingView.forwardHits.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of InsulatingView.forwardHits.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of InsulatingView.__allocating_init(frame:content:forwardHits:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t ScreenSharingBroadcasterToolbar.toolbarPlacement.getter(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter();
  uint64_t v5 = v4;
  outlined consume of Environment<CGFloat>.Content(a1, v3);
  return v5;
}

uint64_t ScreenSharingBroadcasterToolbar.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  a2 &= 1u;
  *(unsigned char *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = a3;
  char v11 = a4 & 1;
  *(unsigned char *)(v10 + 40) = a4 & 1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(unsigned char *)(v12 + 24) = a2;
  *(void *)(v12 + 32) = a3;
  *(unsigned char *)(v12 + 40) = v11;
  *(void *)a5 = swift_getKeyPath();
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = partial apply for closure #1 in ScreenSharingBroadcasterToolbar.body.getter;
  *(void *)(a5 + 24) = v10;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(void *)(a5 + 64) = partial apply for closure #2 in ScreenSharingBroadcasterToolbar.body.getter;
  *(void *)(a5 + 72) = v12;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2);
  swift_retain();
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2);
  return swift_retain();
}

uint64_t closure #1 in ScreenSharingBroadcasterToolbar.body.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v3 = v2;
  uint64_t v4 = swift_release();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 248))(v4);
  uint64_t v7 = v6;
  swift_release();
  uint64_t v8 = (uint64_t *)((char *)a1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>)
                          + 40));
  *uint64_t v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a1 = v5;
  a1[1] = v7;
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingBroadcasterToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingBroadcasterToolbar.body.getter((uint64_t (*)(void))closure #1 in ScreenSharingBroadcasterToolbar.body.getter);
}

uint64_t closure #2 in ScreenSharingBroadcasterToolbar.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v13 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  a2 &= 1u;
  *(unsigned char *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(unsigned char *)(v16 + 40) = a4 & 1;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, Image>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, Image>);
  Button.init(action:label:)();
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2);
  specialized Environment.wrappedValue.getter();
  outlined consume of Environment<CGFloat>.Content(a1, a2);
  int v17 = Axis.rawValue.getter();
  __int16 v22 = v17 != Axis.rawValue.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Label<Text, Image>> and conformance Button<A>, &demangling cache variable for type metadata for Button<Label<Text, Image>>);
  lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v21, v15, v20);
}

uint64_t partial apply for closure #2 in ScreenSharingBroadcasterToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingBroadcasterToolbar.body.getter((uint64_t (*)(void))closure #2 in ScreenSharingBroadcasterToolbar.body.getter);
}

uint64_t partial apply for closure #1 in ScreenSharingBroadcasterToolbar.body.getter(uint64_t (*a1)(void))
{
  return a1(*(void *)(v1 + 16));
}

uint64_t closure #1 in closure #2 in ScreenSharingBroadcasterToolbar.body.getter()
{
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v1 = v0;
  uint64_t v2 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 232))(v2);
  return swift_release();
}

uint64_t closure #2 in closure #2 in ScreenSharingBroadcasterToolbar.body.getter()
{
  return Label.init(title:icon:)();
}

uint64_t closure #1 in closure #2 in closure #2 in ScreenSharingBroadcasterToolbar.body.getter@<X0>(uint64_t a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_conversationKit);
  v10._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001C379FD40;
  v3._uint64_t countAndFlagsBits = 0xD000000000000013;
  v4.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v4.value._object = (void *)0xEF74694B6E6F6974;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v10);

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8 & 1;
  *(void *)(a1 + 24) = v9;
  return result;
}

uint64_t closure #2 in closure #2 in closure #2 in ScreenSharingBroadcasterToolbar.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t ScreenSharingBroadcasterToolbar.init()()
{
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for ScreenSharingBroadcasterViewModel();
  lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel((unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingBroadcasterViewModel);
  Environment.init<A>(_:)();
  return KeyPath;
}

uint64_t default argument 0 of ScreenSharingBroadcasterToolbar.init(toolbarPlacement:)()
{
  return swift_getKeyPath();
}

uint64_t ScreenSharingBroadcasterToolbar.init(toolbarPlacement:)(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for View.body.getter in conformance ScreenSharingBroadcasterToolbar@<X0>(uint64_t a1@<X8>)
{
  return ScreenSharingBroadcasterToolbar.body.getter(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t ScreenSharingBroadcasterView.model.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for ScreenSharingBroadcasterView.model : ScreenSharingBroadcasterView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScreenSharingBroadcasterView.model.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for ScreenSharingBroadcasterView.model : ScreenSharingBroadcasterView()
{
  swift_retain();
  return ScreenSharingBroadcasterView.model.setter();
}

uint64_t ScreenSharingBroadcasterView.model.setter()
{
  return State.wrappedValue.setter();
}

void (*ScreenSharingBroadcasterView.model.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  *uint64_t v6 = a2;
  v6[1] = a3;
  swift_retain();
  swift_retain();
  v6[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  State.wrappedValue.getter();
  return DropdownMenuButton.viewModel.modify;
}

uint64_t ScreenSharingBroadcasterView.$model.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  State.projectedValue.getter();
  return v1;
}

uint64_t ScreenSharingBroadcasterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = a3;
  Swift::String v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.environment<A>(_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v48 = v9;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v46 = v11;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>)
      - 8;
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_2_3();
  uint64_t v45 = v12;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>)
      - 8;
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_2_3();
  uint64_t v49 = v13;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_2_3();
  uint64_t v51 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v55 = v17;
  uint64_t v56 = v16;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_2_3();
  uint64_t v54 = v18;
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  uint64_t v19 = State.wrappedValue.getter();
  char v20 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 256))(v19);
  swift_release();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  *(void *)char v8 = swift_getKeyPath();
  v8[8] = 0;
  uint64_t v24 = (uint64_t *)&v8[v5[17]];
  *uint64_t v24 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  swift_storeEnumTagMultiPayload();
  v8[v5[18]] = (v20 & 1) == 0;
  Swift::String v25 = (double (**)@<D0>(uint64_t@<X8>))&v8[v5[19]];
  *Swift::String v25 = partial apply for closure #1 in ScreenSharingBroadcasterView.body.getter;
  v25[1] = (double (*)@<D0>(uint64_t@<X8>))v21;
  os_log_type_t v26 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v8[v5[20]];
  *os_log_type_t v26 = partial apply for closure #2 in ScreenSharingBroadcasterView.body.getter;
  v26[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v22;
  float v27 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v8[v5[21]];
  *float v27 = partial apply for closure #3 in ScreenSharingBroadcasterView.body.getter;
  v27[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v23;
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  swift_retain_n();
  swift_retain_n();
  State.wrappedValue.getter();
  type metadata accessor for ScreenSharingBroadcasterViewModel();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?> and conformance ScreenSharingContentView<A, B, C>, &demangling cache variable for type metadata for ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?>);
  lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel((unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingBroadcasterViewModel);
  uint64_t v28 = v46;
  View.environment<A>(_:)();
  swift_release();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?>);
  uint64_t v29 = v48;
  uint64_t v30 = v45;
  uint64_t v31 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v45, v28, v50);
  uint64_t v32 = (uint64_t (**)())(v30 + *(int *)(v47 + 44));
  *uint64_t v32 = closure #4 in ScreenSharingBroadcasterView.body.getter;
  v32[1] = 0;
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v31);
  uint64_t v33 = static Animation.default.getter();
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v34 = State.wrappedValue.getter();
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 256))(v34);
  swift_release();
  uint64_t v35 = v49;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v30, v49, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>);
  uint64_t v36 = v35 + *(int *)(v52 + 44);
  *(void *)uint64_t v36 = v33;
  *(unsigned char *)(v36 + 8) = v21 & 1;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v30, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>);
  uint64_t v37 = static SafeAreaRegions.keyboard.getter();
  LOBYTE(v29) = static Edge.Set.all.getter();
  uint64_t v38 = v51;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v35, v51, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>);
  uint64_t v39 = v38 + *(int *)(v53 + 36);
  *(void *)uint64_t v39 = v37;
  *(unsigned char *)(v39 + 8) = v29;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v35, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>);
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  State.projectedValue.getter();
  uint64_t v40 = v60;
  uint64_t v41 = v61;
  uint64_t v42 = v62;
  swift_getKeyPath();
  uint64_t v60 = v40;
  uint64_t v61 = v41;
  uint64_t v62 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<ScreenSharingBroadcasterViewModel>);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlOnboardingView??);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type RemoteControlOnboardingView?? and conformance <A> A?();
  uint64_t v43 = v54;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v57, v43, v56);
}

double closure #1 in ScreenSharingBroadcasterView.body.getter@<D0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  uint64_t v2 = State.wrappedValue.getter();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 264))(v2);
  swift_release();
  if (one-time initialization token for forCurrentDisplay != -1) {
    swift_once();
  }
  char v4 = xmmword_1EA37E020;
  double result = *((double *)&xmmword_1EA37E020 + 1);
  *(void *)a1 = v3;
  long long v6 = *(_OWORD *)algn_1EA37E010;
  *(_OWORD *)(a1 + 8) = static BezelMetrics.forCurrentDisplay;
  *(_OWORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 40) = v4;
  *(double *)(a1 + 48) = result;
  return result;
}

double partial apply for closure #1 in ScreenSharingBroadcasterView.body.getter@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in ScreenSharingBroadcasterView.body.getter(a1);
}

uint64_t closure #2 in ScreenSharingBroadcasterView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  uint64_t v2 = State.wrappedValue.getter();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 248))(v2);
  uint64_t v5 = v4;
  swift_release();
  long long v6 = (uint64_t *)((char *)a1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>)
                          + 40));
  *long long v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t partial apply for closure #2 in ScreenSharingBroadcasterView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in ScreenSharingBroadcasterView.body.getter(a1);
}

uint64_t closure #3 in ScreenSharingBroadcasterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ScreenSharingBroadcasterViewModel>);
  uint64_t v2 = State.wrappedValue.getter();
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 256))(v2);
  swift_release();
  if (v3)
  {
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for ScreenSharingBroadcasterViewModel();
    lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel((unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingBroadcasterViewModel);
    uint64_t result = Environment.init<A>(_:)();
    char v7 = v6 & 1;
    long long v8 = (unint64_t)KeyPath;
  }
  else
  {
    uint64_t result = 0;
    char v7 = 0;
    long long v8 = xmmword_1C37748B0;
  }
  *(_OWORD *)a1 = v8;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = v7;
  return result;
}

uint64_t partial apply for closure #3 in ScreenSharingBroadcasterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in ScreenSharingBroadcasterView.body.getter(a1);
}

uint64_t closure #4 in ScreenSharingBroadcasterView.body.getter()
{
  return Transaction.animationReason.setter();
}

uint64_t key path getter for ScreenSharingBroadcasterViewModel.isPresentingOnboardingView : ScreenSharingBroadcasterViewModel()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 192))();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingBroadcasterViewModel.isPresentingOnboardingView : ScreenSharingBroadcasterViewModel(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_6_60(a1);
  return (*(uint64_t (**)(uint64_t))(v2 + 200))(v1);
}

uint64_t closure #5 in ScreenSharingBroadcasterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v43 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for RemoteControlOnboardingView();
  MEMORY[0x1F4188790](v4);
  uint64_t v42 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v41 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlOnboardingView?);
  MEMORY[0x1F4188790](v45);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Participant();
  uint64_t v44 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = objc_msgSend(self, sel_sharedInstance);
  id v20 = objc_msgSend(v19, sel_frontmostAudioOrVideoCall);

  if (!v20) {
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v45);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingInteractionController.shared)
                                                         + 0x178))(&v46);
  unint64_t v21 = v46;
  uint64_t v40 = v4;
  if (v46 >> 61)
  {
    uint64_t v24 = 1;
  }
  else
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant, Bool));
    uint64_t v23 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v15, v23 + *(int *)(v22 + 48), v16);
    uint64_t v24 = 0;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v15, v24, 1, v16);
  outlined consume of RemoteControlState(v21);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16) == 1)
  {

    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Participant?);
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v45);
  }
  uint64_t v39 = a1;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v18, v15, v16);
  type metadata accessor for ConversationControlsManager(0);
  id v26 = v20;
  float v27 = ConversationControlsManager.__allocating_init(activeCall:)();
  uint64_t v28 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v27) + 0x908))();
  MEMORY[0x1F4188790](v28);
  *(&v38 - 2) = (uint64_t)v18;
  specialized _ArrayProtocol.filter(_:)();
  specialized Collection.first.getter(v29, (uint64_t)v8);
  swift_bridgeObjectRelease();

  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
    uint64_t v30 = 1;
    uint64_t v31 = v39;
    uint64_t v32 = v40;
  }
  else
  {
    uint64_t v33 = v41;
    _s15ConversationKit11ParticipantVWObTm_1((uint64_t)v8, v41, (void (*)(void))type metadata accessor for Participant);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v35 = (uint64_t)v43;
    *uint64_t v43 = KeyPath;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = v42;
    _s15ConversationKit11ParticipantVWObTm_1(v33, v42, (void (*)(void))type metadata accessor for Participant);
    uint64_t v32 = v40;
    uint64_t v37 = (uint64_t *)(v36 + *(int *)(v40 + 20));
    *uint64_t v37 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
    swift_storeEnumTagMultiPayload();
    outlined init with take of Any?(v35, v36 + *(int *)(v32 + 24), &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    _s15ConversationKit11ParticipantVWObTm_1(v36, (uint64_t)v12, (void (*)(void))type metadata accessor for RemoteControlOnboardingView);
    uint64_t v30 = 0;
    uint64_t v31 = v39;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v12, v30, 1, v32);
  outlined init with take of Any?((uint64_t)v12, v31, &demangling cache variable for type metadata for RemoteControlOnboardingView?);
  __swift_storeEnumTagSinglePayload(v31, 0, 1, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v18, v16);
}

uint64_t closure #1 in closure #5 in ScreenSharingBroadcasterView.body.getter(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + *(int *)(type metadata accessor for Participant(0) + 28));
  if (v1)
  {
    uint64_t v2 = outlined bridged method (ob) of @objc TUHandle.normalizedValue.getter(v1);
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = Participant.handle.getter();
  if (v4)
  {
    if (v2 == v5 && v4 == v6) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t ScreenSharingBroadcasterView.init(model:)()
{
  type metadata accessor for ScreenSharingBroadcasterViewModel();
  State.init(wrappedValue:)();
  return v1;
}

uint64_t protocol witness for View.body.getter in conformance ScreenSharingBroadcasterView@<X0>(uint64_t a1@<X8>)
{
  return ScreenSharingBroadcasterView.body.getter(*v1, v1[1], a1);
}

void *ScreenSharingBroadcasterViewController.bannerPresentationManager.getter()
{
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit38ScreenSharingBroadcasterViewController_bannerPresentationManager);
  id v2 = v1;
  return v1;
}

id ScreenSharingBroadcasterViewController.__allocating_init(bannerPresentationManager:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ScreenSharingBroadcasterViewController.init(bannerPresentationManager:)(a1);
}

id ScreenSharingBroadcasterViewController.init(bannerPresentationManager:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit38ScreenSharingBroadcasterViewController_bannerPresentationManager] = a1;
  uint64_t v3 = one-time initialization token for shared;
  id v4 = a1;
  uint64_t v5 = v1;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v6 = static ScreenSharingInteractionController.shared;
  type metadata accessor for ScreenSharingBroadcasterViewModel();
  swift_allocObject();
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit38ScreenSharingBroadcasterViewController_model] = ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(v6, a1);

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for ScreenSharingBroadcasterViewController();
  id v7 = objc_msgSendSuper2(&v9, sel_initWithNibName_bundle_, 0, 0);

  return v7;
}

id ScreenSharingBroadcasterViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ScreenSharingBroadcasterViewController.init(coder:)()
{
}

Swift::Void __swiftcall ScreenSharingBroadcasterViewController.loadView()()
{
  uint64_t v1 = v0;
  v48.receiver = v0;
  v48.super_class = (Class)type metadata accessor for ScreenSharingBroadcasterViewController();
  objc_msgSendSuper2(&v48, sel_loadView);
  objc_msgSend(v0, sel_setOverrideUserInterfaceStyle_, 2);
  id v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v3 = v2;
  id v4 = self;
  id v5 = objc_msgSend(v4, sel_clearColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v5);

  type metadata accessor for ScreenSharingBroadcasterViewModel();
  swift_retain();
  State.init(wrappedValue:)();
  id v6 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockScreenHostingController<ScreenSharingBroadcasterView>));
  id v7 = (void *)UIHostingController.init(rootView:)();
  id v8 = objc_msgSend(v7, sel_view);
  if (!v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_super v9 = v8;
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v10 = OUTLINED_FUNCTION_8_6();
  if (!v10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v11 = v10;
  id v12 = objc_msgSend(v4, sel_clearColor);
  objc_msgSend(v11, sel_setBackgroundColor_, v12);

  id v13 = OUTLINED_FUNCTION_6_10();
  if (!v13)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = v13;
  id v15 = OUTLINED_FUNCTION_8_6();
  if (!v15)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  objc_msgSend(v14, sel_addSubview_, v15);

  objc_msgSend(v1, sel_addChildViewController_, v7);
  objc_msgSend(v7, sel_didMoveToParentViewController_, v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C3769580;
  id v18 = OUTLINED_FUNCTION_8_6();
  if (!v18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v19 = v18;
  id v20 = objc_msgSend(v18, sel_leadingAnchor);

  id v21 = OUTLINED_FUNCTION_6_10();
  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v22 = v21;
  id v23 = objc_msgSend(v21, sel_leadingAnchor);

  id v24 = OUTLINED_FUNCTION_3_76();
  *(void *)(v17 + 32) = v24;
  id v25 = OUTLINED_FUNCTION_8_6();
  if (!v25)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v26 = v25;
  id v27 = objc_msgSend(v25, sel_trailingAnchor);

  id v28 = OUTLINED_FUNCTION_6_10();
  if (!v28)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v29 = v28;
  id v30 = objc_msgSend(v28, sel_trailingAnchor);

  id v31 = OUTLINED_FUNCTION_3_76();
  *(void *)(v17 + 40) = v31;
  id v32 = OUTLINED_FUNCTION_8_6();
  if (!v32)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v33 = v32;
  id v34 = objc_msgSend(v32, sel_topAnchor);

  id v35 = OUTLINED_FUNCTION_6_10();
  if (!v35)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v36 = v35;
  id v37 = objc_msgSend(v35, sel_topAnchor);

  id v38 = OUTLINED_FUNCTION_3_76();
  *(void *)(v17 + 48) = v38;
  id v39 = OUTLINED_FUNCTION_8_6();
  if (!v39)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v40 = v39;
  id v41 = objc_msgSend(v39, sel_bottomAnchor);

  id v42 = OUTLINED_FUNCTION_6_10();
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = self;
    id v45 = objc_msgSend(v43, sel_bottomAnchor);

    id v46 = OUTLINED_FUNCTION_3_76();
    *(void *)(v17 + 56) = v46;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v44, sel_activateConstraints_, isa);

    return;
  }
LABEL_27:
  __break(1u);
}

id ScreenSharingBroadcasterViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void ScreenSharingBroadcasterViewController.init(nibName:bundle:)()
{
}

uint64_t ScreenSharingBroadcasterViewController.__ivar_destroyer()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKit38ScreenSharingBroadcasterViewController_bannerPresentationManager));
  return swift_release();
}

id ScreenSharingBroadcasterViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScreenSharingBroadcasterViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C31C61E0()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 192))();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_1C31C6224(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_6_60(a1);
  return (*(uint64_t (**)(uint64_t))(v2 + 200))(v1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?>);
    type metadata accessor for ScreenSharingBroadcasterViewModel();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?> and conformance ScreenSharingContentView<A, B, C>, &demangling cache variable for type metadata for ScreenSharingContentView<ModifiedContent<SystemRootLayerProxy, BezelEffectModifier>, TransitioningText<FadeOutFadeInTransition>, ScreenSharingBroadcasterToolbar?>);
    lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel((unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingBroadcasterViewModel);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlOnboardingView?? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlOnboardingView?? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type RemoteControlOnboardingView?? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for RemoteControlOnboardingView??);
    lazy protocol witness table accessor for type RemoteControlOnboardingView? and conformance <A> A?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlOnboardingView?? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteControlOnboardingView? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlOnboardingView? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type RemoteControlOnboardingView? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for RemoteControlOnboardingView?);
    lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel(&lazy protocol witness table cache variable for type RemoteControlOnboardingView and conformance RemoteControlOnboardingView, (void (*)(uint64_t))type metadata accessor for RemoteControlOnboardingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlOnboardingView? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingBroadcasterViewController()
{
  return self;
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingBroadcasterToolbar()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingBroadcasterView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ScreenSharingBroadcasterToolbar(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  return swift_release();
}

uint64_t initializeWithCopy for ScreenSharingBroadcasterToolbar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  char v6 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v6;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScreenSharingBroadcasterToolbar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScreenSharingBroadcasterToolbar(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingBroadcasterToolbar(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingBroadcasterToolbar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingBroadcasterToolbar()
{
  return &type metadata for ScreenSharingBroadcasterToolbar;
}

void *initializeBufferWithCopyOfBuffer for ScreenSharingBroadcasterView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ScreenSharingBroadcasterView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ScreenSharingBroadcasterView(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ScreenSharingBroadcasterView()
{
  return &type metadata for ScreenSharingBroadcasterView;
}

uint64_t method lookup function for ScreenSharingBroadcasterViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingBroadcasterViewController);
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewController.__allocating_init(bannerPresentationManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1C31C699C()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ScreenSharingToolbar<TransitioningText<FadeOutFadeInTransition>, Never, Never, <<opaque return type of View.buttonStyle<A>(_:)>>.0> and conformance ScreenSharingToolbar<A, B, C, D>, &demangling cache variable for type metadata for ScreenSharingToolbar<TransitioningText<FadeOutFadeInTransition>, Never, Never, <<opaque return type of View.buttonStyle<A>(_:)>>.0>);
}

uint64_t sub_1C31C69D8()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for RemoteControlOnboardingView??);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.environment<A>(_:)>>.0, _TransactionModifier>, _AnimationModifier<Bool>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type RemoteControlOnboardingView?? and conformance <A> A?();
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in closure #5 in ScreenSharingBroadcasterView.body.getter(uint64_t a1)
{
  return closure #1 in closure #5 in ScreenSharingBroadcasterView.body.getter(a1) & 1;
}

uint64_t _s15ConversationKit11ParticipantVWObTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return a2;
}

uint64_t objectdestroyTm_6()
{
  outlined consume of Environment<CGFloat>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in ScreenSharingBroadcasterToolbar.body.getter()
{
  return closure #1 in closure #2 in ScreenSharingBroadcasterToolbar.body.getter();
}

unint64_t lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle;
  if (!lazy protocol witness table cache variable for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle);
  }
  return result;
}

uint64_t MomentsIndicatorViewModel.__allocating_init(type:remoteParticipantName:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

id one-time initialization function for numberFormatter()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28ED8]), sel_init);
  static MomentsIndicatorViewModel.numberFormatter = (uint64_t)result;
  return result;
}

uint64_t *MomentsIndicatorViewModel.numberFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for numberFormatter != -1) {
    swift_once();
  }
  return &static MomentsIndicatorViewModel.numberFormatter;
}

id static MomentsIndicatorViewModel.numberFormatter.getter()
{
  if (one-time initialization token for numberFormatter != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)static MomentsIndicatorViewModel.numberFormatter;
  return v0;
}

void static MomentsIndicatorViewModel.numberFormatter.setter(uint64_t a1)
{
  if (one-time initialization token for numberFormatter != -1) {
    swift_once();
  }
  swift_beginAccess();
  int v2 = (void *)static MomentsIndicatorViewModel.numberFormatter;
  static MomentsIndicatorViewModel.numberFormatter = a1;
}

uint64_t (*static MomentsIndicatorViewModel.numberFormatter.modify())()
{
  if (one-time initialization token for numberFormatter != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t MomentsIndicatorViewModel.type.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MomentsIndicatorViewModel.text.getter()
{
  if (!*(unsigned char *)(v1 + 16))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v14 = unk_1EA37DFA0;
    id v15 = (void *)qword_1EA37DFA8;
    id v16 = (id)static LocalizationSource.conversationKit;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_13_22();
    unint64_t v18 = 0x80000001C379FDA0;
    goto LABEL_20;
  }
  if (*(unsigned char *)(v1 + 16) != 1)
  {
    uint64_t v19 = *(void *)(v1 + 40);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    MEMORY[0x1F4188790](v20 - 8);
    uint64_t v21 = OUTLINED_FUNCTION_0_59();
    OUTLINED_FUNCTION_0_53(v21);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    if (!v19)
    {
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1C3769620;
      uint64_t v42 = *(void *)(v1 + 24);
      uint64_t v41 = *(void *)(v1 + 32);
      *(void *)(v40 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v40 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v40 + 32) = v42;
      *(void *)(v40 + 40) = v41;
      uint64_t v43 = one-time initialization token for conversationKit;
      swift_bridgeObjectRetain();
      if (v43 != -1) {
        swift_once();
      }
      uint64_t v9 = unk_1EA37DFA0;
      id v10 = (void *)qword_1EA37DFA8;
      id v11 = (id)static LocalizationSource.conversationKit;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_13_22();
      unint64_t v12 = 0x5F4B4F4F545F4025;
      unint64_t v13 = 0xED00004F544F4850;
      goto LABEL_28;
    }
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1C37696D0;
    uint64_t v24 = *(void *)(v1 + 24);
    uint64_t v23 = *(void *)(v1 + 32);
    uint64_t v25 = MEMORY[0x1E4FBB1A0];
    *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v22 + 64) = v26;
    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + 40) = v23;
    uint64_t v27 = one-time initialization token for numberFormatter;
    swift_bridgeObjectRetain();
    if (v27 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (*(void *)(v1 + 40) == -1)
    {
      __break(1u);
      goto LABEL_32;
    }
    id v28 = (id)static MomentsIndicatorViewModel.numberFormatter;
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    id v30 = objc_msgSend(v28, sel_stringFromNumber_, isa);

    if (v30)
    {
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;

      id v34 = (uint64_t *)(v22 + 72);
      *(void *)(v22 + 96) = v25;
      *(void *)(v22 + 104) = v26;
      if (v33)
      {
        *id v34 = v31;
        goto LABEL_26;
      }
    }
    else
    {
      id v34 = (uint64_t *)(v22 + 72);
      *(void *)(v22 + 96) = v25;
      *(void *)(v22 + 104) = v26;
    }
    *id v34 = 0;
    unint64_t v33 = 0xE000000000000000;
LABEL_26:
    *(void *)(v22 + 80) = v33;
    if (one-time initialization token for conversationKit == -1)
    {
LABEL_27:
      uint64_t v9 = unk_1EA37DFA0;
      id v10 = (void *)qword_1EA37DFA8;
      id v11 = (id)static LocalizationSource.conversationKit;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_13_22();
      unint64_t v13 = 0x80000001C379FD60;
      unint64_t v12 = 0xD000000000000018;
      goto LABEL_28;
    }
LABEL_32:
    swift_once();
    goto LABEL_27;
  }
  if (!*(void *)(v1 + 40))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v14 = unk_1EA37DFA0;
    id v15 = (void *)qword_1EA37DFA8;
    id v16 = (id)static LocalizationSource.conversationKit;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_13_22();
    uint64_t v17 = 0x4B4F4F545F554F59;
    unint64_t v18 = 0xEE004F544F48505FLL;
LABEL_20:
    v35.value._uint64_t countAndFlagsBits = v14;
    v35.value._object = v15;
    v36._uint64_t countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    uint64_t v37 = 0;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v17, v35, (NSBundle)v16, v36, *(Swift::String *)(&v48 - 1))._countAndFlagsBits;
    swift_bridgeObjectRelease();

    return countAndFlagsBits;
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = OUTLINED_FUNCTION_0_59();
  OUTLINED_FUNCTION_0_53(v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769620;
  uint64_t v5 = *(void *)(v1 + 40);
  BOOL v6 = __CFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = MEMORY[0x1E4FBB868];
  *(void *)(v4 + 56) = MEMORY[0x1E4FBB808];
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 32) = v7;
  if (one-time initialization token for conversationKit != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v9 = unk_1EA37DFA0;
  id v10 = (void *)qword_1EA37DFA8;
  id v11 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_22();
  unint64_t v13 = 0x80000001C379FD80;
LABEL_28:
  v44.value._uint64_t countAndFlagsBits = v9;
  v44.value._object = v10;
  v45._uint64_t countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  uint64_t v46 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v12, v44, (NSBundle)v11, v45, *(Swift::String *)(&v48 - 1));
  uint64_t v47 = String.init(format:locale:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of Locale?(v0);
  return v47;
}

uint64_t MomentsIndicatorViewModel.captureCount.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t result = v1 + 1;
  if (v1 == -1) {
    __break(1u);
  }
  return result;
}

uint64_t MomentsIndicatorViewModel.init(type:remoteParticipantName:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = a3;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return v3;
}

Swift::Void __swiftcall MomentsIndicatorViewModel.refresh()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  BOOL v2 = __CFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 40) = v3;
  }
}

uint64_t MomentsIndicatorViewModel.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MomentsIndicatorViewModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MomentsIndicatorViewModel()
{
  return self;
}

uint64_t method lookup function for MomentsIndicatorViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MomentsIndicatorViewModel);
}

uint64_t dispatch thunk of MomentsIndicatorViewModel.text.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MomentsIndicatorViewModel.__allocating_init(type:remoteParticipantName:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of MomentsIndicatorViewModel.refresh()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

Swift::String __swiftcall PersonNameComponents.formattedName(style:)(NSPersonNameComponentsFormatterStyle style)
{
  BOOL v2 = self;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_localizedStringFromPersonNameComponents_style_options_, isa, style, 0);

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = v5;
  uint64_t v9 = v7;
  result._object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t PersonNameComponents.init(formattedName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2) {
    goto LABEL_7;
  }
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28F40]), sel_init);
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_personNameComponentsFromString_, v7);

  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v8)
  {
    uint64_t v20 = type metadata accessor for PersonNameComponents();
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v20);
    goto LABEL_6;
  }
  uint64_t v12 = type metadata accessor for PersonNameComponents();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

  id v16 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v16(v11, v15, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v12);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
LABEL_6:
    outlined destroy of PersonNameComponents?((uint64_t)v11);
LABEL_7:
    uint64_t v19 = type metadata accessor for PersonNameComponents();
    uint64_t v17 = a3;
    uint64_t v18 = 1;
    return __swift_storeEnumTagSinglePayload(v17, v18, 1, v19);
  }
  v16((char *)a3, v11, v12);
  uint64_t v17 = a3;
  uint64_t v18 = 0;
  uint64_t v19 = v12;
  return __swift_storeEnumTagSinglePayload(v17, v18, 1, v19);
}

id one-time initialization function for initials()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28F40]), sel_init);
  id result = objc_msgSend(v0, sel_setStyle_, 4);
  static NSPersonNameComponentsFormatter.initials = (uint64_t)v0;
  return result;
}

id static NSPersonNameComponentsFormatter.initials.getter()
{
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v0 = (void *)static NSPersonNameComponentsFormatter.initials;
  return v0;
}

void static NSPersonNameComponentsFormatter.initials.setter(uint64_t a1)
{
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  BOOL v2 = (void *)static NSPersonNameComponentsFormatter.initials;
  static NSPersonNameComponentsFormatter.initials = a1;
}

uint64_t (*static NSPersonNameComponentsFormatter.initials.modify())()
{
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void *UIViewAnimationOptions.curveCoreAnimationDefault.unsafeMutableAddressor()
{
  return &static UIViewAnimationOptions.curveCoreAnimationDefault;
}

uint64_t static UIViewAnimationOptions.curveCoreAnimationDefault.getter()
{
  return 327680;
}

void FlashView.flash(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  objc_msgSend(v3, sel_bounds);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, v6, v7, v8, v9);
  objc_msgSend(v10, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v10, sel_setAutoresizingMask_, 18);
  id v11 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v10, sel_setBackgroundColor_, v11);

  objc_msgSend(v3, sel_addSubview_, v10);
  uint64_t v12 = self;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  uint64_t v23 = partial apply for closure #1 in FlashView.flash(completion:);
  uint64_t v24 = (void *)v13;
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  uint64_t v21 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v22 = &block_descriptor_38;
  uint64_t v14 = _Block_copy(&v19);
  id v15 = v10;
  swift_release();
  id v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  uint64_t v23 = partial apply for closure #2 in FlashView.flash(completion:);
  uint64_t v24 = v16;
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  uint64_t v21 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v22 = &block_descriptor_6_0;
  uint64_t v17 = _Block_copy(&v19);
  id v18 = v15;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a1);
  swift_release();
  objc_msgSend(v12, sel_animateWithDuration_delay_options_animations_completion_, 327680, v14, v17, 0.25, 0.075);
  _Block_release(v17);
  _Block_release(v14);
}

id FlashView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id FlashView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v5 = type metadata accessor for FlashView();
  double v1 = OUTLINED_FUNCTION_6_2();
  return objc_msgSendSuper2(v2, v3, v1, v0, v5);
}

id FlashView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id FlashView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FlashView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id FlashView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlashView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C31C7E24()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in FlashView.flash(completion:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 0.0);
}

uint64_t sub_1C31C7E70()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

id partial apply for closure #2 in FlashView.flash(completion:)()
{
  double v1 = *(uint64_t (**)(id))(v0 + 24);
  id result = objc_msgSend(*(id *)(v0 + 16), sel_removeFromSuperview);
  if (v1) {
    return (id)v1(result);
  }
  return result;
}

uint64_t type metadata accessor for FlashView()
{
  return self;
}

uint64_t method lookup function for FlashView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlashView);
}

uint64_t dispatch thunk of FlashView.flash(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t InCallScreenShareCallControlsService.__allocating_init(controlsManager:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t InCallScreenShareCallControlsService.init(controlsManager:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t InCallScreenShareCallControlsService.participantStateDidChange.getter()
{
  return ConversationControlsManager.participantStateDidChange.getter();
}

uint64_t InCallScreenShareCallControlsService.shareMenuActionState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x640))() & 0x101;
}

uint64_t InCallScreenShareCallControlsService.shareMenuActionStates.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<ShareMenuActionState, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  objc_super v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x670))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<ShareMenuActionState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<ShareMenuActionState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<ShareMenuActionState, Never>);
  lazy protocol witness table accessor for type ShareMenuActionState and conformance ShareMenuActionState();
  Publisher<>.removeDuplicates()();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<ShareMenuActionState, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<ShareMenuActionState, Never>>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

void InCallScreenShareCallControlsService.requestScreenSharingPicker(with:)()
{
}

void InCallScreenShareCallControlsService.requestScreenSharingSession(for:)()
{
}

uint64_t InCallScreenShareCallControlsService.remoteParticipants.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x908))();
}

uint64_t InCallScreenShareCallControlsService.deinit()
{
  return v0;
}

uint64_t InCallScreenShareCallControlsService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ScreenShareCallControlsService.participantStateDidChange.getter in conformance InCallScreenShareCallControlsService()
{
  return InCallScreenShareCallControlsService.participantStateDidChange.getter();
}

uint64_t protocol witness for ScreenShareCallControlsService.shareMenuActionState.getter in conformance InCallScreenShareCallControlsService()
{
  return InCallScreenShareCallControlsService.shareMenuActionState.getter() & 0x101;
}

uint64_t protocol witness for ScreenShareCallControlsService.shareMenuActionStates.getter in conformance InCallScreenShareCallControlsService()
{
  return InCallScreenShareCallControlsService.shareMenuActionStates.getter();
}

uint64_t protocol witness for ScreenShareCallControlsService.remoteParticipants.getter in conformance InCallScreenShareCallControlsService()
{
  return InCallScreenShareCallControlsService.remoteParticipants.getter();
}

void protocol witness for ScreenShareCallControlsService.requestScreenSharingPicker(with:) in conformance InCallScreenShareCallControlsService()
{
}

void protocol witness for ScreenShareCallControlsService.requestScreenSharingSession(for:) in conformance InCallScreenShareCallControlsService()
{
}

uint64_t dispatch thunk of ScreenShareCallControlsService.participantStateDidChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScreenShareCallControlsService.shareMenuActionState.getter(uint64_t a1, uint64_t a2)
{
  __int16 v2 = (*(uint64_t (**)(void))(a2 + 16))();
  return v2 & 1 | ((HIBYTE(v2) & 1) << 8);
}

uint64_t dispatch thunk of ScreenShareCallControlsService.shareMenuActionStates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ScreenShareCallControlsService.remoteParticipants.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ScreenShareCallControlsService.requestScreenSharingPicker(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ScreenShareCallControlsService.requestScreenSharingSession(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata accessor for InCallScreenShareCallControlsService()
{
  return self;
}

uint64_t method lookup function for InCallScreenShareCallControlsService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallScreenShareCallControlsService);
}

uint64_t dispatch thunk of InCallScreenShareCallControlsService.__allocating_init(controlsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

Swift::Void __swiftcall UIView.addConstraintsToFill(_:insets:)(UIView *_, NSDirectionalEdgeInsets insets)
{
  uint64_t v3 = v2;
  double bottom = insets.bottom;
  double leading = insets.leading;
  double top = insets.top;
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  double v8 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769580;
  id v10 = objc_msgSend(v3, sel_leadingAnchor);
  id v11 = [(UIView *)_ leadingAnchor];
  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_60();
  id v14 = objc_msgSend(v12, v13, leading);

  *(void *)(v9 + 32) = v14;
  id v15 = objc_msgSend(v3, sel_topAnchor);
  id v16 = [(UIView *)_ topAnchor];
  uint64_t v17 = (void *)OUTLINED_FUNCTION_0_60();
  id v19 = objc_msgSend(v17, v18, top);

  *(void *)(v9 + 40) = v19;
  id v20 = objc_msgSend(v3, sel_trailingAnchor);
  uint64_t v21 = [(UIView *)_ trailingAnchor];
  uint64_t v22 = (void *)OUTLINED_FUNCTION_0_60();
  id v24 = [v22 v23];

  *(void *)(v9 + 48) = v24;
  id v25 = objc_msgSend(v3, sel_bottomAnchor);
  unint64_t v26 = [(UIView *)_ bottomAnchor];
  id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_constant_, v26, -bottom);

  *(void *)(v9 + 56) = v27;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_activateConstraints_, isa);
}

Swift::Void __swiftcall UIView.setFlexibleWidthHeightAutoResizing()()
{
  objc_msgSend(v0, sel_setAutoresizingMask_, 18);
}

void UIView.withLayer(_:)(void (*a1)(void))
{
  id v3 = objc_msgSend(v1, sel_layer);
  a1();
}

double @objc UIView.safeAreaInsetFrame.getter(void *a1)
{
  id v1 = a1;
  double v2 = UIView.safeAreaInsetFrame.getter();

  return v2;
}

double UIView.safeAreaInsetFrame.getter()
{
  id v1 = objc_msgSend(v0, sel_window);

  if (v1
    && (id v2 = objc_msgSend(v0, sel_safeAreaLayoutGuide),
        unsigned __int8 v3 = objc_msgSend(v2, sel_hasAmbiguousLayout),
        v2,
        (v3 & 1) == 0)
    && (id v4 = objc_msgSend(v0, sel_safeAreaLayoutGuide),
        objc_msgSend(v4, sel_layoutFrame),
        v4,
        CGRect.isValid.getter()))
  {
    id v5 = objc_msgSend(v0, sel_safeAreaLayoutGuide);
    objc_msgSend(v5, sel_layoutFrame);
    double v7 = v6;
  }
  else
  {
    objc_msgSend(v0, sel_bounds);
    return 0.0;
  }
  return v7;
}

double @objc UIView.displayScale.getter(void *a1)
{
  id v1 = a1;
  double v2 = UIView.displayScale.getter();

  return v2;
}

double UIView.displayScale.getter()
{
  id v1 = objc_msgSend(v0, sel_traitCollection);
  objc_msgSend(v1, sel_displayScale);
  double v3 = v2;

  return v3;
}

double @objc static UIView.screenScale.getter()
{
  return static UIView.screenScale.getter();
}

double static UIView.screenScale.getter()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel_scale);
  double v2 = v1;

  return v2;
}

uint64_t *ClarityUIOutgoingCallActionProvider.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static ClarityUIOutgoingCallActionProvider.shared;
}

uint64_t static ClarityUIOutgoingCallActionProvider.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t ClarityUIOutgoingCallActionProvider.().init()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit35ClarityUIOutgoingCallActionProvider_lookupManager;
  double v2 = self;
  swift_retain();
  *(void *)(v0 + v1) = objc_msgSend(v2, sel_sharedManager);
  swift_release();
  id v3 = (id)*MEMORY[0x1E4FADEC0];
  return ObservableNotificationHandler.init(name:)(v3);
}

id ClarityUIOutgoingCallActionProvider.isFaceTimeVideoAvailable.getter()
{
  return objc_msgSend(self, sel_isDirectFaceTimeVideoCallingCurrentlyAvailable);
}

id ClarityUIOutgoingCallActionProvider.isFaceTimeAudioAvailable.getter()
{
  return objc_msgSend(self, sel_isDirectFaceTimeAudioCallingCurrentlyAvailable);
}

id ClarityUIOutgoingCallActionProvider.isTelephonyAvailable.getter()
{
  return objc_msgSend(self, sel_isDirectTelephonyCallingCurrentlyAvailable);
}

uint64_t ClarityUIOutgoingCallActionProvider.areEmailAddressesRelevant.getter()
{
  uint64_t v0 = self;
  if (objc_msgSend(v0, sel_isDirectFaceTimeAudioCallingCurrentlyAvailable)) {
    return 1;
  }
  else {
    return (uint64_t)objc_msgSend(v0, sel_isDirectFaceTimeAudioCallingCurrentlyAvailable);
  }
}

uint64_t ClarityUIOutgoingCallActionProvider.arePhoneNumbersRelevant.getter()
{
  uint64_t v0 = self;
  if ((objc_msgSend(v0, sel_isDirectFaceTimeVideoCallingCurrentlyAvailable) & 1) != 0
    || (objc_msgSend(v0, sel_isDirectFaceTimeAudioCallingCurrentlyAvailable) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(v0, sel_isDirectTelephonyCallingCurrentlyAvailable);
  }
}

uint64_t ClarityUIOutgoingCallActionProvider.outgoingCallActions(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v3 = *(void **)a1;
  id v4 = *(void **)(a1 + 8);
  id v5 = *(char **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  swift_getKeyPath();
  uint64_t v19 = v1;
  lazy protocol witness table accessor for type ObservableNotificationHandler and conformance ObservableNotificationHandler();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v7 = v3;
  id v8 = v4;
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(v7, v8, v5, v6, v19);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();

  if (*(void *)(v11 + 16))
  {
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.clarityUI);
    swift_bridgeObjectRetain();
    SEL v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v15 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v13, v14, "Looking up %ld IDS destinations.", v15, 0xCu);
      MEMORY[0x1C87760E0](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    id v16 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit35ClarityUIOutgoingCallActionProvider_lookupManager);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_beginQueryWithDestinations_services_, isa, 7);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t specialized ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  uint64_t v4 = MEMORY[0x1E4FBC870];
  uint64_t v45 = MEMORY[0x1E4FBC870];
  id v5 = self;
  uint64_t v40 = v1;
  id v41 = v3;
  id v39 = a1;
  if (objc_msgSend(v5, sel_isDirectFaceTimeAudioCallingCurrentlyAvailable))
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    *(void *)(v7 + 24) = v6;
    swift_retain();
    id v8 = objc_msgSend(v3, sel_faceTimeProvider);
    swift_retain();
    specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(a1, 0, (unint64_t)v3, v8, 1, (uint64_t (*)(void *))closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)specialized partial apply, v46);
    uint64_t v9 = v46[1];
    uint64_t v10 = v46[3];
    uint64_t v42 = v46[0];
    uint64_t v43 = v46[2];
    uint64_t v11 = v46[4];
    swift_retain();

    swift_release();
    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v46, (uint64_t)&v57);
    if (*((void *)&v57 + 1))
    {
      long long v60 = v57;
      uint64_t v12 = v59;
      uint64_t v61 = v58;
      if (v59)
      {
        swift_bridgeObjectRetain();
        _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
        swift_release();
        long long v44 = v60;
        outlined release of String((uint64_t)&v44);
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v12);
      }
      else
      {
        swift_beginAccess();
        outlined retain of ClarityUIOutgoingCallAction?(v46, (void (*)(void, void, void, void, void))outlined copy of ClarityUIOutgoingCallAction?);
        uint64_t v13 = swift_bridgeObjectRetain();
        specialized Set.formUnion<A>(_:)(v13);
        swift_release();
        long long v62 = v60;
        outlined release of String((uint64_t)&v62);
      }
    }
    else
    {
      swift_release();
    }
    swift_release();
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  if (!objc_msgSend(v5, sel_isDirectTelephonyCallingCurrentlyAvailable)) {
    goto LABEL_16;
  }
  os_log_type_t v14 = v41;
  if (!v9)
  {
LABEL_14:
    id v16 = objc_msgSend(v41, sel_telephonyProvider);
    specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v39, 0, (unint64_t)v41, v16, 0, 0, v47);
    uint64_t v18 = v47[0];
    uint64_t v17 = v47[1];
    uint64_t v20 = v47[2];
    uint64_t v19 = v47[3];
    uint64_t v21 = v47[4];

    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v47, (uint64_t)v55);
    if (v56)
    {
      outlined consume of ClarityUIOutgoingCallAction?(v42, v9, v43, v10);
      swift_bridgeObjectRetain();
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v19);
      uint64_t v42 = v18;
      uint64_t v43 = v20;
      uint64_t v9 = v17;
      uint64_t v10 = v19;
      uint64_t v11 = v21;
LABEL_18:
      os_log_type_t v14 = v41;
      goto LABEL_19;
    }
LABEL_16:
    if (!v9)
    {
      uint64_t v23 = MEMORY[0x1E4FBC860];
      os_log_type_t v14 = v41;
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
    goto LABEL_18;
  }
  if (!v10)
  {
    outlined copy of ClarityUIOutgoingCallAction?(v42, v9, v43, 0);
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(0);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(0);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(0);
    goto LABEL_14;
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v10;
  *(void *)(v15 + 24) = v11;
  outlined copy of ClarityUIOutgoingCallAction?(v42, v9, v43, v10);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v10);
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
LABEL_19:
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v23 = v22;
  unint64_t v24 = *(void *)(v22 + 16);
  if (v24 >= *(void *)(v22 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v23 = v36;
  }
  *(void *)(v23 + 16) = v24 + 1;
  uint64_t v25 = v23 + 40 * v24;
  *(void *)(v25 + 32) = v42;
  *(void *)(v25 + 40) = v9;
  *(unsigned char *)(v25 + 48) = v43 & 1;
  *(void *)(v25 + 56) = v10;
  *(void *)(v25 + 64) = v11;
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v10);
LABEL_23:
  if (objc_msgSend(v5, sel_isDirectFaceTimeVideoCallingCurrentlyAvailable))
  {
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = MEMORY[0x1E4FBC870];
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v40;
    *(void *)(v27 + 24) = v26;
    swift_retain();
    id v28 = objc_msgSend(v14, sel_faceTimeProvider);
    swift_retain();
    specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v39, 1, (unint64_t)v14, v28, 1, (uint64_t (*)(void *))closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)specialized partial apply, v48);
    swift_retain();

    swift_release();
    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v48, (uint64_t)&v49);
    if (*((void *)&v49 + 1))
    {
      long long v53 = v49;
      uint64_t v29 = v51;
      uint64_t v54 = v50;
      uint64_t v30 = v52;
      v63[0] = v49;
      outlined retain of String((uint64_t)v63);
      outlined retain of ClarityUIOutgoingCallAction?(v48, (void (*)(void, void, void, void, void))outlined copy of ClarityUIOutgoingCallAction?);
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v23 = v37;
      }
      unint64_t v31 = *(void *)(v23 + 16);
      if (v31 >= *(void *)(v23 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v23 = v38;
      }
      *(void *)(v23 + 16) = v31 + 1;
      uint64_t v32 = v23 + 40 * v31;
      uint64_t v33 = v54;
      *(_OWORD *)(v32 + 32) = v53;
      *(void *)(v32 + 48) = v33;
      *(void *)(v32 + 56) = v29;
      *(void *)(v32 + 64) = v30;
      if (v29)
      {
        outlined consume of ClarityUIOutgoingCallAction?(v42, v9, v43, v10);
        swift_release();
        outlined retain of ClarityUIOutgoingCallAction?(v48, (void (*)(void, void, void, void, void))outlined consume of ClarityUIOutgoingCallAction?);
        outlined release of String((uint64_t)v63);
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v29);
      }
      else
      {
        swift_beginAccess();
        uint64_t v34 = swift_bridgeObjectRetain();
        specialized Set.formUnion<A>(_:)(v34);
        outlined consume of ClarityUIOutgoingCallAction?(v42, v9, v43, v10);
        swift_release();
        outlined retain of ClarityUIOutgoingCallAction?(v48, (void (*)(void, void, void, void, void))outlined consume of ClarityUIOutgoingCallAction?);
        outlined release of String((uint64_t)v63);
      }
      swift_release();
    }
    else
    {
      outlined consume of ClarityUIOutgoingCallAction?(v42, v9, v43, v10);
      swift_release();

      swift_release();
    }
  }
  else
  {
    outlined consume of ClarityUIOutgoingCallAction?(v42, v9, v43, v10);
  }
  return v23;
}

uint64_t ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(void *a1, uint64_t a2, uint64_t (**a3)(void, void))
{
  OUTLINED_FUNCTION_5_3();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAB0]), sel_init);
  uint64_t v14 = MEMORY[0x1E4FBC870];
  uint64_t v83 = MEMORY[0x1E4FBC870];
  char v15 = a3[2](a2, a3);
  uint64_t v77 = a2;
  uint64_t v78 = v3;
  id v75 = v13;
  uint64_t v76 = a1;
  unint64_t v71 = v12;
  uint64_t v72 = v8;
  uint64_t v74 = v10;
  if ((v15 & 1) == 0)
  {
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v23 = 0;
    uint64_t v26 = 0;
    uint64_t v81 = 0;
    goto LABEL_10;
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  uint64_t v73 = v16 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21 + v17, v12, v20);
  *(void *)(v21 + v18) = v16;
  id v22 = objc_msgSend(v13, sel_faceTimeProvider);
  swift_retain();
  ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v76, 0, v13, v22, 1, (uint64_t (*)(void *))partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:), v84);
  uint64_t v23 = v84[1];
  uint64_t v24 = v84[3];
  uint64_t v79 = v84[0];
  uint64_t v80 = v84[2];
  uint64_t v81 = v84[4];
  swift_retain();

  swift_release();
  outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v84, (uint64_t)&v95);
  if (!*((void *)&v95 + 1))
  {
    swift_release();
LABEL_8:
    uint64_t v26 = v24;
    goto LABEL_9;
  }
  long long v98 = v95;
  uint64_t v25 = v97;
  uint64_t v99 = v96;
  if (!v97)
  {
    uint64_t v27 = (uint64_t *)v73;
    swift_beginAccess();
    uint64_t v28 = *v27;
    outlined retain of ClarityUIOutgoingCallAction?(v84, (void (*)(void, void, void, void, void))outlined copy of ClarityUIOutgoingCallAction?);
    swift_bridgeObjectRetain();
    specialized Set.formUnion<A>(_:)(v28);
    swift_release();
    long long v100 = v98;
    outlined release of String((uint64_t)&v100);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = v24;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v24);
  swift_release();
  v82[0] = v98;
  outlined release of String((uint64_t)v82);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v25);
LABEL_9:
  uint64_t v14 = MEMORY[0x1E4FBC870];
  a3 = v19;
  swift_release();
  a2 = v77;
LABEL_10:
  if ((a3[3](a2, a3) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v29 = v78;
  uint64_t v30 = v76;
  if (!v23)
  {
LABEL_15:
    id v34 = v75;
    uint64_t v35 = v14;
    uint64_t v36 = v26;
    id v37 = objc_msgSend(v75, sel_telephonyProvider);
    ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v30, 0, v34, v37, 0, 0, v85);
    uint64_t v38 = v85[1];
    uint64_t v73 = v85[0];
    uint64_t v40 = v85[2];
    uint64_t v39 = v85[3];
    uint64_t v41 = v85[4];

    uint64_t v26 = v36;
    uint64_t v14 = v35;
    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v85, (uint64_t)v93);
    if (v94)
    {
      OUTLINED_FUNCTION_3_77();
      swift_bridgeObjectRetain();
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v39);
      uint64_t v79 = v73;
      uint64_t v80 = v40;
      uint64_t v23 = v38;
      uint64_t v26 = v39;
      uint64_t v81 = v41;
LABEL_19:
      uint64_t v29 = v78;
      goto LABEL_20;
    }
LABEL_17:
    if (!v23)
    {
      uint64_t v43 = MEMORY[0x1E4FBC860];
      uint64_t v29 = v78;
      goto LABEL_24;
    }
    swift_bridgeObjectRetain();
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v26);
    goto LABEL_19;
  }
  if (!v26)
  {
    outlined copy of ClarityUIOutgoingCallAction?(v79, v23, v80, 0);
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(0);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(0);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(0);
    goto LABEL_15;
  }
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v80;
  uint64_t v33 = v81;
  *(void *)(v31 + 16) = v26;
  *(void *)(v31 + 24) = v33;
  outlined copy of ClarityUIOutgoingCallAction?(v79, v23, v32, v26);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v26);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ());
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v26);
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v26);
LABEL_20:
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v26);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v43 = v42;
  unint64_t v44 = *(void *)(v42 + 16);
  if (v44 >= *(void *)(v42 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v43 = v65;
  }
  *(void *)(v43 + 16) = v44 + 1;
  uint64_t v45 = v43 + 40 * v44;
  *(void *)(v45 + 32) = v79;
  *(void *)(v45 + 40) = v23;
  uint64_t v46 = v81;
  *(unsigned char *)(v45 + 48) = v80 & 1;
  *(void *)(v45 + 56) = v26;
  *(void *)(v45 + 64) = v46;
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v26);
LABEL_24:
  uint64_t v47 = v77;
  char v48 = a3[1](v77, a3);
  uint64_t v49 = v74;
  if (v48)
  {
    uint64_t v73 = v43;
    uint64_t v69 = v23;
    uint64_t v70 = v26;
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = v14;
    uint64_t v68 = v50 + 16;
    uint64_t v52 = v71;
    uint64_t v51 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v29, v47);
    unint64_t v53 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    unint64_t v54 = (v49 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v47;
    *(void *)(v55 + 24) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v55 + v53, v52, v47);
    *(void *)(v55 + v54) = v50;
    id v56 = v75;
    id v57 = objc_msgSend(v75, sel_faceTimeProvider);
    swift_retain();
    ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v76, 1, v56, v57, 1, (uint64_t (*)(void *))partial apply for closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:), v86);
    swift_retain();

    swift_release();
    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v86, (uint64_t)&v87);
    if (*((void *)&v87 + 1))
    {
      long long v91 = v87;
      uint64_t v58 = v89;
      uint64_t v92 = v88;
      uint64_t v59 = v90;
      v101[0] = v87;
      outlined retain of String((uint64_t)v101);
      outlined retain of ClarityUIOutgoingCallAction?(v86, (void (*)(void, void, void, void, void))outlined copy of ClarityUIOutgoingCallAction?);
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v58);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v73 = v66;
      }
      unint64_t v60 = *(void *)(v73 + 16);
      if (v60 >= *(void *)(v73 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v43 = v67;
      }
      else
      {
        uint64_t v43 = v73;
      }
      *(void *)(v43 + 16) = v60 + 1;
      uint64_t v61 = v43 + 40 * v60;
      uint64_t v62 = v92;
      *(_OWORD *)(v61 + 32) = v91;
      *(void *)(v61 + 48) = v62;
      *(void *)(v61 + 56) = v58;
      *(void *)(v61 + 64) = v59;
      if (v58)
      {
        OUTLINED_FUNCTION_2_64();
        swift_release();
        outlined retain of ClarityUIOutgoingCallAction?(v86, (void (*)(void, void, void, void, void))outlined consume of ClarityUIOutgoingCallAction?);
        outlined release of String((uint64_t)v101);
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v58);
      }
      else
      {
        swift_beginAccess();
        uint64_t v63 = swift_bridgeObjectRetain();
        specialized Set.formUnion<A>(_:)(v63);
        OUTLINED_FUNCTION_2_64();
        swift_release();
        outlined retain of ClarityUIOutgoingCallAction?(v86, (void (*)(void, void, void, void, void))outlined consume of ClarityUIOutgoingCallAction?);
        outlined release of String((uint64_t)v101);
      }
      swift_release();
    }
    else
    {
      outlined consume of ClarityUIOutgoingCallAction?(v79, v69, v80, v70);
      swift_release();

      swift_release();
      return v73;
    }
  }
  else
  {
    OUTLINED_FUNCTION_3_77();
  }
  return v43;
}

id ClarityUIOutgoingCallActionProvider.faceTimeVideoAvailability(handle:)(uint64_t a1)
{
  return ClarityUIOutgoingCallActionProvider.faceTimeVideoAvailability(handle:)(a1, (SEL *)&selRef_faceTimeVideoAvailabilityForDestination_);
}

id TUHandle.idsDestination.getter()
{
  id result = (id)TUCopyIDSCanonicalAddressForHandle();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id ClarityUIOutgoingCallActionProvider.faceTimeAudioAvailability(handle:)(uint64_t a1)
{
  return ClarityUIOutgoingCallActionProvider.faceTimeVideoAvailability(handle:)(a1, (SEL *)&selRef_faceTimeAudioAvailabilityForDestination_);
}

id ClarityUIOutgoingCallActionProvider.faceTimeVideoAvailability(handle:)(uint64_t a1, SEL *a2)
{
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit35ClarityUIOutgoingCallActionProvider_lookupManager);
  id v5 = TUHandle.idsDestination.getter();
  uint64_t v6 = (void *)MEMORY[0x1C87730B0](v5);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v4, *a2, v6);

  return v7;
}

void ClarityUIOutgoingCallActionProvider.__allocating_init(name:)()
{
}

void ClarityUIOutgoingCallActionProvider.init(name:)()
{
}

void ClarityUIOutgoingCallActionProvider.__ivar_destroyer()
{
}

uint64_t ClarityUIOutgoingCallActionProvider.deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit29ObservableNotificationHandler___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t ClarityUIOutgoingCallActionProvider.__deallocating_deinit()
{
  ClarityUIOutgoingCallActionProvider.deinit();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for ClarityUIOutgoingCallActionProviderProtocol.isFaceTimeVideoAvailable.getter in conformance ClarityUIOutgoingCallActionProvider()
{
  return (unint64_t)ClarityUIOutgoingCallActionProvider.isFaceTimeVideoAvailable.getter() & 1;
}

unint64_t protocol witness for ClarityUIOutgoingCallActionProviderProtocol.isFaceTimeAudioAvailable.getter in conformance ClarityUIOutgoingCallActionProvider()
{
  return (unint64_t)ClarityUIOutgoingCallActionProvider.isFaceTimeAudioAvailable.getter() & 1;
}

unint64_t protocol witness for ClarityUIOutgoingCallActionProviderProtocol.isTelephonyAvailable.getter in conformance ClarityUIOutgoingCallActionProvider()
{
  return (unint64_t)ClarityUIOutgoingCallActionProvider.isTelephonyAvailable.getter() & 1;
}

uint64_t protocol witness for ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:) in conformance ClarityUIOutgoingCallActionProvider(void *a1)
{
  return specialized ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(a1);
}

id protocol witness for ClarityUIOutgoingCallActionProviderProtocol.faceTimeVideoAvailability(handle:) in conformance ClarityUIOutgoingCallActionProvider(uint64_t a1)
{
  return ClarityUIOutgoingCallActionProvider.faceTimeVideoAvailability(handle:)(a1);
}

id protocol witness for ClarityUIOutgoingCallActionProviderProtocol.faceTimeAudioAvailability(handle:) in conformance ClarityUIOutgoingCallActionProvider(uint64_t a1)
{
  return ClarityUIOutgoingCallActionProvider.faceTimeAudioAvailability(handle:)(a1);
}

uint64_t closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, a4, a5);
  if (!v5)
  {
    id v6 = TUHandle.idsDestination.getter();
    uint64_t v8 = v7;
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(v10, v6, v8);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)@<X0>(void *a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t (*a6)(void *)@<X5>, void *a7@<X8>)
{
  uint64_t v11 = a1;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  unint64_t v62 = v15;
  if (a5)
  {
    uint64_t v16 = v11[3];
    uint64_t v17 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    specialized Array.append<A>(contentsOf:)(v18);
    unint64_t v15 = v62;
  }
  unint64_t v19 = v15;
  unint64_t v59 = v15;
  if (v15 >> 62) {
    goto LABEL_36;
  }
  uint64_t v20 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_5:
  id v57 = (void *)v20;
  if (!v20)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    goto LABEL_33;
  }
  uint64_t v51 = (void *)a3;
  uint64_t v52 = v11;
  char v21 = 0;
  id v22 = 0;
  uint64_t v53 = a2 & 1;
  unint64_t v54 = a7;
  uint64_t v11 = (void *)(v19 & 0xC000000000000001);
  uint64_t v58 = v19 & 0xFFFFFFFFFFFFFF8;
  a7 = (void *)v20;
  unint64_t v56 = v19 & 0xC000000000000001;
LABEL_7:
  char v50 = v21;
  a3 = (unint64_t)v22;
  do
  {
    if (v11)
    {
      id v23 = (id)MEMORY[0x1C87744F0](a3, v19);
    }
    else
    {
      if (a3 >= *(void *)(v58 + 16)) {
        goto LABEL_35;
      }
      id v23 = *(id *)(v19 + 8 * a3 + 32);
    }
    uint64_t v24 = v23;
    id v22 = (void *)(a3 + 1);
    if (__OFADD__(a3, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      swift_bridgeObjectRetain();
      unint64_t v19 = v59;
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_5;
    }
    if (!a6) {
      goto LABEL_31;
    }
    swift_retain();
    int v25 = a6(v24);
    if (v25 == 2)
    {
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);
    }
    else
    {
      a2 = v25;
      if (!v25)
      {
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);

        char v21 = 1;
        if (v22 != a7) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        id v37 = 0;
        uint64_t v38 = v53;
        a7 = v54;
        goto LABEL_32;
      }
      if (v25 == 1)
      {
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);
LABEL_31:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = a4;
        *(void *)(v36 + 24) = v24;
        uint64_t v38 = v53;
        *(unsigned char *)(v36 + 32) = v53;
        *(void *)(v36 + 40) = v51;
        id v37 = v24;
        id v43 = a4;
        id v44 = v51;
        uint64_t v35 = partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:);
        a7 = v54;
LABEL_32:
        uint64_t v60 = 0x2D746361746E6F43;
        unint64_t v61 = 0xE800000000000000;
        uint64_t v45 = v52[3];
        uint64_t v46 = v52[4];
        __swift_project_boxed_opaque_existential_1(v52, v45);
        v47._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._uint64_t countAndFlagsBits = 45;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        v49._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v49);

        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v39 = v60;
        unint64_t v40 = v61;
        uint64_t v41 = v38;
        goto LABEL_33;
      }
      if (one-time initialization token for clarityUI != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Log.clarityUI);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        uint64_t v60 = v30;
        *(_DWORD *)uint64_t v29 = 136315138;
        type metadata accessor for FZHandleIDStatus(0);
        uint64_t v31 = String.init<A>(describing:)();
        a2 = v32;
        *(void *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v60);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v27, v28, "Unhandled FaceTime availability status: %s", (uint8_t *)v29, 0xCu);
        swift_arrayDestroy();
        uint64_t v33 = v30;
        uint64_t v11 = (void *)v56;
        MEMORY[0x1C87760E0](v33, -1, -1);
        uint64_t v34 = v29;
        a7 = v57;
        MEMORY[0x1C87760E0](v34, -1, -1);
      }
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);

      unint64_t v19 = v59;
    }
    ++a3;
  }
  while (v22 != a7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  id v37 = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v38 = v53;
  a7 = v54;
  if (v50) {
    goto LABEL_32;
  }
LABEL_33:
  *a7 = v39;
  a7[1] = v40;
  a7[2] = v41;
  a7[3] = v35;
  a7[4] = v36;
  return result;
}

uint64_t ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)@<X0>(void *a1@<X0>, char a2@<W1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t (*a6)(void *)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  unint64_t v59 = v12;
  if (a5)
  {
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    specialized Array.append<A>(contentsOf:)(v15);
    unint64_t v12 = v59;
  }
  if (v12 >> 62) {
    goto LABEL_33;
  }
  uint64_t v16 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16)
  {
LABEL_34:
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    goto LABEL_35;
  }
LABEL_5:
  char v47 = 0;
  unint64_t v17 = 0;
  uint64_t v48 = a2 & 1;
  unint64_t v18 = v12 & 0xC000000000000001;
  uint64_t v55 = v12 & 0xFFFFFFFFFFFFFF8;
  uint64_t v53 = v16;
  unint64_t v54 = v12;
  unint64_t v56 = v12 & 0xC000000000000001;
  do
  {
    while (1)
    {
      if (v18)
      {
        id v19 = (id)MEMORY[0x1C87744F0](v17, v12);
      }
      else
      {
        if (v17 >= *(void *)(v55 + 16))
        {
          __break(1u);
LABEL_33:
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          if (!v16) {
            goto LABEL_34;
          }
          goto LABEL_5;
        }
        id v19 = *(id *)(v12 + 8 * v17 + 32);
      }
      uint64_t v20 = v19;
      unint64_t v21 = v17 + 1;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
LABEL_31:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        id v35 = 0;
        uint64_t v39 = v48;
LABEL_29:
        uint64_t v57 = 0x2D746361746E6F43;
        unint64_t v58 = 0xE800000000000000;
        uint64_t v42 = a1[3];
        uint64_t v43 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v42);
        v44._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._uint64_t countAndFlagsBits = 45;
        v45._object = (void *)0xE100000000000000;
        String.append(_:)(v45);
        v46._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v46);

        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v36 = v57;
        unint64_t v37 = v58;
        uint64_t v38 = v39;
        goto LABEL_35;
      }
      if (!a6) {
        goto LABEL_28;
      }
      swift_retain();
      int v22 = a6(v20);
      if (v22 == 2)
      {
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);

        goto LABEL_21;
      }
      a2 = v22;
      if (v22) {
        break;
      }
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);

      char v47 = 1;
      ++v17;
      if (v21 == v16) {
        goto LABEL_31;
      }
    }
    if (v22 == 1)
    {
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);
LABEL_28:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = swift_allocObject();
      uint64_t v39 = v48;
      *(void *)(v34 + 16) = a4;
      *(void *)(v34 + 24) = v20;
      *(unsigned char *)(v34 + 32) = v48;
      *(void *)(v34 + 40) = a3;
      id v35 = v20;
      id v40 = a4;
      id v41 = a3;
      uint64_t v33 = partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:);
      goto LABEL_29;
    }
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.clarityUI);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v57 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      type metadata accessor for FZHandleIDStatus(0);
      uint64_t v28 = String.init<A>(describing:)();
      a2 = v29;
      *(void *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v57);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v24, v25, "Unhandled FaceTime availability status: %s", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy();
      uint64_t v30 = v27;
      uint64_t v16 = v53;
      MEMORY[0x1C87760E0](v30, -1, -1);
      uint64_t v31 = v26;
      unint64_t v12 = v54;
      MEMORY[0x1C87760E0](v31, -1, -1);
    }
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a6);

    unint64_t v18 = v56;
LABEL_21:
    ++v17;
  }
  while (v21 != v16);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  id v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = v48;
  if (v47) {
    goto LABEL_29;
  }
LABEL_35:
  *a7 = v36;
  a7[1] = v37;
  a7[2] = v38;
  a7[3] = (uint64_t)v33;
  a7[4] = v34;
  return result;
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v6, v3, v4);
      swift_bridgeObjectRelease();
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v2 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v16, v14, v15);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_20;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_20;
  }
LABEL_23:
  return swift_release();
}

uint64_t specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4();
  if (!v4)
  {
    id v5 = TUHandle.idsDestination.getter();
    uint64_t v7 = v6;
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(v9, v5, v7);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a1, a4, a5);
  if (!v5)
  {
    id v6 = TUHandle.idsDestination.getter();
    uint64_t v8 = v7;
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(v10, v6, v8);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  return v5;
}

void closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBC0]), sel_initWithProvider_, a1);
  objc_msgSend(v7, sel_setHandle_, a2);
  objc_msgSend(v7, sel_setVideo_, a3 & 1);
  objc_msgSend(v7, sel_setOriginatingUIType_, 30);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = a2;
  v12[4] = partial apply for closure #1 in closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:);
  v12[5] = v8;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v12[3] = &block_descriptor_39;
  uint64_t v9 = _Block_copy(v12);
  id v10 = v7;
  id v11 = a2;
  swift_release();
  objc_msgSend(a4, sel_launchAppForDialRequest_completion_, v10, v9);
  _Block_release(v9);
}

void closure #1 in closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v6 = a1;
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.clarityUI);
    id v8 = a1;
    id v9 = a2;
    id v10 = a3;
    id v11 = a1;
    id v12 = v9;
    id v13 = v10;
    oslog = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      *(_DWORD *)uint64_t v15 = 138412802;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v12;

      *(_WORD *)(v15 + 12) = 2112;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16[1] = v13;

      *(_WORD *)(v15 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, oslog, v14, "Unable to launch app for dial request: %@, handle: %@, error: %s", (uint8_t *)v15, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v21, -1, -1);
      MEMORY[0x1C87760E0](v15, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t ClarityUIContact.emailAddressHandles.getter()
{
  return ClarityUIContact.emailAddressHandles.getter((SEL *)&selRef_tuHandlesForEmailAddresses);
}

uint64_t ClarityUIContact.phoneNumberHandles.getter()
{
  return ClarityUIContact.emailAddressHandles.getter((SEL *)&selRef_tuHandlesForPhoneNumbers);
}

uint64_t ClarityUIContact.emailAddressHandles.getter(SEL *a1)
{
  id v2 = [*v1 *a1];
  type metadata accessor for TUHandle();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type ObservableNotificationHandler and conformance ObservableNotificationHandler()
{
  unint64_t result = lazy protocol witness table cache variable for type ObservableNotificationHandler and conformance ObservableNotificationHandler;
  if (!lazy protocol witness table cache variable for type ObservableNotificationHandler and conformance ObservableNotificationHandler)
  {
    type metadata accessor for ObservableNotificationHandler();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableNotificationHandler and conformance ObservableNotificationHandler);
  }
  return result;
}

uint64_t specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(a1, *a2, a3, (uint64_t (*)(void))ClarityUIOutgoingCallActionProvider.faceTimeAudioAvailability(handle:));
}

uint64_t specialized closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(a1, *a2, a3, (uint64_t (*)(void))ClarityUIOutgoingCallActionProvider.faceTimeVideoAvailability(handle:));
}

uint64_t specialized ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(void *a1, void *a2, char *a3, unint64_t a4, uint64_t a5)
{
  id v10 = objc_allocWithZone(MEMORY[0x1E4FADAB0]);
  id v75 = a1;
  id v11 = a2;
  swift_bridgeObjectRetain();
  id v12 = objc_msgSend(v10, sel_init);
  uint64_t v13 = MEMORY[0x1E4FBC870];
  uint64_t v77 = MEMORY[0x1E4FBC870];
  unint64_t v71 = self;
  unint64_t v14 = (unint64_t)&selRef_trailingBarAlpha;
  id v72 = v12;
  uint64_t v70 = a3;
  uint64_t v68 = a5;
  if (objc_msgSend(v71, sel_isDirectFaceTimeAudioCallingCurrentlyAvailable))
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v13;
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = a5;
    v16[3] = v15;
    swift_retain();
    id v17 = objc_msgSend(v12, sel_faceTimeProvider);
    swift_retain();
    specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v75, v11, a3, a4, 0, v12, v17, 1, (char *)v78, (uint64_t (*)(void *))partial apply for specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:), v16);
    uint64_t v18 = v78[0];
    uint64_t v19 = v78[1];
    uint64_t v20 = v78[3];
    uint64_t v73 = v78[2];
    uint64_t v21 = v78[4];
    swift_retain();

    swift_release();
    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v78, (uint64_t)&v86);
    if (*((void *)&v86 + 1))
    {
      unint64_t v22 = a4;
      long long v89 = v86;
      uint64_t v23 = v88;
      uint64_t v90 = v87;
      if (v88)
      {
        swift_bridgeObjectRetain();
        _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v20);
        swift_release();
        long long v76 = v89;
        outlined release of String((uint64_t)&v76);
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v23);
      }
      else
      {
        swift_beginAccess();
        uint64_t v25 = *(void *)(v15 + 16);
        outlined retain of ClarityUIOutgoingCallAction?(v78, (void (*)(void, void, void, void, void))outlined copy of ClarityUIOutgoingCallAction?);
        swift_bridgeObjectRetain();
        specialized Set.formUnion<A>(_:)(v25);
        swift_release();
        long long v91 = v89;
        outlined release of String((uint64_t)&v91);
      }
      a4 = v22;
    }
    else
    {
      swift_release();
    }
    swift_release();
    uint64_t v24 = (uint64_t (*)())v20;
    unint64_t v14 = 0x1F6B88000uLL;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v73 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v26 = v71;
  if (!objc_msgSend(v71, sel_isDirectTelephonyCallingCurrentlyAvailable)) {
    goto LABEL_22;
  }
  uint64_t v74 = v18;
  if (!v19)
  {
LABEL_15:
    id v29 = objc_msgSend(v72, sel_telephonyProvider);
    id v30 = v75;
    id v64 = v11;
    uint64_t v31 = (void *)a4;
    swift_bridgeObjectRetain();
    uint64_t v65 = v30;
    id v32 = objc_msgSend(v30, sel_tuHandlesForPhoneNumbers);
    type metadata accessor for TUHandle();
    unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v34)
      {
LABEL_17:
        uint64_t v66 = (uint64_t)v24;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v33 & 0xC000000000000001) == 0, v33);
        id v69 = v11;
        if ((v33 & 0xC000000000000001) != 0) {
          id v35 = (id)MEMORY[0x1C87744F0](0, v33);
        }
        else {
          id v35 = *(id *)(v33 + 32);
        }
        uint64_t v36 = v35;
        swift_bridgeObjectRelease_n();
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = v29;
        *(void *)(v37 + 24) = v36;
        *(unsigned char *)(v37 + 32) = 0;
        *(void *)(v37 + 40) = v72;
        *(void *)&long long v80 = 0x2D746361746E6F43;
        *((void *)&v80 + 1) = 0xE800000000000000;
        id v38 = v36;
        id v39 = v29;
        id v40 = v72;
        a4 = (unint64_t)v31;
        swift_bridgeObjectRetain();
        v41._uint64_t countAndFlagsBits = (uint64_t)v70;
        v41._object = v31;
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        v42._uint64_t countAndFlagsBits = 45;
        v42._object = (void *)0xE100000000000000;
        String.append(_:)(v42);
        LOBYTE(v79[0]) = 0;
        v43._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v43);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ClarityUIOutgoingCallAction?(v74, v19, v73, v66);
        uint64_t v19 = *((void *)&v80 + 1);
        uint64_t v74 = v80;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v73 = 0;
        char v28 = 0;
        uint64_t v24 = partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:);
        uint64_t v44 = v37;
        id v11 = v69;
        uint64_t v26 = v71;
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease();
    a4 = (unint64_t)v31;
    swift_bridgeObjectRelease_n();
    uint64_t v18 = v74;
LABEL_22:
    if (!v19)
    {
      uint64_t v48 = MEMORY[0x1E4FBC860];
      goto LABEL_29;
    }
    uint64_t v74 = v18;
    char v28 = v73 & 1;
    goto LABEL_24;
  }
  if (!v24)
  {
    outlined copy of ClarityUIOutgoingCallAction?(v18, v19, v73, 0);
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(0);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(0);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(0);
    goto LABEL_15;
  }
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v24;
  *(void *)(v27 + 24) = v21;
  outlined copy of ClarityUIOutgoingCallAction?(v18, v19, v73, (uint64_t)v24);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v24);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v24);
  char v28 = v73 & 1;
LABEL_24:
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v24);
  uint64_t v44 = v21;
LABEL_25:
  swift_bridgeObjectRetain();
  uint64_t v45 = (uint64_t)v24;
  uint64_t v46 = v44;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v24);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v48 = v47;
  unint64_t v49 = *(void *)(v47 + 16);
  if (v49 >= *(void *)(v47 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v48 = v61;
  }
  *(void *)(v48 + 16) = v49 + 1;
  uint64_t v50 = v48 + 40 * v49;
  uint64_t v18 = v74;
  *(void *)(v50 + 32) = v74;
  *(void *)(v50 + 40) = v19;
  *(unsigned char *)(v50 + 48) = v28;
  uint64_t v24 = (uint64_t (*)())v45;
  *(void *)(v50 + 56) = v45;
  *(void *)(v50 + 64) = v46;
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v45);
  unint64_t v14 = 0x1F6B88000;
LABEL_29:
  if (objc_msgSend(v26, sel_isDirectFaceTimeVideoCallingCurrentlyAvailable))
  {
    uint64_t v67 = (uint64_t)v24;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = MEMORY[0x1E4FBC870];
    uint64_t v52 = (void *)swift_allocObject();
    v52[2] = v68;
    v52[3] = v51;
    swift_retain();
    id v53 = [v72 (SEL)(v14 + 3693)];
    swift_retain();
    specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(v75, v11, v70, a4, 1, v72, v53, 1, (char *)v79, (uint64_t (*)(void *))partial apply for specialized closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:), v52);
    swift_retain();

    swift_release();
    outlined init with take of ClarityUIOutgoingCallAction?((uint64_t)v79, (uint64_t)&v80);
    if (*((void *)&v80 + 1))
    {
      long long v84 = v80;
      uint64_t v54 = v82;
      uint64_t v85 = v81;
      uint64_t v55 = v83;
      v92[0] = v80;
      outlined retain of String((uint64_t)v92);
      outlined retain of ClarityUIOutgoingCallAction?(v79, (void (*)(void, void, void, void, void))outlined copy of ClarityUIOutgoingCallAction?);
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v54);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v48 = v62;
      }
      unint64_t v56 = *(void *)(v48 + 16);
      if (v56 >= *(void *)(v48 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v48 = v63;
      }
      *(void *)(v48 + 16) = v56 + 1;
      uint64_t v57 = v48 + 40 * v56;
      uint64_t v58 = v85;
      *(_OWORD *)(v57 + 32) = v84;
      *(void *)(v57 + 48) = v58;
      *(void *)(v57 + 56) = v54;
      *(void *)(v57 + 64) = v55;
      if (v54)
      {
        outlined consume of ClarityUIOutgoingCallAction?(v18, v19, v73, v67);
        swift_release();
        outlined retain of ClarityUIOutgoingCallAction?(v79, (void (*)(void, void, void, void, void))outlined consume of ClarityUIOutgoingCallAction?);
        outlined release of String((uint64_t)v92);
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v54);
      }
      else
      {
        swift_beginAccess();
        uint64_t v59 = swift_bridgeObjectRetain();
        specialized Set.formUnion<A>(_:)(v59);
        outlined consume of ClarityUIOutgoingCallAction?(v18, v19, v73, v67);
        swift_release();
        outlined retain of ClarityUIOutgoingCallAction?(v79, (void (*)(void, void, void, void, void))outlined consume of ClarityUIOutgoingCallAction?);
        outlined release of String((uint64_t)v92);
      }
      swift_release();
    }
    else
    {
      outlined consume of ClarityUIOutgoingCallAction?(v18, v19, v73, v67);
      swift_release();

      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of ClarityUIOutgoingCallAction?(v18, v19, v73, (uint64_t)v24);
    swift_bridgeObjectRelease();

    id v11 = v75;
    id v75 = v72;
  }

  return v48;
}

void outlined consume of ClarityUIOutgoingCallAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a4);
  }
}

uint64_t sub_1C31CC04C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)()
{
  return partial apply for closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_5_3();
  return v0();
}

uint64_t outlined init with take of ClarityUIOutgoingCallAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClarityUIOutgoingCallAction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined copy of ClarityUIOutgoingCallAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  }
}

void *outlined retain of ClarityUIOutgoingCallAction?(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t objectdestroy_2Tm_1()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)()
{
  return partial apply for closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)();
}

uint64_t dispatch thunk of ClarityUIContactProtocol.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClarityUIContactProtocol.emailAddressHandles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClarityUIContactProtocol.phoneNumberHandles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClarityUIOutgoingCallActionProviderProtocol.isFaceTimeVideoAvailable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClarityUIOutgoingCallActionProviderProtocol.isFaceTimeAudioAvailable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClarityUIOutgoingCallActionProviderProtocol.isTelephonyAvailable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ClarityUIOutgoingCallActionProviderProtocol.faceTimeVideoAvailability(handle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ClarityUIOutgoingCallActionProviderProtocol.faceTimeAudioAvailability(handle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t ObjC metadata update function for ClarityUIOutgoingCallActionProvider()
{
  return type metadata accessor for ClarityUIOutgoingCallActionProvider();
}

uint64_t type metadata accessor for ClarityUIOutgoingCallActionProvider()
{
  uint64_t result = type metadata singleton initialization cache for ClarityUIOutgoingCallActionProvider;
  if (!type metadata singleton initialization cache for ClarityUIOutgoingCallActionProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ClarityUIOutgoingCallActionProvider()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ClarityUIOutgoingCallActionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClarityUIOutgoingCallActionProvider);
}

uint64_t sub_1C31CC408()
{
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(void *a1)
{
  closure #1 in closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void specialized ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(void *a1@<X0>, void *a2@<X1>, char *a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, void *a6@<X5>, void *a7@<X6>, char a8@<W7>, char *a9@<X8>, uint64_t (*a10)(void *), void *a11)
{
  LOBYTE(v12) = a5;
  id v17 = a1;
  unint64_t v18 = a2;
  swift_bridgeObjectRetain();
  id v19 = objc_msgSend(v17, sel_tuHandlesForPhoneNumbers);
  type metadata accessor for TUHandle();
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v65 = v20;
  if (a8)
  {
    id v21 = objc_msgSend(v17, sel_tuHandlesForEmailAddresses);
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array.append<A>(contentsOf:)(v22);
    unint64_t v20 = v65;
  }
  if (v20 >> 62) {
    goto LABEL_38;
  }
  uint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_5:
  uint64_t v60 = (char *)v23;
  if (!v23)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_34;
  }
  uint64_t v52 = (uint64_t)a3;
  id v53 = (void *)a4;
  uint64_t v54 = (void *)v18;
  uint64_t v55 = v17;
  unint64_t v56 = a9;
  char v24 = 0;
  a3 = 0;
  id v17 = a11;
  uint64_t v51 = v12 & 1;
  a4 = v20 & 0xC000000000000001;
  uint64_t v61 = v20 & 0xFFFFFFFFFFFFFF8;
  a9 = (char *)v23;
  unint64_t v59 = v20;
  unint64_t v62 = v20 & 0xC000000000000001;
LABEL_7:
  char v50 = v24;
  unint64_t v18 = (unint64_t)a3;
  do
  {
    if (a4)
    {
      id v25 = (id)MEMORY[0x1C87744F0](v18, v20);
    }
    else
    {
      if (v18 >= *(void *)(v61 + 16)) {
        goto LABEL_37;
      }
      id v25 = *(id *)(v20 + 8 * v18 + 32);
    }
    id v12 = v25;
    a3 = (char *)(v18 + 1);
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_5;
    }
    if (!a10) {
      goto LABEL_32;
    }
    swift_retain();
    int v26 = a10(v12);
    switch(v26)
    {
      case 2:
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a10);

        goto LABEL_23;
      case 0:
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a10);

        char v24 = 1;
        if (a3 != a9) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        id v38 = 0;
        id v39 = v55;
        a9 = v56;
        Swift::String v41 = v53;
        id v40 = v54;
LABEL_30:
        uint64_t v44 = v51;
LABEL_33:
        uint64_t v63 = 0x2D746361746E6F43;
        unint64_t v64 = 0xE800000000000000;
        swift_bridgeObjectRetain();
        v47._uint64_t countAndFlagsBits = v52;
        v47._object = v41;
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._uint64_t countAndFlagsBits = 45;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        v49._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v49);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        uint64_t v42 = v63;
        unint64_t v43 = v64;
        goto LABEL_34;
      case 1:
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a10);
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = a7;
        *(void *)(v37 + 24) = v12;
        uint64_t v44 = v51;
        *(unsigned char *)(v37 + 32) = v51;
        *(void *)(v37 + 40) = a6;
        id v38 = v12;
        id v45 = a7;
        id v46 = a6;
        uint64_t v36 = partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:);
        id v39 = v55;
        a9 = v56;
        Swift::String v41 = v53;
        id v40 = v54;
        goto LABEL_33;
    }
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.clarityUI);
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v63 = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      type metadata accessor for FZHandleIDStatus(0);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v63);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v28, v29, "Unhandled FaceTime availability status: %s", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy();
      uint64_t v34 = v31;
      unint64_t v20 = v59;
      MEMORY[0x1C87760E0](v34, -1, -1);
      uint64_t v35 = v30;
      a9 = v60;
      MEMORY[0x1C87760E0](v35, -1, -1);
    }
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)a10);

    a4 = v62;
LABEL_23:
    ++v18;
  }
  while (a3 != a9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v41 = v53;
  id v40 = v54;
  if (v50)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    id v38 = 0;
    id v39 = v55;
    a9 = v56;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();

  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  a9 = v56;
LABEL_34:
  *(void *)a9 = v42;
  *((void *)a9 + 1) = v43;
  *((void *)a9 + 2) = v44;
  *((void *)a9 + 3) = v36;
  *((void *)a9 + 4) = v37;
}

uint64_t partial apply for specialized closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1)
{
  return specialized closure #2 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(a1, (uint64_t *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C31CC9A4()
{
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(uint64_t a1)
{
  return specialized closure #1 in ClarityUIOutgoingCallActionProviderProtocol.outgoingCallActionsAndDestinationsToQuery(contact:)(a1, (uint64_t *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_21Tm()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)()
{
  closure #1 in ClarityUIOutgoingCallActionProviderProtocol.action(contact:callType:callProviderManager:callProvider:shouldIncludeEmailAddresses:availabilityHandler:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t objectdestroy_28Tm()
{
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

void one-time initialization function for htmlFragmentAdditions()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001C3799820;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6);

  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 1047539516;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  static LinkShareItemHTMLTextGenerator.htmlFragmentAdditions = 4091964;
  unk_1EA34C9D0 = 0xE300000000000000;
}

uint64_t static LinkShareItemHTMLTextGenerator.htmlFragment(forLinkShareItem:)(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v6 = (char *)v29 - v5;
  id v7 = objc_msgSend(a1, sel_tuConversationLink, MEMORY[0x1F4188790](v2).n128_f64[0]);
  id v8 = objc_msgSend(v7, sel_URL);

  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (char *)v29 - v12;
  if (!v8)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v29 - v12, 1, 1, v2);
    goto LABEL_7;
  }
  MEMORY[0x1F4188790](v10);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v13, (char *)v29 - v5, v2);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v2) == 1)
  {
LABEL_7:
    outlined destroy of URL?((uint64_t)v13);
    return 0;
  }
  v14(v6, v13, v2);
  unint64_t v15 = type metadata accessor for LPLinkHTMLTextGenerator();
  __n128 v16 = MEMORY[0x1F4188790](v15);
  id v17 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v3 + 16))(v17, v6, v2, v16);
  id v18 = LPLinkHTMLTextGenerator.__allocating_init(url:)((uint64_t)v17);
  id v19 = TULinkShareItem.linkMetadata.getter();
  objc_msgSend(v18, sel_setMetadata_, v19);

  if (one-time initialization token for htmlFragmentAdditions != -1) {
    swift_once();
  }
  uint64_t v21 = static LinkShareItemHTMLTextGenerator.htmlFragmentAdditions;
  uint64_t v20 = unk_1EA34C9D0;
  id v22 = objc_msgSend(v18, sel_HTMLFragmentString);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v25 = v24;

  v29[0] = v21;
  v29[1] = v20;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);

  swift_bridgeObjectRelease();
  uint64_t v27 = v29[0];
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v27;
}

unint64_t type metadata accessor for LPLinkHTMLTextGenerator()
{
  unint64_t result = lazy cache variable for type metadata for LPLinkHTMLTextGenerator;
  if (!lazy cache variable for type metadata for LPLinkHTMLTextGenerator)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LPLinkHTMLTextGenerator);
  }
  return result;
}

id LPLinkHTMLTextGenerator.__allocating_init(url:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  URL._bridgeToObjectiveC()(v3);
  unint64_t v5 = v4;
  id v6 = objc_msgSend(v2, sel_initWithURL_, v4);

  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

uint64_t LinkShareItemHTMLTextGenerator.deinit()
{
  return v0;
}

uint64_t LinkShareItemHTMLTextGenerator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LinkShareItemHTMLTextGenerator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LinkShareItemHTMLTextGenerator.init()()
{
  return v0;
}

uint64_t type metadata accessor for LinkShareItemHTMLTextGenerator()
{
  return self;
}

uint64_t method lookup function for LinkShareItemHTMLTextGenerator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkShareItemHTMLTextGenerator);
}

uint64_t dispatch thunk of LinkShareItemHTMLTextGenerator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t *OngoingTelephonyControlsView.Constants.avatarDiameter.unsafeMutableAddressor()
{
  if (one-time initialization token for avatarDiameter != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.avatarDiameter;
}

double static OngoingTelephonyControlsView.Constants.avatarDiameter.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for avatarDiameter, (uint64_t)&static OngoingTelephonyControlsView.Constants.avatarDiameter);
}

long long *OngoingTelephonyControlsView.Constants.avatarMargins.unsafeMutableAddressor()
{
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.avatarMargins;
}

double static OngoingTelephonyControlsView.Constants.avatarMargins.getter()
{
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  return *(double *)&static OngoingTelephonyControlsView.Constants.avatarMargins;
}

uint64_t *OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer.unsafeMutableAddressor()
{
  if (one-time initialization token for brandedIconTrailingSpacer != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer;
}

double static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for brandedIconTrailingSpacer, (uint64_t)&static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer);
}

void one-time initialization function for textTopInset()
{
  static OngoingTelephonyControlsView.Constants.textTopInset = 0x4031000000000000;
}

uint64_t *OngoingTelephonyControlsView.Constants.textTopInset.unsafeMutableAddressor()
{
  if (one-time initialization token for textTopInset != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.textTopInset;
}

double static OngoingTelephonyControlsView.Constants.textTopInset.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for textTopInset, (uint64_t)&static OngoingTelephonyControlsView.Constants.textTopInset);
}

uint64_t *OngoingTelephonyControlsView.Constants.textBottomInset.unsafeMutableAddressor()
{
  if (one-time initialization token for textBottomInset != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.textBottomInset;
}

double static OngoingTelephonyControlsView.Constants.textBottomInset.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for textBottomInset, (uint64_t)&static OngoingTelephonyControlsView.Constants.textBottomInset);
}

uint64_t *OngoingTelephonyControlsView.Constants.minimumTextWidth.unsafeMutableAddressor()
{
  if (one-time initialization token for minimumTextWidth != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.minimumTextWidth;
}

double static OngoingTelephonyControlsView.Constants.minimumTextWidth.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for minimumTextWidth, (uint64_t)&static OngoingTelephonyControlsView.Constants.minimumTextWidth);
}

uint64_t *OngoingTelephonyControlsView.Constants.statusTextColor.unsafeMutableAddressor()
{
  if (one-time initialization token for statusTextColor != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.statusTextColor;
}

id static OngoingTelephonyControlsView.Constants.statusTextColor.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for statusTextColor, (void **)&static OngoingTelephonyControlsView.Constants.statusTextColor);
}

uint64_t *OngoingTelephonyControlsView.Constants.durationTextColor.unsafeMutableAddressor()
{
  if (one-time initialization token for durationTextColor != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.durationTextColor;
}

id static OngoingTelephonyControlsView.Constants.durationTextColor.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for durationTextColor, (void **)&static OngoingTelephonyControlsView.Constants.durationTextColor);
}

uint64_t *OngoingTelephonyControlsView.Constants.actionDiameter.unsafeMutableAddressor()
{
  if (one-time initialization token for actionDiameter != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.actionDiameter;
}

double static OngoingTelephonyControlsView.Constants.actionDiameter.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for actionDiameter, (uint64_t)&static OngoingTelephonyControlsView.Constants.actionDiameter);
}

long long *OngoingTelephonyControlsView.Constants.actionMargins.unsafeMutableAddressor()
{
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.actionMargins;
}

double static OngoingTelephonyControlsView.Constants.actionMargins.getter()
{
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  return *(double *)&static OngoingTelephonyControlsView.Constants.actionMargins;
}

uint64_t *OngoingTelephonyControlsView.Constants.interActionPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for interActionPadding != -1) {
    swift_once();
  }
  return &static OngoingTelephonyControlsView.Constants.interActionPadding;
}

double static OngoingTelephonyControlsView.Constants.interActionPadding.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for interActionPadding, (uint64_t)&static OngoingTelephonyControlsView.Constants.interActionPadding);
}

void OngoingTelephonyControlsView.avatarView.setter(uint64_t a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView) = a1;
}

char *OngoingTelephonyControlsView.__allocating_init(recipe:controlsManager:menuHostViewController:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return OngoingTelephonyControlsView.init(recipe:controlsManager:menuHostViewController:)(a1, a2, a3, a4);
}

char *OngoingTelephonyControlsView.init(recipe:controlsManager:menuHostViewController:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  v65[1] = a4;
  id v69 = a3;
  uint64_t v7 = type metadata accessor for ConversationControlsAction();
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView] = 0;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel;
  type metadata accessor for UILabel();
  uint64_t v11 = self;
  double v12 = *MEMORY[0x1E4FB09D0];
  uint64_t v13 = v4;
  id v14 = objc_msgSend(v11, sel_systemFontOfSize_weight_, 16.67, v12);
  v73.value.super.Class isa = (Class)objc_msgSend(self, sel_whiteColor);
  UILabel.init(font:textColor:)(v15, (UIFont)v14, v73);
  uint64_t v66 = v10;
  uint64_t v67 = v4;
  *(void *)&v4[v10] = v16;
  uint64_t v17 = OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_secondaryLabel;
  id v18 = objc_msgSend(v11, sel_monospacedDigitSystemFontOfSize_weight_, 14.0, *MEMORY[0x1E4FB09E0]);
  if (one-time initialization token for statusTextColor != -1) {
    swift_once();
  }
  id v19 = (objc_class *)static OngoingTelephonyControlsView.Constants.statusTextColor;
  id v20 = (id)static OngoingTelephonyControlsView.Constants.statusTextColor;
  v74.value.super.Class isa = v19;
  UILabel.init(font:textColor:)(v21, (UIFont)v18, v74);
  *(void *)&v13[v17] = v22;
  v65[0] = v17;
  v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_context] = 1;
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_cnkContentAlpha] = 0x3FF0000000000000;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_recipe]);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_controlsManager] = a2;
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = one-time initialization token for conversationKit;
  char v24 = a2;
  uint64_t v68 = a1;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = unk_1EA37DFA0;
  Swift::String v26 = (void *)qword_1EA37DFA8;
  id v27 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v75._object = (void *)0xE000000000000000;
  v28._object = (void *)0x80000001C3792C70;
  v28._uint64_t countAndFlagsBits = 0xD000000000000015;
  v29.value._uint64_t countAndFlagsBits = v25;
  v29.value._object = v26;
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v75._uint64_t countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v75);
  swift_bridgeObjectRelease();

  ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
  id v33 = v32;
  outlined bridged method (mbgnn) of @objc NSObject.accessibilityLabel.setter(v31._countAndFlagsBits, (uint64_t)v31._object, v33);
  swift_bridgeObjectRelease();

  _s15ConversationKit0A14ControlsActionOWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ConversationControlsAction);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_changeRouteButton] = v33;
  static ConversationControlsAction.rejectCall(controlsManager:)(v24, v9);
  uint64_t v34 = unk_1EA37DFA0;
  uint64_t v35 = (void *)qword_1EA37DFA8;
  id v36 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v76._object = (void *)0xE000000000000000;
  v37._uint64_t countAndFlagsBits = 0x5F474E41485F5841;
  v37._object = (void *)0xEA00000000005055;
  v38.value._uint64_t countAndFlagsBits = v34;
  v38.value._object = v35;
  v39._uint64_t countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v76._uint64_t countAndFlagsBits = 0;
  Swift::String v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, (NSBundle)v36, v39, v76);
  swift_bridgeObjectRelease();

  ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
  id v42 = v41;
  outlined bridged method (mbgnn) of @objc NSObject.accessibilityLabel.setter(v40._countAndFlagsBits, (uint64_t)v40._object, v42);
  swift_bridgeObjectRelease();

  _s15ConversationKit0A14ControlsActionOWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ConversationControlsAction);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_hangUpButton] = v42;
  objc_msgSend(*(id *)&v67[v66], sel_setAttributedText_, *(void *)(v68 + 80));
  type metadata accessor for BrandedIconView();
  unint64_t v43 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v24) + 0x270);
  uint64_t v44 = (objc_class *)v43();
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_brandedIconView] = BrandedIconView.__allocating_init(telephonyCall:)(v44, v45);
  uint64_t v46 = type metadata accessor for DurationLabelController();
  uint64_t v47 = v43();
  uint64_t v49 = v48;
  uint64_t ObjectType = swift_getObjectType();
  v72[3] = ObjectType;
  uint64_t v51 = *(void *)(v49 + 8);
  v72[4] = v51;
  v72[0] = v47;
  uint64_t v52 = one-time initialization token for durationTextColor;
  id v53 = *(id *)&v13[v65[0]];
  if (v52 != -1) {
    swift_once();
  }
  uint64_t v54 = (void *)static OngoingTelephonyControlsView.Constants.durationTextColor;
  uint64_t v71 = v47;
  swift_unknownObjectRetain();
  id v55 = v54;
  uint64_t v56 = specialized DurationLabelController.__allocating_init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)(&v71, v53, v54, 0, 0, 0, v46, ObjectType, v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_durationController] = v56;
  uint64_t v57 = *(void (**)(uint64_t))(*(void *)v56 + 248);
  uint64_t v58 = swift_retain();
  v57(v58);
  swift_release();

  unint64_t v59 = (objc_class *)type metadata accessor for OngoingTelephonyControlsView();
  v70.receiver = v13;
  v70.super_class = v59;
  uint64_t v60 = (char *)objc_msgSendSuper2(&v70, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  OngoingTelephonyControlsView.updateAvatarView()();
  objc_msgSend(v60, sel_addSubview_, *(void *)&v60[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_secondaryLabel]);
  OUTLINED_FUNCTION_11_32(OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel);
  OUTLINED_FUNCTION_11_32(OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_changeRouteButton);
  OUTLINED_FUNCTION_11_32(OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_hangUpButton);
  uint64_t v61 = *(void **)&v60[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_brandedIconView];
  if (v61)
  {
    unint64_t v62 = v60;
    id v63 = v61;
    objc_msgSend(v62, sel_addSubview_, v63);
  }
  _s15ConversationKit0A14ControlsActionOWOhTm_1(v68, (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
  return v60;
}

id OngoingTelephonyControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void OngoingTelephonyControlsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel;
  type metadata accessor for UILabel();
  id v2 = self;
  id v3 = objc_msgSend(v2, sel_systemFontOfSize_weight_, 16.67, *MEMORY[0x1E4FB09D0]);
  v12.value.super.Class isa = (Class)objc_msgSend(self, sel_whiteColor);
  UILabel.init(font:textColor:)(v4, (UIFont)v3, v12);
  *(void *)&v0[v1] = v5;
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_secondaryLabel;
  id v7 = objc_msgSend(v2, sel_monospacedDigitSystemFontOfSize_weight_, 14.0, *MEMORY[0x1E4FB09E0]);
  if (one-time initialization token for statusTextColor != -1) {
    swift_once();
  }
  uint64_t v8 = (objc_class *)static OngoingTelephonyControlsView.Constants.statusTextColor;
  id v9 = (id)static OngoingTelephonyControlsView.Constants.statusTextColor;
  v13.value.super.Class isa = v8;
  UILabel.init(font:textColor:)(v10, (UIFont)v7, v13);
  *(void *)&v0[v6] = v11;
  v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_context] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_cnkContentAlpha] = 0x3FF0000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id OngoingTelephonyControlsView.controlsManager.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_controlsManager);
}

uint64_t OngoingTelephonyControlsView.context.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_context);
}

void key path getter for OngoingTelephonyControlsView.cnkContentAlpha : OngoingTelephonyControlsView(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
}

uint64_t key path setter for OngoingTelephonyControlsView.cnkContentAlpha : OngoingTelephonyControlsView(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

id OngoingTelephonyControlsView.cnkContentAlpha.didset()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView];
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v0, sel_alpha);
    objc_msgSend(v2, sel_setAlpha_);
  }
  id v3 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_secondaryLabel];
  objc_msgSend(v0, sel_alpha);
  objc_msgSend(v3, sel_setAlpha_);
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel];
  objc_msgSend(v0, sel_alpha);
  objc_msgSend(v4, sel_setAlpha_);
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_changeRouteButton];
  objc_msgSend(v0, sel_alpha);
  objc_msgSend(v5, sel_setAlpha_);
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_hangUpButton];
  objc_msgSend(v0, sel_alpha);
  return objc_msgSend(v6, sel_setAlpha_);
}

double OngoingTelephonyControlsView.cnkContentAlpha.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_cnkContentAlpha;
  swift_beginAccess();
  return *(double *)v1;
}

id OngoingTelephonyControlsView.cnkContentAlpha.setter(double a1)
{
  id v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_cnkContentAlpha);
  swift_beginAccess();
  double *v3 = a1;
  return OngoingTelephonyControlsView.cnkContentAlpha.didset();
}

uint64_t (*OngoingTelephonyControlsView.cnkContentAlpha.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return OngoingTelephonyControlsView.cnkContentAlpha.modify;
}

uint64_t OngoingTelephonyControlsView.cnkContentAlpha.modify(uint64_t a1, char a2)
{
  return OngoingTelephonyControlsView.cnkContentAlpha.modify(a1, a2, (uint64_t (*)(uint64_t))OngoingTelephonyControlsView.cnkContentAlpha.didset);
}

uint64_t key path getter for OngoingTelephonyControlsView.recipe : OngoingTelephonyControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
}

uint64_t key path setter for OngoingTelephonyControlsView.recipe : OngoingTelephonyControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(v6);
}

id OngoingTelephonyControlsView.recipe.didset()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v41[0] = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = _typeName(_:qualified:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "[%{public}s.recipe.didSet] Updating recipe on existing instance may not result in the expected experience.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v6, -1, -1);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  uint64_t v9 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_recipe];
  swift_beginAccess();
  outlined init with copy of ConversationControlsType(v9, (uint64_t)v41);
  uint64_t v37 = 7;
  long long v38 = 0u;
  long long v39 = 0u;
  char v40 = 6;
  char v10 = static ConversationControlsType.== infix(_:_:)((uint64_t)v41);
  outlined destroy of ConversationControlsType((uint64_t)&v37);
  outlined destroy of ConversationControlsType((uint64_t)v41);
  if ((v10 & 1) == 0)
  {
    outlined init with copy of ConversationControlsType(v9, (uint64_t)v41);
    uint64_t v37 = 9;
    long long v38 = 0u;
    long long v39 = 0u;
    char v40 = 6;
    char v11 = static ConversationControlsType.== infix(_:_:)((uint64_t)v41);
    outlined destroy of ConversationControlsType((uint64_t)&v37);
    outlined destroy of ConversationControlsType((uint64_t)v41);
    if ((v11 & 1) == 0)
    {
      UIColor_optional v12 = v0;
      UIColor_optional v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = v36;
        *(_DWORD *)uint64_t v15 = 136446466;
        uint64_t v16 = _typeName(_:qualified:)();
        v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        outlined init with copy of ConversationControlsType(v9, (uint64_t)v41);
        uint64_t v18 = specialized >> prefix<A>(_:)((uint64_t)v41);
        unint64_t v20 = v19;
        outlined destroy of ConversationControlsType?((uint64_t)v41);
        v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v13, v14, "[%{public}s.recipe.didSet] Applied invalid recipe type %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v36, -1, -1);
        MEMORY[0x1C87760E0](v15, -1, -1);
      }
      else
      {
      }
    }
  }
  unint64_t v21 = *(void *)(v9 + 88);
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v35) {
      goto LABEL_15;
    }
  }
  else if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_15;
  }
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    char v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v41[0] = v25;
    *(_DWORD *)char v24 = 136446210;
    uint64_t v26 = _typeName(_:qualified:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v22, v23, "[%{public}s.recipe.didSet] Ignoring recipe subtitles which is currently unsupported per design.", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v25, -1, -1);
    MEMORY[0x1C87760E0](v24, -1, -1);
  }

LABEL_15:
  if (*(void *)(v9 + *(int *)(type metadata accessor for ConversationControlsRecipe() + 40)))
  {
    Swift::String v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Swift::String v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v41[0] = v31;
      *(_DWORD *)Swift::String v30 = 136446210;
      uint64_t v32 = _typeName(_:qualified:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v28, v29, "[%{public}s.recipe.didSet] Ignoring recipe subtitleLeadingBadge which is unsupported per design", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v31, -1, -1);
      MEMORY[0x1C87760E0](v30, -1, -1);
    }
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel], sel_setAttributedText_, *(void *)(v9 + 80));
  OngoingTelephonyControlsView.updateAvatarView()();
  return objc_msgSend(v1, sel_setNeedsLayout);
}

uint64_t OngoingTelephonyControlsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t OngoingTelephonyControlsView.recipe.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_recipe;
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v3);
  swift_endAccess();
  OngoingTelephonyControlsView.recipe.didset();
  return _s15ConversationKit0A14ControlsActionOWOhTm_1(a1, (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t (*OngoingTelephonyControlsView.recipe.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return OngoingTelephonyControlsView.recipe.modify;
}

uint64_t OngoingTelephonyControlsView.recipe.modify(uint64_t a1, char a2)
{
  return OngoingTelephonyControlsView.cnkContentAlpha.modify(a1, a2, (uint64_t (*)(uint64_t))OngoingTelephonyControlsView.recipe.didset);
}

uint64_t OngoingTelephonyControlsView.cnkContentAlpha.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

Swift::Void __swiftcall OngoingTelephonyControlsView.layoutSubviews()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  v234.receiver = v0;
  v234.super_class = (Class)type metadata accessor for OngoingTelephonyControlsView();
  objc_msgSendSuper2(&v234, sel_layoutSubviews);
  if (one-time initialization token for avatarDiameter != -1) {
    swift_once();
  }
  uint64_t v2 = static OngoingTelephonyControlsView.Constants.avatarDiameter;
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  uint64_t v3 = *((void *)&static OngoingTelephonyControlsView.Constants.avatarMargins + 1);
  OUTLINED_FUNCTION_6_61();
  double v4 = (CGRectGetHeight(v235) - *(double *)&v2) * 0.5;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView;
  double v6 = OUTLINED_FUNCTION_16_27();
  objc_msgSend(v7, v8, v6);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationControls);
  char v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v179 = v5;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = OUTLINED_FUNCTION_15_1();
    v233[0] = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v13 = OUTLINED_FUNCTION_9_45();
    OUTLINED_FUNCTION_21_24(v13, v14, v15, v16, v17, v18, v19, v20, v171, v175, v5, v183, rect, (uint64_t)v193, v198, v203, v207, v211, v216,
      v220,
      ObjectType,
      v227,
      v230,
      v231,
      v232,
      v233[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    type metadata accessor for CGRect(0);
    uint64_t v21 = String.init<A>(reflecting:)();
    uint64_t v227 = OUTLINED_FUNCTION_21_24(v21, v22, v23, v24, v25, v26, v27, v28, v172, v176, v180, v184, rectb, (uint64_t)v194, v199, v204, v208, v212, v217,
             v221,
             v225,
             v3,
             *(uint64_t *)&v4,
             v2,
             v2,
             v233[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v10, v11, "[%{public}s][layout] leadingFrame is %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (one-time initialization token for actionDiameter != -1) {
    swift_once();
  }
  double v29 = *(double *)&static OngoingTelephonyControlsView.Constants.actionDiameter;
  OUTLINED_FUNCTION_6_61();
  double Width = CGRectGetWidth(v236);
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  double v31 = Width - *(double *)&qword_1EA37E0E8 - v29;
  OUTLINED_FUNCTION_6_61();
  double v32 = (CGRectGetHeight(v237) - v29) * 0.5;
  unint64_t v33 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_hangUpButton];
  OUTLINED_FUNCTION_23_25(v33, sel_setFrame_);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  v205 = v33;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = OUTLINED_FUNCTION_15_1();
    v233[0] = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v36 = 136446466;
    uint64_t v37 = OUTLINED_FUNCTION_9_45();
    OUTLINED_FUNCTION_21_24(v37, v38, v39, v40, v41, v42, v43, v44, v171, v175, v179, v183, rect, (uint64_t)v193, v198, (uint64_t)v33, v207, v211, v216,
      v220,
      ObjectType,
      v227,
      v230,
      v231,
      v232,
      v233[0]);
    OUTLINED_FUNCTION_12_35();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    type metadata accessor for CGRect(0);
    uint64_t v45 = String.init<A>(reflecting:)();
    OUTLINED_FUNCTION_21_24(v45, v46, v47, v48, v49, v50, v51, v52, v173, v177, v181, v185, rectc, (uint64_t)v195, v200, v206, v209, v213, v218,
      v222,
      v226,
      *(uint64_t *)&v31,
      *(uint64_t *)&v32,
      *(uint64_t *)&v29,
      *(uint64_t *)&v29,
      v233[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v34, v35, "[%{public}s][layout] hangUpFrame is %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  v238.origin.double x = v31;
  v238.origin.double y = v32;
  v238.size.width = v29;
  v238.size.height = v29;
  CGRectGetMinX(v238);
  if (one-time initialization token for interActionPadding != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_6_61();
  CGRectGetHeight(v239);
  id v53 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_changeRouteButton];
  OUTLINED_FUNCTION_23_25(v53, sel_setFrame_);
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  v201 = v53;
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = OUTLINED_FUNCTION_15_1();
    v233[0] = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v56 = 136446466;
    uint64_t v57 = OUTLINED_FUNCTION_9_45();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v233);
    OUTLINED_FUNCTION_12_35();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    type metadata accessor for CGRect(0);
    uint64_t v59 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v54, v55, "[%{public}s][layout] changeRouteFrame is %s", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  CGFloat v210 = v4;
  CGFloat v214 = *(double *)&v3;
  v240.origin.double x = OUTLINED_FUNCTION_16_27();
  double MaxX = CGRectGetMaxX(v240);
  double v62 = *(double *)&qword_1EA37E088;
  double v63 = *((double *)&static OngoingTelephonyControlsView.Constants.actionMargins + 1);
  double v64 = *(double *)&static OngoingTelephonyControlsView.Constants.actionDiameter;
  double v65 = *(double *)&static OngoingTelephonyControlsView.Constants.interActionPadding;
  double v66 = *(double *)&qword_1EA37E0E8;
  OUTLINED_FUNCTION_6_61();
  double v67 = CGRectGetWidth(v241);
  uint64_t v68 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel];
  id v69 = objc_msgSend(v68, sel_font);
  if (v69)
  {
    objc_super v70 = v69;
    double v223 = MaxX + v62;
    double v71 = v67 - (v66 + v64 + v63 + v64 + v65) - (MaxX + v62);
    objc_msgSend(v69, sel_lineHeight);
    double v73 = v72;

    UIColor_optional v74 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_brandedIconView];
    double v75 = 0.0;
    CGFloat recta = *(double *)&v2;
    if (v74)
    {
      if (one-time initialization token for iconSize != -1) {
        swift_once();
      }
      double v77 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
      double v76 = *(double *)&static BrandedIconView.Constants.iconSize;
      if (*(double *)&static BrandedIconView.Constants.iconSize > 0.0)
      {
        if (one-time initialization token for brandedIconTrailingSpacer != -1) {
          swift_once();
        }
        double v75 = v76 + *(double *)&static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer;
      }
    }
    else
    {
      double v76 = 0.0;
      double v77 = 0.0;
    }
    double v186 = v71;
    OUTLINED_FUNCTION_6_61();
    CGFloat Height = CGRectGetHeight(v242);
    double v79 = (*(double (**)(double, double))(**(void **)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_durationController]
                                                   + 224))(v71 - v75, Height - v73);
    double v81 = v80;
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.debug.getter();
    id v196 = v68;
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v84 = 136446466;
      uint64_t v85 = OUTLINED_FUNCTION_9_45();
      OUTLINED_FUNCTION_20_25(v85, v86, v87, v88, v89, v90, v91, v92, v171, v175, v179, *(uint64_t *)&v71, *(uint64_t *)&recta, (uint64_t)v68, (uint64_t)v53);
      OUTLINED_FUNCTION_4_65();
      swift_bridgeObjectRelease();
      *(_WORD *)(v84 + 12) = 2048;
      *(double *)v233 = v75 + v79;
      OUTLINED_FUNCTION_19_29();
      _os_log_impl(&dword_1C2F90000, v82, v83, "[%{public}s][layout] textWidth: %f", (uint8_t *)v84, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    double v93 = v223 + v75;
    OUTLINED_FUNCTION_6_61();
    double v94 = (CGRectGetHeight(v243) - v81 - v73) * 0.5;
    long long v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v97 = 136446466;
      uint64_t v98 = OUTLINED_FUNCTION_9_45();
      OUTLINED_FUNCTION_20_25(v98, v99, v100, v101, v102, v103, v104, v105, v171, v175, v179, *(uint64_t *)&v186, *(uint64_t *)&recta, (uint64_t)v196, (uint64_t)v201);
      OUTLINED_FUNCTION_4_65();
      swift_bridgeObjectRelease();
      *(_WORD *)(v97 + 12) = 2080;
      OUTLINED_FUNCTION_5_68();
      uint64_t v106 = CGRect.description.getter();
      v233[0] = OUTLINED_FUNCTION_20_25(v106, v107, v108, v109, v110, v111, v112, v113, v174, v178, v182, v187, rectd, (uint64_t)v197, v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v95, v96, "[%{public}s][layout] secondaryFrame: %s", (uint8_t *)v97, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    v114 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_secondaryLabel];
    double v115 = OUTLINED_FUNCTION_5_68();
    objc_msgSend(v116, v117, v115);
    CGFloat v219 = v79;
    if (v74)
    {
      *(double *)&uint64_t v175 = v73;
      id v118 = v74;
      objc_msgSend(v118, sel_setBounds_, 0.0, 0.0, v76, v77);
      id v119 = v118;
      v244.origin.double x = v93;
      v244.origin.double y = v94;
      v244.size.width = v79;
      v244.size.height = v81;
      double MinX = CGRectGetMinX(v244);
      if (one-time initialization token for brandedIconTrailingSpacer != -1) {
        swift_once();
      }
      double v121 = MinX - *(double *)&static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer + v76 * -0.5;
      objc_msgSend(v114, sel_center);
      objc_msgSend(v119, sel_setCenter_, v121);

      double v73 = *(double *)&v175;
    }
    v245.origin.double x = OUTLINED_FUNCTION_5_68();
    double MaxY = CGRectGetMaxY(v245);
    double v123 = v73;
    if (v74)
    {
      objc_msgSend(v74, sel_frame);
      double v124 = CGRectGetMaxY(v246);
    }
    else
    {
      double v124 = 2.22507386e-308;
    }
    if (MaxY > v124) {
      double v125 = MaxY;
    }
    else {
      double v125 = v124;
    }
    v126 = v196;
    objc_msgSend(v196, sel_setFrame_, v223, v125, v186, v123);
    v247.origin.double y = v210;
    v247.origin.double x = v214;
    v247.size.width = recta;
    v247.size.height = recta;
    double v215 = CGRectGetMaxY(v247);
    double v127 = *(double *)&qword_1EA37E080;
    v248.origin.double x = v223;
    v248.origin.double y = v125;
    v248.size.width = v186;
    v248.size.height = v123;
    double v128 = CGRectGetMaxY(v248);
    v249.origin.double x = v93;
    v249.origin.double y = v94;
    v249.size.width = v219;
    v249.size.height = v81;
    double MinY = CGRectGetMinY(v249);
    double v130 = *(double *)&static OngoingTelephonyControlsView.Constants.actionMargins;
    double v131 = *(double *)&static OngoingTelephonyControlsView.Constants.actionDiameter;
    double v132 = *(double *)&qword_1EA37E0E0;
    v133 = Logger.logObject.getter();
    os_log_type_t v134 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v133, v134))
    {
      uint64_t v135 = swift_slowAlloc();
      OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v135 = 136446978;
      uint64_t v136 = OUTLINED_FUNCTION_9_45();
      OUTLINED_FUNCTION_20_25(v136, v137, v138, v139, v140, v141, v142, v143, v171, v175, v179, *(uint64_t *)&v186, *(uint64_t *)&recta, (uint64_t)v196, (uint64_t)v201);
      OUTLINED_FUNCTION_4_65();
      swift_bridgeObjectRelease();
      *(_WORD *)(v135 + 12) = 2048;
      *(double *)v233 = v215 + v127;
      OUTLINED_FUNCTION_19_29();
      *(_WORD *)(v135 + 22) = 2048;
      *(double *)v233 = v128 + MinY;
      OUTLINED_FUNCTION_19_29();
      *(_WORD *)(v135 + 32) = 2048;
      *(double *)v233 = v130 + v131 + v132;
      OUTLINED_FUNCTION_19_29();
      _os_log_impl(&dword_1C2F90000, v133, v134, "[%{public}s][layout] avatarMaxY: %f, textMaxY: %f, %f", (uint8_t *)v135, 0x2Au);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    if (objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C3769B20;
      v145 = *(void **)&v1[v179];
      *(void *)(inited + 32) = v145;
      *(void *)(inited + 40) = v114;
      *(void *)(inited + 48) = v126;
      *(void *)(inited + 56) = v201;
      *(void *)(inited + 64) = v205;
      *(void *)(inited + 72) = v74;
      v228 = (void *)inited;
      specialized Array._endMutation()();
      v146 = v228;
      unint64_t v229 = MEMORY[0x1E4FBC860];
      v147 = (void *)v146[4];
      if (v147)
      {
        id v148 = v147;
        id v149 = v74;
        id v150 = v145;
        id v151 = v114;
        id v152 = v126;
        id v153 = v201;
        MEMORY[0x1C87733A0](v205);
        OUTLINED_FUNCTION_2_65();
        if (v154) {
          OUTLINED_FUNCTION_0_61();
        }
        OUTLINED_FUNCTION_3_78();
        specialized Array._endMutation()();
      }
      else
      {
        id v155 = v145;
        id v156 = v114;
        id v157 = v126;
        id v158 = v201;
        id v159 = v205;
        id v160 = v74;
      }
      v161 = (void *)v146[5];
      if (v161)
      {
        id v162 = v161;
        OUTLINED_FUNCTION_13_37();
        OUTLINED_FUNCTION_2_65();
        if (v154) {
          OUTLINED_FUNCTION_0_61();
        }
        OUTLINED_FUNCTION_3_78();
        specialized Array._endMutation()();
      }
      v163 = (void *)v146[6];
      if (v163)
      {
        id v164 = v163;
        OUTLINED_FUNCTION_13_37();
        OUTLINED_FUNCTION_2_65();
        if (v154) {
          OUTLINED_FUNCTION_0_61();
        }
        OUTLINED_FUNCTION_3_78();
        specialized Array._endMutation()();
      }
      v165 = (void *)v146[7];
      if (v165)
      {
        id v166 = v165;
        OUTLINED_FUNCTION_13_37();
        OUTLINED_FUNCTION_2_65();
        if (v154) {
          OUTLINED_FUNCTION_0_61();
        }
        OUTLINED_FUNCTION_3_78();
        specialized Array._endMutation()();
      }
      v167 = (void *)v146[8];
      if (v167)
      {
        id v168 = v167;
        OUTLINED_FUNCTION_13_37();
        OUTLINED_FUNCTION_2_65();
        if (v154) {
          OUTLINED_FUNCTION_0_61();
        }
        OUTLINED_FUNCTION_3_78();
        specialized Array._endMutation()();
      }
      v169 = (void *)v146[9];
      if (v169)
      {
        id v170 = v169;
        OUTLINED_FUNCTION_13_37();
        OUTLINED_FUNCTION_2_65();
        if (v154) {
          OUTLINED_FUNCTION_0_61();
        }
        OUTLINED_FUNCTION_3_78();
        specialized Array._endMutation()();
      }
      swift_bridgeObjectRelease();
      specialized Sequence.forEach(_:)(v229, v1);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

CGSize __swiftcall OngoingTelephonyControlsView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  swift_getObjectType();
  if (height <= 2.22507386e-308) {
    double height = 1.79769313e308;
  }
  double v93 = width;
  double v94 = height;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
  double v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = OUTLINED_FUNCTION_15_1();
    uint64_t v90 = OUTLINED_FUNCTION_14_3();
    uint64_t v7 = OUTLINED_FUNCTION_17_30(4.8752e-34);
    OUTLINED_FUNCTION_22_23(v7, v8, v9, v10, v11, v12, v13);
    OUTLINED_FUNCTION_8_40();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    double v92 = height;
    type metadata accessor for CGSize(0);
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v91 = OUTLINED_FUNCTION_22_23(v14, v15, v16, v17, v18, v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_9(&dword_1C2F90000, v21, v22, "[%{public}s][sizing] sizingThatFits %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (one-time initialization token for actionDiameter != -1) {
    swift_once();
  }
  uint64_t v23 = static OngoingTelephonyControlsView.Constants.actionDiameter;
  if (one-time initialization token for interActionPadding != -1)
  {
    swift_once();
    uint64_t v23 = static OngoingTelephonyControlsView.Constants.actionDiameter;
  }
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = OUTLINED_FUNCTION_15_1();
    uint64_t v90 = OUTLINED_FUNCTION_14_3();
    uint64_t v27 = OUTLINED_FUNCTION_17_30(4.8752e-34);
    OUTLINED_FUNCTION_22_23(v27, v28, v29, v30, v31, v32, v33);
    OUTLINED_FUNCTION_8_40();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    double v92 = *(double *)&v23;
    type metadata accessor for CGSize(0);
    uint64_t v34 = String.init<A>(reflecting:)();
    uint64_t v91 = OUTLINED_FUNCTION_22_23(v34, v35, v36, v37, v38, v39, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_9(&dword_1C2F90000, v41, v42, "[%{public}s][sizing] actionsSize is  %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  double v43 = *((double *)&static OngoingTelephonyControlsView.Constants.avatarMargins + 1);
  if (one-time initialization token for avatarDiameter != -1) {
    swift_once();
  }
  double v44 = v43 + *(double *)&static OngoingTelephonyControlsView.Constants.avatarDiameter;
  double v45 = *(double *)&qword_1EA37E088;
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  double v46 = v44 + v45;
  double v47 = *(double *)&qword_1EA37E0E8
      + *(double *)&static OngoingTelephonyControlsView.Constants.actionDiameter
      + *((double *)&static OngoingTelephonyControlsView.Constants.actionMargins + 1)
      + *(double *)&static OngoingTelephonyControlsView.Constants.actionDiameter
      + *(double *)&static OngoingTelephonyControlsView.Constants.interActionPadding;
  double v48 = 0.0;
  if (*(void *)(v89 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_brandedIconView))
  {
    if (one-time initialization token for iconSize != -1) {
      swift_once();
    }
    double v50 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
    double v49 = *(double *)&static BrandedIconView.Constants.iconSize;
    if (*(double *)&static BrandedIconView.Constants.iconSize > 0.0)
    {
      if (one-time initialization token for brandedIconTrailingSpacer != -1) {
        swift_once();
      }
      double v48 = v49 + *(double *)&static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer;
    }
  }
  else
  {
    double v50 = 0.0;
  }
  double v86 = width;
  double v87 = v47;
  double v88 = v46;
  double v51 = width - v47 - v46;
  double v52 = v51 - v48;
  swift_beginAccess();
  objc_msgSend(*(id *)(v89 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_primaryLabel), sel_sizeThatFits_, v51, v94);
  double v54 = v53;
  double v56 = v55;
  objc_msgSend(*(id *)(v89 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_secondaryLabel), sel_sizeThatFits_, v52, v94 - v55);
  if (v54 > v57) {
    double v59 = v54;
  }
  else {
    double v59 = v57;
  }
  if (v58 > v50) {
    double v60 = v58;
  }
  else {
    double v60 = v50;
  }
  double v61 = v56 + v60;
  double v62 = *(double *)&static OngoingTelephonyControlsView.Constants.avatarMargins;
  double v63 = *(double *)&static OngoingTelephonyControlsView.Constants.avatarDiameter;
  double v64 = *(double *)&qword_1EA37E080;
  double v65 = *(double *)&static OngoingTelephonyControlsView.Constants.actionMargins;
  double v66 = *(double *)&static OngoingTelephonyControlsView.Constants.actionDiameter;
  double v67 = *(double *)&qword_1EA37E0E0;
  if (one-time initialization token for textTopInset != -1) {
    swift_once();
  }
  double v68 = v62 + v63;
  double v69 = v65 + v66;
  double v70 = v61 + *(double *)&static OngoingTelephonyControlsView.Constants.textTopInset;
  if (one-time initialization token for textBottomInset != -1) {
    swift_once();
  }
  double v71 = v68 + v64;
  double v72 = v69 + v67;
  double v73 = v70 + *(double *)&static OngoingTelephonyControlsView.Constants.textBottomInset;
  if (one-time initialization token for minimumTextWidth != -1) {
    swift_once();
  }
  double v74 = *(double *)&static OngoingTelephonyControlsView.Constants.minimumTextWidth;
  if (v59 > *(double *)&static OngoingTelephonyControlsView.Constants.minimumTextWidth) {
    double v74 = v59;
  }
  double v75 = v87 + v88 + v74;
  specialized max<A>(_:_:_:_:)(MEMORY[0x1E4FBC860], v71, v73, v72);
  double v77 = v76;
  uint64_t v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = OUTLINED_FUNCTION_9_0();
    uint64_t v90 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v80 = 136446722;
    uint64_t v81 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v80 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v80 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v78, v79, "[%{public}s][sizing] measuredWidth: %f, measuredHeight: %f", (uint8_t *)v80, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  double v83 = v86;
  if (v75 < v86) {
    double v83 = v75;
  }
  double v84 = v94;
  if (v77 < v94) {
    double v84 = v77;
  }
  result.double height = v84;
  result.double width = v83;
  return result;
}

id OngoingTelephonyControlsView.intrinsicContentSize.getter()
{
  return objc_msgSend(v0, sel_sizeThatFits_, 1.79769313e308, 1.79769313e308);
}

void OngoingTelephonyControlsView.updateAvatarView()()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v2 - 8);
  double v4 = (id *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)unint64_t v8 = 136446210;
    uint64_t v9 = _typeName(_:qualified:)();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v6, v7, "[%{public}s] updateAvatarView", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit28OngoingTelephonyControlsView_avatarView), sel_removeFromSuperview);
  OngoingTelephonyControlsView.avatarView.setter(0);
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE0))();
  if (v4[7])
  {
    id v11 = v4[7];
    _s15ConversationKit0A14ControlsActionOWOhTm_1((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
    id v12 = v11;
    OngoingTelephonyControlsView.avatarView.setter((uint64_t)v11);
    objc_msgSend(v1, sel_addSubview_, v12);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    _s15ConversationKit0A14ControlsActionOWOhTm_1((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
  }
}

id OngoingTelephonyControlsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void OngoingTelephonyControlsView.init(frame:)()
{
}

id OngoingTelephonyControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OngoingTelephonyControlsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.getter in conformance OngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.setter in conformance OngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t (*protocol witness for ControlsView.cnkContentAlpha.modify in conformance OngoingTelephonyControlsView(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for ControlsView.recipe.getter in conformance OngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t protocol witness for ControlsView.recipe.setter in conformance OngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t (*protocol witness for ControlsView.recipe.modify in conformance OngoingTelephonyControlsView(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t type metadata accessor for OngoingTelephonyControlsView()
{
  uint64_t result = type metadata singleton initialization cache for OngoingTelephonyControlsView;
  if (!type metadata singleton initialization cache for OngoingTelephonyControlsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for OngoingTelephonyControlsView()
{
  return type metadata accessor for OngoingTelephonyControlsView();
}

uint64_t type metadata completion function for OngoingTelephonyControlsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for OngoingTelephonyControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OngoingTelephonyControlsView);
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.__allocating_init(recipe:controlsManager:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.cnkContentAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.cnkContentAlpha.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.cnkContentAlpha.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of OngoingTelephonyControlsView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

ValueMetadata *type metadata accessor for OngoingTelephonyControlsView.Constants()
{
  return &type metadata for OngoingTelephonyControlsView.Constants;
}

uint64_t ZoomButton.body.getter(uint64_t a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ZStack<TupleView<(ModifiedContent<Image, _OpacityEffect>, ModifiedContent<Image, _OpacityEffect>)>>>);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = OUTLINED_FUNCTION_10_44();
  *(void *)(v11 + 16) = a1;
  *(unsigned char *)(v11 + 24) = a2 & 1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<Image, _OpacityEffect>, ModifiedContent<Image, _OpacityEffect>)>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<Image, _OpacityEffect>, ModifiedContent<Image, _OpacityEffect>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<Image, _OpacityEffect>, ModifiedContent<Image, _OpacityEffect>)>>);
  Button.init(action:label:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ZStack<TupleView<(ModifiedContent<Image, _OpacityEffect>, ModifiedContent<Image, _OpacityEffect>)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ZStack<TupleView<(ModifiedContent<Image, _OpacityEffect>, ModifiedContent<Image, _OpacityEffect>)>>>);
  lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle();
  View.buttonStyle<A>(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
}

uint64_t closure #1 in ZoomButton.body.getter()
{
  return swift_release();
}

uint64_t sub_1C31D0CE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ZoomButton.body.getter()
{
  return closure #1 in ZoomButton.body.getter();
}

uint64_t closure #1 in closure #1 in ZoomButton.body.getter()
{
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  objc_super v2 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 280))(v5);
  BOOL *v3 = !*v3;
  v2(v5, 0);
  return swift_release();
}

double closure #2 in ZoomButton.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  closure #1 in closure #2 in ZoomButton.body.getter((uint64_t)v9);
  uint64_t v5 = v9[0];
  double result = *(double *)&v9[1];
  uint64_t v7 = v9[2];
  uint64_t v8 = v9[3];
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  return result;
}

double partial apply for closure #2 in ZoomButton.body.getter@<D0>(uint64_t a1@<X8>)
{
  return closure #2 in ZoomButton.body.getter(a1);
}

uint64_t closure #1 in closure #2 in ZoomButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v4 = v3;
  uint64_t v5 = swift_release();
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v5);
  swift_release();
  if (v6) {
    double v7 = 1.0;
  }
  else {
    double v7 = 0.0;
  }
  uint64_t v8 = Image.init(systemName:)();
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v10 = v9;
  uint64_t v11 = swift_release();
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 264))(v11);
  uint64_t result = swift_release();
  *(void *)a1 = v2;
  if (v12) {
    double v14 = 0.0;
  }
  else {
    double v14 = 1.0;
  }
  *(double *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(double *)(a1 + 24) = v14;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ZoomButton()
{
  return ZoomButton.body.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void HomeButton.body.getter(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Image>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_63();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_21();
  uint64_t v12 = v11 - v10;
  swift_retain();
  specialized Environment.wrappedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_3_2();
  char v14 = (*(uint64_t (**)(void))(v13 + 864))();
  swift_release();
  if (v14)
  {
    uint64_t v15 = OUTLINED_FUNCTION_10_44();
    *(void *)(v15 + 16) = a1;
    *(unsigned char *)(v15 + 24) = v4 != 0;
    swift_retain();
    Button.init(action:label:)();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Image> and conformance Button<A>, &demangling cache variable for type metadata for Button<Image>);
    lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle();
    View.buttonStyle<A>(_:)();
    OUTLINED_FUNCTION_11_33();
    v16();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a3, v12, v6);
    __swift_storeEnumTagSinglePayload(a3, 0, 1, v6);
    OUTLINED_FUNCTION_28();
  }
  else
  {
    OUTLINED_FUNCTION_13_38();
    OUTLINED_FUNCTION_28();
    __swift_storeEnumTagSinglePayload(v17, v18, v19, v20);
  }
}

uint64_t closure #1 in HomeButton.body.getter()
{
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v1 = v0;
  uint64_t v2 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 872))(v2);
  return swift_release();
}

uint64_t partial apply for closure #1 in HomeButton.body.getter()
{
  return closure #1 in HomeButton.body.getter();
}

uint64_t closure #2 in HomeButton.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t ZoomButton.init()()
{
  return OUTLINED_FUNCTION_8_41();
}

void protocol witness for View.body.getter in conformance HomeButton(uint64_t a1@<X8>)
{
  HomeButton.body.getter(*(void *)v1, *(unsigned char *)(v1 + 8), a1);
}

void RemoteControlButton.body.getter(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = a2 & 1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Image>);
  OUTLINED_FUNCTION_4();
  uint64_t v34 = v7;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_63();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_21();
  uint64_t v19 = v18 - v17;
  swift_retain();
  specialized Environment.wrappedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_3_2();
  int v21 = (*(uint64_t (**)(void))(v20 + 752))();
  swift_release();
  if (RemoteControlRequirements.isComplete.getter(v21))
  {
    uint64_t v22 = OUTLINED_FUNCTION_10_44();
    *(void *)(v22 + 16) = a1;
    *(unsigned char *)(v22 + 24) = v5 != 0;
    swift_retain();
    Button.init(action:label:)();
    swift_retain();
    specialized Environment.wrappedValue.getter();
    swift_release();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(unint64_t *__return_ptr))(v23 + 648))(&v37);
    swift_release();
    outlined consume of RemoteControlState(v37);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Image> and conformance Button<A>, &demangling cache variable for type metadata for Button<Image>);
    lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle();
    View.buttonStyle<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v11, v6);
    swift_retain();
    specialized Environment.wrappedValue.getter();
    swift_release();
    OUTLINED_FUNCTION_3_2();
    char v25 = (*(uint64_t (**)(void))(v24 + 360))();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v27 = swift_allocObject();
    *(unsigned char *)(v27 + 16) = v25 & 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v19, v3, v35);
    unint64_t v28 = (uint64_t *)(v19 + *(int *)(v15 + 36));
    uint64_t *v28 = KeyPath;
    v28[1] = (uint64_t)_s7SwiftUI4ViewPAAE8disabledyQrSbFySbzcfU_TA_0;
    v28[2] = v27;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v35);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v19, a3, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
    __swift_storeEnumTagSinglePayload(a3, 0, 1, v15);
    OUTLINED_FUNCTION_28();
  }
  else
  {
    OUTLINED_FUNCTION_13_38();
    OUTLINED_FUNCTION_28();
    __swift_storeEnumTagSinglePayload(v29, v30, v31, v32);
  }
}

uint64_t closure #1 in RemoteControlButton.body.getter()
{
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v1 = v0;
  uint64_t v2 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 880))(v2);
  return swift_release();
}

uint64_t partial apply for closure #1 in RemoteControlButton.body.getter()
{
  return closure #1 in RemoteControlButton.body.getter();
}

uint64_t closure #2 in RemoteControlButton.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

void protocol witness for View.body.getter in conformance RemoteControlButton(uint64_t a1@<X8>)
{
  RemoteControlButton.body.getter(*(void *)v1, *(unsigned char *)(v1 + 8), a1);
}

uint64_t CompactScreenSharingSpectatorToolbar.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = OUTLINED_FUNCTION_10_44();
  OUTLINED_FUNCTION_14_32(v3);
  *(void *)a1 = swift_getKeyPath();
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = partial apply for closure #1 in CompactScreenSharingSpectatorToolbar.body.getter;
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = closure #2 in CompactScreenSharingSpectatorToolbar.body.getter;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = closure #2 in CompactScreenSharingSpectatorToolbar.body.getter;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = closure #2 in CompactScreenSharingSpectatorToolbar.body.getter;
  *(void *)(a1 + 72) = 0;
  return swift_retain();
}

uint64_t closure #2 in CompactScreenSharingSpectatorToolbar.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t result = OUTLINED_FUNCTION_9_46();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CompactScreenSharingSpectatorToolbar@<X0>(uint64_t a1@<X8>)
{
  return CompactScreenSharingSpectatorToolbar.body.getter(a1);
}

uint64_t RegularScreenSharingSpectatorToolbar.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = OUTLINED_FUNCTION_10_44();
  OUTLINED_FUNCTION_14_32(v3);
  *(void *)a1 = swift_getKeyPath();
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = partial apply for closure #1 in RegularScreenSharingSpectatorToolbar.body.getter;
  *(void *)(a1 + 24) = v1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = closure #2 in RegularScreenSharingSpectatorToolbar.body.getter;
  *(void *)(a1 + 72) = 0;
  return swift_retain();
}

uint64_t closure #1 in CompactScreenSharingSpectatorToolbar.body.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  specialized Environment.wrappedValue.getter();
  uint64_t v3 = v2;
  uint64_t v4 = swift_release();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 792))(v4);
  uint64_t v7 = v6;
  swift_release();
  uint64_t v8 = (uint64_t *)((char *)a1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>)
                          + 40));
  *uint64_t v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a1 = v5;
  a1[1] = v7;
  return result;
}

uint64_t closure #2 in RegularScreenSharingSpectatorToolbar.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t v2 = Environment.init<A>(_:)();
  char v4 = v3;
  uint64_t v5 = Environment.init<A>(_:)();
  char v7 = v6;
  uint64_t result = Environment.init<A>(_:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v7 & 1;
  *(void *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 40) = v9 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance RegularScreenSharingSpectatorToolbar@<X0>(uint64_t a1@<X8>)
{
  return RegularScreenSharingSpectatorToolbar.body.getter(a1);
}

void ScreenSharingSpectatorToolbar.resolvedToolbarForSizeClass.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UserInterfaceSizeClass();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v29 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v29 - v19;
  if (static Platform.current.getter() != 1) {
    goto LABEL_13;
  }
  specialized Environment.wrappedValue.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v18, *MEMORY[0x1E4F3DA58], v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v3);
  uint64_t v21 = v11 + *(int *)(v7 + 48);
  outlined init with copy of UserInterfaceSizeClass?((uint64_t)v20, v11);
  outlined init with copy of UserInterfaceSizeClass?((uint64_t)v18, v21);
  OUTLINED_FUNCTION_9_1(v11);
  if (!v22)
  {
    outlined init with copy of UserInterfaceSizeClass?(v11, (uint64_t)v15);
    OUTLINED_FUNCTION_9_1(v21);
    if (!v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v1, v21, v3);
      lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_11_33();
      v24();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      OUTLINED_FUNCTION_11_33();
      v24();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v11, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (v23) {
        goto LABEL_12;
      }
LABEL_13:
      type metadata accessor for ScreenSharingSpectatorViewModel();
      lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
      uint64_t v29 = OUTLINED_FUNCTION_9_46();
      char v30 = v26 & 1;
      char v31 = 1;
      goto LABEL_14;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v3);
LABEL_10:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v11, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_13;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  OUTLINED_FUNCTION_9_1(v21);
  if (!v22) {
    goto LABEL_10;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v11, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
LABEL_12:
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t v29 = OUTLINED_FUNCTION_9_46();
  char v30 = v25 & 1;
  char v31 = 0;
LABEL_14:
  lazy protocol witness table accessor for type RegularScreenSharingSpectatorToolbar and conformance RegularScreenSharingSpectatorToolbar();
  lazy protocol witness table accessor for type CompactScreenSharingSpectatorToolbar and conformance CompactScreenSharingSpectatorToolbar();
  _ConditionalContent<>.init(storage:)();
  char v27 = v33;
  char v28 = v34;
  *(void *)a1 = v32;
  *(unsigned char *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 9) = v28;
  OUTLINED_FUNCTION_28();
}

void ScreenSharingSpectatorToolbar.body.getter(uint64_t a1@<X8>)
{
  ScreenSharingSpectatorToolbar.resolvedToolbarForSizeClass.getter((uint64_t)&v4);
  char v2 = v5;
  char v3 = v6;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
}

uint64_t ScreenSharingSpectatorToolbar.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  swift_storeEnumTagMultiPayload();
  char v2 = (char *)a1 + *(int *)(type metadata accessor for ScreenSharingSpectatorToolbar() + 20);
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t result = OUTLINED_FUNCTION_8_41();
  *(void *)char v2 = result;
  v2[8] = v4 & 1;
  return result;
}

uint64_t default argument 0 of ScreenSharingSpectatorToolbar.init(horizontalSizeClass:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ScreenSharingSpectatorToolbar.init(horizontalSizeClass:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a1, a2, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  uint64_t v3 = a2 + *(int *)(type metadata accessor for ScreenSharingSpectatorToolbar() + 20);
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t result = OUTLINED_FUNCTION_8_41();
  *(void *)uint64_t v3 = result;
  *(unsigned char *)(v3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_1C31D21E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C31D2218()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *closure #1 in View.disabled(_:)(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_1C31D2254()
{
  return swift_deallocObject();
}

unsigned char *_s7SwiftUI4ViewPAAE8disabledyQrSbFySbzcfU_TA_0(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t partial apply for closure #1 in CompactScreenSharingSpectatorToolbar.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CompactScreenSharingSpectatorToolbar.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type RegularScreenSharingSpectatorToolbar and conformance RegularScreenSharingSpectatorToolbar()
{
  unint64_t result = lazy protocol witness table cache variable for type RegularScreenSharingSpectatorToolbar and conformance RegularScreenSharingSpectatorToolbar;
  if (!lazy protocol witness table cache variable for type RegularScreenSharingSpectatorToolbar and conformance RegularScreenSharingSpectatorToolbar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularScreenSharingSpectatorToolbar and conformance RegularScreenSharingSpectatorToolbar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CompactScreenSharingSpectatorToolbar and conformance CompactScreenSharingSpectatorToolbar()
{
  unint64_t result = lazy protocol witness table cache variable for type CompactScreenSharingSpectatorToolbar and conformance CompactScreenSharingSpectatorToolbar;
  if (!lazy protocol witness table cache variable for type CompactScreenSharingSpectatorToolbar and conformance CompactScreenSharingSpectatorToolbar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompactScreenSharingSpectatorToolbar and conformance CompactScreenSharingSpectatorToolbar);
  }
  return result;
}

uint64_t outlined init with copy of UserInterfaceSizeClass?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingSpectatorToolbar()
{
  uint64_t result = type metadata singleton initialization cache for ScreenSharingSpectatorToolbar;
  if (!type metadata singleton initialization cache for ScreenSharingSpectatorToolbar) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ZoomButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in HomeButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RemoteControlButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in CompactScreenSharingSpectatorToolbar()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RegularScreenSharingSpectatorToolbar()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingSpectatorToolbar()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ZoomButton()
{
}

uint64_t initializeBufferWithCopyOfBuffer for HomeButton(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithTake for HomeButton(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_release();
  return a1;
}

void type metadata accessor for HomeButton()
{
}

void type metadata accessor for RemoteControlButton()
{
}

void type metadata accessor for CompactScreenSharingSpectatorToolbar()
{
}

uint64_t assignWithCopy for ZoomButton(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  swift_release();
  return a1;
}

void type metadata accessor for RegularScreenSharingSpectatorToolbar()
{
}

uint64_t getEnumTagSinglePayload for ScreenSharingSpectatorToolbar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31D25F8);
}

uint64_t sub_1C31D25F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 > 1) {
      return (v9 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ScreenSharingSpectatorToolbar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31D269C);
}

void sub_1C31D269C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
}

void type metadata completion function for ScreenSharingSpectatorToolbar()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C31D27C0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type (<<opaque return type of View.buttonStyle<A>(_:)>>.0)? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type (<<opaque return type of View.buttonStyle<A>(_:)>>.0)? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type (<<opaque return type of View.buttonStyle<A>(_:)>>.0)? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Image>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Image> and conformance Button<A>, &demangling cache variable for type metadata for Button<Image>);
    lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type (<<opaque return type of View.buttonStyle<A>(_:)>>.0)? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>?);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Image>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Image> and conformance Button<A>, &demangling cache variable for type metadata for Button<Image>);
    lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle and conformance ScreenSharingToolbarButtonStyle();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<VStack<TupleView<(ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>??, ModifiedContent<Text, _FixedSizeLayout>)>>, _FlexFrameLayout>, Text?)>>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<VStack<TupleView<(ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>??, ModifiedContent<Text, _FixedSizeLayout>)>>, _FlexFrameLayout>, Text?)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<VStack<TupleView<(ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>??, ModifiedContent<Text, _FixedSizeLayout>)>>, _FlexFrameLayout>, Text?)>>>);
    lazy protocol witness table accessor for type ShareCardButtonStyle and conformance ShareCardButtonStyle();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    type metadata accessor for CallControlTextButtonStyle(255);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    lazy protocol witness table accessor for type CallControlsTextButtonConfiguration and conformance CallControlsTextButtonConfiguration(&lazy protocol witness table cache variable for type CallControlTextButtonStyle and conformance CallControlTextButtonStyle, (void (*)(uint64_t))type metadata accessor for CallControlTextButtonStyle);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C31D2ACC()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ScreenSharingToolbar<TransitioningText<FadeOutFadeInTransition>, ZoomButton, HomeButton, RemoteControlButton> and conformance ScreenSharingToolbar<A, B, C, D>, &demangling cache variable for type metadata for ScreenSharingToolbar<TransitioningText<FadeOutFadeInTransition>, ZoomButton, HomeButton, RemoteControlButton>);
}

uint64_t sub_1C31D2B08()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ScreenSharingToolbar<TransitioningText<FadeOutFadeInTransition>, Never, Never, TupleView<(ZoomButton, HomeButton, RemoteControlButton)>> and conformance ScreenSharingToolbar<A, B, C, D>, &demangling cache variable for type metadata for ScreenSharingToolbar<TransitioningText<FadeOutFadeInTransition>, Never, Never, TupleView<(ZoomButton, HomeButton, RemoteControlButton)>>);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<RegularScreenSharingSpectatorToolbar, CompactScreenSharingSpectatorToolbar> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<RegularScreenSharingSpectatorToolbar, CompactScreenSharingSpectatorToolbar> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<RegularScreenSharingSpectatorToolbar, CompactScreenSharingSpectatorToolbar> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<RegularScreenSharingSpectatorToolbar, CompactScreenSharingSpectatorToolbar>);
    lazy protocol witness table accessor for type RegularScreenSharingSpectatorToolbar and conformance RegularScreenSharingSpectatorToolbar();
    lazy protocol witness table accessor for type CompactScreenSharingSpectatorToolbar and conformance CompactScreenSharingSpectatorToolbar();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<RegularScreenSharingSpectatorToolbar, CompactScreenSharingSpectatorToolbar> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ZoomButton.body.getter()
{
  return closure #1 in closure #1 in ZoomButton.body.getter();
}

void InCallControlsPTTOpenAppCell.appIconImageView.setter(uint64_t a1)
{
  char v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsPTTOpenAppCell_appIconImageView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsPTTOpenAppCell_appIconImageView) = a1;
}

uint64_t InCallControlsPTTOpenAppCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v15[-v8];
  uint64_t v10 = v1 + OBJC_IVAR____TtC15ConversationKit28InCallControlsPTTOpenAppCell____lazy_storage___cellContentConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v10, (uint64_t)v9);
  uint64_t v11 = type metadata accessor for UIListContentConfiguration();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for UIListContentConfiguration?);
    closure #1 in InCallControlsPTTOpenAppCell.cellContentConfiguration.getter();
    OUTLINED_FUNCTION_48();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v11);
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v7, v10);
    return swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_48();
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v14 + 32))(a1, v9, v11);
  }
}

uint64_t closure #1 in InCallControlsPTTOpenAppCell.cellContentConfiguration.getter()
{
  MEMORY[0x1C8773D30]();
  unint64_t v0 = self;
  uint64_t v1 = *MEMORY[0x1E4FB28C8];
  id v2 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  UIFont.caseSensitive()();

  uint64_t v3 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v3(v10, 0);
  if (one-time initialization token for tableViewCellTitleLabel != -1) {
    swift_once();
  }
  id v4 = (id)static Colors.InCallControls.tableViewCellTitleLabel;
  uint64_t v5 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v5(v10, 0);
  uint64_t v6 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  v6(v10, 0);
  id v7 = objc_msgSend(v0, sel_preferredFontForTextStyle_, v1);
  Class isa = UIFont.caseSensitive()().super.isa;

  InCallControlsPTTOpenAppCell.verticalInset(_:scaledToFont:)(isa, 18.5);
  return UIListContentConfiguration.directionalLayoutMargins.setter();
}

id InCallControlsPTTOpenAppCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsPTTOpenAppCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit28InCallControlsPTTOpenAppCell_appIconImageView) = 0;
  uint64_t v1 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_0_53(v1);
  uint64_t v6 = type metadata accessor for InCallControlsPTTOpenAppCell();
  double v2 = OUTLINED_FUNCTION_6_2();
  return objc_msgSendSuper2(v3, v4, v2, v0, v6);
}

uint64_t type metadata accessor for InCallControlsPTTOpenAppCell()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsPTTOpenAppCell;
  if (!type metadata singleton initialization cache for InCallControlsPTTOpenAppCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t InCallControlsPTTOpenAppCell.configure(with:)(uint64_t *a1)
{
  double v2 = v1;
  type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_4();
  uint64_t v68 = v5;
  uint64_t v69 = v4;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_3();
  uint64_t v67 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v63 = v9;
  type metadata accessor for UICellAccessory.Placement();
  OUTLINED_FUNCTION_4();
  uint64_t v60 = v11;
  uint64_t v61 = v10;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v62 = v12;
  type metadata accessor for UICellAccessory.CustomViewConfiguration();
  OUTLINED_FUNCTION_4();
  uint64_t v65 = v14;
  uint64_t v66 = v13;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_2_3();
  uint64_t v64 = v15;
  type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_4();
  uint64_t v70 = v17;
  uint64_t v71 = v16;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v22 = OUTLINED_FUNCTION_8(v21);
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_21();
  uint64_t v25 = v24 - v23;
  static UIBackgroundConfiguration.listGroupedCell()();
  id v26 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for UIVibrancyEffect();
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v27 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload(v25, 0, 1, v27);
  MEMORY[0x1C8773CE0](v25);
  objc_msgSend(v1, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  InCallControlsPTTOpenAppCell.cellContentConfiguration.getter(v20);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v29 = OUTLINED_FUNCTION_8(v28);
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_21();
  uint64_t v32 = v31 - v30;
  uint64_t v33 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload(v32, 1, 1, v33);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1C3769620;
  uint64_t v36 = *a1;
  uint64_t v35 = a1[1];
  *(void *)(v34 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v34 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v34 + 32) = v36;
  *(void *)(v34 + 40) = v35;
  uint64_t v37 = one-time initialization token for conversationKit;
  swift_bridgeObjectRetain();
  if (v37 != -1) {
    swift_once();
  }
  uint64_t v38 = unk_1EA37DFA0;
  uint64_t v39 = (void *)qword_1EA37DFA8;
  id v40 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v73._object = (void *)0xE000000000000000;
  v41._object = (void *)0x80000001C37A0090;
  v41._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v42.value._uint64_t countAndFlagsBits = v38;
  v42.value._object = v39;
  v43._uint64_t countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  v73._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, (NSBundle)v40, v43, v73);
  String.init(format:locale:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of Any?(v32, &demangling cache variable for type metadata for Locale?);
  UIListContentConfiguration.text.setter();
  v72[3] = v71;
  v72[4] = MEMORY[0x1E4FB0F88];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v72);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v70 + 16))(boxed_opaque_existential_1, v20, v71);
  MEMORY[0x1C8773CD0](v72);
  double v45 = self;
  double v46 = (void *)MEMORY[0x1C87730B0](a1[2], a1[3]);
  id v47 = objc_msgSend(v45, sel__applicationIconImageForBundleIdentifier_format_, v46, 0);

  InCallControlsPTTOpenAppCell.appIconImageView.setter((uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v47));
  double v48 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit28InCallControlsPTTOpenAppCell_appIconImageView];
  if (v48)
  {
    double v49 = (uint64_t (**)())(v62
                         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                  + 48));
    uint64_t v50 = *MEMORY[0x1E4FB0E18];
    type metadata accessor for UICellAccessory.DisplayedState();
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, uint64_t))(v51 + 104))(v62, v50);
    NSObject *v49 = OUTLINED_FUNCTION_17_1;
    v49[1] = 0;
    (*(void (**)(uint64_t, void, uint64_t))(v60 + 104))(v62, *MEMORY[0x1E4FB0E60], v61);
    uint64_t v52 = *MEMORY[0x1E4FB0E28];
    uint64_t v53 = type metadata accessor for UICellAccessory.LayoutDimension();
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 104))(v63, v52, v53);
    __swift_storeEnumTagSinglePayload(v63, 0, 1, v53);
    id v55 = v48;
    UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
    static UICellAccessory.customView(configuration:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
    unint64_t v56 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_1C3769620;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v68 + 16))(v57 + v56, v67, v69);
    UICollectionViewListCell.accessories.setter();
    uint64_t v58 = v71;
    objc_msgSend(v2, sel_setAccessibilityTraits_, *MEMORY[0x1E4FB2540]);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
  }
  else
  {
    uint64_t v58 = v71;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v20, v58);
}

id InCallControlsPTTOpenAppCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsPTTOpenAppCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28InCallControlsPTTOpenAppCell_appIconImageView] = 0;
  uint64_t v1 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_0_53(v1);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double InCallControlsPTTOpenAppCell.verticalInset(_:scaledToFont:)(void *a1, double a2)
{
  id v3 = objc_msgSend(a1, sel_fontDescriptor);
  id v4 = objc_msgSend(v3, sel_objectForKey_, *MEMORY[0x1E4FB0948]);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for UIFontTextStyle(0);
    if (swift_dynamicCast())
    {
      id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17A8]), sel_initForTextStyle_, v8);
      objc_msgSend(v5, sel_scaledValueForValue_, a2);
      a2 = v6;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  }
  return a2;
}

id InCallControlsPTTOpenAppCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsPTTOpenAppCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for InCallControlsPTTOpenAppCell()
{
  return type metadata accessor for InCallControlsPTTOpenAppCell();
}

void type metadata completion function for InCallControlsPTTOpenAppCell()
{
  type metadata accessor for UIListContentConfiguration?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for InCallControlsPTTOpenAppCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsPTTOpenAppCell);
}

uint64_t dispatch thunk of InCallControlsPTTOpenAppCell.configure(with:)(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v2;
  uint64_t v7 = v3;
  long long v8 = *(_OWORD *)(a1 + 40);
  return v4(v6);
}

void type metadata accessor for UIListContentConfiguration?()
{
  if (!lazy cache variable for type metadata for UIListContentConfiguration?)
  {
    type metadata accessor for UIListContentConfiguration();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?);
    }
  }
}

uint64_t outlined init with copy of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SystemApertureInCallWaveformTrailingView.__allocating_init(call:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_sharedInstance);
  id v7 = objc_msgSend(self, sel_defaultCenter);
  id v8 = objc_allocWithZone((Class)type metadata accessor for AudioPowerSpectrumViewModel());
  AudioPowerSpectrumViewModel.init(call:callCenter:notificationCenter:)();
  uint64_t v9 = (*(uint64_t (**)(void))(v2 + 224))();

  return v9;
}

void *SystemApertureInCallWaveformTrailingView.Constants.preferredSize.unsafeMutableAddressor()
{
  return &static SystemApertureInCallWaveformTrailingView.Constants.preferredSize;
}

double static SystemApertureInCallWaveformTrailingView.Constants.preferredSize.getter()
{
  return 43.0;
}

void *SystemApertureInCallWaveformTrailingView.Constants.trailingPadding.unsafeMutableAddressor()
{
  return &static SystemApertureInCallWaveformTrailingView.Constants.trailingPadding;
}

double static SystemApertureInCallWaveformTrailingView.Constants.trailingPadding.getter()
{
  return 2.0;
}

void *SystemApertureInCallWaveformTrailingView.Constants.animationDuration.unsafeMutableAddressor()
{
  return &static SystemApertureInCallWaveformTrailingView.Constants.animationDuration;
}

double static SystemApertureInCallWaveformTrailingView.Constants.animationDuration.getter()
{
  return 0.5;
}

void one-time initialization function for framerateRange()
{
  *(__C::CAFrameRateRange *)static SystemApertureInCallWaveformTrailingView.Constants.framerateRange = CAFrameRateRange.init(minimum:maximum:preferred:)(0.16667, 0.8, (Swift::Float_optional *)0x100000000);
}

char *SystemApertureInCallWaveformTrailingView.Constants.framerateRange.unsafeMutableAddressor()
{
  if (one-time initialization token for framerateRange != -1) {
    swift_once();
  }
  return static SystemApertureInCallWaveformTrailingView.Constants.framerateRange;
}

float static SystemApertureInCallWaveformTrailingView.Constants.framerateRange.getter()
{
  if (one-time initialization token for framerateRange != -1) {
    swift_once();
  }
  return *(float *)static SystemApertureInCallWaveformTrailingView.Constants.framerateRange;
}

void *SystemApertureInCallWaveformTrailingView.Constants.updateReason.unsafeMutableAddressor()
{
  return &static SystemApertureInCallWaveformTrailingView.Constants.updateReason;
}

uint64_t static SystemApertureInCallWaveformTrailingView.Constants.updateReason.getter()
{
  return 1024;
}

void *SystemApertureInCallWaveformTrailingView.Constants.deltaCap.unsafeMutableAddressor()
{
  return &static SystemApertureInCallWaveformTrailingView.Constants.deltaCap;
}

float static SystemApertureInCallWaveformTrailingView.Constants.deltaCap.getter()
{
  return 0.25;
}

void *SystemApertureInCallWaveformTrailingView.Constants.deltaFloor.unsafeMutableAddressor()
{
  return &static SystemApertureInCallWaveformTrailingView.Constants.deltaFloor;
}

float static SystemApertureInCallWaveformTrailingView.Constants.deltaFloor.getter()
{
  return 0.1;
}

id SystemApertureInCallWaveformTrailingView.viewModel.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_viewModel);
}

id SystemApertureInCallWaveformTrailingView.backdropLayer.getter()
{
  return SystemApertureInCallWaveformTrailingView.backdropLayer.getter(&OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___backdropLayer, (uint64_t (*)(void))closure #1 in SystemApertureInCallWaveformTrailingView.backdropLayer.getter);
}

id closure #1 in SystemApertureInCallWaveformTrailingView.backdropLayer.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39B40]), sel_init);
  uint64_t v1 = (void *)MEMORY[0x1C87730B0](0x4C73756C70, 0xE500000000000000);
  objc_msgSend(v0, sel_setCompositingFilter_, v1);

  LODWORD(v2) = 1057803469;
  objc_msgSend(v0, sel_setOpacity_, v2);
  return v0;
}

id SystemApertureInCallWaveformTrailingView.localAudioView.getter()
{
  return SystemApertureInCallWaveformTrailingView.backdropLayer.getter(&OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___localAudioView, (uint64_t (*)(void))closure #1 in SystemApertureInCallWaveformTrailingView.localAudioView.getter);
}

id SystemApertureInCallWaveformTrailingView.backdropLayer.getter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2();
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in SystemApertureInCallWaveformTrailingView.localAudioView.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DeviceWaveformView()), sel_init);
  id v1 = objc_msgSend(v0, sel_layer);
  CATransform3DMakeScale(&v3, -1.0, 1.0, 1.0);
  objc_msgSend(v1, sel_setTransform_, &v3);

  return v0;
}

id SystemApertureInCallWaveformTrailingView.remoteAudioView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___remoteAudioView;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___remoteAudioView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___remoteAudioView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DeviceWaveformView()), sel_init);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id SystemApertureInCallWaveformTrailingView.__allocating_init(viewModel:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SystemApertureInCallWaveformTrailingView.init(viewModel:)(a1);
}

id SystemApertureInCallWaveformTrailingView.init(viewModel:)(void *a1)
{
  swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_cancellables] = MEMORY[0x1E4FBC870];
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_animateUpdatesPassthrough;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  id v4 = v1;
  *(void *)&v1[v3] = PassthroughSubject.init()();
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___backdropLayer] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___localAudioView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___remoteAudioView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_viewModel] = a1;
  id v5 = a1;

  v24.receiver = v4;
  v24.super_class = (Class)type metadata accessor for SystemApertureInCallWaveformTrailingView();
  id v6 = objc_msgSendSuper2(&v24, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v7 = self;
  id v8 = v6;
  id v9 = objc_msgSend(v7, sel_clearColor);
  objc_msgSend(v8, sel_setBackgroundColor_, v9);

  objc_msgSend(v8, sel_setClipsToBounds_, 1);
  id v10 = objc_msgSend(v8, sel_layer);
  objc_msgSend(v10, sel_setCornerCurve_, *MEMORY[0x1E4F39EA8]);

  SystemApertureInCallWaveformTrailingView.configureSubviews()();
  SystemApertureInCallWaveformTrailingView.observeViewModel()();
  uint64_t v11 = one-time initialization token for systemAperture;
  id v12 = v8;
  if (v11 != -1) {
    swift_once();
  }
  v25._object = (void *)0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0x46455641575F5841;
  v13._object = (void *)0xEB000000004D524FLL;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v25._uint64_t countAndFlagsBits = 0;
  Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)xmmword_1EA37DFD0, (NSBundle)static LocalizationSource.systemAperture, v14, v25);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v15._countAndFlagsBits, (uint64_t)v15._object, v12);

  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446210;
    uint64_t v20 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v17, v18, "[SystemAperture] %{public}s created", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  return v12;
}

uint64_t type metadata accessor for SystemApertureInCallWaveformTrailingView()
{
  return self;
}

id SystemApertureInCallWaveformTrailingView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureInCallWaveformTrailingView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_cancellables] = MEMORY[0x1E4FBC870];
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_animateUpdatesPassthrough;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&v0[v1] = PassthroughSubject.init()();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___backdropLayer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___localAudioView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView____lazy_storage___remoteAudioView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id SystemApertureInCallWaveformTrailingView.__deallocating_deinit()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_viewModel];
  id v3 = *(void (**)(uint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x238);
  id v4 = v2;
  v3(0x74696E696564, 0xE600000000000000);

  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136446210;
    uint64_t v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    OUTLINED_FUNCTION_14_5();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v6, v7, "[SystemAperture] %{public}s deinit", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v11 = (objc_class *)type metadata accessor for SystemApertureInCallWaveformTrailingView();
  v14.receiver = v1;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

id SystemApertureInCallWaveformTrailingView.frame.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureInCallWaveformTrailingView();
  return objc_msgSendSuper2(&v2, sel_frame);
}

void SystemApertureInCallWaveformTrailingView.frame.setter()
{
  OUTLINED_FUNCTION_7();
  uint64_t v1 = (objc_class *)type metadata accessor for SystemApertureInCallWaveformTrailingView();
  v13.receiver = v0;
  v13.super_class = v1;
  objc_msgSendSuper2(&v13, sel_frame);
  CGFloat v3 = v2;
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  double v10 = OUTLINED_FUNCTION_6_2();
  objc_msgSendSuper2(v11, v12, v10, v0, v1);
  SystemApertureInCallWaveformTrailingView.frame.didset(v3, v5, v7, v9);
}

void SystemApertureInCallWaveformTrailingView.frame.didset(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  objc_msgSend(v4, sel_frame);
  v17.origin.double x = v9;
  v17.origin.double y = v10;
  v17.size.double width = v11;
  v17.size.double height = v12;
  v15.origin.double x = a1;
  v15.origin.double y = a2;
  v15.size.double width = a3;
  v15.size.double height = a4;
  if (!CGRectEqualToRect(v15, v17))
  {
    id v13 = objc_msgSend(v4, sel_layer);
    objc_msgSend(v4, sel_frame);
    objc_msgSend(v13, sel_setCornerRadius_, CGRectGetHeight(v16) * 0.25);
  }
}

Swift::Void __swiftcall SystemApertureInCallWaveformTrailingView.layoutSubviews()()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SystemApertureInCallWaveformTrailingView();
  objc_msgSendSuper2(&v4, sel_layoutSubviews);
  id v1 = SystemApertureInCallWaveformTrailingView.backdropLayer.getter();
  OUTLINED_FUNCTION_7_58(v1, sel_setFrame_);

  id v2 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  OUTLINED_FUNCTION_7_58(v2, sel_setFrame_);

  id v3 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  OUTLINED_FUNCTION_7_58(v3, sel_setFrame_);
}

CGSize __swiftcall SystemApertureInCallWaveformTrailingView.sizeThatFits(_:)(CGSize a1)
{
  swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationControls);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    objc_super v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)objc_super v4 = 136446210;
    uint64_t v5 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v10);
    OUTLINED_FUNCTION_14_5();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v2, v3, "[SystemAperture] %{public}s sizeThatFits", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  double v7 = 43.0;
  double v8 = 19.0;
  result.double height = v8;
  result.double width = v7;
  return result;
}

uint64_t SystemApertureInCallWaveformTrailingView.shouldReplace(_:)(void *a1)
{
  type metadata accessor for SystemApertureInCallWaveformTrailingView();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    objc_super v4 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_viewModel);
    uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_viewModel);
    type metadata accessor for AudioPowerSpectrumViewModel();
    id v6 = a1;
    id v7 = v4;
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    char v10 = v9 ^ 1;
  }
  else
  {
    char v10 = 1;
  }
  return v10 & 1;
}

id SystemApertureInCallWaveformTrailingView.sizeThatFits(_:for:)()
{
  return objc_msgSend(v0, sel_sizeThatFits_);
}

Swift::Void __swiftcall SystemApertureInCallWaveformTrailingView.start()()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationControls);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v3, v4, "Starting waveform");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v5 + 560))();
}

Swift::Void __swiftcall SystemApertureInCallWaveformTrailingView.stop()()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationControls);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v3, v4, "Stopping waveform");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_0_3();
  (*(void (**)(uint64_t, unint64_t))(v5 + 568))(0x2928706F7473, 0xE600000000000000);
}

void SystemApertureInCallWaveformTrailingView.configureSubviews()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v2, sel_setBorderWidth_, 1.0);

  id v3 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  OUTLINED_FUNCTION_0_62();
  OUTLINED_FUNCTION_8_42();
  v4();
  OUTLINED_FUNCTION_12_7();
  (*(void (**)(void))(v5 + 120))();

  id v6 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  id v7 = objc_msgSend(v6, sel_layer);

  OUTLINED_FUNCTION_0_62();
  OUTLINED_FUNCTION_8_42();
  char v9 = (void *)v8();
  objc_msgSend(v7, sel_setCompositingFilter_, v9);

  id v10 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  OUTLINED_FUNCTION_0_62();
  OUTLINED_FUNCTION_8_42();
  v11();
  OUTLINED_FUNCTION_12_7();
  (*(void (**)(void))(v12 + 120))();

  id v13 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  id v14 = objc_msgSend(v13, sel_layer);

  OUTLINED_FUNCTION_0_62();
  OUTLINED_FUNCTION_8_42();
  CGRect v16 = (void *)v15();
  objc_msgSend(v14, sel_setCompositingFilter_, v16);

  id v17 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  objc_msgSend(v1, sel_addSubview_, v17);

  id v18 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  objc_msgSend(v1, sel_addSubview_, v18);

  OUTLINED_FUNCTION_0_62();
  OUTLINED_FUNCTION_8_42();
  char v20 = v19() & 1;
  SystemApertureInCallWaveformTrailingView.configureFilter(_:)(v20);
}

void SystemApertureInCallWaveformTrailingView.configureFilter(_:)(char a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(v1, sel_layer);
    id v3 = SystemApertureInCallWaveformTrailingView.backdropLayer.getter();
    objc_msgSend(v2, sel_addSublayer_);
  }
  else
  {
    id v3 = SystemApertureInCallWaveformTrailingView.backdropLayer.getter();
    objc_msgSend(v3, sel_removeFromSuperlayer);
  }
}

uint64_t SystemApertureInCallWaveformTrailingView.observeViewModel()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[Float]>.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  OUTLINED_FUNCTION_3_79();
  (*(void (**)(void))(v14 + 264))();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<[Float]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Float]>.Publisher);
  lazy protocol witness table accessor for type [Float] and conformance <A> [A]();
  Publisher<>.removeDuplicates()();
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v38(v6, v0);
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<[Float]>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[Float]>.Publisher>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  CGRect v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v15(v13, v7);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  OUTLINED_FUNCTION_3_79();
  (*(void (**)(void))(v16 + 312))();
  Publisher<>.removeDuplicates()();
  v38(v6, v0);
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v15(v13, v7);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  uint64_t v39 = v18;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_21();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  OUTLINED_FUNCTION_4();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  uint64_t v29 = v28 - v27;
  swift_retain();
  static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)();
  id v40 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v30 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v33 = v32 - v31;
  uint64_t v34 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v33, 1, 1, v34);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v33);

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v23);
  swift_release();
  uint64_t v35 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = partial apply for closure #3 in SystemApertureInCallWaveformTrailingView.observeViewModel();
  *(void *)(v36 + 24) = v35;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop> and conformance Publishers.Debounce<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v22, v17);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in SystemApertureInCallWaveformTrailingView.observeViewModel()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    Subject<>.send()();

    return swift_release();
  }
  return result;
}

void closure #3 in SystemApertureInCallWaveformTrailingView.observeViewModel()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    SystemApertureInCallWaveformTrailingView.updatePowerLevels()();
  }
}

void SystemApertureInCallWaveformTrailingView.updatePowerLevels()()
{
  uint64_t v1 = v0;
  id v2 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_2_66();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 160))();

  id v6 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit40SystemApertureInCallWaveformTrailingView_viewModel);
  OUTLINED_FUNCTION_0_62();
  OUTLINED_FUNCTION_8_42();
  v8();
  OUTLINED_FUNCTION_13_39();
  (*(void (**)(void))(v9 + 168))();

  id v10 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  objc_msgSend(v10, sel_setNeedsLayout);

  id v11 = SystemApertureInCallWaveformTrailingView.remoteAudioView.getter();
  OUTLINED_FUNCTION_2_66();
  uint64_t v13 = (*(uint64_t (**)(void))(v12 + 160))();

  SystemApertureInCallWaveformTrailingView.generateMaxFrameRate(_:_:)(v5, v13);
  float v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v16 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  OUTLINED_FUNCTION_2_66();
  uint64_t v18 = (*(uint64_t (**)(void))(v17 + 160))();

  id v19 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  (*(void (**)(void))((*v3 & *v7) + 0xF0))();
  OUTLINED_FUNCTION_13_39();
  (*(void (**)(void))(v20 + 168))();

  id v21 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  objc_msgSend(v21, sel_setNeedsLayout);

  id v22 = SystemApertureInCallWaveformTrailingView.localAudioView.getter();
  OUTLINED_FUNCTION_2_66();
  uint64_t v24 = (*(uint64_t (**)(void))(v23 + 160))();

  SystemApertureInCallWaveformTrailingView.generateMaxFrameRate(_:_:)(v18, v24);
  float v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for framerateRange != -1) {
    swift_once();
  }
  if (v15 > v26) {
    Swift::Float v27 = v15;
  }
  else {
    Swift::Float v27 = v26;
  }
  __C::CAFrameRateRange v36 = CAFrameRateRange.init(minimum:maximum:preferred:)(*(Swift::Float *)static SystemApertureInCallWaveformTrailingView.Constants.framerateRange, v27, (Swift::Float_optional *)0x100000000);
  Swift::Float minimum = v36.minimum;
  Swift::Float maximum = v36.maximum;
  Swift::Float preferred = v36.__preferred;
  uint64_t v31 = self;
  uint64_t v32 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  *(Swift::Float *)(v33 + 24) = minimum;
  *(Swift::Float *)(v33 + 28) = maximum;
  *(Swift::Float *)(v33 + 32) = preferred;
  v35[4] = partial apply for closure #1 in SystemApertureInCallWaveformTrailingView.updatePowerLevels();
  v35[5] = v33;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1107296256;
  v35[2] = thunk for @escaping @callee_guaranteed () -> ();
  v35[3] = &block_descriptor_40;
  uint64_t v34 = _Block_copy(v35);
  swift_release();
  objc_msgSend(v31, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v34, 0, 0.5, 0.0, 1.0, 0.0);
  _Block_release(v34);
}

void closure #1 in SystemApertureInCallWaveformTrailingView.updatePowerLevels()(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1C8776240](v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    id v10 = self;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v9;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #1 in CallControlsMenuViewController.updateDogingState(animated:);
    *(void *)(v12 + 24) = v11;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_22_1;
    uint64_t v13 = _Block_copy(aBlock);
    id v14 = v9;
    swift_release();
    *(float *)&double v15 = a2;
    *(float *)&double v16 = a3;
    *(float *)&double v17 = a4;
    objc_msgSend(v10, sel__modifyAnimationsWithPreferredFrameRateRange_updateReason_animations_, 1024, v13, v15, v16, v17);
    _Block_release(v13);
    swift_release();
  }
}

uint64_t SystemApertureInCallWaveformTrailingView.generateMaxFrameRate(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (v2)
    {
      uint64_t v3 = (float *)(result + 32);
      uint64_t v4 = (float *)(a2 + 32);
      uint64_t v5 = 1 - v2;
      float v6 = 0.0;
      while (1)
      {
        float v7 = *v3;
        if (*v4 >= *v3) {
          float v8 = *v3;
        }
        else {
          float v8 = *v4;
        }
        if (v7 <= *v4) {
          float v7 = *v4;
        }
        float v9 = v7 - v8;
        if (v9 >= 0.25) {
          break;
        }
        if (v9 >= 0.1)
        {
          if (v9 > v6) {
            float v6 = v9;
          }
          goto LABEL_18;
        }
        if (v6 >= 0.1) {
          goto LABEL_18;
        }
        float v6 = 0.1;
        if (!v5) {
          goto LABEL_23;
        }
LABEL_19:
        ++v4;
        ++v3;
        if (++v5 == 1)
        {
          __break(1u);
          goto LABEL_21;
        }
      }
      if (v6 < 0.25) {
        float v6 = 0.25;
      }
LABEL_18:
      if (!v5) {
        goto LABEL_23;
      }
      goto LABEL_19;
    }
LABEL_23:
    if (one-time initialization token for framerateRange != -1) {
      return swift_once();
    }
  }
  else
  {
LABEL_21:
    if (one-time initialization token for framerateRange != -1) {
      return swift_once();
    }
  }
  return result;
}

id SystemApertureInCallWaveformTrailingView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void SystemApertureInCallWaveformTrailingView.init(frame:)()
{
}

uint64_t protocol witness for SystemApertureAccessoryView.shouldReplace(_:) in conformance SystemApertureInCallWaveformTrailingView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t method lookup function for SystemApertureInCallWaveformTrailingView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureInCallWaveformTrailingView);
}

uint64_t dispatch thunk of SystemApertureInCallWaveformTrailingView.__allocating_init(viewModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of SystemApertureInCallWaveformTrailingView.shouldReplace(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SystemApertureInCallWaveformTrailingView.sizeThatFits(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SystemApertureInCallWaveformTrailingView.start()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SystemApertureInCallWaveformTrailingView.stop()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

ValueMetadata *type metadata accessor for SystemApertureInCallWaveformTrailingView.Constants()
{
  return &type metadata for SystemApertureInCallWaveformTrailingView.Constants;
}

uint64_t sub_1C31D6334()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C31D636C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SystemApertureInCallWaveformTrailingView.updatePowerLevels()()
{
  closure #1 in SystemApertureInCallWaveformTrailingView.updatePowerLevels()(*(void *)(v0 + 16), *(float *)(v0 + 24), *(float *)(v0 + 28), *(float *)(v0 + 32));
}

uint64_t sub_1C31D63B4()
{
  return swift_deallocObject();
}

uint64_t sub_1C31D63EC()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [Float] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Float] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance <A> [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in SystemApertureInCallWaveformTrailingView.observeViewModel()(uint64_t a1)
{
  return closure #1 in SystemApertureInCallWaveformTrailingView.observeViewModel()(a1, v1);
}

void partial apply for closure #3 in SystemApertureInCallWaveformTrailingView.observeViewModel()()
{
  closure #3 in SystemApertureInCallWaveformTrailingView.observeViewModel()(v0);
}

uint64_t sub_1C31D648C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t InCallControlsReportCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  float v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  float v8 = &v12[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ConversationKit24InCallControlsReportCell____lazy_storage___cellContentConfiguration;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v9, (uint64_t)v8, &demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v10 = type metadata accessor for UIListContentConfiguration();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v8, v10);
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for UIListContentConfiguration?);
  closure #1 in InCallControlsReportCell.cellContentConfiguration.getter();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v6, a1, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v6, v9, &demangling cache variable for type metadata for UIListContentConfiguration?);
  return swift_endAccess();
}

uint64_t closure #1 in InCallControlsReportCell.cellContentConfiguration.getter()
{
  MEMORY[0x1C8773D30]();
  id v0 = objc_msgSend(self, sel_conversationKit);
  v15._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001C37A0360;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v15);

  UIListContentConfiguration.text.setter();
  uint64_t v4 = self;
  uint64_t v5 = *MEMORY[0x1E4FB28C8];
  id v6 = objc_msgSend(v4, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  UIFont.caseSensitive()();

  uint64_t v7 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v7(v14, 0);
  id v8 = objc_msgSend(self, sel_systemRedColor);
  uint64_t v9 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v9(v14, 0);
  uint64_t v10 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  v10(v14, 0);
  id v11 = objc_msgSend(v4, sel_preferredFontForTextStyle_, v5);
  Class isa = UIFont.caseSensitive()().super.isa;

  InCallControlsBlockCell.verticalInset(_:scaledToFont:)(isa, 18.5);
  return UIListContentConfiguration.directionalLayoutMargins.setter();
}

id InCallControlsReportCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsReportCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = v0 + OBJC_IVAR____TtC15ConversationKit24InCallControlsReportCell____lazy_storage___cellContentConfiguration;
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_25_1(v2, v4, v5, v3);
  uint64_t v6 = v0 + OBJC_IVAR____TtC15ConversationKit24InCallControlsReportCell____lazy_storage___reportImageAccessory;
  uint64_t v7 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_25_1(v6, v8, v9, v7);
  double v10 = OUTLINED_FUNCTION_6_2();
  id v13 = objc_msgSendSuper2(v11, v12, v10, v0, ObjectType);
  InCallControlsReportCell.configureContent()();

  return v13;
}

uint64_t InCallControlsReportCell.configureContent()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIBackgroundConfiguration.listGroupedCell()();
  id v4 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v5);
  MEMORY[0x1C8773CE0](v3);
  objc_msgSend(v0, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  v12[3] = type metadata accessor for UIListContentConfiguration();
  v12[4] = MEMORY[0x1E4FB0F88];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  InCallControlsReportCell.cellContentConfiguration.getter((uint64_t)boxed_opaque_existential_1);
  MEMORY[0x1C8773CD0](v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
  uint64_t v7 = *(void *)(type metadata accessor for UICellAccessory() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
  InCallControlsReportCell.reportImageAccessory.getter(v9 + v8);
  return UICollectionViewListCell.accessories.setter();
}

id InCallControlsReportCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsReportCell.init(coder:)()
{
  uint64_t v1 = (uint64_t)v0
     + OBJC_IVAR____TtC15ConversationKit24InCallControlsReportCell____lazy_storage___cellContentConfiguration;
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_25_1(v1, v3, v4, v2);
  uint64_t v5 = (uint64_t)v0 + OBJC_IVAR____TtC15ConversationKit24InCallControlsReportCell____lazy_storage___reportImageAccessory;
  uint64_t v6 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_25_1(v5, v7, v8, v6);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t InCallControlsReportCell.reportImageAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v12[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ConversationKit24InCallControlsReportCell____lazy_storage___reportImageAccessory;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v9, (uint64_t)v8, &demangling cache variable for type metadata for UICellAccessory?);
  uint64_t v10 = type metadata accessor for UICellAccessory();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v8, v10);
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for UICellAccessory?);
  closure #1 in InCallControlsReportCell.reportImageAccessory.getter(a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v6, a1, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of CompactPresentable?((uint64_t)v6, v9, &demangling cache variable for type metadata for UICellAccessory?);
  return swift_endAccess();
}

uint64_t closure #1 in InCallControlsReportCell.reportImageAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  v21[1] = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UICellAccessory.Placement();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UICellAccessory.CustomViewConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v12 = @nonobjc UIImage.__allocating_init(systemName:)();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v12);

  id v14 = objc_msgSend(self, sel_systemRedColor);
  objc_msgSend(v13, sel_setTintColor_, v14);

  Swift::String v15 = (uint64_t (**)())&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                   + 48)];
  uint64_t v16 = *MEMORY[0x1E4FB0E18];
  uint64_t v17 = type metadata accessor for UICellAccessory.DisplayedState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v7, v16, v17);
  *Swift::String v15 = OUTLINED_FUNCTION_17_1;
  v15[1] = 0;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FB0E60], v4);
  uint64_t v18 = type metadata accessor for UICellAccessory.LayoutDimension();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v18);
  id v19 = v13;
  UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
  static UICellAccessory.customView(configuration:)();

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

id InCallControlsReportCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for InCallControlsReportCell()
{
  return type metadata accessor for InCallControlsReportCell();
}

uint64_t type metadata accessor for InCallControlsReportCell()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsReportCell;
  if (!type metadata singleton initialization cache for InCallControlsReportCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for InCallControlsReportCell()
{
  type metadata accessor for UIListContentConfiguration?(319, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?, MEMORY[0x1E4FB0F90]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UIListContentConfiguration?(319, &lazy cache variable for type metadata for UICellAccessory?, MEMORY[0x1E4FB0E68]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t TimeToWaitForCallService.init(timeToWaitForCall:defaultTimeToWaitForCall:randomRange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t TimeToWaitForCallService.timeToWait(for:)()
{
  unint64_t v1 = v0;
  objc_super v2 = ((void *(*)(uint64_t *__return_ptr))*v0)(&v11);
  if (v12 != 1) {
    return v11;
  }
  uint64_t v3 = v0[2];
  uint64_t v4 = v1[3];
  specialized Collection.randomElement<A>(using:)((uint64_t)v2, v1[4], v1[5]);
  if (v6) {
    uint64_t v5 = 0;
  }
  uint64_t v7 = specialized static Duration.seconds<A>(_:)(v5);
  uint64_t v9 = MEMORY[0x1C8774B90](v3, v4, v7, v8);
  if (static Duration.< infix(_:_:)()) {
    return 1000000000000000000;
  }
  else {
    return v9;
  }
}

uint64_t specialized static Duration.seconds<A>(_:)(uint64_t a1)
{
  return 1000000000000000000 * a1;
}

void specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 == -1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v7 = specialized RandomNumberGenerator.next<A>(upperBound:)(v4);
  specialized ClosedRange<>.index(_:offsetBy:)(a2, 0, v7, a2, a3);
  if (v8) {
LABEL_11:
  }
    __break(1u);
}

uint64_t getEnumTagSinglePayload for TimeToWaitForCall(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimeToWaitForCall(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for TimeToWaitForCall(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for TimeToWaitForCall(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 16) = v2;
  return result;
}

ValueMetadata *type metadata accessor for TimeToWaitForCall()
{
  return &type metadata for TimeToWaitForCall;
}

uint64_t initializeWithCopy for TimeToWaitForCallService(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for TimeToWaitForCallService(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

_OWORD *assignWithTake for TimeToWaitForCallService(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  long long v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for TimeToWaitForCallService()
{
  return &type metadata for TimeToWaitForCallService;
}

unint64_t specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
LABEL_3:
  unint64_t result = specialized Set.count.getter(a2);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result)
  {
    unint64_t v5 = specialized RandomNumberGenerator.next<A>(upperBound:)(result);
    if (v3)
    {
      uint64_t v6 = __CocoaSet.startIndex.getter();
      uint64_t v8 = v7;
      char v9 = 1;
    }
    else
    {
      uint64_t v6 = specialized _NativeSet.startIndex.getter(a2);
      uint64_t v8 = v11;
      char v9 = v12 & 1;
    }
    uint64_t v13 = specialized Collection.index(_:offsetBy:)(v6, v8, v9, v5, a2);
    uint64_t v15 = v14;
    char v17 = v16 & 1;
    outlined consume of Set<TUHandle>.Index._Variant(v6, v8, v9);
    specialized Set.subscript.getter(v13, v15, v17, a2);
    uint64_t v10 = v18;
    outlined consume of Set<TUHandle>.Index._Variant(v13, v15, v17);
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0;
    MEMORY[0x1C8776100](&v3, 8);
    unint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0;
          MEMORY[0x1C8776100](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v19 = result;
    uint64_t v20 = a2;
    unsigned __int8 v21 = a3 & 1;
    if (a4)
    {
      unint64_t v8 = a5 & 0xC000000000000001;
      unint64_t result = outlined copy of Set<A>.Index._Variant<A>(result, a2, a3 & 1);
      do
      {
        if (v8)
        {
          if ((v21 & 1) == 0) {
            goto LABEL_15;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<TUConversationParticipant>.Index);
          char v17 = (uint64_t (*)(char *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          unint64_t result = v17(v18, 0);
        }
        else
        {
          uint64_t v9 = v19;
          uint64_t v10 = v20;
          char v11 = v21;
          uint64_t v12 = specialized _NativeSet.index(after:)(v19, v20, v21, a5);
          uint64_t v14 = v13;
          char v16 = v15;
          unint64_t result = outlined consume of Set<TUHandle>.Index._Variant(v9, v10, v11);
          uint64_t v19 = v12;
          uint64_t v20 = v14;
          unsigned __int8 v21 = v16 & 1;
        }
        --v5;
      }
      while (v5);
      return v19;
    }
    else
    {
      outlined copy of Set<A>.Index._Variant<A>(result, a2, a3 & 1);
    }
    return v6;
  }
  return result;
}

uint64_t outlined copy of Set<A>.Index._Variant<A>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized ClosedRange<>.index(_:offsetBy:)(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    if (!a3) {
      return result;
    }
    if (a3 < 0) {
      return specialized ClosedRange<>.index(_:offsetBy:)(a5, 0, a3 + 1);
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a5 - result;
  if (__OFSUB__(a5, result))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5 < a3)
  {
    if (v5 + 1 == a3) {
      return 0;
    }
    goto LABEL_15;
  }
  BOOL v6 = __OFADD__(result, a3);
  result += a3;
  if (v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < a4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

unint64_t CallControlsInCallContext.init(callStatus:mode:letMeInState:isAppFrontMost:)(unsigned int a1, unsigned __int8 a2)
{
  return a1 | ((unint64_t)a2 << 32);
}

unint64_t CallControlsInCallContext.mode.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t CallControlsInCallContext.letMeInState.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CallControlsInCallContext.isAppFrontMost.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

Swift::Bool __swiftcall CallControlsInCallContext.shouldDisplayControl()()
{
  return v0 != 3;
}

ValueMetadata *type metadata accessor for CallControlsContext()
{
  return &type metadata for CallControlsContext;
}

uint64_t getEnumTagSinglePayload for CallControlsContext(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallControlsContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallControlsInCallContext()
{
  return &type metadata for CallControlsInCallContext;
}

uint64_t LargeMultiwayControllerLayout.bannerViewConstraintManager.getter()
{
  return swift_retain();
}

uint64_t LargeMultiwayControllerLayout.localParticipantViewRegularWidth.getter()
{
  if (*(void *)(v0 + 88))
  {
    swift_retain();
    LocalParticipantViewConstraintManager.regularWidth.getter();
    return swift_release();
  }
  return result;
}

uint64_t LargeMultiwayControllerLayout.__allocating_init(containingView:participantListView:participantListState:rosterCellLayoutGuide:gridView:participantGridState:controlsView:controlsState:callControlsViewController:bannerView:bannerState:bannerLayoutGuide:bannerDodgingLayoutGuide:localParticipantView:localParticipantState:localParticipantAspectRatio:effectsView:effectsBrowserView:effectsControlsView:deviceOrientation:participantLabelsView:bottomControlsView:oneToOneShutterButton:changeLayoutButton:topCornerButtonsStackView:captionsView:captionsState:reactionsView:reactionsState:reactionPickerTipView:reactionPickerTipState:isLocalReactionActive:)(void *a1, void *a2, char a3, void *a4, void *a5, char a6, void *a7, unint64_t a8, void *a9, void *a10, void *a11, char *a12, void *a13, void *a14, void *a15, unsigned __int8 a16, uint64_t a17, void *a18, void *a19, void *a20,unint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,char a33)
{
  char v34 = a3 & 1;
  char v35 = a6 & 1;
  uint64_t v36 = swift_allocObject();
  LargeMultiwayControllerLayout.init(containingView:participantListView:participantListState:rosterCellLayoutGuide:gridView:participantGridState:controlsView:controlsState:callControlsViewController:bannerView:bannerState:bannerLayoutGuide:bannerDodgingLayoutGuide:localParticipantView:localParticipantState:localParticipantAspectRatio:effectsView:effectsBrowserView:effectsControlsView:deviceOrientation:participantLabelsView:bottomControlsView:oneToOneShutterButton:changeLayoutButton:topCornerButtonsStackView:captionsView:captionsState:reactionsView:reactionsState:reactionPickerTipView:reactionPickerTipState:isLocalReactionActive:)(a1, a2, v34, a4, a5, v35, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    v38,
    a29,
    v39,
    a31,
    v40,
    a33);
  return v36;
}

void *LargeMultiwayControllerLayout.init(containingView:participantListView:participantListState:rosterCellLayoutGuide:gridView:participantGridState:controlsView:controlsState:callControlsViewController:bannerView:bannerState:bannerLayoutGuide:bannerDodgingLayoutGuide:localParticipantView:localParticipantState:localParticipantAspectRatio:effectsView:effectsBrowserView:effectsControlsView:deviceOrientation:participantLabelsView:bottomControlsView:oneToOneShutterButton:changeLayoutButton:topCornerButtonsStackView:captionsView:captionsState:reactionsView:reactionsState:reactionPickerTipView:reactionPickerTipState:isLocalReactionActive:)(void *a1, void *a2, char a3, void *a4, void *a5, char a6, void *a7, unint64_t a8, void *a9, void *a10, void *a11, char *a12, void *a13, void *a14, void *a15, unsigned __int8 a16, uint64_t a17, void *a18, void *a19, void *a20,unint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,char a33)
{
  uint64_t v39 = a25;
  id v40 = a26;
  char v224 = *a12;
  v33[9] = 0;
  Swift::String v41 = (void **)(v33 + 9);
  uint64_t v42 = MEMORY[0x1E4FBC860];
  v33[4] = 0;
  v33[5] = v42;
  v33[10] = 0;
  uint64_t v211 = v33 + 10;
  v33[11] = 0;
  v33[2] = a1;
  id v230 = a1;
  objc_msgSend(v230, sel_frame);
  v33[6] = v43;
  v33[7] = v44;
  v33[8] = a21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3775280;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a5;
  id v228 = a5;
  *(void *)(inited + 48) = a7;
  *(void *)(inited + 56) = a15;
  *(void *)(inited + 64) = a25;
  *(void *)(inited + 72) = a26;
  *(void *)(inited + 80) = a29;
  *(void *)CGRect v240 = inited;
  specialized Array._endMutation()();
  double v46 = *(uint64_t **)v240;
  if (*(void *)(*(void *)v240 + 16) < 7uLL)
  {
    __break(1u);
    goto LABEL_57;
  }
  id v47 = *(void **)(*(void *)v240 + 32);
  id v48 = a29;
  id v49 = a2;
  id v50 = a5;
  id v51 = a7;
  id v52 = a15;
  id v53 = a25;
  id v54 = a26;
  if (v47) {
    objc_msgSend(v47, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  }
  uint64_t v39 = v230;
  id v55 = *(void **)(*(void *)v240 + 40);
  if (v55) {
    OUTLINED_FUNCTION_1_81(v55);
  }
  unint64_t v56 = *(void **)(*(void *)v240 + 48);
  if (v56) {
    OUTLINED_FUNCTION_1_81(v56);
  }
  uint64_t v57 = *(void **)(*(void *)v240 + 56);
  if (v57) {
    OUTLINED_FUNCTION_1_81(v57);
  }
  uint64_t v58 = *(void **)(*(void *)v240 + 64);
  if (v58) {
    OUTLINED_FUNCTION_1_81(v58);
  }
  double v59 = *(void **)(*(void *)v240 + 72);
  if (v59) {
    OUTLINED_FUNCTION_1_81(v59);
  }
  CGFloat v219 = v41;
  uint64_t v209 = a26;
  CGFloat v214 = a7;
  uint64_t v60 = *(void **)(*(void *)v240 + 80);
  if (v60) {
    OUTLINED_FUNCTION_1_81(v60);
  }
  swift_bridgeObjectRelease();
  id v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  objc_msgSend(v230, sel_addLayoutGuide_, v61);
  Swift::String v41 = (void **)objc_msgSend(v230, sel_safeAreaLayoutGuide);
  id v40 = v61;
  double v35 = 0.0;
  double v46 = &lazy protocol witness table cache variable for type UUID and conformance UUID;
  double v34 = 0.0;
  if (static Platform.current.getter())
  {
    double v34 = static Layout.MediaPip.padding.getter();
    if (one-time initialization token for shared == -1)
    {
LABEL_18:
      (*(void (**)(void))(*(void *)static Defaults.shared + 384))();
      static Platform.current.getter();
      OUTLINED_FUNCTION_3_2();
      (*(void (**)(void))(v62 + 488))();
      goto LABEL_19;
    }
LABEL_57:
    swift_once();
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v216 = a2;
  if (static Platform.current.getter())
  {
    static Layout.MediaPip.padding.getter();
    if (v46[175] != -1) {
      swift_once();
    }
    uint64_t v63 = (void (**)(double))(*(void *)static Defaults.shared + 384);
    uint64_t v64 = *v63;
    ((void (*)(void))*v63)();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    uint64_t v66 = *(void (**)(void))(v65 + 488);
    v66();
    double v67 = static Layout.MediaPip.padding.getter();
    v64(v67);
    uint64_t v68 = static Platform.current.getter();
    ((void (*)(uint64_t))v66)(v68);
    double v35 = 30.0;
  }
  id v226 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v69 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v69 + 16) = xmmword_1C3769600;
  id v70 = objc_msgSend(v40, sel_topAnchor);
  id v71 = objc_msgSend(v39, sel_topAnchor);
  id v72 = objc_msgSend(v70, sel_constraintEqualToAnchor_constant_, v71, v35);

  *(void *)(v69 + 32) = v72;
  id v73 = objc_msgSend(v40, sel_bottomAnchor);
  id v74 = objc_msgSend(v41, sel_bottomAnchor);
  id v75 = OUTLINED_FUNCTION_2_67();

  *(void *)(v69 + 40) = v75;
  id v76 = objc_msgSend(v40, sel_trailingAnchor);
  id v77 = objc_msgSend(v41, sel_trailingAnchor);
  id v78 = objc_msgSend(v76, sel_constraintEqualToAnchor_constant_, v77, -v34);

  *(void *)(v69 + 48) = v78;
  id v79 = objc_msgSend(v40, sel_trailingAnchor);
  id v80 = objc_msgSend(a4, sel_trailingAnchor);
  id v81 = OUTLINED_FUNCTION_2_67();

  *(void *)(v69 + 56) = v81;
  id v82 = objc_msgSend(v40, sel_bottomAnchor);
  id v83 = objc_msgSend(a4, sel_bottomAnchor);
  id v84 = OUTLINED_FUNCTION_2_67();

  *(void *)(v69 + 64) = v84;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v226, sel_activateConstraints_, isa);

  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_1C3769830;
  id v87 = objc_msgSend(v40, sel_leadingAnchor);
  uint64_t v218 = v41;
  id v88 = objc_msgSend(v41, sel_leadingAnchor);
  id v89 = objc_msgSend(v87, sel_constraintEqualToAnchor_constant_, v88, v34);

  *(void *)(v86 + 32) = v89;
  *(void *)CGRect v240 = v86;
  specialized Array._endMutation()();
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v226, sel_activateConstraints_, v90);

  uint64_t v91 = *v219;
  *CGFloat v219 = a22;
  id v208 = a22;

  if (a23)
  {
    id v92 = a23;
    int v93 = static Platform.current.getter();
    uint64_t v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = xmmword_1C3769610;
    id v95 = objc_msgSend(v92, sel_bottomAnchor);
    id v96 = objc_msgSend(v41, sel_bottomAnchor);
    if (v93)
    {
      id v97 = objc_msgSend(v95, sel_constraintEqualToAnchor_, v96);

      *(void *)(v94 + 32) = v97;
      id v98 = objc_msgSend(v92, sel_centerXAnchor);
      id v99 = objc_msgSend(v230, sel_centerXAnchor);
    }
    else
    {
      id v100 = objc_msgSend(v95, sel_constraintEqualToAnchor_constant_, v96, -40.0);

      *(void *)(v94 + 32) = v100;
      id v98 = objc_msgSend(v92, sel_trailingAnchor);
      id v99 = objc_msgSend(v218, sel_trailingAnchor);
    }
    id v101 = objc_msgSend(v98, sel_constraintEqualToAnchor_, v99);

    *(void *)(v94 + 40) = v101;
    *(void *)CGRect v240 = v94;
    specialized Array._endMutation()();
    Class v102 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v226, sel_activateConstraints_, v102);
  }
  uint64_t v103 = a9;
  if (a24)
  {
    id v104 = a24;
    id v105 = objc_msgSend(v104, sel_trailingAnchor);
    id v106 = objc_msgSend(v230, sel_safeAreaLayoutGuide);
    id v107 = objc_msgSend(v106, sel_trailingAnchor);

    id v108 = objc_msgSend(v105, sel_constraintEqualToAnchor_, v107);
    type metadata accessor for UILayoutPriority(0);
    int v231 = 1144750080;
    LODWORD(v239) = 1065353216;
    lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority();
    static _UIKitNumericRawRepresentable.- infix(_:_:)();
    LODWORD(v109) = *(_DWORD *)v240;
    objc_msgSend(v108, sel_setPriority_, v109);
    uint64_t v110 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v110 + 16) = xmmword_1C3769600;
    id v111 = objc_msgSend(v104, sel_centerYAnchor);
    id v112 = objc_msgSend(v230, sel_centerYAnchor);
    id v113 = objc_msgSend(v111, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v112);

    *(void *)(v110 + 32) = v113;
    id v114 = objc_msgSend(v104, sel_trailingAnchor);
    id v115 = objc_msgSend(v228, sel_trailingAnchor);
    static Layout.MediaPip.padding.getter();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static Defaults.shared + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v116 + 488))();
    id v117 = objc_msgSend(v114, sel_constraintLessThanOrEqualToAnchor_constant_, v115, -20.0);

    *(void *)(v110 + 40) = v117;
    *(void *)(v110 + 48) = v108;
    id v118 = v108;
    id v119 = objc_msgSend(v104, sel_widthAnchor);
    static Layout.MediaPip.padding.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v120 + 384))();
    static Platform.current.getter();
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(void))(v121 + 488))();
    id v122 = objc_msgSend(v119, sel_constraintEqualToConstant_, 50.0);

    *(void *)(v110 + 56) = v122;
    id v123 = objc_msgSend(v104, sel_heightAnchor);
    id v124 = objc_msgSend(v104, sel_widthAnchor);
    id v125 = objc_msgSend(v123, sel_constraintEqualToAnchor_, v124);

    *(void *)(v110 + 64) = v125;
    *(void *)CGRect v240 = v110;
    specialized Array._endMutation()();
    Class v126 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v226, sel_activateConstraints_, v126);

    uint64_t v103 = a9;
  }
  if (v103)
  {
    uint64_t ObjectType = swift_getObjectType();
    double v128 = (uint64_t (*)(id, void *, void *, uint64_t, void *))a10[15];
    id v129 = v103;
    double v130 = v230;
    double v131 = (void *)v128(v230, a24, a15, ObjectType, a10);
  }
  else
  {
    double v131 = 0;
    double v130 = v230;
  }
  uint64_t v202 = type metadata accessor for GridViewConstraintManager();
  OUTLINED_FUNCTION_25_15();
  id v207 = v209;
  id v132 = a4;
  id v133 = v130;
  id v134 = v40;
  id v135 = v228;
  id v206 = a25;
  double v223 = GridViewConstraintManager.init(containingGuide:containingView:gridView:rosterCellLayoutGuide:changeLayoutButton:topCornerButtonsStackView:captionsState:)(v134, v133, v135, v132, a25, v209);
  if (v131) {
    id v136 = v131;
  }
  else {
    id v136 = v134;
  }
  v240[0] = v224;
  uint64_t v196 = type metadata accessor for LocalParticipantViewConstraintManager();
  swift_allocObject();
  id v210 = a20;
  id v205 = v131;
  id v137 = v133;
  id v138 = v135;
  id v139 = v214;
  uint64_t v140 = a15;
  id v141 = v132;
  uint64_t v200 = v138;
  unint64_t v229 = v140;
  uint64_t v142 = LocalParticipantViewConstraintManager.init(containingGuide:rosterCellLayoutGuide:containingView:localPIPView:controlsView:effectsControlsView:localState:bannerState:controlsState:gridView:aspectRatio:deviceOrientation:)(v136, v141, v137, v140, v139, a20, a16, (unsigned __int8 *)v240, a8, v138, a17, a21);
  v227[11] = v142;
  swift_retain();
  swift_release();
  if (a9)
  {
    uint64_t v143 = swift_getObjectType();
    v144 = (void (*)(uint64_t, _UNKNOWN **, uint64_t, void *))a10[13];
    id v145 = a9;
    uint64_t v146 = swift_retain();
    v144(v146, &protocol witness table for LocalParticipantViewConstraintManager, v143, a10);
  }
  uint64_t v221 = v142;
  uint64_t v192 = type metadata accessor for InCallControlsViewConstraintManager();
  swift_allocObject();
  id v147 = v137;
  id v148 = v134;
  id v149 = v139;
  uint64_t v215 = InCallControlsViewConstraintManager.init(containingGuide:containingView:controlsView:type:)(v148, v147, v149, 1, 2);
  char v150 = static Platform.current.getter();
  uint64_t v194 = type metadata accessor for ParticipantListViewConstraintManager();
  swift_allocObject();
  id v151 = v148;
  id v152 = v216;
  id v153 = v149;
  id v154 = v141;
  id v155 = a13;
  if (v150) {
    char v156 = 1;
  }
  else {
    char v156 = 2;
  }
  uint64_t v204 = v152;
  uint64_t v220 = ParticipantListViewConstraintManager.init(containingGuide:rosterView:controlsView:type:bannerLayoutGuide:rosterCellLayoutGuide:)(v151, v152, v153, v156, v155, v154);
  uint64_t v193 = type metadata accessor for CaptionsViewConstraintManager();
  swift_allocObject();
  id v157 = v147;
  id v158 = v151;
  id v159 = v200;
  id v160 = v154;
  id v161 = a27;
  id v162 = a11;
  v201 = v160;
  uint64_t v203 = v161;
  id v195 = CaptionsViewConstraintManager.init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:)(v158, v160, v157, v161, v162, v159);
  v240[0] = 0;
  uint64_t v163 = type metadata accessor for InCallBannerViewConstraintManager();
  swift_allocObject();
  id v164 = v157;
  id v165 = v158;
  id v166 = v155;
  id v167 = v162;
  uint64_t v217 = v164;
  id v198 = a14;
  uint64_t v199 = v166;
  id v197 = v167;
  uint64_t v168 = InCallBannerViewConstraintManager.init(layoutIdiom:containingGuide:containingView:visibleGuide:bannerView:bannerDodgingGuide:)(v240, v165, v164, v166, v167, v198);
  swift_beginAccess();
  *uint64_t v211 = v168;
  swift_release();
  if (a18 && a19)
  {
    v169 = v229;
    id v170 = a18;
    id v171 = a19;
    uint64_t v172 = specialized static ViewControllerLayout.effectsConstraintManagers(with:layoutIdiom:controlsView:localParticipantView:effectsView:effectsBrowserView:)(v217, 0, v153, a15, v170, v171);

    v227[4] = v172;
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ViewConstraintManager>);
  uint64_t v173 = swift_allocObject();
  *(_OWORD *)(v173 + 16) = xmmword_1C37696D0;
  *(void *)(v173 + 56) = v202;
  *(void *)(v173 + 64) = &protocol witness table for GridViewConstraintManager;
  *(void *)(v173 + 32) = v223;
  *(void *)(v173 + 96) = v196;
  *(void *)(v173 + 104) = &protocol witness table for LocalParticipantViewConstraintManager;
  *(void *)(v173 + 72) = v221;
  uint64_t v239 = v173;
  if (a9)
  {
    uint64_t v174 = swift_initStackObject();
    *(_OWORD *)(v174 + 16) = xmmword_1C3769620;
    *(void *)(v174 + 56) = swift_getObjectType();
    *(void *)(v174 + 64) = a10[1];
    *(void *)(v174 + 32) = a9;
    id v175 = a9;
  }
  else
  {
    uint64_t v176 = swift_initStackObject();
    *(_OWORD *)(v176 + 16) = xmmword_1C3769620;
    *(void *)(v176 + 56) = v192;
    *(void *)(v176 + 64) = &protocol witness table for InCallControlsViewConstraintManager;
    *(void *)(v176 + 32) = v215;
    swift_retain();
  }
  uint64_t v177 = a29;
  swift_retain();
  swift_retain();
  specialized Array.append<A>(contentsOf:)();
  uint64_t v178 = *v211;
  if (*v211)
  {
    uint64_t v179 = swift_initStackObject();
    *(_OWORD *)(v179 + 16) = xmmword_1C3769620;
    *(void *)(v179 + 56) = v163;
    *(void *)(v179 + 64) = &protocol witness table for InCallBannerViewConstraintManager;
    *(void *)(v179 + 32) = v178;
    swift_retain();
    specialized Array.append<A>(contentsOf:)();
  }
  uint64_t v180 = swift_initStackObject();
  *(_OWORD *)(v180 + 16) = xmmword_1C37696D0;
  *(void *)(v180 + 56) = v194;
  *(void *)(v180 + 64) = &protocol witness table for ParticipantListViewConstraintManager;
  *(void *)(v180 + 32) = v220;
  *(void *)(v180 + 96) = v193;
  *(void *)(v180 + 104) = &protocol witness table for CaptionsViewConstraintManager;
  *(void *)(v180 + 72) = v195;
  swift_retain();
  swift_retain();
  specialized Array.append<A>(contentsOf:)();
  if (a29)
  {
    uint64_t v181 = type metadata accessor for ReactionsViewConstraintManager();
    swift_allocObject();
    uint64_t v182 = ReactionsViewConstraintManager.init(localParticipantView:reactionsView:)(v229, a29);
    uint64_t v183 = swift_initStackObject();
    *(_OWORD *)(v183 + 16) = xmmword_1C3769620;
    *(void *)(v183 + 56) = v181;
    *(void *)(v183 + 64) = &protocol witness table for ReactionsViewConstraintManager;
    *(void *)(v183 + 32) = v182;
    specialized Array.append<A>(contentsOf:)();
  }
  if (a31)
  {
    uint64_t v184 = type metadata accessor for ReactionPickerTipViewConstraintManager();
    swift_allocObject();
    id v185 = v165;
    double v186 = v229;
    id v187 = a31;
    v188 = v186;
    uint64_t v177 = a29;
    v189 = ReactionPickerTipViewConstraintManager.init(containingGuide:localParticipantView:reactionPickerTipView:)(v185, v188, v187);
    uint64_t v190 = swift_initStackObject();
    *(_OWORD *)(v190 + 16) = xmmword_1C3769620;
    *(void *)(v190 + 56) = v184;
    *(void *)(v190 + 64) = &protocol witness table for ReactionPickerTipViewConstraintManager;
    *(void *)(v190 + 32) = v189;
    specialized Array.append<A>(contentsOf:)();
  }
  v227[3] = v239;
  LOBYTE(v231) = a3 & 1;
  unint64_t v232 = a8;
  char v233 = v224;
  unsigned __int8 v234 = a16;
  char v235 = a6 & 1;
  __int16 v236 = 0;
  char v237 = 0;
  char v238 = a33 & 1;
  LargeMultiwayControllerLayout.updateLayoutWith(_:)((uint64_t)&v231);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v227;
}

uint64_t specialized static ViewControllerLayout.effectsConstraintManagers(with:layoutIdiom:controlsView:localParticipantView:effectsView:effectsBrowserView:)(void *a1, char a2, void *a3, void *a4, void *a5, void *a6)
{
  char v40 = a2 & 1;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  objc_msgSend(a1, sel_addLayoutGuide_, v8);
  uint64_t v9 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769580;
  id v11 = objc_msgSend(v8, sel_topAnchor);
  id v12 = objc_msgSend(a1, sel_safeAreaLayoutGuide);
  id v13 = objc_msgSend(v12, sel_topAnchor);

  id v14 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v13);
  *(void *)(v10 + 32) = v14;
  id v15 = objc_msgSend(v8, sel_bottomAnchor);
  id v16 = OUTLINED_FUNCTION_3_5();
  id v17 = objc_msgSend(v16, sel_bottomAnchor);

  id v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v17);
  *(void *)(v10 + 40) = v18;
  id v19 = objc_msgSend(v8, sel_leadingAnchor);
  id v20 = OUTLINED_FUNCTION_3_5();
  id v21 = objc_msgSend(v20, sel_leadingAnchor);

  id v22 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v21);
  *(void *)(v10 + 48) = v22;
  id v23 = objc_msgSend(v8, sel_trailingAnchor);
  id v24 = OUTLINED_FUNCTION_3_5();
  id v25 = objc_msgSend(v24, sel_trailingAnchor);

  id v26 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v25);
  *(void *)(v10 + 56) = v26;
  uint64_t v44 = v10;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_activateConstraints_, isa);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ViewConstraintManager>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C37696D0;
  uint64_t v29 = type metadata accessor for EffectsViewConstraintManager();
  swift_allocObject();
  id v30 = a4;
  id v31 = a5;
  id v32 = v8;
  uint64_t v33 = EffectsViewConstraintManager.init(containingGuide:localParticipantView:effectsView:)(v32, a4, v31);
  *(void *)(v28 + 56) = v29;
  *(void *)(v28 + 64) = &protocol witness table for EffectsViewConstraintManager;
  *(void *)(v28 + 32) = v33;
  char v43 = v40;
  uint64_t v34 = type metadata accessor for EffectsBrowserViewConstraintManager();
  OUTLINED_FUNCTION_25_15();
  id v35 = v32;
  id v36 = v30;
  uint64_t v37 = EffectsBrowserViewConstraintManager.init(layoutIdiom:containingGuide:effectsBrowserView:controlsView:localParticipantView:)(&v43, (uint64_t)v35, a6, a3, a4);
  *(void *)(v28 + 96) = v34;
  *(void *)(v28 + 104) = &protocol witness table for EffectsBrowserViewConstraintManager;
  *(void *)(v28 + 72) = v37;

  return v28;
}

void LargeMultiwayControllerLayout.updateLayoutWith(_:)(uint64_t a1)
{
  char v2 = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 18);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 19);
  int v5 = *(unsigned __int8 *)(a1 + 20);
  int v21 = *(unsigned __int8 *)(a1 + 21);
  int v22 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 16);
  uint64_t v7 = self;
  swift_beginAccess();
  type metadata accessor for NSLayoutConstraint();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_deactivateConstraints_, isa);

  uint64_t v9 = 0x10000;
  if (!v4) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v6 | v9 | (v20 << 24);
  uint64_t v11 = 0x100000000;
  if (!v5) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0x10000000000;
  if (!v21) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0x1000000000000;
  if (!v22) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v10 | v11 | v12 | v13;
  *(void *)(v1 + 40) = specialized static ViewControllerLayout.constraints(with:layoutState:size:deviceOrientation:)(*(void *)(v1 + 24), v2, v3, v14, *(void *)(v1 + 64), *(double *)(v1 + 48), *(double *)(v1 + 56));
  swift_bridgeObjectRelease();
  double v15 = *(double *)(v1 + 48);
  double v16 = *(double *)(v1 + 56);
  uint64_t v17 = *(void *)(v1 + 64);
  uint64_t v18 = swift_bridgeObjectRetain();
  specialized static ViewControllerLayout.constraints(with:layoutState:size:deviceOrientation:)(v18, v2, v3, v14, v17, v15, v16);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)();
  swift_endAccess();
  swift_bridgeObjectRetain();
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_activateConstraints_, v19);
}

uint64_t specialized static ViewControllerLayout.constraints(with:layoutState:size:deviceOrientation:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      char v22 = a2 & 1;
      uint64_t v36 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v12 = a1 + 32;
      uint64_t v13 = v36;
      do
      {
        outlined init with copy of IDSLookupManager(v12, (uint64_t)v33);
        uint64_t v14 = v34;
        uint64_t v15 = v35;
        __swift_project_boxed_opaque_existential_1(v33, v34);
        v25[0] = v22;
        uint64_t v26 = a3;
        __int16 v27 = a4;
        char v28 = BYTE2(a4) & 1;
        char v29 = BYTE3(a4);
        char v30 = BYTE4(a4) & 1;
        char v31 = BYTE5(a4) & 1;
        char v32 = BYTE6(a4) & 1;
        uint64_t v16 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, double, double))(v15 + 8))(v25, a5, v14, v15, a6, a7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v13 = v36;
        }
        unint64_t v17 = *(void *)(v13 + 16);
        unint64_t v18 = v17 + 1;
        if (v17 >= *(void *)(v13 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v13 = v36;
        }
        *(void *)(v13 + 16) = v18;
        *(void *)(v13 + 8 * v17 + 32) = v16;
        v12 += 40;
        --v8;
      }
      while (v8);
    }
    else
    {
      unint64_t v18 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v19 = MEMORY[0x1E4FBC860];
      if (!v18)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = 0;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    do
    {
      ++v20;
      v33[0] = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      uint64_t v19 = v33[0];
    }
    while (v18 != v20);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  return MEMORY[0x1E4FBC860];
}

Swift::Void __swiftcall LargeMultiwayControllerLayout.addEffectsConstraints(with:controlsView:localParticipantView:effectsView:effectsBrowserView:)(UIView *with, UIView *controlsView, UIView_optional *localParticipantView, UIView *effectsView, UIView *effectsBrowserView)
{
  *(void *)(v5 + 32) = specialized static ViewControllerLayout.effectsConstraintManagers(with:layoutIdiom:controlsView:localParticipantView:effectsView:effectsBrowserView:)(with, 0, controlsView, localParticipantView, effectsView, effectsBrowserView);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall LargeMultiwayControllerLayout.removeEffectsConstraints()()
{
  *(void *)(v0 + 32) = 0;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall LargeMultiwayControllerLayout.update(with:)(CGSize with)
{
  uint64_t v2 = *(void *)(v1 + 88);
  if (v2)
  {
    *(CGFloat *)(v2 + 296) = with.width;
    *(CGFloat *)(v2 + 304) = with.height;
    *(unsigned char *)(v2 + 312) = 0;
  }
}

void LargeMultiwayControllerLayout.update(for:with:deviceOrientation:)(char *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  char v7 = *a1;
  uint64_t v8 = *((void *)a1 + 1);
  __int16 v9 = *((_WORD *)a1 + 8);
  char v10 = a1[18];
  char v11 = a1[19];
  char v12 = a1[20];
  char v13 = a1[21];
  char v14 = a1[22];
  *(double *)(v6 + 48) = a5;
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 64) = a2;
  v15[0] = v7;
  uint64_t v16 = v8;
  __int16 v17 = v9;
  char v18 = v10;
  char v19 = v11;
  char v20 = v12;
  char v21 = v13;
  char v22 = v14;
  LargeMultiwayControllerLayout.updateLayoutWith(_:)((uint64_t)v15);
}

uint64_t LargeMultiwayControllerLayout.update(localParticipantAspectRatio:layoutState:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 17);
    char v14 = *(unsigned char *)(a2 + 16);
    char v12 = *(unsigned char *)(a2 + 19);
    char v5 = *(unsigned char *)(a2 + 22);
    char v6 = *(unsigned char *)(a2 + 21);
    char v7 = *(unsigned char *)(a2 + 20);
    char v8 = *(unsigned char *)(a2 + 18);
    uint64_t v9 = result + 32;
    char v10 = *(unsigned char *)a2;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of IDSLookupManager(v9, (uint64_t)v17);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ViewConstraintManager);
      type metadata accessor for LocalParticipantViewConstraintManager();
      if (swift_dynamicCast())
      {
        uint64_t v11 = *(void *)(v2 + 64);
        v17[0] = v10;
        uint64_t v18 = v15;
        char v19 = v14;
        char v20 = v13;
        char v21 = v8;
        char v22 = v12;
        char v23 = v7;
        char v24 = v6;
        char v25 = v5;
        LocalParticipantViewConstraintManager.update(aspectRatio:deviceOrientation:layoutState:)(a1, v11, v17);
        swift_release();
      }
      v9 += 40;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall LargeMultiwayControllerLayout.update(remoteParticipantAspectRatio:)(CGSize remoteParticipantAspectRatio)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    double height = remoteParticipantAspectRatio.height;
    double width = remoteParticipantAspectRatio.width;
    uint64_t v6 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of IDSLookupManager(v6, (uint64_t)v11);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ViewConstraintManager);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionsViewConstraintManagerProtocol);
      if (swift_dynamicCast())
      {
        outlined init with take of Notice(v9, (uint64_t)v12);
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        __swift_project_boxed_opaque_existential_1(v12, v13);
        (*(void (**)(uint64_t, uint64_t, double, double))(v8 + 24))(v7, v8, width, height);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      }
      else
      {
        uint64_t v10 = 0;
        memset(v9, 0, sizeof(v9));
        outlined destroy of CaptionsViewConstraintManagerProtocol?((uint64_t)v9);
      }
      v6 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall LargeMultiwayControllerLayout.update(isDisplayedInBanner:containingView:)(Swift::Bool isDisplayedInBanner, UIView *containingView)
{
  uint64_t v3 = *(void **)(v2 + 72);
  if (v3)
  {
    id v7 = v3;
    char v6 = static Platform.current.getter() == 0;
    objc_msgSend(v7, sel_setFrame_, specialized static ViewControllerLayout.participantLabelsViewFrame(isDisplayedInBanner:isDisplayedInAmbient:containingView:participantLabelsView:)(isDisplayedInBanner, v6, containingView, v7));
  }
}

double specialized static ViewControllerLayout.participantLabelsViewFrame(isDisplayedInBanner:isDisplayedInAmbient:containingView:participantLabelsView:)(char a1, char a2, id a3, void *a4)
{
  if (a1)
  {
    objc_msgSend(a3, sel_bounds);
    double v9 = v8;
  }
  else
  {
    if (a2) {
      id v10 = objc_msgSend(a3, sel_safeAreaLayoutGuide);
    }
    else {
      id v10 = objc_msgSend(a3, sel_readableContentGuide);
    }
    id v11 = v10;
    objc_msgSend(v11, sel_layoutFrame);
    double v9 = v12;
  }
  objc_msgSend(a4, sel_systemLayoutSizeFittingSize_, v9, 1.79769313e308);
  if (a2)
  {
    objc_msgSend(a3, sel_safeAreaInsets);
    double v14 = v13;
    if ((a1 & 1) == 0) {
      return v14;
    }
  }
  else
  {
    objc_msgSend(a3, sel_bounds);
    double v14 = floor((v15 - v9) * 0.5);
    if ((a1 & 1) == 0)
    {
      id v16 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v16, sel_bounds);

      objc_msgSend(a3, sel_safeAreaInsets);
      return v14;
    }
  }
  objc_msgSend(a3, sel_bounds);
  return v14;
}

Swift::Void __swiftcall LargeMultiwayControllerLayout.update(localParticipantCorner:)(ConversationKit::MultiwayViewConstraintsController::MultiwayCorner_optional localParticipantCorner)
{
  uint64_t v2 = *(ConversationKit::MultiwayViewConstraintsController::MultiwayCorner_optional **)(v1 + 88);
  if (v2)
  {
    swift_beginAccess();
    v2[289].value = localParticipantCorner.value;
  }
}

uint64_t LargeMultiwayControllerLayout.handlesLocalParticipantConstraints.getter()
{
  return 1;
}

uint64_t LargeMultiwayControllerLayout.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return v0;
}

uint64_t LargeMultiwayControllerLayout.__deallocating_deinit()
{
  LargeMultiwayControllerLayout.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for ViewControllerLayout.update(with:) in conformance LargeMultiwayControllerLayout(double a1, double a2)
{
}

void protocol witness for ViewControllerLayout.update(for:with:deviceOrientation:) in conformance LargeMultiwayControllerLayout(char *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
}

uint64_t protocol witness for ViewControllerLayout.update(localParticipantAspectRatio:layoutState:) in conformance LargeMultiwayControllerLayout(uint64_t a1, uint64_t a2)
{
  return LargeMultiwayControllerLayout.update(localParticipantAspectRatio:layoutState:)(a1, a2);
}

void protocol witness for ViewControllerLayout.update(remoteParticipantAspectRatio:) in conformance LargeMultiwayControllerLayout(double a1, double a2)
{
}

void protocol witness for ViewControllerLayout.update(isDisplayedInBanner:containingView:) in conformance LargeMultiwayControllerLayout(Swift::Bool a1, UIView *a2)
{
}

void protocol witness for ViewControllerLayout.update(localParticipantCorner:) in conformance LargeMultiwayControllerLayout(ConversationKit::MultiwayViewConstraintsController::MultiwayCorner_optional a1)
{
}

void protocol witness for ViewControllerLayout.addEffectsConstraints(with:controlsView:localParticipantView:effectsView:effectsBrowserView:) in conformance LargeMultiwayControllerLayout(UIView *a1, UIView *a2, UIView_optional *a3, UIView *a4, UIView *a5)
{
}

void protocol witness for ViewControllerLayout.updateLayoutWith(_:) in conformance LargeMultiwayControllerLayout(uint64_t a1)
{
}

void protocol witness for ViewControllerLayout.removeEffectsConstraints() in conformance LargeMultiwayControllerLayout()
{
}

uint64_t protocol witness for ViewControllerLayout.bannerViewConstraintManager.getter in conformance LargeMultiwayControllerLayout()
{
  return LargeMultiwayControllerLayout.bannerViewConstraintManager.getter();
}

uint64_t protocol witness for ViewControllerLayout.localParticipantViewRegularWidth.getter in conformance LargeMultiwayControllerLayout()
{
  return LargeMultiwayControllerLayout.localParticipantViewRegularWidth.getter();
}

uint64_t outlined destroy of CaptionsViewConstraintManagerProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionsViewConstraintManagerProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for LargeMultiwayControllerLayout()
{
  return self;
}

uint64_t method lookup function for LargeMultiwayControllerLayout(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LargeMultiwayControllerLayout);
}

uint64_t dispatch thunk of LargeMultiwayControllerLayout.__allocating_init(containingView:participantListView:participantListState:rosterCellLayoutGuide:gridView:participantGridState:controlsView:controlsState:callControlsViewController:bannerView:bannerState:bannerLayoutGuide:bannerDodgingLayoutGuide:localParticipantView:localParticipantState:localParticipantAspectRatio:effectsView:effectsBrowserView:effectsControlsView:deviceOrientation:participantLabelsView:bottomControlsView:oneToOneShutterButton:changeLayoutButton:topCornerButtonsStackView:captionsView:captionsState:reactionsView:reactionsState:reactionPickerTipView:reactionPickerTipState:isLocalReactionActive:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(v6 + 152))(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t SpamFlowController.__allocating_init(spamCall:featureFlags:)(uint64_t a1, uint64_t a2)
{
  return SpamFlowController.__allocating_init(spamCall:featureFlags:)(a1, a2, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamFlowController.__allocating_init(spamCall:featureFlags:));
}

ConversationKit::SpamFlowController::Flow __swiftcall SpamFlowController.determineFlow()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for spam != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.spam);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, "determine SpamFlow", v6, 2u);
    OUTLINED_FUNCTION_3();
  }

  id v7 = (void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v8);
  OUTLINED_FUNCTION_0_63();
  MEMORY[0x1F4188790](v10);
  double v12 = OUTLINED_FUNCTION_4_66(v11, v71);
  v13(v12);
  LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v8, v9);
  uint64_t v14 = OUTLINED_FUNCTION_8_43();
  v15(v14);
  if ((v9 & 1) == 0) {
    return 5;
  }
  unsigned int v16 = objc_msgSend(*(id *)(v1 + 56), sel_unknownInitiatorReportEnabled);
  __int16 v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_12_4(v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)char v19 = 136315138;
    v74[0] = v20;
    if (v16) {
      uint64_t v21 = 1702195828;
    }
    else {
      uint64_t v21 = 0x65736C6166;
    }
    uint64_t v72 = v3;
    unsigned int v22 = v16;
    if (v16) {
      unint64_t v23 = 0xE400000000000000;
    }
    else {
      unint64_t v23 = 0xE500000000000000;
    }
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unsigned int v16 = v22;
    id v7 = (void *)(v1 + 16);
    LOBYTE(v3) = v72;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v17, (os_log_type_t)&v71, "determineFlow unknownInitiatorReportEnabled %s", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  outlined init with copy of IDSLookupManager((uint64_t)v7, (uint64_t)v74);
  unsigned __int8 v24 = SpamFlowController.KnownCallers.init(spamCall:)(v74);
  char v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_12_4(v26))
  {
    __int16 v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)__int16 v27 = 134217984;
    v74[0] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v25, (os_log_type_t)&v71, "determineFlow knownCallers %ld", v27, 0xCu);
    OUTLINED_FUNCTION_3();
  }

  uint64_t v29 = *(void *)(v1 + 40);
  uint64_t v28 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v7, v29);
  OUTLINED_FUNCTION_0_63();
  MEMORY[0x1F4188790](v30);
  char v32 = OUTLINED_FUNCTION_4_66(v31, v71);
  v33(v32);
  char v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(v29, v28);
  uint64_t v35 = OUTLINED_FUNCTION_8_43();
  v36(v35);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_12_4(v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 67109120;
    LODWORD(v74[0]) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v37, (os_log_type_t)&v71, "determineFlow oneOnOneUnknown %{BOOL}d", v39, 8u);
    OUTLINED_FUNCTION_3();
  }

  if (v34)
  {
    char v40 = (void *)Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12(v41))
    {
      uint64_t v42 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v42);
      OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v43, v44, "determineFlow 1-1 report and block ");
      OUTLINED_FUNCTION_3();
    }

    return 4;
  }
  if (v24 == 3)
  {
    double v46 = (void *)Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12(v47))
    {
      id v48 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_1(v48);
      OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v49, v50, "determineFlow knownContact ");
      OUTLINED_FUNCTION_3();
    }

    return 5;
  }
  if (v16)
  {
    if (v24)
    {
      if (v24 == 2)
      {
        id v51 = (void *)Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_12(v52))
        {
          id v53 = (_WORD *)OUTLINED_FUNCTION_8_0();
          OUTLINED_FUNCTION_23_1(v53);
          OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v54, v55, "determineFlow groupIntiatorReportAndBlock");
          OUTLINED_FUNCTION_3();
        }

        return 3;
      }
      else
      {
        id v61 = (void *)Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_12(v62))
        {
          uint64_t v63 = (_WORD *)OUTLINED_FUNCTION_8_0();
          OUTLINED_FUNCTION_23_1(v63);
          OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v64, v65, "determineFlow groupBlockAll");
          OUTLINED_FUNCTION_3();
        }

        return 0;
      }
    }
    else
    {
      uint64_t v66 = (void *)Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_12(v67))
      {
        uint64_t v68 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_23_1(v68);
        OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v69, v70, "determineFlow groupBlockSome");
        OUTLINED_FUNCTION_3();
      }

      return 1;
    }
  }
  else
  {
    outlined init with copy of IDSLookupManager((uint64_t)v7, (uint64_t)v74);
    char v56 = SpamFlowController.GroupParticipants.init(spamCall:)(v74);
    os_log_type_t v57 = v3;
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12(v59))
    {
      uint64_t v60 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_1C2F90000, v58, v57, "determineFlow unknownInitiatorReportEnabled is off", v60, 2u);
      OUTLINED_FUNCTION_3();
    }

    if (v56 == 1) {
      return 0;
    }
    else {
      return 5;
    }
  }
}

uint64_t SpamFlowController.Flow.rawValue.getter(uint64_t result)
{
  return result;
}

ConversationKit::SpamFlowController::Flow_optional __swiftcall SpamFlowController.Flow.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 6) {
    LOBYTE(rawValue) = 6;
  }
  return (ConversationKit::SpamFlowController::Flow_optional)rawValue;
}

ConversationKit::SpamFlowController::Flow_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SpamFlowController.Flow@<W0>(Swift::Int *a1@<X0>, ConversationKit::SpamFlowController::Flow_optional *a2@<X8>)
{
  result.value = SpamFlowController.Flow.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SpamFlowController.Flow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SpamFlowController.Flow.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t SpamFlowController.KnownCallers.init(spamCall:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3))
  {
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v5);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6))
    {
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v7);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8)) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = 3;
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v4;
}

uint64_t SpamFlowController.GroupParticipants.init(spamCall:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3))
  {
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v5);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6)) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 2;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v4;
}

uint64_t SpamFlowController.init(spamCall:featureFlags:)(uint64_t a1, uint64_t a2)
{
  return SpamFlowController.__allocating_init(spamCall:featureFlags:)(a1, a2, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamFlowController.init(spamCall:featureFlags:));
}

uint64_t SpamFlowController.__allocating_init(spamCall:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  OUTLINED_FUNCTION_0_63();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = a3(v11, a2, v3, v7, ObjectType, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

uint64_t SpamFlowController.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t SpamFlowController.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized SpamFlowController.__allocating_init(spamCall:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  double v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a4);
  uint64_t v15 = specialized SpamFlowController.init(spamCall:featureFlags:)((uint64_t)v13, a2, v14, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
  return v15;
}

uint64_t specialized SpamFlowController.init(spamCall:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a4;
  uint64_t v14 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  outlined init with take of Notice(&v12, a3 + 16);
  *(void *)(a3 + 56) = a2;
  return a3;
}

unint64_t lazy protocol witness table accessor for type SpamFlowController.Flow and conformance SpamFlowController.Flow()
{
  unint64_t result = lazy protocol witness table cache variable for type SpamFlowController.Flow and conformance SpamFlowController.Flow;
  if (!lazy protocol witness table cache variable for type SpamFlowController.Flow and conformance SpamFlowController.Flow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpamFlowController.Flow and conformance SpamFlowController.Flow);
  }
  return result;
}

uint64_t type metadata accessor for SpamFlowController()
{
  return self;
}

uint64_t method lookup function for SpamFlowController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SpamFlowController);
}

uint64_t dispatch thunk of SpamFlowController.__allocating_init(spamCall:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t getEnumTagSinglePayload for SpamFlowController.Flow(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SpamFlowController.Flow(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31DB03CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpamFlowController.Flow()
{
  return &type metadata for SpamFlowController.Flow;
}

void *PushToTalkLeavePillButton.__allocating_init(viewModel:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return PushToTalkLeavePillButton.init(viewModel:)(a1);
}

void *PushToTalkLeavePillButton.init(viewModel:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit25PushToTalkLeavePillButton_cancellables) = MEMORY[0x1E4FBC870];
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit25PushToTalkLeavePillButton_viewModel) = a1;
  BOOL v7 = self;
  swift_retain();
  id v8 = objc_msgSend(v7, sel_conversationKit);
  v22._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0x657661654CLL;
  v9._object = (void *)0xE500000000000000;
  v10.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v10.value._object = (void *)0xEF74694B6E6F6974;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v22);

  uint64_t v20 = &type metadata for SymbolImageDescribers.ConversationControls;
  uint64_t v21 = &protocol witness table for SymbolImageDescribers.ConversationControls;
  v19[0] = 14;
  if (one-time initialization token for pttLeaveButtonBanner != -1) {
    swift_once();
  }
  uint64_t v13 = static Colors.InCallControls.pttLeaveButtonBanner;
  swift_bridgeObjectRetain();
  uint64_t v14 = PillButton.init(title:symbol:stateConfiguration:context:)(v12._countAndFlagsBits, (uint64_t)v12._object, (uint64_t)v19, v13, 1);
  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 136);
  uint64_t v16 = v14;
  v15();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  swift_release();
  return v16;
}

uint64_t sub_1C31DB380()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in PushToTalkLeavePillButton.init(viewModel:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if ((*a1 & 0xFE) == 2)
  {
    swift_beginAccess();
    uint64_t v3 = (void *)MEMORY[0x1C8776240](v2);
    if (!v3) {
      goto LABEL_7;
    }
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_setEnabled_, 1);
  }
  else
  {
    swift_beginAccess();
    uint64_t v5 = (void *)MEMORY[0x1C8776240](v2);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v4 = v5;
    objc_msgSend(v5, sel_setEnabled_, 0);
  }

LABEL_7:
  swift_beginAccess();
  unsigned int v6 = (void *)MEMORY[0x1C8776240](v2);
  if (v6)
  {
    BOOL v7 = v6;
    objc_msgSend(v6, sel_setNeedsUpdateConfiguration);
  }
}

void partial apply for closure #1 in PushToTalkLeavePillButton.init(viewModel:)(unsigned char *a1)
{
  closure #1 in PushToTalkLeavePillButton.init(viewModel:)(a1, v1);
}

id PushToTalkLeavePillButton.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PushToTalkLeavePillButton.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit25PushToTalkLeavePillButton_cancellables] = MEMORY[0x1E4FBC870];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PushToTalkLeavePillButton.__allocating_init(title:symbol:stateConfiguration:context:)()
{
}

void PushToTalkLeavePillButton.init(title:symbol:stateConfiguration:context:)()
{
}

uint64_t PushToTalkLeavePillButton.__ivar_destroyer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

id PushToTalkLeavePillButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkLeavePillButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PushToTalkLeavePillButton()
{
  return self;
}

uint64_t method lookup function for PushToTalkLeavePillButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkLeavePillButton);
}

uint64_t dispatch thunk of PushToTalkLeavePillButton.__allocating_init(viewModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t CaptionsViewDragController.dragEnabled.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t key path getter for CaptionsViewDragController.dragEnabled : CaptionsViewDragController@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

id CaptionsViewDragController.dragEnabled.setter(char a1)
{
  OUTLINED_FUNCTION_11_0();
  char v3 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(v1 + 16) = a1;
  return CaptionsViewDragController.dragEnabled.didset(v3);
}

id CaptionsViewDragController.dragEnabled.didset(char a1)
{
  int v2 = a1 & 1;
  id result = (id)swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 16) != v2) {
    return objc_msgSend(*(id *)(v1 + 72), sel_setEnabled_);
  }
  return result;
}

void (*CaptionsViewDragController.dragEnabled.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *(unsigned char *)(v1 + 16);
  return CaptionsViewDragController.dragEnabled.modify;
}

void CaptionsViewDragController.dragEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  CaptionsViewDragController.dragEnabled.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t key path getter for CaptionsViewDragController.delegate : CaptionsViewDragController@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 24;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v4);
  uint64_t v6 = *(void *)(v3 + 32);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for CaptionsViewDragController.delegate : CaptionsViewDragController(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CaptionsViewDragController.delegate.getter()
{
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 24);
}

uint64_t CaptionsViewDragController.delegate.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_7_59();
  OUTLINED_FUNCTION_11_0();
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CaptionsViewDragController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = v4;
  v3[4] = v5;
  return CaptionsViewDragController.delegate.modify;
}

void CaptionsViewDragController.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 32) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t CaptionsViewDragController.isDragging.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t CaptionsViewDragController.isDragging.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 64) = a1;
  return result;
}

uint64_t (*CaptionsViewDragController.isDragging.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t CaptionsViewDragController.__allocating_init(captionsView:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  CaptionsViewDragController.init(captionsView:)(a1);
  return v2;
}

uint64_t CaptionsViewDragController.init(captionsView:)(void *a1)
{
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = 0;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A58]), sel_init);
  *(void *)(v1 + 72) = v3;
  swift_unknownObjectWeakAssign();
  objc_msgSend(v3, sel_addTarget_action_, v1, sel_handlePanGestureRecognizer_);
  objc_msgSend(v3, sel_setEnabled_, 0);
  id v4 = v3;
  objc_msgSend(a1, sel_addGestureRecognizer_, v4);

  return v1;
}

Swift::Void __swiftcall CaptionsViewDragController.handlePanGestureRecognizer(_:)(UIPanGestureRecognizer *a1)
{
  switch((unint64_t)[(UIPanGestureRecognizer *)a1 state])
  {
    case 0uLL:
      return;
    case 1uLL:
      Swift::String v11 = (void *)MEMORY[0x1C8776240](v1 + 40);
      [(UIPanGestureRecognizer *)a1 locationInView:v11];

      double v12 = OUTLINED_FUNCTION_3_80();
      CaptionsViewDragController.handleDragDidBegin(with:)((CGPoint)__PAIR128__(v13, *(unint64_t *)&v12));
      uint64_t v14 = (void *)MEMORY[0x1C8776240](v1 + 40);
      if (v14) {
        goto LABEL_14;
      }
      id v16 = 0;
      goto LABEL_17;
    case 2uLL:
      uint64_t v14 = (void *)MEMORY[0x1C8776240](v1 + 40);
      if (v14)
      {
LABEL_14:
        uint64_t v15 = v14;
        id v16 = objc_msgSend(v14, sel_superview);
      }
      else
      {
        id v16 = 0;
      }
LABEL_17:
      [(UIPanGestureRecognizer *)a1 locationInView:v16];

      double v17 = OUTLINED_FUNCTION_3_80();
      CaptionsViewDragController.handleDragDidMove(to:)((CGPoint)__PAIR128__(v18, *(unint64_t *)&v17));
      break;
    case 3uLL:
    case 4uLL:
    case 5uLL:
      id v3 = (void *)MEMORY[0x1C8776240](v1 + 40);
      if (v3)
      {
        id v4 = v3;
        id v19 = objc_msgSend(v3, sel_superview);

        if (v19)
        {
          [(UIPanGestureRecognizer *)a1 velocityInView:v19];
          CaptionsViewDragController.handleDragDidEnd(with:)((CGPoint)__PAIR128__(v6, v5));
        }
      }
      break;
    default:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
      [(UIPanGestureRecognizer *)a1 state];
      type metadata accessor for UIGestureRecognizerState(0);
      uint64_t v8 = String.init<A>(reflecting:)();
      uint64_t v10 = v9;
      *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v7 + 32) = v8;
      *(void *)(v7 + 40) = v10;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      break;
  }
}

Swift::Void __swiftcall CaptionsViewDragController.handleDragDidBegin(with:)(CGPoint with)
{
  OUTLINED_FUNCTION_2_68();
  if (v4)
  {
    unint64_t v5 = v4;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v1 + 24))
    {
      *(void *)(v1 + 48) = v3;
      *(void *)(v1 + 56) = v2;
      OUTLINED_FUNCTION_11_0();
      *(unsigned char *)(v1 + 64) = 1;
      OUTLINED_FUNCTION_5_69();
      OUTLINED_FUNCTION_5_69();
      swift_getObjectType();
      double v6 = OUTLINED_FUNCTION_3_80();
      v7(v6);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall CaptionsViewDragController.handleDragDidMove(to:)(CGPoint to)
{
  OUTLINED_FUNCTION_2_68();
  if (!v3) {
    goto LABEL_10;
  }
  id v4 = v3;
  OUTLINED_FUNCTION_2();
  if (*(unsigned char *)(v1 + 64) != 1 || !objc_msgSend(v4, sel_superview))
  {
    uint64_t v2 = v4;
LABEL_9:

LABEL_10:
    OUTLINED_FUNCTION_11_0();
    *(unsigned char *)(v1 + 64) = 0;
    return;
  }
  OUTLINED_FUNCTION_7_59();
  OUTLINED_FUNCTION_2();
  if (!MEMORY[0x1C8776240]())
  {

    goto LABEL_9;
  }
  if (one-time initialization token for margin != -1) {
    swift_once();
  }
  objc_msgSend(v2, sel_frame);
  CGRectGetWidth(v10);
  objc_msgSend(v4, sel_frame);
  CGRectGetWidth(v11);
  objc_msgSend(objc_msgSend(v2, sel_safeAreaLayoutGuide), sel_layoutFrame);
  OUTLINED_FUNCTION_6_62();
  v12.origin.double x = OUTLINED_FUNCTION_4_0();
  CGRectGetMinY(v12);
  objc_msgSend(objc_msgSend(v2, sel_safeAreaLayoutGuide), sel_layoutFrame);
  OUTLINED_FUNCTION_6_62();
  v13.origin.double x = OUTLINED_FUNCTION_4_0();
  CGRectGetMaxY(v13);
  objc_msgSend(v4, sel_frame);
  CGRectGetHeight(v14);
  objc_msgSend(v4, sel_frame);
  double v5 = OUTLINED_FUNCTION_3_80();
  objc_msgSend(v6, v7, v5);
  objc_msgSend(v4, sel_center);
  objc_msgSend(v4, sel_center);
  swift_getObjectType();
  double v8 = OUTLINED_FUNCTION_3_80();
  v9(v8);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall CaptionsViewDragController.handleDragDidEnd(with:)(CGPoint with)
{
  OUTLINED_FUNCTION_2_68();
  if (v4)
  {
    double v5 = v4;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v1 + 24))
    {
      uint64_t v6 = *(void *)(v1 + 32);
      OUTLINED_FUNCTION_11_0();
      if (*(unsigned char *)(v1 + 64))
      {
        *(unsigned char *)(v1 + 64) = 0;
        OUTLINED_FUNCTION_5_69();
        double v8 = v3 * 0.3 + v7;
        OUTLINED_FUNCTION_5_69();
        double v10 = v2 * 0.3 + v9;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 24))(v1, ObjectType, v6, v8, v10);

        swift_unknownObjectRelease();
        return;
      }

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
  CaptionsViewDragController.dragEnabled.setter(0);
  OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 64) = 0;
}

uint64_t CaptionsViewDragController.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 24);
  swift_unknownObjectWeakDestroy();

  return v0;
}

uint64_t CaptionsViewDragController.__deallocating_deinit()
{
  CaptionsViewDragController.deinit();
  return swift_deallocClassInstance();
}

id sub_1C31DC4B4(char *a1)
{
  return CaptionsViewDragController.dragEnabled.setter(*a1);
}

uint64_t dispatch thunk of CaptionsViewDragControllerDelegate.captionsViewDragControllerDidStartDrag(_:atPosition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CaptionsViewDragControllerDelegate.captionsViewDragController(_:didMoveToPosition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CaptionsViewDragControllerDelegate.captionsViewDragController(_:didEndDragAtPosition:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for CaptionsViewDragController()
{
  return self;
}

uint64_t method lookup function for CaptionsViewDragController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaptionsViewDragController);
}

uint64_t dispatch thunk of CaptionsViewDragController.__allocating_init(captionsView:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of RecentCallProviding.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RecentCallProviding.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of RecentCallProviding.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of RecentCallProviding.presentScreenTimeShield.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of RecentCallProviding.presentScreenTimeShield.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of RecentCallProviding.presentScreenTimeShield.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of RecentCallProviding.contactsForConversation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of RecentCallProviding.performCallRequest(forRecentsCallItem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of RecentCallProviding.deleteAllRecentCalls()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of RecentCallProviding.deleteRecentCalls(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of RecentCallProviding.markRecentCallsAsRead()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of RecentCallProviding.continuousScrollingReachedIndexPath(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

BOOL static GridLayout.Orientation.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GridLayout.Orientation.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int GridLayout.Orientation.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GridLayout.Orientation(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static GridLayout.Orientation.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GridLayout.Orientation()
{
  return GridLayout.Orientation.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance GridLayout.Orientation(uint64_t a1)
{
  GridLayout.Orientation.hash(into:)(a1, *v1);
}

void GridLayout.Configuration.interItemSpacing.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*GridLayout.Configuration.interItemSpacing.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double GridLayout.Configuration.scaleAmount.getter(double a1, double a2)
{
  return a2;
}

void GridLayout.Configuration.scaleAmount.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*GridLayout.Configuration.scaleAmount.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t GridLayout.Configuration.deviceType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*GridLayout.Configuration.deviceType.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t GridLayout.Configuration.mediaPipIsVisible.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t GridLayout.Configuration.mediaPipIsVisible.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*GridLayout.Configuration.mediaPipIsVisible.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double default argument 0 of GridLayout.Configuration.init(interItemSpacing:scaleAmount:deviceType:mediaPipIsVisible:)()
{
  return 8.0;
}

double default argument 1 of GridLayout.Configuration.init(interItemSpacing:scaleAmount:deviceType:mediaPipIsVisible:)()
{
  return 16.0;
}

uint64_t GridLayout.Configuration.init(interItemSpacing:scaleAmount:deviceType:mediaPipIsVisible:)(unsigned __int8 a1, char a2)
{
  if (a2) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 & 0xFFFFFF00 | a1;
}

uint64_t GridLayout.GridSize.rows.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t GridLayout.frames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*GridLayout.frames.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t GridLayout.init(containingRect:frameCount:indexToExpand:configuration:displayScale:)(unint64_t a1, unint64_t a2, char a3, __int16 a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10, double a11)
{
  char v12 = HIBYTE(a4);
  int v22 = a4;
  double Width = CGRectGetWidth(*(CGRect *)&a5);
  v36.origin.double x = a5;
  v36.origin.double y = a6;
  v36.size.double width = a7;
  v36.size.double height = a8;
  double Height = CGRectGetHeight(v36);
  if (v22) {
    uint64_t v25 = static GridLayout.padGridSize(for:orientation:)(a1, Height >= Width);
  }
  else {
    uint64_t v25 = static GridLayout.phoneGridSize(for:orientation:mediaPipIsVisible:)(a1, Height >= Width, v12 & 1);
  }
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  static GridLayout.frameSize(for:in:interItemSpacing:displayScale:)(v25, v26, a7, a8, a9, a11);
  static GridLayout.frames(for:numberOfFrames:frameSize:interItemSpacing:in:displayScale:)(v27, v28, a1, v29, v30, a9, a5, a6, a7, a8, a11);
  uint64_t v32 = v31;
  if ((a3 & 1) == 0)
  {
    specialized static ParticipantLayout.expandingFrame(_:of:in:displayScale:scaleFactor:shouldInsetFromEdge:)(a2, v31, *(uint64_t *)&a10, 1, 0, a7, a8, a11);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    return v34;
  }
  return v32;
}

uint64_t static GridLayout.frameSize(for:in:interItemSpacing:displayScale:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFSUB__(a2, 1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  double v18 = a4 - (double)(a2 - 1) * a5;
  if (v18 >= (a3 - (double)v17 * a5) / (double)a1 * (double)a2) {
    double v19 = (a3 - (double)v17 * a5) / (double)a1;
  }
  else {
    double v19 = v18 / (double)a2;
  }
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4FBBEA8], v12);
  CGFloat.rounded(_:toScale:)((uint64_t)v16, a6, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

void static GridLayout.frames(for:numberOfFrames:frameSize:interItemSpacing:in:displayScale:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, double a11)
{
  CGFloat v47 = a9;
  uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  unsigned __int8 v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(a1, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v48.origin.double x = a7;
  v48.origin.double y = a8;
  v48.size.double width = v47;
  v48.size.double height = a10;
  uint64_t v25 = a1 - 1;
  double v26 = (CGRectGetWidth(v48) - ((double)a1 * a4 + (double)v25 * a6)) * 0.5;
  uint64_t v27 = *MEMORY[0x1E4FBBEB0];
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 104);
  v28(v24, v27, v21);
  double v29 = CGFloat.rounded(_:toScale:)((uint64_t)v24, a11, v26);
  double v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30(v24, v21);
  if (__OFSUB__(a2, 1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v49.size.double height = a10;
  v49.origin.double x = a7;
  v49.origin.double y = a8;
  v49.size.double width = v47;
  uint64_t v31 = a2 - 1;
  double v32 = (CGRectGetHeight(v49) - ((double)a2 * a5 + (double)v31 * a6)) * 0.5;
  v28(v24, v27, v21);
  double v33 = CGFloat.rounded(_:toScale:)((uint64_t)v24, a11, v32);
  v30(v24, v21);
  if (a2 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a2)
  {
    if (a1 < 0)
    {
LABEL_28:
      __break(1u);
      return;
    }
    uint64_t v34 = 0;
    double v35 = a5 + a6;
    double v36 = a4 + a6;
    uint64_t v37 = MEMORY[0x1E4FBC860];
    while (v34 != a2)
    {
      if (a1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v45;
        }
        uint64_t v38 = a1;
        double v39 = v29;
        while (v38)
        {
          unint64_t v40 = *(void *)(v37 + 16);
          uint64_t v41 = v40 + 1;
          if (v40 >= *(void *)(v37 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v37 = v44;
          }
          *(void *)(v37 + 16) = v41;
          uint64_t v42 = (double *)(v37 + 32 * v40);
          v42[4] = v39;
          v42[5] = v33;
          v42[6] = a4;
          v42[7] = a5;
          double v39 = v36 + v39;
          if (v41 >= a3 || v38-- == 1) {
            goto LABEL_20;
          }
        }
        __break(1u);
        break;
      }
LABEL_20:
      ++v34;
      double v33 = v35 + v33;
      if (v34 == a2) {
        return;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
}

void specialized static ParticipantLayout.expandingFrame(_:of:in:displayScale:scaleFactor:shouldInsetFromEdge:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, double a6, double a7, double a8)
{
  uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > a1)
  {
    double v49 = a6;
    double v50 = a7;
    uint64_t v22 = (double *)(a2 + 32 * a1);
    a6 = v22[4];
    a7 = v22[5];
    double v23 = v22[6];
    double v8 = v22[7];
    double v24 = 1.0;
    if ((a4 & 1) == 0) {
      double v24 = v22[6];
    }
    double v25 = v24 * *(double *)&a3;
    uint64_t v26 = *MEMORY[0x1E4FBBEA8];
    uint64_t v27 = *(void (**)(uint64_t))(v19 + 104);
    uint64_t v28 = OUTLINED_FUNCTION_3_10();
    v27(v28);
    double v51 = a8;
    a8 = CGFloat.rounded(_:toScale:)((uint64_t)v21, a8, v25);
    double v29 = *(void (**)(uint64_t))(v19 + 8);
    uint64_t v30 = OUTLINED_FUNCTION_1_82();
    v29(v30);
    v52.origin.double x = OUTLINED_FUNCTION_0_64();
    double MinX = CGRectGetMinX(v52);
    v53.origin.double x = OUTLINED_FUNCTION_0_64();
    double MaxX = CGRectGetMaxX(v53);
    v54.origin.double x = OUTLINED_FUNCTION_0_64();
    double MinY = CGRectGetMinY(v54);
    v55.origin.double x = OUTLINED_FUNCTION_0_64();
    double MaxY = CGRectGetMaxY(v55);
    if (a5)
    {
      if (MinX < 1.0)
      {
LABEL_9:
        double v9 = v23 + a8;
LABEL_11:
        if (MinY < 1.0) {
          goto LABEL_16;
        }
        if (v50 + -1.0 < MaxY)
        {
          a7 = a7 - a8;
          goto LABEL_16;
        }
        double v35 = a8 * 0.5;
LABEL_15:
        uint64_t v43 = OUTLINED_FUNCTION_3_10();
        v27(v43);
        double v44 = CGFloat.rounded(_:toScale:)((uint64_t)v21, v51, v35);
        uint64_t v45 = OUTLINED_FUNCTION_1_82();
        v29(v45);
        a7 = a7 - v44;
LABEL_16:
        swift_bridgeObjectRetain();
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_17;
        }
        goto LABEL_21;
      }
      if (v49 + -1.0 < MaxX)
      {
        a6 = a6 - a8;
        goto LABEL_9;
      }
    }
    double v35 = a8 * 0.5;
    double v49 = a6;
    double v36 = a7;
    double v37 = v8;
    double v38 = a8;
    double v39 = MinY;
    double v40 = MaxY;
    ((void (*)(char *, uint64_t, uint64_t))v27)(v21, v26, v18);
    double v41 = CGFloat.rounded(_:toScale:)((uint64_t)v21, v51, v35);
    uint64_t v42 = OUTLINED_FUNCTION_1_82();
    v29(v42);
    double MaxY = v40;
    double MinY = v39;
    a8 = v38;
    double v8 = v37;
    a7 = v36;
    a6 = v49 - v41;
    double v9 = v23 + a8;
    if ((a5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_21:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  a2 = v47;
LABEL_17:
  if (*(void *)(a2 + 16) <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v46 = (double *)(a2 + 32 * a1);
    v46[4] = a6;
    void v46[5] = a7;
    v46[6] = v9;
    v46[7] = v8 + a8;
  }
}

uint64_t static GridLayout.phoneGridSize(for:orientation:mediaPipIsVisible:)(unint64_t a1, char a2, unsigned __int8 a3)
{
  int v4 = a3 & ((a2 & 1) == 0);
  if (a1 != 3) {
    int v4 = 1;
  }
  BOOL v5 = v4 == 0;
  uint64_t v6 = 1;
  if (!v5) {
    uint64_t v6 = 2;
  }
  if (a1 >= 3) {
    uint64_t result = v6;
  }
  else {
    uint64_t result = 1;
  }
  if (__OFADD__((uint64_t)a1 / result, ((result - 1) & a1) != 0)) {
    __break(1u);
  }
  return result;
}

uint64_t static GridLayout.padGridSize(for:orientation:)(uint64_t result, char a2)
{
  if (a2)
  {
    uint64_t v2 = 1;
    uint64_t v3 = 4;
    uint64_t v4 = 3;
    if ((unint64_t)result > 0xC) {
      uint64_t v4 = 4;
    }
    if (result >= 7) {
      uint64_t v3 = v4;
    }
    if ((unint64_t)(result - 7) <= 0xFFFFFFFFFFFFFFFCLL) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 2;
    }
    if ((unint64_t)result >= 4) {
      uint64_t v2 = v5;
    }
    if (__OFADD__(result / v2, result % v2 != 0)) {
      __break(1u);
    }
    else {
      return v2;
    }
  }
  else if ((unint64_t)result >= 4)
  {
    if ((unint64_t)(result - 9) >= 0xFFFFFFFFFFFFFFFBLL)
    {
      return (result & 1) + ((unint64_t)result >> 1);
    }
    else if ((unint64_t)(result - 13) >= 0xFFFFFFFFFFFFFFFCLL)
    {
      return 4;
    }
    else if ((unint64_t)(result - 16) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      return 5;
    }
    else
    {
      return 6;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GridLayout.Orientation and conformance GridLayout.Orientation()
{
  unint64_t result = lazy protocol witness table cache variable for type GridLayout.Orientation and conformance GridLayout.Orientation;
  if (!lazy protocol witness table cache variable for type GridLayout.Orientation and conformance GridLayout.Orientation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridLayout.Orientation and conformance GridLayout.Orientation);
  }
  return result;
}

uint64_t protocol witness for ParticipantLayout.frames.getter in conformance GridLayout()
{
  return swift_bridgeObjectRetain();
}

void type metadata accessor for GridLayout()
{
}

unsigned char *storeEnumTagSinglePayload for GridLayout.Orientation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31DD3A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for GridLayout.Orientation()
{
}

uint64_t getEnumTagSinglePayload for GridLayout.Configuration(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 18))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GridLayout.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for GridLayout.Configuration()
{
}

void type metadata accessor for GridLayout.GridSize()
{
}

uint64_t VideoAttributeCamera.cameraPosition.getter(unsigned int a1)
{
  if (a1 >= 4) {
    return 0;
  }
  else {
    return 0x2010100u >> (8 * a1);
  }
}

__n128 ButtonGradientBackgroundView.buttonFrame.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v4;
  return result;
}

__n128 key path getter for ButtonGradientBackgroundView.buttonFrame : ButtonGradientBackgroundView@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v4;
  return result;
}

uint64_t key path setter for ButtonGradientBackgroundView.buttonFrame : ButtonGradientBackgroundView(uint64_t a1)
{
  outlined init with take of CGRect?(a1, (uint64_t)v2);
  return ButtonGradientBackgroundView.buttonFrame.setter((uint64_t)v2);
}

uint64_t ButtonGradientBackgroundView.buttonFrame.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame;
  swift_beginAccess();
  outlined init with take of CGRect?(v3, (uint64_t)v5);
  outlined init with take of CGRect?(a1, v3);
  return ButtonGradientBackgroundView.buttonFrame.didset((uint64_t)v5);
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ButtonGradientBackgroundView.buttonFrame.didset(uint64_t a1)
{
  outlined init with take of CGRect?(a1, (uint64_t)v14);
  CGFloat v3 = *(double *)v14;
  CGFloat v4 = *(double *)&v14[1];
  CGFloat v5 = *(double *)&v14[2];
  CGFloat v6 = *(double *)&v14[3];
  double v7 = (double *)&v1[OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame];
  swift_beginAccess();
  CGFloat v8 = *v7;
  CGFloat v9 = v7[1];
  CGFloat v10 = v7[2];
  CGFloat v11 = v7[3];
  char v12 = *((unsigned char *)v7 + 32);
  uint64_t result = outlined init with take of CGRect?(a1, (uint64_t)v15);
  if (v15[32])
  {
    if (v12) {
      return result;
    }
    return (uint64_t)objc_msgSend(v1, sel_setNeedsDisplay);
  }
  if (v12) {
    return (uint64_t)objc_msgSend(v1, sel_setNeedsDisplay);
  }
  v16.origin.double x = v3;
  v16.origin.double y = v4;
  v16.size.double width = v5;
  v16.size.double height = v6;
  v17.origin.double x = v8;
  v17.origin.double y = v9;
  v17.size.double width = v10;
  v17.size.double height = v11;
  uint64_t result = CGRectEqualToRect(v16, v17);
  if ((result & 1) == 0) {
    return (uint64_t)objc_msgSend(v1, sel_setNeedsDisplay);
  }
  return result;
}

void (*ButtonGradientBackgroundView.buttonFrame.modify(void *a1))(void **a1, char a2)
{
  CGFloat v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame;
  swift_beginAccess();
  char v5 = *(unsigned char *)(v4 + 32);
  long long v6 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 5) = *(_OWORD *)v4;
  *((_OWORD *)v3 + 6) = v6;
  *((unsigned char *)v3 + 112) = v5;
  return ButtonGradientBackgroundView.buttonFrame.modify;
}

void ButtonGradientBackgroundView.buttonFrame.modify(void **a1, char a2)
{
  int v2 = *a1;
  uint64_t v3 = (uint64_t)*a1 + 40;
  uint64_t v4 = (uint64_t)*a1 + 80;
  if (a2) {
    uint64_t v5 = (uint64_t)v2;
  }
  else {
    uint64_t v5 = v3;
  }
  outlined init with take of CGRect?(v4, v5);
  ButtonGradientBackgroundView.buttonFrame.setter(v5);
  free(v2);
}

id ButtonGradientBackgroundView.__allocating_init(participantCount:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ButtonGradientBackgroundView.init(participantCount:)(a1);
}

id ButtonGradientBackgroundView.init(participantCount:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame];
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  v12.receiver = v1;
  v12.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v12, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  long long v6 = self;
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_clearColor);
  objc_msgSend(v7, sel_setBackgroundColor_, v8);

  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  double v9 = 1.0;
  if (!a1) {
    double v9 = 0.0;
  }
  objc_msgSend(v7, sel_setAlpha_, v9);
  id v10 = v7;
  UIView.addTapInteraction(withTapCount:)(1);

  return v10;
}

id ButtonGradientBackgroundView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ButtonGradientBackgroundView.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  v1[32] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ButtonGradientBackgroundView.draw(_:)(__C::CGRect a1)
{
  int v2 = UIGraphicsGetCurrentContext();
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = v1 + OBJC_IVAR____TtC15ConversationKit28ButtonGradientBackgroundView_buttonFrame;
    swift_beginAccess();
    if ((*(unsigned char *)(v4 + 32) & 1) == 0)
    {
      CGFloat v6 = *(double *)(v4 + 16);
      CGFloat v5 = *(double *)(v4 + 24);
      CGFloat v8 = *(double *)v4;
      CGFloat v7 = *(double *)(v4 + 8);
      OUTLINED_FUNCTION_1_83();
      double MaxY = CGRectGetMaxY(v38);
      v39.origin.double x = v8;
      v39.origin.double y = v7;
      v39.size.double width = v6;
      v39.size.double height = v5;
      double v10 = MaxY - CGRectGetMinY(v39);
      if (v10 > 0.0) {
        double v11 = v10;
      }
      else {
        double v11 = 0.0;
      }
      double v34 = OUTLINED_FUNCTION_0_65() - v11 / 1.73205081;
      OUTLINED_FUNCTION_1_83();
      CGFloat MinY = CGRectGetMinY(v40);
      OUTLINED_FUNCTION_1_83();
      CGFloat v12 = CGRectGetHeight(v41) - v11;
      double v13 = OUTLINED_FUNCTION_0_65() + v12 / 1.73205081;
      OUTLINED_FUNCTION_1_83();
      CGFloat Height = CGRectGetHeight(v42);
      double v15 = sqrt(v11 * v11 + v11 / 1.73205081 * (v11 / 1.73205081)) / sqrt((v13 - v34) * (v13 - v34) + Height * Height);
      if (v15 <= 1.0) {
        double v16 = v15;
      }
      else {
        double v16 = 1.0;
      }
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1C3769580;
      uint64_t v19 = self;
      id v20 = objc_msgSend(v19, sel_blackColor);
      id v21 = objc_msgSend(v20, sel_CGColor);

      *(void *)(v18 + 32) = v21;
      id v22 = objc_msgSend(v19, sel_blackColor);
      id v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.9);

      id v24 = objc_msgSend(v23, sel_CGColor);
      *(void *)(v18 + 40) = v24;
      id v25 = objc_msgSend(v19, sel_blackColor);
      id v26 = objc_msgSend(v25, sel_colorWithAlphaComponent_, 0.65);

      id v27 = objc_msgSend(v26, sel_CGColor);
      *(void *)(v18 + 48) = v27;
      id v28 = objc_msgSend(v19, sel_clearColor);
      id v29 = objc_msgSend(v28, sel_CGColor);

      *(void *)(v18 + 56) = v29;
      *(void *)&v35[4] = v18;
      specialized Array._endMutation()();
      type metadata accessor for CGColorRef(0);
      CFArrayRef isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v35[0] = 0.0;
      v35[1] = v16;
      v35[2] = v16 + (1.0 - v16) * 0.5;
      v35[3] = 1.0;
      CGGradientRef v31 = CGGradientCreateWithColors(DeviceRGB, isa, v35);

      if (v31)
      {
        double v32 = v31;
        v36.double x = v34;
        v37.double y = MinY;
        v36.double y = MaxY;
        v37.double x = v13;
        CGContextDrawLinearGradient(v3, v32, v36, v37, 1u);
      }
    }
  }
}

id ButtonGradientBackgroundView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ButtonGradientBackgroundView.init(frame:)()
{
}

id ButtonGradientBackgroundView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ButtonGradientBackgroundView()
{
  return self;
}

uint64_t method lookup function for ButtonGradientBackgroundView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ButtonGradientBackgroundView);
}

uint64_t dispatch thunk of ButtonGradientBackgroundView.__allocating_init(participantCount:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void AudioPowerSpectrumViewModel.init(call:callCenter:notificationCenter:)()
{
  OUTLINED_FUNCTION_31();
  objc_super v2 = v1;
  CGRect v39 = v3;
  CGFloat v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_64();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_call] = 0;
  uint64_t v9 = one-time initialization token for initialPowerSpectrum;
  double v10 = v0;
  if (v9 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  Published.init(initialValue:)();
  double v11 = *(void (**)(uint64_t))(v7 + 32);
  uint64_t v12 = OUTLINED_FUNCTION_24_23();
  v11(v12);
  swift_bridgeObjectRetain();
  Published.init(initialValue:)();
  uint64_t v13 = OUTLINED_FUNCTION_24_23();
  v11(v13);
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_waveformColorRemote;
  double v15 = self;
  *(void *)&v10[v14] = objc_msgSend(v15, sel_greenColor);
  uint64_t v16 = OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_waveformColorLocal;
  *(void *)&v10[v16] = objc_msgSend(v15, sel_orangeColor);
  v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_needsBackdropFilterLayer] = 1;
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_localWaveformFilter] = 0;
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_remoteWaveformFilter] = 0;
  CGRect v17 = &v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_localParticipantStreamToken];
  *(void *)CGRect v17 = 0;
  char v17[8] = 1;
  uint64_t v18 = &v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_remoteParticipantStreamToken];
  *(void *)uint64_t v18 = 0;
  v18[8] = 1;
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_cancellables] = MEMORY[0x1E4FBC860];
  v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_hasActiveWaveform] = 0;
  type metadata accessor for AudioPowerTap();
  uint64_t v19 = type metadata accessor for CellularAudioSampleNormalizer();
  unint64_t v20 = lazy protocol witness table accessor for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer();
  uint64_t v21 = AudioPowerTap.__allocating_init(type:normalizer:)(0, v19, v20);
  if (!v21)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_uplinkPowerTap] = v21;
  uint64_t v22 = AudioPowerTap.__allocating_init(type:normalizer:)(1, v19, v20);
  if (!v22)
  {
LABEL_9:
    __break(1u);
    return;
  }
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_downlinkPowerTap] = v22;
  uint64_t v38 = OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_audioPowerTapQueue;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v24 = OUTLINED_FUNCTION_8(v23);
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_5_1();
  static DispatchQoS.userInitiated.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_61();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB0C0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  (*(void (**)(uint64_t, void))(v29 + 104))(v28 - v27, *MEMORY[0x1E4FBCC50]);
  *(void *)&v10[v38] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_callCenter] = v39;
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_notificationCenter] = v2;
  id v30 = v39;
  id v31 = v2;

  v40.receiver = v10;
  v40.super_class = (Class)type metadata accessor for AudioPowerSpectrumViewModel();
  double v32 = (char *)objc_msgSendSuper2(&v40, sel_init);
  double v33 = (void **)&v32[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_call];
  swift_beginAccess();
  double v34 = *v33;
  *double v33 = v5;
  double v35 = v32;
  id v36 = v5;

  CGPoint v37 = v35;
  if (v5)
  {
    CGPoint v37 = (char *)v36;
    AudioPowerSpectrumViewModel.updateWaveform(forCall:)(v37);
  }
  OUTLINED_FUNCTION_28();
}

void *AudioPowerSpectrumViewModel.call.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void AudioPowerSpectrumViewModel.call.setter(void *a1)
{
  id v3 = (id *)(v1 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_call);
  swift_beginAccess();
  id v4 = *v3;
  id v5 = *v3;
  AudioPowerSpectrumViewModel.call.willset(a1);
  id v6 = *v3;
  id *v3 = a1;
  id v7 = a1;

  AudioPowerSpectrumViewModel.call.didset(v4);
}

void (*AudioPowerSpectrumViewModel.call.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_call);
  swift_beginAccess();
  id v5 = *v4;
  v3[3] = *v4;
  id v6 = v5;
  return AudioPowerSpectrumViewModel.call.modify;
}

void AudioPowerSpectrumViewModel.call.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  id v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  if (a2)
  {
    id v5 = v3;
    AudioPowerSpectrumViewModel.call.setter(v3);
  }
  else
  {
    AudioPowerSpectrumViewModel.call.setter(*(void **)(*(void *)a1 + 24));
  }
  free(v2);
}

uint64_t AudioPowerSpectrumViewModel.localPowerSpectrum.getter()
{
  return AudioPowerSpectrumViewModel.localPowerSpectrum.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AudioPowerSpectrumViewModel.localPowerSpectrum.setter()
{
  return AudioPowerSpectrumViewModel.localPowerSpectrum.setter();
}

{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v1 = v0;
  return static Published.subscript.setter();
}

uint64_t (*AudioPowerSpectrumViewModel.localPowerSpectrum.modify(void *a1))()
{
  id v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  v2[6] = OUTLINED_FUNCTION_16_4(KeyPath);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t AudioPowerSpectrumViewModel.$localPowerSpectrum.getter()
{
  return AudioPowerSpectrumViewModel.$localPowerSpectrum.getter();
}

{
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t AudioPowerSpectrumViewModel.$localPowerSpectrum.setter(uint64_t a1)
{
  return AudioPowerSpectrumViewModel.$localPowerSpectrum.setter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  OUTLINED_FUNCTION_4();
  id v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

void (*AudioPowerSpectrumViewModel.$localPowerSpectrum.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  OUTLINED_FUNCTION_5_5(v4);
  v3[5] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[6] = malloc(v7);
  v3[7] = malloc(v7);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return AudioPowerSpectrumViewModel.$localPowerSpectrum.modify;
}

void AudioPowerSpectrumViewModel.$localPowerSpectrum.modify(uint64_t a1, char a2)
{
}

uint64_t AudioPowerSpectrumViewModel.remotePowerSpectrum.getter()
{
  return AudioPowerSpectrumViewModel.localPowerSpectrum.getter();
}

uint64_t AudioPowerSpectrumViewModel.remotePowerSpectrum.setter()
{
  return AudioPowerSpectrumViewModel.localPowerSpectrum.setter();
}

uint64_t (*AudioPowerSpectrumViewModel.remotePowerSpectrum.modify(void *a1))()
{
  id v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  v2[6] = OUTLINED_FUNCTION_16_4(KeyPath);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t AudioPowerSpectrumViewModel.$remotePowerSpectrum.getter()
{
  return AudioPowerSpectrumViewModel.$localPowerSpectrum.getter();
}

uint64_t AudioPowerSpectrumViewModel.$remotePowerSpectrum.setter(uint64_t a1)
{
  return AudioPowerSpectrumViewModel.$localPowerSpectrum.setter(a1);
}

void (*AudioPowerSpectrumViewModel.$remotePowerSpectrum.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  OUTLINED_FUNCTION_5_5(v4);
  v3[5] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[6] = malloc(v7);
  v3[7] = malloc(v7);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return AudioPowerSpectrumViewModel.$remotePowerSpectrum.modify;
}

void AudioPowerSpectrumViewModel.$remotePowerSpectrum.modify(uint64_t a1, char a2)
{
}

void AudioPowerSpectrumViewModel.$localPowerSpectrum.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 48);
  uint64_t v6 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v7 = v4[4];
    uint64_t v8 = v4[5];
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 48), v6, v7);
    a3(v5);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 56));
  }
  free(v6);
  free(v5);
  free(v4);
}

id AudioPowerSpectrumViewModel.waveformColorRemote.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void AudioPowerSpectrumViewModel.waveformColorRemote.setter(void *a1)
{
}

uint64_t (*AudioPowerSpectrumViewModel.waveformColorRemote.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

id AudioPowerSpectrumViewModel.waveformColorLocal.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void AudioPowerSpectrumViewModel.waveformColorLocal.setter(void *a1)
{
}

uint64_t (*AudioPowerSpectrumViewModel.waveformColorLocal.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t AudioPowerSpectrumViewModel.needsBackdropFilterLayer.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t AudioPowerSpectrumViewModel.needsBackdropFilterLayer.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  unsigned char *v1 = a1;
  return result;
}

uint64_t (*AudioPowerSpectrumViewModel.needsBackdropFilterLayer.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

void *AudioPowerSpectrumViewModel.localWaveformFilter.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void AudioPowerSpectrumViewModel.localWaveformFilter.setter(void *a1)
{
}

uint64_t (*AudioPowerSpectrumViewModel.localWaveformFilter.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

void *AudioPowerSpectrumViewModel.remoteWaveformFilter.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void AudioPowerSpectrumViewModel.remoteWaveformFilter.setter(void *a1)
{
}

uint64_t (*AudioPowerSpectrumViewModel.remoteWaveformFilter.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t AudioPowerSpectrumViewModel.cancellables.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  void *v1 = a1;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AudioPowerSpectrumViewModel.start()()
{
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_hasActiveWaveform) & 1) == 0)
  {
    uint64_t v1 = v0;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C2F90000, v3, v4, "Starting power spectrum observation", v5, 2u);
      OUTLINED_FUNCTION_3();
    }

    uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8))();
    if (v6)
    {
      uint64_t v9 = (void *)v6;
      AudioPowerSpectrumViewModel.callChanged(_:)();
    }
    AudioPowerSpectrumViewModel.registerNotifications()(v6, v7, v8);
  }
}

Swift::Void __swiftcall AudioPowerSpectrumViewModel.stop(caller:)(Swift::String caller)
{
  object = caller._object;
  uint64_t countAndFlagsBits = caller._countAndFlagsBits;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v7);
    OUTLINED_FUNCTION_14_5();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v4, v5, "Stopping power spectrum observation by: %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  AudioPowerSpectrumViewModel.unregisterNotifications()();
  AudioPowerSpectrumViewModel.removeObservation()();
}

id AudioPowerSpectrumViewModel.registerNotifications()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = OUTLINED_FUNCTION_30_18(a1, a2, a3, (uint64_t)sel_handleCallStatusChanged_, *MEMORY[0x1E4FADD90]);
  id result = OUTLINED_FUNCTION_30_18((uint64_t)v4, v5, v6, (uint64_t)sel_handleCallRecordingStateChanged_, *MEMORY[0x1E4FADE28]);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_hasActiveWaveform) = 1;
  return result;
}

id AudioPowerSpectrumViewModel.unregisterNotifications()()
{
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_notificationCenter), sel_removeObserver_name_object_, v0, *MEMORY[0x1E4FADD90], 0);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_hasActiveWaveform) = 0;
  return result;
}

void AudioPowerSpectrumViewModel.handleCallStatusChanged(_:)()
{
  Notification.object.getter();
  if (v6)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    if (swift_dynamicCast())
    {
      uint64_t v0 = v4;
      AudioPowerSpectrumViewModel.callChanged(_:)();
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v5, &demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v0, v2))
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C2F90000, v0, v2, "AudioPowerSpectrumViewModel.callStatusChanged without valid call", v3, 2u);
    OUTLINED_FUNCTION_3();
  }
LABEL_9:
}

void AudioPowerSpectrumViewModel.callChanged(_:)()
{
  OUTLINED_FUNCTION_31();
  os_log_type_t v2 = v0;
  id v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_63();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v1 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v1, *MEMORY[0x1E4FBCBE8], v5);
  char v9 = _dispatchPreconditionTest(_:)();
  uint64_t v10 = OUTLINED_FUNCTION_25_22();
  uint64_t v12 = v11(v10);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xD8))(v12);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    id v15 = v4;
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
      if (objc_msgSend(v15, sel_isActive))
      {
        id v17 = objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_callCenter), sel_activeConversationForCall_, v15);
        if (v17)
        {
          *((void *)&v28 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
          uint64_t v29 = &protocol witness table for TUConversation;
          *(void *)&long long v27 = v17;
        }
        else
        {
          uint64_t v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
        }
        id v26 = v17;
        AudioPowerSpectrumViewModel.observeActiveCall(using:)();

        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v27, &demangling cache variable for type metadata for Conversation?);
      }
      else
      {
        AudioPowerSpectrumViewModel.removeObservation()();
      }
      goto LABEL_12;
    }
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_17;
  }
LABEL_8:
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  id v19 = v4;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v27 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v30 = (uint64_t)v19;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    id v23 = v19;
    uint64_t v24 = String.init<A>(reflecting:)();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v20, v21, "Skipping registering for power spectrum: %s", v22, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
LABEL_12:
  OUTLINED_FUNCTION_28();
}

void AudioPowerSpectrumViewModel.observeActiveCall(using:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest<CurrentValueSubject<[Float]?, Never>, CurrentValueSubject<[Float]?, Never>>);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_61();
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
  if (v6)
  {
    uint64_t v7 = v6;
    if ((objc_msgSend(v6, sel_isVideo) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Throttle<Publishers.CombineLatest<CurrentValueSubject<[Float]?, Never>, CurrentValueSubject<[Float]?, Never>>, NSRunLoop>);
      id v31 = v28;
      OUTLINED_FUNCTION_4();
      uint64_t v29 = v13;
      uint64_t v30 = v14;
      MEMORY[0x1F4188790](v13);
      OUTLINED_FUNCTION_21();
      os_log_t v32 = (os_log_t)(v16 - v15);
      uint64_t v33 = (*(uint64_t (**)(void))(**(void **)((char *)v0
                                               + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_uplinkPowerTap)
                                 + 160))();
      uint64_t v34 = (*(uint64_t (**)(void))(**(void **)((char *)v0
                                               + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_downlinkPowerTap)
                                 + 160))();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Float]?, Never>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<[Float]?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[Float]?, Never>);
      Publishers.CombineLatest.init(_:_:)();
      v28[0] = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
      v28[1] = v28;
      OUTLINED_FUNCTION_4();
      uint64_t v18 = v17;
      MEMORY[0x1F4188790](v19);
      OUTLINED_FUNCTION_21();
      uint64_t v22 = v21 - v20;
      static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
      id v23 = objc_msgSend(self, sel_mainRunLoop);
      uint64_t v33 = (uint64_t)v23;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CombineLatest<CurrentValueSubject<[Float]?, Never>, CurrentValueSubject<[Float]?, Never>> and conformance Publishers.CombineLatest<A, B>, &demangling cache variable for type metadata for Publishers.CombineLatest<CurrentValueSubject<[Float]?, Never>, CurrentValueSubject<[Float]?, Never>>);
      lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
      Publisher.throttle<A>(for:scheduler:latest:)();

      (*(void (**)(uint64_t, void))(v18 + 8))(v22, v28[0]);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
      uint64_t v24 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = partial apply for closure #1 in AudioPowerSpectrumViewModel.observeActiveCall(using:);
      *(void *)(v25 + 24) = v24;
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Throttle<Publishers.CombineLatest<CurrentValueSubject<[Float]?, Never>, CurrentValueSubject<[Float]?, Never>>, NSRunLoop> and conformance Publishers.Throttle<A, B>, &demangling cache variable for type metadata for Publishers.Throttle<Publishers.CombineLatest<CurrentValueSubject<[Float]?, Never>, CurrentValueSubject<[Float]?, Never>>, NSRunLoop>);
      uint64_t v26 = v29;
      os_log_t v27 = v32;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(os_log_t, uint64_t))(v30 + 8))(v27, v26);
      OUTLINED_FUNCTION_6_1();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
      AnyCancellable.store<A>(in:)();
      swift_endAccess();
      swift_release();
      AudioPowerSpectrumViewModel.startAudioTaps()();

      OUTLINED_FUNCTION_28();
      return;
    }
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  os_log_t v32 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1C2F90000, v32, v9, "Ignoring request to observe active call since its nil or is ineligible", v10, 2u);
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t AudioPowerSpectrumViewModel.removeObservation()()
{
  AudioPowerSpectrumViewModel.stopAudioTaps()();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_localParticipantStreamToken;
  *(void *)uint64_t v1 = 0;
  v1[8] = 1;
  uint64_t v2 = (char *)v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_remoteParticipantStreamToken;
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  AudioPowerSpectrumViewModel.cancellables.setter(MEMORY[0x1E4FBC860]);
  if (one-time initialization token for initialPowerSpectrum != -1) {
    swift_once();
  }
  uint64_t v3 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8);
  uint64_t v4 = swift_bridgeObjectRetain();
  v3(v4);
  OUTLINED_FUNCTION_0_3();
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v5 + 296);
  uint64_t v6 = swift_bridgeObjectRetain();
  return v8(v6);
}

void AudioPowerSpectrumViewModel.startAudioTaps()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v12[4] = partial apply for closure #1 in AudioPowerSpectrumViewModel.startAudioTaps();
  uint64_t v12[5] = v2;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v12[3] = &block_descriptor_50;
  uint64_t v3 = _Block_copy(v12);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_64();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_61();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAFA0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C8773BA0](0, v0, v1, v3);
  _Block_release(v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v11);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28();
}

void AudioPowerSpectrumViewModel.stopAudioTaps()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_uplinkPowerTap);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_downlinkPowerTap);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  v11[4] = partial apply for closure #1 in AudioPowerSpectrumViewModel.stopAudioTaps();
  v11[5] = v3;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_41;
  uint64_t v4 = _Block_copy(v11);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_18_34();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_5_1();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAFA0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_15_35();
  OUTLINED_FUNCTION_22_24();
  _Block_release(v4);
  uint64_t v7 = OUTLINED_FUNCTION_21_3();
  v8(v7);
  uint64_t v9 = OUTLINED_FUNCTION_20_26();
  v10(v9);
  swift_release();
  OUTLINED_FUNCTION_28();
}

void AudioPowerSpectrumViewModel.__allocating_init(call:callCenter:notificationCenter:)()
{
  id v1 = objc_allocWithZone(v0);
  AudioPowerSpectrumViewModel.init(call:callCenter:notificationCenter:)();
}

void *AudioPowerSpectrumViewModel.Constants.baseValue.unsafeMutableAddressor()
{
  return &static AudioPowerSpectrumViewModel.Constants.baseValue;
}

double static AudioPowerSpectrumViewModel.Constants.baseValue.getter()
{
  return 0.0;
}

void *AudioPowerSpectrumViewModel.Constants.buckets.unsafeMutableAddressor()
{
  return &static AudioPowerSpectrumViewModel.Constants.buckets;
}

uint64_t static AudioPowerSpectrumViewModel.Constants.buckets.getter()
{
  return 14;
}

double one-time initialization function for initialPowerSpectrum()
{
  uint64_t v0 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v0 + 16) = 14;
  double result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = 0;
  static AudioPowerSpectrumViewModel.Constants.initialPowerSpectrum = v0;
  return result;
}

uint64_t *AudioPowerSpectrumViewModel.Constants.initialPowerSpectrum.unsafeMutableAddressor()
{
  if (one-time initialization token for initialPowerSpectrum != -1) {
    swift_once();
  }
  return &static AudioPowerSpectrumViewModel.Constants.initialPowerSpectrum;
}

unint64_t lazy protocol witness table accessor for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer()
{
  unint64_t result = lazy protocol witness table cache variable for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer;
  if (!lazy protocol witness table cache variable for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer)
  {
    type metadata accessor for CellularAudioSampleNormalizer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer;
  if (!lazy protocol witness table cache variable for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer)
  {
    type metadata accessor for CellularAudioSampleNormalizer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CellularAudioSampleNormalizer and conformance CellularAudioSampleNormalizer);
  }
  return result;
}

uint64_t type metadata accessor for AudioPowerSpectrumViewModel()
{
  uint64_t result = type metadata singleton initialization cache for AudioPowerSpectrumViewModel;
  if (!type metadata singleton initialization cache for AudioPowerSpectrumViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static AudioPowerSpectrumViewModel.Constants.initialPowerSpectrum.getter()
{
  if (one-time initialization token for initialPowerSpectrum != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

void *AudioPowerSpectrumViewModel.Constants.updateInterval.unsafeMutableAddressor()
{
  return &static AudioPowerSpectrumViewModel.Constants.updateInterval;
}

double static AudioPowerSpectrumViewModel.Constants.updateInterval.getter()
{
  return 0.0666666667;
}

uint64_t key path getter for AudioPowerSpectrumViewModel.call : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.call : AudioPowerSpectrumViewModel(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE0);
  id v4 = *a1;
  return v3(v2);
}

void AudioPowerSpectrumViewModel.call.willset(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_call);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!a1)
  {
    if (!v5) {
      return;
    }
    goto LABEL_6;
  }
  if (!v5
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall),
        id v6 = v5,
        id v7 = a1,
        char v8 = static NSObject.== infix(_:_:)(),
        v7,
        v6,
        (v8 & 1) == 0))
  {
LABEL_6:
    AudioPowerSpectrumViewModel.removeObservation()();
  }
}

void AudioPowerSpectrumViewModel.call.didset(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_call);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!a1) {
    goto LABEL_5;
  }
  if (v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    id v6 = v5;
    id v7 = a1;
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v5 = *v4;
LABEL_5:
      if (v5)
      {
        id v9 = v5;
        AudioPowerSpectrumViewModel.callChanged(_:)();
      }
    }
  }
}

uint64_t key path getter for AudioPowerSpectrumViewModel.localPowerSpectrum : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.localPowerSpectrum : AudioPowerSpectrumViewModel(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF8);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.$localPowerSpectrum : AudioPowerSpectrumViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x108))();
}

uint64_t key path setter for AudioPowerSpectrumViewModel.$localPowerSpectrum : AudioPowerSpectrumViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x110))(v6);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.remotePowerSpectrum : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.remotePowerSpectrum : AudioPowerSpectrumViewModel(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.$remotePowerSpectrum : AudioPowerSpectrumViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x138))();
}

uint64_t key path setter for AudioPowerSpectrumViewModel.$remotePowerSpectrum : AudioPowerSpectrumViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]>.Publisher);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x140))(v6);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.waveformColorRemote : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x150))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.waveformColorRemote : AudioPowerSpectrumViewModel(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x158))(*a1);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.waveformColorLocal : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.waveformColorLocal : AudioPowerSpectrumViewModel(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x170))(*a1);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.needsBackdropFilterLayer : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x180))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.needsBackdropFilterLayer : AudioPowerSpectrumViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x188))(*a1);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.localWaveformFilter : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x198))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.localWaveformFilter : AudioPowerSpectrumViewModel(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t key path getter for AudioPowerSpectrumViewModel.remoteWaveformFilter : AudioPowerSpectrumViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioPowerSpectrumViewModel.remoteWaveformFilter : AudioPowerSpectrumViewModel(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1B8);
  id v4 = *a1;
  return v3(v2);
}

uint64_t AudioPowerSpectrumViewModel.uplinkPowerTap.getter()
{
  return OUTLINED_FUNCTION_17_5();
}

uint64_t AudioPowerSpectrumViewModel.downlinkPowerTap.getter()
{
  return OUTLINED_FUNCTION_17_5();
}

uint64_t AudioPowerSpectrumViewModel.updateWaveform(forCall:)(void *a1)
{
  objc_msgSend(a1, sel_isRecording);
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v1 + 392))();
  OUTLINED_FUNCTION_27_20();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  NSString.init(stringLiteral:)();
  OUTLINED_FUNCTION_11_5();
  (*(void (**)(void))(v2 + 416))();
  OUTLINED_FUNCTION_27_20();
  NSString.init(stringLiteral:)();
  OUTLINED_FUNCTION_11_5();
  (*(void (**)(void))(v3 + 440))();
  unsigned int v4 = OUTLINED_FUNCTION_27_20();
  uint64_t v5 = self;
  id v6 = &selRef_greenColor;
  if (v4) {
    id v6 = &selRef_systemRedColor;
  }
  id v7 = [v5 *v6];
  OUTLINED_FUNCTION_8_44();
  (*(void (**)(void))(v8 + 344))();
  unsigned int v9 = OUTLINED_FUNCTION_27_20();
  uint64_t v10 = self;
  uint64_t v11 = &selRef_orangeColor;
  if (v9) {
    uint64_t v11 = &selRef_systemRedColor;
  }
  id v12 = [v10 *v11];
  OUTLINED_FUNCTION_8_44();
  uint64_t v14 = *(uint64_t (**)(void))(v13 + 368);
  return v14();
}

id AudioPowerSpectrumViewModel.__deallocating_deinit()
{
  swift_getObjectType();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v5 = 136315138;
    type metadata accessor for AudioPowerSpectrumViewModel();
    id v6 = v2;
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    OUTLINED_FUNCTION_14_5();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v3, v4, "Deinit %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  id v9 = *(id *)&v2[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_audioPowerTapQueue];
  closure #1 in AudioPowerSpectrumViewModel.deinit();

  uint64_t v10 = (objc_class *)type metadata accessor for AudioPowerSpectrumViewModel();
  v13.receiver = v2;
  v13.super_class = v10;
  return objc_msgSendSuper2(&v13, sel_dealloc);
}

uint64_t closure #1 in AudioPowerSpectrumViewModel.deinit()
{
  swift_retain();
  closure #1 in closure #1 in AudioPowerSpectrumViewModel.deinit();
  swift_release();
  swift_retain();
  closure #1 in closure #1 in AudioPowerSpectrumViewModel.deinit();
  return swift_release();
}

void closure #1 in closure #1 in AudioPowerSpectrumViewModel.deinit()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v5;
  v16[4] = v3;
  v16[5] = v8;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1107296256;
  v16[2] = thunk for @escaping @callee_guaranteed () -> ();
  v16[3] = v1;
  id v9 = _Block_copy(v16);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_18_34();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_5_1();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAFA0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_15_35();
  OUTLINED_FUNCTION_22_24();
  _Block_release(v9);
  uint64_t v12 = OUTLINED_FUNCTION_21_3();
  v13(v12);
  uint64_t v14 = OUTLINED_FUNCTION_20_26();
  v15(v14);
  swift_release();
  OUTLINED_FUNCTION_28();
}

void closure #1 in closure #1 in closure #1 in AudioPowerSpectrumViewModel.deinit(uint64_t a1)
{
  (*(void (**)(void))(*(void *)a1 + 296))();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v3 = 136446466;
    uint64_t v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, oslog, v2, "[%{public}s.deinit] downlinkPowerTap stopped: %{BOOL}d", (uint8_t *)v3, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
}

void closure #1 in AudioPowerSpectrumViewModel.observeActiveCall(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (a1)
    {
      uint64_t v8 = a1;
    }
    else
    {
      if (one-time initialization token for initialPowerSpectrum != -1) {
        swift_once();
      }
      uint64_t v8 = static AudioPowerSpectrumViewModel.Constants.initialPowerSpectrum;
      swift_bridgeObjectRetain();
    }
    id v9 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v10 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0xF8);
    swift_bridgeObjectRetain();
    v10(v8);
    if (a2)
    {
      uint64_t v11 = a2;
    }
    else
    {
      if (one-time initialization token for initialPowerSpectrum != -1) {
        swift_once();
      }
      uint64_t v11 = static AudioPowerSpectrumViewModel.Constants.initialPowerSpectrum;
      swift_bridgeObjectRetain();
    }
    uint64_t v12 = *(void (**)(uint64_t))((*v9 & *v7) + 0x128);
    swift_bridgeObjectRetain();
    v12(v11);
  }
}

uint64_t closure #1 in AudioPowerSpectrumViewModel.startAudioTaps()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = (char *)result;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C2F90000, v5, v6, "Starting audio taps for power spectrum observation", v7, 2u);
      MEMORY[0x1C87760E0](v7, -1, -1);
    }

    uint64_t v8 = *(void (**)(uint64_t))(**(void **)&v3[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_uplinkPowerTap]
                                        + 288);
    uint64_t v9 = swift_retain();
    v8(v9);
    swift_release();
    uint64_t v10 = *(void (**)(uint64_t))(**(void **)&v3[OBJC_IVAR____TtC15ConversationKit27AudioPowerSpectrumViewModel_downlinkPowerTap]
                                         + 288);
    uint64_t v11 = swift_retain();
    v10(v11);

    return swift_release();
  }
  return result;
}

uint64_t closure #1 in AudioPowerSpectrumViewModel.stopAudioTaps()(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1C2F90000, v5, v6, "Stopping audio taps for power spectrum observation", v7, 2u);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }

  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)a1 + 296))();
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v8);
}

id AudioPowerSpectrumViewModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AudioPowerSpectrumViewModel.init()()
{
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance AudioPowerSpectrumViewModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AudioPowerSpectrumViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void AudioPowerSpectrumViewModel.isEqual(_:)()
{
  OUTLINED_FUNCTION_31();
  id v1 = v0;
  uint64_t v3 = v2;
  swift_getObjectType();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v3, (uint64_t)v57, &demangling cache variable for type metadata for Any?);
  if (!v57[3])
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v57, &demangling cache variable for type metadata for Any?);
    goto LABEL_6;
  }
  if (swift_dynamicCast())
  {
    uint64_t v4 = v56;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v6 = OUTLINED_FUNCTION_8(v5);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = MEMORY[0x1F4188790](v6);
    unint64_t v10 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v11 = (char *)v46 - v10;
    uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
    objc_super v13 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8);
    uint64_t v53 = (*MEMORY[0x1E4FBC8C8] & *v1) + 216;
    uint64_t v14 = (void *)v13(v9);
    CGRect v54 = v13;
    CGRect v55 = v46;
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = objc_msgSend(v14, sel_uniqueProxyIdentifierUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 1;
    }
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = 1;
    uint64_t v20 = __swift_storeEnumTagSinglePayload((uint64_t)v46 - v10, v17, 1, v18);
    double v51 = v46;
    uint64_t v21 = MEMORY[0x1F4188790](v20);
    uint64_t v22 = (char *)v46 - v10;
    uint64_t v23 = (*v12 & *v4) + 216;
    uint64_t v24 = *(uint64_t (**)(void))((*v12 & *v4) + 0xD8);
    uint64_t v52 = v23;
    uint64_t v25 = (void *)((uint64_t (*)(uint64_t))v24)(v21);
    if (v25)
    {
      uint64_t v26 = v25;
      id v27 = objc_msgSend(v25, sel_uniqueProxyIdentifierUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = 0;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v22, v19, 1, v18);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    double v50 = v46;
    uint64_t v29 = OUTLINED_FUNCTION_8(v28);
    MEMORY[0x1F4188790](v29);
    OUTLINED_FUNCTION_61();
    uint64_t v31 = v19 + *(int *)(v30 + 56);
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v22, v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v32 = OUTLINED_FUNCTION_2_9(v19);
    if (v35)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_2_9(v31);
      if (v35)
      {
        uint64_t v33 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_19:
        CGRect v42 = (void *)v54(v33);
        if (v42)
        {
          uint64_t v43 = v42;
          objc_msgSend(v42, sel_isRecording);
        }
        double v44 = (void *)v24();
        if (v44)
        {
          uint64_t v45 = v44;
          objc_msgSend(v44, sel_isRecording);
        }
        goto LABEL_6;
      }
    }
    else
    {
      MEMORY[0x1F4188790](v32);
      uint64_t v34 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of Environment<DynamicTypeSize>.Content(v19, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v36 = OUTLINED_FUNCTION_2_9(v31);
      if (!v35)
      {
        uint64_t v48 = v46;
        double v49 = v24;
        uint64_t v37 = *(void *)(v18 - 8);
        MEMORY[0x1F4188790](v36);
        OUTLINED_FUNCTION_21();
        uint64_t v47 = v46;
        uint64_t v40 = v39 - v38;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v39 - v38, v31, v18);
        lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB10]);
        v46[3] = dispatch thunk of static Equatable.== infix(_:_:)();
        CGRect v41 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
        v41(v40, v18);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v41((uint64_t)v34, v18);
        uint64_t v24 = v49;
        uint64_t v33 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        goto LABEL_19;
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v34, v18);
    }
    uint64_t v33 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v19, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_19;
  }
LABEL_6:
  OUTLINED_FUNCTION_28();
}

void AudioPowerSpectrumViewModel.handleCallRecordingStateChanged(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  Notification.object.getter();
  if (v17)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    if (swift_dynamicCast())
    {
      uint64_t v6 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
      type metadata accessor for MainActor();
      id v7 = v0;
      uint64_t v8 = v15;
      uint64_t v9 = static MainActor.shared.getter();
      unint64_t v10 = (void *)swift_allocObject();
      uint64_t v11 = MEMORY[0x1E4FBCFD8];
      v10[2] = v9;
      v10[3] = v11;
      v10[4] = v7;
      v10[5] = v8;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v13))
  {
    uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1C2F90000, v8, v13, "AudioPowerSpectrumViewModel.handleCallRecordingStateChanged without valid call", v14, 2u);
    OUTLINED_FUNCTION_3();
  }
LABEL_9:
}

uint64_t closure #1 in AudioPowerSpectrumViewModel.handleCallRecordingStateChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in AudioPowerSpectrumViewModel.handleCallRecordingStateChanged(_:), v7, v6);
}

uint64_t closure #1 in AudioPowerSpectrumViewModel.handleCallRecordingStateChanged(_:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release();
  AudioPowerSpectrumViewModel.updateWaveform(forCall:)(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t @objc AudioPowerSpectrumViewModel.handleCallStatusChanged(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  type metadata accessor for Notification();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a1;
  a4(v4);

  uint64_t v9 = OUTLINED_FUNCTION_25_22();
  return v10(v9);
}

id @nonobjc TUCall.isVideo.getter()
{
  return objc_msgSend(v0, sel_isVideo);
}

uint64_t sub_1C31E2A28()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioPowerSpectrumViewModel.handleCallRecordingStateChanged(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  id v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *id v8 = v2;
  v8[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in AudioPowerSpectrumViewModel.handleCallRecordingStateChanged(_:)(a1, v4, v5, v7, v6);
}

uint64_t ObjC metadata update function for AudioPowerSpectrumViewModel()
{
  return type metadata accessor for AudioPowerSpectrumViewModel();
}

void type metadata completion function for AudioPowerSpectrumViewModel()
{
  type metadata accessor for Published<[Float]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AudioPowerSpectrumViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioPowerSpectrumViewModel);
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.call.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.call.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.call.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.localPowerSpectrum.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.localPowerSpectrum.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.localPowerSpectrum.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.$localPowerSpectrum.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.$localPowerSpectrum.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.$localPowerSpectrum.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.remotePowerSpectrum.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.remotePowerSpectrum.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.remotePowerSpectrum.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.$remotePowerSpectrum.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.$remotePowerSpectrum.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.$remotePowerSpectrum.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.waveformColorRemote.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.waveformColorRemote.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.waveformColorRemote.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.waveformColorLocal.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.waveformColorLocal.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.waveformColorLocal.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.needsBackdropFilterLayer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.needsBackdropFilterLayer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.needsBackdropFilterLayer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.localWaveformFilter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.localWaveformFilter.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.localWaveformFilter.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.remoteWaveformFilter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.remoteWaveformFilter.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.remoteWaveformFilter.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.__allocating_init(call:callCenter:notificationCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 552))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.start()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of AudioPowerSpectrumViewModel.stop(caller:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

void type metadata accessor for Published<[Float]>()
{
  if (!lazy cache variable for type metadata for Published<[Float]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[Float]>);
    }
  }
}

ValueMetadata *type metadata accessor for AudioPowerSpectrumViewModel.Constants()
{
  return &type metadata for AudioPowerSpectrumViewModel.Constants;
}

uint64_t sub_1C31E3450()
{
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioPowerSpectrumViewModel.stopAudioTaps()()
{
  return closure #1 in AudioPowerSpectrumViewModel.stopAudioTaps()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C31E3490()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioPowerSpectrumViewModel.startAudioTaps()()
{
  return closure #1 in AudioPowerSpectrumViewModel.startAudioTaps()(v0);
}

void partial apply for closure #1 in AudioPowerSpectrumViewModel.observeActiveCall(using:)(uint64_t a1, uint64_t a2)
{
  closure #1 in AudioPowerSpectrumViewModel.observeActiveCall(using:)(a1, a2, v2);
}

uint64_t sub_1C31E34D8()
{
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [Float]?, @guaranteed [Float]?) -> ()(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1C31E3538()
{
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in closure #1 in AudioPowerSpectrumViewModel.deinit()
{
  closure #1 in closure #1 in closure #1 in AudioPowerSpectrumViewModel.deinit(*(void *)(v0 + 16));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo6CGRectVGG_AIs5NeverOTg507_sSiSo6f34VABIgyyd_Si6offset_AB7elementtABs5G11OIegnrzr_TRSiA2IIgyyd_Tf1cn_n(uint64_t a1, double (*a2)(uint64_t, double, double, double, double))
{
  uint64_t v17 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (double *)(a1 + 56);
    do
    {
      double v7 = a2(v5, *(v6 - 3), *(v6 - 2), *(v6 - 1), *v6);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      unint64_t v14 = *(void *)(v17 + 16);
      if (v14 >= *(void *)(v17 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v5;
      *(void *)(v17 + 16) = v14 + 1;
      uint64_t v15 = (double *)(v17 + 32 * v14);
      v15[4] = v7;
      *((void *)v15 + 5) = v9;
      *((void *)v15 + 6) = v11;
      *((void *)v15 + 7) = v13;
      v6 += 4;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Bool __swiftcall ParticipantGridView.AnimationStyle.fasterThan(_:)(ConversationKit::ParticipantGridView::AnimationStyle a1)
{
  return v1 < a1;
}

uint64_t ParticipantGridView.AnimationStyle.rawValue.getter(uint64_t result)
{
  return result;
}

ConversationKit::ParticipantGridView::AnimationStyle_optional __swiftcall ParticipantGridView.AnimationStyle.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(rawValue) = 4;
  }
  return (ConversationKit::ParticipantGridView::AnimationStyle_optional)rawValue;
}

ConversationKit::ParticipantGridView::AnimationStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ParticipantGridView.AnimationStyle@<W0>(Swift::Int *a1@<X0>, ConversationKit::ParticipantGridView::AnimationStyle_optional *a2@<X8>)
{
  result.value = ParticipantGridView.AnimationStyle.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ParticipantGridView.AnimationStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ParticipantGridView.AnimationStyle.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t ParticipantGridView.layoutStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle);
  uint64_t result = OUTLINED_FUNCTION_2();
  *a1 = *v3;
  return result;
}

uint64_t ParticipantGridView.layoutStyle.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  unsigned char *v3 = v2;
  return result;
}

uint64_t (*ParticipantGridView.layoutStyle.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t (*ParticipantGridView.ParticipantTileInfo.identifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double ParticipantGridView.ParticipantTileInfo.aspectRatio.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = ParticipantGridView.ParticipantTileInfo.aspectRatio.getter(type metadata accessor for ParticipantGridView.ParticipantTileInfo, a1).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ParticipantGridView.ParticipantTileInfo(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantGridView.ParticipantTileInfo);
}

uint64_t ParticipantGridView.ParticipantTileInfo.aspectRatio.setter(uint64_t a1)
{
  return ParticipantGridView.ParticipantTileInfo.aspectRatio.setter(a1, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
}

uint64_t (*ParticipantGridView.ParticipantTileInfo.aspectRatio.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantGridView.ParticipantTileInfo.orientation.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ParticipantGridView.ParticipantTileInfo(0) + 24));
}

uint64_t ParticipantGridView.ParticipantTileInfo.orientation.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ParticipantGridView.ParticipantTileInfo.orientation.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantGridView.ParticipantTileInfo.isMostActive.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantGridView.ParticipantTileInfo(0) + 28));
}

uint64_t ParticipantGridView.ParticipantTileInfo.isMostActive.setter(char a1)
{
  uint64_t result = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*ParticipantGridView.ParticipantTileInfo.isMostActive.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantGridView.ParticipantTileInfo.hasOtherInvitedParticipants.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantGridView.ParticipantTileInfo(0) + 32));
}

uint64_t ParticipantGridView.ParticipantTileInfo.hasOtherInvitedParticipants.setter(char a1)
{
  uint64_t result = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*ParticipantGridView.ParticipantTileInfo.hasOtherInvitedParticipants.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantGridView.ParticipantTileInfo.init(identifier:aspectRatio:orientation:isMostActive:hasOtherInvitedParticipants:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, char a4@<W4>, char a5@<W5>, uint64_t a6@<X8>)
{
  outlined init with take of AspectRatio?(a1, (uint64_t)v24, &demangling cache variable for type metadata for AspectRatio?);
  uint64_t v10 = v24[1];
  uint64_t v21 = v24[0];
  uint64_t v11 = v24[2];
  uint64_t v12 = v24[3];
  char v20 = v25;
  uint64_t v13 = (int *)type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v14 = a6 + v13[6];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v15();
  *(void *)uint64_t v14 = a2;
  *(unsigned char *)(v14 + 8) = a3 & 1;
  uint64_t result = outlined init with take of AspectRatio?(a1, (uint64_t)v26, &demangling cache variable for type metadata for AspectRatio?);
  if (v26[33])
  {
    uint64_t v17 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v18 = 1;
  }
  else
  {
    uint64_t result = outlined init with take of AspectRatio((uint64_t)v26, (uint64_t)v27);
    char v18 = v20 & 1;
    uint64_t v17 = v21;
  }
  uint64_t v19 = a6 + v13[5];
  *(void *)uint64_t v19 = v17;
  *(void *)(v19 + 8) = v10;
  *(void *)(v19 + 16) = v11;
  *(void *)(v19 + 24) = v12;
  *(unsigned char *)(v19 + 32) = v18;
  *(unsigned char *)(a6 + v13[7]) = a4 & 1;
  *(unsigned char *)(a6 + v13[8]) = a5 & 1;
  return result;
}

uint64_t static ParticipantGridView.ParticipantTileInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v5 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
    OUTLINED_FUNCTION_62_3(v5, v6, v7, v8, v9, v10, v11, v12, v19[0]);
    outlined init with take of AspectRatio(a2 + v2[5], (uint64_t)v20);
    if (static AspectRatio.== infix(_:_:)((uint64_t)v19, (uint64_t)v20))
    {
      uint64_t v13 = v2[6];
      uint64_t v14 = (void *)(a1 + v13);
      char v15 = *(unsigned char *)(a1 + v13 + 8);
      id v16 = (void *)(a2 + v13);
      int v17 = *(unsigned __int8 *)(a2 + v13 + 8);
      if (v15)
      {
        if (!v17) {
          return v17 & 1;
        }
      }
      else
      {
        if (*v14 != *v16) {
          LOBYTE(v17) = 1;
        }
        if (v17) {
          goto LABEL_10;
        }
      }
      if (*(unsigned __int8 *)(a1 + v2[7]) == *(unsigned __int8 *)(a2 + v2[7]))
      {
        LOBYTE(v17) = *(unsigned char *)(a1 + v2[8]) ^ *(unsigned char *)(a2 + v2[8]) ^ 1;
        return v17 & 1;
      }
    }
  }
LABEL_10:
  LOBYTE(v17) = 0;
  return v17 & 1;
}

uint64_t ParticipantGridView.ParticipantTileInfo.identifier.setter(uint64_t a1)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*ParticipantGridView.FullScreenFocusedParticipantInfo.identifier.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double ParticipantGridView.FullScreenFocusedParticipantInfo.aspectRatio.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = ParticipantGridView.ParticipantTileInfo.aspectRatio.getter(type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo, a1).n128_u64[0];
  return result;
}

__n128 ParticipantGridView.ParticipantTileInfo.aspectRatio.getter@<Q0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  char v5 = *(unsigned char *)(v4 + 32);
  __n128 result = *(__n128 *)v4;
  long long v7 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(_OWORD *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 32) = v5;
  return result;
}

uint64_t ParticipantGridView.FullScreenFocusedParticipantInfo.aspectRatio.setter(uint64_t a1)
{
  return ParticipantGridView.ParticipantTileInfo.aspectRatio.setter(a1, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
}

uint64_t ParticipantGridView.ParticipantTileInfo.aspectRatio.setter(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_64_1();
  return outlined init with take of AspectRatio(a1, v3);
}

uint64_t (*ParticipantGridView.FullScreenFocusedParticipantInfo.aspectRatio.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantGridView.FullScreenFocusedParticipantInfo.orientation.getter()
{
  OUTLINED_FUNCTION_65_2();
  return *(void *)(v0 + v1);
}

uint64_t ParticipantGridView.FullScreenFocusedParticipantInfo.orientation.setter(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_65_2();
  *(void *)(v1 + v4) = a1;
  return result;
}

uint64_t (*ParticipantGridView.FullScreenFocusedParticipantInfo.orientation.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantGridView.FullScreenFocusedParticipantInfo.cameraPosition.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0)
                                     + 28));
}

uint64_t ParticipantGridView.FullScreenFocusedParticipantInfo.cameraPosition.setter(char a1)
{
  uint64_t result = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*ParticipantGridView.FullScreenFocusedParticipantInfo.cameraPosition.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double ParticipantGridView.FullScreenFocusedParticipantInfo.aspectRatioSize.getter()
{
  OUTLINED_FUNCTION_65_2();
  if ((*(void *)(v0 + v1) | 2) == 3)
  {
    double result = OUTLINED_FUNCTION_50_7();
    if (v4) {
      return result;
    }
  }
  else
  {
    double result = OUTLINED_FUNCTION_50_7();
    if (v6) {
      return result;
    }
    uint64_t v2 = v5 + 16;
  }
  return *(double *)v2;
}

BOOL static ParticipantGridView.FullScreenFocusedParticipantInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v5 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0),
        OUTLINED_FUNCTION_62_3(v5, v6, v7, v8, v9, v10, v11, v12, v14[0]),
        outlined init with take of AspectRatio(a2 + v2[5], (uint64_t)v15),
        static AspectRatio.== infix(_:_:)((uint64_t)v14, (uint64_t)v15))
    && *(void *)(a1 + v2[6]) == *(void *)(a2 + v2[6]))
  {
    return OUTLINED_FUNCTION_58_4(v2[7]);
  }
  else
  {
    return 0;
  }
}

uint64_t ParticipantGridView.FullScreenFocusedParticipantInfo.init(identifier:aspectRatio:orientation:cameraPosition:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v8 = OUTLINED_FUNCTION_44();
  v9(v8);
  uint64_t v10 = (int *)type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  uint64_t result = outlined init with take of AspectRatio(a1, a4 + v10[5]);
  *(void *)(a4 + v10[6]) = a2;
  *(unsigned char *)(a4 + v10[7]) = a3;
  return result;
}

uint64_t ParticipantGridView.Traits.isSelected.getter(char a1)
{
  return a1 & 1;
}

uint64_t ParticipantGridView.Traits.isScreenSharing.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

ConversationKit::ParticipantGridView::Traits __swiftcall ParticipantGridView.Traits.init(isSelected:isScreenSharing:)(Swift::Bool isSelected, Swift::Bool isScreenSharing)
{
  if (isScreenSharing) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return (ConversationKit::ParticipantGridView::Traits)(v2 & 0xFFFE | isSelected);
}

uint64_t ParticipantGridView.ParticipantTileInfo.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t ParticipantGridView.AnimationInfo.style.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantGridView.AnimationInfo(0) + 20));
}

BOOL static ParticipantGridView.AnimationInfo.== infix(_:_:)()
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v0 = type metadata accessor for ParticipantGridView.AnimationInfo(0);
  return OUTLINED_FUNCTION_58_4(*(int *)(v0 + 20));
}

uint64_t ParticipantGridView.AnimationInfo.init(uuid:style:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v4();
  uint64_t result = type metadata accessor for ParticipantGridView.AnimationInfo(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = a1;
  return result;
}

int64x2_t one-time initialization function for fallbackParticipantViewFrame()
{
  static ParticipantGridView.fallbackParticipantViewFrame = 0;
  *(void *)algn_1EA37E158 = 0;
  int64x2_t result = vdupq_n_s64(0x4069000000000000uLL);
  xmmword_1EA37E160 = (__int128)result;
  return result;
}

uint64_t *ParticipantGridView.fallbackParticipantViewFrame.unsafeMutableAddressor()
{
  if (one-time initialization token for fallbackParticipantViewFrame != -1) {
    swift_once();
  }
  return &static ParticipantGridView.fallbackParticipantViewFrame;
}

double static ParticipantGridView.fallbackParticipantViewFrame.getter()
{
  if (one-time initialization token for fallbackParticipantViewFrame != -1) {
    swift_once();
  }
  return *(double *)&static ParticipantGridView.fallbackParticipantViewFrame;
}

void ParticipantGridView.participantIdentifiers.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  uint64_t v51 = OUTLINED_FUNCTION_37_11(v3, v48[0]);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  uint64_t v52 = v7;
  OUTLINED_FUNCTION_8_1();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v48 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v48 - v12;
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles);
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v54 = MEMORY[0x1E4FBC860];
  uint64_t v16 = *(void *)(v14 + 16);
  swift_bridgeObjectRetain();
  uint64_t v50 = v16;
  if (v16)
  {
    unint64_t v17 = 0;
    while (v17 < *(void *)(v14 + 16))
    {
      unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v19 = *(void *)(v5 + 72);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v14 + v18 + v19 * v17, (uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      type metadata accessor for ParticipantView();
      if (swift_dynamicCastClass())
      {
        outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v13, (uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v20 = OUTLINED_FUNCTION_48_0();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20, v21, v22);
        }
        uint64_t v23 = v54;
        unint64_t v25 = *(void *)(v54 + 16);
        unint64_t v24 = *(void *)(v54 + 24);
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          uint64_t v23 = v54;
        }
        *(void *)(v23 + 16) = v25 + 1;
        outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v11, v23 + v18 + v25 * v19, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      }
      else
      {
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      }
      if (v50 == ++v17)
      {
        uint64_t v26 = v54;
        uint64_t v15 = MEMORY[0x1E4FBC860];
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v26 = v15;
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v54 = v15;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
      OUTLINED_FUNCTION_22_0();
      v48[1] = v26;
      uint64_t v29 = v26 + v28;
      uint64_t v30 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v33 = *(void *)(v32 + 64);
      uint64_t v49 = *(void *)(v5 + 72);
      uint64_t v50 = v34;
      char v35 = (void (**)(char *, uint64_t, uint64_t))(v34 + 32);
      uint64_t v51 = v31;
      do
      {
        MEMORY[0x1F4188790](v31);
        uint64_t v36 = v52;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v29, v52, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v37 = v53;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v36, v53, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
        uint64_t v38 = *v35;
        (*v35)((char *)v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v30);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v36, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v39 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v40 = OUTLINED_FUNCTION_48_0();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40, v41, v42);
          uint64_t v39 = v54;
        }
        unint64_t v44 = *(void *)(v39 + 16);
        unint64_t v43 = *(void *)(v39 + 24);
        if (v44 >= v43 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          uint64_t v39 = v54;
        }
        *(void *)(v39 + 16) = v44 + 1;
        OUTLINED_FUNCTION_12_19();
        unint64_t v47 = v39 + v45 + *(void *)(v46 + 72) * v44;
        uint64_t v30 = v51;
        uint64_t v31 = ((uint64_t (*)(unint64_t, char *, uint64_t))v38)(v47, (char *)v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), v51);
        uint64_t v54 = v39;
        v29 += v49;
        --v27;
      }
      while (v27);
    }
    swift_release();
    OUTLINED_FUNCTION_28();
  }
}

uint64_t ParticipantGridView.participantIdentifiableTiles.didset()
{
  uint64_t v1 = v0;
  uint64_t v30 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  MEMORY[0x1F4188790](v30);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles];
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = result + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v29 = *(void *)(v2 + 72);
    v26[0] = result;
    swift_bridgeObjectRetain();
    long long v27 = xmmword_1C37696D0;
    v26[1] = MEMORY[0x1E4FBC838] + 8;
    uint64_t v28 = v4;
    while (1)
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v7, (uint64_t)v4, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      long long v32 = *(_OWORD *)&v4[*(int *)(v30 + 20)];
      type metadata accessor for ParticipantView();
      uint64_t v8 = (void *)v32;
      uint64_t v9 = swift_dynamicCastClass();
      if (!v9) {
        goto LABEL_7;
      }
      uint64_t v10 = v9;
      id v11 = v8;
      id v12 = v1;
      swift_getObjectType();
      if (!dynamic_cast_existential_1_conditional((uint64_t)v12)) {
        break;
      }
      uint64_t v14 = v13;
      uint64_t v15 = v10 + OBJC_IVAR____TtC15ConversationKit15ParticipantView_delegate;
      swift_beginAccess();
      *(void *)(v15 + 8) = v14;
      swift_unknownObjectWeakAssign();

LABEL_10:
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v4, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      v7 += v29;
      if (!--v6) {
        return swift_bridgeObjectRelease();
      }
    }

LABEL_7:
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v31 = static OS_os_log.conversationKit;
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = v27;
    *(void *)&long long v33 = v1;
    swift_unknownObjectRetain();
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v19 = v18;
    uint64_t v20 = MEMORY[0x1E4FBB1A0];
    *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
    uint64_t v21 = v1;
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v16 + 64) = v22;
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    long long v33 = v32;
    id v23 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantTile);
    uint64_t v24 = String.init<A>(reflecting:)();
    *(void *)(v16 + 96) = v20;
    *(void *)(v16 + 104) = v22;
    uint64_t v1 = v21;
    *(void *)(v16 + 72) = v24;
    *(void *)(v16 + 80) = v25;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v4 = v28;
    goto LABEL_10;
  }
  return result;
}

uint64_t ParticipantGridView.participantIdentifiableTiles.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles) = a1;
  swift_bridgeObjectRelease();
  return ParticipantGridView.participantIdentifiableTiles.didset();
}

id ParticipantGridView.unfocusedParticipantOverlay.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay);
}

__n128 ParticipantGridView.organicLayoutConfiguration.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_organicLayoutConfiguration;
  OUTLINED_FUNCTION_2();
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v4;
  return result;
}

uint64_t ParticipantGridView.fullScreenFocusedParticipantInfo.getter()
{
  return ParticipantGridView.fullScreenFocusedParticipantInfo.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
}

uint64_t key path setter for ParticipantGridView.fullScreenFocusedParticipantInfo : ParticipantGridView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  MEMORY[0x1F4188790](v2 - 8);
  char v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant?(a1, (uint64_t)v4, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  return ParticipantGridView.fullScreenFocusedParticipantInfo.setter((uint64_t)v4, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo, (void (*)(uint64_t))ParticipantGridView.fullScreenFocusedParticipantInfo.didset);
}

uint64_t ParticipantGridView.fullScreenFocusedParticipantInfo.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v4 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  id v12 = (char *)v41 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (void *)((char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v16 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4FBCBE8], v13);
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  outlined init with copy of Participant?(a1, (uint64_t)v12, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v19 = v2;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v46 = v43;
    *(_DWORD *)uint64_t v23 = 136315394;
    v41[1] = v23 + 4;
    int v42 = v22;
    uint64_t v24 = (uint64_t)&v19[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo];
    swift_beginAccess();
    outlined init with copy of Participant?(v24, (uint64_t)v10, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v25 = specialized >> prefix<A>(_:)();
    uint64_t v26 = v4;
    unint64_t v28 = v27;
    outlined destroy of SystemUpdateNotice?((uint64_t)v10, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v28, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v4 = v26;
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v29 = specialized >> prefix<A>(_:)();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    _os_log_impl(&dword_1C2F90000, v20, (os_log_type_t)v42, "Grid fullScreenFocusedParticipantInfo updated to %s from %s", (uint8_t *)v23, 0x16u);
    uint64_t v31 = v43;
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v31, -1, -1);
    MEMORY[0x1C87760E0](v23, -1, -1);
  }
  else
  {

    outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  }

  uint64_t result = ParticipantGridView.isOneToOneMode.getter();
  uint64_t v33 = *(void *)&v19[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles];
  uint64_t v34 = *(void *)(v33 + 16);
  if (v34)
  {
    char v35 = result;
    uint64_t v36 = *(int *)(v44 + 20);
    uint64_t v37 = v33 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v38 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v37, (uint64_t)v6, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      id v39 = *(id *)&v6[v36];
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v6, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      type metadata accessor for ParticipantView();
      uint64_t v40 = swift_dynamicCastClass();
      if (v40) {
        ParticipantGridView.updateCornerRadius(for:isOneToOneMode:)(v40, v35 & 1);
      }

      v37 += v38;
      --v34;
    }
    while (v34);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ParticipantGridView.isOneToOneMode.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v1))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

void ParticipantGridView.updateCornerRadius(for:isOneToOneMode:)(uint64_t a1, char a2)
{
  double v3 = 0.0;
  if ((a2 & 1) == 0)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    double v3 = (*(double (**)(void))(*(void *)static Defaults.shared + 384))();
  }
  char v4 = (double *)(a1 + OBJC_IVAR____TtC15ConversationKit15ParticipantView_customCornerRadius);
  swift_beginAccess();
  if (*v4 != v3)
  {
    *char v4 = v3;
    ParticipantView.customCornerRadius.didset();
  }
}

uint64_t key path getter for ParticipantGridView.delegate : ParticipantGridView@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for ParticipantGridView.delegate : ParticipantGridView(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t ParticipantGridView.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v1);
}

uint64_t ParticipantGridView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v4 + 8) = a2;
  OUTLINED_FUNCTION_41_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ParticipantGridView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t ParticipantGridView.currentAnimationInfo.getter()
{
  return ParticipantGridView.fullScreenFocusedParticipantInfo.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
}

uint64_t ParticipantGridView.fullScreenFocusedParticipantInfo.getter(uint64_t a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_2();
  uint64_t v3 = OUTLINED_FUNCTION_41_0();
  return outlined init with copy of Participant?(v3, v4, a2);
}

uint64_t key path getter for ParticipantGridView.fullScreenFocusedParticipantInfo : ParticipantGridView@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1 + *a2;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of Participant?(v6, a4, a3);
}

uint64_t key path setter for ParticipantGridView.currentAnimationInfo : ParticipantGridView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant?(a1, (uint64_t)v4, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  return ParticipantGridView.currentAnimationInfo.setter((uint64_t)v4);
}

uint64_t ParticipantGridView.currentAnimationInfo.setter(uint64_t a1)
{
  return ParticipantGridView.fullScreenFocusedParticipantInfo.setter(a1, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo, (void (*)(uint64_t))ParticipantGridView.currentAnimationInfo.didset);
}

uint64_t ParticipantGridView.fullScreenFocusedParticipantInfo.setter(uint64_t a1, uint64_t *a2, void *a3, void (*a4)(uint64_t))
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_64();
  uint64_t v12 = v4 + *a3;
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v12, v5, a2);
  OUTLINED_FUNCTION_6_1();
  outlined assign with copy of ParticipantGridView.AnimationInfo?(a1, v12, a2);
  swift_endAccess();
  a4(v5);
  outlined destroy of SystemUpdateNotice?(a1, a2);
  return outlined destroy of SystemUpdateNotice?(v5, a2);
}

uint64_t ParticipantGridView.currentAnimationInfo.didset(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ParticipantGridView.AnimationInfo(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v27[-v10];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantGridView.AnimationInfo?, ParticipantGridView.AnimationInfo?));
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo;
  swift_beginAccess();
  uint64_t v17 = (uint64_t)&v15[*(int *)(v13 + 56)];
  outlined init with copy of Participant?(v16, (uint64_t)v15, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  outlined init with copy of Participant?(a1, v17, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v3) == 1)
  {
    if (__swift_getEnumTagSinglePayload(v17, 1, v3) == 1) {
      return outlined destroy of SystemUpdateNotice?((uint64_t)v15, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
    }
    uint64_t v19 = &demangling cache variable for type metadata for (ParticipantGridView.AnimationInfo?, ParticipantGridView.AnimationInfo?);
  }
  else
  {
    outlined init with copy of Participant?((uint64_t)v15, (uint64_t)v11, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
    if (__swift_getEnumTagSinglePayload(v17, 1, v3) == 1)
    {
      uint64_t v19 = &demangling cache variable for type metadata for (ParticipantGridView.AnimationInfo?, ParticipantGridView.AnimationInfo?);
    }
    else
    {
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v17, (uint64_t)v5, (void (*)(void))type metadata accessor for ParticipantGridView.AnimationInfo);
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v20 = *(int *)(v3 + 20);
        int v21 = v11[v20];
        int v22 = v5[v20];
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v5, (void (*)(void))type metadata accessor for ParticipantGridView.AnimationInfo);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantGridView.AnimationInfo);
        uint64_t result = outlined destroy of SystemUpdateNotice?((uint64_t)v15, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
        if (v21 == v22) {
          return result;
        }
        goto LABEL_13;
      }
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v5, (void (*)(void))type metadata accessor for ParticipantGridView.AnimationInfo);
      uint64_t v19 = &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?;
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantGridView.AnimationInfo);
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v15, v19);
LABEL_13:
  outlined init with copy of Participant?(v16, (uint64_t)v9, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v3);
  uint64_t result = outlined destroy of SystemUpdateNotice?((uint64_t)v9, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v24 = v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
    swift_beginAccess();
    uint64_t result = MEMORY[0x1C8776240](v24);
    if (result)
    {
      uint64_t v25 = *(void *)(v24 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24))(v1, ObjectType, v25);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void (*ParticipantGridView.currentAnimationInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  OUTLINED_FUNCTION_8(v4);
  size_t v6 = *(void *)(v5 + 64);
  v3[4] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[5] = v7;
  uint64_t v8 = v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo;
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_2();
  outlined init with copy of Participant?(v8, (uint64_t)v7, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  return ParticipantGridView.currentAnimationInfo.modify;
}

void ParticipantGridView.currentAnimationInfo.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of Participant?(*(void *)(*(void *)a1 + 40), (uint64_t)v3, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
    ParticipantGridView.currentAnimationInfo.setter((uint64_t)v3);
    outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  }
  else
  {
    ParticipantGridView.currentAnimationInfo.setter(*(void *)(*(void *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v2);
}

double ParticipantGridView.cachedFrameSize.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize;
  OUTLINED_FUNCTION_2();
  return *(double *)v1;
}

uint64_t ParticipantGridView.cachedFrameSize.setter(double a1, double a2)
{
  uint64_t v5 = (double *)(v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ParticipantGridView.cachedFrameSize.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t ParticipantGridView.isLocalMemberAuthorizedToChangeGroupMembership.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t ParticipantGridView.isLocalMemberAuthorizedToChangeGroupMembership.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1
               + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ParticipantGridView.isLocalMemberAuthorizedToChangeGroupMembership.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t ParticipantGridView.MediaPipInfo.corner.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*ParticipantGridView.MediaPipInfo.corner.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ParticipantGridView.MediaPipInfo.size.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*ParticipantGridView.MediaPipInfo.size.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL ParticipantGridView.MediaPipInfo.isEmpty.getter(double a1, double a2)
{
  return a2 == 0.0 && a1 == 0.0;
}

BOOL ParticipantGridView.MediaPipInfo.flipsOrganicPairs.getter(char a1, double a2, double a3)
{
  id v6 = objc_msgSend(self, sel_currentDevice);
  id v7 = objc_msgSend(v6, sel_userInterfaceIdiom);

  if (v7) {
    return 0;
  }
  return a2 >= a3 || a1 != 2;
}

BOOL static ParticipantGridView.MediaPipInfo.== infix(_:_:)(char a1, char a2, double a3, double a4, double a5, double a6)
{
  if (a1 == 4)
  {
    if (a2 != 4) {
      return 0;
    }
    return a4 == a6 && a3 == a5;
  }
  BOOL result = 0;
  if (a2 != 4 && a1 == a2) {
    return a4 == a6 && a3 == a5;
  }
  return result;
}

ConversationKit::ParticipantGridView::MediaPipInfo __swiftcall ParticipantGridView.MediaPipInfo.init()()
{
  double v0 = 0.0;
  double v1 = 0.0;
  ConversationKit::MultiwayViewConstraintsController::MultiwayCorner v2 = ConversationKit_MultiwayViewConstraintsController_MultiwayCorner_unknownDefault;
  result.size.double height = v1;
  result.size.double width = v0;
  result.corner.value = v2;
  return result;
}

double default argument 1 of ParticipantGridView.MediaPipInfo.init(corner:size:)()
{
  return 0.0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticipantGridView.MediaPipInfo(uint64_t a1, uint64_t a2)
{
  return static ParticipantGridView.MediaPipInfo.== infix(_:_:)(*(unsigned char *)a1, *(unsigned char *)a2, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a2 + 8), *(double *)(a2 + 16));
}

id ParticipantGridView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

UIView *ParticipantGridView.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles] = MEMORY[0x1E4FBC860];
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay;
  type metadata accessor for ParticipantDimmingView();
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = v0;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_init);
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags;
  *(void *)&v4[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  OUTLINED_FUNCTION_70_1();
  uint64_t v6 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)&v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier], 1, 1, v6);
  uint64_t v7 = OUTLINED_FUNCTION_70_1();
  uint64_t v8 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(v7);
  OUTLINED_FUNCTION_68_0(v8);
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostRecentAnimationIndex] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = OUTLINED_FUNCTION_70_1();
  uint64_t v10 = type metadata accessor for ParticipantGridView.AnimationInfo(v9);
  OUTLINED_FUNCTION_68_0(v10);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_videoInfoCache;
  uint64_t v12 = OUTLINED_FUNCTION_51_5();
  Cache.init(countLimit:)();
  *(void *)&v4[v11] = v12;
  uint64_t v13 = &v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation] = 1;
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState;
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
  *(void *)&v4[v14] = Dictionary.init(dictionaryLiteral:)();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle] = (*(uint64_t (**)(void))(v15 + 504))() & 1;
  id v16 = objc_msgSend(self, sel_currentDevice);
  uint64_t v17 = (char *)objc_msgSend(v16, sel_userInterfaceIdiom);

  if ((unint64_t)(v17 - 1) >= 3)
  {
    if (!v17)
    {
      char v20 = 0;
      long long v19 = xmmword_1C37757C0;
      uint64_t v21 = 0;
      char v18 = 1;
      goto LABEL_9;
    }
    if (v17 != (char *)-1)
    {
      char v18 = 0;
      long long v19 = xmmword_1C37757D0;
      char v20 = 2;
      uint64_t v21 = 0x4089000000000000;
      goto LABEL_9;
    }
  }
  char v18 = 0;
  long long v19 = xmmword_1C37757D0;
  char v20 = 1;
  uint64_t v21 = 0x408A100000000000;
LABEL_9:
  v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceType] = v20;
  int v22 = &v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_organicLayoutConfiguration];
  *(void *)int v22 = 0x4030000000000000;
  *(_OWORD *)(v22 + 8) = v19;
  *((void *)v22 + 3) = v21;
  v22[32] = v18;

  v34.receiver = v4;
  v34.super_class = ObjectType;
  uint64_t v23 = (char *)objc_msgSendSuper2(&v34, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v24 = *(void **)&v23[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay];
  uint64_t v25 = v23;
  objc_msgSend(v25, sel_addSubview_, v24);
  CGFloat v26 = *MEMORY[0x1E4FB12A8];
  CGFloat v27 = *(double *)(MEMORY[0x1E4FB12A8] + 8);
  CGFloat v28 = *(double *)(MEMORY[0x1E4FB12A8] + 16);
  CGFloat v29 = *(double *)(MEMORY[0x1E4FB12A8] + 24);
  unint64_t v30 = v25;
  id v31 = v24;
  v35.double top = v26;
  v35.double leading = v27;
  v35.double bottom = v28;
  v35.trailing = v29;
  UIView.addConstraintsToFill(_:insets:)(v30, v35);

  long long v32 = v30;
  UIView.addTapInteraction(withTapCount:)(1);

  return v32;
}

id ParticipantGridView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantGridView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles] = MEMORY[0x1E4FBC860];
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay;
  type metadata accessor for ParticipantDimmingView();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v3 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_10_2(v3);
  OUTLINED_FUNCTION_10_2((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier]);
  uint64_t v4 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  OUTLINED_FUNCTION_24_6(v4);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostRecentAnimationIndex] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v5 = type metadata accessor for ParticipantGridView.AnimationInfo(0);
  OUTLINED_FUNCTION_24_6(v5);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_videoInfoCache;
  uint64_t v7 = OUTLINED_FUNCTION_51_5();
  Cache.init(countLimit:)();
  *(void *)&v0[v6] = v7;
  uint64_t v8 = &v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize];
  *uint64_t v8 = 0;
  v8[1] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation] = 1;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState;
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
  *(void *)&v0[v9] = Dictionary.init(dictionaryLiteral:)();

  OUTLINED_FUNCTION_41_11();
  __break(1u);
}

id ParticipantGridView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantGridView.init(frame:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles] = MEMORY[0x1E4FBC860];
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay;
  type metadata accessor for ParticipantDimmingView();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v3 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_10_2(v3);
  OUTLINED_FUNCTION_10_2((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier]);
  uint64_t v4 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  OUTLINED_FUNCTION_24_6(v4);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostRecentAnimationIndex] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v5 = type metadata accessor for ParticipantGridView.AnimationInfo(0);
  OUTLINED_FUNCTION_24_6(v5);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_videoInfoCache;
  uint64_t v7 = OUTLINED_FUNCTION_51_5();
  Cache.init(countLimit:)();
  *(void *)&v0[v6] = v7;
  uint64_t v8 = &v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize];
  *uint64_t v8 = 0;
  v8[1] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation] = 1;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState;
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
  *(void *)&v0[v9] = Dictionary.init(dictionaryLiteral:)();

  OUTLINED_FUNCTION_41_11();
  __break(1u);
}

Swift::Void __swiftcall ParticipantGridView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  ParticipantGridView.updateParticipantViewFrames()();
}

uint64_t ParticipantGridView.updateParticipantViewFrames()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v0, sel_safeAreaInsetFrame);
  uint64_t result = CGRectIsEmpty(v32);
  if ((result & 1) == 0)
  {
    uint64_t v8 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo];
    swift_beginAccess();
    outlined init with copy of Participant?(v8, (uint64_t)v6, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
    uint64_t v9 = type metadata accessor for ParticipantGridView.AnimationInfo(0);
    LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v9);
    outlined destroy of SystemUpdateNotice?((uint64_t)v6, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?);
    if (v8 == 1
      || ((uint64_t v10 = (double *)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize],
           swift_beginAccess(),
           double v11 = *v10,
           double v12 = v10[1],
           uint64_t result = (uint64_t)objc_msgSend(v0, sel_frame),
           v11 == v14)
        ? (BOOL v15 = v12 == v13)
        : (BOOL v15 = 0),
          !v15))
    {
      objc_msgSend(v0, sel_frame);
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      char v20 = &v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize];
      swift_beginAccess();
      *(void *)char v20 = v17;
      *((void *)v20 + 1) = v19;
      uint64_t v21 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier];
      swift_beginAccess();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v31 = (uint64_t)&v31;
      uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
      MEMORY[0x1F4188790](v22 - 8);
      uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of Participant?(v21, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v25 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
      uint64_t v26 = swift_beginAccess();
      MEMORY[0x1F4188790](v26);
      outlined init with copy of Participant?(v25, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v27 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo];
      swift_beginAccess();
      outlined init with copy of Participant?(v27, (uint64_t)v3, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
      uint64_t v28 = swift_bridgeObjectRetain();
      uint64_t v29 = ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(v28, (uint64_t)v24, (uint64_t)v24, (uint64_t)v3);
      swift_bridgeObjectRelease();
      outlined destroy of SystemUpdateNotice?((uint64_t)v3, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v30 = swift_bridgeObjectRetain();
      ParticipantGridView.updateParticipantTiles(_:with:block:)(v30, v29, 0, 0);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Void __swiftcall ParticipantGridView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v8.receiver = v1;
  v8.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v8, sel_traitCollectionDidChange_, isa);
  if (isa)
  {
    [(objc_class *)isa displayScale];
    double v4 = v3;
  }
  else
  {
    double v4 = 0.0;
  }
  id v5 = objc_msgSend(v1, sel_traitCollection);
  objc_msgSend(v5, sel_displayScale);
  double v7 = v6;

  if (!isa || v4 != v7) {
    objc_msgSend(v1, sel_setNeedsLayout);
  }
}

Swift::Void __swiftcall ParticipantGridView.setParticipants(_:)(Swift::OpaquePointer a1)
{
  OUTLINED_FUNCTION_31();
  double v4 = v1;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_16_0();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_5_1();
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_21();
  uint64_t v19 = (uint64_t *)(v18 - v17);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v19 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v20();
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v19, v13);
  if (v21)
  {
    uint64_t v22 = (uint64_t)&v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo];
    OUTLINED_FUNCTION_2();
    outlined init with copy of Participant?(v22, v3, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v23 = ParticipantGridView.updateParticipantTiles(with:fullScreenFocusedParticipantInfo:)(v6, v3);
    outlined destroy of SystemUpdateNotice?(v3, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    ParticipantGridView.participantIdentifiableTiles.setter(v23);
    uint64_t v24 = *(void *)&v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles];
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v26 = *(int *)(v7 + 20);
      OUTLINED_FUNCTION_22_0();
      uint64_t v28 = v24 + v27;
      uint64_t v29 = *(void *)(v9 + 72);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v30 = OUTLINED_FUNCTION_43();
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v30, v31, v32);
        uint64_t v33 = *(void **)(v2 + v26);
        objc_msgSend(v33, sel_setAlpha_, 1.0);
        objc_msgSend(v4, sel_addSubview_, v33);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v2, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        v28 += v29;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
    }
    ParticipantGridView.updateParticipantViewFrames()();
    OUTLINED_FUNCTION_28();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ParticipantGridView.updateParticipantTiles(with:fullScreenFocusedParticipantInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v342 = a2;
  uint64_t v307 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantViewModel?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v311 = (uint64_t)&v286 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v323 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v6 = MEMORY[0x1F4188790](v323);
  v293 = (char *)&v286 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v287 = (char *)&v286 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v296 = (uint64_t)&v286 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v345 = (uint64_t)&v286 - v13;
  MEMORY[0x1F4188790](v12);
  v310 = (char *)&v286 - v14;
  uint64_t v321 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v328 = *(void *)(v321 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v321);
  v314 = (char *)&v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v340 = (uint64_t)&v286 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v319 = (uint64_t)&v286 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v298 = (uint64_t)&v286 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v290 = (uint64_t)&v286 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v295 = (uint64_t)&v286 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v301 = (uint64_t)&v286 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v336 = (uint64_t)&v286 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v305 = (uint64_t)&v286 - v31;
  uint64_t v309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Participant));
  MEMORY[0x1F4188790](v309);
  v297 = (char *)&v286 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Participant)?);
  uint64_t v34 = MEMORY[0x1F4188790](v33 - 8);
  v312 = (char *)&v286 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  v308 = (uint64_t *)((char *)&v286 - v36);
  uint64_t v324 = type metadata accessor for Participant.State(0);
  uint64_t v37 = MEMORY[0x1F4188790](v324);
  v292 = (char *)&v286 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v286 = (uint64_t)&v286 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v306 = (uint64_t)&v286 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v44 = (char *)&v286 - v43;
  uint64_t v335 = type metadata accessor for Participant(0);
  uint64_t v304 = *(void *)(v335 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v335);
  uint64_t v334 = (uint64_t)&v286 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v330 = (uint64_t)&v286 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  *(void *)&long long v344 = (char *)&v286 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v343 = (uint64_t)&v286 - v52;
  MEMORY[0x1F4188790](v51);
  uint64_t v54 = (char *)&v286 - v53;
  CGRect v55 = (int *)type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  MEMORY[0x1F4188790](v55);
  os_log_type_t v57 = (char *)&v286 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  MEMORY[0x1F4188790](v58 - 8);
  uint64_t v60 = (char *)&v286 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantGridView.FullScreenFocusedParticipantInfo?, ParticipantGridView.FullScreenFocusedParticipantInfo?));
  uint64_t v62 = v61 - 8;
  MEMORY[0x1F4188790](v61);
  uint64_t v64 = (char *)&v286 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v333 = v3;
  uint64_t v65 = v3 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo;
  swift_beginAccess();
  uint64_t v66 = (uint64_t)&v64[*(int *)(v62 + 56)];
  outlined init with copy of Participant?(v65, (uint64_t)v64, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  outlined init with copy of Participant?(v342, v66, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v64, 1, (uint64_t)v55) == 1)
  {
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v66, 1, (uint64_t)v55);
    if (EnumTagSinglePayload == 1) {
      uint64_t v68 = &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?;
    }
    else {
      uint64_t v68 = &demangling cache variable for type metadata for (ParticipantGridView.FullScreenFocusedParticipantInfo?, ParticipantGridView.FullScreenFocusedParticipantInfo?);
    }
    if (EnumTagSinglePayload == 1) {
      int v69 = -1;
    }
    else {
      int v69 = 0;
    }
    BOOL v289 = v69;
    uint64_t v70 = (unint64_t *)v312;
  }
  else
  {
    outlined init with copy of Participant?((uint64_t)v64, (uint64_t)v60, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    if (__swift_getEnumTagSinglePayload(v66, 1, (uint64_t)v55) == 1)
    {
      BOOL v289 = 0;
      uint64_t v68 = &demangling cache variable for type metadata for (ParticipantGridView.FullScreenFocusedParticipantInfo?, ParticipantGridView.FullScreenFocusedParticipantInfo?);
      uint64_t v70 = (unint64_t *)v312;
    }
    else
    {
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v66, (uint64_t)v57, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
      if (static UUID.== infix(_:_:)())
      {
        outlined init with take of AspectRatio((uint64_t)&v60[v55[5]], (uint64_t)v355);
        outlined init with take of AspectRatio((uint64_t)&v57[v55[5]], (uint64_t)v356);
        BOOL v71 = static AspectRatio.== infix(_:_:)((uint64_t)v355, (uint64_t)v356);
        uint64_t v70 = (unint64_t *)v312;
        BOOL v289 = v71 && *(void *)&v60[v55[6]] == *(void *)&v57[v55[6]] && v60[v55[7]] == v57[v55[7]];
      }
      else
      {
        BOOL v289 = 0;
        uint64_t v70 = (unint64_t *)v312;
      }
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v57, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
      uint64_t v68 = &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?;
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v60, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v64, v68);
  LODWORD(v338) = ParticipantGridView.isOneToOneMode.getter();
  uint64_t v72 = MEMORY[0x1E4FBC860];
  v346[0] = MEMORY[0x1E4FBC860];
  unint64_t v73 = *(void *)(v307 + 16);
  uint64_t v74 = swift_bridgeObjectRetain();
  unint64_t v325 = v73;
  if (v73)
  {
    unint64_t v75 = v73;
    unint64_t v76 = (*(unsigned __int8 *)(v304 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v304 + 80);
    uint64_t v77 = *(void *)(v304 + 72);
    uint64_t v78 = v74 + v76;
    do
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v78, (uint64_t)v54, (void (*)(void))type metadata accessor for Participant);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v54, (uint64_t)v44, (void (*)(void))type metadata accessor for Participant.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          goto LABEL_28;
        case 4u:
          uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v84 = (uint64_t)&v44[*(int *)(v83 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v44[*(int *)(v83 + 64)], *(void *)&v44[*(int *)(v83 + 64) + 8]);
          outlined destroy of Participant.MediaInfo(v84);
LABEL_28:
          uint64_t v85 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v85 - 8) + 8))(v44, v85);
          goto LABEL_29;
        case 6u:
LABEL_29:
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v54, (void (*)(void))type metadata accessor for Participant);
          break;
        default:
          uint64_t v79 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v79 - 8) + 8))(v44, v79);
          outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v54, v343, (void (*)(void))type metadata accessor for Participant);
          uint64_t v80 = v346[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v80 + 16) + 1, 1);
            uint64_t v80 = v346[0];
          }
          unint64_t v82 = *(void *)(v80 + 16);
          unint64_t v81 = *(void *)(v80 + 24);
          if (v82 >= v81 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
            uint64_t v80 = v346[0];
          }
          *(void *)(v80 + 16) = v82 + 1;
          outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v343, v80 + v76 + v82 * v77, (void (*)(void))type metadata accessor for Participant);
          uint64_t v70 = (unint64_t *)v312;
          break;
      }
      v78 += v77;
      --v75;
    }
    while (v75);
    uint64_t v72 = v346[0];
    unint64_t v73 = v325;
  }
  uint64_t v86 = v307;
  swift_bridgeObjectRelease();
  uint64_t v313 = *(void *)(v72 + 16);
  swift_release();
  uint64_t v87 = v321;
  if (v73)
  {
    v346[0] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73, 0);
    uint64_t v88 = v304;
    uint64_t v89 = v86 + ((*(unsigned __int8 *)(v304 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v304 + 80));
    uint64_t v90 = type metadata accessor for UUID();
    uint64_t v91 = v90;
    uint64_t v92 = *(void *)(v90 - 8);
    uint64_t v342 = *(void *)(v92 + 64);
    uint64_t v343 = v90;
    uint64_t v341 = *(void *)(v88 + 72);
    uint64_t v339 = v92 + 32;
    do
    {
      MEMORY[0x1F4188790](v90);
      uint64_t v94 = (char *)&v286 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v95 = v344;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v89, v344, (void (*)(void))type metadata accessor for Participant);
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v94, v95 + *(int *)(v335 + 20), v91);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v95, (void (*)(void))type metadata accessor for Participant);
      uint64_t v96 = v346[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v96 + 16) + 1, 1);
        uint64_t v96 = v346[0];
      }
      unint64_t v98 = *(void *)(v96 + 16);
      unint64_t v97 = *(void *)(v96 + 24);
      if (v98 >= v97 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
        uint64_t v96 = v346[0];
      }
      uint64_t v320 = v96;
      *(void *)(v96 + 16) = v98 + 1;
      uint64_t v91 = v343;
      uint64_t v90 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v92 + 32))(v96+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v98, v94, v343);
      uint64_t v87 = v321;
      v346[0] = v320;
      v89 += v341;
      --v73;
    }
    while (v73);
    uint64_t v70 = (unint64_t *)v312;
    unint64_t v73 = v325;
  }
  else
  {
    uint64_t v320 = MEMORY[0x1E4FBC860];
  }
  BOOL v317 = v313 != 0;
  uint64_t v322 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles;
  uint64_t v288 = v301 + 8;
  swift_bridgeObjectRetain();
  unint64_t v99 = 0;
  uint64_t v100 = MEMORY[0x1E4FBC860];
  long long v294 = xmmword_1C3769620;
  int v291 = v338 & 1;
  uint64_t v101 = (uint64_t)v314;
  uint64_t v102 = v309;
  uint64_t v103 = (uint64_t)v310;
  while (1)
  {
    if (v99 == v73)
    {
      uint64_t v104 = 1;
      unint64_t v318 = v73;
    }
    else
    {
      if (v99 >= v73) {
        goto LABEL_148;
      }
      uint64_t v105 = v103;
      uint64_t v106 = v87;
      unint64_t v107 = v99;
      unint64_t v108 = v99 + 1;
      uint64_t v109 = (uint64_t)&v297[*(int *)(v102 + 48)];
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v307+ ((*(unsigned __int8 *)(v304 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v304 + 80))+ *(void *)(v304 + 72) * v99, v109, (void (*)(void))type metadata accessor for Participant);
      uint64_t v110 = (uint64_t)v70 + *(int *)(v102 + 48);
      *uint64_t v70 = v107;
      uint64_t v87 = v106;
      uint64_t v103 = v105;
      uint64_t v111 = v109;
      unint64_t v73 = v325;
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v111, v110, (void (*)(void))type metadata accessor for Participant);
      uint64_t v104 = 0;
      unint64_t v318 = v108;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v70, v104, 1, v102);
    id v112 = v308;
    outlined init with take of AspectRatio?((uint64_t)v70, (uint64_t)v308, &demangling cache variable for type metadata for (offset: Int, element: Participant)?);
    int v113 = __swift_getEnumTagSinglePayload((uint64_t)v112, 1, v102);
    uint64_t v327 = v100;
    if (v113 == 1) {
      break;
    }
    uint64_t v114 = *v112;
    uint64_t v115 = v330;
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v112 + *(int *)(v102 + 48), v330, (void (*)(void))type metadata accessor for Participant);
    ParticipantGridView.updateCacheIfNeeded(for:)(v115);
    int v329 = ParticipantGridView.showsMostActiveTreatment(for:totalParticipantCount:)(v115, v73);
    uint64_t v116 = v115 + *(int *)(v335 + 20);
    uint64_t v117 = type metadata accessor for UUID();
    MEMORY[0x1F4188790](v117);
    uint64_t v341 = v118;
    id v119 = (char *)&v286 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v326 = v120;
    uint64_t v121 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    uint64_t v339 = v116;
    *(void *)&long long v344 = v122;
    v331 = v121;
    uint64_t v332 = v120 + 16;
    ((void (*)(char *, uint64_t))v121)(v119, v116);
    *(_OWORD *)&v349[40] = 0u;
    long long v350 = 0u;
    char v351 = 1;
    ParticipantGridView.aspectRatio(for:default:)();
    uint64_t v123 = v115;
    uint64_t v124 = v306;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v123, v306, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() != 4)
    {
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v124, (void (*)(void))type metadata accessor for Participant.State);
LABEL_52:
      uint64_t v128 = 0;
      goto LABEL_53;
    }
    uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
    Class v126 = (const void *)(v124 + *(int *)(v125 + 48));
    outlined consume of Participant.CopresenceInfo?(*(void *)(v124 + *(int *)(v125 + 64)), *(void *)(v124 + *(int *)(v125 + 64) + 8));
    memcpy(v346, v126, 0x150uLL);
    uint64_t v127 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8))(v124, v127);
    uint64_t v128 = v346[2];
    char v129 = v346[3];
    swift_bridgeObjectRetain();
    outlined destroy of Participant.MediaInfo((uint64_t)v346);
    if (v128)
    {
      swift_bridgeObjectRelease();
      if (v129)
      {
        ParticipantGridView.orientation(for:default:)();
        uint64_t v128 = v130;
        char v131 = 0;
        goto LABEL_54;
      }
      goto LABEL_52;
    }
LABEL_53:
    char v131 = 1;
LABEL_54:
    id v132 = (int *)v323;
    uint64_t v133 = v103 + *(int *)(v323 + 24);
    id v134 = v119;
    uint64_t v342 = *(void *)(v326 + 32);
    uint64_t v343 = v326 + 32;
    uint64_t v135 = v326;
    ((void (*)(uint64_t, char *, void))v342)(v103, v134, v344);
    *(void *)uint64_t v133 = v128;
    *(unsigned char *)(v133 + 8) = v131;
    uint64_t v136 = v103 + v132[5];
    outlined init with take of AspectRatio((uint64_t)&v347, v136);
    unint64_t v137 = v132[7];
    int v316 = v329 & 1;
    *(unsigned char *)(v103 + v137) = v329 & 1;
    uint64_t v138 = v132[8];
    *(unsigned char *)(v103 + v138) = v317;
    uint64_t v139 = *(void *)(v333 + v322);
    uint64_t v140 = *(uint64_t **)(v139 + 16);
    v338 = v140;
    uint64_t v315 = v114;
    if (!v140)
    {
      uint64_t v152 = v333;
LABEL_60:
      if (v114 < (uint64_t)v140)
      {
        if (v114 < 0) {
          goto LABEL_149;
        }
        unint64_t v300 = (*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80);
        uint64_t v299 = *(void *)(v328 + 72) * v114;
        uint64_t v153 = v290;
        uint64_t v154 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v139 + v300 + v299, v290, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        v303 = &v286;
        MEMORY[0x1F4188790](v154);
        char v156 = (uint64_t *)((char *)&v286 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v157 = v345;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v153, v345, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
        v338 = v156;
        uint64_t v158 = v344;
        ((void (*)(uint64_t *, uint64_t, void))v342)(v156, v157, v344);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v153, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        v302 = &v286;
        MEMORY[0x1F4188790](v159 - 8);
        id v161 = (char *)&v286 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v162 = *(void *)(v320 + 16);
        if (v162)
        {
          uint64_t v163 = v320 + ((*(unsigned __int8 *)(v326 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v326 + 80));
          uint64_t v337 = *(void *)(v326 + 72);
          id v164 = (void (**)(char *, uint64_t))(v326 + 8);
          swift_bridgeObjectRetain();
          while (1)
          {
            v331(v161, v163, v158);
            __swift_storeEnumTagSinglePayload((uint64_t)v161, 0, 1, v158);
            uint64_t v165 = __swift_getEnumTagSinglePayload((uint64_t)v161, 1, v158);
            if (v165 == 1) {
              goto LABEL_88;
            }
            MEMORY[0x1F4188790](v165);
            id v167 = (char *)&v286 - ((v166 + 15) & 0xFFFFFFFFFFFFFFF0);
            ((void (*)(char *, char *, uint64_t))v342)(v167, v161, v158);
            _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
            char v168 = dispatch thunk of static Equatable.== infix(_:_:)();
            v169 = *v164;
            (*v164)(v167, v158);
            if (v168) {
              break;
            }
            v163 += v337;
            --v162;
            uint64_t v158 = v344;
            if (!v162) {
              goto LABEL_87;
            }
          }
          swift_bridgeObjectRelease();
          v169((char *)v338, v344);
          uint64_t v152 = v333;
          uint64_t v87 = v321;
          uint64_t v140 = *(uint64_t **)(*(void *)(v333 + v322) + 16);
          uint64_t v114 = v315;
          goto LABEL_97;
        }
        swift_bridgeObjectRetain();
LABEL_87:
        __swift_storeEnumTagSinglePayload((uint64_t)v161, 1, 1, v158);
LABEL_88:
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t *, uint64_t))(v326 + 8))(v338, v158);
        uint64_t v205 = *(void *)(v333 + v322);
        if (v315 >= *(void *)(v205 + 16)) {
          goto LABEL_151;
        }
        BOOL v206 = v313 != 0;
        uint64_t v207 = v298;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v205 + v300 + v299, v298, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v87 = v321;
        uint64_t v208 = v207 + *(int *)(v321 + 20);
        uint64_t v209 = v311;
        uint64_t v210 = v330;
        ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(*(void **)v208, *(void *)(v208 + 8), v330, v329 & 1, v206, 0, v311);
        uint64_t updated = outlined destroy of SystemUpdateNotice?(v209, &demangling cache variable for type metadata for ParticipantViewModel?);
        MEMORY[0x1F4188790](updated);
        uint64_t v213 = (char *)&v286 - ((v212 + 15) & 0xFFFFFFFFFFFFFFF0);
        v331(v213, v339, v158);
        outlined init with take of AspectRatio(v207 + *(int *)(v323 + 20), (uint64_t)&v352);
        ParticipantGridView.aspectRatio(for:default:)();
        uint64_t v214 = v286;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v210, v286, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v216 = (const void *)(v214 + *(int *)(v215 + 48));
          outlined consume of Participant.CopresenceInfo?(*(void *)(v214 + *(int *)(v215 + 64)), *(void *)(v214 + *(int *)(v215 + 64) + 8));
          memcpy(v346, v216, 0x150uLL);
          uint64_t v217 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v217 - 8) + 8))(v214, v217);
          uint64_t v218 = v346[2];
          char v219 = v346[3];
          swift_bridgeObjectRetain();
          outlined destroy of Participant.MediaInfo((uint64_t)v346);
          if (v218)
          {
            swift_bridgeObjectRelease();
            if (v219)
            {
              ParticipantGridView.orientation(for:default:)();
              uint64_t v221 = v220;
              char v222 = 0;
              goto LABEL_95;
            }
          }
        }
        else
        {
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v214, (void (*)(void))type metadata accessor for Participant.State);
        }
        uint64_t v221 = 0;
        char v222 = 1;
LABEL_95:
        double v223 = (int *)v323;
        uint64_t v224 = (uint64_t)v287;
        uint64_t v225 = &v287[*(int *)(v323 + 24)];
        ((void (*)(char *, char *, void))v342)(v287, v213, v344);
        *(void *)uint64_t v225 = v221;
        v225[8] = v222;
        outlined init with take of AspectRatio((uint64_t)&v348, v224 + v223[5]);
        *(unsigned char *)(v224 + v223[7]) = v316;
        *(unsigned char *)(v224 + v223[8]) = v317;
        long long v344 = *(_OWORD *)v208;
        uint64_t v178 = v305;
        outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v224, v305, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
        id v226 = (void *)v344;
        *(_OWORD *)(v178 + *(int *)(v87 + 20)) = v344;
        id v227 = v226;
        id v228 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile;
        uint64_t v229 = v298;
LABEL_114:
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v229, (void (*)(void))v228);
        uint64_t v101 = (uint64_t)v314;
        uint64_t v102 = v309;
        uint64_t v103 = (uint64_t)v310;
        uint64_t v100 = v327;
        goto LABEL_115;
      }
LABEL_97:
      if (v114 >= (uint64_t)v140)
      {
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v236 = swift_allocObject();
        *(_OWORD *)(v236 + 16) = v294;
        v346[0] = v114;
        uint64_t v237 = String.init<A>(reflecting:)();
        uint64_t v239 = v238;
        *(void *)(v236 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v236 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v236 + 32) = v237;
        *(void *)(v236 + 40) = v239;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        if (one-time initialization token for fallbackParticipantViewFrame != -1) {
          swift_once();
        }
      }
      else
      {
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v230 = swift_allocObject();
        *(_OWORD *)(v230 + 16) = v294;
        v346[0] = v114;
        unint64_t v231 = v114;
        uint64_t v232 = String.init<A>(reflecting:)();
        uint64_t v234 = v233;
        *(void *)(v230 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v230 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v230 + 32) = v232;
        *(void *)(v230 + 40) = v234;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        if ((v231 & 0x8000000000000000) != 0) {
          goto LABEL_152;
        }
        uint64_t v235 = *(void *)(v152 + v322);
        if (v231 >= *(void *)(v235 + 16)) {
          goto LABEL_153;
        }
        objc_msgSend(*(id *)(v235+ ((*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80))+ *(void *)(v328 + 72) * v231+ *(int *)(v87 + 20)), sel_frame);
      }
      uint64_t v240 = (uint64_t)v292;
      CGRect v241 = ParticipantGridView.createParticipantView(frame:isOneToOneMode:)(v291);
      v338 = &v286;
      MEMORY[0x1F4188790](v241);
      CGRect v243 = (char *)&v286 - ((v242 + 15) & 0xFFFFFFFFFFFFFFF0);
      v331(v243, v339, v344);
      CGRect v244 = v241;
      uint64_t v245 = v330;
      ParticipantGridView.aspectRatio(for:default:)();
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v245, v240, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        CGRect v247 = (const void *)(v240 + *(int *)(v246 + 48));
        outlined consume of Participant.CopresenceInfo?(*(void *)(v240 + *(int *)(v246 + 64)), *(void *)(v240 + *(int *)(v246 + 64) + 8));
        memcpy(v346, v247, 0x150uLL);
        uint64_t v248 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v248 - 8) + 8))(v240, v248);
        uint64_t v249 = v346[2];
        char v250 = v346[3];
        swift_bridgeObjectRetain();
        outlined destroy of Participant.MediaInfo((uint64_t)v346);
        if (v249)
        {
          swift_bridgeObjectRelease();
          if (v250)
          {
            ParticipantGridView.orientation(for:default:)();
            uint64_t v252 = v251;
            char v253 = 0;
LABEL_113:
            BOOL v254 = v313 != 0;
            v255 = (int *)v323;
            uint64_t v256 = (uint64_t)v293;
            v257 = &v293[*(int *)(v323 + 24)];
            ((void (*)(char *, char *, void))v342)(v293, v243, v344);
            *(void *)v257 = v252;
            v257[8] = v253;
            outlined init with take of AspectRatio((uint64_t)v349, v256 + v255[5]);
            *(unsigned char *)(v256 + v255[7]) = v316;
            *(unsigned char *)(v256 + v255[8]) = v317;
            uint64_t v178 = v305;
            outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v256, v305, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
            v258 = (char **)(v178 + *(int *)(v87 + 20));
            *v258 = v244;
            v258[1] = (char *)&protocol witness table for ParticipantView;
            v259 = v244;
            uint64_t v260 = v311;
            ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(v259, (uint64_t)&protocol witness table for ParticipantView, v330, v329 & 1, v254, 0, v311);

            outlined destroy of SystemUpdateNotice?(v260, &demangling cache variable for type metadata for ParticipantViewModel?);
            id v228 = type metadata accessor for ParticipantGridView.ParticipantTileInfo;
            uint64_t v229 = v256;
            goto LABEL_114;
          }
        }
      }
      else
      {
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v240, (void (*)(void))type metadata accessor for Participant.State);
      }
      uint64_t v252 = 0;
      char v253 = 1;
      goto LABEL_113;
    }
    v302 = (uint64_t *)v133;
    v303 = (uint64_t *)v136;
    uint64_t v299 = v138;
    unint64_t v300 = v137;
    unint64_t v141 = (*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80);
    uint64_t v337 = *(void *)(v328 + 72);
    uint64_t v142 = (void (**)(char *, uint64_t))(v135 + 8);
    uint64_t v143 = swift_bridgeObjectRetain();
    v144 = 0;
    while (1)
    {
      uint64_t v145 = v143;
      uint64_t v146 = v336;
      uint64_t v147 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v143 + v141, v336, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      MEMORY[0x1F4188790](v147);
      id v149 = (char *)&v286 - ((v148 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v150 = v345;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v146, v345, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      uint64_t v151 = v344;
      ((void (*)(char *, uint64_t, void))v342)(v149, v150, v344);
      LOBYTE(v150) = static UUID.== infix(_:_:)();
      (*v142)(v149, v151);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v146, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      if (v150) {
        break;
      }
      v144 = (uint64_t *)((char *)v144 + 1);
      v141 += v337;
      uint64_t v143 = v145;
      if (v338 == v144)
      {
        swift_bridgeObjectRelease();
        uint64_t v152 = v333;
        uint64_t v87 = v321;
        uint64_t v139 = *(void *)(v333 + v322);
        uint64_t v140 = *(uint64_t **)(v139 + 16);
        uint64_t v114 = v315;
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v170 = *(void *)(v333 + v322);
    if ((unint64_t)v144 >= *(void *)(v170 + 16)) {
      goto LABEL_150;
    }
    uint64_t v171 = v301;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v170 + v141, v301, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    uint64_t v103 = (uint64_t)v310;
    if ((static UUID.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v172 = (int *)v323;
      int v174 = *(_DWORD *)(v323 + 24);
LABEL_75:
      uint64_t v87 = v321;
      uint64_t v177 = v295;
      uint64_t v179 = v296;
      uint64_t v178 = v305;
LABEL_76:
      uint64_t v180 = v171 + *(int *)(v87 + 20);
      uint64_t v182 = *(void **)v180;
      uint64_t v181 = *(void *)(v180 + 8);
      uint64_t v183 = v171;
      char v184 = *(unsigned char *)(v288 + v174);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v183, v177, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v103, v179, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      if (v184)
      {
        id v185 = v182;
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v179, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v177, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        int v186 = 0;
      }
      else
      {
        uint64_t v187 = v177 + v172[6];
        uint64_t v188 = *(void *)v187;
        v189 = v172;
        char v190 = *(unsigned char *)(v187 + 8);
        id v191 = v182;
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v295, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v192 = v179 + v189[6];
        uint64_t v193 = *(void *)v192;
        int v194 = *(unsigned __int8 *)(v192 + 8);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v296, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
        int v195 = (v188 == v193) & ~v194;
        if (v190) {
          int v195 = v194;
        }
        int v186 = v195 ^ 1;
      }
      uint64_t v196 = v311;
      ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(v182, v181, v330, v329 & 1, v313 != 0, v186, v311);
      outlined destroy of SystemUpdateNotice?(v196, &demangling cache variable for type metadata for ParticipantViewModel?);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v103, v178, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      id v197 = (void *)(v178 + *(int *)(v87 + 20));
      *id v197 = v182;
      v197[1] = v181;
      uint64_t v171 = v301;
      goto LABEL_82;
    }
    uint64_t v172 = (int *)v323;
    outlined init with take of AspectRatio(v171 + *(int *)(v323 + 20), (uint64_t)v353);
    outlined init with take of AspectRatio((uint64_t)v303, (uint64_t)v354);
    BOOL v173 = static AspectRatio.== infix(_:_:)((uint64_t)v353, (uint64_t)v354);
    int v174 = v172[6];
    if (!v173) {
      goto LABEL_75;
    }
    uint64_t v175 = v171 + v174;
    char v176 = *((unsigned char *)v302 + 8);
    uint64_t v87 = v321;
    uint64_t v177 = v295;
    uint64_t v178 = v305;
    if (*(unsigned char *)(v175 + 8))
    {
      uint64_t v179 = v296;
      if (!*((unsigned char *)v302 + 8)) {
        goto LABEL_76;
      }
    }
    else
    {
      if (*(void *)v175 != *v302) {
        char v176 = 1;
      }
      uint64_t v179 = v296;
      if (v176) {
        goto LABEL_76;
      }
    }
    if (*(unsigned __int8 *)(v171 + v172[7]) != *(unsigned __int8 *)(v103 + v300)
      || *(unsigned __int8 *)(v171 + v172[8]) != *(unsigned __int8 *)(v103 + v299))
    {
      goto LABEL_76;
    }
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v171, v305, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
LABEL_82:
    uint64_t v100 = v327;
    if (v289)
    {
      uint64_t v198 = v171;
    }
    else
    {
      uint64_t v199 = v171;
      BOOL v200 = v313 != 0;
      uint64_t v201 = v199 + *(int *)(v87 + 20);
      uint64_t v202 = *(void *)(v201 + 8);
      id v203 = *(id *)v201;
      uint64_t v204 = v311;
      ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(v203, v202, v330, v329 & 1, v200, 0, v311);

      outlined destroy of SystemUpdateNotice?(v204, &demangling cache variable for type metadata for ParticipantViewModel?);
      uint64_t v198 = v199;
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v198, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    uint64_t v101 = (uint64_t)v314;
    uint64_t v102 = v309;
LABEL_115:
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v178, v319, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v100 + 16) + 1, 1, v100);
    }
    unint64_t v262 = *(void *)(v100 + 16);
    unint64_t v261 = *(void *)(v100 + 24);
    if (v262 >= v261 >> 1) {
      uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v261 > 1, v262 + 1, 1, v100);
    }
    *(void *)(v100 + 16) = v262 + 1;
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v319, v100+ ((*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80))+ *(void *)(v328 + 72) * v262, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v103, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v178, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v330, (void (*)(void))type metadata accessor for Participant);
    uint64_t v70 = (unint64_t *)v312;
    unint64_t v73 = v325;
    unint64_t v99 = v318;
  }
  swift_bridgeObjectRelease();
  uint64_t v263 = v307;
  swift_bridgeObjectRelease();
  uint64_t v264 = *(void *)(v333 + v322);
  uint64_t v341 = *(void *)(v264 + 16);
  if (v341)
  {
    unint64_t v265 = (*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80);
    uint64_t v337 = v100 + v265;
    v338 = (uint64_t *)(v264 + v265);
    uint64_t v266 = swift_bridgeObjectRetain();
    unint64_t v267 = 0;
    uint64_t v339 = v266;
    while (1)
    {
      if (v267 >= *(void *)(v266 + 16))
      {
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
        JUMPOUT(0x1C31E9418);
      }
      uint64_t v342 = *(void *)(v328 + 72);
      uint64_t v343 = v267;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v338 + v342 * v267, v340, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      if (v73)
      {
        uint64_t v268 = v304;
        uint64_t v269 = v263 + ((*(unsigned __int8 *)(v304 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v304 + 80));
        swift_bridgeObjectRetain();
        *(void *)&long long v344 = *(void *)(v268 + 72);
        unint64_t v270 = v73;
        while (1)
        {
          uint64_t v271 = v334;
          outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v269, v334, (void (*)(void))type metadata accessor for Participant);
          uint64_t v272 = type metadata accessor for UUID();
          uint64_t v273 = *(void *)(v272 - 8);
          MEMORY[0x1F4188790](v272);
          v275 = (char *)&v286 - ((v274 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v276 = v345;
          outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v340, v345, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
          (*(void (**)(char *, uint64_t, uint64_t))(v273 + 32))(v275, v276, v272);
          char v277 = static UUID.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v273 + 8))(v275, v272);
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v271, (void (*)(void))type metadata accessor for Participant);
          if (v277) {
            break;
          }
          v269 += v344;
          if (!--v270)
          {
            uint64_t v263 = v307;
            swift_bridgeObjectRelease();
            uint64_t v87 = v321;
            uint64_t v101 = (uint64_t)v314;
            unint64_t v73 = v325;
            uint64_t v100 = v327;
            goto LABEL_134;
          }
        }
        uint64_t v263 = v307;
        swift_bridgeObjectRelease();
        uint64_t v87 = v321;
        uint64_t v101 = (uint64_t)v314;
        unint64_t v73 = v325;
        uint64_t v100 = v327;
        goto LABEL_144;
      }
LABEL_134:
      uint64_t v278 = v100;
      uint64_t v279 = *(void *)(v100 + 16);
      if (v279) {
        break;
      }
LABEL_139:
      v283 = *(void **)(v340 + *(int *)(v87 + 20));
      objc_msgSend(v283, sel_removeFromSuperview);
      type metadata accessor for ParticipantView();
      uint64_t v100 = v278;
      if (swift_dynamicCastClass())
      {
        id v284 = v283;
        ParticipantView.reset()();

LABEL_143:
        unint64_t v73 = v325;
      }
LABEL_144:
      unint64_t v267 = v343 + 1;
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v340, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v266 = v339;
      if (v267 == v341)
      {
        swift_bridgeObjectRelease();
        return v100;
      }
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_bridgeObjectRetain();
    uint64_t v280 = v337;
    uint64_t v281 = v342;
    while (1)
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v280, v101, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      char v282 = static NSObject.== infix(_:_:)();
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v101, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      if (v282) {
        break;
      }
      v280 += v281;
      if (!--v279)
      {
        uint64_t v278 = v327;
        swift_bridgeObjectRelease();
        unint64_t v73 = v325;
        goto LABEL_139;
      }
    }
    uint64_t v100 = v327;
    swift_bridgeObjectRelease();
    goto LABEL_143;
  }
  return v100;
}

uint64_t ParticipantGridView.shouldSkipTransition(for:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v20 - v10;
  if (!objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags), sel_uPlusOneFullBleedHandoffEnabled))goto LABEL_4; {
  outlined init with copy of Participant?(a1, (uint64_t)v5, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  }
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) != 1)
  {
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v5, (uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    if (ParticipantGridView.isOneToOneMode.getter())
    {
      char v13 = ParticipantGridView.hasConnectedToCall.getter();
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v11, (uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
      if (v13)
      {
        if ((*(void *)&v9[*(int *)(v6 + 24)] | 2) == 3)
        {
          uint64_t v14 = &v9[*(int *)(v6 + 20)];
          double v15 = 1.0;
          double v16 = 1.0;
          if (v14[32]) {
            goto LABEL_18;
          }
          uint64_t v17 = (double *)(v14 + 8);
        }
        else
        {
          uint64_t v19 = &v9[*(int *)(v6 + 20)];
          double v15 = 1.0;
          double v16 = 1.0;
          if (v19[32]) {
            goto LABEL_18;
          }
          uint64_t v17 = (double *)(v19 + 24);
          uint64_t v14 = v19 + 16;
        }
        double v16 = *v17;
        double v15 = *(double *)v14;
LABEL_18:
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
        if (v15 == v16)
        {
          char Frame = ParticipantGridView.shouldShowLastFrameUI.getter();
          goto LABEL_13;
        }
LABEL_12:
        char Frame = 0;
LABEL_13:
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
        return Frame & 1;
      }
    }
    else
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v11, (uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    goto LABEL_12;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
LABEL_4:
  char Frame = 0;
  return Frame & 1;
}

uint64_t ParticipantGridView.hasConnectedToCall.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v1))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t ParticipantGridView.shouldShowLastFrameUI.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v1))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

void ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  LODWORD(v189) = v4;
  int v172 = v5;
  uint64_t v7 = v6;
  uint64_t v184 = v8;
  uint64_t v182 = (void *)v9;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v183 = v14;
  uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ParticipantGridView.IdentifiableParticipantTile));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_3();
  uint64_t v187 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ParticipantGridView.IdentifiableParticipantTile)?);
  uint64_t v18 = OUTLINED_FUNCTION_8(v17);
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_10_5();
  id v185 = v19;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v167 - v21;
  uint64_t v192 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v169 = v23;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_2_3();
  unint64_t v191 = v25;
  uint64_t v26 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v27 = OUTLINED_FUNCTION_8(v26);
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_2_3();
  unint64_t v190 = v28;
  uint64_t v194 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  OUTLINED_FUNCTION_4();
  uint64_t v188 = v29;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_61();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v32 = OUTLINED_FUNCTION_8(v31);
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_10_5();
  uint64_t v177 = v33;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_8_4();
  uint64_t v171 = v35;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_8_4();
  uint64_t v170 = v37;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v38);
  OUTLINED_FUNCTION_8_4();
  uint64_t v175 = v39;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_8_4();
  uint64_t v193 = v41;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_8_4();
  uint64_t v176 = v43;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)v167 - v45;
  int v178 = *v7;
  uint64_t v47 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v49 = v48;
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_5_1();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v1 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_59_5();
  OUTLINED_FUNCTION_19();
  v51();
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v49 + 8))(v1, v47);
  if ((v7 & 1) == 0)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_once();
    goto LABEL_7;
  }
  int v195 = (unint64_t *)v22;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v181 = v167;
  uint64_t v53 = OUTLINED_FUNCTION_8(v52);
  uint64_t v55 = *(void *)(v54 + 64);
  MEMORY[0x1F4188790](v53);
  unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v173 = v13;
  uint64_t v57 = outlined init with copy of Participant?(v13, (uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v180 = v167;
  MEMORY[0x1F4188790](v57);
  uint64_t v174 = v11;
  uint64_t v58 = outlined init with copy of Participant?(v11, (uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v179 = v167;
  MEMORY[0x1F4188790](v58);
  outlined init with copy of Participant?((uint64_t)v182, (uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v13 = v184;
  outlined init with copy of Participant?(v184, (uint64_t)v46, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  if (v189)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v46, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    outlined destroy of SystemUpdateNotice?((uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    LOBYTE(v196) = v178;
    char v59 = ParticipantGridView.updateRequiredToTransition(to:layoutStyle:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:)(v183, (char *)&v196, (uint64_t)v167 - v56, (uint64_t)v167 - v56, (uint64_t)v167 - v56, (uint64_t)v46);
    outlined destroy of SystemUpdateNotice?((uint64_t)v46, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v60 = OUTLINED_FUNCTION_43();
    outlined destroy of SystemUpdateNotice?(v60, v61);
    outlined destroy of SystemUpdateNotice?((uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)v167 - v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((v59 & 1) == 0) {
      goto LABEL_56;
    }
  }
  if (ParticipantGridView.shouldSkipTransition(for:)(v13)) {
    goto LABEL_56;
  }
  if (one-time initialization token for conversationKit != -1) {
    goto LABEL_61;
  }
LABEL_7:
  v167[1] = static OS_os_log.conversationKit;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1C376A6F0;
  uint64_t v168 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles;
  uint64_t v63 = *(void *)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles];
  uint64_t v64 = *(void *)(v63 + 16);
  uint64_t v65 = MEMORY[0x1E4FBC860];
  v189 = v3;
  uint64_t v182 = (void *)v62;
  if (v64)
  {
    uint64_t v196 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_12_19();
    v167[0] = v63;
    uint64_t v67 = v63 + v66;
    uint64_t v69 = *(void *)(v68 + 72);
    do
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v67, v2, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v70 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v72 = v71;
      MEMORY[0x1F4188790](v73);
      OUTLINED_FUNCTION_21();
      uint64_t v76 = v75 - v74;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v2, v190, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      OUTLINED_FUNCTION_63_0();
      v78(v77);
      _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
      uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = v80;
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v76, v70);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v2, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v65 = v196;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_47_8();
        uint64_t v65 = v196;
      }
      unint64_t v82 = *(void *)(v65 + 16);
      uint64_t v3 = v189;
      if (v82 >= *(void *)(v65 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v65 = v196;
      }
      *(void *)(v65 + 16) = v82 + 1;
      uint64_t v83 = v65 + 16 * v82;
      *(void *)(v83 + 32) = v79;
      *(void *)(v83 + 40) = v81;
      v67 += v69;
      --v64;
    }
    while (v64);
    swift_bridgeObjectRelease();
    uint64_t v13 = v184;
    uint64_t v84 = v182;
  }
  else
  {
    uint64_t v84 = (void *)v62;
  }
  uint64_t v196 = v65;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v86 = String.init<A>(reflecting:)();
  uint64_t v88 = v87;
  uint64_t v89 = MEMORY[0x1E4FBB1A0];
  v84[7] = MEMORY[0x1E4FBB1A0];
  unint64_t v90 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v91 = v90;
  v84[8] = v90;
  v84[4] = v86;
  uint64_t v84[5] = v88;
  uint64_t v92 = v183;
  uint64_t v93 = *(void *)(v183 + 16);
  uint64_t v94 = MEMORY[0x1E4FBC860];
  uint64_t v95 = v193;
  if (v93)
  {
    v167[0] = v85;
    unint64_t v190 = v90;
    uint64_t v196 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_12_19();
    uint64_t v97 = v92 + v96;
    uint64_t v99 = *(void *)(v98 + 72);
    do
    {
      uint64_t v100 = v191;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v97, v191, (void (*)(void))type metadata accessor for Participant);
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
      uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v103 = v102;
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v100, (void (*)(void))type metadata accessor for Participant);
      uint64_t v94 = v196;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_47_8();
        uint64_t v94 = v196;
      }
      unint64_t v104 = *(void *)(v94 + 16);
      if (v104 >= *(void *)(v94 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v94 = v196;
      }
      *(void *)(v94 + 16) = v104 + 1;
      uint64_t v105 = v94 + 16 * v104;
      *(void *)(v105 + 32) = v101;
      *(void *)(v105 + 40) = v103;
      v97 += v99;
      --v93;
      uint64_t v95 = v193;
    }
    while (v93);
    uint64_t v13 = v184;
    uint64_t v84 = v182;
    uint64_t v89 = MEMORY[0x1E4FBB1A0];
    uint64_t v91 = v190;
  }
  uint64_t v196 = v94;
  uint64_t v106 = String.init<A>(reflecting:)();
  v84[12] = v89;
  v84[13] = v91;
  v84[9] = v106;
  v84[10] = v107;
  uint64_t v108 = v173;
  uint64_t v109 = specialized >> prefix<A>(_:)(v173);
  v84[17] = v89;
  v84[18] = v91;
  v84[14] = v109;
  v84[15] = v110;
  uint64_t v111 = specialized >> prefix<A>(_:)();
  v84[22] = v89;
  v84[23] = v91;
  v84[19] = v111;
  v84[20] = v112;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v113 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo];
  OUTLINED_FUNCTION_2();
  uint64_t v114 = v176;
  outlined init with copy of Participant?(v113, v176, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v115 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v114, 1, v115);
  outlined destroy of SystemUpdateNotice?(v114, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  outlined init with copy of Participant?(v13, v95, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v117 = v195;
  if (EnumTagSinglePayload == 1)
  {
    LODWORD(v193) = 1;
    int v118 = __swift_getEnumTagSinglePayload(v95, 1, v115);
    outlined destroy of SystemUpdateNotice?(v95, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v119 = OUTLINED_FUNCTION_63_3();
    outlined init with copy of Participant?(v119, v120, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v122 = v185;
    uint64_t v121 = v186;
    if (v118 != 1) {
      goto LABEL_34;
    }
  }
  else
  {
    outlined destroy of SystemUpdateNotice?(v95, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v123 = OUTLINED_FUNCTION_63_3();
    outlined init with copy of Participant?(v123, v124, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v122 = v185;
    uint64_t v121 = v186;
  }
  uint64_t v125 = v170;
  outlined init with copy of Participant?(v113, v170, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  int v126 = __swift_getEnumTagSinglePayload(v125, 1, v115);
  outlined destroy of SystemUpdateNotice?(v125, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v127 = v13;
  uint64_t v13 = v171;
  outlined init with take of AspectRatio?(v127, v171, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  if (v126 == 1)
  {
    LODWORD(v193) = 0;
  }
  else
  {
    OUTLINED_FUNCTION_12_36(v13);
    if (v128) {
      int v129 = 1;
    }
    else {
      int v129 = 0;
    }
    LODWORD(v193) = v129;
  }
LABEL_34:
  outlined destroy of SystemUpdateNotice?(v13, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v130 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
  OUTLINED_FUNCTION_6_1();
  uint64_t v131 = v174;
  outlined assign with copy of ParticipantGridView.AnimationInfo?(v174, v130, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  uint64_t v132 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier];
  OUTLINED_FUNCTION_6_1();
  outlined assign with copy of ParticipantGridView.AnimationInfo?(v108, v132, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  uint64_t v133 = v108;
  uint64_t v134 = v184;
  uint64_t v135 = v177;
  outlined init with copy of Participant?(v184, v177, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  ParticipantGridView.fullScreenFocusedParticipantInfo.setter(v135, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo, (void (*)(uint64_t))ParticipantGridView.fullScreenFocusedParticipantInfo.didset);
  uint64_t v136 = &v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle];
  OUTLINED_FUNCTION_11_0();
  *uint64_t v136 = v178;
  uint64_t v137 = ParticipantGridView.updateParticipantTiles(with:fullScreenFocusedParticipantInfo:)(v183, v134);
  ParticipantGridView.participantIdentifiableTiles.setter(v137);
  uint64_t v138 = v168;
  uint64_t v139 = swift_bridgeObjectRetain();
  unint64_t v2 = ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(v139, v133, v131, v134);
  swift_bridgeObjectRelease();
  LOBYTE(v135) = ParticipantGridView.isOneToOneMode.getter();
  uint64_t v140 = *(void *)&v3[v138];
  uint64_t v13 = *(void *)(v140 + 16);
  unint64_t v191 = v2 + 32;
  uint64_t v192 = v2;
  swift_bridgeObjectRetain();
  unint64_t v141 = 0;
  LODWORD(v190) = v135 & 1;
  while (1)
  {
    if (v141 == v13)
    {
      uint64_t v142 = 1;
      unint64_t v141 = v13;
    }
    else
    {
      if (v141 >= *(void *)(v140 + 16))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      OUTLINED_FUNCTION_12_19();
      uint64_t v145 = v187 + *(int *)(v121 + 48);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v140 + v143 + *(void *)(v144 + 72) * v141, v145, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v146 = (uint64_t)v122 + *(int *)(v121 + 48);
      *uint64_t v122 = v141;
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v145, v146, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v142 = 0;
      ++v141;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v122, v142, 1, v121);
    outlined init with take of AspectRatio?((uint64_t)v122, (uint64_t)v117, &demangling cache variable for type metadata for (offset: Int, element: ParticipantGridView.IdentifiableParticipantTile)?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v117, 1, v121) == 1) {
      break;
    }
    unint64_t v2 = *v117;
    uint64_t v147 = (uint64_t)v117 + *(int *)(v121 + 48);
    id v148 = *(id *)(v147 + *(int *)(v194 + 20));
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v147, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    if (v193)
    {
      type metadata accessor for ParticipantView();
      uint64_t v149 = swift_dynamicCastClass();
      if (v149)
      {
        uint64_t v150 = v149;
        id v151 = v148;
        ParticipantGridView.updateCornerRadius(for:isOneToOneMode:)(v150, v190);

        uint64_t v122 = v185;
        uint64_t v121 = v186;
      }
    }
    id v152 = objc_msgSend(v148, sel_superview, v167[0]);

    if (!v152)
    {
      if ((v2 & 0x8000000000000000) != 0) {
        goto LABEL_58;
      }
      if (v2 >= *(void *)(v192 + 16)) {
        goto LABEL_59;
      }
      ParticipantGridView.updateStartingFrame(for:with:)(v148, *(CGFloat *)(v191 + 32 * v2), *(CGFloat *)(v191 + 32 * v2 + 8), *(CGFloat *)(v191 + 32 * v2 + 16), *(CGFloat *)(v191 + 32 * v2 + 24));
      objc_msgSend(v3, sel_addSubview_, v148);
    }

    uint64_t v117 = v195;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  char v154 = (*(uint64_t (**)(void))(v153 + 608))();
  unsigned __int8 v155 = v172;
  if ((v154 & 1) != 0 && static Platform.current.getter() == 3)
  {
    uint64_t v156 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo];
    OUTLINED_FUNCTION_2();
    uint64_t v157 = type metadata accessor for ParticipantGridView.AnimationInfo(0);
    if (!__swift_getEnumTagSinglePayload(v156, 1, v157)
      && *(unsigned __int8 *)(v156 + *(int *)(v157 + 20)) < v155)
    {
      unsigned __int8 v155 = *(unsigned char *)(v156 + *(int *)(v157 + 20));
    }
  }
  uint64_t v158 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v160 = v159;
  MEMORY[0x1F4188790](v161);
  uint64_t v163 = (char *)v167 - ((v162 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  id v164 = (void *)swift_allocObject();
  uint64_t v165 = v189;
  uint64_t v166 = v192;
  v164[2] = v189;
  v164[3] = v166;
  v165;
  ParticipantGridView.startAnimations(_:animationStyle:completion:)((uint64_t (*)(uint64_t))partial apply for closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:), v164, v155, (uint64_t)TPNumberPadCharacter.rawValue.getter, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v163, v158);
LABEL_56:
  OUTLINED_FUNCTION_28();
}

uint64_t ParticipantGridView.updateRequiredToTransition(to:layoutStyle:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v162 = a6;
  uint64_t v163 = a3;
  uint64_t v155 = type metadata accessor for Participant.State(0);
  uint64_t v11 = MEMORY[0x1F4188790](v155);
  char v154 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v136 - v13;
  uint64_t v148 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  MEMORY[0x1F4188790](v148);
  uint64_t v164 = (uint64_t)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.IdentifiableParticipantTile?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v151 = *(void *)(v158 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v158);
  uint64_t v21 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v156 = (uint64_t)&v136 - v22;
  uint64_t v149 = type metadata accessor for Participant(0);
  uint64_t v141 = *(void *)(v149 - 8);
  MEMORY[0x1F4188790](v149);
  uint64_t v24 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = (int *)type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  MEMORY[0x1F4188790](v146);
  uint64_t v142 = (uint64_t)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantGridView.FullScreenFocusedParticipantInfo?, ParticipantGridView.FullScreenFocusedParticipantInfo?));
  MEMORY[0x1F4188790](v145);
  uint64_t v147 = (uint64_t)&v136 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v144 = (uint64_t)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v161 = (uint64_t)&v136 - v30;
  char v31 = *a2;
  ParticipantGridView.participantIdentifiers.getter();
  uint64_t v33 = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  uint64_t v143 = a1;
  uint64_t v159 = *(void *)(a1 + 16);
  uint64_t v153 = v14;
  if (v33 == v159)
  {
    uint64_t v34 = v7;
    uint64_t v35 = (unsigned char *)(v7 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle);
    swift_beginAccess();
    char v36 = v31 ^ *v35 ^ 1;
  }
  else
  {
    uint64_t v34 = v7;
    char v36 = 0;
  }
  uint64_t v150 = v21;
  id v152 = v24;
  uint64_t v157 = v18;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v160 = &v136;
  uint64_t v38 = *(void *)(*(void *)(v37 - 8) + 64);
  MEMORY[0x1F4188790](v37 - 8);
  outlined init with copy of Participant?(a4, (uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((v36 & 1) == 0)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_12:
    char v47 = 0;
    goto LABEL_13;
  }
  uint64_t v39 = v34 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier;
  swift_beginAccess();
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v41 = MEMORY[0x1F4188790](v40 - 8);
  uint64_t v43 = (char *)&v136 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (uint64_t)&v43[*(int *)(v41 + 56)];
  outlined init with copy of Participant?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Participant?(v39, v44, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v43, 1, v45);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v44, 1, v45) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      char v47 = 1;
LABEL_13:
      uint64_t v49 = v34;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  uint64_t v140 = &v136;
  MEMORY[0x1F4188790](EnumTagSinglePayload);
  outlined init with copy of Participant?((uint64_t)v43, (uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v48 = __swift_getEnumTagSinglePayload(v44, 1, v45);
  if (v48 == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 8))((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), v45);
LABEL_11:
    outlined destroy of SystemUpdateNotice?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_12;
  }
  uint64_t v138 = &v136;
  uint64_t v139 = v34;
  uint64_t v66 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v137 = &v136;
  uint64_t v68 = (char *)&v136 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v68, v44, v45);
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v69 = *(void (**)(char *, uint64_t))(v66 + 8);
  v69(v68, v45);
  outlined destroy of SystemUpdateNotice?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v69((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), v45);
  uint64_t v49 = v139;
  outlined destroy of SystemUpdateNotice?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_14:
  uint64_t v50 = MEMORY[0x1F4188790](v163);
  uint64_t v51 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant?(v50, (uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((v47 & 1) == 0)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_22:
    uint64_t v60 = v161;
    outlined init with copy of Participant?(v162, v161, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
LABEL_23:
    uint64_t v63 = &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?;
    uint64_t v64 = v60;
    goto LABEL_24;
  }
  uint64_t v140 = &v136;
  uint64_t v52 = v49 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier;
  swift_beginAccess();
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v54 = MEMORY[0x1F4188790](v53 - 8);
  unint64_t v56 = (char *)&v136 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = (uint64_t)&v56[*(int *)(v54 + 56)];
  outlined init with copy of Participant?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Participant?(v52, v57, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v59 = __swift_getEnumTagSinglePayload((uint64_t)v56, 1, v58);
  uint64_t v163 = v58;
  if (v59 == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v57, 1, v58) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v60 = v161;
      outlined init with copy of Participant?(v162, v161, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant?((uint64_t)v56, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v62 = __swift_getEnumTagSinglePayload(v57, 1, v58);
  if (v62 == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v61, v58);
LABEL_21:
    outlined destroy of SystemUpdateNotice?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_22;
  }
  uint64_t v138 = &v136;
  uint64_t v139 = v49;
  uint64_t v70 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v137 = &v136;
  uint64_t v72 = v58;
  uint64_t v73 = (char *)&v136 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v73, v57, v58);
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
  char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v75 = *(void (**)(char *, uint64_t))(v70 + 8);
  v75(v73, v72);
  outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v75(v61, v72);
  uint64_t v49 = v139;
  outlined destroy of SystemUpdateNotice?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v60 = v161;
  outlined init with copy of Participant?(v162, v161, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  if ((v74 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_28:
  uint64_t v76 = v49 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo;
  swift_beginAccess();
  uint64_t v77 = v147;
  uint64_t v78 = v147 + *(int *)(v145 + 48);
  outlined init with copy of Participant?(v60, v147, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  outlined init with copy of Participant?(v76, v78, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v79 = v146;
  if (__swift_getEnumTagSinglePayload(v77, 1, (uint64_t)v146) != 1)
  {
    uint64_t v130 = v144;
    outlined init with copy of Participant?(v77, v144, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    if (__swift_getEnumTagSinglePayload(v78, 1, (uint64_t)v79) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v60, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v130, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
      goto LABEL_82;
    }
    uint64_t v131 = v78;
    uint64_t v132 = v142;
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v131, v142, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    if (static UUID.== infix(_:_:)())
    {
      outlined init with take of AspectRatio(v130 + v79[5], (uint64_t)v166);
      outlined init with take of AspectRatio(v132 + v79[5], (uint64_t)v167);
      if (static AspectRatio.== infix(_:_:)((uint64_t)v166, (uint64_t)v167)
        && *(void *)(v130 + v79[6]) == *(void *)(v132 + v79[6]))
      {
        uint64_t v133 = v79[7];
        int v134 = *(unsigned __int8 *)(v130 + v133);
        int v135 = *(unsigned __int8 *)(v132 + v133);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v132, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
        outlined destroy of SystemUpdateNotice?(v60, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v130, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
        outlined destroy of SystemUpdateNotice?(v77, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
        if (v134 == v135) {
          goto LABEL_31;
        }
        return 1;
      }
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v132, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    outlined destroy of SystemUpdateNotice?(v60, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v130, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    uint64_t v64 = v77;
    uint64_t v63 = &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?;
LABEL_24:
    outlined destroy of SystemUpdateNotice?(v64, v63);
    return 1;
  }
  outlined destroy of SystemUpdateNotice?(v60, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  if (__swift_getEnumTagSinglePayload(v78, 1, (uint64_t)v79) != 1)
  {
LABEL_82:
    uint64_t v63 = &demangling cache variable for type metadata for (ParticipantGridView.FullScreenFocusedParticipantInfo?, ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v64 = v77;
    goto LABEL_24;
  }
  outlined destroy of SystemUpdateNotice?(v77, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
LABEL_31:
  if (!v159) {
    return 0;
  }
  uint64_t v144 = v143 + ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80));
  uint64_t v145 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles;
  uint64_t v142 = *(void *)(v141 + 72);
  uint64_t v161 = v163 - 8;
  swift_bridgeObjectRetain();
  uint64_t v80 = 0;
  uint64_t v81 = (uint64_t)v154;
  uint64_t v83 = (uint64_t)v152;
  uint64_t v82 = (uint64_t)v153;
  uint64_t v139 = v49;
  uint64_t v84 = (uint64_t)v150;
  while (1)
  {
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v144 + v142 * v80, v83, (void (*)(void))type metadata accessor for Participant);
    uint64_t v85 = *(void *)(v49 + v145);
    uint64_t v86 = *(void *)(v85 + 16);
    uint64_t v147 = v80;
    if (v86)
    {
      uint64_t v162 = v83 + *(int *)(v149 + 20);
      uint64_t v87 = v151;
      uint64_t v88 = v85 + ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80));
      uint64_t v146 = (int *)v85;
      swift_bridgeObjectRetain();
      uint64_t v89 = *(void *)(v87 + 72);
      while (1)
      {
        uint64_t v90 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v88, v84, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v91 = v163;
        uint64_t v92 = *(void *)(v163 - 8);
        MEMORY[0x1F4188790](v90);
        uint64_t v94 = (char *)&v136 - v93;
        uint64_t v95 = v164;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v84, v164, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v94, v95, v91);
        LOBYTE(v95) = static UUID.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
        if (v95) {
          break;
        }
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v84, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        v88 += v89;
        if (!--v86)
        {
          uint64_t v96 = 1;
          uint64_t v49 = v139;
          uint64_t v81 = (uint64_t)v154;
          uint64_t v82 = (uint64_t)v153;
          uint64_t v97 = (uint64_t)v157;
          goto LABEL_40;
        }
      }
      uint64_t v97 = (uint64_t)v157;
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v84, (uint64_t)v157, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v96 = 0;
      uint64_t v49 = v139;
      uint64_t v81 = (uint64_t)v154;
      uint64_t v82 = (uint64_t)v153;
LABEL_40:
      uint64_t v83 = (uint64_t)v152;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v96 = 1;
      uint64_t v49 = v139;
      uint64_t v97 = (uint64_t)v157;
    }
    uint64_t v98 = v158;
    __swift_storeEnumTagSinglePayload(v97, v96, 1, v158);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v97, 1, v98) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of SystemUpdateNotice?(v97, &demangling cache variable for type metadata for ParticipantGridView.IdentifiableParticipantTile?);
      goto LABEL_93;
    }
    uint64_t v99 = v97;
    uint64_t v100 = v156;
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v99, v156, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v83, v82, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() != 4)
    {
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v82, (void (*)(void))type metadata accessor for Participant.State);
      goto LABEL_71;
    }
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
    uint64_t v102 = (const void *)(v82 + *(int *)(v101 + 48));
    outlined consume of Participant.CopresenceInfo?(*(void *)(v82 + *(int *)(v101 + 64)), *(void *)(v82 + *(int *)(v101 + 64) + 8));
    memcpy(v165, v102, sizeof(v165));
    uint64_t v103 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v82, v103);
    uint64_t v104 = v165[2];
    double v105 = *(double *)&v165[7];
    double v106 = *(double *)&v165[8];
    double v107 = *(double *)&v165[9];
    double v108 = *(double *)&v165[10];
    char v109 = v165[11];
    swift_bridgeObjectRetain();
    outlined destroy of Participant.MediaInfo((uint64_t)v165);
    if (v104)
    {
      swift_bridgeObjectRelease();
      uint64_t v110 = v100 + *(int *)(v148 + 20);
      double v111 = 1.0;
      double v112 = 1.0;
      if ((*(unsigned char *)(v110 + 32) & 1) == 0)
      {
        double v112 = *(double *)v110;
        double v111 = *(double *)(v110 + 8);
      }
      double v113 = (v109 & 1) != 0 ? 1.0 : v106;
      double v114 = (v109 & 1) != 0 ? 1.0 : v105;
      if (v112 != v114 || v111 != v113) {
        break;
      }
      double v116 = *(double *)(v110 + 16);
      double v117 = *(double *)(v110 + 24);
      if (*(unsigned char *)(v110 + 32))
      {
        double v117 = 1.0;
        double v116 = 1.0;
      }
      double v118 = (v109 & 1) != 0 ? 1.0 : v108;
      double v119 = (v109 & 1) != 0 ? 1.0 : v107;
      if (v116 != v119 || v117 != v118) {
        break;
      }
    }
LABEL_71:
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v83, v81, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() != 4)
    {
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v81, (void (*)(void))type metadata accessor for Participant.State);
LABEL_77:
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v100, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      goto LABEL_78;
    }
    uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
    uint64_t v122 = (const void *)(v81 + *(int *)(v121 + 48));
    outlined consume of Participant.CopresenceInfo?(*(void *)(v81 + *(int *)(v121 + 64)), *(void *)(v81 + *(int *)(v121 + 64) + 8));
    memcpy(v165, v122, sizeof(v165));
    uint64_t v123 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(v81, v123);
    uint64_t v124 = v165[2];
    uint64_t v125 = v165[5];
    swift_bridgeObjectRetain();
    outlined destroy of Participant.MediaInfo((uint64_t)v165);
    if (!v124) {
      goto LABEL_77;
    }
    swift_bridgeObjectRelease();
    uint64_t v126 = v100 + *(int *)(v148 + 24);
    uint64_t v127 = *(void *)v126;
    uint64_t v128 = v100;
    char v129 = *(unsigned char *)(v126 + 8);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v128, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    if ((v129 & 1) != 0 || v127 != v125) {
      goto LABEL_92;
    }
LABEL_78:
    uint64_t v80 = v147 + 1;
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v83, (void (*)(void))type metadata accessor for Participant);
    if (v80 == v159)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v100, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
LABEL_92:
  swift_bridgeObjectRelease();
LABEL_93:
  outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v83, (void (*)(void))type metadata accessor for Participant);
  return 1;
}

uint64_t ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = v4;
  uint64_t v97 = a3;
  uint64_t v98 = a4;
  uint64_t v90 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v93 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
  MEMORY[0x1F4188790](v96);
  uint64_t v94 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v100 = MEMORY[0x1E4FBC860];
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v95 = a1;
  if (v19)
  {
    uint64_t v91 = v4;
    uint64_t v92 = 0;
    uint64_t v99 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v21 = *(void *)(v11 + 72);
    uint64_t v18 = v99;
    do
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v20, (uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v13, (uint64_t)v17, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v99;
      }
      unint64_t v23 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v18 = v99;
      }
      *(void *)(v18 + 16) = v23 + 1;
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v17, v18+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v23, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      v20 += v21;
      --v19;
    }
    while (v19);
    int v5 = v91;
  }
  uint64_t v24 = v98;
  char v25 = static Platform.current.getter();
  uint64_t v26 = v96;
  if (v25 != 2 || (ParticipantGridView.layoutIdiom.getter(&v99), v99 == 2) || (v99 & 1) != 0)
  {
    uint64_t v31 = *(void *)(v18 + 16);
    char v32 = __swift_getEnumTagSinglePayload(v24, 1, v26) != 1;
    ParticipantGridView.mediaPipDodgingFrame(for:isFullScreen:)(v31, v32);
  }
  else
  {
    objc_msgSend(v5, sel_bounds);
  }
  CGFloat v33 = v27;
  CGFloat v34 = v28;
  CGFloat v35 = v29;
  CGFloat v36 = v30;
  unint64_t v37 = *(void *)(v18 + 16);
  uint64_t v38 = ParticipantGridView.mediaPipIsVisible.getter();
  if (v37 != 1)
  {
    if (v37)
    {
      if (v38 & 1 | (v37 != 2))
      {
        if (v37 < 3)
        {
          unint64_t v50 = 0;
          char v52 = 1;
        }
        else
        {
          MEMORY[0x1F4188790](v38);
          *(&v89 - 2) = v90;
          unint64_t v50 = specialized Collection.firstIndex(where:)(partial apply for closure #2 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:), (uint64_t)(&v89 - 4), v18);
          char v52 = v51 & 1;
        }
        ParticipantGridView.framesForParticipantViews(in:frameCount:indexToExpand:)(v37, v50, v52, v33, v34, v35, v36);
      }
      else
      {
        ParticipantGridView.framesForParticipantViewPair(in:)(v33, v34, v35, v36);
      }
    }
    specialized Array.append<A>(contentsOf:)();
    goto LABEL_41;
  }
  uint64_t v39 = v93;
  outlined init with copy of Participant?(v24, v93, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  if (__swift_getEnumTagSinglePayload(v39, 1, v26) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v39, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    double v40 = ParticipantGridView.frameForSingleParticipantView(in:)(v33, v34, v35, v36);
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v47 = MEMORY[0x1E4FBC860];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v47 = v85;
    }
    unint64_t v48 = *(void *)(v47 + 16);
    if (v48 >= *(void *)(v47 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v47 = v86;
    }
    *(void *)(v47 + 16) = v48 + 1;
    uint64_t v49 = (double *)(v47 + 32 * v48);
    v49[4] = v40;
    *((void *)v49 + 5) = v42;
    *((void *)v49 + 6) = v44;
    *((void *)v49 + 7) = v46;
    uint64_t v100 = v47;
    goto LABEL_41;
  }
  uint64_t v53 = v94;
  outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v39, v94, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
  uint64_t v54 = *(void *)(v53 + *(int *)(v26 + 24));
  if ((v54 | 2) == 3)
  {
    uint64_t v55 = v53 + *(int *)(v26 + 20);
    double v56 = 1.0;
    double v57 = 1.0;
    if ((*(unsigned char *)(v55 + 32) & 1) == 0)
    {
      uint64_t v58 = (double *)(v55 + 8);
LABEL_35:
      double v57 = *v58;
      double v56 = *(double *)v55;
    }
  }
  else
  {
    uint64_t v59 = v53 + *(int *)(v26 + 20);
    double v56 = 1.0;
    double v57 = 1.0;
    if ((*(unsigned char *)(v59 + 32) & 1) == 0)
    {
      uint64_t v58 = (double *)(v59 + 24);
      uint64_t v55 = v59 + 16;
      goto LABEL_35;
    }
  }
  objc_msgSend(v5, sel_bounds);
  double v64 = ParticipantGridView.frameForFullScreenParticipantView(fitting:layoutFrame:shouldUseSafeAreaInsets:forcePortraitSize:remoteVideoOrientation:)(0, 1, v54, 0, v56, v57, v60, v61, v62, v63);
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v71 = MEMORY[0x1E4FBC860];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v71 = v87;
  }
  unint64_t v72 = *(void *)(v71 + 16);
  if (v72 >= *(void *)(v71 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v71 = v88;
  }
  *(void *)(v71 + 16) = v72 + 1;
  uint64_t v73 = (double *)(v71 + 32 * v72);
  v73[4] = v64;
  *((void *)v73 + 5) = v66;
  *((void *)v73 + 6) = v68;
  *((void *)v73 + 7) = v70;
  uint64_t v100 = v71;
  outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v94, (void (*)(void))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
LABEL_41:
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v75 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v77 = (char *)&v89 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v78 - 8);
  uint64_t v80 = (char *)&v89 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant?(v97, (uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v80, 1, v74) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SystemUpdateNotice?((uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return v100;
  }
  else
  {
    uint64_t v82 = (*(uint64_t (**)(char *, char *, uint64_t))(v75 + 32))(v77, v80, v74);
    MEMORY[0x1F4188790](v82);
    *(&v89 - 4) = v18;
    *(&v89 - 3) = (uint64_t)v77;
    *(&v89 - 2) = v95;
    *(&v89 - 1) = (uint64_t)v5;
    uint64_t v83 = swift_bridgeObjectRetain();
    uint64_t v81 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo6CGRectVGG_AIs5NeverOTg507_sSiSo6f34VABIgyyd_Si6offset_AB7elementtABs5G11OIegnrzr_TRSiA2IIgyyd_Tf1cn_n(v83, (double (*)(uint64_t, double, double, double, double))partial apply for closure #3 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
  }
  return v81;
}

id ParticipantGridView.updateStartingFrame(for:with:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a2);
  v15.origin.double x = a2;
  v15.origin.double y = a3;
  v15.size.double width = a4;
  v15.size.double height = a5;
  double MidY = CGRectGetMidY(v15);
  v16.origin.double x = a2;
  v16.origin.double y = a3;
  v16.size.double width = a4;
  v16.size.double height = a5;
  double v12 = floor(CGRectGetWidth(v16) * 0.75);
  v17.origin.double x = a2;
  v17.origin.double y = a3;
  v17.size.double width = a4;
  v17.size.double height = a5;
  objc_msgSend(a1, sel_setFrame_, MidX - v12 * 0.5, MidY - floor(CGRectGetHeight(v17) * 0.75) * 0.5, v12);
  objc_msgSend(a1, sel_setAlpha_, 0.0);
  return objc_msgSend(a1, sel_setNeedsLayout);
}

uint64_t closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  swift_bridgeObjectRetain();
  uint64_t v6 = a1;
  ParticipantGridView.updateParticipantTiles(_:with:block:)(v4, a2, (void (*)(char *))partial apply for closure #1 in closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:), v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

void closure #1 in closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v105 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v116 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v103 - v7;
  uint64_t v9 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = v4;
  uint64_t v115 = (char *)*(int *)(v4 + 20);
  objc_msgSend(*(id *)&v115[a1], sel_setAlpha_, 1.0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v123 = (uint64_t *)a1;
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a1, (uint64_t)v11, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v108 = *(void *)(v15 - 8);
  CGRect v16 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 32);
  uint64_t v120 = v11;
  uint64_t v121 = v16;
  uint64_t v122 = v108 + 32;
  v16((char *)&v103 - v14, (uint64_t)v11, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)&v103 - v14, 0, 1, v15);
  uint64_t v17 = (uint64_t)&a2[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier];
  swift_beginAccess();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v118 = v20;
  uint64_t v119 = v19;
  uint64_t v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of Participant?((uint64_t)&v103 - v14, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Participant?(v17, v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v15);
  double v111 = a2;
  uint64_t v112 = v13;
  double v117 = (uint64_t *)v15;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v24 = v13;
    if (__swift_getEnumTagSinglePayload(v22, 1, v15) == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v25 = (uint64_t)v123;
      uint64_t v26 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v123, (uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  MEMORY[0x1F4188790](EnumTagSinglePayload);
  outlined init with copy of Participant?((uint64_t)v21, (uint64_t)&v103 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v27 = __swift_getEnumTagSinglePayload(v22, 1, v15);
  if (v27 == 1)
  {
    uint64_t v24 = v13;
    outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v108 + 8))((char *)&v103 - v14, v15);
LABEL_6:
    outlined destroy of SystemUpdateNotice?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v123, (uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
LABEL_11:
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    uint64_t v36 = (uint64_t)v117;
    goto LABEL_12;
  }
  double v114 = (void (**)(char *, uint64_t))&v103;
  uint64_t v28 = v108;
  MEMORY[0x1F4188790](v27);
  double v30 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121(v30, v22, v15);
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v32 = *(void (**)(char *, uint64_t))(v28 + 8);
  v32(v30, v15);
  outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v32((char *)&v103 - v14, v15);
  uint64_t v24 = v112;
  outlined destroy of SystemUpdateNotice?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v25 = (uint64_t)v123;
  uint64_t v26 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v123, (uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
  if ((v31 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v33 = v25;
  double v114 = (void (**)(char *, uint64_t))&v103;
  MEMORY[0x1F4188790](v26);
  unint64_t v34 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v35 = (uint64_t)v120;
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v8, (uint64_t)v120, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
  uint64_t v36 = (uint64_t)v117;
  v121((char *)&v103 - v34, v35, (uint64_t)v117);
  __swift_storeEnumTagSinglePayload((uint64_t)&v103 - v34, 0, 1, v36);
  unint64_t v37 = &v111[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
  uint64_t v38 = swift_beginAccess();
  double v113 = &v103;
  MEMORY[0x1F4188790](v38);
  double v40 = (char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = (uint64_t)&v40[*(int *)(v119 + 48)];
  outlined init with copy of Participant?((uint64_t)&v103 - v34, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Participant?((uint64_t)v37, v41, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v42 = __swift_getEnumTagSinglePayload((uint64_t)v40, 1, v36);
  if (v42 != 1)
  {
    uint64_t v110 = (void (**)(char *, uint64_t))&v103;
    MEMORY[0x1F4188790](v42);
    outlined init with copy of Participant?((uint64_t)v40, (uint64_t)&v103 - v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v45 = __swift_getEnumTagSinglePayload(v41, 1, v36);
    if (v45 != 1)
    {
      char v109 = &v103;
      uint64_t v46 = v108;
      MEMORY[0x1F4188790](v45);
      unint64_t v48 = (char *)&v103 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
      v121(v48, v41, v36);
      _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = (uint64_t)v123;
      char v50 = v49;
      char v51 = *(void (**)(char *, uint64_t))(v46 + 8);
      v51(v48, v36);
      outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      v51((char *)&v103 - v34, v36);
      uint64_t v24 = v112;
      outlined destroy of SystemUpdateNotice?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v43 = (uint64_t)v120;
      uint64_t v44 = v116;
      if (v50) {
        goto LABEL_18;
      }
LABEL_17:
      char v52 = v111;
      objc_msgSend(v111, sel_bringSubviewToFront_, *(void *)&v115[v33]);
      objc_msgSend(v52, sel_bringSubviewToFront_, *(void *)&v52[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay]);
      goto LABEL_18;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    (*(void (**)(char *, uint64_t))(v108 + 8))((char *)&v103 - v34, v36);
LABEL_15:
    outlined destroy of SystemUpdateNotice?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v43 = (uint64_t)v120;
    uint64_t v44 = v116;
    goto LABEL_17;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v8, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
  if (__swift_getEnumTagSinglePayload(v41, 1, v36) != 1) {
    goto LABEL_15;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_12:
  uint64_t v43 = (uint64_t)v120;
  uint64_t v44 = v116;
LABEL_18:
  uint64_t v53 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles;
  uint64_t v54 = *(void *)&v111[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles];
  uint64_t v55 = *(void *)(v54 + 16);
  if (!v55) {
    goto LABEL_30;
  }
  uint64_t v104 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles;
  double v56 = &v111[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
  uint64_t v106 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay;
  uint64_t v57 = v105;
  uint64_t v58 = v54 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
  uint64_t v103 = v54;
  swift_bridgeObjectRetain();
  uint64_t v115 = v56;
  swift_beginAccess();
  double v114 = *(void (***)(char *, uint64_t))(v57 + 72);
  uint64_t v110 = (void (**)(char *, uint64_t))(v108 + 8);
  do
  {
    uint64_t v59 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v58, v44, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    uint64_t v123 = &v103;
    MEMORY[0x1F4188790](v59);
    unint64_t v60 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    CGFloat v61 = (char *)&v103 - v60;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v44, v43, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
    uint64_t v62 = (uint64_t)v117;
    v121((char *)&v103 - v60, v43, (uint64_t)v117);
    uint64_t v63 = __swift_storeEnumTagSinglePayload((uint64_t)&v103 - v60, 0, 1, v62);
    MEMORY[0x1F4188790](v63);
    uint64_t v65 = (char *)&v103 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v66 = (uint64_t)&v65[*(int *)(v119 + 48)];
    outlined init with copy of Participant?((uint64_t)&v103 - v60, (uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of Participant?((uint64_t)v115, v66, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v67 = __swift_getEnumTagSinglePayload((uint64_t)v65, 1, v62);
    if (v67 == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v60, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v66, 1, v62) != 1) {
        goto LABEL_25;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v44 = v116;
      uint64_t v43 = (uint64_t)v120;
LABEL_27:
      id v75 = v111;
      objc_msgSend(v111, sel_bringSubviewToFront_, *(void *)&v111[v106]);
      objc_msgSend(v75, sel_bringSubviewToFront_, *(void *)(v44 + *(int *)(v107 + 20)));
      goto LABEL_28;
    }
    double v113 = &v103;
    MEMORY[0x1F4188790](v67);
    uint64_t v68 = (char *)&v103 - v60;
    outlined init with copy of Participant?((uint64_t)v65, (uint64_t)&v103 - v60, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v69 = __swift_getEnumTagSinglePayload(v66, 1, v62);
    if (v69 == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v60, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*v110)((char *)&v103 - v60, v62);
      uint64_t v24 = v112;
LABEL_25:
      outlined destroy of SystemUpdateNotice?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
      uint64_t v44 = v116;
      uint64_t v43 = (uint64_t)v120;
      goto LABEL_28;
    }
    char v109 = &v103;
    uint64_t v70 = v108;
    MEMORY[0x1F4188790](v69);
    unint64_t v72 = (char *)&v103 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
    v121(v72, v66, v62);
    _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
    char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v74 = *(void (**)(char *, uint64_t))(v70 + 8);
    v74(v72, v62);
    outlined destroy of SystemUpdateNotice?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v74(v68, v62);
    uint64_t v43 = (uint64_t)v120;
    outlined destroy of SystemUpdateNotice?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v24 = v112;
    uint64_t v44 = v116;
    if (v73) {
      goto LABEL_27;
    }
LABEL_28:
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v44, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    v58 += (uint64_t)v114;
    --v55;
  }
  while (v55);
  swift_bridgeObjectRelease();
  uint64_t v36 = (uint64_t)v117;
  uint64_t v53 = v104;
LABEL_30:
  uint64_t v76 = &v111[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentlyFocusedParticipantIdentifier];
  uint64_t v77 = swift_beginAccess();
  MEMORY[0x1F4188790](v77);
  unint64_t v78 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  outlined init with copy of Participant?((uint64_t)v76, (uint64_t)&v103 - v78, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  int v79 = __swift_getEnumTagSinglePayload((uint64_t)&v103 - v78, 1, v36);
  id updated = (id)outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v78, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v79 == 1) {
    goto LABEL_45;
  }
  uint64_t v115 = v76;
  uint64_t v81 = *(uint64_t **)&v111[v53];
  uint64_t v82 = v81[2];
  if (!v82)
  {
LABEL_42:
    id updated = objc_msgSend(v111, sel_bringSubviewToFront_, *(void *)&v111[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_unfocusedParticipantOverlay]);
    uint64_t v76 = v115;
    goto LABEL_45;
  }
  uint64_t v110 = (void (**)(char *, uint64_t))((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = (uint64_t)v81 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
  double v114 = (void (**)(char *, uint64_t))(v108 + 8);
  uint64_t v116 = *(void *)(v105 + 72);
  char v109 = v81;
  uint64_t v84 = swift_bridgeObjectRetain();
  uint64_t v85 = v112;
  uint64_t v86 = (uint64_t)v115;
  while (2)
  {
    uint64_t v123 = &v103;
    MEMORY[0x1F4188790](v84);
    unint64_t v87 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v88 = (char *)&v103 - v87;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v83, v43, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
    v121((char *)&v103 - v87, v43, v36);
    uint64_t v89 = __swift_storeEnumTagSinglePayload((uint64_t)&v103 - v87, 0, 1, v36);
    double v117 = &v103;
    MEMORY[0x1F4188790](v89);
    uint64_t v91 = (char *)&v103 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v92 = (uint64_t)&v91[*(int *)(v119 + 48)];
    outlined init with copy of Participant?((uint64_t)&v103 - v87, (uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of Participant?(v86, v92, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v93 = __swift_getEnumTagSinglePayload((uint64_t)v91, 1, v36);
    if (v93 == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v87, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v92, 1, v36) == 1)
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        id updated = (id)swift_bridgeObjectRelease();
        goto LABEL_44;
      }
LABEL_38:
      uint64_t v84 = outlined destroy of SystemUpdateNotice?((uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
      goto LABEL_40;
    }
    uint64_t v94 = v36;
    MEMORY[0x1F4188790](v93);
    uint64_t v95 = (char *)&v103 - v87;
    outlined init with copy of Participant?((uint64_t)v91, (uint64_t)&v103 - v87, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v96 = __swift_getEnumTagSinglePayload(v92, 1, v36);
    if (v96 == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v87, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*v114)((char *)&v103 - v87, v36);
      uint64_t v85 = v112;
      uint64_t v86 = (uint64_t)v115;
      goto LABEL_38;
    }
    double v113 = &v103;
    uint64_t v97 = v108;
    MEMORY[0x1F4188790](v96);
    uint64_t v99 = (char *)&v103 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
    v121(v99, v92, v94);
    _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
    char v100 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v101 = *(void (**)(char *, uint64_t))(v97 + 8);
    v101(v99, v94);
    outlined destroy of SystemUpdateNotice?((uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v101(v95, v94);
    uint64_t v84 = outlined destroy of SystemUpdateNotice?((uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v85 = v112;
    uint64_t v36 = v94;
    uint64_t v86 = (uint64_t)v115;
    if ((v100 & 1) == 0)
    {
LABEL_40:
      v83 += v116;
      --v82;
      uint64_t v43 = (uint64_t)v120;
      if (!v82)
      {
        swift_bridgeObjectRelease();
        unint64_t v78 = (unint64_t)v110;
        goto LABEL_42;
      }
      continue;
    }
    break;
  }
  id updated = (id)swift_bridgeObjectRelease();
LABEL_44:
  uint64_t v76 = (char *)v86;
  unint64_t v78 = (unint64_t)v110;
LABEL_45:
  MEMORY[0x1F4188790](updated);
  outlined init with copy of Participant?((uint64_t)v76, (uint64_t)&v103 - v78, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  Swift::Bool v102 = __swift_getEnumTagSinglePayload((uint64_t)&v103 - v78, 1, v36) == 1;
  outlined destroy of SystemUpdateNotice?((uint64_t)&v103 - v78, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  ParticipantGridView.setOverlayHidden(_:)(v102);
}

Swift::Void __swiftcall ParticipantGridView.setOverlayHidden(_:)(Swift::Bool a1)
{
  uint64_t v3 = v1;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_63();
  char v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *unint64_t v2 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v7();
  _dispatchPreconditionTest(_:)();
  uint64_t v8 = OUTLINED_FUNCTION_5_12();
  v9(v8);
  if (v6)
  {
    BOOL v10 = a1;
    ParticipantDimmingView.setHidden(_:)(v10);
    uint64_t v11 = v3 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v11))
    {
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t))(v12 + 72))(v3, v10, ObjectType, v12);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t ParticipantGridView.updateParticipantTiles(_:with:block:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v36 = a4;
  uint64_t v7 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v34 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ParticipantGridView.IdentifiableParticipantTile));
  MEMORY[0x1F4188790](v10);
  uint64_t v33 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ParticipantGridView.IdentifiableParticipantTile)?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (unint64_t *)((char *)&v32 - v16);
  unint64_t v18 = *(void *)(a1 + 16);
  uint64_t v37 = a2 + 32;
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v20 = v18;
  unint64_t v21 = 0;
  unint64_t v38 = v18;
  uint64_t v39 = v15;
  while (1)
  {
    if (v21 == v20)
    {
      uint64_t v22 = 1;
      unint64_t v21 = v20;
    }
    else
    {
      if (v21 >= v20) {
        goto LABEL_17;
      }
      uint64_t v23 = (uint64_t)&v33[*(int *)(v10 + 48)];
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v35+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v21, v23, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v24 = (uint64_t)&v39[*(int *)(v10 + 48)];
      *(void *)uint64_t v39 = v21;
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v23, v24, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v22 = 0;
      ++v21;
      uint64_t v15 = v39;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v15, v22, 1, v10);
    outlined init with take of AspectRatio?((uint64_t)v15, (uint64_t)v17, &demangling cache variable for type metadata for (offset: Int, element: ParticipantGridView.IdentifiableParticipantTile)?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v10) == 1) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v25 = *v17;
    uint64_t result = outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v17 + *(int *)(v10 + 48), (uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    if ((v25 & 0x8000000000000000) != 0) {
      break;
    }
    if (v25 >= *(void *)(a2 + 16)) {
      goto LABEL_16;
    }
    uint64_t v26 = (double *)(v37 + 32 * v25);
    double v27 = *v26;
    double v28 = v26[1];
    double v29 = v26[2];
    double v30 = v26[3];
    char v31 = *(void **)&v9[*(int *)(v7 + 20)];
    objc_msgSend(v31, sel_frame);
    v41.origin.double x = v27;
    v41.origin.double y = v28;
    v41.size.double width = v29;
    v41.size.double height = v30;
    if (!CGRectEqualToRect(v40, v41)) {
      objc_msgSend(v31, sel_setFrame_, v27, v28, v29, v30);
    }
    if (a3)
    {
      a3(v9);
      uint64_t v15 = v39;
    }
    uint64_t result = outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    unint64_t v20 = v38;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void ParticipantGridView.startAnimations(_:animationStyle:completion:)(uint64_t (*a1)(uint64_t a1), void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *(uint64_t *)((char *)&v6->super.super.isa
                   + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostRecentAnimationIndex);
  uint64_t v14 = (objc_class *)(v13 + 1);
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v6;
  uint64_t v10 = a5;
  uint64_t v11 = a4;
  char v12 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  *(Class *)((char *)&v6->super.super.isa
           + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostRecentAnimationIndex) = v14;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v11;
  *(void *)(v5 + 24) = v10;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v11);
  if (one-time initialization token for shared != -1) {
LABEL_17:
  }
    swift_once();
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 576))() & 1) != 0
    && (uint64_t v15 = [(UIView *)v7 snapshotViewAfterScreenUpdates:0]) != 0)
  {
    uint64_t v16 = v15;
    [(UIView *)v7 addSubview:v15];
    UIView.addConstraintsToFill(_:insets:)(v7, *MEMORY[0x1E4FB12A8]);
    [(UIView *)v16 layoutIfNeeded];
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v11;
    v17[3] = v10;
    v17[4] = v16;
    *(void *)(v5 + 16) = partial apply for closure #1 in ParticipantGridView.startAnimations(_:animationStyle:completion:);
    *(void *)(v5 + 24) = v17;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v11);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v11);
LABEL_7:
    id v18 = objc_allocWithZone(MEMORY[0x1E4FB1ED8]);
    Class isa = @nonobjc UIViewPropertyAnimator.init(duration:curve:animations:)(2, 0, 0, 0.00001);
  }
  else
  {
    switch(v12)
    {
      case 1:
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewPropertyAnimator);
        *(_OWORD *)&cubicAnimationParameters.duration = xmmword_1C3775800;
        *(_OWORD *)&cubicAnimationParameters.controlPoint1.double y = xmmword_1C3775810;
        CGFloat v20 = 0.995;
        goto LABEL_11;
      case 2:
        id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C58]), sel_init);
        id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1ED8]), sel_initWithDuration_timingParameters_, v21, 0.0);

        goto LABEL_13;
      case 3:
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewPropertyAnimator);
        *(_OWORD *)&cubicAnimationParameters.duration = xmmword_1C37757E0;
        *(_OWORD *)&cubicAnimationParameters.controlPoint1.double y = xmmword_1C37757F0;
        CGFloat v20 = 1.005;
LABEL_11:
        cubicAnimationParameters.controlPoint2.double y = v20;
        Class isa = UIViewPropertyAnimator.init(cubicAnimationParameters:)(&cubicAnimationParameters).super.isa;
        break;
      default:
        goto LABEL_7;
    }
  }
  id v22 = isa;
LABEL_13:
  uint64_t v35 = v9;
  uint64_t v36 = v8;
  char v31 = (objc_class *)MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v34 = &block_descriptor_68;
  uint64_t v23 = _Block_copy(&v31);
  swift_retain();
  swift_release();
  objc_msgSend(v22, sel_addAnimations_, v23);
  _Block_release(v23);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v7;
  v24[3] = v14;
  void v24[4] = v5;
  uint64_t v35 = partial apply for closure #2 in ParticipantGridView.startAnimations(_:animationStyle:completion:);
  uint64_t v36 = v24;
  char v31 = (objc_class *)MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v34 = &block_descriptor_74;
  unint64_t v25 = _Block_copy(&v31);
  uint64_t v26 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v22, sel_addCompletion_, v25);
  _Block_release(v25);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1C3769620;
  char v31 = v14;
  uint64_t v28 = String.init<A>(reflecting:)();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_startAnimation);
  swift_release();
}

void ParticipantGridView.updateParticipantView(for:with:hasOtherInvitedParticipants:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  int v44 = v4;
  LODWORD(v45) = v5;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_3();
  uint64_t v43 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantViewModel?);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_36_4();
  uint64_t v13 = type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v42 - v18;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_5_1();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v1 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_59_5();
  OUTLINED_FUNCTION_19();
  v24();
  char v25 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v1, v20);
  if (v25)
  {
    char v26 = ParticipantGridView.showsMostActiveTreatment(for:totalParticipantCount:)(v7, *(void *)(*(void *)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles]+ 16));
    type metadata accessor for Participant(0);
    type metadata accessor for ParticipantView();
    ParticipantGridView.tile(for:ofAClass:)();
    if (!v27)
    {
LABEL_18:
      OUTLINED_FUNCTION_28();
      return;
    }
    uint64_t v28 = v27;
    uint64_t v29 = (void *)swift_dynamicCastClass();
    if (!v29)
    {
LABEL_17:

      goto LABEL_18;
    }
    uint64_t v30 = v29;
    ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(v29, (uint64_t)&protocol witness table for ParticipantView, v7, v26 & 1, v45 & 1, 0, v2);
    if (__swift_getEnumTagSinglePayload(v2, 1, v13) == 1)
    {

      outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for ParticipantViewModel?);
      goto LABEL_18;
    }
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v2, (uint64_t)v19, (void (*)(void))type metadata accessor for ParticipantViewModel);
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v19, (uint64_t)v17, (void (*)(void))type metadata accessor for ParticipantViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v36 = &v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                          + 48)];
        id v45 = *(id *)v36;
        uint64_t v37 = *((void *)v36 + 9);
        uint64_t v38 = *((void *)v36 + 10);
        uint64_t v39 = *((void *)v36 + 11);
        v42[0] = *((void *)v36 + 12);
        v42[1] = v39;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of AnsweringMachineCallStatus?(v37, v38);
        ParticipantView.setInfoViewIsVisible(_:animated:)(0, 1);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v17, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        char v34 = v44;
        uint64_t v35 = v43;
        goto LABEL_12;
      }
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      int v33 = *(_DWORD *)(v32 + 48);
      outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)&v17[*(int *)(v32 + 64)]);
    }
    else
    {
      int v33 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                      + 48);
    }
    char v34 = v44;
    uint64_t v35 = v43;
    outlined destroy of ParticipantVideoView.ViewModel((uint64_t)&v17[v33]);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v17, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
    ParticipantView.setInfoViewIsVisible(_:animated:)(v34 & 1, 1);
LABEL_12:
    uint64_t v40 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo];
    OUTLINED_FUNCTION_2();
    outlined init with copy of Participant?(v40, v35, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    uint64_t v41 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
    LODWORD(v40) = __swift_getEnumTagSinglePayload(v35, 1, v41);
    outlined destroy of SystemUpdateNotice?(v35, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
    if (v40 != 1) {
      ParticipantGridView.updateParticipantViewFrames()();
    }
    if (v34)
    {
      objc_msgSend(v3, sel_bringSubviewToFront_, v30);

      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v19, (void (*)(void))type metadata accessor for ParticipantViewModel);
      goto LABEL_18;
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v19, (void (*)(void))type metadata accessor for ParticipantViewModel);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t ParticipantGridView.showsMostActiveTreatment(for:totalParticipantCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (unsigned __int8 *)(v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle);
  swift_beginAccess();
  LODWORD(v8) = *v8;
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a1, (uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
  if (v8 != 1 || a2 < 2)
  {
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
    char v10 = 0;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    v31[3] = v31;
    uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
    MEMORY[0x1F4188790](v11 - 8);
    unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v14 = &v7[*(int *)(v5 + 20)];
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v31 - v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v31 - v13, 0, 1, v15);
    uint64_t v17 = v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostProminentParticipantIdentifier;
    swift_beginAccess();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    v31[2] = v31;
    uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
    uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = (uint64_t)&v21[*(int *)(v19 + 56)];
    outlined init with copy of Participant?((uint64_t)v31 - v13, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of Participant?(v17, v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v15);
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v31 - v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
      int v24 = __swift_getEnumTagSinglePayload(v22, 1, v15);
      if (v24 == 1) {
        char v25 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      }
      else {
        char v25 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
      }
      if (v24 == 1) {
        char v10 = -1;
      }
      else {
        char v10 = 0;
      }
    }
    else
    {
      MEMORY[0x1F4188790](EnumTagSinglePayload);
      outlined init with copy of Participant?((uint64_t)v21, (uint64_t)v31 - v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v26 = __swift_getEnumTagSinglePayload(v22, 1, v15);
      if (v26 == 1)
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v31 - v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
        (*(void (**)(char *, uint64_t))(v16 + 8))((char *)v31 - v13, v15);
        char v25 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
        char v10 = 0;
      }
      else
      {
        v31[1] = v31;
        MEMORY[0x1F4188790](v26);
        uint64_t v28 = (char *)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v28, v22, v15);
        _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
        char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v29 = *(void (**)(char *, uint64_t))(v16 + 8);
        v29(v28, v15);
        char v25 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
        outlined destroy of SystemUpdateNotice?((uint64_t)v31 - v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v7, (void (*)(void))type metadata accessor for Participant);
        v29((char *)v31 - v13, v15);
      }
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v21, v25);
  }
  return v10 & 1;
}

void ParticipantGridView.tile(for:ofAClass:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v39 = v2;
  uint64_t v43 = v3;
  uint64_t v4 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = OUTLINED_FUNCTION_37_11(v6, v37[0]);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v37 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.IdentifiableParticipantTile?);
  uint64_t v17 = OUTLINED_FUNCTION_8(v16);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles);
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v40 = v7;
  v37[1] = v18;
  uint64_t v38 = v21 - v20;
  if (v19)
  {
    OUTLINED_FUNCTION_22_0();
    uint64_t v24 = v22 + v23;
    uint64_t v41 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v24, (uint64_t)v15, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v25 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v27 = v26;
      MEMORY[0x1F4188790](v28);
      OUTLINED_FUNCTION_36_4();
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v15, v42, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      OUTLINED_FUNCTION_63_0();
      v29();
      char v30 = static UUID.== infix(_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v1, v25);
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v15, (uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      if (v30)
      {
        unsigned __int8 v31 = objc_msgSend(*(id *)&v13[*(int *)(v40 + 20)], sel_isKindOfClass_, swift_getObjCClassFromMetadata());
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        if (v31)
        {
          uint64_t v32 = v38;
          outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v15, v38, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
          uint64_t v33 = v32;
          uint64_t v34 = 0;
          goto LABEL_11;
        }
      }
      else
      {
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v13, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      }
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v15, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      v24 += v41;
      if (!--v19) {
        goto LABEL_10;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_10:
  uint64_t v32 = v38;
  uint64_t v33 = v38;
  uint64_t v34 = 1;
LABEL_11:
  uint64_t v35 = v40;
  __swift_storeEnumTagSinglePayload(v33, v34, 1, v40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_36(v32);
  if (v36)
  {
    outlined destroy of SystemUpdateNotice?(v32, &demangling cache variable for type metadata for ParticipantGridView.IdentifiableParticipantTile?);
  }
  else
  {
    *(id *)(v32 + *(int *)(v35 + 20));
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v32, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
  }
  OUTLINED_FUNCTION_28();
}

uint64_t ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  int v292 = a6;
  LODWORD(v308) = a5;
  CGFloat m24 = *(double *)&a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v284 = (uint64_t)&v268 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v302 = (char *)&v268 - v16;
  uint64_t v17 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v285 = (uint64_t)&v268 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  *(void *)&CGFloat v295 = (char *)&v268 - v21;
  MEMORY[0x1F4188790](v20);
  *(void *)&tdouble y = (char *)&v268 - v22;
  uint64_t v304 = (uint64_t *)type metadata accessor for Participant(0);
  uint64_t v23 = MEMORY[0x1F4188790](v304);
  uint64_t v291 = (uint64_t)&v268 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t c_low = (uint64_t)&v268 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  *(void *)&CGFloat d = (char *)&v268 - v28;
  MEMORY[0x1F4188790](v27);
  char v30 = (char *)&v268 - v29;
  uint64_t v31 = type metadata accessor for ParticipantViewModel(0);
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v268 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  *(void *)&CGFloat m12 = (char *)&v268 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  *(void *)&CGFloat v301 = (char *)&v268 - v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)&v268 - v39;
  v283 = (objc_class *)type metadata accessor for ParticipantView();
  uint64_t v309 = (void *)swift_dynamicCastClass();
  if (v309)
  {
    uint64_t v297 = a7;
    unint64_t v300 = v34;
    uint64_t v310 = a3;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a3, (uint64_t)v30, (void (*)(void))type metadata accessor for Participant);
    uint64_t v41 = (unsigned __int8 *)(v8
                            + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership);
    swift_beginAccess();
    uint64_t v42 = *v41;
    id v298 = a1;
    LOWORD(v266) = 257;
    LOBYTE(v265) = 1;
    LODWORD(v271) = a4;
    ParticipantViewModel.init(participant:videoProviderType:isInGrid:isMostActive:isPipped:isPreviewingReaction:hasOtherInvitedParticipants:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:snapshotImage:allowsVideoCroppedByAspectRatio:shouldRegisterVideoLayers:)((uint64_t)v30, 0, 1, a4 & 1, 0, 0, v308 & 1, v42, v265, 0, v266, v267, v268, (uint64_t)v269, (uint64_t)v270, v271, v272, v273, (uint64_t)v274,
      v275,
      v276,
      v277,
      v278,
      BYTE1(v278));
    int v43 = ParticipantGridView.isOneToOneMode.getter();
    int v44 = (void *)(v8 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate);
    swift_beginAccess();
    uint64_t v45 = MEMORY[0x1C8776240](v44);
    uint64_t v46 = v8;
    char v277 = v44;
    if (v45)
    {
      uint64_t v47 = v44[1];
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 80))(v318, ObjectType, v47);
      swift_unknownObjectRelease();
      BOOL v49 = LOBYTE(v318[0]) == 2;
    }
    else
    {
      BOOL v49 = 0;
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v308 = v31;
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Log.default);
    char v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v303 = v46;
    if (v54)
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 67109120;
      LODWORD(v318[0]) = v43 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v52, v53, "Grid configure with isOneToOneMode = %{BOOL}d", v55, 8u);
      double v56 = v55;
      uint64_t v46 = v303;
      MEMORY[0x1C87760E0](v56, -1, -1);
    }
    uint64_t v307 = v40;

    BOOL v279 = v49;
    int v306 = v43;
    ParticipantGridView.updateCornerRadius(for:isOneToOneMode:)((uint64_t)v309, v43 & !v49);
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    CGFloat m21 = COERCE_DOUBLE(&v268);
    uint64_t v58 = *(uint64_t **)(*(void *)(v57 - 8) + 64);
    MEMORY[0x1F4188790](v57 - 8);
    uint64_t v59 = (char *)&v268 - (((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v60 = (uint64_t *)(v310 + *((int *)v304 + 5));
    uint64_t v61 = type metadata accessor for UUID();
    uint64_t v62 = *(void *)(v61 - 8);
    uint64_t v64 = v62 + 16;
    uint64_t v63 = *(uint64_t **)(v62 + 16);
    uint64_t v276 = v60;
    uint64_t v281 = v62;
    char v282 = v63;
    ((void (*)(char *, uint64_t *, uint64_t))v63)(v59, v60, v61);
    uint64_t v65 = 1;
    uint64_t v66 = __swift_storeEnumTagSinglePayload((uint64_t)v59, 0, 1, v61);
    CGFloat m22 = COERCE_DOUBLE(&v268);
    BOOL v289 = v58;
    MEMORY[0x1F4188790](v66);
    uint64_t v67 = v46 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo;
    swift_beginAccess();
    uint64_t v68 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
    if (!__swift_getEnumTagSinglePayload(v67, 1, v68))
    {
      ((void (*)(char *, uint64_t, uint64_t))v282)(v59, v67, v61);
      uint64_t v65 = 0;
    }
    uint64_t v273 = v64;
    uint64_t v278 = v67;
    __swift_storeEnumTagSinglePayload((uint64_t)v59, v65, 1, v61);
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
    CGFloat m23 = COERCE_DOUBLE(&v268);
    uint64_t v70 = MEMORY[0x1F4188790](v69);
    uint64_t v272 = v71;
    unint64_t v72 = (char *)&v268 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v274 = (uint64_t *)v70;
    uint64_t v73 = (uint64_t)&v72[*(int *)(v70 + 48)];
    outlined init with copy of Participant?((uint64_t)v59, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of Participant?((uint64_t)v59, v73, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v72, 1, v61);
    uint64_t v294 = v68;
    uint64_t v275 = v61;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      int v75 = __swift_getEnumTagSinglePayload(v73, 1, v61);
      if (v75 == 1) {
        uint64_t v76 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      }
      else {
        uint64_t v76 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
      }
      if (v75 == 1) {
        int v77 = -1;
      }
      else {
        int v77 = 0;
      }
      int v305 = v77;
    }
    else
    {
      MEMORY[0x1F4188790](EnumTagSinglePayload);
      int v79 = (char *)&v268 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of Participant?((uint64_t)v72, (uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v80 = __swift_getEnumTagSinglePayload(v73, 1, v61);
      if (v80 != 1)
      {
        uint64_t v269 = &v268;
        unint64_t v270 = &v268;
        uint64_t v82 = v281;
        MEMORY[0x1F4188790](v80);
        uint64_t v84 = (char *)&v268 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v84, v73, v61);
        _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
        int v305 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v85 = *(void (**)(char *, uint64_t))(v82 + 8);
        v85(v84, v61);
        uint64_t v76 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
        outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v85(v79, v61);
        uint64_t v81 = (uint64_t)v307;
LABEL_26:
        outlined destroy of SystemUpdateNotice?((uint64_t)v72, v76);
        uint64_t v86 = *(void *)&v301;
        ParticipantGridView.transformModelIfNeeded(_:for:)(v81, v310, *(uint64_t *)&v301);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v81, (void (*)(void))type metadata accessor for ParticipantViewModel);
        outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v86, v81, (void (*)(void))type metadata accessor for ParticipantViewModel);
        uint64_t v87 = *(void *)&m12;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v81, *(uint64_t *)&m12, (void (*)(void))type metadata accessor for ParticipantViewModel);
        uint64_t v88 = v308;
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload != 1)
          {
            uint64_t v113 = v87
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                          + 48);
            double v114 = *(void **)v113;
            uint64_t v115 = *(void *)(v113 + 72);
            uint64_t v116 = *(void *)(v113 + 80);
            swift_bridgeObjectRelease();
            uint64_t v117 = v303;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            outlined consume of AnsweringMachineCallStatus?(v115, v116);
            uint64_t v118 = v87;
            uint64_t v119 = v285;
            outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v118, v285, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
            if (objc_msgSend(*(id *)(v117 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags), sel_uPlusOneFullBleedHandoffEnabled))
            {
              uint64_t v120 = v297;
              uint64_t v81 = (uint64_t)v307;
              uint64_t v88 = v308;
              uint64_t v121 = (uint64_t)v300;
              uint64_t v122 = v309;
              uint64_t v123 = v294;
              if ((v306 & 1) == 0)
              {
                outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v119, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                goto LABEL_87;
              }
              if (ParticipantGridView.shouldShowLastFrameUI.getter())
              {
                swift_retain();
                ParticipantGridView.VideoInfoCache.info(for:)(v310, (uint64_t)v321);
                swift_release();
                outlined init with take of AspectRatio?((uint64_t)v321, (uint64_t)&v311, &demangling cache variable for type metadata for Participant.VideoInfo?);
                CGFloat a = v311.a;
                if (*(void *)&v311.a)
                {
                  uint64_t b_low = LOBYTE(v311.b);
                  int v126 = BYTE1(v311.b);
                  int v127 = BYTE2(v311.b);
                  uint64_t v128 = BYTE3(v311.b);
                  int v129 = BYTE4(v311.b);
                  LODWORD(v281) = BYTE5(v311.b);
                  LODWORD(v282) = BYTE6(v311.b);
                  LODWORD(m23) = HIBYTE(v311.b);
                  uint64_t c_low = LOBYTE(v311.c);
                  LODWORD(m21) = BYTE1(v311.c);
                  CGFloat d = v311.d;
                  *(void *)&CGFloat v295 = LOBYTE(v311.tx);
                  tdouble y = v311.ty;
                  CGFloat m12 = v312;
                  uint64_t v130 = v314;
                  uint64_t v304 = v313;
                  LODWORD(v289) = v315;
                  LODWORD(m22) = v316;
                  specialized Dictionary.subscript.getter();
                  uint64_t v131 = (uint64_t)v302;
                  if (*((void *)&v318[1] + 1))
                  {
                    outlined init with take of Notice(v318, (uint64_t)&aBlock);
                    outlined init with copy of IDSLookupManager((uint64_t)&aBlock, (uint64_t)v318);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
                    type metadata accessor for RemoteParticipantVideoProvider();
                    if ((swift_dynamicCast() & 1) != 0
                      && (CGFloat m11 = v317.m11,
                          char v133 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)&v317.m11) + 0x190))(),
                          *(id *)&m11,
                          (v133 & 1) != 0))
                    {
                      outlined release of LinearGradient((uint64_t)v321);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
                      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v285, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                      uint64_t v120 = v297;
                      uint64_t v81 = (uint64_t)v307;
                      uint64_t v88 = v308;
                    }
                    else
                    {
                      v302 = v130;
                      outlined init with copy of IDSLookupManager((uint64_t)&aBlock, (uint64_t)v318);
                      CGAffineTransformMakeRotation((CGAffineTransform *)&v317, 0.0);
                      *(_OWORD *)&v322.CGFloat a = *(_OWORD *)&v317.m11;
                      *(_OWORD *)&v322.CGFloat c = *(_OWORD *)&v317.m13;
                      *(_OWORD *)&v322.tdouble x = *(_OWORD *)&v317.m21;
                      CATransform3DMakeAffineTransform(&v317, &v322);
                      *(CATransform3D *)((char *)&v318[2] + 8) = v317;
                      DWORD2(v318[10]) = 16842753;
                      uint64_t v227 = v310;
                      if (closure #1 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)((uint64_t)&aBlock, v303))
                      {
                        uint64_t v228 = (uint64_t)v307;
                        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
                        uint64_t v229 = v228
                             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                                      + 48);
                        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v285, v228, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                        outlined init with copy of ParticipantVideoView.ViewModel((uint64_t)v318, v229);
                        uint64_t v230 = v308;
                        swift_storeEnumTagMultiPayload();
                        if (v126) {
                          uint64_t v231 = 256;
                        }
                        else {
                          uint64_t v231 = 0;
                        }
                        uint64_t v232 = v231 | b_low;
                        uint64_t v88 = v230;
                        BOOL v233 = v127 == 0;
                        uint64_t v81 = v228;
                        uint64_t v234 = 0x10000;
                        if (v233) {
                          uint64_t v234 = 0;
                        }
                        uint64_t v235 = v232 | v234 | (v128 << 24);
                        uint64_t v236 = 0x100000000;
                        if (!v129) {
                          uint64_t v236 = 0;
                        }
                        uint64_t v237 = 0x10000000000;
                        if (!v281) {
                          uint64_t v237 = 0;
                        }
                        uint64_t v238 = v236 | v237;
                        uint64_t v239 = 0x1000000000000;
                        if (!v282) {
                          uint64_t v239 = 0;
                        }
                        uint64_t v240 = v238 | v239;
                        uint64_t v241 = 0x100000000000000;
                        if (!LODWORD(m23)) {
                          uint64_t v241 = 0;
                        }
                        *(void *)&CGFloat v242 = v235 | v240 | v241;
                        if (LODWORD(m21)) {
                          uint64_t v243 = 256;
                        }
                        else {
                          uint64_t v243 = 0;
                        }
                        uint64_t v244 = v243 | c_low;
                        if (LODWORD(m22)) {
                          __int16 v245 = 256;
                        }
                        else {
                          __int16 v245 = 0;
                        }
                        v317.CGFloat m11 = a;
                        v317.CGFloat m12 = v242;
                        *(void *)&v317.m13 = v244;
                        v317.m14 = d;
                        v317.CGFloat m21 = v295;
                        v317.CGFloat m22 = ty;
                        v317.CGFloat m23 = m12;
                        *(void *)&v317.CGFloat m24 = v304;
                        *(void *)&v317.CGFloat m31 = v302;
                        LOWORD(v317.m32) = v245 | (unsigned __int16)v289;
                        swift_beginAccess();
                        specialized Dictionary._Variant.setValue(_:forKey:)();
                        swift_endAccess();
                        ParticipantGridView.scheduleUpdateToPausedHandoffOverlay(on:for:isMostActive:)((uint64_t)v298, *(uint64_t *)&m24, v227, v271 & 1);
                        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v318);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
                        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v285, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                      }
                      else
                      {
                        if (v126) {
                          uint64_t v246 = 256;
                        }
                        else {
                          uint64_t v246 = 0;
                        }
                        uint64_t v247 = v246 | b_low;
                        uint64_t v248 = 0x10000;
                        if (!v127) {
                          uint64_t v248 = 0;
                        }
                        uint64_t v249 = v247 | v248 | (v128 << 24);
                        uint64_t v250 = 0x100000000;
                        if (!v129) {
                          uint64_t v250 = 0;
                        }
                        uint64_t v251 = 0x10000000000;
                        if (!v281) {
                          uint64_t v251 = 0;
                        }
                        uint64_t v252 = v250 | v251;
                        uint64_t v253 = 0x1000000000000;
                        if (!v282) {
                          uint64_t v253 = 0;
                        }
                        uint64_t v254 = v252 | v253;
                        uint64_t v255 = 0x100000000000000;
                        if (!LODWORD(m23)) {
                          uint64_t v255 = 0;
                        }
                        *(void *)&CGFloat v256 = v249 | v254 | v255;
                        if (LODWORD(m21)) {
                          uint64_t v257 = 256;
                        }
                        else {
                          uint64_t v257 = 0;
                        }
                        uint64_t v258 = v257 | c_low;
                        if (LODWORD(m22)) {
                          __int16 v259 = 256;
                        }
                        else {
                          __int16 v259 = 0;
                        }
                        v317.CGFloat m11 = a;
                        v317.CGFloat m12 = v256;
                        *(void *)&v317.m13 = v258;
                        v317.m14 = d;
                        v317.CGFloat m21 = v295;
                        v317.CGFloat m22 = ty;
                        v317.CGFloat m23 = m12;
                        *(void *)&v317.CGFloat m24 = v304;
                        *(void *)&v317.CGFloat m31 = v302;
                        LOWORD(v317.m32) = v259 | (unsigned __int16)v289 | 0x8000;
                        swift_beginAccess();
                        specialized Dictionary._Variant.setValue(_:forKey:)();
                        swift_endAccess();
                        uint64_t v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
                        uint64_t v261 = *(void *)&v301;
                        uint64_t v262 = *(void *)&v301 + *(int *)(v260 + 48);
                        uint64_t v263 = *(void *)&v301 + *(int *)(v260 + 64);
                        uint64_t v264 = v285;
                        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v285, *(uint64_t *)&v301, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                        outlined init with copy of ParticipantVideoView.ViewModel((uint64_t)v318, v262);
                        *(void *)(v263 + 24) = &type metadata for ImageNames.ParticipantView;
                        *(void *)(v263 + 32) = &protocol witness table for ImageNames.ParticipantView;
                        *(unsigned char *)uint64_t v263 = 8;
                        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v318);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
                        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v264, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                        uint64_t v81 = (uint64_t)v307;
                        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
                        *(void *)(v263 + 40) = 0;
                        *(void *)(v263 + 48) = 0;
                        *(unsigned char *)(v263 + 104) = 1;
                        uint64_t v88 = v308;
                        swift_storeEnumTagMultiPayload();
                        outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v261, v81, (void (*)(void))type metadata accessor for ParticipantViewModel);
                      }
                      uint64_t v120 = v297;
                    }
                    uint64_t v121 = (uint64_t)v300;
LABEL_87:
                    ParticipantView.configure(with:isOneToOneMode:)(v81, v306 & 1);
                    ParticipantView.updateGradientOverlayView(isHidden:alpha:)((v305 & 1) == 0, 0, 1);
                    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v81, v121, (void (*)(void))type metadata accessor for ParticipantViewModel);
                    int v219 = swift_getEnumCaseMultiPayload();
                    if (v219)
                    {
                      if (v219 != 1)
                      {
                        uint64_t v222 = v121
                             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                                      + 48);
                        double v223 = *(void **)v222;
                        uint64_t v224 = *(void *)(v222 + 72);
                        uint64_t v225 = *(void *)(v222 + 80);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();

                        uint64_t v226 = v225;
                        uint64_t v120 = v297;
                        uint64_t v81 = (uint64_t)v307;
                        uint64_t v88 = v308;
                        outlined consume of AnsweringMachineCallStatus?(v224, v226);
                        UIView.removeTapInteractions(withTapCount:)(2);

                        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v300, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                        goto LABEL_93;
                      }
                      uint64_t v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
                      int v221 = *(_DWORD *)(v220 + 48);
                      outlined destroy of ParticipantVideoOverlayView.ViewModel(v121 + *(int *)(v220 + 64));
                    }
                    else
                    {
                      int v221 = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                                       + 48);
                    }
                    outlined destroy of ParticipantVideoView.ViewModel(v121 + v221);
                    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v121, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                    UIView.addTapInteraction(withTapCount:)(2);

LABEL_93:
                    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v81, v120, (void (*)(void))type metadata accessor for ParticipantViewModel);
                    return __swift_storeEnumTagSinglePayload(v120, 0, 1, v88);
                  }
                  outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v285, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                  outlined release of LinearGradient((uint64_t)v321);
                  outlined destroy of SystemUpdateNotice?((uint64_t)v318, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
                  uint64_t v120 = v297;
                  uint64_t v81 = (uint64_t)v307;
                  uint64_t v88 = v308;
                  uint64_t v121 = (uint64_t)v300;
                  uint64_t v122 = v309;
                }
                else
                {
                  outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v119, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                  uint64_t v131 = (uint64_t)v302;
                }
                uint64_t v123 = v294;
              }
              else
              {
                outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v119, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
                uint64_t v131 = (uint64_t)v302;
              }
LABEL_69:
              outlined init with copy of Participant?(v278, v131, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
              if (__swift_getEnumTagSinglePayload(v131, 1, v123))
              {
                uint64_t v193 = v284;
                outlined init with copy of Participant?(v131, v284, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
                ParticipantGridView.fullScreenFocusedParticipantInfo.setter(v193, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo, (void (*)(uint64_t))ParticipantGridView.fullScreenFocusedParticipantInfo.didset);
                outlined destroy of SystemUpdateNotice?(v131, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?);
                uint64_t v194 = v277;
              }
              else
              {
                Participant.videoInfo.getter();
                outlined init with take of AspectRatio?((uint64_t)&v322, (uint64_t)v318, &demangling cache variable for type metadata for Participant.VideoInfo?);
                if (*(void *)&v318[0])
                {
                  char v195 = v318[2];
                  outlined release of LinearGradient((uint64_t)&v322);
                }
                else
                {
                  char v195 = 0;
                }
                uint64_t v194 = v277;
                uint64_t v196 = (uint64_t)v302;
                v302[*(int *)(v294 + 28)] = v195;
                ParticipantGridView.fullScreenFocusedParticipantInfo.setter(v196, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo, (void (*)(uint64_t))ParticipantGridView.fullScreenFocusedParticipantInfo.didset);
              }
              if (MEMORY[0x1C8776240](v194))
              {
                uint64_t v197 = v194[1];
                uint64_t v198 = swift_getObjectType();
                uint64_t v199 = (*(uint64_t (**)(uint64_t, uint64_t))(v197 + 112))(v198, v197);
                char v201 = v200;
                swift_unknownObjectRelease();
                uint64_t v202 = 1;
                if ((v201 & 1) == 0 && !v199) {
                  uint64_t v202 = *(void *)(v303 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation);
                }
              }
              else
              {
                uint64_t v202 = 1;
              }
              uint64_t v203 = v291;
              outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v310, v291, (void (*)(void))type metadata accessor for Participant);
              char v204 = static Platform.current.getter();
              BOOL v205 = v279;
              if (v204 == 3) {
                BOOL v205 = 0;
              }
              double v206 = 0.0;
              if (!v205) {
                double v206 = closure #2 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(v202);
              }
              outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v203, (void (*)(void))type metadata accessor for Participant);
              CGAffineTransformMakeRotation(&aBlock, v206);
              CGFloat v207 = aBlock.a;
              CGFloat b = aBlock.b;
              CGFloat c = aBlock.c;
              CGFloat v210 = aBlock.d;
              tdouble x = aBlock.tx;
              CGFloat v212 = aBlock.ty;
              uint64_t v213 = (CGFloat *)swift_allocObject();
              *((void *)v213 + 2) = v122;
              v213[3] = v207;
              v213[4] = b;
              v213[5] = c;
              v213[6] = v210;
              v213[7] = tx;
              v213[8] = v212;
              if (v292)
              {
                uint64_t v214 = self;
                *(void *)&aBlock.tdouble x = partial apply for closure #3 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:);
                *(void *)&aBlock.tdouble y = v213;
                *(void *)&aBlock.CGFloat a = MEMORY[0x1E4F143A8];
                *(void *)&aBlock.CGFloat b = 1107296256;
                *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed () -> ();
                *(void *)&aBlock.CGFloat d = &block_descriptor_50_0;
                uint64_t v215 = _Block_copy(&aBlock);
                id v216 = v298;
                swift_retain();
                uint64_t v121 = (uint64_t)v300;
                swift_release();
                objc_msgSend(v214, sel_animateWithDuration_animations_, v215, 0.4);
                swift_release();
                _Block_release(v215);
              }
              else
              {
                v320.receiver = v122;
                uint64_t v217 = v283;
                v320.super_class = v283;
                id v218 = v298;
                aBlock.CGFloat a = v207;
                aBlock.CGFloat b = b;
                aBlock.CGFloat c = c;
                aBlock.CGFloat d = v210;
                aBlock.tdouble x = tx;
                aBlock.tdouble y = v212;
                objc_msgSendSuper2(&v320, sel_setTransform_, &aBlock);
                v319.receiver = v122;
                v319.super_class = v217;
                objc_msgSendSuper2(&v319, sel_transform);
                ParticipantView.updateOverlayTransforms(with:)(&aBlock.a);
                swift_release();
              }
              goto LABEL_87;
            }
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v119, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
            uint64_t v120 = v297;
            uint64_t v81 = (uint64_t)v307;
            uint64_t v88 = v308;
            uint64_t v121 = (uint64_t)v300;
LABEL_68:
            uint64_t v122 = v309;
            uint64_t v131 = (uint64_t)v302;
            uint64_t v123 = v294;
            if ((v306 & 1) == 0) {
              goto LABEL_87;
            }
            goto LABEL_69;
          }
          uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
          uint64_t v91 = (const void *)(v87 + *(int *)(v90 + 48));
          uint64_t v92 = v87 + *(int *)(v90 + 64);
          outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v87, *(uint64_t *)&v295, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
          memcpy(v318, v91, 0xACuLL);
          outlined init with take of ParticipantVideoOverlayView.ViewModel(v92, (uint64_t)&v311);
          int v93 = v305;
          if (v305)
          {
            CGAffineTransformMakeRotation((CGAffineTransform *)&v317, 1.57079633);
            *(_OWORD *)&v322.CGFloat a = *(_OWORD *)&v317.m11;
            *(_OWORD *)&v322.CGFloat c = *(_OWORD *)&v317.m13;
            *(_OWORD *)&v322.tdouble x = *(_OWORD *)&v317.m21;
            CATransform3DMakeAffineTransform(&v317, &v322);
            CGFloat v301 = v317.m11;
            CGFloat m12 = v317.m12;
            tdouble y = v317.m13;
            CGFloat d = v317.m14;
            CGFloat m22 = v317.m22;
            CGFloat m21 = v317.m21;
            CGFloat m31 = v317.m31;
            uint64_t v285 = *(void *)&v317.m24;
            CGFloat m23 = v317.m23;
            CGFloat m32 = v317.m32;
            CGFloat m33 = v317.m33;
            CGFloat m34 = v317.m34;
            CGFloat m41 = v317.m41;
            CGFloat m42 = v317.m42;
            CGFloat m43 = v317.m43;
            CGFloat m44 = v317.m44;
          }
          else
          {
            CGFloat v301 = *((double *)&v318[2] + 1);
            tdouble y = *((double *)&v318[3] + 1);
            CGFloat m12 = *(double *)&v318[3];
            CGFloat d = *(double *)&v318[4];
            CGFloat m22 = *(double *)&v318[5];
            CGFloat m21 = *((double *)&v318[4] + 1);
            uint64_t v285 = *(void *)&v318[6];
            CGFloat m23 = *((double *)&v318[5] + 1);
            CGFloat m31 = *((double *)&v318[6] + 1);
            CGFloat m33 = *((double *)&v318[7] + 1);
            CGFloat m32 = *(double *)&v318[7];
            CGFloat m41 = *((double *)&v318[8] + 1);
            CGFloat m34 = *(double *)&v318[8];
            CGFloat m43 = *((double *)&v318[9] + 1);
            CGFloat m42 = *(double *)&v318[9];
            CGFloat m44 = *(double *)&v318[10];
          }
          uint64_t v134 = c_low;
          char v135 = BYTE8(v318[10]);
          uint64_t v136 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v310, c_low, (void (*)(void))type metadata accessor for Participant);
          if (v93 & 1 | ((v135 & 1) == 0))
          {
            int v305 = v93;
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v134, (void (*)(void))type metadata accessor for Participant);
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v81, (void (*)(void))type metadata accessor for ParticipantViewModel);
            char v137 = 0;
            uint64_t v121 = (uint64_t)v300;
LABEL_63:
            uint64_t v175 = v81 + *(int *)(v90 + 48);
            uint64_t v176 = v81 + *(int *)(v90 + 64);
            outlined init with take of ParticipantGridView.IdentifiableParticipantTile(*(uint64_t *)&v295, v81, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
            outlined init with take of AspectRatio?((uint64_t)v318, v175, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
            CGFloat v177 = m12;
            *(CGFloat *)(v175 + 40) = v301;
            *(CGFloat *)(v175 + 48) = v177;
            CGFloat v178 = d;
            *(CGFloat *)(v175 + 56) = ty;
            *(CGFloat *)(v175 + 64) = v178;
            CGFloat v179 = m22;
            *(CGFloat *)(v175 + 72) = m21;
            *(CGFloat *)(v175 + 80) = v179;
            uint64_t v180 = v285;
            *(CGFloat *)(v175 + 88) = m23;
            *(void *)(v175 + 96) = v180;
            *(CGFloat *)(v175 + 104) = m31;
            *(CGFloat *)(v175 + 112) = m32;
            *(CGFloat *)(v175 + 120) = m33;
            *(CGFloat *)(v175 + 128) = m34;
            *(CGFloat *)(v175 + 136) = m41;
            *(CGFloat *)(v175 + 144) = m42;
            *(CGFloat *)(v175 + 152) = m43;
            *(CGFloat *)(v175 + 160) = m44;
            *(unsigned char *)(v175 + 168) = v137 & 1;
            *(_WORD *)(v175 + 169) = 256;
            *(unsigned char *)(v175 + 171) = 0;
            outlined init with take of ParticipantVideoOverlayView.ViewModel((uint64_t)&v311, v176);
            swift_storeEnumTagMultiPayload();
LABEL_67:
            uint64_t v120 = v297;
            goto LABEL_68;
          }
          CGFloat m24 = *(double *)&v90;
          uint64_t v276 = &v268;
          uint64_t v142 = v289;
          MEMORY[0x1F4188790](v136);
          unint64_t v143 = ((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v144 = (char *)&v268 - v143;
          uint64_t v145 = v275;
          ((void (*)(char *, uint64_t, uint64_t))v282)((char *)&v268 - v143, v134 + *((int *)v304 + 5), v275);
          __swift_storeEnumTagSinglePayload((uint64_t)&v268 - v143, 0, 1, v145);
          uint64_t v146 = (uint64_t)v309 + OBJC_IVAR____TtC15ConversationKit15ParticipantView_participantIdentifier;
          uint64_t v147 = swift_beginAccess();
          uint64_t v304 = &v268;
          MEMORY[0x1F4188790](v147);
          uint64_t v148 = (char *)&v268 - v143;
          uint64_t v149 = outlined init with copy of Participant?(v146, (uint64_t)&v268 - v143, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          char v282 = &v268;
          MEMORY[0x1F4188790](v149);
          uint64_t v151 = (char *)&v268 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v152 = (uint64_t)&v151[*((int *)v274 + 12)];
          outlined init with copy of Participant?((uint64_t)&v268 - v143, (uint64_t)v151, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined init with copy of Participant?((uint64_t)&v268 - v143, v152, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v153 = __swift_getEnumTagSinglePayload((uint64_t)v151, 1, v145);
          if (v153 == 1)
          {
            outlined destroy of SystemUpdateNotice?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v144, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v134, (void (*)(void))type metadata accessor for Participant);
            uint64_t v81 = (uint64_t)v307;
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
            if (__swift_getEnumTagSinglePayload(v152, 1, v145) == 1)
            {
              outlined destroy of SystemUpdateNotice?((uint64_t)v151, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              char v137 = 0;
LABEL_62:
              uint64_t v121 = (uint64_t)v300;
              uint64_t v90 = *(void *)&m24;
              uint64_t v88 = v308;
              goto LABEL_63;
            }
          }
          else
          {
            uint64_t v274 = &v268;
            MEMORY[0x1F4188790](v153);
            uint64_t v165 = (char *)&v268 - v143;
            outlined init with copy of Participant?((uint64_t)v151, (uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v166 = __swift_getEnumTagSinglePayload(v152, 1, v145);
            uint64_t v167 = v145;
            if (v166 != 1)
            {
              uint64_t v170 = v281;
              MEMORY[0x1F4188790](v166);
              int v172 = (char *)&v268 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, uint64_t, uint64_t))(v170 + 32))(v172, v152, v167);
              _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
              LODWORD(v289) = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v173 = *(void (**)(char *, uint64_t))(v170 + 8);
              v173(v172, v167);
              outlined destroy of SystemUpdateNotice?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              outlined destroy of SystemUpdateNotice?((uint64_t)v144, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              outlined destroy of ParticipantGridView.IdentifiableParticipantTile(c_low, (void (*)(void))type metadata accessor for Participant);
              uint64_t v174 = (uint64_t)v307;
              outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
              v173(v165, v167);
              uint64_t v81 = v174;
              outlined destroy of SystemUpdateNotice?((uint64_t)v151, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              char v137 = v289 ^ 1;
              goto LABEL_62;
            }
            outlined destroy of SystemUpdateNotice?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v144, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(c_low, (void (*)(void))type metadata accessor for Participant);
            uint64_t v81 = (uint64_t)v307;
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
            (*(void (**)(char *, uint64_t))(v281 + 8))(v165, v145);
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v151, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
          char v137 = 1;
          goto LABEL_62;
        }
        CGFloat v301 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel)));
        Swift::Bool v102 = (const void *)(v87 + *(int *)(*(void *)&v301 + 48));
        outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v87, *(uint64_t *)&ty, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        memcpy(v318, v102, 0xACuLL);
        int v103 = v305;
        uint64_t v104 = v289;
        if (v305)
        {
          CGAffineTransformMakeRotation((CGAffineTransform *)&v317, 1.57079633);
          *(_OWORD *)&v311.CGFloat a = *(_OWORD *)&v317.m11;
          *(_OWORD *)&v311.CGFloat c = *(_OWORD *)&v317.m13;
          *(_OWORD *)&v311.tdouble x = *(_OWORD *)&v317.m21;
          CATransform3DMakeAffineTransform(&v317, &v311);
          CGFloat m12 = v317.m11;
          CGFloat v295 = v317.m12;
          uint64_t c_low = *(void *)&v317.m13;
          CGFloat m22 = v317.m21;
          CGFloat m21 = v317.m14;
          uint64_t v285 = *(void *)&v317.m23;
          CGFloat m23 = v317.m22;
          CGFloat v105 = v317.m31;
          CGFloat m24 = v317.m24;
          CGFloat v106 = v317.m32;
          CGFloat v107 = v317.m33;
          CGFloat v108 = v317.m34;
          CGFloat v109 = v317.m41;
          CGFloat v110 = v317.m42;
          CGFloat v111 = v317.m43;
          CGFloat v112 = v317.m44;
        }
        else
        {
          CGFloat m12 = *((double *)&v318[2] + 1);
          uint64_t c_low = *((void *)&v318[3] + 1);
          CGFloat v295 = *(double *)&v318[3];
          CGFloat m22 = *((double *)&v318[4] + 1);
          CGFloat m21 = *(double *)&v318[4];
          uint64_t v285 = *((void *)&v318[5] + 1);
          CGFloat m23 = *(double *)&v318[5];
          CGFloat v105 = *((double *)&v318[6] + 1);
          CGFloat m24 = *(double *)&v318[6];
          CGFloat v107 = *((double *)&v318[7] + 1);
          CGFloat v106 = *(double *)&v318[7];
          CGFloat v109 = *((double *)&v318[8] + 1);
          CGFloat v108 = *(double *)&v318[8];
          CGFloat v111 = *((double *)&v318[9] + 1);
          CGFloat v110 = *(double *)&v318[9];
          CGFloat v112 = *(double *)&v318[10];
        }
        uint64_t v138 = *(void *)&d;
        char v139 = BYTE8(v318[10]);
        uint64_t v140 = outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v310, *(uint64_t *)&d, (void (*)(void))type metadata accessor for Participant);
        if (v103 & 1 | ((v139 & 1) == 0))
        {
          int v305 = v103;
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v138, (void (*)(void))type metadata accessor for Participant);
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v81, (void (*)(void))type metadata accessor for ParticipantViewModel);
          char v141 = 0;
          uint64_t v121 = (uint64_t)v300;
LABEL_66:
          uint64_t v187 = v81 + *(int *)(*(void *)&v301 + 48);
          uint64_t v188 = *(void *)&ty;
          outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(*(uint64_t *)&ty, v81, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
          outlined init with copy of Participant?((uint64_t)v318, v187, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
          CGFloat v189 = v295;
          *(CGFloat *)(v187 + 40) = m12;
          *(CGFloat *)(v187 + 48) = v189;
          CGFloat v190 = m21;
          *(void *)(v187 + 56) = c_low;
          *(CGFloat *)(v187 + 64) = v190;
          CGFloat v191 = m23;
          *(CGFloat *)(v187 + 72) = m22;
          *(CGFloat *)(v187 + 80) = v191;
          uint64_t v192 = *(void *)&m24;
          *(void *)(v187 + 88) = v285;
          *(void *)(v187 + 96) = v192;
          *(CGFloat *)(v187 + 104) = v105;
          *(CGFloat *)(v187 + 112) = v106;
          *(CGFloat *)(v187 + 120) = v107;
          *(CGFloat *)(v187 + 128) = v108;
          *(CGFloat *)(v187 + 136) = v109;
          *(CGFloat *)(v187 + 144) = v110;
          *(CGFloat *)(v187 + 152) = v111;
          *(CGFloat *)(v187 + 160) = v112;
          *(unsigned char *)(v187 + 168) = v141 & 1;
          *(_WORD *)(v187 + 169) = 256;
          *(unsigned char *)(v187 + 171) = 0;
          swift_storeEnumTagMultiPayload();
          memset(&v317, 0, 72);
          LOWORD(v317.m32) = -16384;
          swift_beginAccess();
          specialized Dictionary._Variant.setValue(_:forKey:)();
          swift_endAccess();
          outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v318);
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v188, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
          goto LABEL_67;
        }
        uint64_t v271 = (uint64_t)&v268;
        MEMORY[0x1F4188790](v140);
        unint64_t v154 = ((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v155 = (char *)&v268 - v154;
        uint64_t v156 = v275;
        ((void (*)(char *, uint64_t, uint64_t))v282)((char *)&v268 - v154, v138 + *((int *)v304 + 5), v275);
        __swift_storeEnumTagSinglePayload((uint64_t)&v268 - v154, 0, 1, v156);
        uint64_t v157 = (uint64_t)v309 + OBJC_IVAR____TtC15ConversationKit15ParticipantView_participantIdentifier;
        uint64_t v158 = swift_beginAccess();
        uint64_t v304 = &v268;
        MEMORY[0x1F4188790](v158);
        uint64_t v159 = (char *)&v268 - v154;
        uint64_t v160 = outlined init with copy of Participant?(v157, (uint64_t)&v268 - v154, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        char v282 = &v268;
        MEMORY[0x1F4188790](v160);
        uint64_t v162 = (char *)&v268 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v163 = (uint64_t)&v162[*((int *)v274 + 12)];
        outlined init with copy of Participant?((uint64_t)&v268 - v154, (uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined init with copy of Participant?((uint64_t)&v268 - v154, v163, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v164 = __swift_getEnumTagSinglePayload((uint64_t)v162, 1, v156);
        if (v164 == 1)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v155, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(*(uint64_t *)&d, (void (*)(void))type metadata accessor for Participant);
          uint64_t v81 = (uint64_t)v307;
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
          if (__swift_getEnumTagSinglePayload(v163, 1, v156) == 1)
          {
            outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            char v141 = 0;
LABEL_65:
            uint64_t v121 = (uint64_t)v300;
            uint64_t v88 = v308;
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v274 = &v268;
          MEMORY[0x1F4188790](v164);
          uint64_t v168 = (char *)&v268 - v154;
          outlined init with copy of Participant?((uint64_t)v162, (uint64_t)v168, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v169 = __swift_getEnumTagSinglePayload(v163, 1, v156);
          if (v169 != 1)
          {
            BOOL v289 = &v268;
            uint64_t v181 = v281;
            MEMORY[0x1F4188790](v169);
            uint64_t v183 = (char *)&v268 - ((v182 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(v181 + 32))(v183, v163, v156);
            _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
            char v184 = dispatch thunk of static Equatable.== infix(_:_:)();
            id v185 = *(void (**)(char *, uint64_t))(v181 + 8);
            v185(v183, v156);
            outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v155, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(*(uint64_t *)&d, (void (*)(void))type metadata accessor for Participant);
            uint64_t v186 = (uint64_t)v307;
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
            v185(v168, v156);
            uint64_t v81 = v186;
            outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            char v141 = v184 ^ 1;
            goto LABEL_65;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v155, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(*(uint64_t *)&d, (void (*)(void))type metadata accessor for Participant);
          uint64_t v81 = (uint64_t)v307;
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v307, (void (*)(void))type metadata accessor for ParticipantViewModel);
          (*(void (**)(char *, uint64_t))(v281 + 8))(v168, v156);
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)v162, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        char v141 = 1;
        goto LABEL_65;
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v281 + 8))(v79, v61);
      uint64_t v76 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
      int v305 = 0;
    }
    uint64_t v81 = (uint64_t)v307;
    goto LABEL_26;
  }
  return __swift_storeEnumTagSinglePayload(a7, 1, 1, v31);
}

uint64_t ParticipantGridView.updateViews(for:localParticipantOrientation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for Participant(0);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v119 = v9;
  uint64_t v129 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v128 = v11;
  uint64_t v118 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_2_3();
  uint64_t v139 = v13;
  uint64_t v135 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14;
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x1F4188790](v18);
  uint64_t v127 = (uint64_t)v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v140 = (uint64_t)v116 - v20;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v23 = v22;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_5_1();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v3 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_59_5();
  OUTLINED_FUNCTION_19();
  v25();
  char v26 = _dispatchPreconditionTest(_:)();
  uint64_t v27 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 8))(v3, v21);
  if ((v26 & 1) == 0)
  {
    __break(1u);
LABEL_47:
    v149[0].CGFloat a = 0.0;
    v149[0].CGFloat b = -2.68156159e154;
    uint64_t v113 = v28;
    _StringGuts.grow(_:)(64);
    v114._object = (void *)0x80000001C3798000;
    v114._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
    String.append(_:)(v114);
    uint64_t v150 = v113;
    v115._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1C31F216CLL);
  }
  MEMORY[0x1F4188790](v27);
  swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)();
  uint64_t v30 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation;
  uint64_t v131 = *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation);
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation) = a2;
  uint64_t v31 = *(void *)(v29 + 16);
  if (v31)
  {
    uint64_t v125 = v30;
    uint64_t v126 = v4;
    v116[1] = v29;
    uint64_t v117 = a2;
    uint64_t v32 = v4 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
    uint64_t v33 = v4 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo;
    uint64_t v34 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v35 = v29 + ((v34 + 32) & ~v34);
    OUTLINED_FUNCTION_2();
    uint64_t v136 = v32;
    OUTLINED_FUNCTION_2();
    uint64_t v123 = v34 | 7;
    uint64_t v124 = (v34 + 16) & ~v34;
    unint64_t v122 = (v17 + v124 + 7) & 0xFFFFFFFFFFFFFFF8;
    p_double c = &v149[0].c;
    unint64_t v121 = v122 + 48;
    uint64_t v36 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    uint64_t v137 = *(void *)(v15 + 72);
    uint64_t v37 = v140;
    uint64_t v134 = a1;
    uint64_t v138 = v33;
    while (1)
    {
      uint64_t v144 = v31;
      *(void *)&long long v148 = v35;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v35, v37, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(v36);
      *(void *)&long long v147 = v116;
      uint64_t v39 = OUTLINED_FUNCTION_8(v38);
      uint64_t v41 = *(void *)(v40 + 64);
      MEMORY[0x1F4188790](v39);
      uint64_t v42 = v36;
      unint64_t v43 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
      int v44 = (char *)v116 - v43;
      uint64_t v45 = v37;
      uint64_t v46 = v139;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v45, v139, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
      uint64_t v47 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_1_5();
      uint64_t v143 = v48;
      char v141 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
      v141((char *)v116 - v43, v46, v47);
      uint64_t v49 = 1;
      uint64_t v50 = __swift_storeEnumTagSinglePayload((uint64_t)v116 - v43, 0, 1, v47);
      uint64_t v146 = v116;
      MEMORY[0x1F4188790](v50);
      uint64_t v51 = (char *)v116 - v43;
      uint64_t v142 = type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(0);
      if (!__swift_getEnumTagSinglePayload(v33, 1, v142))
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))((char *)v116 - v43, v33, v47);
        uint64_t v49 = 0;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v116 - v43, v49, 1, v47);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
      uint64_t v145 = v116;
      uint64_t v53 = OUTLINED_FUNCTION_8(v52);
      MEMORY[0x1F4188790](v53);
      OUTLINED_FUNCTION_5_1();
      uint64_t v55 = v49 + *(int *)(v54 + 56);
      outlined init with copy of Participant?((uint64_t)v116 - v43, v49, v42);
      outlined init with copy of Participant?((uint64_t)v116 - v43, v55, v42);
      uint64_t v56 = OUTLINED_FUNCTION_69(v49);
      uint64_t v36 = v42;
      if (v58)
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v51, v42);
        outlined destroy of SystemUpdateNotice?((uint64_t)v44, v42);
        OUTLINED_FUNCTION_69(v55);
        if (!v58) {
          goto LABEL_14;
        }
        outlined destroy of SystemUpdateNotice?(v49, v42);
        OUTLINED_FUNCTION_31_18();
      }
      else
      {
        MEMORY[0x1F4188790](v56);
        uint64_t v57 = (char *)v116 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of Participant?(v49, (uint64_t)v57, v42);
        uint64_t v59 = OUTLINED_FUNCTION_69(v55);
        if (v58)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v51, v42);
          outlined destroy of SystemUpdateNotice?((uint64_t)v44, v42);
          OUTLINED_FUNCTION_26_2();
          v60();
LABEL_14:
          outlined destroy of SystemUpdateNotice?(v49, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
          uint64_t v42 = (uint64_t *)v148;
LABEL_15:
          uint64_t v37 = v140;
          uint64_t v61 = v140 + *(int *)(v135 + 20);
          uint64_t v62 = *(void **)v61;
          uint64_t v63 = *(void *)(v61 + 8);
          uint64_t v64 = self;
          id v65 = v62;
          id v66 = objc_msgSend(v64, sel_currentDevice);
          id v67 = objc_msgSend(v66, sel_userInterfaceIdiom);

          CGFloat b = 0.0;
          CGFloat a = 1.0;
          if (v67)
          {
            double c = OUTLINED_FUNCTION_24_4();
            uint64_t v74 = v144;
            uint64_t v33 = v138;
          }
          else
          {
            OUTLINED_FUNCTION_2();
            uint64_t v74 = v144;
            uint64_t v33 = v138;
            if ((static AmbientState.isPresented & 1) == 0)
            {
              uint64_t v28 = v117;
              double c = 0.0;
              CGFloat d = 1.0;
              tdouble x = 0.0;
              tdouble y = 0.0;
              switch(v117)
              {
                case 0:
                  CGFloat v110 = 1.57079633;
                  goto LABEL_40;
                case 1:
                  goto LABEL_41;
                case 2:
                  CGFloat v110 = -1.57079633;
                  goto LABEL_40;
                case 3:
                  CGFloat v110 = 3.14159265;
LABEL_40:
                  CGAffineTransformMakeRotation(v149, v110);
                  CGFloat a = v149[0].a;
                  CGFloat b = v149[0].b;
                  double c = v149[0].c;
                  CGFloat d = v149[0].d;
                  tdouble x = v149[0].tx;
                  tdouble y = v149[0].ty;
                  goto LABEL_41;
                default:
                  goto LABEL_47;
              }
            }
            double c = OUTLINED_FUNCTION_24_4();
          }
LABEL_41:
          *(CGFloat *)uint64_t v151 = a;
          *(CGFloat *)&v151[1] = b;
          *(double *)&v151[2] = c;
          *(CGFloat *)&v151[3] = d;
          *(CGFloat *)&v151[4] = tx;
          *(CGFloat *)&v151[5] = ty;
          uint64_t v111 = swift_getObjectType();
          (*(void (**)(void *, uint64_t, uint64_t))(v63 + 88))(v151, v111, v63);

          goto LABEL_42;
        }
        uint64_t v132 = v116;
        char v133 = v116;
        uint64_t v75 = v143;
        MEMORY[0x1F4188790](v59);
        OUTLINED_FUNCTION_64();
        v141((char *)v36, v55, v47);
        _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
        char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        int v77 = *(void (**)(uint64_t *, uint64_t))(v75 + 8);
        uint64_t v42 = (uint64_t *)(v75 + 8);
        uint64_t v78 = v36;
        uint64_t v36 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
        v77(v78, v47);
        outlined destroy of SystemUpdateNotice?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of SystemUpdateNotice?((uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v77((uint64_t *)v57, v47);
        outlined destroy of SystemUpdateNotice?(v49, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        OUTLINED_FUNCTION_31_18();
        if ((v76 & 1) == 0) {
          goto LABEL_15;
        }
      }
      uint64_t v80 = v125;
      uint64_t v79 = v126;
      if (v131 == *(void *)(v126 + v125)
        || !MEMORY[0x1C8776240](v136)
        || (uint64_t v81 = *(void *)(v136 + 8),
            uint64_t v82 = swift_getObjectType(),
            uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 112))(v82, v81),
            char v85 = v84,
            swift_unknownObjectRelease(),
            (v85 & 1) != 0)
        || v83)
      {
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v140, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        return swift_bridgeObjectRelease();
      }
      uint64_t v86 = *(void *)(v79 + v80);
      uint64_t v87 = v128;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v51, v128, (void (*)(void))type metadata accessor for Participant.State);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v37 = v140;
      if (EnumCaseMultiPayload != 4) {
        break;
      }
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v90 = (const void *)(v87 + *(int *)(v89 + 48));
      OUTLINED_FUNCTION_8_2((uint64_t *)(v87 + *(int *)(v89 + 64)));
      memcpy(v149, v90, sizeof(v149));
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v91();
      CGFloat v92 = v149[0].c;
      __int16 ty_low = LOWORD(v149[1].ty);
      swift_bridgeObjectRetain();
      outlined destroy of Participant.MediaInfo((uint64_t)v149);
      uint64_t v33 = v138;
      if (v92 == 0.0) {
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
      if ((ty_low & 0x100) == 0) {
        goto LABEL_29;
      }
      uint64_t v94 = 1;
      uint64_t v36 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      uint64_t v95 = v142;
LABEL_32:
      if (__swift_getEnumTagSinglePayload(v33, 1, v95)) {
        char v100 = 0;
      }
      else {
        char v100 = *(unsigned char *)(v33 + *(int *)(v95 + 28)) == 1;
      }
      double v101 = static ParticipantGridView.remoteParticipantRotationAngle(localOrientation:remoteOrientation:shouldReverse:)(v86, v94, v100);
      CGAffineTransformMakeRotation(v149, v101);
      long long v147 = *(_OWORD *)&v149[0].c;
      long long v148 = *(_OWORD *)&v149[0].a;
      CGFloat v102 = v149[0].tx;
      CGFloat v103 = v149[0].ty;
      uint64_t v104 = self;
      uint64_t v105 = v127;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v37, v127, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v106 = swift_allocObject();
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v105, v106 + v124, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      unint64_t v107 = v106 + v122;
      long long v108 = v147;
      *(_OWORD *)unint64_t v107 = v148;
      *(_OWORD *)(v107 + 16) = v108;
      *(CGFloat *)(v107 + 32) = v102;
      *(CGFloat *)(v107 + 40) = v103;
      *(void *)&v149[0].tdouble x = partial apply for closure #3 in ParticipantGridView.updateViews(for:localParticipantOrientation:);
      *(void *)&v149[0].tdouble y = v106;
      *(void *)&v149[0].CGFloat a = MEMORY[0x1E4F143A8];
      *(void *)&v149[0].CGFloat b = 1107296256;
      *(void *)&v149[0].double c = thunk for @escaping @callee_guaranteed () -> ();
      *(void *)&v149[0].CGFloat d = &block_descriptor_42;
      CGFloat v109 = _Block_copy(v149);
      swift_release();
      objc_msgSend(v104, sel_animateWithDuration_animations_, v109, 0.4);
      _Block_release(v109);
      uint64_t v74 = v144;
LABEL_42:
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v37, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      uint64_t v35 = (uint64_t)v42 + v137;
      uint64_t v31 = v74 - 1;
      if (!v31) {
        return swift_bridgeObjectRelease();
      }
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v87, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v33 = v138;
LABEL_29:
    uint64_t v96 = v119;
    uint64_t v97 = v37 + *(int *)(v118 + 24);
    uint64_t v94 = *(void *)v97;
    int v98 = *(unsigned __int8 *)(v97 + 8);
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v51, v119, (void (*)(void))type metadata accessor for Participant);
    if (v98 == 1)
    {
      ParticipantGridView.orientation(for:default:)();
      uint64_t v94 = v99;
    }
    uint64_t v95 = v142;
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v96, (void (*)(void))type metadata accessor for Participant);
    uint64_t v36 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    goto LABEL_32;
  }
  return swift_bridgeObjectRelease();
}

void ParticipantGridView.orientation(for:default:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  if (!objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags), sel_uPlusOneFullBleedHandoffEnabled))
  {
    uint64_t v7 = v21;
    Participant.videoInfo.getter();
    outlined init with take of AspectRatio?((uint64_t)v21, (uint64_t)v23, &demangling cache variable for type metadata for Participant.VideoInfo?);
    if (!v23[0]) {
      goto LABEL_25;
    }
LABEL_24:
    outlined release of LinearGradient((uint64_t)v7);
    goto LABEL_25;
  }
  swift_retain();
  ParticipantGridView.VideoInfoCache.info(for:)(v2, (uint64_t)v17);
  swift_release();
  outlined init with take of AspectRatio?((uint64_t)v17, (uint64_t)v23, &demangling cache variable for type metadata for Participant.VideoInfo?);
  uint64_t v3 = v23[0];
  if (v23[0])
  {
    char v4 = v24;
    outlined release of LinearGradient((uint64_t)v17);
    int v5 = v4 & 1;
    int v6 = v5;
  }
  else
  {
    int v6 = 0;
    int v5 = 1;
  }
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*(void *)(v9 + 16)
    && (type metadata accessor for Participant(0),
        unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(),
        (v11 & 1) != 0))
  {
    unsigned int v12 = *(unsigned __int16 *)(*(void *)(v9 + 56) + 80 * v10 + 72);
    swift_endAccess();
    if (v12 >> 14 <= 2) {
      goto LABEL_25;
    }
  }
  else
  {
    swift_endAccess();
  }
  Participant.videoInfo.getter();
  outlined init with take of AspectRatio?((uint64_t)v18, (uint64_t)v21, &demangling cache variable for type metadata for Participant.VideoInfo?);
  uint64_t v13 = v21[0];
  if (v21[0])
  {
    char v14 = v22;
    outlined release of LinearGradient((uint64_t)v18);
    BOOL v15 = (v14 & 1) == 0;
  }
  else
  {
    BOOL v15 = 1;
  }
  if ((ParticipantGridView.isOneToOneMode.getter() & 1) == 0) {
    goto LABEL_23;
  }
  if (!v13)
  {
    if (!v5) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  BOOL v16 = !v3 || v15;
  if ((v16 | v6))
  {
LABEL_23:
    uint64_t v7 = v19;
    Participant.videoInfo.getter();
    outlined init with take of AspectRatio?((uint64_t)v19, (uint64_t)v20, &demangling cache variable for type metadata for Participant.VideoInfo?);
    if (!v20[0]) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_25:
  OUTLINED_FUNCTION_28();
}

double static ParticipantGridView.remoteParticipantRotationAngle(localOrientation:remoteOrientation:shouldReverse:)(uint64_t a1, uint64_t a2, char a3)
{
  switch(a1)
  {
    case 0:
      double result = -1.57079633;
      switch(a2)
      {
        case 0:
          BOOL v4 = (a3 & 1) == 0;
          double result = -3.14159265;
          goto LABEL_13;
        case 1:
          return 1.57079633;
        case 2:
          BOOL v5 = (a3 & 1) == 0;
          double result = -3.14159265;
          goto LABEL_20;
        case 3:
          return result;
        default:
          goto LABEL_24;
      }
    case 1:
      double result = 3.14159265;
      switch(a2)
      {
        case 0:
          goto LABEL_9;
        case 1:
          return 0.0;
        case 2:
          goto LABEL_10;
        case 3:
          return result;
        default:
          goto LABEL_24;
      }
    case 2:
      double result = 1.57079633;
      switch(a2)
      {
        case 0:
          BOOL v5 = (a3 & 1) == 0;
          double result = 3.14159265;
LABEL_20:
          if (v5) {
            return 0.0;
          }
          return result;
        case 1:
          return -1.57079633;
        case 2:
          BOOL v4 = (a3 & 1) == 0;
          double result = 3.14159265;
LABEL_13:
          double v6 = 0.0;
          goto LABEL_14;
        case 3:
          return result;
        default:
          goto LABEL_24;
      }
    case 3:
      double result = 0.0;
      switch(a2)
      {
        case 0:
LABEL_10:
          BOOL v4 = (a3 & 1) == 0;
          double result = -1.57079633;
          double v6 = 1.57079633;
          goto LABEL_14;
        case 1:
          return 3.14159265;
        case 2:
LABEL_9:
          BOOL v4 = (a3 & 1) == 0;
          double result = 1.57079633;
          double v6 = -1.57079633;
LABEL_14:
          if (!v4) {
            return v6;
          }
          return result;
        case 3:
          return result;
        default:
          goto LABEL_24;
      }
    default:
      break;
  }
LABEL_24:
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  type metadata accessor for CNKDeviceOrientation(0);
  v7._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x1C31F27ECLL);
}

id closure #3 in ParticipantGridView.updateViews(for:localParticipantOrientation:)(uint64_t a1, long long *a2)
{
  long long v6 = a2[1];
  long long v7 = *a2;
  uint64_t v2 = *((void *)a2 + 4);
  uint64_t v3 = *((void *)a2 + 5);
  BOOL v4 = *(void **)(a1 + *(int *)(type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0) + 20));
  v8[0] = v7;
  v8[1] = v6;
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  return objc_msgSend(v4, sel_setTransform_, v8);
}

Swift::Void __swiftcall ParticipantGridView.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(Swift::OpaquePointer a1, Swift::Bool isLocalMemberAuthorizedToChangeGroupMembership)
{
  uint64_t v4 = v2;
  BOOL v5 = isLocalMemberAuthorizedToChangeGroupMembership;
  uint64_t v113 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10_5();
  uint64_t v99 = v8;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_8_4();
  uint64_t v100 = v10;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v11);
  CGFloat v110 = (char *)&rawValue - v12;
  uint64_t v13 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v98 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_10_5();
  uint64_t v102 = v16;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_8_4();
  uint64_t v107 = v18;
  OUTLINED_FUNCTION_8_1();
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  char v22 = (char *)&rawValue - v21;
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_8_4();
  uint64_t v101 = v23;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_8_4();
  uint64_t v105 = v25;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v26);
  uint64_t v106 = (char *)&rawValue - v27;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_63();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v3 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v29();
  char v30 = _dispatchPreconditionTest(_:)();
  uint64_t v31 = OUTLINED_FUNCTION_43();
  v32(v31);
  if ((v30 & 1) == 0)
  {
    __break(1u);
    return;
  }
  uint64_t v33 = (unsigned char *)(v4
                + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership);
  OUTLINED_FUNCTION_11_0();
  BOOL v103 = v5;
  *uint64_t v33 = v5;
  uint64_t v34 = (char *)MEMORY[0x1E4FBC860];
  v116[0] = MEMORY[0x1E4FBC860];
  uint64_t v35 = *((void *)a1._rawValue + 2);
  swift_bridgeObjectRetain();
  uint64_t v108 = v4;
  uint64_t v112 = v13;
  Swift::String v114 = v22;
  if (!v35) {
    goto LABEL_23;
  }
  uint64_t v36 = (uint64_t)v106;
  uint64_t v104 = v106 + 3;
  OUTLINED_FUNCTION_12_19();
  uint64_t v111 = *(void *)(v37 + 72);
  rawValue = a1._rawValue;
  uint64_t v97 = v38;
  uint64_t v39 = (char *)a1._rawValue + v38;
  uint64_t v40 = (uint64_t)v110;
  do
  {
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v39, v36, (void (*)(void))type metadata accessor for Participant);
    uint64_t v41 = type metadata accessor for Date();
    p_rawValue = &rawValue;
    OUTLINED_FUNCTION_4();
    uint64_t v43 = v42;
    uint64_t v45 = *(void *)(v44 + 64);
    MEMORY[0x1F4188790](v46);
    unint64_t v47 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v36, v40, (void (*)(void))type metadata accessor for Participant.State);
    if (swift_getEnumCaseMultiPayload() != 4)
    {
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v40, (void (*)(void))type metadata accessor for Participant.State);
      char v22 = v114;
LABEL_20:
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v36, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_21;
    }
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
    uint64_t v49 = v40 + *(int *)(v48 + 48);
    OUTLINED_FUNCTION_8_2((uint64_t *)(v40 + *(int *)(v48 + 64)));
    OUTLINED_FUNCTION_63_0();
    v51(v50);
    outlined destroy of Participant.MediaInfo(v49);
    uint64_t v52 = Date.timeIntervalSinceNow.getter();
    double v54 = v53;
    CGFloat v109 = &rawValue;
    MEMORY[0x1F4188790](v52);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))((char *)&rawValue - v47, (char *)&rawValue - v47, v41);
    if (v54 <= 0.0)
    {
      Date.timeIntervalSinceNow.getter();
      double v57 = v56;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_50();
      BOOL v55 = -v57 <= (double)(*(uint64_t (**)(uint64_t))(v58 + 696))(v59);
    }
    else
    {
      BOOL v55 = 0;
    }
    uint64_t v36 = (uint64_t)v106;
    unint64_t v60 = *(void (**)(char *, uint64_t))(v43 + 8);
    v60((char *)&rawValue - v47, v41);
    uint64_t v61 = OUTLINED_FUNCTION_43();
    ((void (*)(uint64_t))v60)(v61);
    uint64_t v62 = v112;
    uint64_t v63 = v105;
    int v64 = v104[*(int *)(v112 + 24)];
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v36, v105, (void (*)(void))type metadata accessor for Participant);
    if (v64 != 1)
    {
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v63, (void (*)(void))type metadata accessor for Participant);
      char v22 = v114;
      goto LABEL_20;
    }
    uint64_t v65 = *(void *)(v63 + *(int *)(v62 + 28));
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v63, (void (*)(void))type metadata accessor for Participant);
    char v22 = v114;
    if (!v65 || !v55) {
      goto LABEL_20;
    }
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v36, v101, (void (*)(void))type metadata accessor for Participant);
    uint64_t v66 = v116[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v66 + 16) + 1, 1);
      uint64_t v66 = v116[0];
    }
    unint64_t v68 = *(void *)(v66 + 16);
    unint64_t v67 = *(void *)(v66 + 24);
    if (v68 >= v67 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
      uint64_t v66 = v116[0];
    }
    *(void *)(v66 + 16) = v68 + 1;
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile(v101, v66 + v97 + v68 * v111, (void (*)(void))type metadata accessor for Participant);
LABEL_21:
    uint64_t v40 = (uint64_t)v110;
    v39 += v111;
    --v35;
  }
  while (v35);
  uint64_t v34 = (char *)v116[0];
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v69 = *((void *)v34 + 2);
  if (v69)
  {
    type metadata accessor for ParticipantView();
    OUTLINED_FUNCTION_12_19();
    uint64_t v71 = (uint64_t)&v34[v70];
    uint64_t v73 = *(void *)(v72 + 72);
    p_rawValue = (void **)&v117[4];
    CGFloat v110 = v34;
    uint64_t v111 = (uint64_t)&v116[12];
    while (1)
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v71, (uint64_t)v22, (void (*)(void))type metadata accessor for Participant);
      ParticipantGridView.tile(for:ofAClass:)();
      if (v74) {
        break;
      }
LABEL_47:
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v22, (void (*)(void))type metadata accessor for Participant);
      v71 += v73;
      if (!--v69) {
        goto LABEL_48;
      }
    }
    uint64_t v75 = v74;
    if (!swift_dynamicCastClass()) {
      goto LABEL_46;
    }
    uint64_t v76 = v107;
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v22, v107, (void (*)(void))type metadata accessor for Participant);
    if (v103)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_50();
      char v79 = (*(uint64_t (**)(uint64_t))(v77 + 608))(v78);
      uint64_t v80 = v102;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v107, v102, (void (*)(void))type metadata accessor for Participant);
      if (v79)
      {
        uint64_t v81 = v100;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v80, v100, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v83 = (const void *)(v81 + *(int *)(v82 + 48));
          OUTLINED_FUNCTION_8_2((uint64_t *)(v81 + *(int *)(v82 + 64)));
          char v84 = v83;
          uint64_t v80 = v102;
          memcpy(v116, v84, sizeof(v116));
          type metadata accessor for Date();
          OUTLINED_FUNCTION_0();
          OUTLINED_FUNCTION_26_2();
          v86(v85);
          outlined init with copy of Participant?(v111, (uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          outlined destroy of Participant.MediaInfo((uint64_t)v116);
          if (v117[3] != 1)
          {
            memcpy(v118, v117, 0xD1uLL);
            char v87 = v118[96];
            outlined destroy of Participant.ScreenInfo((uint64_t)v118);
            goto LABEL_40;
          }
        }
        else
        {
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v81, (void (*)(void))type metadata accessor for Participant.State);
          memset(v117, 0, 24);
          v117[3] = 1;
          bzero(p_rawValue, 0xB1uLL);
        }
        outlined destroy of SystemUpdateNotice?((uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
        uint64_t v89 = v99;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v80, v99, (void (*)(void))type metadata accessor for Participant.State);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v91 = (const void *)(v89 + *(int *)(v90 + 48));
          OUTLINED_FUNCTION_8_2((uint64_t *)(v89 + *(int *)(v90 + 64)));
          memcpy(v116, v91, sizeof(v116));
          type metadata accessor for Date();
          OUTLINED_FUNCTION_0();
          OUTLINED_FUNCTION_26_2();
          v93(v92);
          uint64_t v94 = v116[2];
          char v95 = v116[11];
          swift_bridgeObjectRetain();
          outlined destroy of Participant.MediaInfo((uint64_t)v116);
          uint64_t v80 = v102;
          if (v94)
          {
            swift_bridgeObjectRelease();
            char v87 = v95 & 1;
LABEL_40:
            char v22 = v114;
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v102, (void (*)(void))type metadata accessor for Participant);
            outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v107, (void (*)(void))type metadata accessor for Participant);
            if (v87)
            {
LABEL_44:
              char v88 = ParticipantGridView.isOneToOneMode.getter() ^ 1;
LABEL_45:
              ParticipantView.setKickMemberButtonIsVisible(_:)(v88 & 1);
LABEL_46:

              goto LABEL_47;
            }
LABEL_35:
            char v88 = 0;
            goto LABEL_45;
          }
        }
        else
        {
          outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v89, (void (*)(void))type metadata accessor for Participant.State);
          uint64_t v80 = v102;
        }
      }
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v80, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v107, (void (*)(void))type metadata accessor for Participant);
      char v22 = v114;
      goto LABEL_44;
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v76, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_35;
  }
LABEL_48:
  swift_release();
}

void ParticipantGridView.updateKickingAvailable(for:isKickingAvailable:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  char v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_16_0();
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_61();
  char v10 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v2 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v11();
  _dispatchPreconditionTest(_:)();
  uint64_t v12 = OUTLINED_FUNCTION_38_10();
  v13(v12);
  if (v10)
  {
    type metadata accessor for ParticipantView();
    ParticipantGridView.tile(for:ofAClass:)();
    if (!v14)
    {
LABEL_13:
      OUTLINED_FUNCTION_28();
      return;
    }
    uint64_t v15 = v14;
    if (!swift_dynamicCastClass())
    {
LABEL_12:

      goto LABEL_13;
    }
    if (v5)
    {
      uint64_t v16 = (unsigned __int8 *)(v3
                              + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_isLocalMemberAuthorizedToChangeGroupMembership);
      OUTLINED_FUNCTION_2();
      LODWORD(v16) = *v16;
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v7, v1, (void (*)(void))type metadata accessor for Participant);
      if (v16 == 1)
      {
        char v17 = Participant.canShowKickButtonOnVideoTile.getter();
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v1, (void (*)(void))type metadata accessor for Participant);
        if (v17)
        {
          char v18 = ParticipantGridView.isOneToOneMode.getter() ^ 1;
LABEL_11:
          ParticipantView.setKickMemberButtonIsVisible(_:)(v18 & 1);
          goto LABEL_12;
        }
LABEL_10:
        char v18 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v7, v1, (void (*)(void))type metadata accessor for Participant);
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v1, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_10;
  }
  __break(1u);
}

void ParticipantGridView.updateAudioPower(for:audioPower:)(Swift::Float a1)
{
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_63();
  char v4 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v1 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v5();
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = OUTLINED_FUNCTION_5_12();
  v7(v6);
  if (v4)
  {
    type metadata accessor for Participant(0);
    type metadata accessor for ParticipantView();
    OUTLINED_FUNCTION_41_0();
    ParticipantGridView.tile(for:ofAClass:)();
    if (v8)
    {
      uint64_t v9 = v8;
      if (swift_dynamicCastClass()) {
        ParticipantMonogramView.updateAudioVisualization(with:)(a1);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void ParticipantGridView.updateGradientOverlayView(for:isHidden:alpha:)()
{
  OUTLINED_FUNCTION_31();
  char v2 = v1;
  uint64_t v4 = v3;
  char v6 = v5;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_61();
  char v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v0 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v9();
  _dispatchPreconditionTest(_:)();
  uint64_t v10 = OUTLINED_FUNCTION_38_10();
  v11(v10);
  if (v8)
  {
    type metadata accessor for Participant(0);
    type metadata accessor for ParticipantView();
    ParticipantGridView.tile(for:ofAClass:)();
    if (v12)
    {
      uint64_t v13 = v12;
      if (swift_dynamicCastClass()) {
        ParticipantView.updateGradientOverlayView(isHidden:alpha:)(v6, v4, v2 & 1);
      }
    }
    OUTLINED_FUNCTION_28();
  }
  else
  {
    __break(1u);
  }
}

void ParticipantGridView.updateVisibleCameraPosition(for:visibleCameraPosition:animated:)(uint64_t a1, char a2, char a3)
{
  uint64_t v5 = v3;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_5_1();
  char v9 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v4 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_59_5();
  OUTLINED_FUNCTION_19();
  v10();
  _dispatchPreconditionTest(_:)();
  uint64_t v11 = OUTLINED_FUNCTION_39_12();
  v12(v11);
  if (v9)
  {
    type metadata accessor for Participant(0);
    type metadata accessor for ParticipantView();
    ParticipantGridView.tile(for:ofAClass:)();
    if (v13)
    {
      uint64_t v14 = v13;
      if (swift_dynamicCastClass()) {
        ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(a2, *(void *)(v5 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation), 0, a3 & 1);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t ParticipantGridView.updateEMA(for:ema:audioPriority:videoPriority:)(uint64_t a1, double a2, float a3, float a4)
{
  uint64_t v8 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_2_3();
  uint64_t v51 = v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_61();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v4 = static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_19();
  v17();
  char v18 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v4, v13);
  if (v18)
  {
    MEMORY[0x1F4188790](result);
    *(&v48 - 2) = a1;
    swift_bridgeObjectRetain();
    specialized _ArrayProtocol.filter(_:)();
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v49 = v51 + *(int *)(v8 + 20);
      float v22 = a3 + 0.01;
      float v23 = a4 + 0.01;
      OUTLINED_FUNCTION_22_0();
      uint64_t v48 = v24;
      uint64_t v26 = v24 + v25;
      uint64_t v50 = *(void *)(v10 + 72);
      do
      {
        uint64_t v27 = v51;
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v26, v51, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v28 = *(void **)v49;
        uint64_t v52 = *(void *)(v49 + 8);
        id v29 = v28;
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v27, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
        uint64_t v53 = 0;
        unint64_t v54 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v30._uint64_t countAndFlagsBits = 0x203A414D45;
        v30._object = (void *)0xE500000000000000;
        String.append(_:)(v30);
        Float.write<A>(to:)();
        v31._uint64_t countAndFlagsBits = 0x3A6863656570530ALL;
        v31._object = (void *)0xE900000000000020;
        String.append(_:)(v31);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_50();
        float v34 = (*(float (**)(uint64_t))(v32 + 328))(v33);
        if (v34 >= v22) {
          uint64_t v35 = 0x65736C6166;
        }
        else {
          uint64_t v35 = 1702195828;
        }
        if (v34 >= v22) {
          unint64_t v36 = 0xE500000000000000;
        }
        else {
          unint64_t v36 = 0xE400000000000000;
        }
        unint64_t v37 = v36;
        String.append(_:)(*(Swift::String *)&v35);
        swift_bridgeObjectRelease();
        v38._uint64_t countAndFlagsBits = 40;
        v38._object = (void *)0xE100000000000000;
        String.append(_:)(v38);
        Float.write<A>(to:)();
        v39._uint64_t countAndFlagsBits = 0x203A6E6769530A29;
        v39._object = (void *)0xE800000000000000;
        String.append(_:)(v39);
        float v41 = (*(float (**)(uint64_t))(*(void *)static Defaults.shared + 328))(v40);
        if (v41 >= v23) {
          uint64_t v42 = 0x65736C6166;
        }
        else {
          uint64_t v42 = 1702195828;
        }
        if (v41 >= v23) {
          uint64_t v43 = (void *)0xE500000000000000;
        }
        else {
          uint64_t v43 = (void *)0xE400000000000000;
        }
        uint64_t ObjectType = swift_getObjectType();
        v45._uint64_t countAndFlagsBits = v42;
        v45._object = v43;
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._uint64_t countAndFlagsBits = 40;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        Float.write<A>(to:)();
        v47._uint64_t countAndFlagsBits = 41;
        v47._object = (void *)0xE100000000000000;
        String.append(_:)(v47);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v52 + 80))(v53, v54, ObjectType);

        swift_bridgeObjectRelease();
        v26 += v50;
        --v21;
      }
      while (v21);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ParticipantGridView.updateViews(for:localParticipantOrientation:)(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_5_1();
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a1, v2, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
  OUTLINED_FUNCTION_63_0();
  v8();
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_64_1();
  static UUID.== infix(_:_:)();
  uint64_t v9 = OUTLINED_FUNCTION_39_12();
  v10(v9);
  return a2 & 1;
}

void ParticipantGridView.aspectRatio(for:default:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  outlined init with take of AspectRatio(v6, (uint64_t)v40);
  int8x16_t v35 = (int8x16_t)v40[0];
  int8x16_t v36 = (int8x16_t)v40[1];
  __int8 v7 = v41;
  if (!objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags), sel_uPlusOneFullBleedHandoffEnabled))
  {
    Participant.videoInfo.getter();
    outlined init with take of AspectRatio?((uint64_t)v46, (uint64_t)v48, &demangling cache variable for type metadata for Participant.VideoInfo?);
    if (!v48[0])
    {
      int8x16_t v19 = v35;
      int8x16_t v20 = v36;
      goto LABEL_25;
    }
    int8x16_t v31 = v49;
    int8x16_t v33 = v50;
    char v11 = v51;
    uint64_t v12 = v46;
LABEL_24:
    outlined release of LinearGradient((uint64_t)v12);
    int8x16_t v19 = v31;
    int8x16_t v20 = v33;
    __int8 v7 = v11 & 1;
    goto LABEL_25;
  }
  swift_retain();
  ParticipantGridView.VideoInfoCache.info(for:)(v3, (uint64_t)v37);
  swift_release();
  outlined init with take of AspectRatio?((uint64_t)v37, (uint64_t)v48, &demangling cache variable for type metadata for Participant.VideoInfo?);
  uint64_t v8 = v48[0];
  if (v48[0])
  {
    int8x16_t v28 = v50;
    int8x16_t v29 = v49;
    char v9 = v51;
    outlined release of LinearGradient((uint64_t)v37);
    int v10 = v9 & 1;
    int v30 = v10;
  }
  else
  {
    int v30 = 0;
    int8x16_t v28 = 0u;
    int8x16_t v29 = 0u;
    int v10 = 1;
  }
  uint64_t v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState);
  swift_beginAccess();
  uint64_t v14 = *v13;
  if (*(void *)(v14 + 16)
    && (type metadata accessor for Participant(0),
        unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(),
        (v16 & 1) != 0))
  {
    uint64_t v17 = *(void *)(v14 + 56) + 80 * v15;
    int8x16_t v32 = *(int8x16_t *)(v17 + 40);
    int8x16_t v34 = *(int8x16_t *)(v17 + 56);
    unsigned int v18 = *(unsigned __int16 *)(v17 + 72);
    swift_endAccess();
    if (v18 >> 14 != 3)
    {
      __int8 v7 = v18 & 1;
      int8x16_t v19 = v32;
      int8x16_t v20 = v34;
      goto LABEL_25;
    }
  }
  else
  {
    swift_endAccess();
  }
  Participant.videoInfo.getter();
  outlined init with take of AspectRatio?((uint64_t)v38, (uint64_t)v46, &demangling cache variable for type metadata for Participant.VideoInfo?);
  uint64_t v21 = v46[0];
  if (v46[0])
  {
    char v22 = v47;
    outlined release of LinearGradient((uint64_t)v38);
    BOOL v23 = (v22 & 1) == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  if (ParticipantGridView.isOneToOneMode.getter())
  {
    if (v21)
    {
      if (v8) {
        int v24 = v23;
      }
      else {
        int v24 = 1;
      }
      if ((v24 | v30)) {
        goto LABEL_22;
      }
    }
    else if (v10)
    {
      goto LABEL_22;
    }
    __int8 v7 = 0;
    int8x16_t v20 = v28;
    int8x16_t v19 = v29;
    goto LABEL_25;
  }
LABEL_22:
  Participant.videoInfo.getter();
  outlined init with take of AspectRatio?((uint64_t)v39, (uint64_t)v42, &demangling cache variable for type metadata for Participant.VideoInfo?);
  if (v42[0])
  {
    int8x16_t v31 = v43;
    int8x16_t v33 = v44;
    char v11 = v45;
    uint64_t v12 = v39;
    goto LABEL_24;
  }
  v25.i64[0] = 0;
  v26.i64[0] = v8;
  int8x16_t v27 = (int8x16_t)vdupq_lane_s64(vceqq_s64(v26, v25).i64[0], 0);
  int8x16_t v20 = vbslq_s8(v27, v36, v28);
  int8x16_t v19 = vbslq_s8(v27, v35, v29);
  if (v8) {
    __int8 v7 = v30;
  }
LABEL_25:
  *uint64_t v5 = v19;
  v5[1] = v20;
  v5[2].i8[0] = v7;
  OUTLINED_FUNCTION_28();
}

uint64_t ParticipantGridView.updateCacheIfNeeded(for:)(uint64_t a1)
{
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags), sel_uPlusOneFullBleedHandoffEnabled);
  if (!result) {
    return result;
  }
  if (ParticipantGridView.isOneToOneMode.getter())
  {
    uint64_t result = ParticipantGridView.shouldShowLastFrameUI.getter();
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState);
    swift_beginAccess();
    uint64_t v5 = *v4;
    if (*(void *)(v5 + 16)
      && (type metadata accessor for Participant(0),
          unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(),
          (v7 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v5 + 56) + 80 * v6;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v8 + 24);
      uint64_t v12 = *(void *)(v8 + 32);
      uint64_t v13 = *(void *)(v8 + 40);
      uint64_t v14 = *(void *)(v8 + 48);
      uint64_t v18 = *(void *)(v8 + 56);
      uint64_t v19 = *(void *)v8;
      uint64_t v15 = *(void *)(v8 + 64);
      unsigned int v16 = *(unsigned __int16 *)(v8 + 72);
      uint64_t result = swift_endAccess();
      BOOL v17 = v16 >= 0xC000 && (v9 | v19 | v10 | v11 | v12 | v13 | v14 | v18 | v15) == 0;
      if (!v17 || v16 != 49152) {
        return result;
      }
    }
    else
    {
      swift_endAccess();
    }
    swift_retain();
    ParticipantGridView.VideoInfoCache.update(for:)(a1);
    return swift_release();
  }
  memset(v20, 0, 74);
  swift_retain();
  ParticipantGridView.VideoInfoCache.setVideoInfo(_:for:)((uint64_t)v20, a1);
  return swift_release();
}

char *ParticipantGridView.createParticipantView(frame:isOneToOneMode:)(char a1)
{
  id v3 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  uint64_t v4 = ParticipantView.init(frame:localParticipant:)();
  ParticipantView.isInRoster.setter(0);
  uint64_t v5 = v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v5)
    && (uint64_t v6 = *(void *)(v5 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 80))(v11, ObjectType, v6),
        swift_unknownObjectRelease(),
        LOBYTE(v11[0]) == 2)
    || (double v8 = 0.0, (a1 & 1) == 0))
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    double v8 = (*(double (**)(void))(*(void *)static Defaults.shared + 384))();
  }
  uint64_t v9 = (double *)&v4[OBJC_IVAR____TtC15ConversationKit15ParticipantView_customCornerRadius];
  swift_beginAccess();
  *uint64_t v9 = v8;
  ParticipantView.customCornerRadius.didset();
  UIView.addTapInteraction(withTapCount:)(1);
  return v4;
}

uint64_t ParticipantGridView.shouldManuallyRotateViews(for:)(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_currentDevice);
  id v3 = objc_msgSend(v2, sel_userInterfaceIdiom);

  if (v3 || (a1 | 2) != 2) {
    return 0;
  }
  ParticipantGridView.layoutIdiom.getter(&v5);
  return v5 & 1;
}

uint64_t ParticipantGridView.layoutIdiom.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v3);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v5 + 104))(ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  else
  {
    *a1 = 2;
  }
  return result;
}

void ParticipantGridView.mediaPipDodgingFrame(for:isFullScreen:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = &v2[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate];
  swift_beginAccess();
  if (!MEMORY[0x1C8776240](v6)) {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)v6 + 1);
  uint64_t ObjectType = swift_getObjectType();
  double v9 = (*(double (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
  double v11 = v10;
  swift_unknownObjectRelease();
  if (!MEMORY[0x1C8776240](v6)) {
    goto LABEL_8;
  }
  uint64_t v12 = *((void *)v6 + 1);
  uint64_t v13 = swift_getObjectType();
  char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12);
  double v16 = v15;
  double v18 = v17;
  swift_unknownObjectRelease();
  if (v14 == 5 || v14 == 4) {
    goto LABEL_8;
  }
  double v20 = v16;
  double v21 = v18;
  if (v16 == 0.0 && v18 == 0.0) {
    goto LABEL_8;
  }
  static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v22 = static Defaults.shared;
  BOOL v23 = (void (**)(void))(*(void *)static Defaults.shared + 384);
  int v24 = *v23;
  (*v23)();
  uint64_t v25 = static Platform.current.getter();
  int64x2_t v26 = *(void (**)(uint64_t))(*(void *)v22 + 488);
  v26(v25);
  double v27 = static Layout.MediaPip.padding.getter();
  v24();
  uint64_t v28 = static Platform.current.getter();
  v26(v28);
  double v29 = v27 + v20;
  int v30 = v14 & 0xFE;
  double v31 = v30 == 2 ? v11 : 0.0;
  double v109 = v21;
  double v32 = v21 + 16.0;
  objc_msgSend(v3, sel_safeAreaInsetFrame);
  double v33 = CGRectGetHeight(v111) - (v21 + 16.0) - v9 - v31;
  objc_msgSend(v3, sel_safeAreaInsetFrame);
  double v34 = CGRectGetWidth(v112) - v29;
  if (v33 <= 0.0 && v34 <= 0.0)
  {
LABEL_8:
    ParticipantGridView.centeredFrame(for:isFullScreen:)(a1, a2 & 1);
    return;
  }
  double v105 = v20;
  double v108 = v34;
  objc_msgSend(v3, sel_safeAreaInsetFrame);
  double v106 = v36;
  double v107 = v35;
  double v38 = v37;
  double v40 = v39;
  ParticipantGridView.effectiveLayoutStyle(for:)(a1);
  if (MEMORY[0x1C8776240](v6))
  {
    uint64_t v41 = *((void *)v6 + 1);
    uint64_t v42 = swift_getObjectType();
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(v42, v41);
    char v45 = v44;
    swift_unknownObjectRelease();
    if ((v45 & 1) == 0)
    {
      BOOL v46 = v43 == 0;
      double v47 = v38;
      BOOL v49 = v38 < v40;
      double v48 = v108;
      BOOL v49 = v49 && v108 < v33;
      if (!v49)
      {
        if ((v14 & 0xFD) == 0)
        {
          double v50 = v29;
          double v52 = v106;
          double v51 = v107;
LABEL_38:
          double v29 = v50;
          goto LABEL_41;
        }
LABEL_37:
        double v52 = v106;
        double v51 = v107;
        double v50 = 0.0;
        goto LABEL_38;
      }
LABEL_28:
      double v53 = 0.0;
      if (v30 != 2) {
        double v53 = v32;
      }
      v113.origin.double x = UIEdgeInsetsInsetRect(v107, v106, v47, v40, v9 + v53, 0.0);
      double x = v113.origin.x;
      double y = v113.origin.y;
      double width = v113.size.width;
      double height = v113.size.height;
      double v58 = CGRectGetHeight(v113);
      v114.origin.double x = x;
      v114.origin.double y = y;
      v114.size.double width = width;
      v114.size.double height = height;
      if (CGRectGetWidth(v114) < v58)
      {
        if (a1 == 1) {
          int v59 = 1;
        }
        else {
          int v59 = v110;
        }
        if ((v46 & v59) != 1) {
          goto LABEL_90;
        }
LABEL_65:
        objc_msgSend(v3, sel_safeAreaInsetFrame);
        double v88 = CGRectGetWidth(v117) + -2.0;
        if (v9 <= 0.0)
        {
          if (v30 != 2)
          {
            v121.origin.double x = x;
            v121.origin.double y = y;
            v121.size.double width = width;
            v121.size.double height = height;
            if (v88 < CGRectGetHeight(v121))
            {
              v122.origin.double x = x;
              v122.origin.double y = y;
              v122.size.double width = width;
              v122.size.double height = height;
              double v97 = CGRectGetHeight(v122) - v88 - v11;
              if (v97 > 0.0) {
                double v98 = v97;
              }
              else {
                double v98 = 0.0;
              }
              double x = UIEdgeInsetsInsetRect(x, y, width, height, v98, 0.0);
              double y = v99;
              double width = v100;
              double height = v101;
            }
            goto LABEL_87;
          }
        }
        else
        {
          double v89 = 0.0;
          if (v88 > 0.0) {
            double v89 = v109 / v105 * v88;
          }
          double v90 = v89 - v109;
          if (v90 <= 0.0) {
            double v90 = 0.0;
          }
          if (v30 == 2) {
            double v91 = 0.0;
          }
          else {
            double v91 = v90;
          }
          double x = UIEdgeInsetsInsetRect(x, y, width, height, v91, 0.0);
          double y = v92;
          double width = v93;
          double height = v94;
          if (v30 != 2)
          {
LABEL_87:
            if (height < width)
            {
              v123.origin.double x = x;
              v123.origin.double y = y;
              v123.size.double width = width;
              v123.size.double height = height;
              CGRectGetWidth(v123);
              v124.origin.double x = x;
              v124.origin.double y = y;
              v124.size.double width = width;
              v124.size.double height = height;
              CGRectGetHeight(v124);
              double x = UIEdgeInsetsInsetRect(x, y, width, height, 0.0, 0.0);
              double y = v102;
              double width = v103;
              double height = v104;
            }
LABEL_89:
            v125.origin.double x = x;
            v125.origin.double y = y;
            v125.size.double width = width;
            v125.size.double height = height;
            CGRectGetHeight(v125);
            v126.origin.double x = x;
            v126.origin.double y = y;
            v126.size.double width = width;
            v126.size.double height = height;
            CGRectGetWidth(v126);
            UIEdgeInsetsInsetRect(x, y, width, height, 0.0, 0.0);
            goto LABEL_90;
          }
        }
        if (v9 != 0.0) {
          goto LABEL_90;
        }
        goto LABEL_89;
      }
      if (v46 & v110) {
        goto LABEL_65;
      }
      v118.origin.double x = x;
      v118.origin.double y = y;
      v118.size.double width = width;
      v118.size.double height = height;
      double v95 = CGRectGetWidth(v118);
      v119.origin.double x = x;
      v119.origin.double y = y;
      v119.size.double width = width;
      v119.size.double height = height;
      double v96 = v95 - CGRectGetHeight(v119) + 2.0;
      if (v46)
      {
        if (v30 != 2) {
          goto LABEL_94;
        }
        if (a1 == 1) {
          goto LABEL_78;
        }
        if ((v14 & 0xFD) != 0 || v105 >= v109)
        {
LABEL_94:
          double v76 = 0.0;
          double v77 = 0.0;
          double v78 = x;
          double v79 = y;
          double v80 = width;
          double v81 = height;
        }
        else
        {
          double v76 = 0.0;
          double v78 = x;
          double v79 = y;
          double v80 = width;
          double v81 = height;
          double v77 = v96;
        }
LABEL_54:
        UIEdgeInsetsInsetRect(v78, v79, v80, v81, v76, v77);
        goto LABEL_90;
      }
LABEL_78:
      v120.origin.double x = x;
      v120.origin.double y = y;
      v120.size.double width = width;
      v120.size.double height = height;
      CGRectInset(v120, v96 * 0.5, 0.0);
      goto LABEL_90;
    }
  }
  double v47 = v38;
  if (v38 >= v40)
  {
    LOBYTE(v46) = 0;
    double v48 = v108;
    if ((v14 & 0xFD) != 0) {
      goto LABEL_37;
    }
  }
  else
  {
    double v48 = v108;
    BOOL v46 = 0;
    if (v108 < v33) {
      goto LABEL_28;
    }
    if ((v14 & 0xFD) != 0) {
      goto LABEL_37;
    }
  }
  double v52 = v106;
  double v51 = v107;
LABEL_41:
  double v60 = v47;
  double v61 = UIEdgeInsetsInsetRect(v51, v52, v47, v40, 0.0, v29);
  double v65 = v61;
  double v66 = v62;
  CGFloat v67 = v63;
  CGFloat v68 = v64;
  if (v60 >= v40)
  {
    if (v63 >= v64 || a1 < 3) {
      char v83 = 1;
    }
    else {
      char v83 = v110;
    }
    if ((v83 & 1) == 0)
    {
      CGFloat v84 = v61;
      CGFloat v85 = v62;
      double v86 = CGRectGetHeight(*(CGRect *)&v61);
      v115.origin.double x = v84;
      v115.origin.double y = v85;
      v115.size.double width = v67;
      v115.size.double height = v68;
      CGFloat v87 = (v86 - CGRectGetWidth(v115) + 2.0) * 0.5;
      v116.origin.double x = v84;
      v116.origin.double y = v85;
      v116.size.double width = v67;
      v116.size.double height = v68;
      CGRectInset(v116, 0.0, v87);
    }
    goto LABEL_90;
  }
  if (v33 <= v48)
  {
    if (v110) {
      double v69 = 1.0;
    }
    else {
      double v69 = -1.0;
    }
    if (((v110 ^ 1 | v46) & 1) != 0 || (double v69 = 1.0, v105 >= v109))
    {
      double v70 = v61;
      double v71 = v62;
      CGFloat v72 = CGRectGetHeight(*(CGRect *)&v61);
      double v66 = v71;
      double v65 = v70;
      double v9 = v72 - v9 - v48;
    }
    double v73 = 0.0;
    if ((v14 & 0xFD) == 0) {
      double v73 = v11;
    }
    double v74 = v9 - v73;
    double v75 = -0.0;
    if (v30 != 2) {
      double v75 = v74;
    }
    double v76 = v69 + v75;
    double v77 = 0.0;
    double v78 = v65;
    double v79 = v66;
    double v80 = v67;
    double v81 = v68;
    goto LABEL_54;
  }
LABEL_90:
  UIRectRoundToViewScale();
}

uint64_t ParticipantGridView.mediaPipIsVisible.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    swift_unknownObjectRelease();
    if (v5 == 5) {
      return 0;
    }
    else {
      return (v7 & 0x7FFFFFFFFFFFFFFFLL) != 0 || (v9 & 0x7FFFFFFFFFFFFFFFLL) != 0;
    }
  }
  return result;
}

double ParticipantGridView.frameForSingleParticipantView(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  if (a4 >= a3)
  {
    double MinX = CGRectGetMinX(*(CGRect *)&a1);
    v13.origin.double x = a1;
    v13.origin.double y = a2;
    v13.size.double width = a3;
    v13.size.double height = a4;
    CGRectGetMidY(v13);
    v14.origin.double x = a1;
    v14.origin.double y = a2;
    v14.size.double width = a3;
    v14.size.double height = a4;
    CGRectGetWidth(v14);
    v15.origin.double x = a1;
    v15.origin.double y = a2;
    v15.size.double width = a3;
    v15.size.double height = a4;
    CGRectGetWidth(v15);
  }
  else
  {
    double MinX = CGRectGetMidX(*(CGRect *)&a1) + a4 * -0.5;
    v10.origin.double x = a1;
    v10.origin.double y = a2;
    v10.size.double width = a3;
    v10.size.double height = a4;
    CGRectGetMinY(v10);
    v11.origin.double x = a1;
    v11.origin.double y = a2;
    v11.size.double width = a3;
    v11.size.double height = a4;
    CGRectGetHeight(v11);
    v12.origin.double x = a1;
    v12.origin.double y = a2;
    v12.size.double width = a3;
    v12.size.double height = a4;
    CGRectGetHeight(v12);
  }
  return MinX;
}

uint64_t ParticipantGridView.framesForParticipantViewPair(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  CGRect v12 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v13 = v4;
  CGRect v14 = &v4[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle];
  swift_beginAccess();
  LOBYTE(v14) = *v14;
  v15.n128_f64[0] = static Layout.MediaPip.padding.getter();
  id v77 = v13;
  if (v14)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v16 = static Defaults.shared;
    (*(void (**)(__n128))(*(void *)static Defaults.shared + 384))(v15);
    uint64_t v17 = static Platform.current.getter();
    double v18 = (*(double (**)(uint64_t))(*(void *)v16 + 488))(v17);
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v19 = static Defaults.shared;
    (*(void (**)(__n128))(*(void *)static Defaults.shared + 384))(v15);
    uint64_t v20 = static Platform.current.getter();
    (*(void (**)(uint64_t))(*(void *)v19 + 488))(v20);
    double v18 = 16.0;
  }
  if (a4 >= a3)
  {
    if ((a4 - v18) * 0.5 >= a3) {
      double v50 = a3;
    }
    else {
      double v50 = (a4 - v18) * 0.5;
    }
    double v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v51(v12, *MEMORY[0x1E4FBBEA8], v9);
    id v52 = objc_msgSend(v13, sel_traitCollection);
    objc_msgSend(v52, sel_displayScale);
    double v25 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v53, v50);

    unint64_t v54 = *(void (**)(char *, uint64_t))(v10 + 8);
    v54(v12, v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1C37696D0;
    v82.origin.double x = a1;
    v82.origin.double y = a2;
    v82.size.double width = a3;
    v82.size.double height = a4;
    CGFloat MidX = CGRectGetMidX(v82);
    double v76 = v25 * 0.5;
    double v56 = MidX - v25 * 0.5;
    uint64_t v57 = *MEMORY[0x1E4FBBEB0];
    v51(v12, v57, v9);
    id v58 = objc_msgSend(v13, (SEL)&selRef_leftAnchor);
    objc_msgSend(v58, sel_displayScale);
    double v60 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v59, v56);

    v54(v12, v9);
    v83.origin.double x = a1;
    v83.origin.double y = a2;
    v83.size.double width = a3;
    v83.size.double height = a4;
    double v61 = v18 * 0.5;
    double v62 = CGRectGetMidY(v83) - v18 * 0.5 - v25;
    v51(v12, v57, v9);
    id v63 = objc_msgSend(v13, sel_traitCollection);
    objc_msgSend(v63, sel_displayScale);
    double v65 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v64, v62);

    v54(v12, v9);
    *(double *)(v27 + 32) = v60;
    *(double *)(v27 + 40) = v65;
    *(double *)(v27 + 48) = v25;
    *(double *)(v27 + 56) = v25;
    v84.origin.double x = a1;
    v84.origin.double y = a2;
    v84.size.double width = a3;
    v84.size.double height = a4;
    double v66 = CGRectGetMidX(v84) - v76;
    v51(v12, v57, v9);
    id v67 = v77;
    id v68 = objc_msgSend(v77, sel_traitCollection);
    objc_msgSend(v68, sel_displayScale);
    double v44 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v69, v66);

    v54(v12, v9);
    v85.origin.double x = a1;
    v85.origin.double y = a2;
    v85.size.double width = a3;
    v85.size.double height = a4;
    double v70 = v61 + CGRectGetMidY(v85);
    v51(v12, v57, v9);
    id v71 = objc_msgSend(v67, sel_traitCollection);
    objc_msgSend(v71, sel_displayScale);
    double v49 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v72, v70);

    v54(v12, v9);
  }
  else
  {
    if ((a3 - v18) * 0.5 >= a4) {
      double v21 = a4;
    }
    else {
      double v21 = (a3 - v18) * 0.5;
    }
    uint64_t v22 = *(void (**)(void))(v10 + 104);
    ((void (*)(char *, void, uint64_t))v22)(v12, *MEMORY[0x1E4FBBEA8], v9);
    v74[1] = v10 + 104;
    id v23 = objc_msgSend(v13, sel_traitCollection);
    objc_msgSend(v23, sel_displayScale);
    double v25 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v24, v21);

    int64x2_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
    v26(v12, v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1C37696D0;
    v78.origin.double x = a1;
    v78.origin.double y = a2;
    v78.size.double width = a3;
    v78.size.double height = a4;
    CGFloat v28 = CGRectGetMidX(v78);
    double v76 = v18 * 0.5;
    double v29 = v28 - v18 * 0.5 - v25;
    uint64_t v30 = *MEMORY[0x1E4FBBEB0];
    v22(v12);
    id v31 = objc_msgSend(v13, (SEL)&selRef_leftAnchor);
    objc_msgSend(v31, sel_displayScale);
    double v33 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v32, v29);

    v26(v12, v9);
    double v75 = v26;
    v79.origin.double x = a1;
    v79.origin.double y = a2;
    v79.size.double width = a3;
    v79.size.double height = a4;
    double v34 = CGRectGetMidY(v79) - v25 * 0.5;
    ((void (*)(char *, uint64_t, uint64_t))v22)(v12, v30, v9);
    id v35 = v77;
    id v36 = objc_msgSend(v77, sel_traitCollection);
    objc_msgSend(v36, sel_displayScale);
    double v38 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v37, v34);

    v26(v12, v9);
    *(double *)(v27 + 32) = v33;
    *(double *)(v27 + 40) = v38;
    *(double *)(v27 + 48) = v25;
    *(double *)(v27 + 56) = v25;
    v80.origin.double x = a1;
    v80.origin.double y = a2;
    v80.size.double width = a3;
    v80.size.double height = a4;
    double v39 = CGRectGetMidX(v80);
    ((void (*)(char *, uint64_t, uint64_t))v22)(v12, v30, v9);
    id v40 = objc_msgSend(v35, sel_traitCollection);
    objc_msgSend(v40, sel_displayScale);
    double v42 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v41, v76);

    uint64_t v43 = v75;
    v75(v12, v9);
    double v44 = v39 + v42;
    v81.origin.double x = a1;
    v81.origin.double y = a2;
    v81.size.double width = a3;
    v81.size.double height = a4;
    double MidY = CGRectGetMidY(v81);
    ((void (*)(char *, uint64_t, uint64_t))v22)(v12, v30, v9);
    id v46 = objc_msgSend(v35, sel_traitCollection);
    objc_msgSend(v46, sel_displayScale);
    double v48 = CGFloat.rounded(_:toScale:)((uint64_t)v12, v47, v25 * 0.5);

    v43(v12, v9);
    double v49 = MidY - v48;
  }
  *(double *)(v27 + 64) = v44;
  *(double *)(v27 + 72) = v49;
  *(double *)(v27 + 80) = v25;
  *(double *)(v27 + 88) = v25;
  return v27;
}

uint64_t closure #2 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v23 - v6, a1, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v23 - v6, 0, 1, v7);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  CGRect v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t)&v12[*(int *)(v10 + 56)];
  outlined init with copy of Participant?((uint64_t)v23 - v6, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of Participant?(a2, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v7);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v23 - v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    int v15 = __swift_getEnumTagSinglePayload(v13, 1, v7);
    if (v15 == 1) {
      uint64_t v16 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    }
    else {
      uint64_t v16 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
    }
    if (v15 == 1) {
      char v17 = -1;
    }
    else {
      char v17 = 0;
    }
  }
  else
  {
    v23[1] = v23;
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    outlined init with copy of Participant?((uint64_t)v12, (uint64_t)v23 - v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v18 = __swift_getEnumTagSinglePayload(v13, 1, v7);
    if (v18 == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v23 - v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v8 + 8))((char *)v23 - v6, v7);
      uint64_t v16 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
      char v17 = 0;
    }
    else
    {
      MEMORY[0x1F4188790](v18);
      uint64_t v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v20, v13, v7);
      _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBB8]);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      double v21 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21(v20, v7);
      uint64_t v16 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      outlined destroy of SystemUpdateNotice?((uint64_t)v23 - v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v21((char *)v23 - v6, v7);
    }
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v12, v16);
  return v17 & 1;
}

uint64_t ParticipantGridView.framesForParticipantViews(in:frameCount:indexToExpand:)(unint64_t a1, unint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v8 = v7;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v16 = static Defaults.shared;
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 576))() & 1) != 0
    || ((*(uint64_t (**)(void))(*(void *)v16 + 544))() & 1) == 0)
  {
    a2 = 0;
    char v17 = 1;
  }
  else
  {
    char v17 = a3 & 1;
  }
  ParticipantGridView.effectiveLayoutStyle(for:)(a1);
  if (v51 == 1)
  {
    double v18 = static Layout.MediaPip.padding.getter();
    (*(void (**)(double))(*(void *)v16 + 384))(v18);
    uint64_t v19 = static Platform.current.getter();
    double v20 = (*(double (**)(uint64_t))(*(void *)v16 + 488))(v19);
    double v21 = (*(double (**)(void))(*(void *)v16 + 496))();
    __int16 v22 = v7[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceType];
    char v23 = ParticipantGridView.mediaPipIsVisible.getter();
    objc_msgSend(v8, sel_displayScale);
    if (v23) {
      __int16 v25 = 256;
    }
    else {
      __int16 v25 = 0;
    }
    uint64_t v26 = GridLayout.init(containingRect:frameCount:indexToExpand:configuration:displayScale:)(a1, a2, v17, v25 | v22, a4, a5, a6, a7, v20, v21, v24);
  }
  else
  {
    uint64_t v27 = &v7[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate];
    swift_beginAccess();
    uint64_t v28 = MEMORY[0x1C8776240](v27);
    BOOL v29 = v28;
    if (v28)
    {
      uint64_t v30 = *((void *)v27 + 1);
      uint64_t ObjectType = swift_getObjectType();
      char v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(ObjectType, v30);
      double v34 = v33;
      double v36 = v35;
      swift_unknownObjectRelease();
      BOOL v29 = v32 != 5 && ParticipantGridView.MediaPipInfo.flipsOrganicPairs.getter(v32, v34, v36);
    }
    double v37 = &v8[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_organicLayoutConfiguration];
    swift_beginAccess();
    v37[32] = v29;
    long long v38 = *((_OWORD *)v37 + 1);
    v53[0] = *(_OWORD *)v37;
    v53[1] = v38;
    BOOL v54 = v29;
    objc_msgSend(v8, sel_displayScale);
    uint64_t v26 = OrganicLayout.init(containingSize:frameCount:indexToExpand:configuration:displayScale:)(a1, a2, v17, (uint64_t)v53, a6, a7, v39);
  }
  uint64_t v40 = v26;
  uint64_t v41 = *(void *)(v26 + 16);
  if (v41)
  {
    uint64_t v52 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v42 = v52;
    uint64_t v43 = v40 + 56;
    do
    {
      CGRect v55 = CGRectOffset(*(CGRect *)(v43 - 24), a4, a5);
      CGFloat x = v55.origin.x;
      CGFloat y = v55.origin.y;
      CGFloat width = v55.size.width;
      CGFloat height = v55.size.height;
      unint64_t v48 = *(void *)(v52 + 16);
      if (v48 >= *(void *)(v52 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v52 + 16) = v48 + 1;
      double v49 = (CGFloat *)(v52 + 32 * v48);
      v49[4] = x;
      v49[5] = y;
      v49[6] = width;
      v49[7] = height;
      v43 += 32;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v42;
}

void closure #3 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0) - 8;
  MEMORY[0x1F4188790](v9);
  CGRect v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a2+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * a1, (uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
  char v13 = static UUID.== infix(_:_:)();
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v12, v14);
  if ((v13 & 1) == 0) {
    return;
  }
  if (*(void *)(a4 + 16) <= a1)
  {
LABEL_10:
    __break(1u);
    return;
  }
  type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  type metadata accessor for ParticipantView();
  if (swift_dynamicCastClass())
  {
    objc_msgSend(a5, sel_safeAreaInsetFrame);
    ParticipantGridView.frameForSingleParticipantView(in:)(v15, v16, v17, v18);
  }
}

double ParticipantGridView.frameForFullScreenParticipantView(fitting:layoutFrame:shouldUseSafeAreaInsets:forcePortraitSize:remoteVideoOrientation:)(int a1, int a2, uint64_t a3, int a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  uint64_t v11 = v10;
  int v76 = a1;
  uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  double v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation;
  int v26 = ParticipantGridView.shouldManuallyRotateViews(for:)(*(void *)&v10[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_deviceOrientation]);
  int v80 = a4;
  CGFloat v27 = a7;
  CGFloat v28 = a8;
  CGFloat v29 = a9;
  CGFloat v30 = a10;
  if (v26)
  {
    double Width = CGRectGetWidth(*(CGRect *)&v27);
    v82.origin.CGFloat x = a7;
    v82.origin.CGFloat y = a8;
    v82.size.CGFloat width = a9;
    v82.size.CGFloat height = a10;
    double Height = CGRectGetHeight(v82);
  }
  else
  {
    double Width = CGRectGetHeight(*(CGRect *)&v27);
    v83.origin.CGFloat x = a7;
    v83.origin.CGFloat y = a8;
    v83.size.CGFloat width = a9;
    v83.size.CGFloat height = a10;
    double Height = CGRectGetWidth(v83);
  }
  double v33 = Width / Height;
  double v34 = &v10[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate];
  swift_beginAccess();
  uint64_t v35 = MEMORY[0x1C8776240](v34);
  double v77 = a5;
  if (v35
    && (uint64_t v36 = *((void *)v34 + 1),
        uint64_t ObjectType = swift_getObjectType(),
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v36 + 80))(&v81, ObjectType, v36),
        swift_unknownObjectRelease(),
        v81 == 2)
    && (id v38 = objc_msgSend(self, sel_currentDevice),
        id v39 = objc_msgSend(v38, sel_userInterfaceIdiom),
        v38,
        !v39)
    && a9 > 0.0)
  {
    double v40 = a10 / a9;
  }
  else
  {
    double v40 = a6 / a5;
  }
  objc_msgSend(v11, sel_displayScale);
  double v42 = v41;
  uint64_t v79 = a3;
  double v78 = a6;
  if (a9 >= a10)
  {
    char v51 = *(void (**)(char *, void, uint64_t))(v22 + 104);
    v51(v24, *MEMORY[0x1E4FBBEA8], v21);
    uint64_t v52 = (void (**)(char *, uint64_t))(v22 + 8);
    if (v33 >= v40)
    {
      double v48 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v40 * a9);
      int v63 = v26;
      double v64 = *v52;
      (*v52)(v24, v21);
      v86.origin.CGFloat x = a7;
      v86.origin.CGFloat y = a8;
      v86.size.CGFloat width = a9;
      v86.size.CGFloat height = a10;
      double v65 = CGRectGetMidY(v86) + v48 * -0.5;
      v51(v24, *MEMORY[0x1E4FBBEB0], v21);
      double v57 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v65);
      v64(v24, v21);
      int v26 = v63;
      double v56 = 0.0;
      double v50 = a9;
    }
    else
    {
      int v53 = v26;
      double v50 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, a10 / v40);
      BOOL v54 = *v52;
      (*v52)(v24, v21);
      v84.origin.CGFloat x = a7;
      v84.origin.CGFloat y = a8;
      v84.size.CGFloat width = a9;
      v84.size.CGFloat height = a10;
      double v55 = CGRectGetMidX(v84) + v50 * -0.5;
      v51(v24, *MEMORY[0x1E4FBBEB0], v21);
      double v56 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v55);
      v54(v24, v21);
      double v57 = 0.0;
      if (v76)
      {
        objc_msgSend(v11, sel_safeAreaInsets);
        double v57 = v58;
      }
      double v48 = a10;
      int v26 = v53;
    }
    goto LABEL_33;
  }
  if (v26) {
    BOOL v43 = v33 < v40;
  }
  else {
    BOOL v43 = v40 < v33;
  }
  double v44 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 104);
  v44(v24, *MEMORY[0x1E4FBBEA8], v21);
  char v45 = (void (**)(char *, uint64_t))(v22 + 8);
  int v75 = a2;
  uint64_t v74 = v25;
  if (v43)
  {
    HIDWORD(v73) = v26;
    int v46 = v26 & 1;
    if (v46) {
      double v47 = 1.0 / v40;
    }
    else {
      double v47 = v40;
    }
    double v48 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v47 * a9);
    double v49 = *v45;
    (*v45)(v24, v21);
    if (!v46)
    {
      uint64_t v61 = *MEMORY[0x1E4FBBEB0];
      double v56 = 0.0;
      double v50 = a9;
      int v26 = HIDWORD(v73);
      goto LABEL_35;
    }
    double v50 = a9;
    int v26 = HIDWORD(v73);
  }
  else
  {
    if (v26) {
      double v59 = v40;
    }
    else {
      double v59 = 1.0 / v40;
    }
    double v50 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v59 * a10);
    double v49 = *v45;
    (*v45)(v24, v21);
    double v48 = a10;
  }
  v85.origin.CGFloat x = a7;
  v85.origin.CGFloat y = a8;
  v85.size.CGFloat width = a9;
  v85.size.CGFloat height = a10;
  double v60 = CGRectGetMidX(v85) + v50 * -0.5;
  uint64_t v61 = *MEMORY[0x1E4FBBEB0];
  v44(v24, v61, v21);
  double v56 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v60);
  v49(v24, v21);
  if (!v43)
  {
    double v57 = 0.0;
    if (v76)
    {
      objc_msgSend(v11, sel_safeAreaInsets);
      double v57 = v62;
    }
    LOBYTE(a2) = v75;
    uint64_t v25 = v74;
LABEL_33:
    uint64_t v66 = v79;
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v66 = v79;
  v87.origin.CGFloat x = a7;
  v87.origin.CGFloat y = a8;
  v87.size.CGFloat width = a9;
  v87.size.CGFloat height = a10;
  double v67 = CGRectGetMidY(v87) + v48 * -0.5;
  v44(v24, v61, v21);
  double v57 = CGFloat.rounded(_:toScale:)((uint64_t)v24, v42, v67);
  v49(v24, v21);
  LOBYTE(a2) = v75;
  uint64_t v25 = v74;
LABEL_36:
  if ((v80 & 1) == 0)
  {
    if (v66)
    {
      if (v66 != 2 || v77 >= v78) {
        goto LABEL_42;
      }
LABEL_44:
      int v69 = 1;
      goto LABEL_45;
    }
    if (v77 < v78) {
      goto LABEL_44;
    }
  }
LABEL_42:
  int v69 = 0;
LABEL_45:
  if static Platform.current.getter() != 1 && (a2)
  {
    v88.origin.CGFloat x = v56;
    v88.origin.CGFloat y = v57;
    v88.size.CGFloat width = v50;
    v88.size.CGFloat height = v48;
    double v70 = CGRectGetWidth(v88);
    v89.origin.CGFloat x = v56;
    v89.origin.CGFloat y = v57;
    v89.size.CGFloat width = v50;
    v89.size.CGFloat height = v48;
    if (CGRectGetHeight(v89) < v70) {
      int v71 = 1;
    }
    else {
      int v71 = v69;
    }
    if ((v26 & v71) == 1 && (*(void *)&v11[v25] | 2) != 2)
    {
      v90.origin.CGFloat x = v56;
      v90.origin.CGFloat y = v57;
      v90.size.CGFloat width = v50;
      v90.size.CGFloat height = v48;
      CGRectGetHeight(v90);
      v91.origin.CGFloat x = v56;
      v91.origin.CGFloat y = v57;
      v91.size.CGFloat width = v50;
      v91.size.CGFloat height = v48;
      CGRectGetWidth(v91);
    }
  }
  return v56;
}

ConversationKit::MultiwayViewController::LayoutStyle __swiftcall ParticipantGridView.effectiveLayoutStyle(for:)(Swift::Int a1)
{
  uint64_t v4 = v1;
  ConversationKit::MultiwayViewController::LayoutStyle result = ParticipantGridView.mediaPipIsVisible.getter();
  if ((result & 1) != 0 && a1 < 3)
  {
    char v6 = 0;
  }
  else
  {
    uint64_t v7 = (char *)(v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_layoutStyle);
    ConversationKit::MultiwayViewController::LayoutStyle result = OUTLINED_FUNCTION_2();
    char v6 = *v7;
  }
  *uint64_t v4 = v6;
  return result;
}

uint64_t ParticipantGridView.transformModelIfNeeded(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ParticipantViewModel(0);
  MEMORY[0x1F4188790](v10);
  CGRect v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  MEMORY[0x1F4188790](v13 - 8);
  CGFloat v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_featureFlags), sel_uPlusOneFullBleedHandoffEnabled)&& (ParticipantGridView.shouldShowLastFrameUI.getter())
  {
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a1, (uint64_t)v12, (void (*)(void))type metadata accessor for ParticipantViewModel);
    if (swift_getEnumCaseMultiPayload())
    {
      CGFloat v16 = type metadata accessor for ParticipantViewModel;
      uint64_t v17 = (uint64_t)v12;
    }
    else
    {
      CGFloat v18 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                        + 48)];
      outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v12, (uint64_t)v15, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
      memcpy(__dst, v18, 0xACuLL);
      ParticipantVideoView.ViewModel.contentsRect.getter();
      if (v19 == v20 && (ParticipantGridView.isOneToOneMode.getter() & 1) != 0)
      {
        uint64_t v21 = a3
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                     + 48);
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v15, a3, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a2, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
        Participant.contactDetails.getter();
        id v32 = v36;
        uint64_t v35 = v37;
        uint64_t v22 = v38;
        uint64_t v34 = v39;
        uint64_t v23 = v40;
        uint64_t v33 = v41;
        uint64_t v24 = v42;
        uint64_t v25 = *(void *)&v9[*(int *)(v7 + 32)];
        id v26 = v36;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
        swift_bridgeObjectRetain();
        outlined consume of AnsweringMachineCallStatus?(0, 0);
        id v27 = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of (title: String, subtitle: String?)?(0, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        uint64_t v28 = v35;
        *(void *)uint64_t v21 = v32;
        *(void *)(v21 + 8) = v28;
        uint64_t v29 = v34;
        *(void *)(v21 + 16) = v22;
        *(void *)(v21 + 24) = v29;
        uint64_t v30 = v33;
        *(void *)(v21 + 32) = v23;
        *(void *)(v21 + 40) = v30;
        *(void *)(v21 + 48) = v24;
        *(void *)(v21 + 56) = v25;
        *(_WORD *)(v21 + 64) = 0;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of AnsweringMachineCallStatus?(0, 0);
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)__dst);
        outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v15, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
        return swift_storeEnumTagMultiPayload();
      }
      outlined destroy of ParticipantVideoView.ViewModel((uint64_t)__dst);
      CGFloat v16 = type metadata accessor for ParticipantViewModel.ParticipantDetails;
      uint64_t v17 = (uint64_t)v15;
    }
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile(v17, (void (*)(void))v16);
  }
  return outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a1, a3, (void (*)(void))type metadata accessor for ParticipantViewModel);
}

uint64_t closure #1 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
  type metadata accessor for RemoteParticipantVideoProvider();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v29) + 0x188))())
  {

    return 0;
  }
  uint64_t v5 = (uint64_t *)(a2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16)
    && (type metadata accessor for Participant(0), unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(),
                                                     (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(v6 + 56) + 80 * v7;
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v27 = *(void *)(v9 + 24);
    uint64_t v28 = *(void *)(v9 + 8);
    uint64_t v12 = *(void *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 40);
    uint64_t v15 = *(void *)(v9 + 48);
    uint64_t v14 = *(void *)(v9 + 56);
    uint64_t v16 = *(void *)(v9 + 64);
    unsigned int v17 = *(unsigned __int16 *)(v9 + 72);
    swift_endAccess();
    outlined copy of ParticipantGridView.FrozenFrameOverlayState(v10, v28, v11, v27, v12, v13, v15, v14, v16, v17);

    if (v17 >> 14)
    {
      uint64_t v19 = v11;
      uint64_t v18 = v10;
      BOOL v20 = v17 >> 14 == 3 && (v28 | v10 | v11 | v27 | v12 | v13 | v15 | v14 | v16) == 0;
      uint64_t v21 = v28;
      uint64_t v22 = v27;
      uint64_t v23 = v12;
      uint64_t v24 = v13;
      uint64_t v25 = v15;
      uint64_t v26 = v14;
      BOOL v3 = v20 && v17 == 49152;
    }
    else
    {
      BOOL v3 = 1;
      uint64_t v19 = v11;
      uint64_t v18 = v10;
      uint64_t v21 = v28;
      uint64_t v22 = v27;
      uint64_t v23 = v12;
      uint64_t v24 = v13;
      uint64_t v25 = v15;
      uint64_t v26 = v14;
    }
    outlined consume of ParticipantGridView.FrozenFrameOverlayState(v18, v21, v19, v22, v23, v24, v25, v26, v16, v17);
  }
  else
  {
    swift_endAccess();

    return 1;
  }
  return v3;
}

uint64_t ParticipantGridView.scheduleUpdateToPausedHandoffOverlay(on:for:isMostActive:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v32 = a3;
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v31 + 64);
  MEMORY[0x1F4188790](v6 - 8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v36 = static OS_dispatch_queue.main.getter();
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v34 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v31 - v13;
  static DispatchTime.now()();
  MEMORY[0x1C8772E20](v14, 3.0);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v33 = v9 + 8;
  uint64_t v35 = v15;
  v15(v14, v8);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 24) = a2;
  swift_unknownObjectWeakInit();
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v32, (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for Participant);
  unint64_t v18 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = v17;
  outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (void (*)(void))type metadata accessor for Participant);
  *(unsigned char *)(v19 + v18 + v7) = a4;
  aBlock[4] = partial apply for closure #1 in ParticipantGridView.scheduleUpdateToPausedHandoffOverlay(on:for:isMostActive:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_62;
  BOOL v20 = _Block_copy(aBlock);
  swift_release();
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAFD0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v29 = (void *)v36;
  MEMORY[0x1C8773B10](v12, v24, v28, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  return v35(v12, v34);
}

double closure #2 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(uint64_t a1)
{
  swift_getObjectType();
  Participant.videoInfo.getter();
  outlined init with take of AspectRatio?((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for Participant.VideoInfo?);
  if (v12[0] && (char v2 = v13, outlined release of LinearGradient((uint64_t)v8), (v2 & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    ParticipantGridView.orientation(for:default:)();
    uint64_t v4 = v3;
  }
  Participant.videoInfo.getter();
  outlined init with take of AspectRatio?((uint64_t)v9, (uint64_t)v10, &demangling cache variable for type metadata for Participant.VideoInfo?);
  if (v10[0])
  {
    int v5 = v11;
    outlined release of LinearGradient((uint64_t)v9);
    char v6 = v5 == 1;
  }
  else
  {
    char v6 = 0;
  }
  return static ParticipantGridView.remoteParticipantRotationAngle(localOrientation:remoteOrientation:shouldReverse:)(a1, v4, v6);
}

void closure #3 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(void *a1, long long *a2)
{
  long long v6 = a2[1];
  long long v7 = *a2;
  uint64_t v3 = *((void *)a2 + 4);
  uint64_t v4 = *((void *)a2 + 5);
  int v5 = (objc_class *)type metadata accessor for ParticipantView();
  v9.receiver = a1;
  v9.super_class = v5;
  v10[0] = v7;
  v10[1] = v6;
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  objc_msgSendSuper2(&v9, sel_setTransform_, v10);
  v8.receiver = a1;
  v8.super_class = v5;
  objc_msgSendSuper2(&v8, sel_transform);
  ParticipantView.updateOverlayTransforms(with:)((CGFloat *)v10);
}

void closure #1 in ParticipantGridView.scheduleUpdateToPausedHandoffOverlay(on:for:isMostActive:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantViewModel?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v25.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x1C8776240](a1 + 16);
  if (v11)
  {
    uint64_t v12 = (char *)v11;
    swift_beginAccess();
    uint64_t v13 = MEMORY[0x1C8776240](a2 + 16);
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      uint64_t v15 = *(void *)(a2 + 24);
      if (ParticipantGridView.shouldShowLastFrameUI.getter())
      {
        uint64_t v16 = &v12[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_frozenFrameOverlayState];
        swift_beginAccess();
        uint64_t v17 = *(void *)v16;
        if (*(void *)(*(void *)v16 + 16))
        {
          type metadata accessor for Participant(0);
          unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)();
          if (v19)
          {
            uint64_t v20 = *(void *)(v17 + 56) + 80 * v18;
            unsigned int v21 = *(unsigned __int16 *)(v20 + 72);
            if (!(v21 >> 14))
            {
              uint64_t v22 = *(void *)(v20 + 64);
              uint64_t v29 = *(void *)(v20 + 56);
              uint64_t v30 = v22;
              long long v28 = *(_OWORD *)(v20 + 40);
              uint64_t v27 = *(unsigned __int8 *)(v20 + 32);
              uint64_t v23 = *(void *)(v20 + 24);
              uint64_t v24 = *(void *)v20;
              int v26 = v21 & 0x1010101 | 0x4000;
              int8x16_t v25 = *(int8x16_t *)(v20 + 8);
              swift_endAccess();
              uint64_t v31 = v24;
              int8x16_t v32 = vandq_s8(v25, (int8x16_t)xmmword_1C3775820);
              uint64_t v33 = v23;
              uint64_t v34 = v27;
              long long v35 = v28;
              uint64_t v36 = v29;
              uint64_t v37 = v30;
              __int16 v38 = v26;
              swift_beginAccess();
              swift_bridgeObjectRetain();
              specialized Dictionary._Variant.setValue(_:forKey:)();
              swift_endAccess();
              ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(v14, v15, a3, a4 & 1, 0, 0);

              outlined destroy of SystemUpdateNotice?((uint64_t)v10, &demangling cache variable for type metadata for ParticipantViewModel?);
              return;
            }
          }
        }
        swift_endAccess();
      }
    }
    else
    {
    }
  }
}

void closure #1 in ParticipantGridView.startAnimations(_:animationStyle:completion:)(char a1, void (*a2)(void), uint64_t a3, void *a4)
{
  if (a2) {
    a2(a1 & 1);
  }
  int v5 = self;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a4;
  uint64_t v16 = partial apply for closure #1 in FlashView.flash(completion:);
  uint64_t v17 = v6;
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 1107296256;
  uint64_t v14 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v15 = &block_descriptor_83;
  long long v7 = _Block_copy(&v12);
  id v8 = a4;
  swift_release();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v16 = partial apply for closure #2 in closure #1 in ParticipantGridView.startAnimations(_:animationStyle:completion:);
  uint64_t v17 = v9;
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 1107296256;
  uint64_t v14 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v15 = &block_descriptor_89;
  uint64_t v10 = _Block_copy(&v12);
  id v11 = v8;
  swift_release();
  objc_msgSend(v5, sel_animateWithDuration_animations_completion_, v7, v10, 0.5);
  _Block_release(v10);
  _Block_release(v7);
}

uint64_t closure #2 in ParticipantGridView.startAnimations(_:animationStyle:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = (void (**)(BOOL))(a4 + 16);
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_mostRecentAnimationIndex);
  if (v6 != a3)
  {
    if (one-time initialization token for conversationKit == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (one-time initialization token for conversationKit != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
  uint64_t v8 = String.init<A>(reflecting:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *v5;
  if (v12)
  {
    swift_retain();
    v12(v6 == a3);
    return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v12);
  }
  return result;
}

id ParticipantGridView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall ParticipantGridView.updateMediaPipDodgingFrame(withAnimationStyle:)(ConversationKit::ParticipantGridView::AnimationStyle withAnimationStyle)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_cachedFrameSize];
  OUTLINED_FUNCTION_11_0();
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  objc_msgSend(v1, sel_setNeedsLayout);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v1;
  int v5 = v1;
  ParticipantGridView.startAnimations(_:animationStyle:completion:)((uint64_t (*)(uint64_t))partial apply for closure #1 in CallControlsMenuViewController.updateDogingState(animated:), v4, withAnimationStyle, 0, 0);
  swift_release();
}

double ParticipantGridView.centeredFrame(for:isFullScreen:)(unint64_t a1, char a2)
{
  objc_msgSend(v2, sel_safeAreaInsetFrame);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  ParticipantGridView.effectiveLayoutStyle(for:)(a1);
  uint64_t v13 = &v2[OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate];
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v13))
  {
    uint64_t v14 = *((void *)v13 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 112))(ObjectType, v14);
    char v18 = v17;
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0 && !v16)
    {
      id v19 = objc_msgSend(v2, sel_superview);
      if (v19)
      {
        uint64_t v20 = v19;
        if (v10 >= v12 || (a2 & 1) != 0 || (uint64_t)a1 < 1) {
          goto LABEL_22;
        }
        if (rect_16)
        {
          if (a1 >= 5) {
            goto LABEL_22;
          }
        }
        else if (a1 >= 3)
        {
LABEL_22:

          return v6;
        }
        if (a1 > 3) {
          int v21 = rect_16;
        }
        else {
          int v21 = 0;
        }
        if (a1 == 1 || v21)
        {
          objc_msgSend(v2, sel_frame);
          CGFloat MinX = CGRectGetMinX(v44);
          objc_msgSend(v20, sel_bounds);
          CGFloat MinY = CGRectGetMinY(v45);
          objc_msgSend(v2, sel_frame);
          CGFloat Width = CGRectGetWidth(v46);
          objc_msgSend(v20, sel_bounds);
          CGFloat Height = CGRectGetHeight(v47);
          objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, v20, ParticipantGridView.frameForSingleParticipantView(in:)(MinX, MinY, Width, Height));
          CGFloat recta = v48.origin.x;
          CGFloat y = v48.origin.y;
          CGFloat v35 = v48.size.width;
          CGFloat v36 = v48.size.height;
          double v37 = CGRectGetMinY(v48);
          v49.origin.CGFloat x = v6;
          v49.origin.CGFloat y = v8;
          v49.size.CGFloat width = v10;
          v49.size.CGFloat height = v12;
          double rect_8 = v37 - CGRectGetMinY(v49) + -1.0;
          v50.origin.CGFloat x = v6;
          v50.origin.CGFloat y = v8;
          v50.size.CGFloat width = v10;
          v50.size.CGFloat height = v12;
          CGRectGetMaxY(v50);
          v51.origin.CGFloat x = recta;
          v51.origin.CGFloat y = y;
          v51.size.CGFloat width = v35;
          v51.size.CGFloat height = v36;
          CGRectGetMaxY(v51);
          UIEdgeInsetsInsetRect(v6, v8, v10, v12, rect_8, 0.0);
        }
        else
        {
          double v22 = static Layout.MediaPip.padding.getter();
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          uint64_t v23 = static Defaults.shared;
          uint64_t v24 = (void (**)(double))(*(void *)static Defaults.shared + 384);
          int8x16_t v25 = *v24;
          ((void (*)(void))*v24)();
          uint64_t v26 = static Platform.current.getter();
          uint64_t v27 = *(void (**)(uint64_t))(*(void *)v23 + 488);
          v27(v26);
          double v28 = static Layout.MediaPip.padding.getter();
          v25(v28);
          uint64_t v29 = static Platform.current.getter();
          v27(v29);
          v43.origin.CGFloat x = v6;
          v43.origin.CGFloat y = v8;
          v43.size.CGFloat width = v10;
          v43.size.CGFloat height = v12;
          CGRectInset(v43, v22 * 0.5, 8.0);
        }
        UIRectRoundToViewScale();
        double v6 = v38;
        goto LABEL_22;
      }
    }
  }
  return v6;
}

uint64_t ParticipantGridView.participantViewDidTapToggleFocus(_:)()
{
  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_9_47(v5, v15);
  OUTLINED_FUNCTION_12_36(v1);
  if (v6) {
    return outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  uint64_t v8 = OUTLINED_FUNCTION_8_45();
  v9(v8);
  uint64_t v10 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v10))
  {
    OUTLINED_FUNCTION_61_3();
    OUTLINED_FUNCTION_60_4();
    uint64_t v11 = OUTLINED_FUNCTION_14_33();
    v12(v11);
    swift_unknownObjectRelease();
  }
  uint64_t v13 = OUTLINED_FUNCTION_21_25();
  return v14(v13);
}

uint64_t ParticipantGridView.identifier(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  double v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantGridView.IdentifiableParticipantTile?);
  MEMORY[0x1F4188790](v10 - 8);
  double v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_participantIdentifiableTiles);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v24 = a1;
    uint64_t v15 = v13 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    uint64_t v16 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(v15, (uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      if (static NSObject.== infix(_:_:)()) {
        break;
      }
      outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v9, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
      v15 += v16;
      if (!--v14)
      {
        uint64_t v17 = 1;
        goto LABEL_8;
      }
    }
    outlined init with take of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v9, (uint64_t)v12, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    uint64_t v17 = 0;
LABEL_8:
    a1 = v24;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v12, v17, 1, v6);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v6) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for ParticipantGridView.IdentifiableParticipantTile?);
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = a1;
    uint64_t v20 = 1;
  }
  else
  {
    outlined init with copy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v12, (uint64_t)v5, (void (*)(void))type metadata accessor for ParticipantGridView.ParticipantTileInfo);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(a1, v5, v21);
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v12, (void (*)(void))type metadata accessor for ParticipantGridView.IdentifiableParticipantTile);
    uint64_t v19 = a1;
    uint64_t v20 = 0;
    uint64_t v18 = v21;
  }
  return __swift_storeEnumTagSinglePayload(v19, v20, 1, v18);
}

uint64_t ParticipantGridView.participantViewDidTapShutter(_:)()
{
  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_9_47(v5, v15);
  OUTLINED_FUNCTION_12_36(v1);
  if (v6) {
    return outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  uint64_t v8 = OUTLINED_FUNCTION_8_45();
  v9(v8);
  uint64_t v10 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v10))
  {
    OUTLINED_FUNCTION_61_3();
    OUTLINED_FUNCTION_60_4();
    uint64_t v11 = OUTLINED_FUNCTION_14_33();
    v12(v11);
    swift_unknownObjectRelease();
  }
  uint64_t v13 = OUTLINED_FUNCTION_21_25();
  return v14(v13);
}

uint64_t ParticipantGridView.participantViewDidTapRing(_:)()
{
  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_9_47(v5, v15);
  OUTLINED_FUNCTION_12_36(v1);
  if (v6) {
    return outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  uint64_t v8 = OUTLINED_FUNCTION_8_45();
  v9(v8);
  uint64_t v10 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v10))
  {
    OUTLINED_FUNCTION_61_3();
    OUTLINED_FUNCTION_60_4();
    uint64_t v11 = OUTLINED_FUNCTION_14_33();
    v12(v11);
    swift_unknownObjectRelease();
  }
  uint64_t v13 = OUTLINED_FUNCTION_21_25();
  return v14(v13);
}

uint64_t ParticipantGridView.participantViewDidTapKickMember(_:)()
{
  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_9_47(v5, v15);
  OUTLINED_FUNCTION_12_36(v1);
  if (v6) {
    return outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  uint64_t v8 = OUTLINED_FUNCTION_8_45();
  v9(v8);
  uint64_t v10 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v10))
  {
    OUTLINED_FUNCTION_61_3();
    OUTLINED_FUNCTION_60_4();
    uint64_t v11 = OUTLINED_FUNCTION_14_33();
    v12(v11);
    swift_unknownObjectRelease();
  }
  uint64_t v13 = OUTLINED_FUNCTION_21_25();
  return v14(v13);
}

void ParticipantGridView.participantView(_:didUpdateSashVisibility:)()
{
  OUTLINED_FUNCTION_31();
  char v2 = v1;
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  ParticipantGridView.identifier(for:)((uint64_t)&v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  OUTLINED_FUNCTION_12_36((uint64_t)&v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  if (v9)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    OUTLINED_FUNCTION_63_0();
    v10();
    uint64_t v11 = v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_delegate;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v11))
    {
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t ObjectType = swift_getObjectType();
      MEMORY[0x1F4188790](ObjectType);
      uint64_t v14 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
      uint64_t v15 = OUTLINED_FUNCTION_43();
      v16(v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v3);
      (*(void (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t))(v12 + 64))(v0, v14, v2 & 1, ObjectType, v12);
      swift_unknownObjectRelease();
      outlined destroy of SystemUpdateNotice?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    }
    uint64_t v17 = OUTLINED_FUNCTION_71_2();
    v18(v17);
  }
  OUTLINED_FUNCTION_28();
}

uint64_t ParticipantGridView.participantViewShouldShowShutterTappedAlert(_:)()
{
  return 1;
}

uint64_t ParticipantGridView.VideoInfoCache.cacheKey(for:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Participant(0);
  specialized Collection.first.getter(*(void *)(a1 + *(int *)(v5 + 44)), (uint64_t)v4);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for Participant?);
    goto LABEL_7;
  }
  uint64_t v6 = *(void **)&v4[*(int *)(v5 + 28)];
  if (!v6)
  {
    outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v4, (void (*)(void))type metadata accessor for Participant);
LABEL_7:
    uint64_t v11 = *(void **)(a1 + *(int *)(v5 + 28));
    if (v11) {
      return outlined bridged method (ob) of @objc TUHandle.normalizedValue.getter(v11);
    }
    return 0;
  }
  id v7 = v6;
  outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v4, (void (*)(void))type metadata accessor for Participant);
  id v8 = objc_msgSend(v7, sel_normalizedValue);
  if (!v8)
  {

    return 0;
  }
  char v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

uint64_t ParticipantGridView.VideoInfoCache.setVideoInfo(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = ParticipantGridView.VideoInfoCache.cacheKey(for:)(a2);
  if (v4)
  {
    outlined init with take of AspectRatio?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Participant.VideoInfo?);
    swift_beginAccess();
    outlined retain of [Participant](a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Participant.VideoInfo>);
    Cache.subscript.setter();
    return swift_endAccess();
  }
  return result;
}

uint64_t ParticipantGridView.VideoInfoCache.update(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant.State(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v10[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(a1, (uint64_t)v4, (void (*)(void))type metadata accessor for Participant.State);
  if (swift_getEnumCaseMultiPayload() != 4) {
    return outlined destroy of ParticipantGridView.IdentifiableParticipantTile((uint64_t)v4, (void (*)(void))type metadata accessor for Participant.State);
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
  uint64_t v6 = &v4[*(int *)(v5 + 48)];
  outlined consume of Participant.CopresenceInfo?(*(void *)&v4[*(int *)(v5 + 64)], *(void *)&v4[*(int *)(v5 + 64) + 8]);
  memcpy(v10, v6, sizeof(v10));
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
  outlined init with take of AspectRatio?((uint64_t)&v10[2], (uint64_t)v11, &demangling cache variable for type metadata for Participant.VideoInfo?);
  outlined retain of [Participant]((uint64_t)v11);
  outlined destroy of Participant.MediaInfo((uint64_t)v10);
  uint64_t result = outlined init with take of AspectRatio?((uint64_t)v11, (uint64_t)v10, &demangling cache variable for type metadata for Participant.VideoInfo?);
  if (v10[0])
  {
    ParticipantGridView.VideoInfoCache.setVideoInfo(_:for:)((uint64_t)v11, a1);
    return outlined release of LinearGradient((uint64_t)v11);
  }
  return result;
}

uint64_t ParticipantGridView.VideoInfoCache.info(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Participant.VideoInfo>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = ParticipantGridView.VideoInfoCache.cacheKey(for:)(a1);
  if (v10)
  {
    uint64_t v11 = result;
    uint64_t v12 = v10;
    uint64_t v13 = v2
        + OBJC_IVAR____TtCC15ConversationKit19ParticipantGridViewP33_C3C0D7D8F62A84253427EC61D899943E14VideoInfoCache_videoInfoCache;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
    v20[0] = v11;
    v20[1] = v12;
    Cache.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v14 = v21;
    long long v15 = v22;
    long long v16 = v23;
    long long v17 = v24;
    uint64_t v18 = v25;
    __int16 v19 = v26;
  }
  else
  {
    uint64_t v18 = 0;
    __int16 v19 = 0;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v17;
  *(void *)(a2 + 64) = v18;
  *(_WORD *)(a2 + 72) = v19;
  return result;
}

uint64_t ParticipantGridView.VideoInfoCache.__deallocating_deinit()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC15ConversationKit19ParticipantGridViewP33_C3C0D7D8F62A84253427EC61D899943E14VideoInfoCache_videoInfoCache;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Participant.VideoInfo>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

id @nonobjc UIViewPropertyAnimator.init(duration:curve:animations:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a2)
  {
    void v10[4] = a2;
    v10[5] = a3;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1107296256;
    _OWORD v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_92;
    uint64_t v7 = _Block_copy(v10);
    swift_release();
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = objc_msgSend(v4, sel_initWithDuration_curve_animations_, a1, v7, a4);
  _Block_release(v7);
  return v8;
}

uint64_t type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantGridView.FullScreenFocusedParticipantInfo);
}

uint64_t type metadata accessor for ParticipantGridView.AnimationInfo(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantGridView.AnimationInfo);
}

void specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1)) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, a1 + 1, 1);
  }
}

uint64_t type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantGridView.IdentifiableParticipantTile);
}

uint64_t outlined init with copy of ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t type metadata accessor for ParticipantGridView.VideoInfoCache(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantGridView.VideoInfoCache);
}

uint64_t outlined destroy of ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t sub_1C31F9484()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)()
{
  return closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with take of ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v4();
  return a2;
}

uint64_t partial apply for closure #1 in ParticipantGridView.updateViews(for:localParticipantOrientation:)(uint64_t a1)
{
  return closure #1 in ParticipantGridView.updateViews(for:localParticipantOrientation:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1C31F9540()
{
  uint64_t v1 = (int *)(type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();

  return swift_deallocObject();
}

id partial apply for closure #3 in ParticipantGridView.updateViews(for:localParticipantOrientation:)()
{
  uint64_t v1 = type metadata accessor for ParticipantGridView.IdentifiableParticipantTile(0);
  OUTLINED_FUNCTION_1(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (long long *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #3 in ParticipantGridView.updateViews(for:localParticipantOrientation:)(v0 + v6, v7);
}

uint64_t sub_1C31F9698()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ParticipantGridView.AnimationStyle and conformance ParticipantGridView.AnimationStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantGridView.AnimationStyle and conformance ParticipantGridView.AnimationStyle;
  if (!lazy protocol witness table cache variable for type ParticipantGridView.AnimationStyle and conformance ParticipantGridView.AnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantGridView.AnimationStyle and conformance ParticipantGridView.AnimationStyle);
  }
  return result;
}

uint64_t sub_1C31F9720@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for ParticipantGridView.fullScreenFocusedParticipantInfo : ParticipantGridView(a1, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_fullScreenFocusedParticipantInfo, &demangling cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?, a2);
}

uint64_t sub_1C31F9754@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for ParticipantGridView.fullScreenFocusedParticipantInfo : ParticipantGridView(a1, &OBJC_IVAR____TtC15ConversationKit19ParticipantGridView_currentAnimationInfo, &demangling cache variable for type metadata for ParticipantGridView.AnimationInfo?, a2);
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.mediaPipInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.overlappingInsets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegateDidFinishAnimatingTiles(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegate(_:didTapToggleFocus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegate(_:didTapShutterButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegate(_:didTapRingButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegate(_:didTapKickMemberButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegate(_:didUpdateParticipantIdentifier:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.participantGridViewDelegate(_:didSetOverlayHidden:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.captionsLayoutState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.isOneToOneModeEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.hasConnectedToCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.layoutIdiom.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.supportedDeviceOrientations.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of ParticipantGridViewDelegate.shouldShowLastFrameUI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t ObjC metadata update function for ParticipantGridView()
{
  return type metadata accessor for ParticipantGridView(0);
}

uint64_t type metadata accessor for ParticipantGridView(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantGridView);
}

void type metadata completion function for ParticipantGridView()
{
  type metadata accessor for UUID?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1F418BC28]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?(319, &lazy cache variable for type metadata for ParticipantGridView.FullScreenFocusedParticipantInfo?, (void (*)(uint64_t))type metadata accessor for ParticipantGridView.FullScreenFocusedParticipantInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for UUID?(319, &lazy cache variable for type metadata for ParticipantGridView.AnimationInfo?, (void (*)(uint64_t))type metadata accessor for ParticipantGridView.AnimationInfo);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void type metadata accessor for UUID?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticipantGridView.AnimationStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31F9BDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for ParticipantGridView.AnimationStyle()
{
}

void *initializeBufferWithCopyOfBuffer for ParticipantGridView.ParticipantTileInfo(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    long long v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    unsigned char v10[32] = v11[32];
    uint64_t v13 = (char *)a1 + v9;
    long long v14 = (char *)a2 + v9;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  }
  return a1;
}

uint64_t initializeWithCopy for ParticipantGridView.ParticipantTileInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t assignWithCopy for ParticipantGridView.ParticipantTileInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (long long *)(a2 + v7);
  long long v10 = *v9;
  long long v11 = v9[1];
  *(unsigned char *)(v8 + 32) = *((unsigned char *)v9 + 32);
  *(_OWORD *)uint64_t v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v15;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for ParticipantGridView.ParticipantTileInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for ParticipantGridView.ParticipantTileInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantGridView.ParticipantTileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31FA018);
}

uint64_t sub_1C31FA018()
{
  OUTLINED_FUNCTION_33_17();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v3 + 84) == v1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_32_0();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 28));
    if (v8 >= 2) {
      return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantGridView.ParticipantTileInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31FA0B0);
}

void sub_1C31FA0B0()
{
  OUTLINED_FUNCTION_26_21();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_23_18();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 28)) = v0 + 1;
  }
}

uint64_t type metadata completion function for ParticipantGridView.ParticipantTileInfo()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ParticipantGridView.FullScreenFocusedParticipantInfo(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    long long v11 = (char *)a2 + v8;
    long long v12 = *(_OWORD *)v11;
    long long v13 = *((_OWORD *)v11 + 1);
    unsigned char v10[32] = v11[32];
    *(_OWORD *)uint64_t v10 = v12;
    *((_OWORD *)v10 + 1) = v13;
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (long long *)(a2 + v7);
  long long v10 = *v9;
  long long v11 = v9[1];
  *(unsigned char *)(v8 + 32) = *((unsigned char *)v9 + 32);
  *(_OWORD *)uint64_t v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  long long v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  long long v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31FA54C);
}

uint64_t sub_1C31FA54C()
{
  OUTLINED_FUNCTION_33_17();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v3 + 84) == v1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_32_0();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 28));
    if (v8 >= 3) {
      return v8 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantGridView.FullScreenFocusedParticipantInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31FA5D0);
}

void sub_1C31FA5D0()
{
  OUTLINED_FUNCTION_26_21();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_23_18();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 28)) = v0 + 2;
  }
}

uint64_t type metadata completion function for ParticipantGridView.FullScreenFocusedParticipantInfo()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticipantGridView.Traits(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31FA7B0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ParticipantGridView.Traits()
{
}

void *initializeBufferWithCopyOfBuffer for ParticipantGridView.AnimationInfo(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for ParticipantGridView.ParticipantTileInfo(uint64_t a1)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  return v4(a1, v2);
}

uint64_t initializeWithCopy for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31FAB10);
}

uint64_t sub_1C31FAB10()
{
  OUTLINED_FUNCTION_33_17();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v3 + 84) == v1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_32_0();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 20));
    if (v8 >= 4) {
      return v8 - 3;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31FAB94);
}

void sub_1C31FAB94()
{
  OUTLINED_FUNCTION_26_21();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_23_18();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 3;
  }
}

uint64_t type metadata completion function for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ParticipantGridView.AnimationInfo(a1, a2, a3, MEMORY[0x1F418BC00]);
}

uint64_t getEnumTagSinglePayload for ParticipantGridView.MediaPipInfo(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && a1[24])
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      if (*a1 <= 4u) {
        int v3 = 4;
      }
      else {
        int v3 = *a1;
      }
      int v4 = v3 - 5;
      if (*a1 < 4u) {
        int v2 = -1;
      }
      else {
        int v2 = v4;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantGridView.MediaPipInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 4;
    }
  }
  return result;
}

void type metadata accessor for ParticipantGridView.MediaPipInfo()
{
}

uint64_t ObjC metadata update function for ParticipantGridView.VideoInfoCache()
{
  return type metadata accessor for ParticipantGridView.VideoInfoCache(0);
}

void type metadata completion function for ParticipantGridView.VideoInfoCache()
{
  type metadata accessor for Cache<String, Participant.VideoInfo>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Cache<String, Participant.VideoInfo>()
{
  if (!lazy cache variable for type metadata for Cache<String, Participant.VideoInfo>)
  {
    unint64_t v0 = type metadata accessor for Cache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Cache<String, Participant.VideoInfo>);
    }
  }
}

uint64_t outlined copy of ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10)
{
  if (a10 >> 14 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1)
{
  return outlined consume of ParticipantGridView.FrozenFrameOverlayState(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(_WORD *)(a1 + 72));
}

uint64_t outlined consume of ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10)
{
  if (a10 >> 14 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  outlined copy of ParticipantGridView.FrozenFrameOverlayState(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_WORD *)(a2 + 72));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(_WORD *)(a1 + 72) = v13;
  return a1;
}

uint64_t assignWithCopy for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  outlined copy of ParticipantGridView.FrozenFrameOverlayState(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_WORD *)(a2 + 72));
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  unsigned __int16 v21 = *(_WORD *)(a1 + 72);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(_WORD *)(a1 + 72) = v23;
  outlined consume of ParticipantGridView.FrozenFrameOverlayState(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

void *__swift_memcpy74_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x4AuLL);
}

uint64_t assignWithTake for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  __int16 v4 = *(_WORD *)(a2 + 72);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  unsigned __int16 v14 = *(_WORD *)(a1 + 72);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 64) = v3;
  *(_WORD *)(a1 + 72) = v4;
  outlined consume of ParticipantGridView.FrozenFrameOverlayState(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 74))
    {
      int v5 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      int8x16_t v3 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v2), (uint32x4_t)xmmword_1C3775830), (int8x16_t)xmmword_1C3775840);
      *(int8x8_t *)v3.i8 = vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
      unsigned int v4 = v3.i32[0] | (v2 >> 6) & 0xF8000000 | v3.i32[1];
      if (v4 > 0x80000000) {
        int v5 = ~v4;
      }
      else {
        int v5 = -1;
      }
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

double storeEnumTagSinglePayload for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 72) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 74) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = (-4 * a2) & 0xFE00 | (2 * (-a2 & 0x7FLL)) & 0xFFFFFFC10301FFFFLL | ((((unint64_t)-a2 >> 14) & 0x7F) << 17) & 0xFFFFFFC103FFFFFFLL | ((((unint64_t)-a2 >> 21) & 0x3F) << 26) & 0xFFFFFFC1FFFFFFFFLL | ((unint64_t)(-a2 >> 27) << 33);
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 58) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 74) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 72) >> 14;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for ParticipantGridView.FrozenFrameOverlayState(uint64_t result)
{
  *(_WORD *)(result + 72) &= 0x3FFFu;
  return result;
}

int8x16_t destructiveInjectEnumTag for ParticipantGridView.FrozenFrameOverlayState(uint64_t a1, unsigned int a2)
{
  if (a2 < 3)
  {
    uint64_t v3 = *(void *)(a1 + 32) & 3;
    __int16 v4 = *(_WORD *)(a1 + 72) & 0x101 | ((_WORD)a2 << 14);
    int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)xmmword_1C3775850);
    *(int8x16_t *)(a1 + 8) = result;
    *(void *)(a1 + 32) = v3;
    *(_WORD *)(a1 + 72) = v4;
  }
  else
  {
    *(void *)a1 = a2 - 3;
    result.i64[0] = 0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_WORD *)(a1 + 72) = -16384;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantGridView.FrozenFrameOverlayState()
{
  return &type metadata for ParticipantGridView.FrozenFrameOverlayState;
}

void *initializeBufferWithCopyOfBuffer for ParticipantGridView.IdentifiableParticipantTile(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    long long v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    unsigned char v10[32] = v11[32];
    uint64_t v13 = v8[6];
    unsigned __int16 v14 = (char *)a1 + v13;
    long long v15 = (char *)a2 + v13;
    *(void *)unsigned __int16 v14 = *(void *)v15;
    v14[8] = v15[8];
    *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    uint64_t v16 = *(int *)(a3 + 20);
    long long v17 = *(_OWORD *)((char *)a2 + v16);
    *(_OWORD *)((char *)a1 + v16) = v17;
    id v18 = (id)v17;
  }
  return a1;
}

void destroy for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  uint64_t v15 = *(int *)(a3 + 20);
  long long v16 = *(_OWORD *)(a2 + v15);
  *(_OWORD *)(a1 + v15) = v16;
  id v17 = (id)v16;
  return a1;
}

uint64_t assignWithCopy for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (long long *)(a2 + v8);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  uint64_t v13 = v7[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void **)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  long long v22 = *(void **)v18;
  *(void *)uint64_t v18 = *(void *)v19;
  id v23 = v20;

  *(void *)(v18 + 8) = v21;
  return a1;
}

uint64_t initializeWithTake for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = *(void **)v16;
  *(void *)uint64_t v16 = v18;

  *(void *)(v16 + 8) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31FB6F0);
}

uint64_t sub_1C31FB6F0(uint64_t a1, int a2, uint64_t a3)
{
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = OUTLINED_FUNCTION_32_0();
    return __swift_getEnumTagSinglePayload(v7, v8, v9);
  }
  else
  {
    unint64_t v11 = *(void *)(v3 + *(int *)(a3 + 20));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31FB780);
}

void sub_1C31FB780(uint64_t a1, int a2, int a3, uint64_t a4)
{
  type metadata accessor for ParticipantGridView.ParticipantTileInfo(0);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = OUTLINED_FUNCTION_23_18();
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for ParticipantGridView.IdentifiableParticipantTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ParticipantGridView.AnimationInfo(a1, a2, a3, type metadata accessor for ParticipantGridView.ParticipantTileInfo);
}

uint64_t type metadata completion function for ParticipantGridView.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc TUHandle.normalizedValue.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_normalizedValue);

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_41_0();
}

uint64_t sub_1C31FB91C()
{
  return swift_deallocObject();
}

void partial apply for closure #3 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)()
{
  closure #3 in ParticipantGridView.configure(_:with:isMostActive:hasOtherInvitedParticipants:orientationChanged:)(*(void **)(v0 + 16), (long long *)(v0 + 24));
}

uint64_t outlined init with copy of ParticipantVideoView.ViewModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C31FB9BC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C31FB9F4()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t sub_1C31FBA24()
{
  uint64_t v2 = type metadata accessor for Participant(0);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      (*(void (**)(unint64_t))(v5 + 8))(v0 + v3);
      break;
    case 4u:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v15();
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v1 = v4 + *(int *)(v16 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v1 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v1 + 96);
      }
      if (*(void *)(v1 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v4 + *(int *)(v16 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v6();
  uint64_t v7 = (id *)(v4 + *(int *)(v2 + 28));
  if (*v7)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_70_1();
  uint64_t v8 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v1, 1, v8))
  {
    uint64_t v9 = OUTLINED_FUNCTION_44();
    v10(v9);
  }
  uint64_t v11 = type metadata accessor for Participant.CountdownInfo(0);
  if (!__swift_getEnumTagSinglePayload(v1 + *(int *)(v11 + 20), 1, v8))
  {
    uint64_t v12 = OUTLINED_FUNCTION_44();
    v13(v12);
  }
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ParticipantGridView.scheduleUpdateToPausedHandoffOverlay(on:for:isMostActive:)()
{
  uint64_t v1 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  char v9 = *(unsigned char *)(v0 + v6 + *(void *)(v5 + 64));
  closure #1 in ParticipantGridView.scheduleUpdateToPausedHandoffOverlay(on:for:isMostActive:)(v7, v8, v0 + v6, v9);
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C31FBDE8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t sub_1C31FBE20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ParticipantGridView.startAnimations(_:animationStyle:completion:)(uint64_t a1)
{
  return closure #2 in ParticipantGridView.startAnimations(_:animationStyle:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1C31FBE6C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

void partial apply for closure #1 in ParticipantGridView.startAnimations(_:animationStyle:completion:)(char a1)
{
  closure #1 in ParticipantGridView.startAnimations(_:animationStyle:completion:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

id partial apply for closure #2 in closure #1 in ParticipantGridView.startAnimations(_:animationStyle:completion:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_removeFromSuperview);
}

void partial apply for closure #1 in closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)(uint64_t a1)
{
  closure #1 in closure #3 in ParticipantGridView.transition(to:mostProminentParticipantIdentifier:focusedParticipantIdentifier:selectedParticipantIdentifier:fullScreenFocusedParticipantInfo:layoutStyle:animationStyle:forced:)(a1, *(char **)(v1 + 16));
}

void partial apply for closure #3 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(unint64_t a1)
{
  closure #3 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t partial apply for closure #2 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(uint64_t a1)
{
  return closure #2 in ParticipantGridView.frames(for:mostProminentIdentifier:focusedIdentifier:fullScreenFocusedParticipantInfo:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t outlined assign with copy of ParticipantGridView.AnimationInfo?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_26_0(a1, a2, a3);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v3, v4);
  return v3;
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t outlined init with take of AspectRatio?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_26_0(a1, a2, a3);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  v4();
  return v3;
}

uint64_t partial apply for closure #1 in ParticipantGridView.updateEMA(for:ema:audioPriority:videoPriority:)(uint64_t a1)
{
  return partial apply for closure #1 in ParticipantGridView.updateViews(for:localParticipantOrientation:)(a1) & 1;
}

uint64_t OUTLINED_FUNCTION_41_11()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void UIButton.updateContentAlpha(_:)(double a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for UIBackgroundConfiguration();
  OUTLINED_FUNCTION_5_3();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_62();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_63();
  UIButton.configuration.getter();
  uint64_t v12 = type metadata accessor for UIButton.Configuration();
  if (__swift_getEnumTagSinglePayload(v3, 1, v12))
  {
    outlined destroy of Conversation?(v3, &demangling cache variable for type metadata for UIButton.Configuration?);
LABEL_3:
    objc_msgSend(v4, sel_setAlpha_, a1);
    return;
  }
  UIButton.Configuration.background.getter();
  uint64_t v13 = (void *)UIBackgroundConfiguration.customView.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
  outlined destroy of Conversation?(v3, &demangling cache variable for type metadata for UIButton.Configuration?);
  if (!v13) {
    goto LABEL_3;
  }
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (!v14)
  {

    goto LABEL_3;
  }
  uint64_t v15 = v14;
  objc_msgSend(v4, sel_setAlpha_, 1.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C376A6F0;
  *(void *)(inited + 32) = v15;
  id v17 = v13;
  *(void *)(inited + 40) = objc_msgSend(v4, sel_imageView);
  *(void *)(inited + 48) = objc_msgSend(v4, sel_subtitleLabel);
  *(void *)(inited + 56) = objc_msgSend(v4, sel_titleLabel);
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_15_36(*(void **)(inited + 32));
  OUTLINED_FUNCTION_15_36(*(void **)(inited + 40));
  OUTLINED_FUNCTION_15_36(*(void **)(inited + 48));
  OUTLINED_FUNCTION_15_36(*(void **)(inited + 56));
  swift_bridgeObjectRelease();
}

void static UIButton.Configuration.base(title:symbol:shape:style:context:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  outlined init with copy of SymbolImageDescribing?(a3, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for SymbolImageDescribing?);
  uint64_t v13 = v17;
  if (v17)
  {
    uint64_t v14 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v19, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    id v15 = static UIImage.symbolImage(for:)((uint64_t)v19);
    outlined release of SymbolImageDescription((uint64_t)v19);
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for SymbolImageDescribing?);
    id v15 = 0;
  }
  static UIButton.Configuration.base(title:image:shape:style:context:)(a1, a2, v15, a4, a5, a6, a7);
}

void UIButton.Configuration.withBackgroundStyle(_:)(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v6 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_60();
  type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_124();
  v8();
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      id v9 = a1;
      static UIBackgroundConfiguration.clear()();
      UIButton.Configuration.background.setter();
      UIButton.Configuration.baseBackgroundColor.setter();
    }
  }
  else
  {
    switch(a3)
    {
      case 1u:
        id v14 = objc_allocWithZone(MEMORY[0x1E4FB1F00]);
        outlined copy of ButtonBackgroundStyle(a1, a2, 1);
        id v15 = a1;
        id v16 = a2;
        id v11 = objc_msgSend(v14, sel_initWithEffect_, v15);
        id v17 = objc_msgSend(v11, sel_contentView);
        id v18 = objc_msgSend(self, sel_tintColor);
        objc_msgSend(v17, sel_setBackgroundColor_, v18);

        id v19 = objc_allocWithZone(MEMORY[0x1E4FB1F00]);
        id v20 = v16;
        id v21 = objc_msgSend(v19, sel_initWithEffect_, v20);
        objc_msgSend(v21, sel_setAutoresizingMask_, 18);
        id v22 = objc_msgSend(v11, sel_contentView);
        objc_msgSend(v22, sel_addSubview_, v21);

        break;
      case 2u:
        outlined copy of ButtonBackgroundBlurStyle(a1, a2, 2);
        outlined copy of ButtonBackgroundBlurStyle(a1, a2, 2);
        id v11 = a1;
        break;
      case 3u:
        id v23 = self;
        if (one-time initialization token for backgroundBlurEffect != -1) {
          swift_once();
        }
        id v24 = objc_msgSend(v23, sel__effectForBlurEffect_vibrancyStyle_, static Colors.InCallControls.backgroundBlurEffect, 112);
        id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v24);
        id v25 = objc_msgSend(v11, sel_contentView);
        id v26 = objc_msgSend(self, sel_tintColor);
        objc_msgSend(v25, sel_setBackgroundColor_, v26);

        break;
      default:
        id v10 = objc_allocWithZone(MEMORY[0x1E4FB1F00]);
        outlined copy of ButtonBackgroundBlurStyle(a1, a2, 0);
        id v11 = objc_msgSend(v10, sel_initWithEffect_, a1);
        id v12 = objc_msgSend(v11, sel_contentView);
        id v13 = objc_msgSend(self, sel_tintColor);
        objc_msgSend(v12, sel_setBackgroundColor_, v13);

        break;
    }
    id v27 = v11;
    double v28 = (void (*)(uint64_t))UIButton.Configuration.background.modify();
    UIBackgroundConfiguration.customView.setter();
    uint64_t v29 = OUTLINED_FUNCTION_8_46();
    v28(v29);
    id v30 = objc_msgSend(self, sel_clearColor);
    uint64_t v31 = (void (*)(uint64_t))UIButton.Configuration.background.modify();
    UIBackgroundConfiguration.backgroundColor.setter();
    uint64_t v32 = OUTLINED_FUNCTION_8_46();
    v31(v32);

    outlined consume of ButtonBackgroundStyle(a1, a2, a3);
  }
}

id UIButton.init(imageNamed:supressesHairlineThickening:)(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  (*(void (**)(uint64_t))(v11 + 16))(v9 - v8);
  id v12 = specialized UIButton.init(imageNamed:supressesHairlineThickening:)(v10, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

uint64_t UIButton.add(target:action:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SymbolImageDescribing?(a1, (uint64_t)v11, &demangling cache variable for type metadata for Any?);
  uint64_t v5 = v12;
  if (v12)
  {
    __swift_project_boxed_opaque_existential_1(v11, v12);
    OUTLINED_FUNCTION_5_3();
    uint64_t v7 = v6;
    MEMORY[0x1F4188790](v8);
    OUTLINED_FUNCTION_63();
    (*(void (**)(uint64_t))(v7 + 16))(v3);
    uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    uint64_t v9 = 0;
  }
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v9, a2, 64);
  return swift_unknownObjectRelease();
}

uint64_t UIButton.title.getter()
{
  id v1 = objc_msgSend(v0, sel_titleForState_, 0);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void key path setter for UIButton.title : UIButton(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  UIButton.title.setter(v1, v2);
}

void UIButton.title.setter(uint64_t a1, uint64_t a2)
{
  outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(a1, a2, 0, v2);
}

void (*UIButton.title.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  *a1 = UIButton.title.getter();
  a1[1] = v3;
  return UIButton.title.modify;
}

void UIButton.title.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = OUTLINED_FUNCTION_13_40();
    outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(v2, v3, v4, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_13_40();
    outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(v6, v7, v8, v9);
  }
}

id UIButton.image.getter()
{
  id v1 = objc_msgSend(v0, sel_imageForState_, 0);
  return v1;
}

void key path setter for UIButton.image : UIButton(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  UIButton.image.setter(v1);
}

void UIButton.image.setter(void *a1)
{
  objc_msgSend(v1, sel_setImage_forState_, a1, 0);
}

void (*UIButton.image.modify(void *a1))(id *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(v1, sel_imageForState_, 0);
  return UIButton.image.modify;
}

void UIButton.image.modify(id *a1)
{
  id v1 = *a1;
  objc_msgSend(a1[1], sel_setImage_forState_);
}

uint64_t UIButton.Configuration.withShape(_:)(unsigned __int8 a1)
{
  int v1 = a1;
  type metadata accessor for UIButton.Configuration.CornerStyle();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_124();
  v3();
  uint64_t v4 = OUTLINED_FUNCTION_12_37();
  v5(v4);
  if (v1) {
    return UIButton.Configuration.cornerStyle.setter();
  }
  UIButton.Configuration.cornerStyle.setter();
  uint64_t v7 = (uint64_t (*)(unsigned char *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.cornerRadius.setter();
  return v7(v8, 0);
}

uint64_t UIButton.Configuration.withAttributedTitle(title:foregroundColor:context:)@<X0>(uint64_t a1@<X2>, unsigned __int8 a2@<W3>, uint64_t a3@<X8>)
{
  v39[0] = a1;
  int v5 = a2;
  type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_1_9();
  uint64_t v41 = a3;
  OUTLINED_FUNCTION_124();
  v6();
  uint64_t v7 = type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_5_3();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_62();
  uint64_t v40 = type metadata accessor for AttributeContainer();
  OUTLINED_FUNCTION_5_3();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v15);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  uint64_t v16 = AttributedString.init(_:attributes:)();
  v39[1] = v39;
  MEMORY[0x1F4188790](v16);
  id v17 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  if (v5 == 1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
    id v19 = (void *)*MEMORY[0x1E4FB06F8];
    *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
    uint64_t v20 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
    uint64_t v21 = *MEMORY[0x1E4FB2950];
    id v22 = v19;
    *(void *)(inited + 40) = static UIFont.preferredFont(textStyle:weight:maximumPointSize:)(v21, 0x403E000000000000, 0);
    id v23 = (void *)*MEMORY[0x1E4FB0700];
    *(void *)(inited + 64) = v20;
    *(void *)(inited + 72) = v23;
    *(void *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    id v24 = (void *)v39[0];
    *(void *)(inited + 80) = v39[0];
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    id v25 = v23;
    id v26 = v24;
  }
  else
  {
    uint64_t v27 = swift_initStackObject();
    double v28 = (void **)MEMORY[0x1E4FB06F8];
    *(_OWORD *)(v27 + 16) = xmmword_1C3769620;
    uint64_t v29 = *v28;
    *(void *)(v27 + 32) = *v28;
    id v30 = self;
    uint64_t v31 = *MEMORY[0x1E4FB2950];
    id v32 = v29;
    id v33 = objc_msgSend(v30, sel_preferredFontForTextStyle_, v31);
    Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

    Class v35 = UIFont.caseSensitive()().super.isa;
    *(void *)(v27 + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
    *(void *)(v27 + 40) = v35;
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  }
  Dictionary.init(dictionaryLiteral:)();
  AttributeContainer.init(_:)();
  AttributedString.setAttributes(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v40);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  uint64_t v37 = OUTLINED_FUNCTION_8(v36);
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, v3, v7);
  __swift_storeEnumTagSinglePayload(v3, 0, 1, v7);
  UIButton.Configuration.attributedTitle.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v3, v7);
}

uint64_t UIButton.Configuration.withPadding(shape:context:)(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_124();
  v3();
  if (!v2) {
    return OUTLINED_FUNCTION_14_34();
  }
  OUTLINED_FUNCTION_9_48();
  return UIButton.Configuration.imagePadding.setter();
}

uint64_t static UIButton.Configuration.base(title:image:shape:style:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  id v67 = a3;
  uint64_t v71 = a2;
  uint64_t v61 = a1;
  outlined init with take of ButtonStyle?(a5, (uint64_t)v75);
  uint64_t v11 = v76;
  uint64_t v12 = v77;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationColorTransformer?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v69 = v16 - v15;
  uint64_t v70 = type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_5_3();
  id v18 = v17;
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  id v22 = &v59[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v74 = &v59[-v26];
  MEMORY[0x1F4188790](v25);
  id v68 = &v59[-v27];
  outlined init with take of ButtonStyle?(a5, (uint64_t)v78);
  uint64_t v72 = a7;
  int v73 = a6;
  double v65 = v22;
  if (v80)
  {
    id v62 = v12;
    id v63 = v11;
    int v64 = a4;
    uint64_t v66 = v18;
    double v28 = (void *)v78[0];
    uint64_t v29 = (void *)v78[1];
    int v60 = v79;
    uint64_t v31 = v81;
    id v30 = v82;
    int v32 = v83;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v33 = (uint64_t (**)(void))(*(void *)static Defaults.shared + 320);
    uint64_t v34 = *v33;
    char v35 = (*v33)();
    if (v35) {
      uint64_t v29 = v30;
    }
    else {
      uint64_t v31 = v28;
    }
    if (v35) {
      int v36 = v32;
    }
    else {
      int v36 = v60;
    }
    id v37 = outlined copy of ButtonBackgroundStyle(v31, v29, v36);
    char v38 = ((uint64_t (*)(id))v34)(v37);
    id v39 = v31;
    uint64_t v40 = v63;
    if (v38) {
      uint64_t v40 = v62;
    }
    id v62 = v40;
    LOBYTE(a6) = v73;
    id v18 = v66;
    LOBYTE(a4) = v64;
  }
  else
  {
    uint64_t v41 = self;
    id v39 = objc_msgSend(v41, sel_systemGrayColor);
    id v62 = objc_msgSend(v41, sel_labelColor);
    uint64_t v29 = 0;
    int v36 = 64;
  }
  static UIButton.Configuration.filled()();
  UIButton.Configuration.withShape(_:)(a4);
  uint64_t v42 = v18[1];
  CGRect v43 = v18;
  uint64_t v44 = v70;
  OUTLINED_FUNCTION_3_8();
  v42();
  CGRect v45 = v74;
  uint64_t v66 = (void (**)(void))v29;
  UIButton.Configuration.withBackgroundStyle(_:)(v39, v29, v36);
  uint64_t v46 = v44;
  CGRect v47 = v43;
  CGRect v48 = (uint64_t (*)(void))v42;
  OUTLINED_FUNCTION_3_8();
  v42();
  CGRect v49 = v65;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v47[2])(v65, v45, v46);
  int v64 = v36;
  id v63 = v39;
  if ((_BYTE)a6)
  {
    OUTLINED_FUNCTION_9_48();
    UIButton.Configuration.imagePadding.setter();
  }
  else
  {
    OUTLINED_FUNCTION_14_34();
  }
  CGRect v50 = v47[4];
  CGRect v51 = v68;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v68, v49, v46);
  OUTLINED_FUNCTION_3_8();
  v42();
  id v52 = v67;
  UIButton.Configuration.image.setter();
  uint64_t v53 = swift_allocObject();
  BOOL v54 = v62;
  *(void *)(v53 + 16) = v62;
  id v55 = v54;
  uint64_t v56 = v69;
  UIConfigurationColorTransformer.init(_:)();
  uint64_t v57 = type metadata accessor for UIConfigurationColorTransformer();
  __swift_storeEnumTagSinglePayload(v56, 0, 1, v57);
  UIButton.Configuration.imageColorTransformer.setter();
  if (v71)
  {
    UIButton.Configuration.withAttributedTitle(title:foregroundColor:context:)((uint64_t)v55, v73, v72);
    OUTLINED_FUNCTION_2_69();

    OUTLINED_FUNCTION_3_8();
    return v48();
  }
  else
  {

    OUTLINED_FUNCTION_2_69();
    return ((uint64_t (*)(uint64_t, unsigned char *, uint64_t))v50)(v72, v51, v46);
  }
}

void outlined bridged method (mbnnn) of @objc UIButton.setTitle(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_setTitle_forState_, v6, a3);
}

id specialized UIButton.init(imageNamed:supressesHairlineThickening:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 32))(v10);
  id v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v12 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v13 = v11;
  uint64_t v14 = (void *)specialized static UIImage.image(named:)((uint64_t)v10, v12, a4, a5);
  uint64_t v15 = v14;
  if (a2)
  {
    id v16 = objc_msgSend(v14, sel__imageThatSuppressesAccessibilityHairlineThickening);

    uint64_t v15 = v16;
  }
  id v17 = v15;
  objc_msgSend(v13, sel_setImage_forState_, v17, 0);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
  return v13;
}

uint64_t outlined init with copy of SymbolImageDescribing?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_124();
  v4();
  return a2;
}

uint64_t outlined init with take of ButtonStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonStyle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C31FDAB8()
{
  return swift_deallocObject();
}

uint64_t sub_1C31FDAF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UIButton.title.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_1C31FDB20@<X0>(void *a1@<X8>)
{
  id result = UIButton.image.getter();
  *a1 = result;
  return result;
}

id LinkDetailActionCollectionViewCell.accessoryImageView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell____lazy_storage___accessoryImageView;
  int v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell____lazy_storage___accessoryImageView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell____lazy_storage___accessoryImageView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
    int v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    int v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t key path getter for LinkDetailActionCollectionViewCell.linkDetailImage : LinkDetailActionCollectionViewCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LinkDetailActionCollectionViewCell.linkDetailImage : LinkDetailActionCollectionViewCell(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  id v4 = *a1;
  return v3(v2);
}

void *LinkDetailActionCollectionViewCell.linkDetailImage.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell_linkDetailImage);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void LinkDetailActionCollectionViewCell.linkDetailImage.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell_linkDetailImage);
  swift_beginAccess();
  id v4 = *v3;
  char *v3 = a1;
  id v5 = a1;

  LinkDetailActionCollectionViewCell.applyValues()();
}

uint64_t (*LinkDetailActionCollectionViewCell.linkDetailImage.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return LinkDetailActionCollectionViewCell.linkDetailImage.modify;
}

uint64_t LinkDetailActionCollectionViewCell.linkDetailImage.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return LinkDetailActionCollectionViewCell.applyValues()();
  }
  return result;
}

Swift::Void __swiftcall LinkDetailActionCollectionViewCell.prepareForReuse()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for LinkDetailActionCollectionViewCell();
  objc_msgSendSuper2(&v1, sel_prepareForReuse);
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))(0);
}

uint64_t LinkDetailActionCollectionViewCell.applyValues()()
{
  uint64_t v1 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_4();
  uint64_t v56 = v2;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_3();
  uint64_t v55 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v51 = v6;
  type metadata accessor for UICellAccessory.Placement();
  OUTLINED_FUNCTION_4();
  uint64_t v49 = v8;
  uint64_t v50 = v7;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  type metadata accessor for UICellAccessory.CustomViewConfiguration();
  OUTLINED_FUNCTION_4();
  uint64_t v53 = v13;
  uint64_t v54 = v12;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_2_3();
  uint64_t v52 = v14;
  uint64_t v15 = type metadata accessor for UIListContentConfiguration.TextProperties();
  OUTLINED_FUNCTION_4();
  uint64_t v46 = v16;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x1F4188790](v21 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_4();
  uint64_t v27 = v26;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_21();
  uint64_t v31 = v30 - v29;
  uint64_t v32 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
  if (v32)
  {
    CGRect v47 = (void *)v32;
    uint64_t v48 = v1;
    id v33 = objc_msgSend(v0, sel_tintColor);
    MEMORY[0x1C8773CC0](v57);
    if (v58)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
      int v34 = swift_dynamicCast();
      __swift_storeEnumTagSinglePayload(v24, v34 ^ 1u, 1, v25);
      if (__swift_getEnumTagSinglePayload(v24, 1, v25) != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v31, v24, v25);
        UIListContentConfiguration.textProperties.getter();
        uint64_t v35 = UIListContentConfiguration.TextProperties.color.getter();

        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v20, v15);
        UIListContentConfiguration.directionalLayoutMargins.setter();
        uint64_t v58 = v25;
        uint64_t v59 = MEMORY[0x1E4FB0F88];
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(boxed_opaque_existential_1, v31, v25);
        MEMORY[0x1C8773CD0](v57);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v25);
        id v33 = (id)v35;
LABEL_10:
        id v38 = LinkDetailActionCollectionViewCell.accessoryImageView.getter();
        objc_msgSend(v38, sel_setImage_, v47);

        LinkDetailActionCollectionViewCell.accessoryImageView.getter();
        id v39 = (uint64_t (**)())(v11
                             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                      + 48));
        uint64_t v40 = *MEMORY[0x1E4FB0E18];
        uint64_t v41 = type metadata accessor for UICellAccessory.DisplayedState();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v11, v40, v41);
        *id v39 = OUTLINED_FUNCTION_17_1;
        v39[1] = 0;
        (*(void (**)(uint64_t, void, uint64_t))(v49 + 104))(v11, *MEMORY[0x1E4FB0E60], v50);
        uint64_t v42 = type metadata accessor for UICellAccessory.LayoutDimension();
        __swift_storeEnumTagSinglePayload(v51, 1, 1, v42);
        id v43 = v33;
        UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
        static UICellAccessory.customView(configuration:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
        unint64_t v44 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
        uint64_t v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = xmmword_1C3769620;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 16))(v45 + v44, v55, v48);
        UICollectionViewListCell.accessories.setter();

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v48);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      }
    }
    else
    {
      outlined destroy of Conversation?((uint64_t)v57, &demangling cache variable for type metadata for UIContentConfiguration?);
      __swift_storeEnumTagSinglePayload(v24, 1, 1, v25);
    }
    outlined destroy of Conversation?(v24, &demangling cache variable for type metadata for UIListContentConfiguration?);
    goto LABEL_10;
  }
  return UICollectionViewListCell.accessories.setter();
}

uint64_t type metadata accessor for LinkDetailActionCollectionViewCell()
{
  return self;
}

id LinkDetailActionCollectionViewCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id LinkDetailActionCollectionViewCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  *(void *)(v0
            + OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell____lazy_storage___accessoryImageView) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell_linkDetailImage) = 0;
  uint64_t v5 = type metadata accessor for LinkDetailActionCollectionViewCell();
  double v1 = OUTLINED_FUNCTION_6_2();
  return objc_msgSendSuper2(v2, v3, v1, v0, v5);
}

id LinkDetailActionCollectionViewCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id LinkDetailActionCollectionViewCell.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell____lazy_storage___accessoryImageView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit34LinkDetailActionCollectionViewCell_linkDetailImage] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for LinkDetailActionCollectionViewCell();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id LinkDetailActionCollectionViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkDetailActionCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for LinkDetailActionCollectionViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkDetailActionCollectionViewCell);
}

uint64_t dispatch thunk of LinkDetailActionCollectionViewCell.linkDetailImage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of LinkDetailActionCollectionViewCell.linkDetailImage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of LinkDetailActionCollectionViewCell.linkDetailImage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

id LocalParticipantView.controlsBottomAnchor.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView), sel_bottomAnchor);
  return v1;
}

uint64_t static LocalParticipantLongPressAction.== infix(_:_:)()
{
  return 1;
}

void LocalParticipantLongPressAction.hash(into:)()
{
}

Swift::Int LocalParticipantLongPressAction.hashValue.getter()
{
  return Hasher._finalize()();
}

void *LocalParticipantView.buttonVisualEffectGroupName.unsafeMutableAddressor()
{
  return &static LocalParticipantView.buttonVisualEffectGroupName;
}

unint64_t static LocalParticipantView.buttonVisualEffectGroupName.getter()
{
  return 0xD00000000000001DLL;
}

id LocalParticipantView.participantView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView);
}

id LocalParticipantView.controlsView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
}

uint64_t key path getter for LocalParticipantView.delegate : LocalParticipantView@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for LocalParticipantView.delegate : LocalParticipantView(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t LocalParticipantView.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t LocalParticipantView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*LocalParticipantView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

BOOL static LocalParticipantView.DragEventType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LocalParticipantView.DragEventType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocalParticipantView.DragEventType(char *a1, char *a2)
{
  return static LocalParticipantView.DragEventType.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LocalParticipantView.DragEventType()
{
  return LocalParticipantView.DragEventType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance LocalParticipantView.DragEventType(uint64_t a1)
{
  LocalParticipantView.DragEventType.hash(into:)(a1, *v1);
}

uint64_t LocalParticipantView.dragEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t LocalParticipantView.dragEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_dragEnabled);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*LocalParticipantView.dragEnabled.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t LocalParticipantView.blurEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for LocalParticipantView.blurEnabled : LocalParticipantView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_blurEnabled);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t LocalParticipantView.blurEnabled.setter()
{
  return LocalParticipantView.blurEnabled.setter();
}

{
  uint64_t (*v0)(uint64_t);
  char v1;
  unsigned char *v2;
  uint64_t v3;

  uint64_t v3 = OUTLINED_FUNCTION_16_28();
  *uint64_t v2 = v1;
  return v0(v3);
}

uint64_t LocalParticipantView.blurEnabled.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  uint64_t v2 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_blurEnabled);
  OUTLINED_FUNCTION_2();
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x290))(*v2);
}

uint64_t (*LocalParticipantView.blurEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return LocalParticipantView.blurEnabled.modify;
}

uint64_t LocalParticipantView.blurEnabled.modify(uint64_t a1, char a2)
{
  return LocalParticipantView.blurEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))LocalParticipantView.blurEnabled.didset);
}

uint64_t LocalParticipantView.shouldAddOverlayBlur.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for LocalParticipantView.shouldAddOverlayBlur : LocalParticipantView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_shouldAddOverlayBlur);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t LocalParticipantView.shouldAddOverlayBlur.setter()
{
  return LocalParticipantView.shouldAddOverlayBlur.setter();
}

{
  uint64_t (*v0)(uint64_t);
  char v1;
  unsigned char *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_16_28();
  uint64_t v3 = *v2;
  *uint64_t v2 = v1;
  return v0(v3);
}

void LocalParticipantView.shouldAddOverlayBlur.didset(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_shouldAddOverlayBlur];
  swift_beginAccess();
  int v4 = *v3;
  if (v4 != v2)
  {
    uint64_t v5 = (objc_class *)LocalParticipantView.overlayBlurView.getter();
    Class isa = v5;
    if (v4)
    {
      objc_msgSend(v1, sel_addSubview_, v5);

      uint64_t v7 = self;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1C3769580;
      id v9 = LocalParticipantView.overlayBlurView.getter();
      id v10 = objc_msgSend(v9, sel_topAnchor);

      id v11 = objc_msgSend(v1, sel_topAnchor);
      id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

      *(void *)(v8 + 32) = v12;
      id v13 = LocalParticipantView.overlayBlurView.getter();
      id v14 = objc_msgSend(v13, sel_bottomAnchor);

      id v15 = objc_msgSend(v1, sel_bottomAnchor);
      id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

      *(void *)(v8 + 40) = v16;
      id v17 = LocalParticipantView.overlayBlurView.getter();
      id v18 = objc_msgSend(v17, sel_trailingAnchor);

      id v19 = objc_msgSend(v1, sel_trailingAnchor);
      id v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

      *(void *)(v8 + 48) = v20;
      id v21 = LocalParticipantView.overlayBlurView.getter();
      id v22 = objc_msgSend(v21, sel_leadingAnchor);

      id v23 = objc_msgSend(v1, sel_leadingAnchor);
      id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);

      *(void *)(v8 + 56) = v24;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_activateConstraints_, isa, v8);
    }
    else
    {
      [(objc_class *)v5 removeFromSuperview];
    }
  }
}

id LocalParticipantView.overlayBlurView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView____lazy_storage___overlayBlurView;
  int v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView____lazy_storage___overlayBlurView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView____lazy_storage___overlayBlurView);
  }
  else
  {
    id v4 = closure #1 in LocalParticipantView.overlayBlurView.getter();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    int v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void (*LocalParticipantView.shouldAddOverlayBlur.modify())(uint64_t a1, uint64_t a2)
{
  int v2 = malloc(0x28uLL);
  OUTLINED_FUNCTION_16_2((uint64_t)v2);
  id v3 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_shouldAddOverlayBlur);
  OUTLINED_FUNCTION_2();
  *(unsigned char *)(v1 + 32) = *v3;
  return LocalParticipantView.shouldAddOverlayBlur.modify;
}

void LocalParticipantView.shouldAddOverlayBlur.modify(uint64_t a1, uint64_t a2)
{
}

id closure #1 in LocalParticipantView.overlayBlurView.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1FE0]), sel_initWithPrivateStyle_, 2030);
  if (!v0) {
    id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  }
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v0;
}

id LocalParticipantView.controlsLayoutGuide.getter()
{
  return objc_retain(*(id *)(*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView)
                           + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_controlsLayoutGuide));
}

uint64_t LocalParticipantView.requiresControlsHidden.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for LocalParticipantView.requiresControlsHidden : LocalParticipantView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresControlsHidden);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t LocalParticipantView.requiresControlsHidden.setter()
{
  return LocalParticipantView.blurEnabled.setter();
}

void LocalParticipantView.requiresControlsHidden.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  int v2 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresControlsHidden);
  OUTLINED_FUNCTION_2();
  double v3 = 1.0;
  if (*v2) {
    double v3 = 0.0;
  }
  objc_msgSend(v1, sel_setAlpha_, v3);
  char v4 = LocalParticipantView.hidesGradientOverlayView.getter();
  ParticipantView.updateGradientOverlayView(isHidden:alpha:)(v4 & 1, 0, 1);
}

uint64_t LocalParticipantView.hidesGradientOverlayView.getter()
{
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                          + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView))
                                    + 0x210))() != 3)
    return 1;
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresControlsHidden);
  swift_beginAccess();
  return *v1;
}

void LocalParticipantView.updateGradientOverlayView(isHidden:alpha:)(char a1, uint64_t a2, char a3)
{
}

uint64_t (*LocalParticipantView.requiresControlsHidden.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return LocalParticipantView.requiresControlsHidden.modify;
}

uint64_t LocalParticipantView.requiresControlsHidden.modify(uint64_t a1, char a2)
{
  return LocalParticipantView.blurEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))LocalParticipantView.requiresControlsHidden.didset);
}

uint64_t LocalParticipantView.blurEnabled.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t LocalParticipantView.requiresViewHidden.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for LocalParticipantView.requiresViewHidden : LocalParticipantView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  double v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresViewHidden);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void LocalParticipantView.requiresViewHidden.setter(char a1)
{
  double v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresViewHidden);
  OUTLINED_FUNCTION_11_0();
  unsigned char *v3 = a1;
  LocalParticipantView.updateHiding()();
}

Swift::Void __swiftcall LocalParticipantView.updateHiding()()
{
  uint64_t v1 = v0;
  int v2 = &v0[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresViewHidden];
  OUTLINED_FUNCTION_2();
  if (*v2)
  {
    char v3 = 1;
  }
  else
  {
    char v4 = &v1[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate];
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v4))
    {
      uint64_t v5 = *((void *)v4 + 1);
      uint64_t ObjectType = swift_getObjectType();
      char v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
      swift_unknownObjectRelease();
    }
    else
    {
      char v3 = 0;
    }
  }
  objc_msgSend(v1, sel_setHidden_, v3 & 1);
}

void (*LocalParticipantView.requiresViewHidden.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return LocalParticipantView.requiresViewHidden.modify;
}

void LocalParticipantView.requiresViewHidden.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    LocalParticipantView.updateHiding()();
  }
}

void LocalParticipantView.controlsStyle.setter(uint64_t a1)
{
  char v3 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  char v4 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x210))() != a1)
  {
    (*(void (**)(uint64_t))((*v4 & *v3) + 0x218))(a1);
    char v5 = LocalParticipantView.hidesGradientOverlayView.getter();
    ParticipantView.updateGradientOverlayView(isHidden:alpha:)(v5 & 1, 0, 1);
  }
}

unint64_t LocalParticipantView.supportsRotation.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((unint64_t)(*(uint64_t (**)(void))(v0 + 552))() >> 32) & 1;
}

uint64_t LocalParticipantView.supportsRotation.setter()
{
  OUTLINED_FUNCTION_27_21();
  OUTLINED_FUNCTION_5_13();
  v1 += 69;
  int v2 = *v1;
  uint64_t result = ((uint64_t (*)(void))*v1)();
  if ((BYTE4(result) & 1) != v0)
  {
    OUTLINED_FUNCTION_22_25();
    v2();
    OUTLINED_FUNCTION_5_13();
    uint64_t v5 = OUTLINED_FUNCTION_9_49(v4);
    return v6(v5);
  }
  return result;
}

uint64_t (*LocalParticipantView.supportsRotation.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_20_27(a1);
  OUTLINED_FUNCTION_0_20();
  *(unsigned char *)(v1 + 8) = ((unint64_t)(*(uint64_t (**)(void))(v2 + 552))() >> 32) & 1;
  return LocalParticipantView.supportsRotation.modify;
}

uint64_t LocalParticipantView.supportsRotation.modify(uint64_t a1)
{
  return LocalParticipantView.supportsRotation.setter();
}

unint64_t LocalParticipantView.supportsCameraBlur.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((unint64_t)(*(uint64_t (**)(void))(v0 + 552))() >> 8) & 1;
}

unint64_t LocalParticipantView.supportsCameraBlur.setter()
{
  OUTLINED_FUNCTION_27_21();
  OUTLINED_FUNCTION_5_13();
  v1 += 69;
  uint64_t v2 = *v1;
  unint64_t result = ((uint64_t (*)(void))*v1)();
  if (((result >> 8) & 1) != v0)
  {
    OUTLINED_FUNCTION_22_25();
    v2();
    OUTLINED_FUNCTION_5_13();
    uint64_t v5 = OUTLINED_FUNCTION_9_49(v4);
    return v6(v5);
  }
  return result;
}

unint64_t (*LocalParticipantView.supportsCameraBlur.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_20_27(a1);
  OUTLINED_FUNCTION_0_20();
  *(unsigned char *)(v1 + 8) = ((*(unsigned __int16 (**)(void))(v2 + 552))() >> 8) & 1;
  return LocalParticipantView.supportsCameraBlur.modify;
}

unint64_t LocalParticipantView.supportsCameraBlur.modify(uint64_t a1)
{
  return LocalParticipantView.supportsCameraBlur.setter();
}

unint64_t LocalParticipantView.capabilitiesSupportsEffects.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((unint64_t)(*(uint64_t (**)(void))(v0 + 552))() >> 16) & 1;
}

uint64_t LocalParticipantView.hudRecipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                    + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView))
                              + 0x180))();
}

uint64_t key path setter for LocalParticipantView.hudRecipe : LocalParticipantView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe?(a1, (uint64_t)v4);
  return LocalParticipantView.hudRecipe.setter((uint64_t)v4);
}

uint64_t LocalParticipantView.hudRecipe.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v2 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  outlined init with copy of ConversationControlsRecipe?(a1, v4 - v3);
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(uint64_t))(v6 + 392))(v5);
  return outlined destroy of ConversationControlsRecipe?(a1);
}

void (*LocalParticipantView.hudRecipe.modify(void *a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_20_27(a1);
  size_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?)
                             - 8)
                 + 64);
  *(void *)(v1 + 8) = malloc(v2);
  *(void *)(v1 + 16) = malloc(v2);
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v3 + 384))();
  return LocalParticipantView.hudRecipe.modify;
}

void LocalParticipantView.hudRecipe.modify(uint64_t a1, char a2)
{
  size_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    outlined init with copy of ConversationControlsRecipe?((uint64_t)v3, (uint64_t)v2);
    LocalParticipantView.hudRecipe.setter((uint64_t)v2);
    outlined destroy of ConversationControlsRecipe?((uint64_t)v3);
  }
  else
  {
    LocalParticipantView.hudRecipe.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

uint64_t LocalParticipantView.isInComingCall.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 576))() & 1;
}

uint64_t LocalParticipantView.isInComingCall.setter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 584))();
}

uint64_t (*LocalParticipantView.isInComingCall.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_29_18(a1, OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 576))();
  OUTLINED_FUNCTION_17_9(v2);
  return LocalParticipantView.isInComingCall.modify;
}

uint64_t LocalParticipantView.isInComingCall.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_12_5(a1);
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v1 + 584))();
}

uint64_t LocalParticipantView.isInRoster.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for LocalParticipantView.isInRoster : LocalParticipantView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t LocalParticipantView.isInRoster.setter()
{
  return LocalParticipantView.shouldAddOverlayBlur.setter();
}

uint64_t LocalParticipantView.isInRoster.didset(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  uint64_t result = swift_beginAccess();
  if (*v3 != v2) {
    return LocalParticipantView.isInRosterDidChange()();
  }
  return result;
}

uint64_t LocalParticipantView.isInRosterDidChange()()
{
  uint64_t v1 = (uint64_t)v0;
  id v2 = objc_msgSend(v0, sel_layer);
  closure #1 in LocalParticipantView.isInRosterDidChange()(v2, v1);

  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView);
  LocalParticipantView.participantViewCornerRadius.getter();
  uint64_t v5 = v4;
  uint64_t v6 = (void *)(v3 + OBJC_IVAR____TtC15ConversationKit15ParticipantView_customCornerRadius);
  swift_beginAccess();
  *uint64_t v6 = v5;
  ParticipantView.customCornerRadius.didset();
  uint64_t v7 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  swift_beginAccess();
  return ParticipantView.isInRoster.setter(*v7);
}

void (*LocalParticipantView.isInRoster.modify())(uint64_t a1, uint64_t a2)
{
  id v2 = malloc(0x28uLL);
  OUTLINED_FUNCTION_16_2((uint64_t)v2);
  uint64_t v3 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  OUTLINED_FUNCTION_2();
  *(unsigned char *)(v1 + 32) = *v3;
  return LocalParticipantView.isInRoster.modify;
}

void LocalParticipantView.isInRoster.modify(uint64_t a1, uint64_t a2)
{
}

void LocalParticipantView.shouldAddOverlayBlur.modify(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 32));
  free(v3);
}

uint64_t LocalParticipantView.cinematicFramingIsAvailable.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 552))() & 1;
}

uint64_t LocalParticipantView.cinematicFramingIsAvailable.setter(char a1)
{
  int v2 = a1 & 1;
  OUTLINED_FUNCTION_5_13();
  v3 += 69;
  uint64_t v4 = *v3;
  uint64_t result = ((uint64_t (*)(void))*v3)();
  if ((result & 1) != v2)
  {
    OUTLINED_FUNCTION_22_25();
    v4();
    OUTLINED_FUNCTION_5_13();
    return (*(uint64_t (**)(uint64_t))(v6 + 560))(v7 & 0x1010101010100 | a1 & 1);
  }
  return result;
}

uint64_t (*LocalParticipantView.cinematicFramingIsAvailable.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_20_27(a1);
  OUTLINED_FUNCTION_0_20();
  *(unsigned char *)(v1 + 8) = (*(uint64_t (**)(void))(v2 + 552))() & 1;
  return LocalParticipantView.cinematicFramingIsAvailable.modify;
}

uint64_t LocalParticipantView.cinematicFramingIsAvailable.modify(uint64_t a1)
{
  char v1 = OUTLINED_FUNCTION_12_5(a1);
  return LocalParticipantView.cinematicFramingIsAvailable.setter(v1);
}

uint64_t LocalParticipantView.cinematicFramingIsEnabled.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 672))() & 1;
}

uint64_t LocalParticipantView.cinematicFramingIsEnabled.setter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 680))();
}

uint64_t (*LocalParticipantView.cinematicFramingIsEnabled.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_29_18(a1, OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 672))();
  OUTLINED_FUNCTION_17_9(v2);
  return LocalParticipantView.cinematicFramingIsEnabled.modify;
}

uint64_t LocalParticipantView.cinematicFramingIsEnabled.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_12_5(a1);
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v1 + 680))();
}

unint64_t LocalParticipantView.supportsReactionGestures.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((unint64_t)(*(uint64_t (**)(void))(v0 + 552))() >> 40) & 1;
}

unint64_t LocalParticipantView.supportsReactionGestures.setter()
{
  OUTLINED_FUNCTION_27_21();
  OUTLINED_FUNCTION_5_13();
  v1 += 69;
  uint64_t v2 = *v1;
  unint64_t result = ((uint64_t (*)(void))*v1)();
  if (((result >> 40) & 1) != v0)
  {
    OUTLINED_FUNCTION_22_25();
    v2();
    OUTLINED_FUNCTION_5_13();
    uint64_t v5 = OUTLINED_FUNCTION_9_49(v4);
    return v6(v5);
  }
  return result;
}

unint64_t (*LocalParticipantView.supportsReactionGestures.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_20_27(a1);
  OUTLINED_FUNCTION_0_20();
  *(unsigned char *)(v1 + 8) = ((unsigned __int16)((unint64_t)(*(uint64_t (**)(void))(v2 + 552))() >> 32) >> 8) & 1;
  return LocalParticipantView.supportsReactionGestures.modify;
}

unint64_t LocalParticipantView.supportsReactionGestures.modify(uint64_t a1)
{
  return LocalParticipantView.supportsReactionGestures.setter();
}

unint64_t LocalParticipantView.supportsStudioLight.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((unint64_t)(*(uint64_t (**)(void))(v0 + 552))() >> 48) & 1;
}

unint64_t LocalParticipantView.supportsStudioLight.setter()
{
  OUTLINED_FUNCTION_27_21();
  OUTLINED_FUNCTION_5_13();
  v1 += 69;
  uint64_t v2 = *v1;
  unint64_t result = ((uint64_t (*)(void))*v1)();
  if ((HIWORD(result) & 1) != v0)
  {
    OUTLINED_FUNCTION_22_25();
    v2();
    OUTLINED_FUNCTION_5_13();
    uint64_t v5 = OUTLINED_FUNCTION_9_49(v4);
    return v6(v5);
  }
  return result;
}

unint64_t (*LocalParticipantView.supportsStudioLight.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_20_27(a1);
  OUTLINED_FUNCTION_0_20();
  *(unsigned char *)(v1 + 8) = ((unint64_t)(*(uint64_t (**)(void))(v2 + 552))() >> 48) & 1;
  return LocalParticipantView.supportsStudioLight.modify;
}

unint64_t LocalParticipantView.supportsStudioLight.modify(uint64_t a1)
{
  return LocalParticipantView.supportsStudioLight.setter();
}

uint64_t LocalParticipantView.reactionEffectGestureIsEnabled.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 696))() & 1;
}

uint64_t LocalParticipantView.reactionEffectGestureIsEnabled.setter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 704))();
}

uint64_t (*LocalParticipantView.reactionEffectGestureIsEnabled.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_29_18(a1, OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 696))();
  OUTLINED_FUNCTION_17_9(v2);
  return LocalParticipantView.reactionEffectGestureIsEnabled.modify;
}

uint64_t LocalParticipantView.reactionEffectGestureIsEnabled.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_12_5(a1);
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v1 + 704))();
}

uint64_t LocalParticipantView.studioLightIsEnabled.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 720))() & 1;
}

uint64_t LocalParticipantView.studioLightIsEnabled.setter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 728))();
}

uint64_t (*LocalParticipantView.studioLightIsEnabled.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_29_18(a1, OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 720))();
  OUTLINED_FUNCTION_17_9(v2);
  return LocalParticipantView.studioLightIsEnabled.modify;
}

uint64_t LocalParticipantView.studioLightIsEnabled.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_12_5(a1);
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v1 + 728))();
}

unint64_t LocalParticipantView.cameraFlipButtonIsAvailable.getter()
{
  OUTLINED_FUNCTION_0_20();
  return ((unint64_t)(*(uint64_t (**)(void))(v0 + 552))() >> 24) & 1;
}

unint64_t LocalParticipantView.cameraFlipButtonIsAvailable.setter(char a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  unint64_t result = (*(uint64_t (**)(void))(v2 + 880))();
  if (result)
  {
    OUTLINED_FUNCTION_5_13();
    v4 += 69;
    uint64_t v5 = *v4;
    unint64_t result = ((uint64_t (*)(void))*v4)();
    if (((result >> 24) & 1) != (a1 & 1))
    {
      OUTLINED_FUNCTION_22_25();
      v5();
      OUTLINED_FUNCTION_5_13();
      uint64_t v7 = OUTLINED_FUNCTION_9_49(v6);
      return v8(v7);
    }
  }
  return result;
}

unint64_t (*LocalParticipantView.cameraFlipButtonIsAvailable.modify(void *a1))(uint64_t a1)
{
  OUTLINED_FUNCTION_20_27(a1);
  OUTLINED_FUNCTION_0_20();
  *(unsigned char *)(v1 + 8) = ((*(unsigned int (**)(void))(v2 + 552))() >> 24) & 1;
  return LocalParticipantView.cameraFlipButtonIsAvailable.modify;
}

unint64_t LocalParticipantView.cameraFlipButtonIsAvailable.modify(uint64_t a1)
{
  char v1 = OUTLINED_FUNCTION_12_5(a1);
  return LocalParticipantView.cameraFlipButtonIsAvailable.setter(v1);
}

uint64_t LocalParticipantView.videoMessagingState.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for LocalParticipantView.videoMessagingState : LocalParticipantView@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = LocalParticipantView.videoMessagingState.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for LocalParticipantView.videoMessagingState : LocalParticipantView()
{
  return LocalParticipantView.videoMessagingState.setter();
}

uint64_t LocalParticipantView.videoMessagingState.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

void (*LocalParticipantView.videoMessagingState.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t LocalParticipantView.$videoMessagingState.getter()
{
  return swift_endAccess();
}

uint64_t key path setter for LocalParticipantView.$videoMessagingState : LocalParticipantView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return LocalParticipantView.$videoMessagingState.setter((uint64_t)v4);
}

uint64_t LocalParticipantView.$videoMessagingState.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

void (*LocalParticipantView.$videoMessagingState.modify())(uint64_t a1, char a2)
{
  uint64_t v1 = malloc(0x40uLL);
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  v0[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[5] = v3;
  size_t v4 = *(void *)(v3 + 64);
  v0[6] = malloc(v4);
  v0[7] = malloc(v4);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return LocalParticipantView.$videoMessagingState.modify;
}

void LocalParticipantView.$videoMessagingState.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  size_t v4 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    LocalParticipantView.$videoMessagingState.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    LocalParticipantView.$videoMessagingState.setter(*(void *)(*(void *)a1 + 56));
  }
  free(v4);
  free(v3);
  free(v2);
}

UIView *LocalParticipantView.__allocating_init(isInRoster:supportsRotation:supportsCameraBlur:supportsReactions:supportsReactionGestures:supportsStudioLight:supportsCameraFlip:)(char a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  id v15 = objc_allocWithZone(v7);
  return LocalParticipantView.init(isInRoster:supportsRotation:supportsCameraBlur:supportsReactions:supportsReactionGestures:supportsStudioLight:supportsCameraFlip:)(a1, a2, a3, a4, a5, a6, a7);
}

UIView *LocalParticipantView.init(isInRoster:supportsRotation:supportsCameraBlur:supportsReactions:supportsReactionGestures:supportsStudioLight:supportsCameraFlip:)(char a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v80 = v11;
  uint64_t v81 = v10;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_21();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView;
  id v23 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  id v24 = v7;
  *(void *)&v7[v22] = OUTLINED_FUNCTION_15_37();
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView;
  *(void *)&v24[v25] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocalParticipantControlsView(0)), sel_init);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_dragEnabled] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_blurEnabled] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_shouldAddOverlayBlur] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView____lazy_storage___overlayBlurView] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresControlsHidden] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresViewHidden] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel] = 0;
  uint64_t v26 = &v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView__videoMessagingState];
  LOBYTE(v83[0]) = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v26, v21, v15);
  v24[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster] = a1;

  v84.receiver = v24;
  v84.super_class = ObjectType;
  uint64_t v74 = ObjectType;
  id v27 = objc_msgSendSuper2(&v84, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v28 = one-time initialization token for shared;
  uint64_t v29 = (char *)v27;
  if (v28 != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  char v31 = (*(uint64_t (**)(void))(v30 + 192))();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v32 + 184))();
  uint64_t v33 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView;
  OUTLINED_FUNCTION_14_2();
  id v37 = *(void (**)(unint64_t))(v36 + 560);
  uint64_t v38 = 0x1000000000000;
  if ((a6 & 1) == 0) {
    uint64_t v38 = 0;
  }
  uint64_t v39 = 0x10000000000;
  if ((a5 & 1) == 0) {
    uint64_t v39 = 0;
  }
  uint64_t v40 = 0x100000000;
  if ((a2 & 1) == 0) {
    uint64_t v40 = 0;
  }
  uint64_t v41 = 0x1000000;
  if ((a7 & 1) == 0) {
    uint64_t v41 = 0;
  }
  uint64_t v42 = 0x10000;
  if ((v34 & 1) == 0) {
    uint64_t v42 = 0;
  }
  uint64_t v43 = 256;
  if ((a3 & 1) == 0) {
    uint64_t v43 = 0;
  }
  unint64_t v44 = (v43 | v40 | v39 | v38 | v41) & 0xFFFFFFFFFFFFFFFELL | v31 & 1 | v42;
  id v45 = v35;
  v37(v44);

  uint64_t v46 = v29;
  id v47 = objc_msgSend(v46, sel_layer);
  objc_msgSend(v47, sel_setShadowPathIsBounds_, 1);

  uint64_t v48 = self;
  uint64_t v49 = v46;
  id v50 = objc_msgSend(v48, sel_clearColor);
  objc_msgSend(v49, sel_setBackgroundColor_, v50);

  LocalParticipantView.isInRosterDidChange()();
  uint64_t v51 = *(void *)&v49[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView];
  id v52 = objc_msgSend(v49, sel_addSubview_, v51);
  if ((*(uint64_t (**)(id))(*(void *)static Defaults.shared + 568))(v52))
  {
    uint64_t v53 = v51 + OBJC_IVAR____TtC15ConversationKit15ParticipantView_delegate;
    OUTLINED_FUNCTION_11_0();
    *(void *)(v53 + 8) = &protocol witness table for LocalParticipantView;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v54 = *(void **)&v29[v33];
  OUTLINED_FUNCTION_6_63();
  uint64_t v56 = *(void (**)(char *, _UNKNOWN **))(v55 + 512);
  uint64_t v57 = v49;
  id v58 = v54;
  v56(v49, &protocol witness table for LocalParticipantView);

  uint64_t v59 = *(void **)&v29[v33];
  objc_msgSend(v57, sel_addSubview_, v59);
  CGFloat v60 = *MEMORY[0x1E4FB12A8];
  CGFloat v61 = *(double *)(MEMORY[0x1E4FB12A8] + 8);
  CGFloat v62 = *(double *)(MEMORY[0x1E4FB12A8] + 16);
  CGFloat v63 = *(double *)(MEMORY[0x1E4FB12A8] + 24);
  int v64 = v57;
  id v65 = v59;
  v85.double top = v60;
  v85.double leading = v61;
  v85.double bottom = v62;
  v85.trailing = v63;
  UIView.addConstraintsToFill(_:insets:)(v64, v85);

  OUTLINED_FUNCTION_6_1();
  Published.projectedValue.getter();
  swift_endAccess();
  OUTLINED_FUNCTION_14_2();
  id v67 = *(uint64_t (**)(void *))(v66 + 864);
  id v69 = v68;
  uint64_t v70 = (void (*)(void *, void))v67(v83);
  lazy protocol witness table accessor for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher();
  Publisher<>.assign(to:)();
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v14, v81);
  v70(v83, 0);

  if (a4)
  {
    v83[3] = v74;
    v83[0] = v64;
    objc_allocWithZone(MEMORY[0x1E4FB1968]);
    uint64_t v71 = v64;
    id v72 = @nonobjc UILongPressGestureRecognizer.init(target:action:)(v83, (uint64_t)sel_handleLongPress_);
    [(UIView *)v71 addGestureRecognizer:v72];
  }
  return v64;
}

uint64_t outlined init with copy of ConversationControlsRecipe?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConversationControlsRecipe?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id LocalParticipantView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void LocalParticipantView.init(coder:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView;
  id v8 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  *(void *)&v0[v7] = OUTLINED_FUNCTION_15_37();
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView;
  *(void *)&v2[v9] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocalParticipantControlsView(0)), sel_init);
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel] = 0;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_dragEnabled] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_blurEnabled] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_shouldAddOverlayBlur] = 0;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView____lazy_storage___overlayBlurView] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresControlsHidden] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresViewHidden] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel] = 0;
  uint64_t v10 = &v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView__videoMessagingState];
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v10, v1, v3);

  OUTLINED_FUNCTION_23_26();
  __break(1u);
}

id LocalParticipantView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void LocalParticipantView.init(frame:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView;
  id v8 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  *(void *)&v0[v7] = OUTLINED_FUNCTION_15_37();
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView;
  *(void *)&v2[v9] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocalParticipantControlsView(0)), sel_init);
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel] = 0;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_dragEnabled] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_blurEnabled] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_shouldAddOverlayBlur] = 0;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView____lazy_storage___overlayBlurView] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresControlsHidden] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_requiresViewHidden] = 0;
  v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel] = 0;
  uint64_t v10 = &v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView__videoMessagingState];
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v10, v1, v3);

  OUTLINED_FUNCTION_23_26();
  __break(1u);
}

Swift::Void __swiftcall LocalParticipantView.handleLongPress(_:)(UILongPressGestureRecognizer *a1)
{
  if ([(UILongPressGestureRecognizer *)a1 state] == (id)1)
  {
    uint64_t v2 = v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
    OUTLINED_FUNCTION_2();
    if (MEMORY[0x1C8776240](v2))
    {
      uint64_t v3 = *(void *)(v2 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, ObjectType, v3);
      swift_unknownObjectRelease();
    }
  }
}

Swift::Void __swiftcall LocalParticipantView.layoutSubviews()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v2 + 632))())
  {
    uint64_t v3 = self;
    objc_msgSend(v3, sel_begin);
    v4.receiver = v0;
    v4.super_class = ObjectType;
    objc_msgSendSuper2(&v4, sel_layoutSubviews);
    LocalParticipantView._layout()();
    objc_msgSend(v3, sel_commit);
  }
  else
  {
    v5.receiver = v0;
    v5.super_class = ObjectType;
    objc_msgSendSuper2(&v5, sel_layoutSubviews);
    LocalParticipantView._layout()();
  }
}

id LocalParticipantView._layout()()
{
  objc_msgSend(v0, sel_bounds);
  id result = (id)CGRectIsInfinite(v4);
  if ((result & 1) == 0)
  {
    objc_msgSend(v0, sel_bounds);
    id result = (id)CGRectIsEmpty(v5);
    if ((result & 1) == 0)
    {
      uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_participantView];
      objc_msgSend(v0, sel_bounds);
      return objc_msgSend(v2, sel_setFrame_, 0.0, 0.0);
    }
  }
  return result;
}

uint64_t LocalParticipantView.configure(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  OUTLINED_FUNCTION_2();
  if (*v15 == 1)
  {
    ParticipantViewModel.compatibleWithRoster.getter();
    ParticipantView.configure(with:isOneToOneMode:)((uint64_t)v14, 0);
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_0((uint64_t)v14, (void (*)(void))type metadata accessor for ParticipantViewModel);
  }
  else
  {
    ParticipantView.configure(with:isOneToOneMode:)(a1, 0);
  }
  outlined init with copy of ParticipantViewModel(a1, (uint64_t)v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      outlined init with take of ParticipantVideoOverlayView.ViewModel((uint64_t)&v12[*(int *)(v17 + 64)], (uint64_t)v34);
      UIView.addTapInteraction(withTapCount:)(1);
      outlined init with copy of ParticipantVideoOverlayView.ViewModel((uint64_t)v34, (uint64_t)v32);
      if (v33 == 5)
      {

        OUTLINED_FUNCTION_0_3();
        (*(void (**)(uint64_t))(v18 + 752))(1);
        char v19 = 0;
      }
      else
      {
        outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v32);
        OUTLINED_FUNCTION_0_3();
        (*(void (**)(void))(v29 + 752))(0);
        char v19 = 1;
      }
      outlined destroy of ParticipantVideoOverlayView.ViewModel((uint64_t)v34);
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel) = v19;
      outlined destroy of ParticipantVideoView.ViewModel((uint64_t)&v12[*(int *)(v17 + 48)]);
    }
    else
    {
      id v24 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                        + 48)];
      id v31 = *(id *)v24;
      uint64_t v25 = *((void *)v24 + 9);
      uint64_t v26 = *((void *)v24 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      outlined consume of AnsweringMachineCallStatus?(v25, v26);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_50();
      if (((*(uint64_t (**)(void))(v27 + 568))() & 1) == 0) {
        UIView.removeTapInteractions(withTapCount:)(1);
      }
      OUTLINED_FUNCTION_0_20();
      (*(void (**)(void))(v28 + 752))(0);
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel) = 1;
    }
    return _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_0((uint64_t)v12, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
  }
  else
  {
    outlined init with take of ParticipantViewModel.ParticipantDetails((uint64_t)v12, v8);
    UIView.addTapInteraction(withTapCount:)(1);
    OUTLINED_FUNCTION_0_3();
    (*(void (**)(void))(v20 + 752))(0);
    char v21 = *(unsigned char *)(v8 + *(int *)(v4 + 40));
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_0(v8, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel) = v21;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel));
    return outlined destroy of ParticipantVideoView.ViewModel((uint64_t)&v12[*(int *)(v22 + 48)]);
  }
}

Swift::Void __swiftcall LocalParticipantView.addEffectsView(effectsView:)(UIView *effectsView)
{
  objc_msgSend(v1, sel_addSubview_, effectsView);
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView];
  objc_msgSend(v1, sel_bringSubviewToFront_, v2);
}

uint64_t LocalParticipantView.registerVideoLayers(with:)(uint64_t a1)
{
  return ParticipantView.registerVideoLayers(with:)(a1);
}

Swift::Void __swiftcall LocalParticipantView.updateControlsAlpha(animated:)(Swift::Bool animated)
{
  if (animated)
  {
    uint64_t v2 = self;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    aBlock[4] = partial apply for closure #1 in LocalParticipantView.updateControlsAlpha(animated:);
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_43;
    uint64_t v4 = _Block_copy(aBlock);
    uint64_t v5 = v1;
    swift_release();
    objc_msgSend(v2, sel_animateWithDuration_animations_, v4, 0.25);
    _Block_release(v4);
  }
  else
  {
    id v6 = *(id *)&v1[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView];
    LocalParticipantControlsView.updateControlsAlpha(animated:)(0);
  }
}

void closure #1 in LocalParticipantView.updateControlsAlpha(animated:)(uint64_t a1)
{
  id v1 = *(id *)(a1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView);
  LocalParticipantControlsView.updateControlsAlpha(animated:)(0);
}

void LocalParticipantView.configureControls(_:)(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_0_20();
  unsigned __int8 v4 = (*(uint64_t (**)(void))(v3 + 528))();
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsHiddenByViewModel) & 1) != 0
    || (uint64_t v6 = a1 >> 6) == 0)
  {
    uint64_t v6 = 0;
  }
  else if (v6 != 1)
  {
    if (a1 == 128) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 3;
    }
  }
  int v7 = v4;
  LocalParticipantView.controlsStyle.setter(v6);
  if (v7 == 3) {
    LocalParticipantView.updateControlsAlpha(animated:)(0);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v8 + 568))()) {
    ParticipantView.setInfoViewIsVisible(_:animated:)((a1 == 128) & ~*(unsigned char *)(v1 + v5), 1);
  }
}

Swift::Void __swiftcall LocalParticipantView.configureWithRecordingLocalVideo(_:)(Swift::Bool a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v2 + 568))()) {
    ParticipantView.configureWithRecordingLocalVideo(_:)(a1);
  }
}

Swift::Void __swiftcall LocalParticipantView.configureWithEffectsAvailable(_:effectsSelected:)(Swift::Bool _, Swift::Bool effectsSelected)
{
  BOOL v3 = _;
  OUTLINED_FUNCTION_6_63();
  if ((((unint64_t)(*(uint64_t (**)(void))(v4 + 552))() >> 16) & 1) != v3)
  {
    OUTLINED_FUNCTION_6_63();
    uint64_t v6 = OUTLINED_FUNCTION_9_49(v5);
    v7(v6);
  }
  OUTLINED_FUNCTION_6_63();
  (*(void (**)(Swift::Bool))(v8 + 632))(effectsSelected);
}

void LocalParticipantView.updateVisibleCameraPosition(_:localDeviceOrientation:animated:)(char a1, uint64_t a2, char a3)
{
}

id closure #1 in LocalParticipantView.isInRosterDidChange()(void *a1, uint64_t a2)
{
  BOOL v3 = (unsigned char *)(a2 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  swift_beginAccess();
  if (*v3 == 1)
  {
    if (one-time initialization token for shadow != -1) {
      swift_once();
    }
    id v4 = objc_msgSend((id)static Colors.LocalParticipantView.shadow, sel_CGColor);
    objc_msgSend(a1, sel_setShadowColor_, v4);

    LODWORD(v5) = 1062501089;
    objc_msgSend(a1, sel_setShadowOpacity_, v5);
    objc_msgSend(a1, sel_setShadowOffset_, -7.0, 0.0);
    return objc_msgSend(a1, sel_setShadowRadius_, 7.0);
  }
  else
  {
    id v7 = objc_msgSend(self, sel_clearColor);
    id v8 = objc_msgSend(v7, sel_CGColor);

    objc_msgSend(a1, sel_setShadowColor_, v8);
    return objc_msgSend(a1, sel_setShadowOpacity_, 0.0);
  }
}

uint64_t LocalParticipantView.participantViewCornerRadius.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_isInRoster);
  swift_beginAccess();
  if (*v1 == 1) {
    return static Platform.current.getter();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 384))();
}

id LocalParticipantView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t (*protocol witness for DraggableView.dragEnabled.modify in conformance LocalParticipantView())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

Swift::Void __swiftcall LocalParticipantView.didTap(_:)(ConversationKit::LocalParticipantAction a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  OUTLINED_FUNCTION_2();
  if (MEMORY[0x1C8776240](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8))(v2, v1, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

void __swiftcall LocalParticipantView.hostingController()(UIViewController_optional *__return_ptr retstr)
{
  OUTLINED_FUNCTION_5_4();
  if (MEMORY[0x1C8776240]())
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 24))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
}

uint64_t LocalParticipantView.participantViewDidTapShutter(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8))(5, v0, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t LocalParticipantView.participantViewShouldShowShutterTappedAlert(_:)()
{
  return 0;
}

uint64_t LocalParticipantView.layoutIdiom.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_delegate;
  OUTLINED_FUNCTION_2();
  uint64_t result = MEMORY[0x1C8776240](v3);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 32))(&v8, ObjectType, v5);
    uint64_t result = swift_unknownObjectRelease();
    char v7 = v8;
  }
  else
  {
    char v7 = 2;
  }
  *a1 = v7;
  return result;
}

void LocalParticipantView.showCountdownLabelIfNeeded()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel;
  if (!*(void *)&v0[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel])
  {
    uint64_t v2 = v0;
    id v3 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x1E4FB2928]);
    id v4 = objc_msgSend(v3, sel_fontDescriptorWithDesign_, *MEMORY[0x1E4FB0938]);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorFeatureKey, Int)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
    uint64_t v6 = (void *)*MEMORY[0x1E4FB28A0];
    *(void *)(inited + 32) = *MEMORY[0x1E4FB28A0];
    *(void *)(inited + 40) = 6;
    char v7 = (void *)*MEMORY[0x1E4FB2890];
    *(void *)(inited + 48) = *MEMORY[0x1E4FB2890];
    *(void *)(inited + 56) = 0;
    type metadata accessor for UIFontDescriptorFeatureKey(0);
    lazy protocol witness table accessor for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
    id v8 = v6;
    id v9 = v7;
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorAttributeName, [[UIFontDescriptorFeatureKey : Int]])>);
    uint64_t v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_1C3769620;
    uint64_t v12 = (void *)*MEMORY[0x1E4FB0910];
    *(void *)(v11 + 32) = *MEMORY[0x1E4FB0910];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UIFontDescriptorFeatureKey : Int]>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1C3769620;
    *(void *)(v13 + 32) = v10;
    *(void *)(v11 + 40) = v13;
    type metadata accessor for UIFontDescriptorAttributeName(0);
    id v14 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[UIFontDescriptorFeatureKey : Int]]);
    lazy protocol witness table accessor for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
    Dictionary.init(dictionaryLiteral:)();
    if (v4)
    {
      id v15 = v4;
      specialized _dictionaryUpCast<A, B, C, D>(_:)();
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v15, sel_fontDescriptorByAddingAttributes_, isa);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UILabel);
      if (v17)
      {
        id v18 = objc_msgSend(self, sel_fontWithDescriptor_size_, v17, 200.0);
LABEL_7:
        id v19 = v18;
        v39.value.super.Class isa = (Class)objc_msgSend(self, sel_whiteColor);
        UILabel.init(font:textColor:)(v20, (UIFont)v19, v39);
        uint64_t v22 = v21;
        objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v22, sel_setTextAlignment_, 1);
        objc_msgSend(v2, sel_insertSubview_belowSubview_, v22, *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_controlsView]);
        id v23 = self;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_1C3769580;
        id v25 = objc_msgSend(v22, sel_topAnchor);
        id v26 = objc_msgSend(v2, sel_topAnchor);
        id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

        *(void *)(v24 + 32) = v27;
        id v28 = objc_msgSend(v22, sel_bottomAnchor);
        id v29 = objc_msgSend(v2, sel_bottomAnchor);
        id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v29);

        *(void *)(v24 + 40) = v30;
        id v31 = objc_msgSend(v22, sel_leadingAnchor);
        id v32 = objc_msgSend(v2, sel_leadingAnchor);
        id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

        *(void *)(v24 + 48) = v33;
        id v34 = objc_msgSend(v22, sel_trailingAnchor);
        id v35 = objc_msgSend(v2, sel_trailingAnchor);
        id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

        *(void *)(v24 + 56) = v36;
        specialized Array._endMutation()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        Class v37 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v23, sel_activateConstraints_, v37);

        uint64_t v38 = *(void **)&v2[v1];
        *(void *)&v2[v1] = v22;

        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UILabel);
    }
    id v18 = objc_msgSend(self, sel_systemFontOfSize_, 200.0);
    id v17 = 0;
    goto LABEL_7;
  }
}

Swift::Void __swiftcall LocalParticipantView.updateCountdownWith(_:)(Swift::Int a1)
{
  LocalParticipantView.showCountdownLabelIfNeeded()();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel);
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    outlined bridged method (mbnn) of @objc UILabel.text.setter(v4, v5, v3);
  }
}

Swift::Void __swiftcall LocalParticipantView.endCountdown()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit20LocalParticipantView_countdownLabel);
  if (v2)
  {
    objc_msgSend(v2, sel_removeFromSuperview);
    uint64_t v2 = *(void **)(v0 + v1);
  }
  *(void *)(v0 + v1) = 0;
}

uint64_t sub_1C3203AF8()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = LocalParticipantView.videoMessagingState.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C3203B20()
{
  return LocalParticipantView.videoMessagingState.setter();
}

unint64_t lazy protocol witness table accessor for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher()
{
  unint64_t result = lazy protocol witness table cache variable for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher;
  if (!lazy protocol witness table cache variable for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher);
  }
  return result;
}

id @nonobjc UILongPressGestureRecognizer.init(target:action:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = *(void *)(v4 - 8);
    MEMORY[0x1F4188790](v6);
    id v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(v2, sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

uint64_t outlined init with copy of ParticipantViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ParticipantViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ParticipantVideoOverlayView.ViewModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1C3203DF8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in LocalParticipantView.updateControlsAlpha(animated:)()
{
  closure #1 in LocalParticipantView.updateControlsAlpha(animated:)(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type LocalParticipantLongPressAction and conformance LocalParticipantLongPressAction()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalParticipantLongPressAction and conformance LocalParticipantLongPressAction;
  if (!lazy protocol witness table cache variable for type LocalParticipantLongPressAction and conformance LocalParticipantLongPressAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalParticipantLongPressAction and conformance LocalParticipantLongPressAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalParticipantAction and conformance LocalParticipantAction()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalParticipantAction and conformance LocalParticipantAction;
  if (!lazy protocol witness table cache variable for type LocalParticipantAction and conformance LocalParticipantAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalParticipantAction and conformance LocalParticipantAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalParticipantView.DragEventType and conformance LocalParticipantView.DragEventType()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalParticipantView.DragEventType and conformance LocalParticipantView.DragEventType;
  if (!lazy protocol witness table cache variable for type LocalParticipantView.DragEventType and conformance LocalParticipantView.DragEventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalParticipantView.DragEventType and conformance LocalParticipantView.DragEventType);
  }
  return result;
}

uint64_t sub_1C3203F34(unsigned __int8 *a1)
{
  return LocalParticipantView.blurEnabled.setter();
}

uint64_t sub_1C3203F5C(unsigned __int8 *a1)
{
  return LocalParticipantView.shouldAddOverlayBlur.setter();
}

uint64_t sub_1C3203F84(unsigned __int8 *a1)
{
  return LocalParticipantView.requiresControlsHidden.setter();
}

void sub_1C3203FAC(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  LocalParticipantView.requiresViewHidden.setter(v1);
}

uint64_t sub_1C3203FD0()
{
  OUTLINED_FUNCTION_2_0();
  unint64_t v0 = LocalParticipantView.supportsRotation.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C3203FF8(unsigned __int8 *a1)
{
  return LocalParticipantView.supportsRotation.setter();
}

uint64_t sub_1C320401C()
{
  OUTLINED_FUNCTION_2_0();
  unint64_t v0 = LocalParticipantView.supportsCameraBlur.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

unint64_t sub_1C3204044(unsigned __int8 *a1)
{
  return LocalParticipantView.supportsCameraBlur.setter();
}

uint64_t sub_1C3204068()
{
  return LocalParticipantView.hudRecipe.getter();
}

uint64_t sub_1C3204090()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = LocalParticipantView.isInComingCall.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C32040B8(unsigned __int8 *a1)
{
  return LocalParticipantView.isInComingCall.setter();
}

uint64_t sub_1C32040E0(unsigned __int8 *a1)
{
  return LocalParticipantView.isInRoster.setter();
}

uint64_t sub_1C3204104()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = LocalParticipantView.cinematicFramingIsAvailable.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C320412C(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return LocalParticipantView.cinematicFramingIsAvailable.setter(v1);
}

uint64_t sub_1C3204150()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = LocalParticipantView.cinematicFramingIsEnabled.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C3204178(unsigned __int8 *a1)
{
  return LocalParticipantView.cinematicFramingIsEnabled.setter();
}

uint64_t sub_1C320419C()
{
  OUTLINED_FUNCTION_2_0();
  unint64_t v0 = LocalParticipantView.supportsReactionGestures.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

unint64_t sub_1C32041C4(unsigned __int8 *a1)
{
  return LocalParticipantView.supportsReactionGestures.setter();
}

uint64_t sub_1C32041E8()
{
  OUTLINED_FUNCTION_2_0();
  unint64_t v0 = LocalParticipantView.supportsStudioLight.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

unint64_t sub_1C3204210(unsigned __int8 *a1)
{
  return LocalParticipantView.supportsStudioLight.setter();
}

uint64_t sub_1C3204234()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = LocalParticipantView.reactionEffectGestureIsEnabled.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C320425C(unsigned __int8 *a1)
{
  return LocalParticipantView.reactionEffectGestureIsEnabled.setter();
}

uint64_t sub_1C3204280()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = LocalParticipantView.studioLightIsEnabled.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C32042A8(unsigned __int8 *a1)
{
  return LocalParticipantView.studioLightIsEnabled.setter();
}

uint64_t sub_1C32042CC()
{
  OUTLINED_FUNCTION_2_0();
  unint64_t v0 = LocalParticipantView.cameraFlipButtonIsAvailable.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

unint64_t sub_1C32042F4(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_34(a1);
  return LocalParticipantView.cameraFlipButtonIsAvailable.setter(v1);
}

uint64_t sub_1C3204318()
{
  return LocalParticipantView.$videoMessagingState.getter();
}

uint64_t dispatch thunk of LocalParticipantViewDelegate.localParticipantViewDidTap(_:localParticipantView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of LocalParticipantViewDelegate.localParticipantViewDidLongPress(_:localParticipantView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of LocalParticipantViewDelegate.hostingController()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LocalParticipantViewDelegate.layoutIdiom.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LocalParticipantViewDelegate.isCameraMixedWithScreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unsigned char *storeEnumTagSinglePayload for LocalParticipantLongPressAction(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C3204440);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for LocalParticipantLongPressAction()
{
}

uint64_t getEnumTagSinglePayload for LocalParticipantAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 15) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v5 = v6 - 16;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocalParticipantAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C32045C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

void type metadata accessor for LocalParticipantAction()
{
}

uint64_t ObjC metadata update function for LocalParticipantView()
{
  return type metadata accessor for LocalParticipantView();
}

uint64_t type metadata accessor for LocalParticipantView()
{
  uint64_t result = type metadata singleton initialization cache for LocalParticipantView;
  if (!type metadata singleton initialization cache for LocalParticipantView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for LocalParticipantView()
{
  type metadata accessor for Published<VideoMessageController.State>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LocalParticipantView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LocalParticipantView);
}

uint64_t dispatch thunk of LocalParticipantView.__allocating_init(isInRoster:supportsRotation:supportsCameraBlur:supportsReactions:supportsReactionGestures:supportsStudioLight:supportsCameraFlip:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

void type metadata accessor for Published<VideoMessageController.State>()
{
  if (!lazy cache variable for type metadata for Published<VideoMessageController.State>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<VideoMessageController.State>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for LocalParticipantView.DragEventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C320485CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for LocalParticipantView.DragEventType()
{
}

BOOL static CallScreeningScreeningState.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = a1[6];
  uint64_t v6 = a2[6];
  return specialized static CKStateMachineContainer.== infix(_:_:)(v5, v6);
}

uint64_t CallScreeningScreeningState.callUUID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallScreeningScreeningState.onEnterState.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t CallScreeningScreeningState.onLeaveState.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t CallScreeningScreeningState.stateMachineContainer.getter()
{
  return swift_retain();
}

uint64_t CallScreeningScreeningState.init(prevState:onEnterState:onLeaveState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  swift_release();
  uint64_t result = swift_release();
  *a6 = v13;
  a6[1] = v14;
  a6[2] = a2;
  a6[3] = a3;
  a6[4] = a4;
  a6[5] = a5;
  a6[6] = v12;
  return result;
}

void CallScreeningScreeningState.willExit(to:)(void *a1, uint64_t a2)
{
  BOOL v4 = v2;
  uint64_t v29 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_1_84();
  uint64_t WitnessTable = swift_getWitnessTable();
  if (CallScreeningState.stateMachine.getter(a2, WitnessTable))
  {
    uint64_t v11 = v2[1];
    id v27 = (void (*)(void *, uint64_t, uint64_t))v2[4];
    uint64_t v28 = *v2;
    (*(void (**)(void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 16));
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v26 = v13;
      uint64_t v14 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      id v25 = v12;
      unint64_t v15 = CallScreeningScreeningState.description.getter();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      *(_WORD *)(v14 + 12) = 2082;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
      unint64_t v18 = CallScreening.State.description.getter();
      unint64_t v20 = v19;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      _os_log_impl(&dword_1C2F90000, v25, v26, "%{public}s Exiting to %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v29);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v29);
    }
    v27(v4, v28, v11);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for answeringMachine != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v29, (uint64_t)static Logger.answeringMachine);
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_11_34(&dword_1C2F90000, v23, v24, "StateMachine is nil in willExit");
      OUTLINED_FUNCTION_3();
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CallScreeningScreeningState.enteredState()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v23 = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_1_84();
  uint64_t WitnessTable = swift_getWitnessTable();
  if (CallScreeningState.stateMachine.getter(v4, WitnessTable))
  {
    uint64_t v9 = v1[1];
    uint64_t v22 = *v1;
    unint64_t v20 = (void (*)(void *, uint64_t, uint64_t))v1[2];
    (*(void (**)(void))(*(void *)(v4 + 24) + 16))(*(void *)(v4 + 16));
    uint64_t v21 = v9;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      unint64_t v13 = CallScreeningScreeningState.description.getter();
      v24[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v15 = v21;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      _os_log_impl(&dword_1C2F90000, v10, v11, "EnteredState %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v2, v5);
    }
    else
    {
      uint64_t v15 = v21;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v2, v5);
    }
    v20(v3, v22, v15);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for answeringMachine != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v5, (uint64_t)static Logger.answeringMachine);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_11_34(&dword_1C2F90000, v18, v19, "StateMachine is nil in enteredState");
      OUTLINED_FUNCTION_3();
    }
  }
}

uint64_t CallScreeningScreeningState.update(with:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[19] = v2;
  v1[20] = v0;
  v1[18] = v3;
  uint64_t v4 = type metadata accessor for Logger();
  v1[21] = v4;
  v1[22] = *(void *)(v4 - 8);
  v1[23] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static CKStateMachineActor.shared;
  v1[24] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](CallScreeningScreeningState.update(with:), v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  long long *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  uint64_t v21;
  NSObject *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t (*v33)(void);
  uint64_t result;
  NSObject *log;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v4 = *(_OWORD *)(v1 + 16);
  uint64_t v3 = *(_OWORD *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)v1;
  *(void *)(v0 + 120) = v5;
  *(_OWORD *)(v0 + 104) = v3;
  *(_OWORD *)(v0 + 88) = v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = CallScreeningState.stateMachine.getter(v2, WitnessTable);
  *(void *)(v0 + 200) = v7;
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(long long **)(v0 + 160);
    os_log_type_t v11 = *(void *)v10;
    uint64_t v12 = *((void *)v10 + 1);
    unint64_t v13 = *(void *)(v9 + 16) == *(void *)v10 && *(void *)(v9 + 24) == v12;
    uint64_t v41 = *(void *)(v9 + 16);
    uint64_t v43 = *(void *)(v9 + 24);
    if (!v13)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v21 = *v8;
        if (*(unsigned char *)(*v8 + 33))
        {
          (*(void (**)(void))(*(void *)(*(void *)(v0 + 152) + 24) + 16))(*(void *)(*(void *)(v0 + 152) + 16));
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          outlined retain of AnsweringMachineCallStatus(v21);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          outlined retain of AnsweringMachineCallStatus(v21);
          uint64_t v22 = Logger.logObject.getter();
          type = static os_log_type_t.error.getter();
          uint64_t v23 = os_log_type_enabled(v22, type);
          id v25 = *(void *)(v0 + 176);
          uint64_t v24 = *(void *)(v0 + 184);
          uint64_t v40 = *(void *)(v0 + 168);
          uint64_t v38 = *(void *)(v0 + 144);
          if (v23)
          {
            log = v22;
            os_log_type_t v26 = swift_slowAlloc();
            id v36 = swift_slowAlloc();
            uint64_t v46 = v36;
            *(_DWORD *)os_log_type_t v26 = 136446466;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v46);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_release_n();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v26 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v46);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined release of AnsweringMachineCallStatus(v38);
            outlined release of AnsweringMachineCallStatus(v38);
            _os_log_impl(&dword_1C2F90000, log, type, "Found a call in screening that does not match the one we are tracking! Tracked: %{public}s new: %{public}s", (uint8_t *)v26, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v36, -1, -1);
            MEMORY[0x1C87760E0](v26, -1, -1);

            swift_unknownObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v40);
          }
          else
          {
            swift_release_n();
            swift_release_n();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease();
            outlined release of AnsweringMachineCallStatus(v38);
            outlined release of AnsweringMachineCallStatus(v38);

            (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v40);
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
        goto LABEL_22;
      }
      uint64_t v10 = *(long long **)(v0 + 160);
      uint64_t v9 = *(void *)(v0 + 144);
    }
    unint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 208) = v15;
    unint64_t v16 = *(void *)(v14 + 16);
    *(void *)(v15 + 16) = v16;
    os_log_type_t v17 = *(void *)(v14 + 24);
    *(void *)(v15 + 24) = v17;
    uint64_t v18 = *v10;
    uint64_t v19 = v10[1];
    unint64_t v20 = v10[2];
    *(void *)(v15 + 80) = *((void *)v10 + 6);
    *(_OWORD *)(v15 + 48) = v19;
    *(_OWORD *)(v15 + 64) = v20;
    *(_OWORD *)(v15 + 32) = v18;
    switch(*(unsigned char *)(v9 + 32))
    {
      case 1:
        if (*(unsigned char *)(v9 + 33)) {
          goto LABEL_9;
        }
        id v27 = *(void (**)(uint64_t, uint64_t))(v17 + 24);
        uint64_t v28 = v16;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        v27(v28, v17);
        unint64_t v44 = *(void *)(v17 + 32) + **(int **)(v17 + 32);
        uint64_t v29 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v29;
        *uint64_t v29 = v0;
        v29[1] = CallScreeningScreeningState.update(with:);
        OUTLINED_FUNCTION_9_50();
        id v30 = v44;
LABEL_18:
        __asm { BRAA            X9, X16 }
        return result;
      case 5:
        UIColor_optional v39 = *(void *)(v17 + 32) + **(int **)(v17 + 32);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v31 = (void *)swift_task_alloc();
        *(void *)(v0 + 232) = v31;
        *uint64_t v31 = v0;
        v31[1] = CallScreeningScreeningState.update(with:);
        OUTLINED_FUNCTION_5_70();
        id v30 = v39;
        goto LABEL_18;
      case 6:
        uint64_t v42 = *(void *)(v17 + 32) + **(int **)(v17 + 32);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        id v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 248) = v32;
        *id v32 = v0;
        v32[1] = CallScreeningScreeningState.update(with:);
        OUTLINED_FUNCTION_9_50();
        OUTLINED_FUNCTION_5_70();
        id v30 = v42;
        goto LABEL_18;
      default:
LABEL_9:
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_unknownObjectRelease();
        swift_release();
        break;
    }
  }
LABEL_22:
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v33();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_10_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 224) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 192);
  if (v0) {
    uint64_t v6 = CallScreeningScreeningState.update(with:);
  }
  else {
    uint64_t v6 = CallScreeningScreeningState.update(with:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  outlined retain of CallScreening.State((void *)(v0 + 16), (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_10_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 192);
  if (v0) {
    uint64_t v6 = CallScreeningScreeningState.update(with:);
  }
  else {
    uint64_t v6 = CallScreeningScreeningState.update(with:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_10_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 256) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 192);
  if (v0) {
    uint64_t v6 = CallScreeningScreeningState.update(with:);
  }
  else {
    uint64_t v6 = CallScreeningScreeningState.update(with:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_28_0();
  outlined retain of CallScreening.State((void *)(v0 + 16), (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

void closure #1 in CallScreeningScreeningState.update(with:)(long long *a1, void *a2)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v6);
  if (v7 >> 61 == 4)
  {
    v7 &= 0x1FFFFFFFFFFFFFFFuLL;
    if (v6[0] == *a2 && v6[1] == a2[1]) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v3 = 0;
    v7 &= 0x1FFFFFFFFFFFFFFFuLL;
  }
  lazy protocol witness table accessor for type CKStateMachineError and conformance CKStateMachineError();
  uint64_t v4 = (void *)swift_allocError();
  if (v3) {

  }
  else {
    swift_willThrow();
  }
}

uint64_t protocol witness for CallScreeningState.stateMachineContainer.getter in conformance CallScreeningScreeningState<A>()
{
  return swift_retain();
}

void protocol witness for CallScreeningState.willExit(to:) in conformance CallScreeningScreeningState<A>(void *a1, uint64_t a2)
{
}

void protocol witness for CallScreeningState.enteredState() in conformance CallScreeningScreeningState<A>()
{
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningScreeningState<A>()
{
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 64) = *(void *)(v0 + 48);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningScreeningState<A>;
  return CallScreeningScreeningState.update(with:)();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

unint64_t CallScreeningScreeningState.description.getter()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v2 = *v0;
  uint64_t v1 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000019;
}

uint64_t sub_1C32064A0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallScreeningScreeningState.update(with:)(long long *a1)
{
  closure #1 in CallScreeningScreeningState.update(with:)(a1, (void *)(v1 + 32));
}

uint64_t instantiation function for generic protocol witness table for CallScreeningScreeningState<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for CallScreeningScreeningState()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CallScreeningScreeningState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CallScreeningScreeningState(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CallScreeningScreeningState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CallScreeningScreeningState()
{
  return __swift_instantiateGenericMetadata();
}

void __swiftcall UIActivityIndicatorView.init(style:size:)(UIActivityIndicatorView *__return_ptr retstr, ConversationKit::PlatformActivityIndicatorStyle style, ConversationKit::PlatformActivityIndicatorSize size)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  if (size) {
    uint64_t v5 = 101;
  }
  else {
    uint64_t v5 = 100;
  }
  objc_msgSend(v4, sel_setActivityIndicatorViewStyle_, v5);
}

BOOL static PlatformActivityIndicatorSize.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PlatformActivityIndicatorSize.hash(into:)(uint64_t a1, char a2)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlatformActivityIndicatorSize(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PlatformActivityIndicatorSize.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PlatformActivityIndicatorSize()
{
  return PlatformActivityIndicatorSize.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PlatformActivityIndicatorSize(uint64_t a1)
{
  PlatformActivityIndicatorSize.hash(into:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type PlatformActivityIndicatorSize and conformance PlatformActivityIndicatorSize()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformActivityIndicatorSize and conformance PlatformActivityIndicatorSize;
  if (!lazy protocol witness table cache variable for type PlatformActivityIndicatorSize and conformance PlatformActivityIndicatorSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformActivityIndicatorSize and conformance PlatformActivityIndicatorSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformActivityIndicatorStyle and conformance PlatformActivityIndicatorStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformActivityIndicatorStyle and conformance PlatformActivityIndicatorStyle;
  if (!lazy protocol witness table cache variable for type PlatformActivityIndicatorStyle and conformance PlatformActivityIndicatorStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformActivityIndicatorStyle and conformance PlatformActivityIndicatorStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformActivityIndicatorSize()
{
  return &type metadata for PlatformActivityIndicatorSize;
}

unsigned char *storeEnumTagSinglePayload for PlatformActivityIndicatorSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3206968);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformActivityIndicatorStyle()
{
  return &type metadata for PlatformActivityIndicatorStyle;
}

Swift::Void __swiftcall UIView.setCHCRPriority(_:)(__C::UILayoutPriority a1)
{
  objc_msgSend(v1, sel_setContentCompressionResistancePriority_forAxis_, 1);
  LODWORD(v3) = a1;
  objc_msgSend(v1, sel_setContentCompressionResistancePriority_forAxis_, 0, v3);
  LODWORD(v4) = a1;
  objc_msgSend(v1, sel_setContentHuggingPriority_forAxis_, 1, v4);
  LODWORD(v5) = a1;
  objc_msgSend(v1, sel_setContentHuggingPriority_forAxis_, 0, v5);
}

void static UIView.animate(with:delay:animations:completion:)(void *a1, uint64_t a2, char a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  char v15 = a3 & 1;
  unint64_t v16 = __swift_project_boxed_opaque_existential_1(a1, v13);
  specialized static UIView.animate(with:delay:animations:completion:)((uint64_t)v16, a2, v15, a4, a5, a6, a7, v7, v13, v14);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ()(uint64_t a1, uint64_t a2)
{
  double v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void static UIView.animate(withCubicAnimationParameters:animations:completion:)(double *a1, uint64_t (*a2)(), uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void static UIView.animate(withSpringParameters:delay:animations:completion:)(double *a1, uint64_t a2, char a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7)
{
}

BOOL ContextMenuNotificationUserInfoKey.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContextMenuNotificationUserInfoKey.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t ContextMenuNotificationUserInfoKey.rawValue.getter()
{
  return 0xD000000000000018;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance ContextMenuNotificationUserInfoKey@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = ContextMenuNotificationUserInfoKey.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContextMenuNotificationUserInfoKey@<X0>(void *a1@<X8>)
{
  unint64_t result = ContextMenuNotificationUserInfoKey.rawValue.getter();
  *a1 = 0xD000000000000018;
  a1[1] = v3;
  return result;
}

uint64_t UIView.contextMenuUserInfo.getter()
{
  uint64_t v5 = MEMORY[0x1E4FBC868];
  id v1 = objc_msgSend(v0, sel_SBUISA_layoutMode);
  type metadata accessor for SBUISystemApertureLayoutMode(0);
  v4[3] = v2;
  v4[0] = v1;
  specialized Dictionary.subscript.setter((uint64_t)v4);
  return v5;
}

void specialized static UIView.animate(with:delay:animations:completion:)(double *a1, uint64_t a2, char a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v13 = *a1;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C58]), sel_initWithMass_stiffness_damping_initialVelocity_, a1[1], a1[2], a1[3], a1[4], a1[5]);
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1ED8]), sel_initWithDuration_timingParameters_, v14, v13);

  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v23 = &block_descriptor_44;
  unint64_t v16 = _Block_copy(&v20);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_addAnimations_, v16);
  _Block_release(v16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  uint64_t v24 = partial apply for closure #1 in static UIView.animate(with:delay:animations:completion:);
  uint64_t v25 = v17;
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v23 = &block_descriptor_7_0;
  uint64_t v18 = _Block_copy(&v20);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  swift_release();
  objc_msgSend(v15, sel_addCompletion_, v18);
  _Block_release(v18);
  if ((a3 & 1) != 0 || (double v19 = *(double *)&a2, *(double *)&a2 <= 0.0)) {
    objc_msgSend(v15, sel_startAnimation, v19);
  }
  else {
    objc_msgSend(v15, sel_startAnimationAfterDelay_, *(double *)&a2);
  }
}

{
  double v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;

  double v13 = *a1;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1698]), sel_initWithControlPoint1_controlPoint2_, a1[1], a1[2], a1[3], a1[4]);
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1ED8]), sel_initWithDuration_timingParameters_, v14, v13);

  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v23 = &block_descriptor_10_0;
  unint64_t v16 = _Block_copy(&v20);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_addAnimations_, v16);
  _Block_release(v16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  uint64_t v24 = partial apply for closure #1 in static UIView.animate(with:delay:animations:completion:);
  uint64_t v25 = v17;
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v23 = &block_descriptor_17_0;
  uint64_t v18 = _Block_copy(&v20);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  swift_release();
  objc_msgSend(v15, sel_addCompletion_, v18);
  _Block_release(v18);
  if ((a3 & 1) != 0 || (double v19 = *(double *)&a2, *(double *)&a2 <= 0.0)) {
    objc_msgSend(v15, sel_startAnimation, v19);
  }
  else {
    objc_msgSend(v15, sel_startAnimationAfterDelay_, *(double *)&a2);
  }
}

void specialized static UIView.animate(with:delay:animations:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double v16 = (*(double (**)(uint64_t, uint64_t))(a10 + 8))(a9, a10);
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1ED8]), sel_initWithDuration_timingParameters_, (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 16))(a9, a10), v16);
  swift_unknownObjectRelease();
  os_log_type_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v22 = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  uint64_t v24 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v25 = &block_descriptor_20_0;
  uint64_t v18 = _Block_copy(&v22);
  swift_retain();
  swift_release();
  objc_msgSend(v17, sel_addAnimations_, v18);
  _Block_release(v18);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a6;
  *(void *)(v19 + 24) = a7;
  os_log_type_t v26 = partial apply for closure #1 in static UIView.animate(with:delay:animations:completion:);
  uint64_t v27 = v19;
  uint64_t v22 = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  uint64_t v24 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v25 = &block_descriptor_27_0;
  uint64_t v20 = _Block_copy(&v22);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  swift_release();
  objc_msgSend(v17, sel_addCompletion_, v20);
  _Block_release(v20);
  if ((a3 & 1) != 0 || (double v21 = *(double *)&a2, *(double *)&a2 <= 0.0)) {
    objc_msgSend(v17, sel_startAnimation, v21);
  }
  else {
    objc_msgSend(v17, sel_startAnimationAfterDelay_, *(double *)&a2);
  }
}

unsigned char *storeEnumTagSinglePayload for ContextMenuNotificationUserInfoKey(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C3207404);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextMenuNotificationUserInfoKey()
{
  return &type metadata for ContextMenuNotificationUserInfoKey;
}

uint64_t partial apply for closure #1 in static UIView.animate(with:delay:animations:completion:)(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(BOOL))(v1 + 16);
  if (v2) {
    return v2(result == 0);
  }
  return result;
}

void *static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:scale:font:weight:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, uint64_t a8@<D0>)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.Scale?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)__src - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Image.Scale();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, a5, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)(a1, a2, a3, a4, (uint64_t)v18, a6, a8, 0, __src);
  return memcpy(a7, __src, 0x60uLL);
}

uint64_t static SystemSymbol.catalystCallControl(name:color:backgroundColor:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  unint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a7;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a7;
  unint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a7;
  v20.n128_u64[1] = v17;
  v20.n128_u64[0] = (unint64_t)partial apply for closure #2 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
  SystemSymbol.init(name:color:backgroundColor:scale:font:weight:)(a1, a2, a3, a4, a5, a6, (unint64_t)partial apply for closure #1 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:), v16, __src, v20, (unint64_t)partial apply for closure #3 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:), v18);
  memcpy(a8, __src, 0x60uLL);
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F3EC70];
  uint64_t v3 = type metadata accessor for Image.Scale();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t partial apply for closure #1 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:)(a1);
}

uint64_t one-time initialization function for callControlBackgroundOn()
{
  uint64_t result = static Color.white.getter();
  static SystemSymbol<A>.callControlBackgroundOn = result;
  return result;
}

uint64_t *SystemSymbol<A>.callControlBackgroundOn.unsafeMutableAddressor()
{
  if (one-time initialization token for callControlBackgroundOn != -1) {
    swift_once();
  }
  return &static SystemSymbol<A>.callControlBackgroundOn;
}

uint64_t static SystemSymbol<A>.callControlBackgroundOn.getter()
{
  return static SystemSymbol<A>.callControlBackgroundOn.getter(&one-time initialization token for callControlBackgroundOn);
}

uint64_t one-time initialization function for callControlBackgroundOff()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v3 + 104))(v2, *MEMORY[0x1E4F3EB10]);
  uint64_t result = MEMORY[0x1C87725D0](v2, 0.311111111, 0.274509804, 0.274509804, 0.7);
  static SystemSymbol<A>.callControlBackgroundOff = result;
  return result;
}

uint64_t *SystemSymbol<A>.callControlBackgroundOff.unsafeMutableAddressor()
{
  if (one-time initialization token for callControlBackgroundOff != -1) {
    swift_once();
  }
  return &static SystemSymbol<A>.callControlBackgroundOff;
}

uint64_t static SystemSymbol<A>.callControlBackgroundOff.getter()
{
  return static SystemSymbol<A>.callControlBackgroundOn.getter(&one-time initialization token for callControlBackgroundOff);
}

uint64_t static SystemSymbol<A>.callControlBackgroundOn.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t (*default argument 1 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)())(char a1)
{
  return closure #1 in default argument 1 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:);
}

uint64_t closure #1 in default argument 1 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)(char a1)
{
  if (a1) {
    return static Color.black.getter();
  }
  else {
    return static Color.white.getter();
  }
}

uint64_t (*default argument 2 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)())(char a1)
{
  return closure #1 in default argument 2 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:);
}

uint64_t closure #1 in default argument 2 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for callControlBackgroundOff == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (one-time initialization token for callControlBackgroundOn != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:
  return swift_retain();
}

uint64_t static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (**a7)()@<X8>)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  *a7 = partial apply for closure #1 in static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:);
  a7[1] = (uint64_t (*)())v14;
  a7[2] = (uint64_t (*)())partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> (@owned Color);
  a7[3] = (uint64_t (*)())v15;
  a7[4] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> (@owned Color)partial apply;
  a7[5] = (uint64_t (*)())v16;
  a7[6] = (uint64_t (*)())closure #1 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
  a7[7] = 0;
  a7[8] = (uint64_t (*)())partial apply for closure #2 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
  a7[9] = 0;
  a7[10] = (uint64_t (*)())partial apply for closure #3 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
  a7[11] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C3207C70()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C3207CD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> (@owned Color)(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t key path getter for ConversationHUDControlsView.recipe : ConversationHUDControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
}

uint64_t key path setter for ConversationHUDControlsView.recipe : ConversationHUDControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0))(v6);
}

void ConversationHUDControlsView.recipe.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView);
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_recipe;
  swift_beginAccess();
  outlined init with copy of ConversationControlsRecipe(v6, (uint64_t)v4);
  (*(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v5) + 0xA0))(v4);
  specialized FaceTimeControlsView.handleUpdateDuringEphemeralAlert()();
}

uint64_t ConversationHUDControlsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t ConversationHUDControlsView.recipe.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_recipe;
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v3);
  swift_endAccess();
  ConversationHUDControlsView.recipe.didset();
  return outlined destroy of ConversationControlsRecipe(a1);
}

uint64_t (*ConversationHUDControlsView.recipe.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationHUDControlsView.recipe.modify;
}

uint64_t ConversationHUDControlsView.recipe.modify(uint64_t a1, char a2)
{
  return ConversationHUDControlsView.recipe.modify(a1, a2, (uint64_t (*)(uint64_t))ConversationHUDControlsView.recipe.didset);
}

id ConversationHUDControlsView.controlsManager.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_controlsManager);
}

uint64_t key path getter for ConversationHUDControlsView.context : ConversationHUDControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsView.context : ConversationHUDControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB8))(*a1);
}

uint64_t ConversationHUDControlsView.context.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t ConversationHUDControlsView.context.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_context);
  uint64_t result = OUTLINED_FUNCTION_11_0();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ConversationHUDControlsView.context.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for ConversationHUDControlsView.ephemeralAlertTimer : ConversationHUDControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsView.ephemeralAlertTimer : ConversationHUDControlsView(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0);
  id v4 = *a1;
  return v3(v2);
}

void *ConversationHUDControlsView.ephemeralAlertTimer.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationHUDControlsView.ephemeralAlertTimer.setter(void *a1)
{
}

uint64_t (*ConversationHUDControlsView.ephemeralAlertTimer.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for ConversationHUDControlsView.ephemeralAlert : ConversationHUDControlsView@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t key path setter for ConversationHUDControlsView.ephemeralAlert : ConversationHUDControlsView(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, void *, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of ConversationControlsRecipe.View?(*(id *)a1, v3);
  return v4(v2, v3, v5);
}

void ConversationHUDControlsView.ephemeralAlert.didset()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_ephemeralAlert);
  swift_beginAccess();
  if (*v1) {
    specialized FaceTimeControlsView.displayEphemeralAlert()();
  }
  else {
    specialized FaceTimeControlsView.cleanUpEphemeralAlert()();
  }
}

id ConversationHUDControlsView.ephemeralAlert.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  outlined copy of ConversationControlsRecipe.View?(*v0, v0[1]);
  return v1;
}

void ConversationHUDControlsView.ephemeralAlert.setter(void *a1, void *a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_ephemeralAlert;
  OUTLINED_FUNCTION_11_0();
  uint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void **)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = a3;
  outlined copy of ConversationControlsRecipe.View?(a1, a2);
  outlined consume of ConversationControlsRecipe.View?(v8, v9);
  ConversationHUDControlsView.ephemeralAlert.didset();
  outlined consume of ConversationControlsRecipe.View?(a1, a2);
}

uint64_t (*ConversationHUDControlsView.ephemeralAlert.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationHUDControlsView.ephemeralAlert.modify;
}

uint64_t ConversationHUDControlsView.ephemeralAlert.modify(uint64_t a1, char a2)
{
  return ConversationHUDControlsView.recipe.modify(a1, a2, (uint64_t (*)(uint64_t))ConversationHUDControlsView.ephemeralAlert.didset);
}

void key path getter for ConversationHUDControlsView.cnkContentAlpha : ConversationHUDControlsView(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
}

uint64_t key path setter for ConversationHUDControlsView.cnkContentAlpha : ConversationHUDControlsView(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100))(*a1);
}

void ConversationHUDControlsView.cnkContentAlpha.didset()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = (double *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_cnkContentAlpha);
    uint64_t v6 = swift_beginAccess();
    (*(void (**)(uint64_t, double))((*v2 & *v4) + 0x68))(v6, *v5);
  }
  uint64_t v7 = (void *)(*(uint64_t (**)(void))((*v2 & *v1) + 0xE0))();
  outlined consume of ConversationControlsRecipe.View?(v7, v8);
  if (v7)
  {
    uint64_t v9 = (void *)(*(uint64_t (**)(void))((*v2 & *v1) + 0x130))();
    uint64_t v10 = (double *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_cnkContentAlpha);
    swift_beginAccess();
    objc_msgSend(v9, sel_setAlpha_, *v10);
  }
  else
  {
    os_log_type_t v11 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView);
    uint64_t v12 = (double *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_cnkContentAlpha);
    swift_beginAccess();
    objc_msgSend(v11, sel_setAlpha_, *v12);
  }
}

double ConversationHUDControlsView.cnkContentAlpha.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

void ConversationHUDControlsView.cnkContentAlpha.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_cnkContentAlpha);
  OUTLINED_FUNCTION_11_0();
  double *v3 = a1;
  ConversationHUDControlsView.cnkContentAlpha.didset();
}

uint64_t (*ConversationHUDControlsView.cnkContentAlpha.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationHUDControlsView.cnkContentAlpha.modify;
}

uint64_t ConversationHUDControlsView.cnkContentAlpha.modify(uint64_t a1, char a2)
{
  return ConversationHUDControlsView.recipe.modify(a1, a2, (uint64_t (*)(uint64_t))ConversationHUDControlsView.cnkContentAlpha.didset);
}

uint64_t ConversationHUDControlsView.recipe.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t ConversationHUDControlsView.showCallDetailsButton.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  id v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                            + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView))
                                      + 0xE0))();
  uint64_t v3 = (*(uint64_t (**)(void))((*v1 & *v2) + 0xB8))();

  return v3;
}

id ConversationHUDControlsView.statusView.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView);
}

uint64_t key path getter for ConversationHUDControlsView.buttonShelfView : ConversationHUDControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x118))();
  *a2 = result;
  return result;
}

void key path setter for ConversationHUDControlsView.buttonShelfView : ConversationHUDControlsView(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  ConversationHUDControlsView.buttonShelfView.setter(v1);
}

void *ConversationHUDControlsView.buttonShelfView.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationHUDControlsView.buttonShelfView.setter(void *a1)
{
}

void ConversationHUDControlsView.ephemeralAlertTimer.setter(void *a1, void *a2)
{
  uint64_t v4 = (void **)(v2 + *a2);
  OUTLINED_FUNCTION_11_0();
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
}

uint64_t key path getter for ConversationHUDControlsView.ephemeralAlertNotice : ConversationHUDControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x130))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsView.ephemeralAlertNotice : ConversationHUDControlsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x138))(*a1);
}

id ConversationHUDControlsView.ephemeralAlertNotice.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_controlsManager);
    id v6 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDEphemeralNotice());
    id v7 = ConversationHUDEphemeralNotice.init(controlsManager:)(v5);
    uint64_t v8 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v7;
    id v3 = v7;

    uint64_t v2 = 0;
  }
  id v9 = v2;
  return v3;
}

void ConversationHUDControlsView.ephemeralAlertNotice.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1
                + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice) = a1;
}

void (*ConversationHUDControlsView.ephemeralAlertNotice.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationHUDControlsView.ephemeralAlertNotice.getter();
  return ConversationHUDControlsView.ephemeralAlertNotice.modify;
}

void ConversationHUDControlsView.ephemeralAlertNotice.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    ConversationHUDControlsView.ephemeralAlertNotice.setter((uint64_t)v3);
  }
  else
  {
    ConversationHUDControlsView.ephemeralAlertNotice.setter((uint64_t)v2);
  }
}

id ConversationHUDControlsView.__allocating_init(recipe:controlsManager:context:menuHostViewController:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  return ConversationHUDControlsView.init(recipe:controlsManager:context:menuHostViewController:)(a1, a2, a3, a4, a5);
}

id ConversationHUDControlsView.init(recipe:controlsManager:context:menuHostViewController:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_ephemeralAlertTimer] = 0;
  uint64_t v15 = &v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_ephemeralAlert];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  v15[16] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_cnkContentAlpha] = 0x3FF0000000000000;
  id v33 = (void **)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_buttonShelfView];
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_buttonShelfView] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice] = 0;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_recipe]);
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_controlsManager] = a2;
  v5[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_context] = a3;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v14);
  objc_allocWithZone((Class)type metadata accessor for ConversationHUDControlsStatusView());
  id v36 = a4;
  id v16 = a2;
  uint64_t v17 = v5;
  id v34 = a4;
  uint64_t v35 = a5;
  *(void *)&v17[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView] = ConversationHUDControlsStatusView.init(recipe:controlsManager:menuHostViewController:context:presentationStyle:)((uint64_t)v14, v16, a4, a5, a3, 0);
  uint64_t v18 = a1 + *(int *)(v12 + 68);
  uint64_t v19 = *(char *)(v18 + 40);
  if ((int)v19 <= -3)
  {
    uint64_t v20 = *(void *)v18;
    outlined copy of ConversationControlsRecipe.Actions(*(void *)v18, *(void *)(v18 + 8), *(void *)(v18 + 16), *(void *)(v18 + 24), *(void *)(v18 + 32), v19);
  }
  else
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  uint64_t v21 = *(void *)(v20 + 16);
  swift_bridgeObjectRelease();
  uint64_t v22 = v17;
  uint64_t v23 = v36;
  if (v21)
  {
    outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v14);
    id v24 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDControlsButtonShelfView());
    id v25 = v16;
    id v26 = v23;
    id v27 = ConversationHUDControlsButtonShelfView.init(recipe:controlsManager:context:menuHostViewController:)((uint64_t)v14, v25, a3, v34);
    uint64_t v28 = v33;
    OUTLINED_FUNCTION_11_0();
    uint64_t v22 = *v28;
    void *v28 = v27;
  }
  uint64_t v29 = (objc_class *)type metadata accessor for ConversationHUDControlsView();
  v37.receiver = v17;
  v37.super_class = v29;
  id v30 = objc_msgSendSuper2(&v37, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  ConversationHUDControlsView.setupRootView()();

  outlined destroy of ConversationControlsRecipe(a1);
  return v30;
}

void ConversationHUDControlsView.setupRootView()()
{
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_setAllowsGroupOpacity_, 0);

  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView);
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8);
  v4();
  objc_msgSend(v2, sel_setAlpha_);
  uint64_t v5 = (void *)(*(uint64_t (**)(id))((*v3 & *v0) + 0x130))(objc_msgSend(v0, sel_addSubview_, v2));
  objc_msgSend(v0, sel_insertSubview_below_, v5, v2);

  specialized FaceTimeControlsView.handleUpdateDuringEphemeralAlert()();
  uint64_t v6 = (*(uint64_t (**)(void))((*v3 & *v0) + 0x118))();
  if (v6)
  {
    id v7 = (void *)v6;
    v4();
    objc_msgSend(v7, sel_setAlpha_);
    objc_msgSend(v0, sel_addSubview_, v7);
  }
  ConversationHUDControlsView.setupLayoutConstraints()();
}

id ConversationHUDControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationHUDControlsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_ephemeralAlertTimer] = 0;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_ephemeralAlert];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_cnkContentAlpha] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_buttonShelfView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView____lazy_storage___ephemeralAlertNotice] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ConversationHUDControlsView.layoutSubviews()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationHUDControlsView();
  id v1 = objc_msgSendSuper2(&v2, sel_layoutSubviews);
  (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & **(void **)&v0[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_controlsManager])
                             + 0x988))(v1);
}

id ConversationHUDControlsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ConversationHUDControlsView.init(frame:)()
{
}

id ConversationHUDControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationHUDControlsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlert.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlert.setter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t (*protocol witness for FaceTimeControlsView.ephemeralAlert.modify in conformance ConversationHUDControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlertNotice.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlertTimer.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlertTimer.setter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t (*protocol witness for FaceTimeControlsView.ephemeralAlertTimer.modify in conformance ConversationHUDControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for FaceTimeControlsView.showCallDetailsButton.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t protocol witness for FaceTimeControlsView.buttonShelfView.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t protocol witness for ControlsView.context.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.setter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t (*protocol witness for ControlsView.cnkContentAlpha.modify in conformance ConversationHUDControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x108))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for ControlsView.recipe.getter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t protocol witness for ControlsView.recipe.setter in conformance ConversationHUDControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t (*protocol witness for ControlsView.recipe.modify in conformance ConversationHUDControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA8))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

Swift::Void __swiftcall ConversationHUDControlsView.setupLayoutConstraints()()
{
  id v1 = v0;
  uint64_t v122 = MEMORY[0x1E4FBC860];
  objc_super v2 = *(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0xB0);
  if (v2() == 2)
  {
    v3.n128_f64[0] = static Layout.ConversationControls.values.getter((uint64_t)v123);
    uint64_t v4 = (double *)&v125;
  }
  else
  {
    v3.n128_f64[0] = static Layout.ConversationControls.values.getter((uint64_t)v123);
    uint64_t v4 = (double *)&v124;
  }
  double v5 = *v4;
  if (((unsigned __int8 (*)(__n128))v2)(v3) == 2)
  {
    static Layout.ConversationControls.values.getter((uint64_t)v126);
    uint64_t v6 = (double *)&v128;
  }
  else
  {
    static Layout.ConversationControls.values.getter((uint64_t)v126);
    uint64_t v6 = (double *)&v127;
  }
  double v7 = *v6;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  objc_msgSend(v0, sel_addLayoutGuide_, v8);
  id v9 = objc_msgSend(v8, sel_topAnchor);
  id v10 = objc_msgSend(v1, sel_topAnchor);
  uint64_t v11 = (void *)OUTLINED_FUNCTION_10_45();
  id v13 = objc_msgSend(v11, v12, v10, v5);

  id v14 = objc_msgSend(v8, sel_bottomAnchor);
  id v15 = objc_msgSend(v1, sel_bottomAnchor);
  id v16 = (void *)OUTLINED_FUNCTION_10_45();
  id v18 = objc_msgSend(v16, v17, v15);

  id v19 = objc_msgSend(v8, sel_leadingAnchor);
  id v20 = objc_msgSend(v1, sel_leadingAnchor);
  uint64_t v21 = (void *)OUTLINED_FUNCTION_10_45();
  id v23 = objc_msgSend(v21, v22, v20, v7);

  unint64_t v24 = (unint64_t)objc_msgSend(v8, sel_trailingAnchor);
  id v25 = objc_msgSend(v1, sel_trailingAnchor);
  id v26 = (void *)OUTLINED_FUNCTION_10_45();
  id v28 = objc_msgSend(v26, v27, v25);

  OUTLINED_FUNCTION_18_35();
  if (v29)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v30, 4))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_15_38(v30 + 4);
    specialized Array._endMutation()();
    id v13 = v13;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_5_71();
    if (!v31) {
      goto LABEL_11;
    }
  }
  OUTLINED_FUNCTION_0_68();
LABEL_11:
  OUTLINED_FUNCTION_14_35();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v32 = v18;
  OUTLINED_FUNCTION_11_35();
  OUTLINED_FUNCTION_5_71();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  OUTLINED_FUNCTION_14_35();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v33 = v23;
  OUTLINED_FUNCTION_13_41();
  OUTLINED_FUNCTION_5_71();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  OUTLINED_FUNCTION_14_35();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v34 = v28;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_5_71();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  OUTLINED_FUNCTION_14_35();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v35 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView];
  objc_msgSend(v35, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v36 = objc_msgSend(v35, sel_heightAnchor);
  static Layout.ConversationControls.values.getter((uint64_t)v129);
  id v118 = objc_msgSend(v36, sel_constraintGreaterThanOrEqualToConstant_, v130);

  id v37 = objc_msgSend(v35, sel_topAnchor);
  id v38 = objc_msgSend(v8, sel_topAnchor);
  id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

  OUTLINED_FUNCTION_12_38(v41, v40, sel_setPriority_);
  id v42 = objc_msgSend(v35, sel_leadingAnchor);
  id v43 = objc_msgSend(v8, sel_leadingAnchor);
  id v44 = objc_msgSend(v42, sel_constraintEqualToAnchor_, v43);

  LODWORD(v45) = LODWORD(v7);
  objc_msgSend(v44, sel_setPriority_, v45);
  id v120 = v35;
  unint64_t v46 = (unint64_t)objc_msgSend(v35, sel_trailingAnchor);
  id v47 = objc_msgSend(v8, sel_trailingAnchor);
  id v48 = objc_msgSend((id)v46, sel_constraintEqualToAnchor_, v47);

  LODWORD(v49) = LODWORD(v7);
  objc_msgSend(v48, sel_setPriority_, v49);
  OUTLINED_FUNCTION_18_35();
  if (v50)
  {
    OUTLINED_FUNCTION_16_29();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v51, 4))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_15_38(v51 + 4);
    specialized Array._endMutation()();
    id v52 = v118;
    OUTLINED_FUNCTION_11_35();
    OUTLINED_FUNCTION_1_85();
    if (!v31) {
      goto LABEL_21;
    }
  }
  OUTLINED_FUNCTION_0_68();
LABEL_21:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v53 = v39;
  OUTLINED_FUNCTION_13_41();
  OUTLINED_FUNCTION_1_85();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v54 = v44;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_85();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v55 = v48;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_85();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  OUTLINED_FUNCTION_0_62();
  uint64_t v57 = *(uint64_t (**)(void))(v56 + 304);
  OUTLINED_FUNCTION_4_67();
  id v58 = (void *)v57();
  objc_msgSend(v58, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  OUTLINED_FUNCTION_4_67();
  uint64_t v59 = (void *)v57();
  id v60 = objc_msgSend(v59, sel_heightAnchor);

  static Layout.ConversationControls.values.getter((uint64_t)v131);
  id v119 = objc_msgSend(v60, sel_constraintGreaterThanOrEqualToConstant_, v132);

  OUTLINED_FUNCTION_4_67();
  CGFloat v61 = (void *)v57();
  id v62 = objc_msgSend(v61, sel_topAnchor);

  id v63 = objc_msgSend(v8, sel_topAnchor);
  id v64 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v63);

  OUTLINED_FUNCTION_12_38(v66, v65, sel_setPriority_);
  OUTLINED_FUNCTION_4_67();
  id v67 = (void *)v57();
  id v68 = objc_msgSend(v67, sel_leadingAnchor);

  id v69 = objc_msgSend(v8, sel_leadingAnchor);
  id v70 = objc_msgSend(v68, sel_constraintEqualToAnchor_, v69);

  LODWORD(v71) = LODWORD(v7);
  objc_msgSend(v70, sel_setPriority_, v71);
  OUTLINED_FUNCTION_4_67();
  id v72 = (void *)v57();
  id v73 = objc_msgSend(v72, sel_bottomAnchor);

  unint64_t v74 = (unint64_t)objc_msgSend(v120, sel_bottomAnchor);
  static Layout.ConversationControls.values.getter((uint64_t)v133);
  id v75 = objc_msgSend(v73, sel_constraintEqualToAnchor_constant_, v74, -v134);

  OUTLINED_FUNCTION_18_35();
  if (v76)
  {
    OUTLINED_FUNCTION_16_29();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v77 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v77, 4))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_15_38(v77 + 4);
    specialized Array._endMutation()();
    id v78 = v119;
    OUTLINED_FUNCTION_11_35();
    OUTLINED_FUNCTION_1_85();
    if (!v31) {
      goto LABEL_31;
    }
  }
  OUTLINED_FUNCTION_0_68();
LABEL_31:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v79 = v64;
  OUTLINED_FUNCTION_13_41();
  OUTLINED_FUNCTION_1_85();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v80 = v70;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_85();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v81 = v75;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_85();
  if (v31) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  OUTLINED_FUNCTION_4_67();
  CGRect v82 = (void *)v57();
  id v83 = objc_msgSend(v82, sel_trailingAnchor);

  id v84 = objc_msgSend(v8, sel_trailingAnchor);
  id v85 = objc_msgSend(v83, sel_constraintEqualToAnchor_, v84);

  LODWORD(v86) = 1148846080;
  MEMORY[0x1C87733A0](objc_msgSend(v85, sel_setPriority_, v86));
  if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_0_62();
  CGRect v88 = (void *)(*(uint64_t (**)(void))(v87 + 280))();
  if (v88)
  {
    CGRect v89 = v88;
    objc_msgSend(v88, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v90 = objc_msgSend(v89, sel_topAnchor);
    id v91 = objc_msgSend(v120, sel_bottomAnchor);
    static Layout.ConversationControls.values.getter((uint64_t)v135);
    id v92 = objc_msgSend(v90, sel_constraintEqualToAnchor_constant_, v91, v136);

    id v93 = objc_msgSend(v89, sel_leadingAnchor);
    id v94 = objc_msgSend(v8, sel_leadingAnchor);
    double v95 = (void *)OUTLINED_FUNCTION_17_31();
    id v97 = objc_msgSend(v95, v96, v94);

    unint64_t v98 = (unint64_t)objc_msgSend(v89, sel_bottomAnchor);
    id v99 = objc_msgSend(v8, sel_bottomAnchor);
    double v100 = (void *)OUTLINED_FUNCTION_17_31();
    id v102 = objc_msgSend(v100, v101, v99);

    OUTLINED_FUNCTION_18_35();
    if (v103)
    {
      swift_bridgeObjectRetain();
      uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v104 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (__OFADD__(v104, 3))
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_15_38(v104 + 3);
      specialized Array._endMutation()();
      id v92 = v92;
      MEMORY[0x1C87733A0]();
      OUTLINED_FUNCTION_7_60();
      if (!v31)
      {
LABEL_44:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v105 = v97;
        OUTLINED_FUNCTION_11_35();
        OUTLINED_FUNCTION_7_60();
        if (v31) {
          OUTLINED_FUNCTION_0_68();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v106 = v102;
        OUTLINED_FUNCTION_13_41();
        OUTLINED_FUNCTION_7_60();
        if (v31) {
          OUTLINED_FUNCTION_0_68();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        id v107 = objc_msgSend(v89, sel_trailingAnchor);
        id v108 = objc_msgSend(v8, sel_trailingAnchor);
        double v109 = (void *)OUTLINED_FUNCTION_17_31();
        id v111 = objc_msgSend(v109, v110, v108);

        MEMORY[0x1C87733A0]();
        if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_0_68();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_54;
      }
    }
    OUTLINED_FUNCTION_0_68();
    goto LABEL_44;
  }
  id v112 = objc_msgSend(v120, sel_bottomAnchor);
  id v113 = objc_msgSend(v8, sel_bottomAnchor);
  CGRect v114 = (void *)OUTLINED_FUNCTION_17_31();
  id v116 = objc_msgSend(v114, v115, v113);

  MEMORY[0x1C87733A0]();
  if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_0_68();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_54:
  CGRect v117 = self;
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v117, sel_activateConstraints_, isa);
}

uint64_t type metadata accessor for ConversationHUDControlsView()
{
  uint64_t result = type metadata singleton initialization cache for ConversationHUDControlsView;
  if (!type metadata singleton initialization cache for ConversationHUDControlsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationHUDControlsView()
{
  return type metadata accessor for ConversationHUDControlsView();
}

uint64_t type metadata completion function for ConversationHUDControlsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationHUDControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHUDControlsView);
}

uint64_t dispatch thunk of ConversationHUDControlsView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.context.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.context.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.context.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlertTimer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlertTimer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlertTimer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlert.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlert.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlert.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.cnkContentAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.cnkContentAlpha.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.cnkContentAlpha.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.showCallDetailsButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.buttonShelfView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlertNotice.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlertNotice.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.ephemeralAlertNotice.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ConversationHUDControlsView.__allocating_init(recipe:controlsManager:context:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t ConversationControlsMicMenuButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)()
{
  return ConversationControlsMicMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
}

id ConversationControlsMicMenuButtonProvider.routeController.getter()
{
  return *(id *)(v0 + 160);
}

uint64_t ConversationControlsMicMenuButtonProvider.routeCallbackCancellable.getter()
{
  return swift_retain();
}

uint64_t ConversationControlsMicMenuButtonProvider.routeCallbackCancellable.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 168) = a1;
  return swift_release();
}

uint64_t (*ConversationControlsMicMenuButtonProvider.routeCallbackCancellable.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t ConversationControlsMicMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)()
{
  OUTLINED_FUNCTION_1_2();
  uint64_t v1 = self;
  swift_retain();
  id v2 = objc_msgSend(v1, sel_sharedInstance);
  id v3 = objc_msgSend(v2, sel_routeController);

  *(void *)(v0 + 160) = v3;
  *(void *)(v0 + 168) = 0;
  swift_release();
  OUTLINED_FUNCTION_5_72();
  return ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
}

uint64_t ConversationControlsMicMenuButtonProvider.buttonConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationColorTransformer?);
  MEMORY[0x1F4188790](v2 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  ConversationControlsMenuButtonProvider.buttonConfiguration.getter(a1);
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  UIConfigurationColorTransformer.init(_:)();
  uint64_t v6 = type metadata accessor for UIConfigurationColorTransformer();
  __swift_storeEnumTagSinglePayload(v5, 0, 1, v6);
  return UIButton.Configuration.imageColorTransformer.setter();
}

uint64_t sub_1C320B108()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

id closure #1 in ConversationControlsMicMenuButtonProvider.buttonConfiguration.getter(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong + 16;
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x1C8776240](v2);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      if (static Platform.current.getter() == 2) {
        id v5 = objc_msgSend(self, sel_whiteColor);
      }
      else {
        id v5 = a1;
      }
      double v7 = v5;
      if (objc_msgSend(v4, sel_isSelected))
      {
        id v8 = objc_msgSend(self, sel_systemRedColor);

        swift_release();
        return v8;
      }
      else
      {

        swift_release();
        return v7;
      }
    }
    swift_release();
  }
  return a1;
}

id partial apply for closure #1 in ConversationControlsMicMenuButtonProvider.buttonConfiguration.getter(void *a1)
{
  return closure #1 in ConversationControlsMicMenuButtonProvider.buttonConfiguration.getter(a1);
}

Swift::Void __swiftcall ConversationControlsMicMenuButtonProvider.buttonChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<TURoute?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v15 = v14 - v13;
  ControlsButtonProvider.buttonChanged()();
  OUTLINED_FUNCTION_2();
  id v16 = (void *)MEMORY[0x1C8776240](v0 + 16);
  if (v16)
  {
    SEL v17 = v16;
    uint64_t v29 = v4;
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000013, 0x80000001C37971D0, v16);
    objc_msgSend(v17, sel_addTarget_action_forControlEvents_, v0, sel_toggleMicButtonTapped, 0x2000);
    type metadata accessor for ConversationControlsButton();
    if (swift_dynamicCastClass())
    {
      id v18 = self;
      id v28 = v17;
      id v19 = objc_msgSend(v18, sel_conversationKit);
      v30._object = (void *)0xE000000000000000;
      OUTLINED_FUNCTION_4_6();
      v20._uint64_t countAndFlagsBits = 0;
      v20._object = (void *)0xE000000000000000;
      v30._uint64_t countAndFlagsBits = 0;
      Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v19, v20, v30);

      ConversationControlsButton.localizedName.setter(v23._countAndFlagsBits, (uint64_t)v23._object);
    }
    unint64_t v24 = *(void **)(v0 + 136);
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v24) + 0x5F8))();
    OUTLINED_FUNCTION_20();
    swift_weakInit();
    lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
    uint64_t v25 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
    swift_beginAccess();
    *(void *)(v1 + 48) = v25;
    uint64_t v26 = swift_release();
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v24) + 0x598))(v26);
    OUTLINED_FUNCTION_20();
    swift_weakInit();
    lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Published<TURoute?>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<TURoute?>.Publisher);
    uint64_t v27 = Publisher<>.sink(receiveValue:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v8, v2);
    swift_beginAccess();
    *(void *)(v1 + 168) = v27;
    swift_release();
  }
}

void closure #1 in ConversationControlsMicMenuButtonProvider.buttonChanged()(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong + 16;
    swift_beginAccess();
    uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
    if (v4)
    {
      uint64_t v5 = v4;
      objc_msgSend(v4, sel_setSelected_, v1 ^ 1u);
      id v6 = v5;
      objc_msgSend(v6, sel_setShowsMenuAsPrimaryAction_, (unint64_t)ConversationControlsMicMenuButtonProvider.shouldEnableMenu(localAudioEnabled:audioRoute:)(v1, 0) & 1);
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

id ConversationControlsMicMenuButtonProvider.shouldEnableMenu(localAudioEnabled:audioRoute:)(char a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    id v6 = a2;
  }
  else
  {
    id result = objc_msgSend(*(id *)(v3 + 160), sel_pickedRoute);
    if (!result) {
      return result;
    }
    id v6 = result;
  }
  id v8 = a2;
  if ((!objc_msgSend(v6, sel_isBluetooth)
     || (objc_msgSend(v6, sel_isPartnerRouteRoutable) & 1) == 0)
    && (!objc_msgSend(v6, sel_isBluetoothLE)
     || (objc_msgSend(v6, sel_isSiblingRoutePresent) & 1) == 0))
  {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  if (a1 == 2)
  {
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v3 + 136)) + 0x5E0))() & 1) == 0) {
      goto LABEL_11;
    }
LABEL_19:

    return 0;
  }
  if (a1) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v10 = *(void **)(v3 + 136);
  uint64_t v11 = (void *)(*(uint64_t (**)(void))((*v9 & *v10) + 0x8D0))();

  uint64_t v12 = (*(uint64_t (**)(void))((*v9 & *v10) + 0x5B0))();
  char v14 = v13;

  if (v14) {
    return (id)(v11 != 0);
  }
  return (id)(v11 || v12 == 1);
}

void closure #2 in ConversationControlsMicMenuButtonProvider.buttonChanged()(void **a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong + 16;
    swift_beginAccess();
    uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
    if (v4)
    {
      id v5 = v4;
      objc_msgSend(v5, sel_setShowsMenuAsPrimaryAction_, (unint64_t)ConversationControlsMicMenuButtonProvider.shouldEnableMenu(localAudioEnabled:audioRoute:)(2, v1) & 1);
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

Swift::Bool __swiftcall ConversationControlsMicMenuButtonProvider.shouldEnableMenu()()
{
  return ConversationControlsMicMenuButtonProvider.shouldEnableMenu(localAudioEnabled:audioRoute:)(2, 0);
}

Swift::Void __swiftcall ConversationControlsMicMenuButtonProvider.toggleMicButtonTapped()()
{
  OUTLINED_FUNCTION_2();
  uint64_t v1 = MEMORY[0x1C8776240](v0 + 16);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = *(void **)(v0 + 136);
    objc_msgSend(v3, sel_toggleMicButtonTappedWithButton_, v1);
    id v4 = ConversationControlsMicMenuButtonProvider.localAudioEphemeralAlert(bluetoothAudioFormat:)(0, 1);
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x7F8))(v4);
  }
}

id ConversationControlsMicMenuButtonProvider.localAudioEphemeralAlert(bluetoothAudioFormat:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v6 = (void *)*MEMORY[0x1E4FB2908];
  v42[0] = 0x6C6C69662E63696DLL;
  v42[1] = 0xE800000000000000;
  void v42[2] = 1;
  v42[3] = v6;
  __int16 v43 = 0;
  uint64_t v44 = 4;
  char v45 = 0;
  uint64_t v46 = 0;
  id v7 = v6;
  id v8 = static UIImage.symbolImage(for:)((uint64_t)v42);

  swift_bridgeObjectRelease();
  uint64_t v38 = a1;
  char v39 = a2;
  if (v8)
  {
    id v9 = objc_msgSend(self, sel_labelColor);
    id v10 = objc_msgSend(v8, sel_imageWithTintColor_, v9);
  }
  else
  {
    id v10 = 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  uint64_t v11 = self;
  id v12 = objc_msgSend(v11, sel_conversationKit);
  v47._object = (void *)0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0x6F68706F7263694DLL;
  v13._object = (void *)0xEA0000000000656ELL;
  v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v14.value._object = (void *)0xEF74694B6E6F6974;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v47._uint64_t countAndFlagsBits = 0;
  Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v47);

  memset(v40, 0, sizeof(v40));
  char v41 = 1;
  id v17 = static NSAttributedString.localizedString(_:prefixImage:imageBounds:)(v16._countAndFlagsBits, (uint64_t)v16._object, v10, (uint64_t)v40);
  uint64_t v18 = swift_bridgeObjectRelease();
  id v19 = v10;
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v3 + 136)) + 0x5E0))(v18))
  {
    if ((v39 & 1) == 0)
    {
      if (v38 == 1)
      {
        id v36 = objc_msgSend(self, sel_currentDevice);
        id v23 = objc_msgSend(v36, sel_model);

        goto LABEL_15;
      }
      if (!v38)
      {
        id v20 = objc_msgSend(self, sel_sharedInstance);
        id v21 = objc_msgSend(v20, sel_routeController);

        id v22 = objc_msgSend(v21, sel_pickedRoute);
        if (v22)
        {
          id v23 = objc_msgSend(v22, sel_name);

LABEL_15:
          uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          goto LABEL_13;
        }
      }
    }
    id v23 = objc_msgSend(v11, sel_conversationKit);
    unint64_t v37 = 0xE000000000000000;
    uint64_t v24 = 0x4E4F5F43494DLL;
    unint64_t v25 = 0xE600000000000000;
  }
  else
  {
    id v23 = objc_msgSend(v11, sel_conversationKit);
    unint64_t v37 = 0xE000000000000000;
    uint64_t v24 = 0x46464F5F43494DLL;
    unint64_t v25 = 0xE700000000000000;
  }
  v26.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v26.value._object = (void *)0xEF74694B6E6F6974;
  v27._uint64_t countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  uint64_t v28 = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v24, v26, (NSBundle)v23, v27, *(Swift::String *)(&v37 - 1));
  object = v31._object;
  uint64_t countAndFlagsBits = v31._countAndFlagsBits;
LABEL_13:
  uint64_t v32 = countAndFlagsBits;
  id v33 = object;

  v34._uint64_t countAndFlagsBits = v32;
  v34._object = v33;
  NSMutableAttributedString.__allocating_init(string:)(v34);

  return v17;
}

Class ConversationControlsMicMenuButtonProvider.menu(for:)()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(*(id *)(v0 + 160), sel_pickedRoute);
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  id v78 = v3;
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationControls);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_1C2F90000, v5, v6, "Displaying Mic menu", v7, 2u);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }

  id v8 = *(void **)(v1 + 136);
  BOOL v9 = ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v8) + 0x5E0))() & 1) == 0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  id v10 = self;
  id v11 = objc_msgSend(v10, sel_conversationKit);
  OUTLINED_FUNCTION_0_23(0x4F48504F5243494DLL, 0xEE0046464F5F454ELL);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  @nonobjc UIImage.__allocating_init(systemName:)();
  uint64_t v12 = OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v77 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v13 = objc_msgSend(self, sel_currentDevice, 0, 0, v9, partial apply for closure #1 in ConversationControlsMicMenuButtonProvider.menu(for:), v12);
  id v14 = objc_msgSend(v13, sel_model);

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  id v18 = objc_msgSend(v10, sel_conversationKit);
  v81._object = (void *)0xE000000000000000;
  OUTLINED_FUNCTION_4_6();
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v81._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v18, v19, v81);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1C3769620;
  *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v22 + 32) = v15;
  *(void *)(v22 + 40) = v17;
  String.init(format:_:)();
  id v23 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v24 = swift_bridgeObjectRelease();
  unint64_t v25 = *(uint64_t (**)(uint64_t))((*v23 & *v8) + 0x460);
  Swift::String_optional v26 = (void *)v25(v24);
  if (v26)
  {
    id v27 = objc_msgSend(v26, sel_audioRouteGlyphForDevice);
    Swift::String_optional v26 = (void *)swift_unknownObjectRelease();
  }
  else
  {
    id v27 = 0;
  }
  uint64_t v29 = *(void (**)(void *))((*v23 & *v8) + 0x270);
  v29(v26);
  swift_getObjectType();
  OUTLINED_FUNCTION_8_47();
  uint64_t v31 = v30();
  swift_unknownObjectRelease();
  id v76 = v27;
  id v32 = objc_msgSend(v10, sel_conversationKit);
  OUTLINED_FUNCTION_0_23(0xD000000000000012, 0x80000001C37A11F0);
  uint64_t v34 = v33;

  uint64_t v35 = OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v74 = v34;
  OUTLINED_FUNCTION_7_61();
  id v36 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  char v41 = (void *)((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))v25)(v36, v37, v38, v39, v40);
  if (v41)
  {
    id v42 = v78;
    id v43 = objc_msgSend(v41, sel_audioRouteGlyphFor_, v78, v74, 0, v31 == 1, partial apply for closure #2 in ConversationControlsMicMenuButtonProvider.menu(for:), v35);
    char v41 = (void *)swift_unknownObjectRelease();
  }
  else
  {
    id v43 = 0;
    id v42 = v78;
  }
  v29(v41);
  swift_getObjectType();
  OUTLINED_FUNCTION_8_47();
  v44();
  swift_unknownObjectRelease();
  id v45 = objc_msgSend(v42, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_20();
  swift_weakInit();
  id v46 = v43;
  OUTLINED_FUNCTION_7_61();
  Swift::String v47 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1C3769610;
  *(void *)(v48 + 32) = v36;
  *(void *)(v48 + 40) = v47;
  UIMenuElementSize v79 = v48;
  specialized Array._endMutation()();
  if ((unint64_t)v79 >> 62)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
    id v72 = v36;
    id v73 = v47;
    swift_bridgeObjectRetain();
    UIMenuElementSize v51 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v49 = v36;
    id v50 = v47;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
    UIMenuElementSize v51 = v79;
  }
  swift_bridgeObjectRelease();
  uint64_t v52 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  Class isa = OUTLINED_FUNCTION_2_70(v52, v53, v54, v55, v56, v57, v58, v59, v51, 0).super.super.isa;
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_1C3769610;
  *(void *)(v61 + 32) = v77;
  *(void *)(v61 + 40) = isa;
  UIMenuElementSize v80 = v61;
  specialized Array._endMutation()();
  id v62 = v77;
  id v63 = isa;
  Class v28 = OUTLINED_FUNCTION_2_70((uint64_t)v63, v64, v65, v66, v67, v68, v69, v70, v80, v75).super.super.isa;

  return v28;
}

uint64_t closure #1 in ConversationControlsMicMenuButtonProvider.menu(for:)(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, char a6)
{
  OUTLINED_FUNCTION_2();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl(&dword_1C2F90000, v12, v13, a3, v14, 2u);
      MEMORY[0x1C87760E0](v14, -1, -1);
    }

    id v15 = *(id *)(v10 + 136);
    ConversationControlsManager.setLocalAudio(muted:bluetoothAudioFormat:)();

    uint64_t v16 = *(id *)(v10 + 136);
    id v17 = ConversationControlsMicMenuButtonProvider.localAudioEphemeralAlert(bluetoothAudioFormat:)(a5, a6);
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x7F8))(v17);

    ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()();
    return swift_release();
  }
  return result;
}

uint64_t ConversationControlsMicMenuButtonProvider.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ConversationControlsMicMenuButtonProvider.deinit()
{
  uint64_t v0 = ConversationControlsMenuButtonProvider.deinit();

  swift_release();
  return v0;
}

uint64_t ConversationControlsMicMenuButtonProvider.__deallocating_deinit()
{
  ConversationControlsMicMenuButtonProvider.deinit();
  return swift_deallocClassInstance();
}

void partial apply for closure #1 in ConversationControlsMicMenuButtonProvider.buttonChanged()(unsigned __int8 *a1)
{
}

void partial apply for closure #2 in ConversationControlsMicMenuButtonProvider.buttonChanged()(void **a1)
{
}

uint64_t lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationControlsMicMenuButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #1 in ConversationControlsMicMenuButtonProvider.menu(for:)(a1, v1, "1. Muting mic", 1, 0, 1);
}

uint64_t partial apply for closure #2 in ConversationControlsMicMenuButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #1 in ConversationControlsMicMenuButtonProvider.menu(for:)(a1, v1, "2. Switching to A2DP format", 0, 1, 0);
}

uint64_t partial apply for closure #3 in ConversationControlsMicMenuButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #1 in ConversationControlsMicMenuButtonProvider.menu(for:)(a1, v1, "3. Switching to HFP format", 0, 0, 0);
}

uint64_t type metadata accessor for ConversationControlsMicMenuButtonProvider()
{
  return self;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v6 = (id)MEMORY[0x1C87744F0](v5 - 4, a1);
        }
        else {
          id v6 = *(id *)(a1 + 8 * v5);
        }
        id v7 = v6;
        uint64_t v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        id v9 = objc_msgSend(v6, sel_deviceType);
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;
        if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0)
          {
            if (objc_msgSend(v7, sel_position) == (id)(2 - a3)) {
              goto LABEL_19;
            }
            goto LABEL_17;
          }
        }
        if ((a3 | 2) == 2)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v7;
        }
LABEL_17:

        ++v5;
      }
      while (v8 != v4);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void *specialized Array<A>.preferredDevice(at:previousDevice:)(unsigned __int8 a1, void *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (a2)
  {
    id v6 = a2;
    if (specialized Array<A>.camera(_:matchesPosition:)(v6, a1)
      && (specialized Sequence<>.contains(_:)((uint64_t)v6, a3) & 1) != 0)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1C3769620;
      type metadata accessor for AVCaptureDevice();
      id v8 = v6;
      uint64_t v9 = String.init<A>(reflecting:)();
      uint64_t v11 = v10;
      *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v11;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  unint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Sequence.first(where:)(v12, a3, a1);
  if (v13)
  {
    id v14 = v13;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1C37696D0;
    type metadata accessor for AVCaptureDevice();
    id v16 = v14;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v19 = v18;
    uint64_t v20 = MEMORY[0x1E4FBB1A0];
    *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v21 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v15 + 64) = v21;
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    if (v4)
    {
      id v22 = v4;
      uint64_t v23 = String.init<A>(reflecting:)();
    }
    else
    {
      unint64_t v24 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    *(void *)(v15 + 96) = v20;
    *(void *)(v15 + 104) = v21;
    *(void *)(v15 + 72) = v23;
    *(void *)(v15 + 80) = v24;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1C37696D0;
    uint64_t v26 = String.init<A>(reflecting:)();
    uint64_t v28 = v27;
    uint64_t v29 = MEMORY[0x1E4FBB1A0];
    *(void *)(v25 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 64) = v30;
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v28;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AVCaptureDevice]);
    uint64_t v31 = String.init<A>(reflecting:)();
    *(void *)(v25 + 96) = v29;
    *(void *)(v25 + 104) = v30;
    *(void *)(v25 + 72) = v31;
    *(void *)(v25 + 80) = v32;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
}

BOOL specialized Array<A>.camera(_:matchesPosition:)(void *a1, unsigned __int8 a2)
{
  unsigned int v3 = a2;
  id v4 = objc_msgSend(a1, sel_deviceType);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return objc_msgSend(a1, sel_position) == (id)(2 - v3);
    }
  }
  return (v3 & 0xFD) == 0;
}

id TUVideoDeviceController.cameraPosition.getter()
{
  id result = objc_msgSend(v0, sel_currentInputDevice);
  if (result)
  {
    id v2 = result;
    if (CameraPosition.init(avDevicePosition:)((AVCaptureDevicePosition)objc_msgSend(result, sel_position)).value != ConversationKit_CameraPosition_unknownDefault)
    {
      id v3 = objc_msgSend(v2, sel_deviceType);
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;
      if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          LOBYTE(v10) = CameraPosition.init(avDevicePosition:)((AVCaptureDevicePosition)objc_msgSend(v2, sel_position));
          unsigned int v11 = v10;
          int v12 = v10;

          if (v12 == 3) {
            return 0;
          }
          else {
            return (id)v11;
          }
        }
      }
    }

    return 0;
  }
  return result;
}

id TUVideoDeviceController.localContentsFrame.getter()
{
  return objc_msgSend(v0, sel_localScreenContentsRect);
}

Swift::Void __swiftcall TUVideoDeviceController.setReactionEffectGestureEnabled(_:)(Swift::Bool a1)
{
}

Swift::Void __swiftcall TUVideoDeviceController.setStudioLightEnabled(_:)(Swift::Bool a1)
{
}

void TUVideoDeviceController.startCamera(at:deviceOrientation:shouldUpdateLayers:)(ConversationKit::CameraPosition a1, unint64_t a2, char a3)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C37696D0;
  uint64_t v8 = String.init<A>(reflecting:)();
  uint64_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  type metadata accessor for CNKDeviceOrientation(0);
  uint64_t v13 = String.init<A>(reflecting:)();
  *(void *)(v7 + 96) = v11;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 72) = v13;
  *(void *)(v7 + 80) = v14;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v3, sel_inputDevices, a2);
  type metadata accessor for AVCaptureDevice();
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = objc_msgSend(v3, sel_currentInputDevice);
  uint64_t v18 = specialized Array<A>.preferredDevice(at:previousDevice:)(a1, v17, v16);
  swift_bridgeObjectRelease();

  if (v18)
  {
    objc_msgSend(v3, sel_setCurrentInputDevice_, v18);
    objc_msgSend(v3, sel_setCurrentVideoOrientation_, TUVideoDeviceController.tuVideoDeviceOrientationFor(_:)(a2));
    objc_msgSend(v3, sel_startPreview);
    if (a3) {
      TUVideoDeviceController.updateVideoLayers(for:)(a1);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
  }
}

uint64_t TUVideoDeviceController.tuVideoDeviceOrientationFor(_:)(unint64_t a1)
{
  id v3 = objc_msgSend(self, sel_currentDevice);
  id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

  if (objc_msgSend(v1, sel_currentInputIsExternal)) {
    BOOL v5 = v4 == (id)1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    return 2;
  }
  if (a1 > 3) {
    return 0;
  }
  return dword_1C3776320[a1];
}

Swift::Void __swiftcall TUVideoDeviceController.updateVideoLayers(for:)(ConversationKit::CameraPosition a1)
{
  if (a1 == ConversationKit_CameraPosition_front)
  {
    id v5 = objc_msgSend(v2, sel_localBackLayer);
    if (v5)
    {
      OUTLINED_FUNCTION_1_86(v5);
    }
    goto LABEL_8;
  }
  if (a1 != ConversationKit_CameraPosition_back)
  {
LABEL_8:
    id v4 = objc_msgSend(v2, sel_localFrontLayer);
    goto LABEL_9;
  }
  id v3 = objc_msgSend(v2, sel_localFrontLayer);
  if (v3)
  {
    OUTLINED_FUNCTION_1_86(v3);
  }
  id v4 = objc_msgSend(v2, sel_localBackLayer);
LABEL_9:
  id v6 = v4;
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v6, sel_setHidden_, 0);
  }
}

id TUVideoDeviceController.updateCurrentVideoOrientation(_:)(unint64_t a1)
{
  uint64_t v2 = TUVideoDeviceController.tuVideoDeviceOrientationFor(_:)(a1);
  return objc_msgSend(v1, sel_setCurrentVideoOrientation_, v2);
}

Swift::Void __swiftcall TUVideoDeviceController.stopCamera()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)static OS_os_log.conversationKit;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  objc_msgSend(v0, sel_stopPreview);
  id v2 = objc_msgSend(v0, sel_localFrontLayer);
  if (v2)
  {
    OUTLINED_FUNCTION_1_86(v2);
  }
  id v3 = objc_msgSend(v0, sel_localBackLayer);
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v3, sel_setHidden_, 1);
  }
}

Swift::Void __swiftcall TUVideoDeviceController.pauseCamera()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  objc_msgSend(v0, sel_pausePreview);
}

Swift::Void __swiftcall TUVideoDeviceController.setCameraBlurEnabled(_:)(Swift::Bool a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  TUVideoDeviceController.setCurrentBackgroundBlurControlMode(mode:)(2);
  objc_msgSend(v1, sel_setCameraBlurEnabled_, a1);
}

id TUVideoDeviceController.setCurrentBackgroundBlurControlMode(mode:)(uint64_t a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  type metadata accessor for TUVideoDeviceBackgroundBlurControlMode(0);
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v1, sel_setCurrentBackgroundBlurControlMode_, a1);
}

id protocol witness for CameraContainer.cameraPosition.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.cameraPosition.getter();
}

id protocol witness for CameraContainer.localContentsFrame.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.localContentsFrame.getter();
}

unint64_t protocol witness for CameraContainer.isPreviewRunning.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.isPreviewRunning.getter() & 1;
}

id @nonobjc TUVideoDeviceController.isPreviewRunning.getter()
{
  return objc_msgSend(v0, sel_isPreviewRunning);
}

void protocol witness for CameraContainer.startCamera(at:deviceOrientation:shouldUpdateLayers:) in conformance TUVideoDeviceController(ConversationKit::CameraPosition a1, unint64_t a2, char a3)
{
}

void protocol witness for CameraContainer.updateVideoLayers(for:) in conformance TUVideoDeviceController(ConversationKit::CameraPosition a1)
{
}

id protocol witness for CameraContainer.updateCurrentVideoOrientation(_:) in conformance TUVideoDeviceController(unint64_t a1)
{
  return TUVideoDeviceController.updateCurrentVideoOrientation(_:)(a1);
}

void protocol witness for CameraContainer.stopCamera() in conformance TUVideoDeviceController()
{
}

void protocol witness for CameraContainer.pauseCamera() in conformance TUVideoDeviceController()
{
}

id protocol witness for CameraContainer.getSnapshot() in conformance TUVideoDeviceController()
{
  return @nonobjc TUVideoDeviceController.getSnapshot()();
}

id @nonobjc TUVideoDeviceController.getSnapshot()()
{
  return objc_msgSend(v0, sel_getSnapshot);
}

unint64_t protocol witness for CameraContainer.supportsCameraBlur.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.supportsCameraBlur.getter() & 1;
}

id @nonobjc TUVideoDeviceController.supportsCameraBlur.getter()
{
  return objc_msgSend(v0, sel_supportsCameraBlur);
}

unint64_t protocol witness for CameraContainer.cameraBlurEnabled.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.cameraBlurEnabled.getter() & 1;
}

id @nonobjc TUVideoDeviceController.cameraBlurEnabled.getter()
{
  return objc_msgSend(v0, sel_cameraBlurEnabled);
}

void protocol witness for CameraContainer.setCameraBlurEnabled(_:) in conformance TUVideoDeviceController(Swift::Bool a1)
{
}

id protocol witness for CameraContainer.setCurrentBackgroundBlurControlMode(mode:) in conformance TUVideoDeviceController(uint64_t a1)
{
  return TUVideoDeviceController.setCurrentBackgroundBlurControlMode(mode:)(a1);
}

unint64_t protocol witness for CameraContainer.hasAvailableDeskViewCameras.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.hasAvailableDeskViewCameras.getter() & 1;
}

id @nonobjc TUVideoDeviceController.hasAvailableDeskViewCameras.getter()
{
  return objc_msgSend(v0, sel_hasAvailableDeskViewCameras);
}

unint64_t protocol witness for CameraContainer.isCinematicFramingEnabled.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.isCinematicFramingEnabled.getter() & 1;
}

id @nonobjc TUVideoDeviceController.isCinematicFramingEnabled.getter()
{
  return objc_msgSend(v0, sel_isCinematicFramingEnabled);
}

id protocol witness for CameraContainer.setCinematicFramingEnabled(_:) in conformance TUVideoDeviceController(char a1)
{
  return @nonobjc TUVideoDeviceController.setCinematicFramingEnabled(_:)(a1);
}

id @nonobjc TUVideoDeviceController.setCinematicFramingEnabled(_:)(char a1)
{
  return objc_msgSend(v1, sel_setCinematicFramingEnabled_, a1 & 1);
}

unint64_t protocol witness for CameraContainer.currentInputSupportsReactionEffects.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.currentInputSupportsReactionEffects.getter() & 1;
}

id @nonobjc TUVideoDeviceController.currentInputSupportsReactionEffects.getter()
{
  return objc_msgSend(v0, sel_currentInputSupportsReactionEffects);
}

unint64_t protocol witness for CameraContainer.currentInputSupportsStudioLight.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.currentInputSupportsStudioLight.getter() & 1;
}

id @nonobjc TUVideoDeviceController.currentInputSupportsStudioLight.getter()
{
  return objc_msgSend(v0, sel_currentInputSupportsStudioLight);
}

unint64_t protocol witness for CameraContainer.isReactionEffectGestureEnabled.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.isReactionEffectGestureEnabled.getter() & 1;
}

id @nonobjc TUVideoDeviceController.isReactionEffectGestureEnabled.getter()
{
  return objc_msgSend(v0, sel_isReactionEffectGestureEnabled);
}

void protocol witness for CameraContainer.setReactionEffectGestureEnabled(_:) in conformance TUVideoDeviceController(Swift::Bool a1)
{
}

unint64_t protocol witness for CameraContainer.isStudioLightEnabled.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.isStudioLightEnabled.getter() & 1;
}

id @nonobjc TUVideoDeviceController.isStudioLightEnabled.getter()
{
  return objc_msgSend(v0, sel_isStudioLightEnabled);
}

void protocol witness for CameraContainer.setStudioLightEnabled(_:) in conformance TUVideoDeviceController(Swift::Bool a1)
{
}

unint64_t protocol witness for CameraContainer.currentInputIsExternal.getter in conformance TUVideoDeviceController()
{
  return (unint64_t)@nonobjc TUVideoDeviceController.currentInputIsExternal.getter() & 1;
}

id @nonobjc TUVideoDeviceController.currentInputIsExternal.getter()
{
  return objc_msgSend(v0, sel_currentInputIsExternal);
}

uint64_t dispatch thunk of CameraContainer.cameraPosition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CameraContainer.localContentsFrame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CameraContainer.isPreviewRunning.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CameraContainer.startCamera(at:deviceOrientation:shouldUpdateLayers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of CameraContainer.updateVideoLayers(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CameraContainer.updateCurrentVideoOrientation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CameraContainer.stopCamera()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CameraContainer.pauseCamera()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CameraContainer.getSnapshot()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CameraContainer.supportsCameraBlur.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of CameraContainer.cameraBlurEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of CameraContainer.setCameraBlurEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of CameraContainer.setCurrentBackgroundBlurControlMode(mode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of CameraContainer.hasAvailableDeskViewCameras.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of CameraContainer.isCinematicFramingEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of CameraContainer.setCinematicFramingEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of CameraContainer.currentInputSupportsReactionEffects.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of CameraContainer.currentInputSupportsStudioLight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of CameraContainer.isReactionEffectGestureEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of CameraContainer.setReactionEffectGestureEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of CameraContainer.isStudioLightEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of CameraContainer.setStudioLightEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of CameraContainer.currentInputIsExternal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

BOOL specialized Set.isEmpty.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

unint64_t protocol witness for SoundPlayerProtocol.isPlaying.getter in conformance TUCallSoundPlayer()
{
  return (unint64_t)@nonobjc TUCallSoundPlayer.isPlaying.getter() & 1;
}

id @nonobjc TUCallSoundPlayer.isPlaying.getter()
{
  return objc_msgSend(v0, sel_isPlaying);
}

id protocol witness for SoundPlayerProtocol.currentlyPlayingSoundType.getter in conformance TUCallSoundPlayer()
{
  return @nonobjc TUCallSoundPlayer.currentlyPlayingSoundType.getter();
}

id @nonobjc TUCallSoundPlayer.currentlyPlayingSoundType.getter()
{
  return objc_msgSend(v0, sel_currentlyPlayingSoundType);
}

id protocol witness for SoundPlayerProtocol.stopPlaying() in conformance TUCallSoundPlayer()
{
  return @nonobjc TUCallSoundPlayer.stopPlaying()();
}

id @nonobjc TUCallSoundPlayer.stopPlaying()()
{
  return objc_msgSend(v0, sel_stopPlaying);
}

unint64_t protocol witness for SoundPlayerProtocol.attempt(toPlay:) in conformance TUCallSoundPlayer(uint64_t a1)
{
  return (unint64_t)@nonobjc TUCallSoundPlayer.attempt(toPlay:)(a1) & 1;
}

id @nonobjc TUCallSoundPlayer.attempt(toPlay:)(uint64_t a1)
{
  return objc_msgSend(v1, sel_attemptToPlayDescriptor_, a1);
}

void *TonePlayer.minimumDelayBetweenTones.unsafeMutableAddressor()
{
  return &static TonePlayer.minimumDelayBetweenTones;
}

double static TonePlayer.minimumDelayBetweenTones.getter()
{
  return 2.0;
}

id TonePlayer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t TonePlayer.init()()
{
  uint64_t ObjectType = swift_getObjectType();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAC8]), sel_init);
  v4[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCallSoundPlayer);
  void v4[4] = &protocol witness table for TUCallSoundPlayer;
  v4[0] = v1;
  uint64_t v2 = (*(uint64_t (**)(void *))(ObjectType + 184))(v4);
  swift_deallocPartialClassInstance();
  return v2;
}

char *TonePlayer.__allocating_init(soundPlayer:)()
{
  id v1 = objc_allocWithZone(v0);
  uint64_t v2 = OUTLINED_FUNCTION_8_11();
  return TonePlayer.init(soundPlayer:)(v2);
}

char *TonePlayer.init(soundPlayer:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedConnectedToneUUID];
  uint64_t v4 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  uint64_t v5 = (uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundDate];
  uint64_t v6 = type metadata accessor for Date();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
  id v7 = &v1[OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundEventType];
  *(void *)id v7 = 0;
  v7[8] = 1;
  outlined init with copy of Conversation(a1, (uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer]);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for TonePlayer();
  objc_msgSendSuper2(&v10, sel_init);
  uint64_t v8 = OUTLINED_FUNCTION_8_11();
  __swift_destroy_boxed_opaque_existential_1(v8);
  return v1;
}

uint64_t type metadata accessor for TonePlayer()
{
  uint64_t result = type metadata singleton initialization cache for TonePlayer;
  if (!type metadata singleton initialization cache for TonePlayer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TonePlayer.playOutgoingGFTRingtone(for:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  OUTLINED_FUNCTION_6_64();
  uint64_t result = v5();
  if (result)
  {
    id v7 = (void *)result;
    v10[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    void v10[4] = &protocol witness table for TUConversation;
    v10[0] = v7;
    uint64_t v8 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xC8);
    id v9 = v7;
    OUTLINED_FUNCTION_12_39();
    v8();

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return result;
}

uint64_t TonePlayer.playOutgoingGFTRingtone(for:)(void *a1)
{
  uint64_t v3 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v4 = OUTLINED_FUNCTION_3_24();
  uint64_t v6 = v5(v4);
  uint64_t v7 = specialized Set.count.getter(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 < 2) {
    return result;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer), *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer + 24));
  uint64_t v9 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v10(v9);
  if (result) {
    return result;
  }
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v11 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v12(v11);
  if ((result & 1) == 0) {
    return result;
  }
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v13 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v14(v13);
  if ((result & 1) == 0) {
    return result;
  }
  if (one-time initialization token for shared != -1) {
    goto LABEL_36;
  }
LABEL_6:
  char v15 = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 856))();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v16 = OUTLINED_FUNCTION_1_11();
  uint64_t v18 = v17(v16);
  if ((v15 & 1) == 0)
  {
    BOOL v33 = specialized Set.isEmpty.getter(v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v33) {
      return result;
    }
    goto LABEL_31;
  }
  if ((v18 & 0xC000000000000001) != 0)
  {
    uint64_t v19 = MEMORY[0x1E4FBC870];
    aBlock[0] = MEMORY[0x1E4FBC870];
    uint64_t v3 = (void *)__CocoaSet.makeIterator()();
    uint64_t v20 = __CocoaSet.Iterator.next()();
    if (!v20)
    {
LABEL_26:
      swift_release();
      goto LABEL_30;
    }
    uint64_t v21 = v20;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    uint64_t v2 = -1;
    while (1)
    {
      uint64_t v64 = v21;
      swift_dynamicCast();
      id v22 = v65;
      if (objc_msgSend(v65, sel_audioVideoMode))
      {
        uint64_t v23 = aBlock[0];
        unint64_t v24 = *(void *)(aBlock[0] + 16);
        if (*(void *)(aBlock[0] + 24) <= v24)
        {
          specialized _NativeSet.resize(capacity:)(v24 + 1);
          uint64_t v23 = aBlock[0];
        }
        unint64_t v25 = NSObject._rawHashValue(seed:)(*(void *)(v23 + 40)) & ~(-1 << *(unsigned char *)(v23 + 32));
        if (((-1 << v25) & ~*(void *)(v23 + 56 + 8 * (v25 >> 6))) == 0)
        {
          OUTLINED_FUNCTION_17();
          while (++v30 != v31 || (v29 & 1) == 0)
          {
            BOOL v32 = v30 == v31;
            if (v30 == v31) {
              uint64_t v30 = 0;
            }
            v29 |= v32;
            if (*(void *)(v28 + 8 * v30) != -1)
            {
              OUTLINED_FUNCTION_13_42();
              goto LABEL_23;
            }
          }
          __break(1u);
LABEL_36:
          swift_once();
          goto LABEL_6;
        }
        OUTLINED_FUNCTION_18_8();
LABEL_23:
        *(void *)(v26 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
        *(void *)(*(void *)(v23 + 48) + 8 * v27) = v22;
        ++*(void *)(v23 + 16);
      }
      else
      {
      }
      uint64_t v21 = __CocoaSet.Iterator.next()();
      if (!v21)
      {
        uint64_t v19 = aBlock[0];
        goto LABEL_26;
      }
    }
  }
  uint64_t v19 = specialized _NativeSet.filter(_:)(v18);
LABEL_30:
  BOOL v34 = specialized Set.isEmpty.getter(v19);
  uint64_t result = swift_release();
  if (!v34) {
    return result;
  }
LABEL_31:
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  os_log(_:dso:log:type:_:)();
  TonePlayer.playTone(_:)(1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v62 = static OS_dispatch_queue.main.getter();
  uint64_t v36 = type metadata accessor for DispatchTime();
  id v63 = v59;
  uint64_t v60 = v36;
  OUTLINED_FUNCTION_5_3();
  uint64_t v38 = v37;
  uint64_t v40 = MEMORY[0x1F4188790](v39);
  id v42 = (char *)v59 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)v59 - v43;
  static DispatchTime.now()();
  MEMORY[0x1C8772E20](v44, 30.0);
  id v45 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
  v59[2] = v38 + 8;
  uint64_t v61 = v45;
  v45(v44, v36);
  uint64_t v46 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #2 in TonePlayer.playOutgoingGFTRingtone(for:);
  aBlock[5] = v46;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_45;
  Swift::String v47 = _Block_copy(aBlock);
  swift_release();
  uint64_t v48 = type metadata accessor for DispatchQoS();
  v59[1] = v59;
  OUTLINED_FUNCTION_5_3();
  uint64_t v50 = v49;
  MEMORY[0x1F4188790](v51);
  OUTLINED_FUNCTION_61();
  static DispatchQoS.unspecified.getter();
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags();
  v59[0] = v59;
  OUTLINED_FUNCTION_5_3();
  uint64_t v54 = v53;
  MEMORY[0x1F4188790](v55);
  uint64_t v57 = (char *)v59 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = v35;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEF0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v58 = (void *)v62;
  MEMORY[0x1C8773B10](v42, v2, v57, v47);
  _Block_release(v47);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v57, v52);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v2, v48);
  return v61(v42, v60);
}

void closure #2 in TonePlayer.playOutgoingGFTRingtone(for:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer);
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v5);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6) == 1)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      uint64_t v7 = os_log(_:dso:log:type:_:)();
      (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xF0))(v7);
    }
  }
}

uint64_t TonePlayer.playConnectedTone(for:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  OUTLINED_FUNCTION_6_64();
  uint64_t result = v5();
  if (result)
  {
    uint64_t v7 = (void *)result;
    v10[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    void v10[4] = &protocol witness table for TUConversation;
    v10[0] = v7;
    uint64_t v8 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xD8);
    id v9 = v7;
    OUTLINED_FUNCTION_12_39();
    v8();

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return result;
}

void TonePlayer.playConnectedTone(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v9 = &v43[-v8];
  uint64_t v10 = v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedConnectedToneUUID;
  swift_beginAccess();
  uint64_t v48 = v10;
  uint64_t v11 = outlined init with copy of LinkShareCoordinatorProtocol?(v10, (uint64_t)&v43[-v8], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11);
  unint64_t v12 = &v43[-v8];
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  uint64_t v15 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)&v43[-v8], 0, 1, v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v17 = OUTLINED_FUNCTION_8(v16);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_61();
  uint64_t v19 = v14 + *(int *)(v18 + 56);
  outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)&v43[-v8], v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of LinkShareCoordinatorProtocol?((uint64_t)&v43[-v8], v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v20 = OUTLINED_FUNCTION_19_30(v14);
  if (v22)
  {
    outlined destroy of Any?((uint64_t)&v43[-v8], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of Any?((uint64_t)&v43[-v8], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_19_30(v19);
    if (v22)
    {
      outlined destroy of Any?(v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      return;
    }
  }
  else
  {
    uint64_t v46 = v43;
    MEMORY[0x1F4188790](v20);
    uint64_t v21 = &v43[-v8];
    outlined init with copy of LinkShareCoordinatorProtocol?(v14, (uint64_t)&v43[-v8], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_19_30(v19);
    if (!v22)
    {
      uint64_t v47 = v2;
      id v45 = v43;
      OUTLINED_FUNCTION_5_3();
      uint64_t v25 = v24;
      MEMORY[0x1F4188790](v26);
      uint64_t v28 = &v43[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 32))(v28, v19, v15);
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
      int v44 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v29 = *(void (**)(unsigned char *, uint64_t))(v25 + 8);
      v29(v28, v15);
      outlined destroy of Any?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of Any?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v29(v21, v15);
      uint64_t v30 = outlined destroy of Any?(v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v44) {
        return;
      }
      goto LABEL_11;
    }
    outlined destroy of Any?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of Any?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_48();
    (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v21, v15);
  }
  uint64_t v47 = v2;
  uint64_t v30 = outlined destroy of Any?(v14, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_11:
  MEMORY[0x1F4188790](v30);
  uint64_t v31 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v32 = a1[3];
  uint64_t v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v32);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v15);
  uint64_t v34 = v48;
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v31, v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  uint64_t v35 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v36 = OUTLINED_FUNCTION_8_11();
  uint64_t v38 = v37(v36, v35);
  specialized Set.count.getter(v38);
  OUTLINED_FUNCTION_8_11();
  swift_bridgeObjectRelease();
  outlined init with copy of Conversation((uint64_t)a1, (uint64_t)v49);
  if (v34 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  else
  {
    uint64_t v39 = v49[4];
    __swift_project_boxed_opaque_existential_1(v49, v49[3]);
    uint64_t v40 = OUTLINED_FUNCTION_8_11();
    char v42 = v41(v40, v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    if (v42) {
      return;
    }
  }
  TonePlayer.playTone(_:)(2);
}

Swift::Void __swiftcall TonePlayer.playParticipantJoinedTone()()
{
  uint64_t v4 = type metadata accessor for Date();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_60();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_11_36();
  outlined init with copy of LinkShareCoordinatorProtocol?(v2, v1, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v4) == 1)
  {
    outlined destroy of Any?(v1, (uint64_t *)&demangling cache variable for type metadata for Date?);
    goto LABEL_12;
  }
  uint64_t v8 = OUTLINED_FUNCTION_3_81();
  v9(v8);
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundEventType + 8) & 1) != 0
    || ((uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundEventType), v10 != 8)
      ? (BOOL v11 = v10 == 2)
      : (BOOL v11 = 1),
        !v11))
  {
    uint64_t v14 = OUTLINED_FUNCTION_14_36();
    v15(v14);
    goto LABEL_12;
  }
  Date.timeIntervalSinceNow.getter();
  uint64_t v12 = OUTLINED_FUNCTION_4_68();
  v13(v12);
  if (v3 >= 2.0) {
LABEL_12:
  }
    TonePlayer.playTone(_:)(8);
}

Swift::Void __swiftcall TonePlayer.playParticipantLeftTone()()
{
  uint64_t v4 = type metadata accessor for Date();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_60();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_11_36();
  outlined init with copy of LinkShareCoordinatorProtocol?(v2, v1, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v4) == 1)
  {
    outlined destroy of Any?(v1, (uint64_t *)&demangling cache variable for type metadata for Date?);
    goto LABEL_8;
  }
  uint64_t v8 = OUTLINED_FUNCTION_3_81();
  v9(v8);
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundEventType + 8) & 1) != 0
    || *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundEventType) != 9)
  {
    uint64_t v12 = OUTLINED_FUNCTION_14_36();
    v13(v12);
    goto LABEL_8;
  }
  Date.timeIntervalSinceNow.getter();
  uint64_t v10 = OUTLINED_FUNCTION_4_68();
  v11(v10);
  if (v3 >= 2.0) {
LABEL_8:
  }
    TonePlayer.playTone(_:)(9);
}

Swift::Void __swiftcall TonePlayer.stopPlaying()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer), *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer + 24));
  uint64_t v2 = OUTLINED_FUNCTION_48_1();
  if (v3(v2))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1C3769620;
    __swift_project_boxed_opaque_existential_1(v1, v1[3]);
    uint64_t v5 = OUTLINED_FUNCTION_1_11();
    v6(v5);
    uint64_t v7 = String.init<A>(reflecting:)();
    uint64_t v9 = v8;
    *(void *)(v4 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v9;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v1, v1[3]);
    uint64_t v10 = OUTLINED_FUNCTION_48_1();
    v11(v10);
  }
}

void TonePlayer.playTone(_:)(uint64_t a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 64) = v8;
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(self, sel_sharedInstance);
  id v10 = objc_msgSend(v9, sel_providerManager);

  id v11 = objc_msgSend(v10, sel_faceTimeProvider);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAD0]), sel_initWithSoundType_provider_video_region_, a1, v11, 1, 0);

  if (v12)
  {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))();
    uint64_t v13 = *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer + 24);
    uint64_t v14 = *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer + 32);
    __swift_project_boxed_opaque_existential_1((void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_soundPlayer), v13);
    (*(void (**)(id, uint64_t, uint64_t))(v14 + 32))(v12, v13, v14);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v16 = OUTLINED_FUNCTION_8(v15);
    MEMORY[0x1F4188790](v16);
    OUTLINED_FUNCTION_62();
    static Date.now.getter();
    uint64_t v17 = type metadata accessor for Date();
    __swift_storeEnumTagSinglePayload(v13, 0, 1, v17);
    uint64_t v18 = (uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundDate;
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?(v13, v18, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_endAccess();

    uint64_t v19 = (char *)v1 + OBJC_IVAR____TtC15ConversationKit10TonePlayer_lastPlayedSoundEventType;
    *(void *)uint64_t v19 = a1;
    void v19[8] = 0;
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1C3769620;
    uint64_t v21 = String.init<A>(reflecting:)();
    *(void *)(v20 + 56) = v7;
    *(void *)(v20 + 64) = v8;
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v22;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

id TonePlayer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TonePlayer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized Set._Variant.filter(_:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xC000000000000001) == 0)
  {
    specialized _NativeSet.filter(_:)((uint64_t)a1, a2, a3);
    return;
  }
  uint64_t v18 = MEMORY[0x1E4FBC870];
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_20:
    swift_release();
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  while (1)
  {
    swift_dynamicCast();
    char v5 = a1(&v17);
    if (v3)
    {
      swift_release();

      swift_release();
      return;
    }
    id v6 = v17;
    if (v5) {
      break;
    }

LABEL_19:
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_20;
    }
  }
  uint64_t v7 = v18;
  unint64_t v8 = *(void *)(v18 + 16);
  if (*(void *)(v18 + 24) <= v8)
  {
    specialized _NativeSet.resize(capacity:)(v8 + 1);
    uint64_t v7 = v18;
  }
  unint64_t v9 = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40)) & ~(-1 << *(unsigned char *)(v7 + 32));
  if (((-1 << v9) & ~*(void *)(v7 + 56 + 8 * (v9 >> 6))) != 0)
  {
    OUTLINED_FUNCTION_18_8();
LABEL_18:
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v7 + 48) + 8 * v11) = v6;
    ++*(void *)(v7 + 16);
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_17();
  while (++v14 != v15 || (v13 & 1) == 0)
  {
    BOOL v16 = v14 == v15;
    if (v14 == v15) {
      uint64_t v14 = 0;
    }
    v13 |= v16;
    if (*(void *)(v12 + 8 * v14) != -1)
    {
      OUTLINED_FUNCTION_13_42();
      goto LABEL_18;
    }
  }
  __break(1u);
}

uint64_t sub_1C320FD80()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in TonePlayer.playOutgoingGFTRingtone(for:)()
{
  closure #2 in TonePlayer.playOutgoingGFTRingtone(for:)(v0);
}

uint64_t dispatch thunk of SoundPlayerProtocol.isPlaying.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SoundPlayerProtocol.currentlyPlayingSoundType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SoundPlayerProtocol.stopPlaying()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SoundPlayerProtocol.attempt(toPlay:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t ObjC metadata update function for TonePlayer()
{
  return type metadata accessor for TonePlayer();
}

void type metadata completion function for TonePlayer()
{
  _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1F418BAF8]);
  if (v0 <= 0x3F)
  {
    _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1F418BA70]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for TonePlayer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TonePlayer);
}

uint64_t dispatch thunk of TonePlayer.__allocating_init(soundPlayer:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of TonePlayer.playOutgoingGFTRingtone(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of TonePlayer.playConnectedTone(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of TonePlayer.playParticipantJoinedTone()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of TonePlayer.playParticipantLeftTone()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of TonePlayer.stopPlaying()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

void _s10Foundation4UUIDVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(id *))isStackAllocationSafe;
  v14[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v8 = (void *)((char *)v14 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v8);
    specialized closure #1 in _NativeSet.filter(_:)(v8, v7, a3, v5);
    uint64_t v10 = v9;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v11 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v11);
    specialized closure #1 in _NativeSet.filter(_:)(v11, v7, a3, v5);
    uint64_t v10 = v12;
    swift_release();
    MEMORY[0x1C87760E0](v11, -1, -1);
  }
  return v10;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *))
{
  int64_t v7 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    id v23 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    id v16 = v23;
    char v17 = a4(&v23);

    if (v4) {
      return;
    }
    if (v17)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v20++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v22) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v22) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v22) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v22)
  {
LABEL_26:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v20, a3);
    return;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v22) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

BOOL static InCallControlsView.JoinLeaveConfiguration.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void InCallControlsView.JoinLeaveConfiguration.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InCallControlsView.JoinLeaveConfiguration(char *a1, char *a2)
{
  return static InCallControlsView.JoinLeaveConfiguration.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InCallControlsView.JoinLeaveConfiguration()
{
  return InCallControlsView.JoinLeaveConfiguration.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance InCallControlsView.JoinLeaveConfiguration(uint64_t a1)
{
  InCallControlsView.JoinLeaveConfiguration.hash(into:)(a1, *v1);
}

ConversationKit::InCallControlsView::ConfigurationCapabilities __swiftcall InCallControlsView.ConfigurationCapabilities.init(supportsCinematicFraming:supportsEffects:supportsVideo:isLegacyCall:)(Swift::Bool supportsCinematicFraming, Swift::Bool supportsEffects, Swift::Bool supportsVideo, Swift::Bool isLegacyCall)
{
  if (supportsVideo || isLegacyCall) {
    ConversationKit::InCallControlsView::ConfigurationCapabilities v4 = ConversationKit_InCallControlsView_ConfigurationCapabilities_videoNoEffects;
  }
  else {
    ConversationKit::InCallControlsView::ConfigurationCapabilities v4 = ConversationKit_InCallControlsView_ConfigurationCapabilities_audioOnly;
  }
  if (supportsCinematicFraming || supportsEffects) {
    return !supportsCinematicFraming;
  }
  else {
    return v4;
  }
}

uint64_t key path getter for InCallControlsView.dataSource : InCallControlsView@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for InCallControlsView.dataSource : InCallControlsView(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallControlsView.dataSource.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v1);
}

uint64_t InCallControlsView.dataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  OUTLINED_FUNCTION_41_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsView.dataSource.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_41_0();
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id InCallControlsView.effectsButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_effectsButton);
}

id InCallControlsView.muteButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton);
}

id InCallControlsView.flipCameraButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_flipCameraButton);
}

id InCallControlsView.joinLeaveButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton);
}

id InCallControlsView.screenShareButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_screenShareButton);
}

id InCallControlsView.audioRouteButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton);
}

id InCallControlsView.toggleCameraButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton);
}

id InCallControlsView.toggleCinematicFramingButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCinematicFramingButton);
}

uint64_t InCallControlsView.buttonsByRow.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InCallControlsView.joinLeaveConfiguration.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t key path getter for InCallControlsView.joinLeaveConfiguration : InCallControlsView@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t InCallControlsView.joinLeaveConfiguration.setter(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  unsigned __int8 *v3 = a1;
  return InCallControlsView.joinLeaveConfiguration.didset(v4);
}

uint64_t InCallControlsView.joinLeaveConfiguration.didset(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration);
  uint64_t result = swift_beginAccess();
  int v5 = *v3;
  if (v5 != a1) {
    return InCallControlsView.JoinLeaveConfiguration.configure(_:)(*(void **)(v1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton), v5);
  }
  return result;
}

uint64_t InCallControlsView.JoinLeaveConfiguration.configure(_:)(void *a1, char a2)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  if (!a2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    unint64_t v10 = (void *)*MEMORY[0x1E4FB2998];
    uint64_t v30 = 0x69662E6F65646976;
    unint64_t v31 = 0xEA00000000006C6CLL;
    uint64_t v32 = 3;
    uint64_t v33 = v10;
    __int16 v34 = 0;
    uint64_t v35 = 4;
    char v36 = 0;
    uint64_t v37 = 0;
    id v11 = v10;
    id v12 = static UIImage.symbolImage(for:)((uint64_t)&v30);

    swift_bridgeObjectRelease();
    (*(void (**)(id))((*v3 & *a1) + 0x120))(v12);
    id v7 = objc_msgSend(self, sel_conversationKit);
    unint64_t v8 = 0xD00000000000001FLL;
    unint64_t v29 = 0xE000000000000000;
    uint64_t v9 = "DRAWER_REQUEST_JOIN_CALL_BUTTON";
LABEL_5:
    unint64_t v13 = (unint64_t)(v9 - 32) | 0x8000000000000000;
    v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v14.value._object = (void *)0xEF74694B6E6F6974;
    v15._uint64_t countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    uint64_t v16 = 0;
    Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, v14, (NSBundle)v7, v15, *(Swift::String *)(&v29 - 1));

    (*(void (**)(uint64_t, void *))((*v3 & *a1) + 0x170))(v17._countAndFlagsBits, v17._object);
    if (one-time initialization token for joinButton == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (a2 == 1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    unsigned __int8 v4 = (void *)*MEMORY[0x1E4FB2998];
    uint64_t v30 = 0x69662E6F65646976;
    unint64_t v31 = 0xEA00000000006C6CLL;
    uint64_t v32 = 3;
    uint64_t v33 = v4;
    __int16 v34 = 0;
    uint64_t v35 = 4;
    char v36 = 0;
    uint64_t v37 = 0;
    id v5 = v4;
    id v6 = static UIImage.symbolImage(for:)((uint64_t)&v30);

    swift_bridgeObjectRelease();
    (*(void (**)(id))((*v3 & *a1) + 0x120))(v6);
    id v7 = objc_msgSend(self, sel_conversationKit);
    unint64_t v8 = 0xD000000000000017;
    unint64_t v29 = 0xE000000000000000;
    uint64_t v9 = "DRAWER_JOIN_CALL_BUTTON";
    goto LABEL_5;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v18 = (void *)*MEMORY[0x1E4FB2990];
  uint64_t v30 = 0x6B72616D78;
  unint64_t v31 = 0xE500000000000000;
  uint64_t v32 = 3;
  uint64_t v33 = v18;
  __int16 v34 = 0;
  uint64_t v35 = 6;
  char v36 = 0;
  uint64_t v37 = 0;
  id v19 = v18;
  id v20 = static UIImage.symbolImage(for:)((uint64_t)&v30);

  swift_bridgeObjectRelease();
  (*(void (**)(id))((*v3 & *a1) + 0x120))(v20);
  id v21 = objc_msgSend(self, sel_conversationKit);
  v38._object = (void *)0xE000000000000000;
  v22._object = (void *)0x80000001C37A1690;
  v22._uint64_t countAndFlagsBits = 0xD000000000000016;
  v23.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v23.value._object = (void *)0xEF74694B6E6F6974;
  v24._uint64_t countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v38._uint64_t countAndFlagsBits = 0;
  Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v38);

  (*(void (**)(uint64_t, void *))((*v3 & *a1) + 0x170))(v25._countAndFlagsBits, v25._object);
  if (one-time initialization token for leaveButton != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v26 = *(uint64_t (**)(uint64_t))((*v3 & *a1) + 0x188);
  uint64_t v27 = swift_bridgeObjectRetain();
  return v26(v27);
}

void (*InCallControlsView.joinLeaveConfiguration.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  unsigned __int8 v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration);
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return InCallControlsView.joinLeaveConfiguration.modify;
}

void InCallControlsView.joinLeaveConfiguration.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  InCallControlsView.joinLeaveConfiguration.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

SEL *InCallControlsView.__allocating_init(capabilities:)(char a1)
{
  id v3 = objc_allocWithZone(v1);
  return InCallControlsView.init(frame:capabilities:)(a1);
}

SEL *InCallControlsView.__allocating_init(frame:capabilities:)(char a1)
{
  OUTLINED_FUNCTION_7();
  id v3 = objc_allocWithZone(v1);
  OUTLINED_FUNCTION_6_2();
  return InCallControlsView.init(frame:capabilities:)(a1);
}

SEL *InCallControlsView.init(frame:capabilities:)(char a1)
{
  OUTLINED_FUNCTION_7();
  id ObjectType = (id)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_effectsButton;
  type metadata accessor for InCallControlButton();
  uint64_t v352 = &type metadata for ImageNames.Drawer;
  v353 = &protocol witness table for ImageNames.Drawer;
  LOBYTE(v351[0]) = 1;
  id v5 = v1;
  uint64_t v6 = String.localized.getter();
  uint64_t v332 = (void *)OUTLINED_FUNCTION_85_1(0, (uint64_t)v351, v6, v7, 56.0, v8, v9, v10, v11, 1);
  *(void *)&v1[v4] = v332;
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton;
  uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerDisc;
  v353 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  LOBYTE(v351[0]) = 1;
  uint64_t v13 = String.localized.getter();
  uint64_t v348 = (SEL *)OUTLINED_FUNCTION_1_87(0, (uint64_t)v351, v13, v14, 56.0, v15, v16, v17, v18, 1);
  *(uint64_t *)((char *)v5 + v12) = (uint64_t)v348;
  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_flipCameraButton;
  uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerDisc;
  v353 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  LOBYTE(v351[0]) = 0;
  uint64_t v20 = OUTLINED_FUNCTION_10_46();
  v338 = (void *)OUTLINED_FUNCTION_1_87(0, (uint64_t)v351, v20, v21, 56.0, v22, v23, v24, v25, 1);
  *(uint64_t *)((char *)v5 + v19) = (uint64_t)v338;
  uint64_t v26 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton;
  uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerDisc;
  v353 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  LOBYTE(v351[0]) = 4;
  String.localized.getter();
  OUTLINED_FUNCTION_28_17();
  uint64_t v344 = OUTLINED_FUNCTION_1_87(3, v27, v28, v29, 56.0, v30, v31, v32, v33, v317);
  *(uint64_t *)((char *)v5 + v26) = v344;
  uint64_t v34 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_screenShareButton;
  uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerDisc;
  v353 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  LOBYTE(v351[0]) = 5;
  uint64_t v35 = String.localized.getter();
  uint64_t v342 = (char *)OUTLINED_FUNCTION_1_87(0, (uint64_t)v351, v35, v36, 56.0, v37, v38, v39, v40, 1);
  *(uint64_t *)((char *)v5 + v34) = (uint64_t)v342;
  uint64_t v41 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCinematicFramingButton;
  uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerPill;
  v353 = &protocol witness table for SymbolImageDescribers.DrawerPill;
  LOBYTE(v351[0]) = 1;
  String.localizedHidden.getter();
  OUTLINED_FUNCTION_28_17();
  uint64_t v49 = OUTLINED_FUNCTION_1_87(5, v42, v43, v44, 56.0, v45, v46, v47, v48, v318);
  *(uint64_t *)((char *)v5 + v41) = v49;
  uint64_t v343 = v5;
  *((unsigned char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration) = 2;
  switch(a1)
  {
    case 1:
      uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerPill;
      v353 = &protocol witness table for SymbolImageDescribers.DrawerPill;
      LOBYTE(v351[0]) = 0;
      uint64_t v107 = OUTLINED_FUNCTION_10_46();
      uint64_t v331 = OUTLINED_FUNCTION_1_87(5, (uint64_t)v351, v107, v108, 56.0, v109, v110, v111, v112, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton) = v331;
      uint64_t v113 = OUTLINED_FUNCTION_4_69();
      uint64_t v50 = (void *)OUTLINED_FUNCTION_1_87(5, (uint64_t)v351, v113, v114, 56.0, v115, v116, v117, v118, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton) = (uint64_t)v50;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v119 = swift_allocObject();
      *(_OWORD *)(v119 + 16) = xmmword_1C3769600;
      uint64_t v70 = (uint64_t)v332;
      uint64_t v66 = (char **)v344;
      unint64_t v65 = (unint64_t)v348;
      *(void *)(v119 + 32) = v332;
      *(void *)(v119 + 40) = v348;
      *(void *)(v119 + 48) = v338;
      *(void *)(v119 + 56) = v342;
      *(void *)(v119 + 64) = v344;
      OUTLINED_FUNCTION_14_37(v119);
      uint64_t v120 = v351[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[InCallControlButton]>);
      uint64_t v68 = OUTLINED_FUNCTION_12_6();
      *(_OWORD *)(v68 + 16) = xmmword_1C37696D0;
      *(void *)(v68 + 32) = v120;
      uint64_t v121 = OUTLINED_FUNCTION_12_6();
      *(_OWORD *)(v121 + 16) = xmmword_1C3769610;
      id v63 = (void *)v331;
      *(void *)(v121 + 32) = v331;
      *(void *)(v121 + 40) = v50;
      OUTLINED_FUNCTION_14_37(v121);
      *(void *)(v68 + 40) = v351[0];
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow) = v68;
      id v122 = v332;
      id v123 = v338;
      uint64_t v124 = v342;
      goto LABEL_6;
    case 2:
      uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerDisc;
      v353 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
      LOBYTE(v351[0]) = 2;
      uint64_t v76 = OUTLINED_FUNCTION_10_46();
      uint64_t v70 = OUTLINED_FUNCTION_1_87(0, (uint64_t)v351, v76, v77, 56.0, v78, v79, v80, v81, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton) = v70;
      uint64_t v82 = OUTLINED_FUNCTION_4_69();
      uint64_t v50 = (void *)OUTLINED_FUNCTION_1_87(5, (uint64_t)v351, v82, v83, 56.0, v84, v85, v86, v87, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton) = (uint64_t)v50;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v88 = swift_allocObject();
      *(_OWORD *)(v88 + 16) = xmmword_1C3769600;
      uint64_t v66 = (char **)v344;
      unint64_t v65 = (unint64_t)v348;
      *(void *)(v88 + 32) = v70;
      *(void *)(v88 + 40) = v348;
      *(void *)(v88 + 48) = v338;
      *(void *)(v88 + 56) = v342;
      *(void *)(v88 + 64) = v344;
      OUTLINED_FUNCTION_14_37(v88);
      uint64_t v89 = v351[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[InCallControlButton]>);
      uint64_t v68 = OUTLINED_FUNCTION_12_6();
      *(_OWORD *)(v68 + 16) = xmmword_1C37696D0;
      *(void *)(v68 + 32) = v89;
      uint64_t v90 = swift_allocObject();
      *(_OWORD *)(v90 + 16) = xmmword_1C3769830;
      *(void *)(v90 + 32) = v50;
      OUTLINED_FUNCTION_14_37(v90);
      *(void *)(v68 + 40) = v351[0];
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow) = v68;
      id v91 = v338;
      id v92 = v342;
      id v93 = (id)v70;
      break;
    case 3:
      uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerDisc;
      v353 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
      LOBYTE(v351[0]) = 2;
      uint64_t v94 = OUTLINED_FUNCTION_10_46();
      uint64_t v70 = 1;
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton) = OUTLINED_FUNCTION_1_87(0, (uint64_t)v351, v94, v95, 56.0, v96, v97, v98, v99, 1);
      uint64_t v100 = OUTLINED_FUNCTION_4_69();
      uint64_t v50 = (void *)OUTLINED_FUNCTION_1_87(0, (uint64_t)v351, v100, v101, 56.0, v102, v103, v104, v105, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton) = (uint64_t)v50;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[InCallControlButton]>);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_1C3769620;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_1C3769F40;
      uint64_t v66 = (char **)v344;
      unint64_t v65 = (unint64_t)v348;
      *(void *)(v106 + 32) = v50;
      *(void *)(v106 + 40) = v348;
      *(void *)(v106 + 48) = v344;
      OUTLINED_FUNCTION_14_37(v106);
      *(void *)(v68 + 32) = v351[0];
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow) = v68;
      break;
    default:
      uint64_t v50 = (void *)v49;
      uint64_t v352 = &type metadata for SymbolImageDescribers.DrawerPill;
      v353 = &protocol witness table for SymbolImageDescribers.DrawerPill;
      LOBYTE(v351[0]) = 0;
      uint64_t v51 = OUTLINED_FUNCTION_10_46();
      uint64_t v330 = (void *)OUTLINED_FUNCTION_1_87(5, (uint64_t)v351, v51, v52, 56.0, v53, v54, v55, v56, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCameraButton) = (uint64_t)v330;
      uint64_t v57 = OUTLINED_FUNCTION_4_69();
      id v63 = (void *)OUTLINED_FUNCTION_1_87(5, (uint64_t)v351, v57, v58, 56.0, v59, v60, v61, v62, 1);
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton) = (uint64_t)v63;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_1C3769600;
      uint64_t v66 = (char **)v344;
      unint64_t v65 = (unint64_t)v348;
      *(void *)(v64 + 32) = v332;
      *(void *)(v64 + 40) = v348;
      *(void *)(v64 + 48) = v338;
      *(void *)(v64 + 56) = v342;
      *(void *)(v64 + 64) = v344;
      OUTLINED_FUNCTION_14_37(v64);
      uint64_t v67 = v351[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[InCallControlButton]>);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_1C376BA10;
      *(void *)(v68 + 32) = v67;
      uint64_t v69 = OUTLINED_FUNCTION_12_6();
      *(_OWORD *)(v69 + 16) = xmmword_1C3769610;
      uint64_t v70 = (uint64_t)v330;
      *(void *)(v69 + 32) = v330;
      *(void *)(v69 + 40) = v63;
      OUTLINED_FUNCTION_14_37(v69);
      *(void *)(v68 + 40) = v351[0];
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_1C3769830;
      *(void *)(v71 + 32) = v50;
      v351[0] = v71;
      specialized Array._endMutation()();
      *(void *)(v68 + 48) = v351[0];
      *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow) = v68;
      id v72 = v332;
      id v73 = v338;
      uint64_t v74 = v342;
      id v75 = v330;
LABEL_6:
      id v125 = v63;
      break;
  }
  id v126 = v50;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v68);
  uint64_t v127 = *(void *)(v68 + 32);
  if ((unint64_t)v127 >> 62) {
    goto LABEL_58;
  }
  uint64_t v128 = *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v129 = (SEL *)(id)v65;
  double v130 = v66;
  swift_bridgeObjectRetain();
LABEL_9:
  uint64_t v131 = (uint64_t)&OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label;
  if (v128)
  {
    if (v128 < 1) {
      goto LABEL_294;
    }
    uint64_t v70 = 0;
    unint64_t v65 = v127 & 0xC000000000000001;
    uint64_t v66 = &selRef_ringButton;
    do
    {
      if (v65) {
        double v132 = (char *)MEMORY[0x1C87744F0](v70, v127);
      }
      else {
        double v132 = (char *)*(id *)(v127 + 8 * v70 + 32);
      }
      char v133 = v132;
      double v134 = *(void **)&v132[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label];
      if (v134)
      {
        objc_msgSend(*(id *)&v132[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label], sel_setTextAlignment_, 1);
        objc_msgSend(v134, sel_setNumberOfLines_, 2);
      }
      ++v70;
    }
    while (v128 != v70);
  }
  swift_bridgeObjectRelease();
  uint64_t v135 = *(void **)((char *)v343 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow);
  double v136 = (SEL *)v135[2];
  uint64_t v137 = MEMORY[0x1E4FBC860];
  if (v136)
  {
    uint64_t v339 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow;
    v351[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    uint64_t v127 = (uint64_t)v351;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v65 = 0;
    uint64_t v131 = v351[0];
    uint64_t v342 = (char *)v135;
    uint64_t v345 = v136;
    uint64_t v348 = (SEL *)(v135 + 4);
    while (1)
    {
      uint64_t v70 = (uint64_t)v348[v65];
      if ((unint64_t)v70 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v138 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v138 < 0)
        {
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          uint64_t v153 = (SEL *)(id)v65;
          unint64_t v154 = v66;
          swift_bridgeObjectRetain();
          uint64_t v128 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v138 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      if (__OFADD__(v138, 1)) {
        goto LABEL_56;
      }
      uint64_t v350 = v137;
      uint64_t v127 = (uint64_t)&v350;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v138 + 1 < 0) {
        goto LABEL_57;
      }
      uint64_t v139 = 0;
      BOOL v140 = 0;
      ++v65;
      uint64_t v141 = -1;
      do
      {
        if (v138 == v141)
        {
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v140) {
          goto LABEL_293;
        }
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v66 = *(char ***)(v350 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v127 = (uint64_t)&v350;
        specialized ContiguousArray._endMutation()();
        BOOL v140 = v139 == v138;
        if (v139 == v138)
        {
          uint64_t v139 = 0;
        }
        else if (__OFADD__(v139++, 1))
        {
          goto LABEL_54;
        }
        ++v141;
      }
      while (v138 != v141);
      uint64_t v143 = v350;
      swift_bridgeObjectRelease();
      v351[0] = v131;
      uint64_t v70 = *(void *)(v131 + 16);
      if ((unint64_t)v70 >= *(void *)(v131 + 24) >> 1)
      {
        uint64_t v127 = (uint64_t)v351;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v131 = v351[0];
      }
      *(void *)(v131 + 16) = v70 + 1;
      *(void *)(v131 + 8 * v70 + 32) = v143;
      if ((SEL *)v65 == v345)
      {
        uint64_t v328 = (uint64_t *)v131;
        swift_bridgeObjectRelease();
        uint64_t v135 = *(void **)((char *)v343 + v339);
        uint64_t v131 = (uint64_t)&OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label;
        goto LABEL_38;
      }
    }
  }
  uint64_t v328 = (uint64_t *)MEMORY[0x1E4FBC860];
LABEL_38:
  OUTLINED_FUNCTION_23_27();
  unint64_t v144 = v135[4];
  v351[0] = v137;
  if (v144 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v145 = _CocoaArrayWrapper.endIndex.getter();
    if (v145) {
      goto LABEL_40;
    }
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v152 = MEMORY[0x1E4FBC860];
    goto LABEL_61;
  }
  uint64_t v145 = *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v145) {
    goto LABEL_60;
  }
LABEL_40:
  if (v145 < 1) {
    goto LABEL_295;
  }
  for (uint64_t i = 0; i != v145; ++i)
  {
    if ((v144 & 0xC000000000000001) != 0) {
      long long v147 = (char *)MEMORY[0x1C87744F0](i, v144);
    }
    else {
      long long v147 = (char *)*(id *)(v144 + 8 * i + 32);
    }
    long long v148 = v147;
    uint64_t v149 = *(void **)&v147[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label];
    if (v149)
    {
      id v150 = objc_msgSend(v149, sel_widthAnchor);
      id v151 = objc_msgSend(v150, sel_constraintEqualToConstant_, v2);

      if (v151)
      {
        MEMORY[0x1C87733A0]();
        if (*(void *)((v351[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v351[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v152 = v351[0];
LABEL_61:
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v343 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonLabelWidthConstraints) = v152;

  v349[1] = v343;
  v349[2] = ObjectType;
  double v155 = OUTLINED_FUNCTION_6_2();
  uint64_t v158 = (char *)objc_msgSendSuper2(v156, v157, v155);
  uint64_t v322 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton;
  uint64_t v159 = *(void **)&v158[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_audioRouteButton];
  uint64_t v160 = *(void (**)(char *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *v159) + 0x1B8);
  uint64_t v161 = v158;
  uint64_t v162 = v159;
  uint64_t v323 = v158;
  v160(v158, &protocol witness table for InCallControlsView);

  uint64_t v163 = &v161[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration];
  OUTLINED_FUNCTION_2();
  uint64_t v321 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton;
  LOBYTE(v163) = *v163;
  uint64_t v164 = *(id *)&v161[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton];
  InCallControlsView.JoinLeaveConfiguration.configure(_:)(v164, (char)v163);

  uint64_t v350 = *(void *)&v161[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonLabelWidthConstraints];
  id v165 = objc_allocWithZone(MEMORY[0x1E4FB1940]);
  swift_bridgeObjectRetain();
  uint64_t v131 = (uint64_t)objc_msgSend(v165, sel_init);
  objc_msgSend(v161, sel_addLayoutGuide_, v131);
  id v166 = objc_msgSend((id)v131, sel_leadingAnchor);
  id v167 = objc_msgSend(v161, sel_leadingAnchor);
  uint64_t v70 = (uint64_t)&selRef_ringButton;
  id v168 = OUTLINED_FUNCTION_5_67((uint64_t)v167, sel_constraintEqualToAnchor_);

  id v169 = objc_msgSend((id)v131, sel_trailingAnchor);
  uint64_t v348 = (SEL *)v161;
  uint64_t v170 = (char *)objc_msgSend(v161, sel_trailingAnchor);
  id v171 = OUTLINED_FUNCTION_5_67((uint64_t)v170, sel_constraintEqualToAnchor_);

  id v172 = objc_msgSend((id)v131, sel_heightAnchor);
  id v173 = objc_msgSend(v172, sel_constraintEqualToConstant_, 0.0);

  OUTLINED_FUNCTION_18_36();
  if (v174)
  {
    OUTLINED_FUNCTION_32();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_11();
  }
  else
  {
    OUTLINED_FUNCTION_17_32();
  }
  if (__OFADD__(v170, 3))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v170 + 3, 1);
    specialized Array._endMutation()();
    id v168 = v168;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_5_73();
    if (!v175) {
      goto LABEL_65;
    }
  }
  OUTLINED_FUNCTION_0_70();
LABEL_65:
  OUTLINED_FUNCTION_20_28();
  specialized Array._endMutation()();
  id v176 = v171;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_5_73();
  if (v175) {
    OUTLINED_FUNCTION_0_70();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v177 = v173;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_6_65();
  if (v175) {
    OUTLINED_FUNCTION_0_70();
  }
  OUTLINED_FUNCTION_8_48();
  uint64_t v127 = (uint64_t)&v350;
  specialized Array._endMutation()();

  uint64_t v342 = (char *)OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow;
  uint64_t v178 = *(uint64_t *)((char *)v348 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow);
  OUTLINED_FUNCTION_23_27();
  unint64_t v65 = *(void *)(v178 + 32);
  if (v65 >> 62)
  {
    OUTLINED_FUNCTION_155();
    uint64_t v179 = _CocoaArrayWrapper.endIndex.getter();
    if (!v179) {
      goto LABEL_88;
    }
  }
  else
  {
    uint64_t v179 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v179) {
      goto LABEL_88;
    }
  }
  if (v179 < 1) {
    goto LABEL_296;
  }
  uint64_t v180 = 0;
  uint64_t v343 = (uint64_t *)(v65 & 0xC000000000000001);
  uint64_t v346 = v179;
  do
  {
    if (v343) {
      uint64_t v181 = (char *)MEMORY[0x1C87744F0](v180, v65);
    }
    else {
      uint64_t v181 = (char *)*(id *)(v65 + 8 * v180 + 32);
    }
    uint64_t v182 = v181;
    objc_msgSend(v181, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    [(SEL *)v348 addSubview:v182];
    id v183 = objc_msgSend(v182, sel_topAnchor);
    id v184 = [(SEL *)v348 topAnchor];
    id v185 = OUTLINED_FUNCTION_13_43((uint64_t)v184, sel_constraintEqualToAnchor_);

    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_9_51();
    if (v175) {
      OUTLINED_FUNCTION_0_70();
    }
    OUTLINED_FUNCTION_12_40();
    specialized Array._endMutation()();
    id v186 = objc_msgSend((id)v131, sel_topAnchor);
    id v187 = objc_msgSend(v182, sel_bottomAnchor);
    id v188 = OUTLINED_FUNCTION_13_43((uint64_t)v187, sel_constraintGreaterThanOrEqualToAnchor_);

    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_9_51();
    if (v175) {
      OUTLINED_FUNCTION_0_70();
    }
    OUTLINED_FUNCTION_12_40();
    specialized Array._endMutation()();
    id v189 = objc_msgSend((id)v131, sel_topAnchor);
    uint64_t v70 = (uint64_t)objc_msgSend(v182, sel_bottomAnchor);
    id v190 = OUTLINED_FUNCTION_13_43(v70, sel_constraintEqualToAnchor_);

    LODWORD(v191) = 1144750080;
    MEMORY[0x1C87733A0](objc_msgSend(v190, sel_setPriority_, v191));
    OUTLINED_FUNCTION_9_51();
    if (v175) {
      OUTLINED_FUNCTION_0_70();
    }
    ++v180;
    OUTLINED_FUNCTION_12_40();
    uint64_t v127 = (uint64_t)&v350;
    specialized Array._endMutation()();
  }
  while (v346 != v180);
LABEL_88:
  swift_bridgeObjectRelease();
  uint64_t v192 = *(void *)&v342[(void)v348];
  unint64_t v193 = *(void *)(v192 + 16);
  int v329 = (uint64_t *)v131;
  if (v193 <= 1)
  {
    unint64_t v65 = (unint64_t)&selRef_ringButton;
    if (v193)
    {
      OUTLINED_FUNCTION_23_27();
      uint64_t v127 = *(void *)(v192 + 32);
      if ((unint64_t)v127 >> 62) {
        goto LABEL_298;
      }
      uint64_t v230 = *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v230) {
        goto LABEL_141;
      }
LABEL_299:
      swift_bridgeObjectRelease();
    }
LABEL_300:
    LODWORD(v320) = 0;
    uint64_t v319 = 217;
    goto LABEL_304;
  }
  uint64_t v326 = v192 + 32;
  uint64_t v343 = (uint64_t *)(id)v131;
  swift_bridgeObjectRetain();
  uint64_t v127 = 0;
  uint64_t v194 = &selRef_ringButton;
  unint64_t v324 = v193;
  uint64_t v325 = v192;
  do
  {
    if ((unint64_t)v127 >= *(void *)(v192 + 16)) {
      goto LABEL_195;
    }
    uint64_t v340 = v127;
    if (v127)
    {
      unint64_t v195 = *(void *)(v326 + 8 * v127);
      id v196 = objc_allocWithZone(MEMORY[0x1E4FB1940]);
      swift_bridgeObjectRetain();
      objc_msgSend(v196, sel_init);
      OUTLINED_FUNCTION_21_26();
      uint64_t v131 = v127;
      id v336 = v197;
      if (v127 < v198)
      {
        uint64_t v70 = (uint64_t)v348;
        uint64_t v199 = v197;
        [(SEL *)v348 addLayoutGuide:v197];
        id v200 = objc_msgSend(v199, sel_leadingAnchor);
        id v201 = [(SEL *)v348 leadingAnchor];
        unint64_t v65 = (unint64_t)&selRef_ringButton;
        id v202 = OUTLINED_FUNCTION_5_67((uint64_t)v201, sel_constraintEqualToAnchor_);

        id v203 = objc_msgSend(v199, sel_trailingAnchor);
        uint64_t v127 = (uint64_t)[(SEL *)v348 trailingAnchor];
        id v204 = OUTLINED_FUNCTION_5_67(v127, sel_constraintEqualToAnchor_);

        id v205 = objc_msgSend(v199, sel_heightAnchor);
        uint64_t v131 = (uint64_t)objc_msgSend(v205, sel_constraintEqualToConstant_, 0.0);

        OUTLINED_FUNCTION_18_36();
        if (v206)
        {
          OUTLINED_FUNCTION_32();
          _CocoaArrayWrapper.endIndex.getter();
          OUTLINED_FUNCTION_11();
        }
        else
        {
          OUTLINED_FUNCTION_17_32();
        }
        if (__OFADD__(v127, 3)) {
          goto LABEL_199;
        }
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v127 + 3, 1);
        specialized Array._endMutation()();
        id v207 = v202;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_5_73();
        if (v175) {
          OUTLINED_FUNCTION_0_70();
        }
        OUTLINED_FUNCTION_20_28();
        specialized Array._endMutation()();
        id v208 = v204;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_5_73();
        if (v175) {
          OUTLINED_FUNCTION_0_70();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v209 = (uint64_t *)(id)v131;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_0_70();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v127 = (uint64_t)&v350;
        specialized Array._endMutation()();

        uint64_t v131 = v340;
      }
      if (v195 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v210 = _CocoaArrayWrapper.endIndex.getter();
        if (v210)
        {
LABEL_105:
          if (v210 < 1) {
            goto LABEL_198;
          }
          uint64_t v211 = 0;
          unint64_t v347 = v195 & 0xC000000000000001;
          if (v131 == 1) {
            double v212 = 28.0;
          }
          else {
            double v212 = 12.0;
          }
          uint64_t v333 = v210;
          do
          {
            if (v347) {
              id v213 = (id)MEMORY[0x1C87744F0](v211, v195);
            }
            else {
              id v213 = *(id *)(v195 + 8 * v211 + 32);
            }
            uint64_t v214 = v213;
            objc_msgSend(v213, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
            [(SEL *)v348 addSubview:v214];
            id v215 = [v214 v194[180]];
            uint64_t v70 = (uint64_t)objc_msgSend(v343, sel_bottomAnchor);
            id v216 = objc_msgSend(v215, sel_constraintEqualToAnchor_constant_, v70, v212);

            MEMORY[0x1C87733A0]();
            OUTLINED_FUNCTION_6_65();
            if (v175) {
              OUTLINED_FUNCTION_0_70();
            }
            OUTLINED_FUNCTION_8_48();
            specialized Array._endMutation()();
            id v217 = objc_msgSend(v214, sel_heightAnchor);
            id v218 = objc_msgSend(v217, sel_constraintGreaterThanOrEqualToConstant_, 46.0);

            MEMORY[0x1C87733A0]();
            OUTLINED_FUNCTION_6_65();
            if (v175) {
              OUTLINED_FUNCTION_0_70();
            }
            OUTLINED_FUNCTION_8_48();
            uint64_t v127 = (uint64_t)&v350;
            specialized Array._endMutation()();
            OUTLINED_FUNCTION_21_26();
            if (v131 < v219)
            {
              id v220 = [v336 v194[180]];
              id v221 = objc_msgSend(v214, sel_bottomAnchor);
              id v222 = OUTLINED_FUNCTION_13_43((uint64_t)v221, sel_constraintGreaterThanOrEqualToAnchor_);

              MEMORY[0x1C87733A0]();
              OUTLINED_FUNCTION_6_65();
              if (v175) {
                OUTLINED_FUNCTION_0_70();
              }
              OUTLINED_FUNCTION_8_48();
              specialized Array._endMutation()();
              id v223 = [v336 (SEL)v194 + 1331];
              uint64_t v70 = (uint64_t)objc_msgSend(v214, sel_bottomAnchor);
              id v224 = OUTLINED_FUNCTION_13_43(v70, sel_constraintEqualToAnchor_);

              LODWORD(v225) = 1144750080;
              MEMORY[0x1C87733A0](objc_msgSend(v224, sel_setPriority_, v225));
              OUTLINED_FUNCTION_6_65();
              if (v175) {
                OUTLINED_FUNCTION_0_70();
              }
              OUTLINED_FUNCTION_8_48();
              uint64_t v127 = (uint64_t)&v350;
              specialized Array._endMutation()();
              uint64_t v194 = &selRef_ringButton;
              uint64_t v131 = v340;
              uint64_t v210 = v333;
            }
            if (v211)
            {
              if (v347)
              {
                id v226 = (id)MEMORY[0x1C87744F0](0, v195);
              }
              else
              {
                if (!*(void *)((v195 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_194:
                  __break(1u);
LABEL_195:
                  __break(1u);
LABEL_196:
                  __break(1u);
LABEL_197:
                  __break(1u);
LABEL_198:
                  __break(1u);
LABEL_199:
                  __break(1u);
                  goto LABEL_200;
                }
                id v226 = *(id *)(v195 + 32);
              }
              uint64_t v227 = v226;
              id v228 = objc_msgSend(v226, sel_widthAnchor);

              uint64_t v70 = (uint64_t)objc_msgSend(v214, sel_widthAnchor);
              id v229 = OUTLINED_FUNCTION_13_43(v70, sel_constraintEqualToAnchor_);

              MEMORY[0x1C87733A0]();
              OUTLINED_FUNCTION_6_65();
              if (v175) {
                OUTLINED_FUNCTION_0_70();
              }
              OUTLINED_FUNCTION_8_48();
              specialized Array._endMutation()();
            }
            ++v211;
          }
          while (v210 != v211);
        }
      }
      else
      {
        uint64_t v210 = *(void *)((v195 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v210) {
          goto LABEL_105;
        }
      }

      swift_bridgeObjectRelease_n();
      uint64_t v343 = (uint64_t *)v336;
      uint64_t v131 = (uint64_t)v329;
      unint64_t v193 = v324;
      uint64_t v192 = v325;
    }
    uint64_t v127 = v340 + 1;
  }
  while (v340 + 1 != v193);
  swift_bridgeObjectRelease();
  unint64_t v233 = specialized BidirectionalCollection.last.getter(*(void *)&v342[(void)v348]);
  if (!v233)
  {
LABEL_303:
    LODWORD(v320) = 0;
    uint64_t v319 = 210;
LABEL_304:
    OUTLINED_FUNCTION_25_23();
    __break(1u);
    goto LABEL_305;
  }
  uint64_t v127 = v233;
  uint64_t v70 = (uint64_t)&selRef_ringButton;
  if (!(v233 >> 62))
  {
    if (*(void *)((v233 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_148;
    }
    goto LABEL_302;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_302:
    swift_bridgeObjectRelease();
    goto LABEL_303;
  }
LABEL_148:
  OUTLINED_FUNCTION_34_13();
  if (v192)
  {
LABEL_305:
    id v234 = (id)MEMORY[0x1C87744F0](0, v127);
    goto LABEL_150;
  }
  id v234 = *(id *)(v127 + 32);
LABEL_150:
  uint64_t v235 = v234;
  swift_bridgeObjectRelease();
  id v236 = [v348 *(SEL *)(v70 + 1472)];
  uint64_t v70 = (uint64_t)[v235 *(SEL *)(v70 + 1472)];
  id v237 = objc_msgSend(v236, sel_constraintEqualToAnchor_constant_, v70, 30.0);

  MEMORY[0x1C87733A0](v238, v239);
  if (*(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_0_70();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t v127 = (uint64_t)&v350;
  specialized Array._endMutation()();

  while (1)
  {

    uint64_t v240 = v328[2];
    if (v240)
    {
      swift_bridgeObjectRetain();
      uint64_t v70 = 0;
      unint64_t v65 = MEMORY[0x1E4FBC860];
      do
      {
        ++v70;
        v349[0] = v65;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v127 = (uint64_t)v349;
        specialized Array.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        unint64_t v65 = v349[0];
      }
      while (v240 != v70);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v65 = MEMORY[0x1E4FBC860];
    }
    uint64_t v325 = v240;
    if (v65 >> 62) {
      break;
    }
    uint64_t v241 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v241) {
      goto LABEL_201;
    }
LABEL_160:
    if (v241 >= 1)
    {
      uint64_t v242 = 0;
      while (1)
      {
        uint64_t v243 = (char *)*(id *)(v65 + 8 * v242 + 32);
        [(SEL *)v348 addLayoutGuide:v243];
        id v244 = objc_msgSend(v243, sel_topAnchor);
        id v245 = [(SEL *)v348 topAnchor];
        id v246 = OUTLINED_FUNCTION_5_67((uint64_t)v245, sel_constraintEqualToAnchor_);

        id v247 = objc_msgSend(v243, sel_bottomAnchor);
        uint64_t v127 = (uint64_t)[(SEL *)v348 bottomAnchor];
        id v248 = OUTLINED_FUNCTION_5_67(v127, sel_constraintEqualToAnchor_);

        OUTLINED_FUNCTION_18_36();
        if (v249)
        {
          OUTLINED_FUNCTION_32();
          _CocoaArrayWrapper.endIndex.getter();
          OUTLINED_FUNCTION_11();
        }
        else
        {
          OUTLINED_FUNCTION_17_32();
        }
        uint64_t v70 = v127 + 2;
        if (__OFADD__(v127, 2)) {
          goto LABEL_194;
        }
        unint64_t v250 = v350;
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        uint64_t v350 = v250;
        uint64_t v252 = 0;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v250 & 0x8000000000000000) != 0
          || (v250 & 0x4000000000000000) != 0)
        {
          goto LABEL_170;
        }
        uint64_t v131 = (uint64_t)v329;
        if (v70 > *(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          break;
        }
LABEL_176:
        specialized Array._endMutation()();
        id v255 = v246;
        MEMORY[0x1C87733A0](v255, v256);
        OUTLINED_FUNCTION_5_73();
        if (v175) {
          OUTLINED_FUNCTION_0_70();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v257 = v248;
        MEMORY[0x1C87733A0](v257, v258);
        OUTLINED_FUNCTION_9_51();
        if (v175) {
          OUTLINED_FUNCTION_0_70();
        }
        OUTLINED_FUNCTION_12_40();
        uint64_t v127 = (uint64_t)&v350;
        specialized Array._endMutation()();

        if (v242)
        {
          if (!v328[2]) {
            goto LABEL_196;
          }
          uint64_t v127 = v328[4];
          if ((v127 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            id v259 = (id)MEMORY[0x1C87744F0](0, v127);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (!*(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_197;
            }
            id v259 = *(id *)(v127 + 32);
          }
          id v260 = objc_msgSend(v259, sel_widthAnchor, v319, v320);

          uint64_t v70 = (uint64_t)objc_msgSend(v243, sel_widthAnchor);
          id v261 = OUTLINED_FUNCTION_13_43(v70, sel_constraintEqualToAnchor_);

          MEMORY[0x1C87733A0]();
          if (*(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            OUTLINED_FUNCTION_0_70();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v127 = (uint64_t)&v350;
          specialized Array._endMutation()();
        }
        ++v242;

        if (v241 == v242) {
          goto LABEL_201;
        }
      }
      uint64_t v252 = 1;
LABEL_170:
      if (v250 >> 62)
      {
        OUTLINED_FUNCTION_154();
        uint64_t v253 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v253 = *(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v253 <= v70) {
        uint64_t v254 = v70;
      }
      else {
        uint64_t v254 = v253;
      }
      uint64_t v350 = MEMORY[0x1C8774500](v252, v254, 1, v250);
      uint64_t v131 = (uint64_t)v329;
      goto LABEL_176;
    }
LABEL_297:
    __break(1u);
LABEL_298:
    OUTLINED_FUNCTION_154();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_299;
    }
LABEL_141:
    OUTLINED_FUNCTION_34_13();
    uint64_t v70 = MEMORY[0x1C87744F0](0, v127);
    swift_bridgeObjectRelease();
    uint64_t v127 = *(void *)(v70 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
    unsigned __int8 v316 = (id *)(id)v127;
    swift_unknownObjectRelease();
    uint64_t v343 = (uint64_t *)v127;
    if (!v127) {
      goto LABEL_300;
    }
    id v231 = [v348 *(SEL *)(v65 + 1472)];
    uint64_t v70 = (uint64_t)[v316 *(SEL *)(v65 + 1472)];
    id v232 = objc_msgSend(v231, sel_constraintEqualToAnchor_constant_, v70, 30.0);

    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_6_65();
    if (v175) {
      OUTLINED_FUNCTION_0_70();
    }
    OUTLINED_FUNCTION_8_48();
    uint64_t v127 = (uint64_t)&v350;
    specialized Array._endMutation()();
  }
LABEL_200:
  OUTLINED_FUNCTION_155();
  uint64_t v241 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v241) {
    goto LABEL_160;
  }
LABEL_201:
  swift_bridgeObjectRelease();
  uint64_t v262 = &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>;
  uint64_t v263 = v328;
  if (v325)
  {
    unint64_t v264 = 0;
    while (1)
    {
      if (v264 >= v263[2]) {
        goto LABEL_290;
      }
      uint64_t v265 = *(void *)&v342[(void)v348];
      if (v264 >= *(void *)(v265 + 16)) {
        break;
      }
      unint64_t v266 = v328[v264 + 4];
      unint64_t v267 = *(void *)(v265 + 8 * v264 + 32);
      unint64_t v334 = v266;
      unint64_t v327 = v264;
      if (!(v266 >> 62))
      {
        uint64_t v70 = *(void *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v70) {
          goto LABEL_207;
        }
        goto LABEL_270;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
      if (v70)
      {
LABEL_207:
        if (v70 >= 1)
        {
          uint64_t v131 = 0;
          uint64_t v268 = v267 & 0xFFFFFFFFFFFFFF8;
          uint64_t v343 = (uint64_t *)(v267 & 0xC000000000000001);
          uint64_t v269 = (id *)(v267 + 24);
          id v337 = (id)v70;
          unint64_t v341 = v267;
          while (1)
          {
            unint64_t v270 = (v334 & 0xC000000000000001) != 0
                 ? (SEL *)MEMORY[0x1C87744F0](v131, v334)
                 : (SEL *)*(id *)(v334 + 32 + 8 * v131);
            unint64_t v65 = (unint64_t)v270;
            if (!v131) {
              break;
            }
            if (v267 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v271 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v271 = *(void *)(v268 + 16);
            }
            if (v131 == v271)
            {
              uint64_t v127 = (uint64_t)objc_msgSend((id)v65, sel_leadingAnchor);
              uint64_t v272 = (char *)(v131 - 1);
              if (v343)
              {
                uint64_t v273 = (char *)MEMORY[0x1C87744F0](v272, v267);
              }
              else
              {
                if ((unint64_t)v272 >= *(void *)(v268 + 16)) {
                  goto LABEL_286;
                }
                uint64_t v273 = (char *)*v269;
              }
              uint64_t v274 = v273;
              id v275 = *(id *)&v273[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];

              id v276 = objc_msgSend(v275, sel_trailingAnchor);
              uint64_t v70 = (uint64_t)&selRef_ringButton;
              id v278 = OUTLINED_FUNCTION_29_2(v277, sel_constraintEqualToAnchor_);

              id v279 = objc_msgSend((id)v65, sel_trailingAnchor);
              uint64_t v127 = (uint64_t)[(SEL *)v348 trailingAnchor];
              id v280 = OUTLINED_FUNCTION_5_67(v127, sel_constraintEqualToAnchor_);

              OUTLINED_FUNCTION_18_36();
              if (v281)
              {
                OUTLINED_FUNCTION_32();
                _CocoaArrayWrapper.endIndex.getter();
                OUTLINED_FUNCTION_11();
              }
              else
              {
                OUTLINED_FUNCTION_17_32();
              }
              char v282 = (char *)(v127 + 2);
              if (__OFADD__(v127, 2)) {
                goto LABEL_285;
              }
              goto LABEL_243;
            }
            if (v131 < v271)
            {
              uint64_t v127 = (uint64_t)objc_msgSend((id)v65, sel_leadingAnchor);
              uint64_t v290 = (char *)(v131 - 1);
              if (v343)
              {
                uint64_t v291 = (char *)MEMORY[0x1C87744F0](v290, v267);
              }
              else
              {
                if ((unint64_t)v290 >= *(void *)(v268 + 16)) {
                  goto LABEL_287;
                }
                uint64_t v291 = (char *)*v269;
              }
              int v292 = v291;
              uint64_t v70 = (uint64_t)*(id *)&v291[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];

              id v293 = objc_msgSend((id)v70, sel_trailingAnchor);
              id v278 = OUTLINED_FUNCTION_29_2(v294, sel_constraintEqualToAnchor_);

              uint64_t v127 = (uint64_t)objc_msgSend((id)v65, sel_trailingAnchor);
              if (v343)
              {
                CGFloat v295 = (char *)MEMORY[0x1C87744F0](v131, v267);
              }
              else
              {
                if ((unint64_t)v131 >= *(void *)(v268 + 16)) {
                  goto LABEL_289;
                }
                CGFloat v295 = (char *)v269[1];
              }
              uint64_t v296 = v295;
              uint64_t v70 = (uint64_t)*(id *)&v295[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];

              id v297 = objc_msgSend((id)v70, sel_leadingAnchor);
              id v280 = OUTLINED_FUNCTION_29_2(v298, sel_constraintEqualToAnchor_);

              OUTLINED_FUNCTION_18_36();
              if (v299)
              {
                OUTLINED_FUNCTION_32();
                _CocoaArrayWrapper.endIndex.getter();
                OUTLINED_FUNCTION_11();
              }
              else
              {
                OUTLINED_FUNCTION_17_32();
              }
              char v282 = (char *)(v127 + 2);
              if (__OFADD__(v127, 2)) {
                goto LABEL_288;
              }
              goto LABEL_243;
            }
LABEL_259:
            ++v131;

            ++v269;
            if (v70 == v131) {
              goto LABEL_270;
            }
          }
          id v283 = [(SEL *)v270 leadingAnchor];
          id v284 = [(SEL *)v348 leadingAnchor];
          id v278 = OUTLINED_FUNCTION_5_67((uint64_t)v284, sel_constraintEqualToAnchor_);

          uint64_t v127 = (uint64_t)objc_msgSend((id)v65, sel_trailingAnchor);
          if (v343)
          {
            uint64_t v285 = (char *)MEMORY[0x1C87744F0](0, v267);
          }
          else
          {
            if (!*(void *)(v268 + 16)) {
              goto LABEL_284;
            }
            uint64_t v285 = (char *)*(id *)(v267 + 32);
          }
          uint64_t v286 = v285;
          uint64_t v70 = (uint64_t)*(id *)&v285[OBJC_IVAR____TtC15ConversationKit19InCallControlButton_discView];

          id v287 = objc_msgSend((id)v70, sel_leadingAnchor);
          id v280 = OUTLINED_FUNCTION_29_2(v288, sel_constraintEqualToAnchor_);

          OUTLINED_FUNCTION_18_36();
          if (v289)
          {
            OUTLINED_FUNCTION_32();
            _CocoaArrayWrapper.endIndex.getter();
            OUTLINED_FUNCTION_11();
          }
          else
          {
            OUTLINED_FUNCTION_17_32();
          }
          char v282 = (char *)(v127 + 2);
          if (__OFADD__(v127, 2))
          {
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
            break;
          }
LABEL_243:
          unint64_t v300 = v350;
          int v301 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          uint64_t v350 = v300;
          uint64_t v302 = 0;
          if (!v301 || (v300 & 0x8000000000000000) != 0 || (v300 & 0x4000000000000000) != 0)
          {
LABEL_248:
            if (v300 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v303 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v303 = *(void *)((v300 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (v303 <= (uint64_t)v282) {
              uint64_t v304 = (uint64_t)v282;
            }
            else {
              uint64_t v304 = v303;
            }
            uint64_t v350 = MEMORY[0x1C8774500](v302, v304, 1, v300);
          }
          else if ((uint64_t)v282 > *(void *)((v300 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
            uint64_t v302 = 1;
            goto LABEL_248;
          }
          specialized Array._endMutation()();
          id v305 = v278;
          MEMORY[0x1C87733A0]();
          OUTLINED_FUNCTION_5_73();
          if (v175) {
            OUTLINED_FUNCTION_0_70();
          }
          OUTLINED_FUNCTION_20_28();
          specialized Array._endMutation()();
          id v306 = v280;
          MEMORY[0x1C87733A0]();
          OUTLINED_FUNCTION_5_73();
          uint64_t v70 = (uint64_t)v337;
          if (v175) {
            OUTLINED_FUNCTION_0_70();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v127 = (uint64_t)&v350;
          specialized Array._endMutation()();

          unint64_t v267 = v341;
          goto LABEL_259;
        }
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
        goto LABEL_297;
      }
LABEL_270:
      unint64_t v264 = v327 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v262 = &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>;
      uint64_t v263 = v328;
      uint64_t v131 = (uint64_t)v329;
      if (v327 + 1 == v325) {
        goto LABEL_271;
      }
    }
    __break(1u);
    goto LABEL_292;
  }
LABEL_271:
  swift_bridgeObjectRelease();
  uint64_t v307 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v307, sel_activateConstraints_, isa);

  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x7661654C6E696F4ALL, 0xEF6E6F7474754265, *(void **)((char *)v348 + v321));
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x4273746365666645, 0xED00006E6F747475, *(void **)((char *)v348 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_effectsButton));
  uint64_t v309 = *(void **)((char *)v348 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x696475416574754DLL, 0xEF6E6F747475426FLL, v309);
  uint64_t v310 = *MEMORY[0x1E4FB2540];
  uint64_t v311 = *MEMORY[0x1E4FB25B8];
  if (!*MEMORY[0x1E4FB2540])
  {
    if (!v311)
    {
      uint64_t v312 = 0;
      goto LABEL_277;
    }
LABEL_275:
    uint64_t v312 = v311 | v310;
    goto LABEL_277;
  }
  uint64_t v312 = *MEMORY[0x1E4FB2540];
  if ((v311 & ~v310) != 0) {
    goto LABEL_275;
  }
LABEL_277:
  objc_msgSend(v309, sel_setAccessibilityTraits_, v312, v319);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x75426172656D6143, 0xEC0000006E6F7474, *(void **)((char *)v348 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_flipCameraButton));
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x7475426574756F52, 0xEB000000006E6F74, *(void **)&v323[v322]);
  uint64_t v313 = *(void **)((char *)v348 + v262[479]);
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000012, 0x80000001C37A17A0, v313);
  if (v310)
  {
    if ((v311 & ~v310) == 0) {
      goto LABEL_283;
    }
  }
  else if (!v311)
  {
    uint64_t v310 = 0;
    goto LABEL_283;
  }
  v310 |= v311;
LABEL_283:
  objc_msgSend(v313, sel_setAccessibilityTraits_, v310);

  return v348;
}

id InCallControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_effectsButton;
  type metadata accessor for InCallControlButton();
  uint64_t v46 = &type metadata for ImageNames.Drawer;
  uint64_t v47 = &protocol witness table for ImageNames.Drawer;
  v45[0] = 1;
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_conversationKit);
  OUTLINED_FUNCTION_19_1(0xD000000000000015, 0x80000001C37A1630);
  OUTLINED_FUNCTION_33_18();
  *(void *)&v0[v3] = OUTLINED_FUNCTION_85_1(0, (uint64_t)v45, v1, v2, 56.0, v6, v7, v8, v9, 1);
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_muteButton;
  uint64_t v46 = &type metadata for SymbolImageDescribers.DrawerDisc;
  uint64_t v47 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  v45[0] = 1;
  id v11 = objc_msgSend(v4, sel_conversationKit);
  OUTLINED_FUNCTION_19_1(0xD000000000000018, 0x80000001C37A1650);
  OUTLINED_FUNCTION_33_18();
  *(void *)&v0[v10] = OUTLINED_FUNCTION_1_87(0, (uint64_t)v45, v1, v2, 56.0, v12, v13, v14, v15, 1);
  uint64_t v16 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_flipCameraButton;
  uint64_t v46 = &type metadata for SymbolImageDescribers.DrawerDisc;
  uint64_t v47 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  v45[0] = 0;
  id v17 = objc_msgSend(v4, sel_conversationKit);
  OUTLINED_FUNCTION_19_1(0xD000000000000019, 0x80000001C37A1670);
  OUTLINED_FUNCTION_33_18();
  *(void *)&v0[v16] = OUTLINED_FUNCTION_1_87(0, (uint64_t)v45, v1, v2, 56.0, v18, v19, v20, v21, 1);
  uint64_t v22 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveButton;
  uint64_t v46 = &type metadata for SymbolImageDescribers.DrawerDisc;
  uint64_t v47 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  v45[0] = 4;
  id v23 = objc_msgSend(v4, sel_conversationKit);
  OUTLINED_FUNCTION_19_1(0xD000000000000016, 0x80000001C37A1690);
  OUTLINED_FUNCTION_33_18();
  *(void *)&v0[v22] = OUTLINED_FUNCTION_1_87(3, (uint64_t)v45, v1, v2, 56.0, v24, v25, v26, v27, 1);
  uint64_t v28 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_screenShareButton;
  uint64_t v46 = &type metadata for SymbolImageDescribers.DrawerDisc;
  uint64_t v47 = &protocol witness table for SymbolImageDescribers.DrawerDisc;
  v45[0] = 5;
  id v29 = objc_msgSend(v4, sel_conversationKit);
  v48._object = (void *)0xE000000000000000;
  v30._object = (void *)0x80000001C37A16B0;
  v30._uint64_t countAndFlagsBits = 0xD000000000000018;
  v31.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v31.value._object = (void *)0xEF74694B6E6F6974;
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v48._uint64_t countAndFlagsBits = 0;
  Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v48);

  *(void *)&v0[v28] = OUTLINED_FUNCTION_1_87(0, (uint64_t)v45, v33._countAndFlagsBits, (uint64_t)v33._object, 56.0, v34, v35, v36, v37, 1);
  uint64_t v38 = OBJC_IVAR____TtC15ConversationKit18InCallControlsView_toggleCinematicFramingButton;
  uint64_t v46 = &type metadata for SymbolImageDescribers.DrawerPill;
  uint64_t v47 = &protocol witness table for SymbolImageDescribers.DrawerPill;
  v45[0] = 1;
  uint64_t v39 = String.localizedHidden.getter();
  *(void *)&v0[v38] = OUTLINED_FUNCTION_1_87(5, (uint64_t)v45, v39, v40, 56.0, v41, v42, v43, v44, 1);
  v0[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_joinLeaveConfiguration] = 2;

  OUTLINED_FUNCTION_25_23();
  __break(1u);
}

Swift::Void __swiftcall InCallControlsView.layoutSubviews()()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonsByRow];
  if (*(void *)(v3 + 16))
  {
    uint64_t v0 = (objc_class *)ObjectType;
    unint64_t v4 = *(void *)(v3 + 32);
    if (!(v4 >> 62))
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  OUTLINED_FUNCTION_24_1();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  objc_msgSend(v1, sel_bounds);
  double v7 = v6;
  unint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit18InCallControlsView_buttonLabelWidthConstraints];
  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    v14.receiver = v1;
    v14.super_class = v0;
    objc_msgSendSuper2(&v14, sel_layoutSubviews);
    return;
  }
  OUTLINED_FUNCTION_24_1();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9) {
    goto LABEL_12;
  }
LABEL_6:
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    double v11 = (v7 + (double)v5 * -10.0 + -10.0) / (double)v5;
    do
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x1C87744F0](v10, v8);
      }
      else {
        id v12 = *(id *)(v8 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      ++v10;
      objc_msgSend(v12, sel_setConstant_, v11);
    }
    while (v9 != v10);
    goto LABEL_12;
  }
  __break(1u);
}

id InCallControlsView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void InCallControlsView.init(frame:)()
{
}

id InCallControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t InCallControlsView.menu(for:)(void *a1)
{
  type metadata accessor for InCallControlButton();
  if (!swift_dynamicCastClass()) {
    return 0;
  }
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit18InCallControlsView_dataSource;
  OUTLINED_FUNCTION_2();
  if (!MEMORY[0x1C8776240](v3)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
  id v6 = a1;
  uint64_t v7 = OUTLINED_FUNCTION_41_0();
  uint64_t v8 = v5(v7);
  swift_unknownObjectRelease();

  return v8;
}

unint64_t lazy protocol witness table accessor for type InCallControlsView.JoinLeaveConfiguration and conformance InCallControlsView.JoinLeaveConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsView.JoinLeaveConfiguration and conformance InCallControlsView.JoinLeaveConfiguration;
  if (!lazy protocol witness table cache variable for type InCallControlsView.JoinLeaveConfiguration and conformance InCallControlsView.JoinLeaveConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsView.JoinLeaveConfiguration and conformance InCallControlsView.JoinLeaveConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InCallControlsView.ConfigurationCapabilities and conformance InCallControlsView.ConfigurationCapabilities()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsView.ConfigurationCapabilities and conformance InCallControlsView.ConfigurationCapabilities;
  if (!lazy protocol witness table cache variable for type InCallControlsView.ConfigurationCapabilities and conformance InCallControlsView.ConfigurationCapabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsView.ConfigurationCapabilities and conformance InCallControlsView.ConfigurationCapabilities);
  }
  return result;
}

uint64_t sub_1C3214290(unsigned __int8 *a1)
{
  return InCallControlsView.joinLeaveConfiguration.setter(*a1);
}

uint64_t dispatch thunk of InCallControlsViewDataSource.menu(for:button:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for InCallControlsView()
{
  return self;
}

uint64_t method lookup function for InCallControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsView);
}

uint64_t dispatch thunk of InCallControlsView.__allocating_init(frame:capabilities:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

unsigned char *storeEnumTagSinglePayload for InCallControlsView.JoinLeaveConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C32143E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsView.JoinLeaveConfiguration()
{
  return &type metadata for InCallControlsView.JoinLeaveConfiguration;
}

unsigned char *storeEnumTagSinglePayload for InCallControlsView.ConfigurationCapabilities(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C32144ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsView.ConfigurationCapabilities()
{
  return &type metadata for InCallControlsView.ConfigurationCapabilities;
}

Swift::Bool __swiftcall CNContactStore.hasImage(forContactId:)(Swift::String forContactId)
{
  object = forContactId._object;
  uint64_t countAndFlagsBits = forContactId._countAndFlagsBits;
  v24[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v4 = (void *)MEMORY[0x1C87730B0]();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769830;
  unsigned int v6 = (void *)*MEMORY[0x1E4F1AE20];
  *(void *)(v5 + 32) = *MEMORY[0x1E4F1AE20];
  specialized Array._endMutation()();
  id v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24[0] = 0;
  id v9 = objc_msgSend(v1, sel_unifiedContactWithIdentifier_keysToFetch_error_, v4, isa, v24);

  if (v9)
  {
    id v10 = v24[0];
    objc_msgSend(v9, sel_imageDataAvailable);
  }
  else
  {
    id v11 = v24[0];
    id v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationKit);
    swift_bridgeObjectRetain();
    id v14 = v12;
    swift_bridgeObjectRetain();
    id v15 = v12;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      v24[0] = v20;
      *(_DWORD *)uint64_t v18 = 141558531;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2085;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 22) = 2112;
      id v21 = v12;
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v23;

      _os_log_impl(&dword_1C2F90000, v16, v17, "Error trying to fetch backing contact for identifier %{sensitive,mask.hash}s: %@", (uint8_t *)v18, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v20, -1, -1);
      MEMORY[0x1C87760E0](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  OUTLINED_FUNCTION_16();
  return result;
}

id static CNContactStore.authorizationStatus.getter()
{
  uint64_t v0 = self;
  return objc_msgSend(v0, sel_authorizationStatusForEntityType_, 0);
}

BOOL static CNContactStore.authorized.getter()
{
  return objc_msgSend(self, sel_authorizationStatusForEntityType_, 0) == (id)3;
}

void CNContactStore.contactsByContactHandle(for:keyDescriptors:)(uint64_t a1)
{
  v28[1] = *(id *)MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 16))
  {
    objc_super v2 = v1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContactFetchRequest);
    uint64_t v3 = swift_bridgeObjectRetain();
    v4.super.super.Class isa = CNContactFetchRequest.__allocating_init(keysToFetch:)((Swift::OpaquePointer)v3).super.super.isa;
    uint64_t v5 = self;
    uint64_t v6 = MEMORY[0x1E4FBB1A0];
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v8 = objc_msgSend(v5, sel_predicateForContactsMatchingHandleStrings_, isa);

    [(objc_class *)v4.super.super.isa setPredicate:v8];
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C37696D0;
    id v10 = v4.super.super.isa;
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v13 = v12;
    *(void *)(v9 + 56) = v6;
    unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v9 + 64) = v14;
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CNContactStore);
    id v15 = v2;
    uint64_t v16 = String.init<A>(reflecting:)();
    *(void *)(v9 + 96) = v6;
    *(void *)(v9 + 104) = v14;
    *(void *)(v9 + 72) = v16;
    *(void *)(v9 + 80) = v17;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    v28[0] = 0;
    id v18 = objc_msgSend(v15, sel_executeFetchRequest_error_, v10, v28);
    if (v18)
    {
      uint64_t v19 = v18;
      id v20 = v28[0];
      v28[0] = objc_msgSend(v19, sel_value);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [CNContact]]);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
        Dictionary.init(dictionaryLiteral:)();
      }
    }
    else
    {
      id v22 = v28[0];
      uint64_t v23 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      static os_log_type_t.error.getter();
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1C3769620;
      v28[0] = v23;
      id v25 = v23;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v26 = String.init<A>(reflecting:)();
      *(void *)(v24 + 56) = v6;
      *(void *)(v24 + 64) = v14;
      *(void *)(v24 + 32) = v26;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
      Dictionary.init(dictionaryLiteral:)();
    }
    OUTLINED_FUNCTION_16();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
    OUTLINED_FUNCTION_16();
    Dictionary.init(dictionaryLiteral:)();
  }
}

CNContactFetchRequest __swiftcall CNContactFetchRequest.__allocating_init(keysToFetch:)(Swift::OpaquePointer keysToFetch)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithKeysToFetch_, isa);

  return (CNContactFetchRequest)v3;
}

Class @objc CNContactStore.contactsByContactHandle(for:keyDescriptors:)(void *a1)
{
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = a1;
  CNContactStore.contactsByContactHandle(for:keyDescriptors:)(v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
  v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v4.super.isa;
}

uint64_t CNContactStore.contactsByHandle(for:keyDescriptors:)(unint64_t a1)
{
  Swift::Int v1 = a1;
  if (a1 >> 62) {
    goto LABEL_101;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUHandle]);
    uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
    Swift::Int v4 = v1;
    Swift::Int v1 = v3;
    unint64_t v97 = v4 & 0xC000000000000001;
    Swift::Int v92 = v4 + 32;
    uint64_t v94 = v4 & 0xFFFFFFFFFFFFFF8;
    Swift::Int v95 = v4;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    uint64_t v96 = v2;
    while (1)
    {
      if (v97)
      {
        id v6 = (id)MEMORY[0x1C87744F0](v5, v95);
      }
      else
      {
        if (v5 >= *(void *)(v94 + 16)) {
          goto LABEL_98;
        }
        id v6 = *(id *)(v92 + 8 * v5);
      }
      uint64_t v103 = v6;
      BOOL v7 = __OFADD__(v5, 1);
      unint64_t v8 = v5 + 1;
      if (v7) {
        goto LABEL_95;
      }
      unint64_t v101 = v8;
      uint64_t v9 = CNContactStore.contactHandles(for:)(v6);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10) {
        break;
      }
LABEL_35:

      swift_bridgeObjectRelease();
      unint64_t v5 = v101;
      if (v101 == v96)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
        lazy protocol witness table accessor for type TUHandle and conformance NSObject();
        uint64_t v36 = Dictionary.init(dictionaryLiteral:)();
        uint64_t v37 = swift_bridgeObjectRetain();
        specialized _copyCollectionToContiguousArray<A>(_:)(v37);
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
        Class v39 = Array._bridgeToObjectiveC()().super.isa;
        id v40 = objc_msgSend(v99, sel_contactsByContactHandleForContactHandles_keyDescriptors_, isa, v39);

        uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v41 + 64;
        uint64_t v43 = 1 << *(unsigned char *)(v41 + 32);
        uint64_t v44 = -1;
        if (v43 < 64) {
          uint64_t v44 = ~(-1 << v43);
        }
        unint64_t v45 = v44 & *(void *)(v41 + 64);
        int64_t v46 = (unint64_t)(v43 + 63) >> 6;
        swift_bridgeObjectRetain();
        for (int64_t i = 0; ; int64_t i = v89)
        {
          while (1)
          {
            do
            {
              if (v45)
              {
                unint64_t v48 = __clz(__rbit64(v45));
                v45 &= v45 - 1;
                unint64_t v49 = v48 | (i << 6);
              }
              else
              {
                int64_t v50 = i + 1;
                if (__OFADD__(i, 1)) {
                  goto LABEL_96;
                }
                if (v50 >= v46)
                {
LABEL_90:
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v36;
                }
                unint64_t v51 = *(void *)(v42 + 8 * v50);
                ++i;
                if (!v51)
                {
                  int64_t i = v50 + 1;
                  if (v50 + 1 >= v46) {
                    goto LABEL_90;
                  }
                  unint64_t v51 = *(void *)(v42 + 8 * i);
                  if (!v51)
                  {
                    int64_t i = v50 + 2;
                    if (v50 + 2 >= v46) {
                      goto LABEL_90;
                    }
                    unint64_t v51 = *(void *)(v42 + 8 * i);
                    if (!v51)
                    {
                      int64_t i = v50 + 3;
                      if (v50 + 3 >= v46) {
                        goto LABEL_90;
                      }
                      unint64_t v51 = *(void *)(v42 + 8 * i);
                      if (!v51)
                      {
                        int64_t i = v50 + 4;
                        if (v50 + 4 >= v46) {
                          goto LABEL_90;
                        }
                        unint64_t v51 = *(void *)(v42 + 8 * i);
                        if (!v51)
                        {
                          int64_t v52 = v50 + 5;
                          if (v52 >= v46) {
                            goto LABEL_90;
                          }
                          unint64_t v51 = *(void *)(v42 + 8 * v52);
                          if (!v51)
                          {
                            while (1)
                            {
                              int64_t i = v52 + 1;
                              if (__OFADD__(v52, 1)) {
                                break;
                              }
                              if (i >= v46) {
                                goto LABEL_90;
                              }
                              unint64_t v51 = *(void *)(v42 + 8 * i);
                              ++v52;
                              if (v51) {
                                goto LABEL_58;
                              }
                            }
                            __break(1u);
                            while (1)
                            {
LABEL_106:
                              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                              __break(1u);
                            }
                          }
                          int64_t i = v52;
                        }
                      }
                    }
                  }
                }
LABEL_58:
                unint64_t v45 = (v51 - 1) & v51;
                unint64_t v49 = __clz(__rbit64(v51)) + (i << 6);
              }
            }
            while (!*(void *)(v1 + 16));
            uint64_t v53 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v49);
            uint64_t v55 = *v53;
            uint64_t v54 = v53[1];
            swift_bridgeObjectRetain();
            unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v54);
            if (v57) {
              break;
            }
            swift_bridgeObjectRelease();
          }
          unint64_t v58 = *(void *)(*(void *)(v1 + 56) + 8 * v56);
          unint64_t v100 = v58;
          if (v58 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v102 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          int64_t v89 = i;
          int64_t v90 = v46;
          uint64_t v91 = v42;
          if (v102) {
            break;
          }
LABEL_88:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v46 = v90;
          uint64_t v42 = v91;
        }
        id v99 = (id)v55;
        unint64_t v59 = v58;
        uint64_t v60 = 4;
        uint64_t v93 = v41;
        while (2)
        {
          if ((v100 & 0xC000000000000001) != 0) {
            id v61 = (id)MEMORY[0x1C87744F0](v60 - 4, v59);
          }
          else {
            id v61 = *(id *)(v59 + 8 * v60);
          }
          uint64_t v62 = v61;
          if (__OFADD__(v60 - 4, 1)) {
            goto LABEL_97;
          }
          uint64_t v104 = v60 - 3;
          if (*(void *)(v41 + 16))
          {
            swift_bridgeObjectRetain();
            id v63 = v62;
            unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v99, v54);
            if (v65)
            {
              uint64_t v98 = *(void *)(*(void *)(v41 + 56) + 8 * v64);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v106 = (void *)v36;
              uint64_t v67 = v63;
              uint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v63);
              uint64_t v70 = *(void *)(v36 + 16);
              BOOL v71 = (v69 & 1) == 0;
              Swift::Int v72 = v70 + v71;
              if (__OFADD__(v70, v71)) {
                goto LABEL_99;
              }
              unint64_t v73 = v68;
              char v74 = v69;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<TUHandle, [CNContact]>);
              Swift::Bool v75 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v72);
              unint64_t v59 = v100;
              if (v75)
              {
                specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v67);
                OUTLINED_FUNCTION_3_82();
                if (!v26) {
                  goto LABEL_106;
                }
                unint64_t v73 = v76;
              }
              uint64_t v36 = (uint64_t)v106;
              if (v74)
              {
                uint64_t v77 = v106[7];
                swift_bridgeObjectRelease();
                *(void *)(v77 + 8 * v73) = v98;
              }
              else
              {
                v106[(v73 >> 6) + 8] |= 1 << v73;
                *(void *)(v106[6] + 8 * v73) = v67;
                *(void *)(v106[7] + 8 * v73) = v98;
                uint64_t v85 = v106[2];
                BOOL v7 = __OFADD__(v85, 1);
                uint64_t v86 = v85 + 1;
                if (v7) {
                  goto LABEL_100;
                }
                v106[2] = v86;
                id v87 = v67;
              }

              swift_bridgeObjectRelease();
              uint64_t v41 = v93;
LABEL_87:
              ++v60;
              if (v104 == v102) {
                goto LABEL_88;
              }
              continue;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            id v78 = v61;
          }
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
        char v81 = v80;
        swift_bridgeObjectRelease();
        if (v81)
        {
          char v82 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v36;
          Swift::Int v83 = *(void *)(v36 + 24);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<TUHandle, [CNContact]>);
          Swift::Bool v84 = v82;
          unint64_t v59 = v100;
          _NativeDictionary.ensureUnique(isUnique:capacity:)(v84, v83);
          uint64_t v36 = v107;

          _NativeDictionary._delete(at:)();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
        }
        else
        {
        }
        goto LABEL_87;
      }
    }
    uint64_t v11 = (uint64_t *)(v9 + 40);
    while (1)
    {
      uint64_t v12 = *(v11 - 1);
      uint64_t v13 = *v11;
      uint64_t v14 = *(void *)(v1 + 16);
      swift_bridgeObjectRetain();
      if (v14)
      {
        swift_bridgeObjectRetain();
        unint64_t v15 = OUTLINED_FUNCTION_2_71();
        if (v16)
        {
          uint64_t v17 = *(void *)(*(void *)(v1 + 56) + 8 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          id v18 = v103;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v19 = v17;
          char v20 = swift_isUniquelyReferenced_nonNull_native();
          OUTLINED_FUNCTION_2_71();
          OUTLINED_FUNCTION_4_70();
          if (v7) {
            goto LABEL_93;
          }
          uint64_t v23 = v21;
          char v24 = v22;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [TUHandle]>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v20, v1))
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
            OUTLINED_FUNCTION_3_82();
            if (!v26) {
              goto LABEL_106;
            }
            uint64_t v23 = v25;
          }
          if ((v24 & 1) == 0)
          {
            OUTLINED_FUNCTION_0_71();
            if (v7) {
              goto LABEL_94;
            }
LABEL_33:
            *(void *)(v1 + 16) = v27;
            swift_bridgeObjectRetain();
            goto LABEL_34;
          }
          goto LABEL_31;
        }
        swift_bridgeObjectRelease();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1C3769830;
      *(void *)(v28 + 32) = v103;
      uint64_t v105 = v28;
      specialized Array._endMutation()();
      uint64_t v19 = v105;
      id v29 = v103;
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      OUTLINED_FUNCTION_2_71();
      OUTLINED_FUNCTION_4_70();
      if (v7)
      {
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        swift_bridgeObjectRetain();
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v2) {
          break;
        }
        goto LABEL_3;
      }
      uint64_t v23 = v31;
      char v33 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [TUHandle]>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v30, v1))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
        OUTLINED_FUNCTION_3_82();
        if (!v26) {
          goto LABEL_106;
        }
        uint64_t v23 = v34;
      }
      if ((v33 & 1) == 0)
      {
        OUTLINED_FUNCTION_0_71();
        if (v7) {
          goto LABEL_92;
        }
        goto LABEL_33;
      }
LABEL_31:
      uint64_t v35 = *(void *)(v1 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v35 + 8 * v23) = v19;
LABEL_34:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 += 2;
      if (!--v10) {
        goto LABEL_35;
      }
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t CNContactStore.contactHandles(for:)(void *a1)
{
  uint64_t v14 = MEMORY[0x1E4FBC870];
  id v2 = objc_msgSend(a1, sel_value);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6) {
    specialized Set._Variant.insert(_:)(v13, v3, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(a1);
  if (v8)
  {
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v9) {
      specialized Set._Variant.insert(_:)(v13, v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  return v11;
}

Class @objc CNContactStore.contactsByHandle(for:keyDescriptors:)(void *a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = a1;
  CNContactStore.contactsByHandle(for:keyDescriptors:)(v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v4.super.isa;
}

uint64_t ParticipantListViewConstraintManager.__allocating_init(containingGuide:rosterView:controlsView:type:bannerLayoutGuide:rosterCellLayoutGuide:)(void *a1, void *a2, void *a3, char a4, void *a5, void *a6)
{
  uint64_t v12 = swift_allocObject();
  ParticipantListViewConstraintManager.init(containingGuide:rosterView:controlsView:type:bannerLayoutGuide:rosterCellLayoutGuide:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

BOOL static ParticipantListViewConstraintManager.ParticipantListLayoutType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ParticipantListViewConstraintManager.ParticipantListLayoutType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ParticipantListViewConstraintManager.ParticipantListLayoutType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticipantListViewConstraintManager.ParticipantListLayoutType(char *a1, char *a2)
{
  return static ParticipantListViewConstraintManager.ParticipantListLayoutType.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticipantListViewConstraintManager.ParticipantListLayoutType()
{
  return ParticipantListViewConstraintManager.ParticipantListLayoutType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ParticipantListViewConstraintManager.ParticipantListLayoutType(uint64_t a1)
{
  ParticipantListViewConstraintManager.ParticipantListLayoutType.hash(into:)(a1, *v1);
}

uint64_t ParticipantListViewConstraintManager.type.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t ParticipantListViewConstraintManager.type.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 104) = a1;
  return ParticipantListViewConstraintManager.updateConstraints()();
}

uint64_t (*ParticipantListViewConstraintManager.type.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ParticipantListViewConstraintManager.type.modify;
}

uint64_t ParticipantListViewConstraintManager.type.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ParticipantListViewConstraintManager.updateConstraints()();
  }
  return result;
}

uint64_t ParticipantListViewConstraintManager.init(containingGuide:rosterView:controlsView:type:bannerLayoutGuide:rosterCellLayoutGuide:)(void *a1, id a2, void *a3, char a4, void *a5, void *a6)
{
  uint64_t v7 = v6;
  *(void *)(v7 + 96) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v7 + 104) = a4;
  id v12 = objc_msgSend(a2, sel_leadingAnchor);
  unint64_t v49 = a5;
  id v13 = objc_msgSend(a5, sel_trailingAnchor);
  double v14 = static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v15 = static Defaults.shared;
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v16 + 384))();
  uint64_t v17 = static Platform.current.getter();
  (*(void (**)(uint64_t))(*(void *)v15 + 488))(v17);
  id v18 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v13, v14);

  *(void *)(v7 + 16) = v18;
  id v19 = objc_msgSend(a2, sel_leadingAnchor);
  id v20 = objc_msgSend(a1, sel_leadingAnchor);
  id v21 = OUTLINED_FUNCTION_1_88();

  *(void *)(v7 + 24) = v21;
  id v22 = objc_msgSend(a2, sel_trailingAnchor);
  id v23 = objc_msgSend(a6, sel_leadingAnchor);
  id v24 = OUTLINED_FUNCTION_1_88();

  *(void *)(v7 + 32) = v24;
  id v25 = objc_msgSend(a2, sel_topAnchor);
  id v26 = objc_msgSend(a1, sel_topAnchor);
  static Platform.current.getter();
  id v27 = OUTLINED_FUNCTION_0_72();

  *(void *)(v7 + 40) = v27;
  id v28 = objc_msgSend(a2, sel_bottomAnchor);
  id v29 = objc_msgSend(a1, sel_bottomAnchor);
  static Platform.current.getter();
  id v30 = OUTLINED_FUNCTION_0_72();

  *(void *)(v7 + 48) = v30;
  id v31 = objc_msgSend(a2, sel_heightAnchor);
  id v32 = objc_msgSend(a6, sel_heightAnchor);
  static Platform.current.getter();
  id v33 = OUTLINED_FUNCTION_0_72();

  *(void *)(v7 + 56) = v33;
  LODWORD(v33) = static Platform.current.getter() == 0;
  id v34 = objc_msgSend(a2, sel_topAnchor);
  id v35 = objc_msgSend(a1, sel_topAnchor);
  static Platform.current.getter();
  double v36 = dbl_1C37765A0[v33];
  id v37 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, v36);

  *(void *)(v7 + 64) = v37;
  id v38 = objc_msgSend(a2, sel_leadingAnchor);
  id v39 = objc_msgSend(a6, sel_leadingAnchor);
  id v40 = OUTLINED_FUNCTION_1_88();

  *(void *)(v7 + 72) = v40;
  id v41 = objc_msgSend(a2, sel_trailingAnchor);
  id v42 = objc_msgSend(a6, sel_trailingAnchor);
  id v43 = OUTLINED_FUNCTION_1_88();

  *(void *)(v7 + 80) = v43;
  id v44 = objc_msgSend(a2, sel_bottomAnchor);
  id v45 = objc_msgSend(a1, sel_bottomAnchor);
  static Platform.current.getter();
  id v46 = objc_msgSend(v44, (SEL)&selRef_cinematicFramingButton + 7, v45, v36);

  *(void *)(v7 + 88) = v46;
  ParticipantListViewConstraintManager.updateConstraints()();

  return v7;
}

uint64_t ParticipantListViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t ParticipantListViewConstraintManager.updateConstraints()()
{
  OUTLINED_FUNCTION_50();
  int v2 = (*(unsigned __int8 (**)(void))(v1 + 200))();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1C3769580;
    NSDictionary v4 = (void *)v0[2];
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1C3769580;
    NSDictionary v4 = (void *)v0[3];
LABEL_5:
    unint64_t v5 = (void *)v0[4];
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    uint64_t v6 = (void *)v0[6];
    uint64_t v7 = (void *)v0[7];
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769580;
  unint64_t v5 = (void *)v0[10];
  uint64_t v6 = (void *)v0[11];
  uint64_t v7 = (void *)v0[8];
  NSDictionary v4 = (void *)v0[9];
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
LABEL_7:
  *(void *)(v3 + 48) = v6;
  *(void *)(v3 + 56) = v7;
  uint64_t v13 = v3;
  specialized Array._endMutation()();
  v0[12] = v13;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  id v11 = v7;
  return swift_bridgeObjectRelease();
}

id *ParticipantListViewConstraintManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ParticipantListViewConstraintManager.__deallocating_deinit()
{
  ParticipantListViewConstraintManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance ParticipantListViewConstraintManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

unint64_t lazy protocol witness table accessor for type ParticipantListViewConstraintManager.ParticipantListLayoutType and conformance ParticipantListViewConstraintManager.ParticipantListLayoutType()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantListViewConstraintManager.ParticipantListLayoutType and conformance ParticipantListViewConstraintManager.ParticipantListLayoutType;
  if (!lazy protocol witness table cache variable for type ParticipantListViewConstraintManager.ParticipantListLayoutType and conformance ParticipantListViewConstraintManager.ParticipantListLayoutType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantListViewConstraintManager.ParticipantListLayoutType and conformance ParticipantListViewConstraintManager.ParticipantListLayoutType);
  }
  return result;
}

uint64_t sub_1C32163C4@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 200))();
  *a1 = result;
  return result;
}

uint64_t sub_1C321640C()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 208))(*v1);
}

uint64_t type metadata accessor for ParticipantListViewConstraintManager()
{
  return self;
}

uint64_t method lookup function for ParticipantListViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantListViewConstraintManager);
}

uint64_t dispatch thunk of ParticipantListViewConstraintManager.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ParticipantListViewConstraintManager.type.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ParticipantListViewConstraintManager.type.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ParticipantListViewConstraintManager.__allocating_init(containingGuide:rosterView:controlsView:type:bannerLayoutGuide:rosterCellLayoutGuide:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of ParticipantListViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

unsigned char *storeEnumTagSinglePayload for ParticipantListViewConstraintManager.ParticipantListLayoutType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C32165FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantListViewConstraintManager.ParticipantListLayoutType()
{
  return &type metadata for ParticipantListViewConstraintManager.ParticipantListLayoutType;
}

unint64_t ActivityType.iconSymbolName.getter()
{
  unint64_t result = *v0;
  switch(*v0)
  {
    case 1:
    case 2:
      unint64_t result = 6516580;
      break;
    case 3:
      unint64_t result = 0x6F6E2E636973756DLL;
      break;
    case 4:
      unint64_t result = 0x76742E79616C70;
      break;
    case 5:
      unint64_t result = 0x722E657275676966;
      break;
    case 6:
      unint64_t result = 0xD000000000000028;
      break;
    case 7:
      unint64_t result = 0x74656B636F72;
      break;
    case 8:
      unint64_t result = 6775138;
      break;
    case 9:
      unint64_t result = 1802465122;
      break;
    case 0xA:
      unint64_t result = 0x65626F6C67;
      break;
    case 0xB:
      unint64_t result = 0x65762E736B6F6F62;
      break;
    case 0xC:
      unint64_t result = 0x656C626269726373;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static ActivityType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL TUConversationActivitySession.isJoined.getter()
{
  return objc_msgSend(v0, sel_state) == (id)1;
}

uint64_t TUConversationActivitySession.concatenatedDescription.getter()
{
  id v1 = objc_msgSend(v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_concatenatedDescription);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

uint64_t TUConversationActivitySession.uniqueIdentifier.getter()
{
  id v1 = objc_msgSend(v0, sel_UUID);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

uint64_t TUConversationActivitySession.localizedApplicationName.getter()
{
  return outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(objc_msgSend(v0, sel_activity), (SEL *)&selRef_localizedApplicationName);
}

id TUConversationActivitySession.isScreenSharing.getter()
{
  return TUConversationActivitySession.isScreenSharing.getter((SEL *)&selRef_isScreenSharingActivity);
}

id one-time initialization function for watchTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.watchTogether();
  static ActivityType.Image.watchTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.watchTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x76742E79616C70;
  v5[1] = 0xE700000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id UIImage.activityTinted.getter()
{
  id v1 = objc_msgSend(self, sel_lightGrayColor);
  id v2 = objc_msgSend(v0, sel_imageWithTintColor_renderingMode_, v1, 1);

  return v2;
}

id one-time initialization function for listenTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.listenTogether();
  static ActivityType.Image.listenTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.listenTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x6F6E2E636973756DLL;
  v5[1] = 0xEA00000000006574;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for playTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.playTogether();
  static ActivityType.Image.playTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.playTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x74656B636F72;
  v5[1] = 0xE600000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for workoutTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.workoutTogether();
  static ActivityType.Image.workoutTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.workoutTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x722E657275676966;
  v5[1] = 0xEA00000000006E75;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for shopTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.shopTogether();
  static ActivityType.Image.shopTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.shopTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 6775138;
  v5[1] = 0xE300000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for readTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.readTogether();
  static ActivityType.Image.readTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.readTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 1802465122;
  v5[1] = 0xE400000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for exploreTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.exploreTogether();
  static ActivityType.Image.exploreTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.exploreTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x65626F6C67;
  v5[1] = 0xE500000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for learnTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.learnTogether();
  static ActivityType.Image.learnTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.learnTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  strcpy(v5, "books.vertical");
  v5[15] = -18;
  uint64_t v6 = 3;
  uint64_t v7 = v0;
  __int16 v8 = 0;
  uint64_t v9 = 4;
  char v10 = 0;
  uint64_t v11 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for createTogether()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.createTogether();
  static ActivityType.Image.createTogether = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.createTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x656C626269726373;
  v5[1] = 0xE800000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for collaboration()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.collaboration();
  static ActivityType.Image.collaboration = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.collaboration()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 6516580;
  v5[1] = 0xE300000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

id one-time initialization function for other()
{
  id result = closure #1 in variable initialization expression of static ActivityType.Image.other();
  static ActivityType.Image.other = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivityType.Image.other()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2928];
  v5[0] = 0x6F746F6870;
  v5[1] = 0xE500000000000000;
  v5[2] = 3;
  v5[3] = v0;
  __int16 v6 = 0;
  uint64_t v7 = 4;
  char v8 = 0;
  uint64_t v9 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v5);

  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = UIImage.activityTinted.getter();

  return v3;
}

uint64_t one-time initialization function for watchTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x76742E79616C70;
  v4[1] = 0xE700000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.watchTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for listenTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x6F6E2E636973756DLL;
  v4[1] = 0xEA00000000006574;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.listenTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for playTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x74656B636F72;
  v4[1] = 0xE600000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.playTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for workoutTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x722E657275676966;
  v4[1] = 0xEA00000000006E75;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.workoutTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for shopTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 6775138;
  v4[1] = 0xE300000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.shopTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for readTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 1802465122;
  v4[1] = 0xE400000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.readTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for exploreTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x65626F6C67;
  v4[1] = 0xE500000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.exploreTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for learnTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  strcpy(v4, "books.vertical");
  v4[15] = -18;
  uint64_t v5 = 1;
  uint64_t v6 = v0;
  __int16 v7 = 0;
  uint64_t v8 = 4;
  char v9 = 0;
  uint64_t v10 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.learnTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for createTogether()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x656C626269726373;
  v4[1] = 0xE800000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.createTogether = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for collaboration()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 6516580;
  v4[1] = 0xE300000000000000;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.collaboration = (uint64_t)v2;
  return result;
}

uint64_t one-time initialization function for other()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2950];
  v4[0] = 0x616C706572616873;
  v4[1] = 0xE900000000000079;
  v4[2] = 1;
  v4[3] = v0;
  __int16 v5 = 0;
  uint64_t v6 = 4;
  char v7 = 0;
  uint64_t v8 = 0;
  id v1 = v0;
  id v2 = static UIImage.symbolImage(for:)((uint64_t)v4);

  uint64_t result = swift_bridgeObjectRelease();
  static ActivityType.Icon.other = (uint64_t)v2;
  return result;
}

uint64_t ActivityType.placeholderImage.getter()
{
  uint64_t v1 = 0;
  switch(*v0)
  {
    case 1:
    case 2:
      if (one-time initialization token for collaboration != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.collaboration;
      goto LABEL_35;
    case 3:
      if (one-time initialization token for listenTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.listenTogether;
      goto LABEL_35;
    case 4:
      if (one-time initialization token for watchTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.watchTogether;
      goto LABEL_35;
    case 5:
      if (one-time initialization token for workoutTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.workoutTogether;
      goto LABEL_35;
    case 6:
      return v1;
    case 7:
      if (one-time initialization token for playTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.playTogether;
      goto LABEL_35;
    case 8:
      if (one-time initialization token for shopTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.shopTogether;
      goto LABEL_35;
    case 9:
      if (one-time initialization token for readTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.readTogether;
      goto LABEL_35;
    case 0xA:
      if (one-time initialization token for exploreTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.exploreTogether;
      goto LABEL_35;
    case 0xB:
      if (one-time initialization token for learnTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.learnTogether;
      goto LABEL_35;
    case 0xC:
      if (one-time initialization token for createTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.createTogether;
      goto LABEL_35;
    default:
      if (one-time initialization token for other != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Image.other;
LABEL_35:
      uint64_t v1 = *v2;
      id v3 = (id)*v2;
      return v1;
  }
}

uint64_t ActivityType.icon.getter()
{
  uint64_t v1 = 0;
  switch(*v0)
  {
    case 1:
    case 2:
      if (one-time initialization token for collaboration != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.collaboration;
      goto LABEL_35;
    case 3:
      if (one-time initialization token for listenTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.listenTogether;
      goto LABEL_35;
    case 4:
      if (one-time initialization token for watchTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.watchTogether;
      goto LABEL_35;
    case 5:
      if (one-time initialization token for workoutTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.workoutTogether;
      goto LABEL_35;
    case 6:
      return v1;
    case 7:
      if (one-time initialization token for playTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.playTogether;
      goto LABEL_35;
    case 8:
      if (one-time initialization token for shopTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.shopTogether;
      goto LABEL_35;
    case 9:
      if (one-time initialization token for readTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.readTogether;
      goto LABEL_35;
    case 0xA:
      if (one-time initialization token for exploreTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.exploreTogether;
      goto LABEL_35;
    case 0xB:
      if (one-time initialization token for learnTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.learnTogether;
      goto LABEL_35;
    case 0xC:
      if (one-time initialization token for createTogether != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.createTogether;
      goto LABEL_35;
    default:
      if (one-time initialization token for other != -1) {
        swift_once();
      }
      id v2 = &static ActivityType.Icon.other;
LABEL_35:
      uint64_t v1 = *v2;
      id v3 = (id)*v2;
      return v1;
  }
}

void ActivityType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ActivityType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Activity.sharePlayActivity.getter()
{
  return 0;
}

uint64_t specialized Activity.collaboration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Collaboration(0);
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v2);
}

uint64_t Activity.collaboration.getter()
{
  type metadata accessor for Collaboration(0);
  uint64_t v0 = OUTLINED_FUNCTION_47_0();
  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t specialized Activity.stagedCollaboration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for StagedCollaboration(0);
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v2);
}

uint64_t Activity.stagedCollaboration.getter()
{
  type metadata accessor for StagedCollaboration(0);
  uint64_t v0 = OUTLINED_FUNCTION_47_0();
  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

id TUConversationActivitySession.activityState.getter()
{
  return objc_msgSend(v0, sel_state);
}

id TUConversationActivitySession.originator.getter()
{
  id v1 = objc_msgSend(v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_originator);

  return v2;
}

id TUConversationActivitySession.preferredBroadcastingAttributes.getter()
{
  id v1 = objc_msgSend(v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_metadata);

  if (!v2) {
    return 0;
  }
  id v3 = objc_msgSend(v2, sel_preferredBroadcastingAttributes);

  return v3;
}

uint64_t TUConversationActivitySession.generateSplitSessionState.getter()
{
  if (objc_msgSend(v0, sel_state) != (id)4) {
    return 0;
  }
  id v1 = objc_msgSend(self, sel_sharedInstance);
  id v2 = objc_msgSend(v1, sel_neighborhoodActivityConduit);

  id v3 = objc_msgSend(v2, sel_activeSplitSessionTV);
  if (!v3) {
    return 0;
  }

  return 1;
}

id TUConversationActivitySession.isPlaceholderActivity.getter()
{
  return TUConversationActivitySession.isScreenSharing.getter((SEL *)&selRef_isPlaceholderActivity);
}

void TUConversationActivitySession.generateType.getter(char *a1@<X8>)
{
  id v5 = objc_msgSend(v1, sel_activity);
  id v6 = objc_msgSend(v5, sel_metadata);

  if (!v6) {
    goto LABEL_67;
  }
  id v7 = objc_msgSend(v6, sel_context);

  if (!v7) {
    goto LABEL_67;
  }
  id v8 = objc_msgSend(v7, sel_typedIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v9)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_66;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_66:

LABEL_67:
    char v34 = 0;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v11)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_70;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_70:

    char v34 = 1;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v13)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_72;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_72:

    char v34 = 3;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v15)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_74:

    char v34 = 7;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v17)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_76;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_76:

    char v34 = 4;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v19)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_78;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_78:

    char v34 = 5;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v21)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_80;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_80:

    char v34 = 8;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v23)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_82;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_82:

    char v34 = 9;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v25)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_84;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_84:

    char v34 = 10;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v27)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_86;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_86:

    char v34 = 11;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v29)
  {
    OUTLINED_FUNCTION_2_72();
    goto LABEL_88;
  }
  OUTLINED_FUNCTION_0_73();
  OUTLINED_FUNCTION_3_83();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_88:

    char v34 = 12;
    goto LABEL_68;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3 == OUTLINED_FUNCTION_1_89() && v2 == v31)
  {

    OUTLINED_FUNCTION_2_72();
    char v34 = 6;
  }
  else
  {
    char v33 = OUTLINED_FUNCTION_0_73();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33) {
      char v34 = 6;
    }
    else {
      char v34 = 0;
    }
  }
LABEL_68:
  *a1 = v34;
}

void TUConversationActivitySession.updatedAt.getter()
{
  id v1 = objc_msgSend(v0, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t TUConversationActivitySession.activeRemoteParticipantCount.getter()
{
  id v1 = objc_msgSend(v0, sel_activeRemoteParticipants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  _sSo25TUConversationParticipantCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Set.count.getter(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t TUConversationActivitySession.bundleIdentifier.getter()
{
  return outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(objc_msgSend(v0, sel_activity), (SEL *)&selRef_bundleIdentifier);
}

id TUConversationActivitySession.isAppInstalled.getter()
{
  return TUConversationActivitySession.isScreenSharing.getter((SEL *)&selRef_isSupported);
}

id TUConversationActivitySession.isScreenSharing.getter(SEL *a1)
{
  id v3 = objc_msgSend(v1, sel_activity);
  id v4 = [v3 *a1];

  return v4;
}

uint64_t TUConversationActivitySession.title.getter()
{
  return TUConversationActivitySession.title.getter((SEL *)&selRef_title);
}

uint64_t TUConversationActivitySession.subtitle.getter()
{
  return TUConversationActivitySession.title.getter((SEL *)&selRef_subTitle);
}

uint64_t TUConversationActivitySession.title.getter(SEL *a1)
{
  id v3 = objc_msgSend(v1, sel_activity);
  id v4 = objc_msgSend(v3, sel_metadata);

  if (v4) {
    return outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(v4, a1);
  }
  else {
    return 0;
  }
}

id TUConversationActivitySession.image.getter()
{
  id result = TUConversationActivitySession.generateImage.getter();
  if (!result)
  {
    TUConversationActivitySession.generateType.getter(&v1);
    return (id)ActivityType.placeholderImage.getter();
  }
  return result;
}

id TUConversationActivitySession.generateImage.getter()
{
  id v1 = objc_msgSend(v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_metadata);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = outlined bridged method (ob) of @objc TUConversationActivityMetadata.imageData.getter(v2);
  if (v4 >> 60 == 15) {
    return 0;
  }
  uint64_t v6 = v3;
  unint64_t v7 = v4;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  return UIImage.__allocating_init(data:)(v6, v7);
}

uint64_t TUConversationActivitySession.icon.getter()
{
  TUConversationActivitySession.generateType.getter(&v1);
  return ActivityType.icon.getter();
}

id TUConversationActivitySession.ongoingDescription.getter()
{
  id v1 = objc_msgSend(v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_metadata);

  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_context);

    id v4 = objc_msgSend(v3, sel_ongoingDescription);
    id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v2;
}

uint64_t TUConversationActivitySession.metadataHash.getter()
{
  id v1 = objc_msgSend(v0, sel_activity);
  id v2 = objc_msgSend(v1, sel_metadata);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUConversationActivityMetadata?);
  _sSo25TUConversationParticipantCSo8NSObjectCSH10ObjectiveCWlTm_0(&lazy protocol witness table cache variable for type TUConversationActivityMetadata and conformance NSObject, &lazy cache variable for type metadata for TUConversationActivityMetadata);
  uint64_t v3 = Optional<A>.hashValue.getter();

  return v3;
}

void *TUConversationActivitySession.sharePlayActivity.getter()
{
  id v1 = v0;
  return v0;
}

uint64_t protocol witness for Activity.uniqueIdentifier.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.uniqueIdentifier.getter();
}

uint64_t protocol witness for Activity.type.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.type.getter();
}

uint64_t protocol witness for Activity.activeRemoteParticipantCount.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.activeRemoteParticipantCount.getter();
}

uint64_t protocol witness for Activity.bundleIdentifier.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.bundleIdentifier.getter();
}

unint64_t protocol witness for Activity.isAppInstalled.getter in conformance TUConversationActivitySession()
{
  return (unint64_t)TUConversationActivitySession.isAppInstalled.getter() & 1;
}

uint64_t protocol witness for Activity.title.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.title.getter();
}

uint64_t protocol witness for Activity.subtitle.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.subtitle.getter();
}

id protocol witness for Activity.image.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.image.getter();
}

uint64_t protocol witness for Activity.icon.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.icon.getter();
}

uint64_t protocol witness for Activity.concatenatedDescription.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.concatenatedDescription.getter();
}

id protocol witness for Activity.ongoingDescription.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.ongoingDescription.getter();
}

uint64_t protocol witness for Activity.metadataHash.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.metadataHash.getter();
}

void *protocol witness for Activity.sharePlayActivity.getter in conformance TUConversationActivitySession()
{
  return TUConversationActivitySession.sharePlayActivity.getter();
}

uint64_t protocol witness for Activity.collaboration.getter in conformance TUConversationActivitySession()
{
  return Activity.collaboration.getter();
}

uint64_t protocol witness for Activity.stagedCollaboration.getter in conformance TUConversationActivitySession()
{
  return Activity.stagedCollaboration.getter();
}

id Activity.linkMetadata.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A78]), sel_init);
  uint64_t v1 = OUTLINED_FUNCTION_4_71();
  uint64_t v3 = v2(v1);
  if (v4)
  {
    id v5 = (void *)MEMORY[0x1C87730B0](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = 0;
  }
  objc_msgSend(v0, sel_setTitle_, v5);

  uint64_t v6 = OUTLINED_FUNCTION_4_71();
  uint64_t v8 = v7(v6);
  if (v9)
  {
    uint64_t v10 = (void *)MEMORY[0x1C87730B0](v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  objc_msgSend(v0, sel_setSummary_, v10);

  uint64_t v11 = OUTLINED_FUNCTION_4_71();
  uint64_t v13 = v12(v11);
  if (v13)
  {
    double v14 = (void *)v13;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A38]), sel_initWithPlatformImage_, v13);
    objc_msgSend(v0, sel_setImage_, v15);
  }
  return v0;
}

uint64_t outlined bridged method (ob) of @objc TUConversationActivity.bundleIdentifier.getter(void *a1)
{
  return outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(a1, (SEL *)&selRef_bundleIdentifier);
}

uint64_t outlined bridged method (ob) of @objc TUConversationActivity.localizedApplicationName.getter(void *a1)
{
  return outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(a1, (SEL *)&selRef_localizedApplicationName);
}

uint64_t outlined bridged method (ob) of @objc TUConversationActivityMetadata.title.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t _sSo25TUConversationParticipantCSo8NSObjectCSH10ObjectiveCWlTm_0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActivityType and conformance ActivityType()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivityType and conformance ActivityType;
  if (!lazy protocol witness table cache variable for type ActivityType and conformance ActivityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ActivityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3219258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityType()
{
  return &type metadata for ActivityType;
}

uint64_t dispatch thunk of Activity.uniqueIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Activity.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Activity.activeRemoteParticipantCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Activity.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Activity.isAppInstalled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Activity.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Activity.subtitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Activity.image.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Activity.icon.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of Activity.concatenatedDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of Activity.ongoingDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Activity.metadataHash.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of Activity.sharePlayActivity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of Activity.collaboration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of Activity.stagedCollaboration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t outlined bridged method (ob) of @objc TUConversationActivityMetadata.imageData.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_imageData);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double CGSize.scaledToFit(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  return CGSize.scaledToFit(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))CGSize.scaleThatFits(_:), a5, a6);
}

uint64_t AspectRatioLayout.contentMode.getter(char a1)
{
  return a1 & 1;
}

uint64_t AspectRatioLayout.contentMode.setter(uint64_t result)
{
  unsigned char *v1 = result & 1;
  return result;
}

uint64_t (*AspectRatioLayout.contentMode.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AspectRatioLayout.spaceOffered(to:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  static ProposedViewSize.unspecified.getter();
  if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0)
  {
    static ProposedViewSize.unspecified.getter();
    LayoutSubview.sizeThatFits(_:)();
    double v10 = v9;
    double v12 = v11;
    char v13 = static ContentMode.== infix(_:_:)();
    static ProposedViewSize.unspecified.getter();
    if (v13)
    {
      char v14 = a5 & 1;
      if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0)
      {
        double v15 = CGSize.scaleThatFits(_:)(a2, a3 & 1, a4, v14, v10, v12);
        goto LABEL_7;
      }
    }
    else
    {
      char v16 = a5 & 1;
      if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0)
      {
        double v15 = CGSize.scaleThatFills(_:)(a2, a3 & 1, a4, v16, v10, v12);
LABEL_7:
        if (v10 == 0.0) {
          double v10 = 0.0;
        }
        else {
          double v10 = v10 * v15;
        }
      }
    }
    return *(void *)&v10;
  }
  return a2;
}

double CGSize.scaledToFill(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  return CGSize.scaledToFit(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))CGSize.scaleThatFills(_:), a5, a6);
}

double CGSize.scaledToFit(_:)(uint64_t a1, char a2, uint64_t a3, char a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, double, double), double a6, double a7)
{
  static ProposedViewSize.unspecified.getter();
  uint64_t v14 = a2 & 1;
  uint64_t v15 = a4 & 1;
  if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0)
  {
    a5(a1, v14, a3, v15, a6, a7);
    if (a6 == 0.0) {
      return 0.0;
    }
    else {
      return v16 * a6;
    }
  }
  return a6;
}

uint64_t AspectRatioLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v10 = OUTLINED_FUNCTION_2_73();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_61();
  specialized Collection.first.getter(v5);
  if (__swift_getEnumTagSinglePayload(v5, 1, v10) == 1)
  {
    uint64_t result = outlined destroy of Conversation?(v5, &demangling cache variable for type metadata for LayoutSubview?);
  }
  else
  {
    OUTLINED_FUNCTION_4_72();
    v12();
    type metadata accessor for LayoutSubviews();
    lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    if (dispatch thunk of Collection.distance(from:to:)() == 1)
    {
      AspectRatioLayout.spaceOffered(to:in:)(v4, a1, a2 & 1, a3, a4 & 1);
      LayoutSubview.sizeThatFits(_:)();
      uint64_t v13 = OUTLINED_FUNCTION_6_66();
      return v14(v13);
    }
    uint64_t v16 = OUTLINED_FUNCTION_6_66();
    uint64_t result = v17(v16);
  }
  __break(1u);
  return result;
}

uint64_t AspectRatioLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v10 = OUTLINED_FUNCTION_2_73();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.first.getter(v4);
  if (__swift_getEnumTagSinglePayload(v4, 1, v10) == 1) {
    return outlined destroy of Conversation?(v4, &demangling cache variable for type metadata for LayoutSubview?);
  }
  uint64_t v21 = a3;
  OUTLINED_FUNCTION_4_72();
  v17();
  type metadata accessor for LayoutSubviews();
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (dispatch thunk of Collection.distance(from:to:)() == 1)
  {
    v24.origin.CGFloat x = OUTLINED_FUNCTION_6_2();
    CGRectGetMidX(v24);
    v25.origin.CGFloat x = OUTLINED_FUNCTION_6_2();
    CGRectGetMidY(v25);
    static UnitPoint.center.getter();
    char v23 = a2 & 1;
    char v22 = a4 & 1;
    AspectRatioLayout.spaceOffered(to:in:)((uint64_t)v15, a1, a2 & 1, v21, a4 & 1);
    char v23 = v18 & 1;
    char v22 = v19 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v10);
}

uint64_t AspectRatioLayout.init(contentMode:)(char a1)
{
  return a1 & 1;
}

uint64_t protocol witness for static Layout.layoutProperties.getter in conformance AspectRatioLayout()
{
  return MEMORY[0x1F40FC808]();
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance AspectRatioLayout()
{
  return MEMORY[0x1F40FC830]();
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance AspectRatioLayout()
{
  return MEMORY[0x1F40FC7F8]();
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance AspectRatioLayout()
{
  return MEMORY[0x1F40FC820]();
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance AspectRatioLayout(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return AspectRatioLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance AspectRatioLayout(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return AspectRatioLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance AspectRatioLayout(uint64_t a1, uint64_t a2, char a3)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance AspectRatioLayout(a1, a2, a3);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance AspectRatioLayout(a1, a2, a3);
}

{
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_1_90(a1, a2, a3);
  return v3();
}

uint64_t protocol witness for static Layout._makeLayoutView(root:inputs:body:) in conformance AspectRatioLayout()
{
  return MEMORY[0x1F40FC7E8]();
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance AspectRatioLayout()
{
  return TPNumberPadCharacter.rawValue.getter(*v0);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance AspectRatioLayout(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

double ContentFillLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 10.0;
  }
  return result;
}

uint64_t ContentFillLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v34 = a2;
  int v35 = a4;
  uint64_t v40 = a1;
  uint64_t v41 = a3;
  uint64_t v7 = type metadata accessor for LayoutSubview();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v39 = v11;
  uint64_t v12 = type metadata accessor for LayoutSubviews();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_3();
  id v44 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  MEMORY[0x1F4188790](v17 - 8);
  OUTLINED_FUNCTION_61();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v19 = v18 - 8;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  char v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  CGRect v24 = (char *)&v33 - v23;
  id v42 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v43 = v14 + 16;
  v42(v22, a5, v12);
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
  dispatch thunk of Collection.startIndex.getter();
  *(void *)&v22[*(int *)(v19 + 44)] = v46[0];
  outlined init with take of IndexingIterator<LayoutSubviews>((uint64_t)v22, (uint64_t)v24);
  CGRect v25 = &v24[*(int *)(v19 + 44)];
  uint64_t v26 = *(void *)v25;
  OUTLINED_FUNCTION_7_62();
  if (v26 == v46[0])
  {
LABEL_5:
    __swift_storeEnumTagSinglePayload(v5, 1, 1, v7);
  }
  else
  {
    id v37 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    id v38 = (void (**)(uint64_t))(v9 + 16);
    double v36 = (void (**)(uint64_t, uint64_t))(v9 + 8);
    char v27 = v34 & 1;
    v35 &= 1u;
    while (1)
    {
      id v28 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      (*v38)(v5);
      v28(v46, 0);
      uint64_t v29 = v44;
      v42(v44, (uint64_t)v24, v12);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v29, v12);
      __swift_storeEnumTagSinglePayload(v5, 0, 1, v7);
      if (__swift_getEnumTagSinglePayload(v5, 1, v7) == 1) {
        break;
      }
      uint64_t v30 = v39;
      (*v37)(v39, v5, v7);
      static UnitPoint.topLeading.getter();
      LOBYTE(v46[0]) = v27;
      char v45 = v35;
      LayoutSubview.place(at:anchor:proposal:)();
      (*v36)(v30, v7);
      uint64_t v31 = *(void *)v25;
      OUTLINED_FUNCTION_7_62();
      if (v31 == v46[0]) {
        goto LABEL_5;
      }
    }
  }
  return outlined destroy of Conversation?((uint64_t)v24, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ContentFillLayout(uint64_t a1, char a2)
{
  return ContentFillLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ContentFillLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return ContentFillLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5);
}

double CGSize.scaledBy(x:y:)(double a1, double a2, double a3)
{
  double result = a1 * a3;
  if (a3 == 0.0) {
    return 0.0;
  }
  return result;
}

double CGSize.scaled(by:)(double a1, double a2)
{
  double v2 = a1 * a2;
  if (a2 == 0.0) {
    return 0.0;
  }
  return v2;
}

CGSize __swiftcall CGSize.scaled(by:)(CGSize by)
{
  double v3 = by.width * v1;
  if (v1 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = by.height * v2;
  if (v2 == 0.0) {
    double v4 = 0.0;
  }
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

double CGSize.scaleThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  if ((a2 & 1) != 0 || a5 == 0.0 && *(double *)&a1 == 0.0)
  {
    double result = INFINITY;
    if (a4) {
      goto LABEL_9;
    }
  }
  else
  {
    double result = *(double *)&a1 / a5;
    if (a4)
    {
LABEL_9:
      double v7 = INFINITY;
      goto LABEL_11;
    }
  }
  if (a6 == 0.0 && *(double *)&a3 == 0.0) {
    goto LABEL_9;
  }
  double v7 = *(double *)&a3 / a6;
LABEL_11:
  if (v7 < result) {
    return v7;
  }
  return result;
}

double CGSize.scaleThatFills(_:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  if ((a2 & 1) != 0 || a5 == 0.0 && *(double *)&a1 == 0.0)
  {
    double result = -INFINITY;
    if (a4) {
      goto LABEL_9;
    }
  }
  else
  {
    double result = *(double *)&a1 / a5;
    if (a4)
    {
LABEL_9:
      double v7 = -INFINITY;
      goto LABEL_11;
    }
  }
  if (a6 == 0.0 && *(double *)&a3 == 0.0) {
    goto LABEL_9;
  }
  double v7 = *(double *)&a3 / a6;
LABEL_11:
  if (result <= v7) {
    return v7;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    type metadata accessor for LayoutSubviews();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

uint64_t outlined init with take of IndexingIterator<LayoutSubviews>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AspectRatioLayout and conformance AspectRatioLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type AspectRatioLayout and conformance AspectRatioLayout;
  if (!lazy protocol witness table cache variable for type AspectRatioLayout and conformance AspectRatioLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspectRatioLayout and conformance AspectRatioLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentFillLayout and conformance ContentFillLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentFillLayout and conformance ContentFillLayout;
  if (!lazy protocol witness table cache variable for type ContentFillLayout and conformance ContentFillLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentFillLayout and conformance ContentFillLayout);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AspectRatioLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C321A410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AspectRatioLayout()
{
  return &type metadata for AspectRatioLayout;
}

ValueMetadata *type metadata accessor for ContentFillLayout()
{
  return &type metadata for ContentFillLayout;
}

uint64_t *CallScreeningRTTHelper.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static CallScreeningRTTHelper.shared;
}

uint64_t static CallScreeningRTTHelper.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t CallScreeningRTTHelper.().init()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [TranscriptionViewModel.Caption]);
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit22CallScreeningRTTHelper_mainActorLogger;
  if (one-time initialization token for answeringMachine != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.answeringMachine);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v0 + v1, v3, v2);
  return v0;
}

Swift::Void __swiftcall CallScreeningRTTHelper.setupObservers()()
{
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_callStatusChanged_, *MEMORY[0x1E4FADD90], 0);

  id v3 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v3, sel_addObserver_selector_name_object_, v0, sel_callRTTStatusChanged_, *MEMORY[0x1E4FADE48], 0);
}

Swift::Void __swiftcall CallScreeningRTTHelper.saveCaptions(_:for:)(Swift::OpaquePointer _, Swift::String a2)
{
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_16_0();
  id v10 = objc_msgSend(self, sel_sharedInstance);
  uint64_t v11 = OUTLINED_FUNCTION_29_0();
  uint64_t v12 = (void *)MEMORY[0x1C87730B0](v11);
  id v22 = objc_msgSend(v10, sel_callWithCallUUID_, v12);

  if (!v22)
  {
LABEL_10:
    OUTLINED_FUNCTION_28();
    return;
  }
  if (objc_msgSend(v22, sel_isActive))
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_bridgeObjectRetain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v13, countAndFlagsBits, (uint64_t)object);
    swift_endAccess();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, v2 + OBJC_IVAR____TtC15ConversationKit22CallScreeningRTTHelper_mainActorLogger, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v17 = OUTLINED_FUNCTION_29_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v14, v15, "CallScreeningRTTHelper: saved captions for callUUID %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall CallScreeningRTTHelper.syncCaptionsToRTT(for:)(Swift::String a1)
{
  uint64_t v3 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  swift_retain();
  if (TranscriptionViewModel.callUUID.getter() == countAndFlagsBits && v8 == object)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_11:
    uint64_t v12 = TranscriptionViewModel.captions.getter();
    goto LABEL_12;
  }
  swift_beginAccess();
  uint64_t v11 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized Dictionary.subscript.getter(countAndFlagsBits, (uint64_t)object, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12)
  {
    swift_release();
    goto LABEL_17;
  }
LABEL_12:
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = type metadata accessor for TranscriptionViewModel.Caption(0);
    OUTLINED_FUNCTION_4();
    uint64_t v16 = v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void (**)(uint64_t))(*(void *)v3 + 176);
    uint64_t v19 = *(void *)(v18 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TranscriptionViewModel.Caption(v16, v2);
      __swift_storeEnumTagSinglePayload(v2, 0, 1, v14);
      uint64_t v20 = OUTLINED_FUNCTION_29_0();
      v17(v20);
      outlined destroy of SystemUpdateNotice?(v2, (uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
      v16 += v19;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_17:
  OUTLINED_FUNCTION_28();
}

void CallScreeningRTTHelper.syncCaptionToRTT(_:callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v46 = v9;
  uint64_t v47 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  uint64_t v13 = OUTLINED_FUNCTION_8(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_16_0();
  uint64_t v14 = type metadata accessor for TranscriptionViewModel.Caption(0);
  OUTLINED_FUNCTION_0();
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (void *)((char *)v41 - v20);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (void *)((char *)v41 - v22);
  outlined init with copy of TranscriptionViewModel.Caption?(a1, v4);
  if (__swift_getEnumTagSinglePayload(v4, 1, v14) == 1)
  {
    outlined destroy of SystemUpdateNotice?(v4, (uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  }
  else
  {
    uint64_t v44 = a2;
    uint64_t v45 = a3;
    outlined init with take of TranscriptionViewModel.Caption(v4, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v11, v3 + OBJC_IVAR____TtC15ConversationKit22CallScreeningRTTHelper_mainActorLogger, v47);
    outlined init with copy of TranscriptionViewModel.Caption((uint64_t)v23, (uint64_t)v21);
    outlined init with copy of TranscriptionViewModel.Caption((uint64_t)v23, (uint64_t)v18);
    CGRect v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    uint64_t v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      swift_slowAlloc();
      int v42 = v26;
      uint64_t v43 = OUTLINED_FUNCTION_10_47();
      uint64_t v48 = v43;
      *(_DWORD *)uint64_t v26 = 134349314;
      v41[1] = v26 + 4;
      Swift::UInt v27 = *v21;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Swift::Int v28 = Hasher._finalize()();
      outlined destroy of TranscriptionViewModel.Caption((uint64_t)v21);
      uint64_t v49 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v29 = (uint64_t *)&v18[*(int *)(v14 + 28)];
      uint64_t v31 = *v29;
      unint64_t v30 = v29[1];
      swift_bridgeObjectRetain();
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TranscriptionViewModel.Caption((uint64_t)v18);
      _os_log_impl(&dword_1C2F90000, v24, (os_log_type_t)v42, "CallScreeningRTTHelper: sending notification for caption %{public}ld: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined destroy of TranscriptionViewModel.Caption((uint64_t)v21);
      outlined destroy of TranscriptionViewModel.Caption((uint64_t)v18);
    }

    OUTLINED_FUNCTION_26_2();
    v32();
    id v33 = objc_msgSend(self, sel_sharedInstance);
    int v34 = (uint64_t *)((char *)v23 + *(int *)(v14 + 28));
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    swift_bridgeObjectRetain();
    id v37 = (void *)MEMORY[0x1C87730B0](v35, v36);
    swift_bridgeObjectRelease();
    Swift::UInt v38 = *v23;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v38);
    Hasher._finalize()();
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    uint64_t v40 = (void *)MEMORY[0x1C87730B0](v44, v45);
    objc_msgSend(v33, sel_processCallScreeningTranscription_transcriptionID_callUUID_, v37, isa, v40);

    outlined destroy of TranscriptionViewModel.Caption((uint64_t)v23);
  }
  OUTLINED_FUNCTION_28();
}

uint64_t CallScreeningRTTHelper.shouldShowScreeningRTT(for:)(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  if (TUCallScreeningRTTEnabled())
  {
    if (objc_msgSend(v1, sel_isRTT)) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = (uint64_t)objc_msgSend(v1, sel_isTTY);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

Swift::Bool __swiftcall CallScreeningRTTHelper.shouldShowScreeningRTT(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = objc_msgSend(self, sel_sharedInstance);
  uint64_t v5 = MEMORY[0x1C87730B0](countAndFlagsBits, object);
  id v6 = objc_msgSend(v4, sel_callWithCallUUID_, v5);

  LOBYTE(v5) = (*(uint64_t (**)(id))(*(void *)v1 + 184))(v6);
  return v5 & 1;
}

void CallScreeningRTTHelper.callStatusChanged(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_6_67();
  if (v14)
  {
    type metadata accessor for TUCall();
    if (OUTLINED_FUNCTION_18_37())
    {
      id v4 = objc_msgSend(v12, sel_callUUID);
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      if (objc_msgSend(v12, sel_isActive))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        static TaskPriority.userInitiated.getter();
        uint64_t v8 = type metadata accessor for TaskPriority();
        OUTLINED_FUNCTION_16_30(v8);
        swift_retain();
        uint64_t v9 = static MainActor.shared.getter();
        uint64_t v10 = (void *)swift_allocObject();
        uint64_t v11 = MEMORY[0x1E4FBCFD8];
        _OWORD v10[2] = v9;
        v10[3] = v11;
        void v10[4] = v1;
        void v10[5] = v5;
        void v10[6] = v7;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();

        swift_release();
      }
    }
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v13, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t closure #1 in CallScreeningRTTHelper.callStatusChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  void v6[6] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[12] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in CallScreeningRTTHelper.callStatusChanged(_:), v9, v8);
}

uint64_t closure #1 in CallScreeningRTTHelper.callStatusChanged(_:)()
{
  uint64_t v15 = v0;
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_5_74();
  v2(v1);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = v0[8];
    uint64_t v6 = v0[7];
    swift_slowAlloc();
    uint64_t v14 = OUTLINED_FUNCTION_10_47();
    OUTLINED_FUNCTION_17_33(4.8751e-34);
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v14);
    OUTLINED_FUNCTION_15_39();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_20_29(&dword_1C2F90000, v7, v8, "CallScreeningRTTHelper: removing saved captions for inactive call with callUUID %{public}s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    OUTLINED_FUNCTION_26_2();
    v9();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v10 = OUTLINED_FUNCTION_14_38();
    v11(v10);
  }
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v12();
}

void CallScreeningRTTHelper.callRTTStatusChanged(_:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_6_67();
  if (v18)
  {
    type metadata accessor for TUCall();
    if (OUTLINED_FUNCTION_18_37())
    {
      unint64_t v5 = *(uint64_t (**)())(*(void *)v0 + 184);
      id v6 = v16;
      char v7 = v5();

      if (v7)
      {
        id v8 = objc_msgSend(v6, sel_callUUID);
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        static TaskPriority.userInitiated.getter();
        uint64_t v12 = type metadata accessor for TaskPriority();
        OUTLINED_FUNCTION_16_30(v12);
        swift_retain();
        uint64_t v13 = static MainActor.shared.getter();
        uint64_t v14 = (void *)swift_allocObject();
        uint64_t v15 = MEMORY[0x1E4FBCFD8];
        void v14[2] = v13;
        v14[3] = v15;
        v14[4] = v2;
        uint64_t v14[5] = v9;
        v14[6] = v11;
        _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:), (uint64_t)v14);
        swift_release();
      }
    }
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  void v6[6] = v7;
  v6[7] = *(void *)(v7 - 8);
  v6[8] = swift_task_alloc();
  v6[9] = type metadata accessor for MainActor();
  v6[10] = static MainActor.shared.getter();
  id v8 = (void *)swift_task_alloc();
  v6[11] = v8;
  *id v8 = v6;
  v8[1] = closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:);
  return MEMORY[0x1F4187DE0](500000000);
}

uint64_t closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:)()
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v3 = v2;
  *(void *)(v4 + 96) = v0;
  swift_task_dealloc();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v7 = closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:);
  }
  else {
    uint64_t v7 = closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:);
  }
  return MEMORY[0x1F4188298](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v15 = v0;
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_5_74();
  v2(v1);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 32);
    swift_slowAlloc();
    uint64_t v14 = OUTLINED_FUNCTION_10_47();
    OUTLINED_FUNCTION_17_33(4.8751e-34);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v14);
    OUTLINED_FUNCTION_15_39();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_20_29(&dword_1C2F90000, v7, v8, "CallScreeningRTTHelper: syncing captions to RTT on call upgrade for callUUID %{public}s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    OUTLINED_FUNCTION_26_2();
    v9();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v10 = OUTLINED_FUNCTION_14_38();
    v11(v10);
  }
  (*(void (**)(void, void))(**(void **)(v0 + 24) + 168))(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v12();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t @objc CallScreeningRTTHelper.callStatusChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  type metadata accessor for Notification();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  a4(v4);
  swift_release();
  uint64_t v7 = OUTLINED_FUNCTION_29_0();
  return v8(v7);
}

uint64_t CallScreeningRTTHelper.deinit()
{
  swift_bridgeObjectRelease();
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v1();
  return v0;
}

uint64_t CallScreeningRTTHelper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v0();
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of TranscriptionViewModel.Caption?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TranscriptionViewModel.Caption(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionViewModel.Caption(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for TUCall()
{
  unint64_t result = lazy cache variable for type metadata for TUCall;
  if (!lazy cache variable for type metadata for TUCall)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  }
  return result;
}

uint64_t partial apply for closure #1 in CallScreeningRTTHelper.callStatusChanged(_:)()
{
  OUTLINED_FUNCTION_19_31();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in CallScreeningRTTHelper.callStatusChanged(_:);
  uint64_t v2 = OUTLINED_FUNCTION_4_73();
  return closure #1 in CallScreeningRTTHelper.callStatusChanged(_:)(v2, v3, v4, v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t objectdestroyTm_7()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:)()
{
  OUTLINED_FUNCTION_19_31();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in CallScreeningRTTHelper.callStatusChanged(_:);
  uint64_t v2 = OUTLINED_FUNCTION_4_73();
  return closure #1 in CallScreeningRTTHelper.callRTTStatusChanged(_:)(v2, v3, v4, v5, v6, v7);
}

uint64_t ObjC metadata update function for CallScreeningRTTHelper()
{
  return type metadata accessor for CallScreeningRTTHelper();
}

uint64_t type metadata accessor for CallScreeningRTTHelper()
{
  uint64_t result = type metadata singleton initialization cache for CallScreeningRTTHelper;
  if (!type metadata singleton initialization cache for CallScreeningRTTHelper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CallScreeningRTTHelper()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CallScreeningRTTHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallScreeningRTTHelper);
}

uint64_t dispatch thunk of CallScreeningRTTHelper.setupObservers()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CallScreeningRTTHelper.saveCaptions(_:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of CallScreeningRTTHelper.syncCaptionsToRTT(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of CallScreeningRTTHelper.syncCaptionToRTT(_:callUUID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CallScreeningRTTHelper.shouldShowScreeningRTT(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of CallScreeningRTTHelper.callStatusChanged(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of CallScreeningRTTHelper.callRTTStatusChanged(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t static ButtonStyle<>.notice.getter@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for NoticeButtonStyle() + 20));
  *uint64_t v2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
  OUTLINED_FUNCTION_4_74();
  return swift_storeEnumTagMultiPayload();
}

uint64_t NoticeButtonStyle.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for NoticeButtonStyle() + 20));
  *uint64_t v2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
  OUTLINED_FUNCTION_4_74();
  return swift_storeEnumTagMultiPayload();
}

uint64_t NoticeButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  type metadata accessor for BlendMode();
  OUTLINED_FUNCTION_4();
  uint64_t v59 = v3;
  uint64_t v60 = v2;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_2_3();
  uint64_t v58 = v4;
  uint64_t v57 = type metadata accessor for RoundedRectangle() - 8;
  MEMORY[0x1F4188790](v57);
  OUTLINED_FUNCTION_2_3();
  unint64_t v56 = v5;
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration.Label();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_62();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_2_3();
  uint64_t v52 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>);
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_2_3();
  uint64_t v53 = v19;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect>)
      - 8;
  MEMORY[0x1F4188790](v55);
  OUTLINED_FUNCTION_2_3();
  uint64_t v54 = v20;
  ButtonStyleConfiguration.label.getter();
  uint64_t v21 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v1, v11, v6);
  uint64_t v23 = (uint64_t *)(v1 + *(int *)(v13 + 44));
  *uint64_t v23 = KeyPath;
  v23[1] = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  LOBYTE(v13) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v52;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v1, v52, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v33 = v32 + *(int *)(v15 + 44);
  *(unsigned char *)uint64_t v33 = v13;
  *(void *)(v33 + 8) = v25;
  *(void *)(v33 + 16) = v27;
  *(void *)(v33 + 24) = v29;
  *(void *)(v33 + 32) = v31;
  *(unsigned char *)(v33 + 40) = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  static Color.gray.getter();
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v34 = Color.opacity(_:)();
  swift_release();
  uint64_t v35 = v56;
  uint64_t v36 = (char *)v56 + *(int *)(v57 + 28);
  uint64_t v37 = *MEMORY[0x1E4F3D4A0];
  type metadata accessor for RoundedCornerStyle();
  OUTLINED_FUNCTION_0();
  (*(void (**)(char *, uint64_t))(v38 + 104))(v36, v37);
  __asm { FMOV            V0.2D, #5.0 }
  *uint64_t v35 = _Q0;
  uint64_t v44 = v53;
  uint64_t v45 = (uint64_t *)(v53 + *(int *)(v18 + 44));
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, RoundedRectangle>);
  outlined init with copy of RoundedRectangle((uint64_t)v35, (uint64_t)v45 + *(int *)(v46 + 52));
  *uint64_t v45 = v34;
  *(_WORD *)((char *)v45 + *(int *)(v46 + 56)) = 256;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v32, v44, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  outlined destroy of RoundedRectangle((uint64_t)v35);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v32, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  uint64_t v48 = v58;
  uint64_t v47 = v59;
  uint64_t v49 = v60;
  (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v58, *MEMORY[0x1E4F3EFC0], v60);
  uint64_t v50 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v54 + *(int *)(v55 + 44), v48, v49);
  outlined init with copy of Environment<DynamicTypeSize>.Content(v44, v50, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v44, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v50, v61, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect>);
}

uint64_t default argument 0 of NoticeButtonStyle.init(colorScheme:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  OUTLINED_FUNCTION_4_74();
  return swift_storeEnumTagMultiPayload();
}

uint64_t NoticeButtonStyle.init(colorScheme:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a1, a2, &demangling cache variable for type metadata for Environment<ColorScheme>);
  uint64_t v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NoticeButtonStyle() + 20));
  uint64_t *v3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
  OUTLINED_FUNCTION_4_74();
  return swift_storeEnumTagMultiPayload();
}

uint64_t key path getter for EnvironmentValues.backgroundMaterial : EnvironmentValues()
{
  return EnvironmentValues.backgroundMaterial.getter();
}

uint64_t key path setter for EnvironmentValues.backgroundMaterial : EnvironmentValues(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
  MEMORY[0x1F4188790](v3 - 8);
  OUTLINED_FUNCTION_62();
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, v1, &demangling cache variable for type metadata for Material?);
  return EnvironmentValues.backgroundMaterial.setter();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance NoticeButtonStyle@<X0>(uint64_t a1@<X8>)
{
  return NoticeButtonStyle.makeBody(configuration:)(a1);
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1C321CA90()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  type metadata accessor for ColorScheme();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t type metadata accessor for NoticeButtonStyle()
{
  uint64_t result = type metadata singleton initialization cache for NoticeButtonStyle;
  if (!type metadata singleton initialization cache for NoticeButtonStyle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C321CBA0()
{
  return EnvironmentValues.backgroundMaterial.getter();
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C321CBF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t outlined init with copy of RoundedRectangle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RoundedRectangle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in NoticeButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for NoticeButtonStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Material();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NoticeButtonStyle(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Material();
    uint64_t result = __swift_getEnumTagSinglePayload(v5, 1, v6);
    if (!result)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      return v8(v5, v6);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for NoticeButtonStyle(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Material();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for NoticeButtonStyle(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1 + v7, &demangling cache variable for type metadata for Environment<Material?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for Material();
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      }
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for NoticeButtonStyle(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Material();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for NoticeButtonStyle(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&a1[v8], &demangling cache variable for type metadata for Environment<Material?>.Content);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Material();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NoticeButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C321D7E4);
}

uint64_t sub_1C321D7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for NoticeButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C321D87C);
}

uint64_t sub_1C321D87C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Material?>);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for NoticeButtonStyle()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<Material?>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
    }
  }
}

void type metadata accessor for Environment<Material?>.Content()
{
  if (!lazy cache variable for type metadata for Environment<Material?>.Content)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Material?);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<Material?>.Content);
    }
  }
}

uint64_t sub_1C321DA84()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<Color, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, RoundedRectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, RoundedRectangle>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label)
  {
    type metadata accessor for ButtonStyleConfiguration.Label();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  }
  return result;
}

uint64_t ParticipantPresentationContext.idsIdentifier.getter()
{
  return *(void *)v0;
}

uint64_t ParticipantPresentationContext.videoQuality.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ParticipantPresentationContext.visibility.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ParticipantPresentationContext.prominence.getter()
{
  return *(void *)(v0 + 24);
}

double ParticipantPresentationContext.spatialPosition.getter()
{
  return *(double *)(v0 + 32);
}

uint64_t ParticipantPresentationContext.isInCanvas.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ParticipantPresentationContext.init(idsIdentifier:videoQuality:visibility:prominence:spatialPosition:isInCanvas:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(double *)(a6 + 32) = a7;
  *(double *)(a6 + 40) = a8;
  *(double *)(a6 + 48) = a9;
  *(double *)(a6 + 56) = a10;
  *(unsigned char *)(a6 + 64) = a5;
  return result;
}

uint64_t ParticipantPresentationContext.init(participant:videoQuality:visibility:prominence:spatialPosition:isInCanvas:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  uint64_t v20 = (void *)(a1 + *(int *)(type metadata accessor for Participant(0) + 28));
  if (!*v20)
  {
    uint64_t result = outlined destroy of Participant(a1);
    goto LABEL_5;
  }
  uint64_t v21 = v20[1];
  uint64_t v22 = v20[2];
  uint64_t result = outlined destroy of Participant(a1);
  if (v22)
  {
LABEL_5:
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    char v24 = 2;
    goto LABEL_6;
  }
  char v24 = a5 & 1;
  *(void *)a6 = v21;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(double *)(a6 + 32) = a7;
  *(double *)(a6 + 40) = a8;
  *(double *)(a6 + 48) = a9;
  *(double *)(a6 + 56) = a10;
LABEL_6:
  *(unsigned char *)(a6 + 64) = v24;
  return result;
}

uint64_t static ParticipantPresentationContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  BOOL v2 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (!v2 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 64);
  int v6 = *(unsigned __int8 *)(a2 + 64);
  if (CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32))) {
    return v5 ^ v6 ^ 1u;
  }
  else {
    return 0;
  }
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t getEnumTagSinglePayload for ParticipantPresentationContext(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 65))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantPresentationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantPresentationContext()
{
  return &type metadata for ParticipantPresentationContext;
}

id ParticipantInfoView.nameLabel.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel);
}

uint64_t key path getter for ParticipantInfoView.isExpanded : ParticipantInfoView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ParticipantInfoView.isExpanded : ParticipantInfoView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(*a1);
}

id ParticipantInfoView.isExpanded.didset()
{
  uint64_t v1 = v0;
  int v2 = &v0[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isExpanded];
  swift_beginAccess();
  if (*v2) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = 1;
  }
  BOOL v4 = (void *)specialized static UIImage.image(named:)(v3);
  ParticipantViewButton.image.setter(v4);
  return objc_msgSend(v1, sel_setNeedsLayout);
}

uint64_t ParticipantInfoView.isExpanded.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t ParticipantInfoView.isExpanded.setter(char a1)
{
  return ParticipantInfoView.isExpanded.setter(a1, &OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isExpanded, (uint64_t (*)(uint64_t))ParticipantInfoView.isExpanded.didset);
}

uint64_t (*ParticipantInfoView.isExpanded.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return ParticipantInfoView.isExpanded.modify;
}

uint64_t ParticipantInfoView.isExpanded.modify(uint64_t a1, char a2)
{
  return ParticipantInfoView.isExpanded.modify(a1, a2, (uint64_t (*)(uint64_t))ParticipantInfoView.isExpanded.didset);
}

void key path getter for ParticipantInfoView.customCornerRadius : ParticipantInfoView(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
}

uint64_t key path setter for ParticipantInfoView.customCornerRadius : ParticipantInfoView(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0))(*a1);
}

id ParticipantInfoView.customCornerRadius.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_gradientView);
  int v2 = (double *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_customCornerRadius);
  swift_beginAccess();
  return objc_msgSend(v1, sel__setContinuousCornerRadius_, *v2);
}

double ParticipantInfoView.customCornerRadius.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

id ParticipantInfoView.customCornerRadius.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_customCornerRadius);
  swift_beginAccess();
  double *v3 = a1;
  return ParticipantInfoView.customCornerRadius.didset();
}

uint64_t (*ParticipantInfoView.customCornerRadius.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return ParticipantInfoView.customCornerRadius.modify;
}

uint64_t ParticipantInfoView.customCornerRadius.modify(uint64_t a1, char a2)
{
  return ParticipantInfoView.isExpanded.modify(a1, a2, (uint64_t (*)(uint64_t))ParticipantInfoView.customCornerRadius.didset);
}

uint64_t ParticipantInfoView.isMomentsAvailable.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t ParticipantInfoView.isMomentsAvailable.setter(char a1)
{
  return ParticipantInfoView.isExpanded.setter(a1, &OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isMomentsAvailable, (uint64_t (*)(uint64_t))ParticipantInfoView.isMomentsAvailable.didset);
}

uint64_t key path getter for ParticipantInfoView.isMomentsAvailable : ParticipantInfoView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ParticipantInfoView.isMomentsAvailable : ParticipantInfoView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(*a1);
}

id ParticipantInfoView.isMomentsAvailable.didset()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isMomentsAvailable);
  swift_beginAccess();
  if (*v1 == 1)
  {
    if (one-time initialization token for shutterButtonEnabled != -1) {
      swift_once();
    }
    int v2 = &static Colors.ParticipantViews.shutterButtonEnabled;
  }
  else
  {
    if (one-time initialization token for shutterButtonDisabled != -1) {
      swift_once();
    }
    int v2 = &static Colors.ParticipantViews.shutterButtonDisabled;
  }
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton), sel_setTintColor_, *v2);
}

uint64_t (*ParticipantInfoView.isMomentsAvailable.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return ParticipantInfoView.isMomentsAvailable.modify;
}

uint64_t ParticipantInfoView.isMomentsAvailable.modify(uint64_t a1, char a2)
{
  return ParticipantInfoView.isExpanded.modify(a1, a2, (uint64_t (*)(uint64_t))ParticipantInfoView.isMomentsAvailable.didset);
}

uint64_t key path getter for ParticipantInfoView.recordingLocalVideo : ParticipantInfoView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ParticipantInfoView.recordingLocalVideo : ParticipantInfoView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0))(*a1);
}

void ParticipantInfoView.recordingLocalVideo.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 568))())
  {
    int v2 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_recordingLocalVideo);
    swift_beginAccess();
    uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton);
    if (*v2 == 1)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      BOOL v4 = (void *)*MEMORY[0x1E4FB2988];
      v7[0] = 0x7269632E706F7473;
      v7[1] = 0xEB00000000656C63;
      v7[2] = 3;
      v7[3] = v4;
      __int16 v8 = 0;
      uint64_t v9 = 4;
      char v10 = 0;
      uint64_t v11 = 0;
      id v5 = v4;
      int v6 = static UIImage.symbolImage(for:)((uint64_t)v7);

      swift_bridgeObjectRelease();
    }
    else
    {
      int v6 = (void *)specialized static UIImage.image(named:)(0);
    }
    objc_msgSend(v3, sel_setImage_forState_, v6, 0);
  }
}

uint64_t ParticipantInfoView.recordingLocalVideo.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t ParticipantInfoView.recordingLocalVideo.setter(char a1)
{
  return ParticipantInfoView.isExpanded.setter(a1, &OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_recordingLocalVideo, (uint64_t (*)(uint64_t))ParticipantInfoView.recordingLocalVideo.didset);
}

uint64_t ParticipantInfoView.isExpanded.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  int v6 = (unsigned char *)(v3 + *a2);
  uint64_t v7 = swift_beginAccess();
  *int v6 = a1;
  return a3(v7);
}

uint64_t (*ParticipantInfoView.recordingLocalVideo.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return ParticipantInfoView.recordingLocalVideo.modify;
}

uint64_t ParticipantInfoView.recordingLocalVideo.modify(uint64_t a1, char a2)
{
  return ParticipantInfoView.isExpanded.modify(a1, a2, (uint64_t (*)(uint64_t))ParticipantInfoView.recordingLocalVideo.didset);
}

uint64_t ParticipantInfoView.isExpanded.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t key path getter for ParticipantInfoView.delegate : ParticipantInfoView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ParticipantInfoView.delegate : ParticipantInfoView(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x108);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t ParticipantInfoView.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t ParticipantInfoView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ParticipantInfoView.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t ParticipantInfoView.localRecordingLayout.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 568))()) {
    return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_localParticipant);
  }
  else {
    return 0;
  }
}

char *ParticipantInfoView.__allocating_init(localParticipant:)(char a1)
{
  id v3 = objc_allocWithZone(v1);
  return ParticipantInfoView.init(localParticipant:)(a1);
}

char *ParticipantInfoView.init(localParticipant:)(char a1)
{
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_gradientView;
  id v4 = objc_allocWithZone((Class)type metadata accessor for GradientView());
  uint64_t v5 = v1;
  *(void *)&v1[v3] = objc_msgSend(v4, sel_init);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel;
  type metadata accessor for ParticipantViewLabelContainerView();
  *(void *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14D0]), sel_init);
  uint64_t v9 = (void *)specialized static UIImage.image(named:)(0);
  objc_msgSend(v8, sel_setImage_forState_, v9, 0);

  *(void *)&v5[v7] = v8;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_expandButton;
  type metadata accessor for ParticipantViewButton();
  *(void *)&v5[v10] = OUTLINED_FUNCTION_7_63((uint64_t)&type metadata for ImageNames.ParticipantView, v51, (uint64_t)v52.receiver, (uint64_t)v52.super_class, v53[0], v53[1], v53[2], (uint64_t)v54, v55);
  v5[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isExpanded] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_customCornerRadius] = 0;
  v5[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isMomentsAvailable] = 0;
  v5[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_recordingLocalVideo] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_localParticipant] = a1;

  uint64_t v11 = (objc_class *)type metadata accessor for ParticipantInfoView();
  v52.receiver = v5;
  v52.super_class = v11;
  uint64_t v12 = (char *)objc_msgSendSuper2(&v52, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_gradientView;
  uint64_t v14 = *(void **)&v12[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_gradientView];
  uint64_t v15 = one-time initialization token for bottomGradient;
  uint64_t v16 = v12;
  id v17 = v14;
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  GradientView.colors.setter(v18);

  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton;
  uint64_t v54 = v11;
  v53[0] = v16;
  uint64_t v20 = v16;
  UIButton.add(target:action:)((uint64_t)v53, (uint64_t)sel_didTapShutterButton);
  outlined destroy of Any?((uint64_t)v53);
  uint64_t v21 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_expandButton;
  uint64_t v22 = one-time initialization token for buttonIcon;
  id v23 = *(id *)&v20[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_expandButton];
  if (v22 != -1) {
    swift_once();
  }
  objc_msgSend(v23, sel_setTintColor_, static Colors.ParticipantViews.buttonIcon);

  objc_msgSend(*(id *)&v20[v21], sel_addTarget_action_forControlEvents_, v20, sel_didTapExpandButton, 1);
  uint64_t v24 = one-time initialization token for bottomBarText;
  id v25 = *(id *)&v16[v19];
  if (v24 != -1) {
    swift_once();
  }
  objc_msgSend(v25, sel_setTintColor_, static Colors.ParticipantViews.bottomBarText);

  uint64_t v26 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel;
  uint64_t v27 = *(char **)&v20[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel];
  objc_msgSend(*(id *)&v27[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label], sel_setTextColor_, static Colors.ParticipantViews.bottomBarText);
  uint64_t v28 = v27;
  ParticipantViewLabelContainerView.isCentered.setter(0);

  id v29 = *(id *)&v20[v26];
  id v30 = objc_msgSend(v29, sel_layer);
  closure #1 in ParticipantInfoView.init(localParticipant:)(v30);

  id v31 = *(id *)&v12[v13];
  id v32 = objc_msgSend(v31, sel_layer);
  objc_msgSend(v32, sel_setMaskedCorners_, 12);
  objc_msgSend(v32, sel_setMasksToBounds_, 1);

  uint64_t v33 = *(void **)&v16[v19];
  uint64_t v34 = *(void **)&v20[v21];
  uint64_t v35 = *(void **)&v20[v26];
  id v36 = *(id *)&v12[v13];
  id v37 = v33;
  id v38 = v34;
  id v39 = v35;
  uint64_t v40 = (void *)OUTLINED_FUNCTION_6_68();
  objc_msgSend(v40, v41, v36);
  int v42 = (void *)OUTLINED_FUNCTION_6_68();
  objc_msgSend(v42, v43, v37);
  uint64_t v44 = (void *)OUTLINED_FUNCTION_6_68();
  objc_msgSend(v44, v45, v38);
  uint64_t v46 = (void *)OUTLINED_FUNCTION_6_68();
  objc_msgSend(v46, v47, v39);

  uint64_t v48 = one-time initialization token for bottomBarRegular;
  id v49 = objc_retain(*(id *)(*(void *)&v20[v26]
                          + OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label));
  if (v48 != -1) {
    swift_once();
  }
  objc_msgSend(v49, sel_setFont_, static Fonts.ParticipantViews.bottomBarRegular);

  return v20;
}

id closure #1 in ParticipantInfoView.init(localParticipant:)(void *a1)
{
  if (one-time initialization token for bottomShadow != -1) {
    swift_once();
  }
  id v2 = objc_msgSend((id)static Colors.ParticipantViews.bottomShadow, sel_CGColor);
  objc_msgSend(a1, sel_setShadowColor_, v2);

  LODWORD(v3) = 0.5;
  objc_msgSend(a1, sel_setShadowOpacity_, v3);
  objc_msgSend(a1, sel_setShadowOffset_, 0.0, -2.0);
  return objc_msgSend(a1, sel_setShadowRadius_, 5.0);
}

id ParticipantInfoView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantInfoView.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_gradientView;
  *(void *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GradientView()), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel;
  type metadata accessor for ParticipantViewLabelContainerView();
  *(void *)&v1[v3] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton;
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14D0]), sel_init);
  uint64_t v6 = (void *)specialized static UIImage.image(named:)(0);
  objc_msgSend(v5, sel_setImage_forState_, v6, 0);

  *(void *)&v1[v4] = v5;
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_expandButton;
  type metadata accessor for ParticipantViewButton();
  *(void *)&v1[v7] = OUTLINED_FUNCTION_7_63((uint64_t)&type metadata for ImageNames.ParticipantView, v8, v9, v10, v11, v12, v13, v14, v15);
  v1[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isExpanded] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_customCornerRadius] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_isMomentsAvailable] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_recordingLocalVideo] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ParticipantInfoView.configure(with:isMomentsAvailable:shouldHideShutterButton:)(Swift::String with, Swift::Bool isMomentsAvailable, Swift::Bool shouldHideShutterButton)
{
  uint64_t v4 = v3;
  object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v14 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v14, *MEMORY[0x1E4FBCBE8], v9);
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v14, v9);
  if (v15)
  {
    id v16 = objc_retain(*(id *)(*(void *)((char *)v4 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel)
                            + OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label));
    outlined bridged method (mbgnn) of @objc UILabel.text.setter(countAndFlagsBits, (uint64_t)object, v16);

    id v17 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(Swift::Bool))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x130))(shouldHideShutterButton);
    (*(void (**)(Swift::Bool))((*v17 & *v4) + 0xD8))(isMomentsAvailable);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ParticipantInfoView.configure(shouldHideShutterButton:)(Swift::Bool shouldHideShutterButton)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FBCBE8], v4);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v4);
  if (v10)
  {
    double v11 = 1.0;
    if (shouldHideShutterButton) {
      double v11 = 0.0;
    }
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton), sel_setAlpha_, v11);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ParticipantInfoView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for ParticipantInfoView();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  ParticipantInfoView._layout()();
}

void ParticipantInfoView._layout()()
{
  objc_super v1 = v0;
  objc_msgSend(v0, sel_bounds);
  if (CGRectIsInfinite(v40) || (objc_msgSend(v0, sel_bounds), CGRectIsEmpty(v41)))
  {
    OUTLINED_FUNCTION_9_52();
  }
  else
  {
    objc_msgSend(v0, sel_bounds);
    CGFloat v3 = v2;
    CGFloat v5 = v4;
    uint64_t v6 = *(char **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_nameLabel);
    id v7 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC15ConversationKit33ParticipantViewLabelContainerView_label], sel_font);
    if (v7)
    {
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_lineHeight);
      double v10 = v9;

      double v37 = ceil(v10);
      v42.origin.CGFloat x = OUTLINED_FUNCTION_4_75();
      CGFloat v11 = CGRectGetMaxX(v42) + -10.0 + -32.0;
      v43.origin.CGFloat x = OUTLINED_FUNCTION_4_75();
      double v12 = CGRectGetMinY(v43) + 10.0;
      double v13 = OUTLINED_FUNCTION_5_75();
      double v38 = v3;
      double v14 = v5;
      double v20 = closure #2 in ParticipantInfoView._layout()(v13, v15, v16, v17, v18, v19, v3, v5);
      double v22 = v21;
      double v24 = v23;
      CGFloat v26 = v25;
      double v39 = v11;
      v44.origin.CGFloat x = OUTLINED_FUNCTION_5_75();
      double MinX = CGRectGetMinX(v44);
      if ((*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA0))(v28, v29))
      {
        v45.origin.CGFloat x = v20;
        v45.origin.CGFloat y = v22;
        v45.size.CGFloat width = v24;
        v45.size.CGFloat height = v26;
        double MinX = CGRectGetMinX(v45);
      }
      v46.size.CGFloat height = v26;
      double v36 = v26;
      v46.origin.CGFloat x = v20;
      v46.origin.CGFloat y = v22;
      v46.size.CGFloat width = v24;
      CGFloat v30 = CGRectGetMidY(v46) + v37 * -0.5;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      double v31 = round(v30 * static UIView.screenScale.getter());
      double v32 = v31 / static UIView.screenScale.getter();
      objc_msgSend(v1, sel_bounds, 0x4040000000000000, 0x4024000000000000);
      objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_gradientView), sel_setFrame_, 0.0, 0.0, v38, v14);
      objc_msgSend(v6, sel_setFrame_, 10.0, v32, v38 + -10.0 + -10.0 + MinX - v38, v37);
      objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_shutterButton), sel_setFrame_, v20, v22, v24, v36);
      objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit19ParticipantInfoView_expandButton), sel_setFrame_, v39, v12, 32.0, 32.0);
      objc_msgSend(v6, sel_setHidden_, ParticipantInfoView.localRecordingLayout.getter() & 1);
      ParticipantInfoView.localRecordingLayout.getter();
      OUTLINED_FUNCTION_9_52();
      [v33 v34];
    }
    else
    {
      __break(1u);
    }
  }
}

double closure #2 in ParticipantInfoView._layout()(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  if (ParticipantInfoView.localRecordingLayout.getter())
  {
    v14.origin.CGFloat x = a5;
    v14.origin.CGFloat y = a6;
    v14.size.CGFloat width = a7;
    v14.size.CGFloat height = a8;
    CGRectGetMidY(v14);
  }
  else
  {
    v15.origin.CGFloat x = a5;
    v15.origin.CGFloat y = a6;
    v15.size.CGFloat width = a7;
    v15.size.CGFloat height = a8;
    CGRectGetMaxY(v15);
  }
  return MinX;
}

uint64_t ParticipantInfoView.didTapExpandButton()()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ParticipantInfoView.didTapShutterButton()()
{
  OUTLINED_FUNCTION_10_1();
  uint64_t result = (*(uint64_t (**)(void))(v0 + 256))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    OUTLINED_FUNCTION_10_1();
    char v6 = (*(uint64_t (**)(void))(v5 + 208))();
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 16))(v6 & 1, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

id ParticipantInfoView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantInfoView.init(frame:)()
{
}

id ParticipantInfoView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ParticipantInfoView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ParticipantInfoView()
{
  return self;
}

uint64_t dispatch thunk of ParticipantInfoViewDelegate.participantViewDidTapToggleFocus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantInfoViewDelegate.participantViewDidTapShutter(isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for ParticipantInfoView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantInfoView);
}

uint64_t dispatch thunk of ParticipantInfoView.isExpanded.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ParticipantInfoView.isExpanded.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ParticipantInfoView.isExpanded.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ParticipantInfoView.customCornerRadius.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ParticipantInfoView.customCornerRadius.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ParticipantInfoView.customCornerRadius.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ParticipantInfoView.isMomentsAvailable.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ParticipantInfoView.isMomentsAvailable.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ParticipantInfoView.isMomentsAvailable.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ParticipantInfoView.recordingLocalVideo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ParticipantInfoView.recordingLocalVideo.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ParticipantInfoView.recordingLocalVideo.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ParticipantInfoView.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ParticipantInfoView.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ParticipantInfoView.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ParticipantInfoView.__allocating_init(localParticipant:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of ParticipantInfoView.configure(with:isMomentsAvailable:shouldHideShutterButton:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ParticipantInfoView.configure(shouldHideShutterButton:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

id specialized PictureInPictureWrapperViewController.init(wrappedViewController:)(uint64_t a1)
{
  objc_super v2 = &v1[direct field offset for PictureInPictureWrapperViewController.touchInsets];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
  *(_OWORD *)objc_super v2 = *MEMORY[0x1E4FB2848];
  *((_OWORD *)v2 + 1) = v3;
  *(void *)&v1[direct field offset for PictureInPictureWrapperViewController.wrappedViewController] = a1;
  v5.receiver = v1;
  v5.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PictureInPictureWrapperViewController<SharedContentViewController>);
  return objc_msgSendSuper2(&v5, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t ScreenSharingSpectatorTip.title.getter()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_1_91(27, 0x80000001C37A1D50);

  String.init(format:_:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

uint64_t ScreenSharingSpectatorTip.message.getter()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_1_91(39, 0x80000001C37A1D70);

  String.init(format:_:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  return Text.init<A>(_:)();
}

uint64_t ScreenSharingSpectatorTip.image.getter()
{
  return Image.init(systemName:)();
}

uint64_t one-time initialization function for $isScreenSharingInteractive()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_allocate_value_buffer(v0, static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  __swift_project_value_buffer(v0, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  return Tips.Parameter.init<A>(_:_:_:_:)();
}

uint64_t ScreenSharingSpectatorTip.$isScreenSharingInteractive.unsafeMutableAddressor()
{
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  return __swift_project_value_buffer(v0, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
}

uint64_t static ScreenSharingSpectatorTip.$isScreenSharingInteractive.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  OUTLINED_FUNCTION_2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static ScreenSharingSpectatorTip.$isScreenSharingInteractive.setter(uint64_t a1)
{
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  OUTLINED_FUNCTION_6_1();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static ScreenSharingSpectatorTip.$isScreenSharingInteractive.modify())()
{
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  OUTLINED_FUNCTION_6_1();
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t static ScreenSharingSpectatorTip.isScreenSharingInteractive.getter()
{
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.getter();
  swift_endAccess();
  return v2;
}

uint64_t static ScreenSharingSpectatorTip.isScreenSharingInteractive.setter()
{
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  __swift_project_value_buffer(v0, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  OUTLINED_FUNCTION_6_1();
  Tips.Parameter.wrappedValue.setter();
  return swift_endAccess();
}

void (*static ScreenSharingSpectatorTip.isScreenSharingInteractive.modify(void *a1))(uint64_t a1)
{
  unsigned __int8 v2 = malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  v2[3] = v3;
  v2[4] = __swift_project_value_buffer(v3, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  swift_beginAccess();
  Tips.Parameter.wrappedValue.getter();
  char v4 = *((unsigned char *)v2 + 41);
  swift_endAccess();
  *((unsigned char *)v2 + 40) = v4;
  return static ScreenSharingSpectatorTip.isScreenSharingInteractive.modify;
}

void static ScreenSharingSpectatorTip.isScreenSharingInteractive.modify(uint64_t a1)
{
  objc_super v1 = *(void **)a1;
  *(unsigned char *)(*(void *)a1 + 41) = *(unsigned char *)(*(void *)a1 + 40);
  OUTLINED_FUNCTION_6_1();
  Tips.Parameter.wrappedValue.setter();
  swift_endAccess();
  free(v1);
}

uint64_t ScreenSharingSpectatorTip.rules.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Parameter<Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  objc_super v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Tips.Rule();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for $isScreenSharingInteractive != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v0, (uint64_t)static ScreenSharingSpectatorTip.$isScreenSharingInteractive);
  OUTLINED_FUNCTION_2();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v7, v0);
  Tips.Rule.init<A>(_:_:)();
  static Tips.RuleBuilder.buildExpression(_:)();
  OUTLINED_FUNCTION_6_69();
  v8();
  uint64_t v9 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t closure #2 in ScreenSharingSpectatorTip.rules.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  objc_super v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11[15] = 1;
  static PredicateExpressions.build_Arg<A>(_:)();
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
  a1[4] = lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>();
  __swift_allocate_boxed_opaque_existential_1(a1);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance PredicateExpressions.Value<A>, &demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for Tip.title.getter in conformance ScreenSharingSpectatorTip()
{
  return ScreenSharingSpectatorTip.title.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance ScreenSharingSpectatorTip@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip();
  uint64_t result = MEMORY[0x1C8770670](a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t ScreenSharingSpectatorView.model.getter()
{
  return swift_retain();
}

uint64_t ScreenSharingSpectatorView.content.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t property wrapper backing initializer of ScreenSharingSpectatorView.isCapturingTouch()
{
  State.init(wrappedValue:)();
  return v1;
}

uint64_t ScreenSharingSpectatorView.isCapturingTouch.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for ScreenSharingSpectatorView.isCapturingTouch : <A>ScreenSharingSpectatorView<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ScreenSharingSpectatorView.isCapturingTouch.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorView.isCapturingTouch : <A>ScreenSharingSpectatorView<A>()
{
  return ScreenSharingSpectatorView.isCapturingTouch.setter();
}

uint64_t ScreenSharingSpectatorView.isCapturingTouch.setter()
{
  return State.wrappedValue.setter();
}

void (*ScreenSharingSpectatorView.isCapturingTouch.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = *(_OWORD *)(v1 + 24);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v3 + 24, (uint64_t)(v3 + 2), &demangling cache variable for type metadata for AnyLocation<Bool>?);
  _OWORD *v3 = v3[1];
  outlined retain of AnyLocation<String>?((uint64_t)(v3 + 2));
  *((void *)v3 + 5) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return ScreenSharingSpectatorView.isCapturingTouch.modify;
}

void ScreenSharingSpectatorView.isCapturingTouch.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  uint64_t v2 = (_OWORD *)(*(void *)a1 + 16);
  char v3 = *(unsigned char *)(*(void *)a1 + 49);
  *(_OWORD *)uint64_t v1 = *v2;
  v1[48] = v3;
  State.wrappedValue.setter();
  outlined release of State<Bool>((uint64_t)v2);
  free(v1);
}

uint64_t ScreenSharingSpectatorView.$isCapturingTouch.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  return v1;
}

uint64_t (*ScreenSharingSpectatorView.spectatorTip.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t specialized ScreenSharingSpectatorView.init(model:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  State.init(wrappedValue:)();
  swift_retain();
  swift_retain();
  static Tips.configure(_:)();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(unsigned char *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v10;
  return result;
}

uint64_t ScreenSharingSpectatorView.init(model:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v8 = property wrapper backing initializer of ScreenSharingSpectatorView.isCapturingTouch();
  uint64_t v10 = v9;
  swift_retain();
  swift_retain();
  static Tips.configure(_:)();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(unsigned char *)(a4 + 24) = v8 & 1;
  *(void *)(a4 + 32) = v10;
  return result;
}

uint64_t ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v17 = *(void *)(a1 + 16);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?>);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _AnimationModifier<Bool>);
  type metadata accessor for ModifiedContent();
  v15[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>);
  type metadata accessor for ScreenSharingSpectatorToolbar();
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v39 = v16;
  unint64_t v40 = lazy protocol witness table accessor for type BezelEffectModifier and conformance BezelEffectModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BezelShieldMaterial> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>);
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>);
  uint64_t v33 = swift_getWitnessTable();
  unint64_t v34 = lazy protocol witness table accessor for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?>);
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v30 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<Bool>);
  swift_getWitnessTable();
  uint64_t v27 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type TransitioningText<FadeOutFadeInTransition> and conformance TransitioningText<A>, &demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>);
  uint64_t v28 = lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorToolbar);
  uint64_t v23 = type metadata accessor for ScreenSharingContentView();
  uint64_t v24 = type metadata accessor for ScreenSharingSpectatorViewModel();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  OUTLINED_FUNCTION_10_48();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for ZStack();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v15 - v10;
  static Alignment.top.getter();
  uint64_t v20 = v17;
  uint64_t v21 = v16;
  uint64_t v22 = v18;
  ZStack.init(alignment:content:)();
  uint64_t v12 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9, v3, v12);
  double v13 = *(void (**)(void))(v5 + 8);
  OUTLINED_FUNCTION_6_69();
  v13();
  static ViewBuilder.buildExpression<A>(_:)(v11, v3, v12);
  OUTLINED_FUNCTION_6_69();
  return ((uint64_t (*)(void))v13)();
}

uint64_t closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v80 = a3;
  uint64_t OpaqueTypeConformance2 = a2;
  uint64_t v81 = a1;
  uint64_t v91 = a4;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TipView<ScreenSharingSpectatorTip>);
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  Swift::Int v83 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>)
      - 8;
  MEMORY[0x1F4188790](v86);
  Swift::Bool v84 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  uint64_t v7 = MEMORY[0x1F4188790](v88);
  uint64_t v85 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v87 = (uint64_t)&v65 - v9;
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?>);
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _AnimationModifier<Bool>);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>);
  uint64_t v73 = v11;
  Swift::Int v92 = (void (*)(void, void))type metadata accessor for ScreenSharingSpectatorToolbar();
  unint64_t v12 = lazy protocol witness table accessor for type BezelEffectModifier and conformance BezelEffectModifier();
  uint64_t v112 = a3;
  unint64_t v113 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BezelShieldMaterial> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>);
  uint64_t v110 = WitnessTable;
  uint64_t v111 = v14;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>);
  uint64_t v108 = v15;
  uint64_t v109 = v16;
  uint64_t v17 = swift_getWitnessTable();
  unint64_t v18 = lazy protocol witness table accessor for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield();
  uint64_t v106 = v17;
  unint64_t v107 = v18;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?>);
  uint64_t v104 = v19;
  uint64_t v105 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<Bool>);
  uint64_t v102 = v21;
  uint64_t v103 = v22;
  uint64_t v77 = v10;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v70 = v23;
  uint64_t v24 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type TransitioningText<FadeOutFadeInTransition> and conformance TransitioningText<A>, &demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>);
  uint64_t v69 = v24;
  uint64_t v68 = lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorToolbar);
  uint64_t v96 = v10;
  uint64_t v97 = v11;
  uint64_t v98 = v92;
  uint64_t v99 = v23;
  uint64_t v100 = v24;
  uint64_t v101 = v68;
  uint64_t v25 = type metadata accessor for ScreenSharingContentView();
  uint64_t v78 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v65 - v26;
  uint64_t v28 = type metadata accessor for ScreenSharingSpectatorViewModel();
  uint64_t v67 = v28;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v72 = v29;
  uint64_t v71 = lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t v96 = v25;
  uint64_t v97 = v28;
  uint64_t v98 = (void (*)(void, void))v29;
  uint64_t v99 = v71;
  uint64_t v74 = MEMORY[0x1E4F3E3E8];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v76 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v79 = (char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  unint64_t v34 = (char *)&v65 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v66 = (char *)&v65 - v36;
  uint64_t v37 = v81;
  char v38 = (*(uint64_t (**)(uint64_t))(**(void **)v81 + 264))(v35);
  long long v114 = *(_OWORD *)(v37 + 24);
  uint64_t v39 = swift_allocObject();
  uint64_t v40 = OpaqueTypeConformance2;
  uint64_t v41 = v80;
  *(void *)(v39 + 16) = OpaqueTypeConformance2;
  *(void *)(v39 + 24) = v41;
  long long v42 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)v37;
  *(_OWORD *)(v39 + 48) = v42;
  *(void *)(v39 + 64) = *(void *)(v37 + 32);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v40;
  *(void *)(v43 + 24) = v41;
  long long v44 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)(v43 + 32) = *(_OWORD *)v37;
  *(_OWORD *)(v43 + 48) = v44;
  *(void *)(v43 + 64) = *(void *)(v37 + 32);
  ScreenSharingContentView.init(contentMode:content:title:toolbar:)(v38 & 1, (uint64_t)partial apply for closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter, v39, (uint64_t)partial apply for closure #2 in closure #1 in ScreenSharingSpectatorView.body.getter, v43, (uint64_t)closure #3 in closure #1 in ScreenSharingSpectatorView.body.getter, 0, (uint64_t)v27);
  swift_retain();
  swift_retain();
  outlined retain of State<Bool>((uint64_t)&v114);
  swift_retain();
  swift_retain();
  outlined retain of State<Bool>((uint64_t)&v114);
  uint64_t v45 = swift_checkMetadataState();
  CGRect v46 = (void (*)(void, void))v72;
  uint64_t v47 = v71;
  View.environment<A>(_:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v27, v25);
  uint64_t v96 = v25;
  uint64_t v97 = v45;
  uint64_t v98 = v46;
  uint64_t v99 = v47;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v48 = v66;
  uint64_t v49 = OpaqueTypeMetadata2;
  static ViewBuilder.buildExpression<A>(_:)(v34, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  uint64_t v50 = v76;
  Swift::Int v92 = *(void (**)(void, void))(v76 + 8);
  v92(v34, v49);
  lazy protocol witness table accessor for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip();
  uint64_t v51 = v83;
  TipView.init(_:arrowEdge:action:)();
  uint64_t v52 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = v89;
  uint64_t v55 = (uint64_t)v84;
  uint64_t v56 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v84, v51, v90);
  uint64_t v57 = (uint64_t *)(v55 + *(int *)(v86 + 44));
  *uint64_t v57 = KeyPath;
  v57[1] = v52;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v56);
  LOBYTE(v52) = static Edge.Set.all.getter();
  uint64_t v58 = v85;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v55, v85, &demangling cache variable for type metadata for ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v59 = v88;
  uint64_t v60 = v58 + *(int *)(v88 + 36);
  *(unsigned char *)uint64_t v60 = v52;
  *(_OWORD *)(v60 + 8) = 0u;
  *(_OWORD *)(v60 + 24) = 0u;
  *(unsigned char *)(v60 + 40) = 1;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v55, &demangling cache variable for type metadata for ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v61 = v87;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v58, v87, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  uint64_t v62 = v79;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v79, v48, v49);
  uint64_t v96 = (uint64_t)v62;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v61, v58, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  uint64_t v97 = v58;
  v95[0] = v49;
  v95[1] = v59;
  uint64_t v93 = OpaqueTypeConformance2;
  unint64_t v94 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v96, 2, (uint64_t)v95);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v61, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  id v63 = (uint64_t (*)(char *, uint64_t))v92;
  v92(v48, v49);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v58, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  return v63(v62, v49);
}

uint64_t closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t (**a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = a4;
  uint64_t v89 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v73 - v10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v74 = (char *)&v73 - v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v78 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  Swift::Int v92 = (char *)&v73 - v15;
  uint64_t v79 = v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v77 = (char *)&v73 - v18;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?>);
  uint64_t v80 = v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v85 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v82 = (char *)&v73 - v20;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _AnimationModifier<Bool>);
  uint64_t v86 = v19;
  uint64_t v90 = type metadata accessor for ModifiedContent();
  uint64_t v88 = *(void *)(v90 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v90);
  Swift::Int v83 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  Swift::Bool v84 = (char *)&v73 - v24;
  uint64_t v25 = a1[1](v23);
  uint64_t v26 = (uint64_t)*a1;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 840))(v25);
  double v28 = (*(double (**)(void))(*(void *)v26 + 816))();
  uint64_t v30 = v29;
  double v31 = (*(double (**)(void))(*(void *)v26 + 832))();
  *(double *)&long long v106 = v28;
  *((void *)&v106 + 1) = v30;
  double v107 = v28;
  uint64_t v108 = v30;
  char v109 = 0;
  double v110 = v31;
  View.bezelEffect(_:metrics:)(v27, &v106, a2);
  uint64_t v32 = v74;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v89 + 8);
  uint64_t v87 = a2;
  uint64_t v34 = v33(v8, a2);
  (*(void (**)(uint64_t))(*(void *)v26 + 848))(v34);
  unint64_t v35 = lazy protocol witness table accessor for type BezelEffectModifier and conformance BezelEffectModifier();
  uint64_t v89 = a3;
  uint64_t v104 = a3;
  unint64_t v105 = v35;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.bezelShieldMaterial(_:)();
  uint64_t v37 = v11;
  char v38 = a1;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v9);
  if (ScreenSharingSpectatorView.isCapturingTouch.getter()) {
    static Color.red.getter();
  }
  else {
    static Color.blue.getter();
  }
  uint64_t v39 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BezelShieldMaterial> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<BezelShieldMaterial>);
  uint64_t v102 = WitnessTable;
  uint64_t v103 = v39;
  uint64_t v40 = swift_getWitnessTable();
  View.bezelOutlineColor(_:)();
  swift_release();
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v32, v12);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v26 + 264))(v41))
  {
    char v42 = 0;
  }
  else
  {
    (*(void (**)(char *__return_ptr))(*(void *)v26 + 784))(&v101);
    char v42 = v101 == 1;
  }
  uint64_t v43 = ScreenSharingSpectatorView.$isCapturingTouch.getter();
  uint64_t v45 = v44;
  char v47 = v46;
  uint64_t v48 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color>);
  uint64_t v99 = v40;
  uint64_t v100 = v48;
  uint64_t v49 = v79;
  uint64_t v50 = swift_getWitnessTable();
  char v51 = v47 & 1;
  uint64_t v52 = v77;
  uint64_t v53 = v92;
  View.screenSharingTouchShield(isActive:isCapturingTouch:)(v42, v43, v45, v51, v49, v50);
  swift_release();
  swift_release();
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v53, v49);
  MEMORY[0x1F4188790](v54);
  uint64_t v55 = v89;
  *(&v73 - 4) = v87;
  *(&v73 - 3) = v55;
  *(&v73 - 2) = (uint64_t)v38;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?);
  unint64_t v57 = lazy protocol witness table accessor for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield();
  uint64_t v97 = v50;
  unint64_t v98 = v57;
  uint64_t v58 = v80;
  uint64_t v59 = swift_getWitnessTable();
  unint64_t v60 = lazy protocol witness table accessor for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?();
  default argument 6 of View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v58, v56, v59, v60);
  uint64_t v61 = v82;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v52, v58);
  uint64_t v62 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  char v101 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 856))(v62) & 1;
  uint64_t v63 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?>);
  uint64_t v95 = v59;
  uint64_t v96 = v63;
  uint64_t v64 = v86;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = v83;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v61, v64);
  uint64_t v67 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<Bool>);
  uint64_t v93 = v65;
  uint64_t v94 = v67;
  uint64_t v68 = v90;
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v70 = v84;
  static ViewBuilder.buildExpression<A>(_:)(v66, v68, v69);
  uint64_t v71 = *(void (**)(char *, uint64_t))(v88 + 8);
  v71(v66, v68);
  static ViewBuilder.buildExpression<A>(_:)(v70, v68, v69);
  return ((uint64_t (*)(char *, uint64_t))v71)(v70, v68);
}

uint64_t closure #1 in closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(**(void **)a1 + 856))(v11))
  {
    *uint64_t v7 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = (char *)v7 + *(int *)(v4 + 20);
    type metadata accessor for ScreenSharingSpectatorViewModel();
    lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
    *(void *)uint64_t v14 = Environment.init<A>(_:)();
    v14[8] = v15 & 1;
    outlined init with take of ScreenSharingSpectatorModalOverlay((uint64_t)v7, (uint64_t)v9);
    lazy protocol witness table accessor for type ModalOverlayTransition and conformance ModalOverlayTransition();
    uint64_t v16 = AnyTransition.init<A>(_:)();
    outlined init with copy of ScreenSharingSpectatorModalOverlay((uint64_t)v9, (uint64_t)v13);
    *(void *)&v13[*(int *)(v10 + 36)] = v16;
    outlined destroy of ScreenSharingSpectatorModalOverlay((uint64_t)v9);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v13, a2, &demangling cache variable for type metadata for ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>);
    return __swift_storeEnumTagSinglePayload(a2, 0, 1, v10);
  }
  else
  {
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v10);
  }
}

uint64_t closure #2 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 792))();
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t *)((char *)a2
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransitioningText<FadeOutFadeInTransition>)
                          + 40));
  *uint64_t v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a2 = v3;
  a2[1] = v5;
  return result;
}

uint64_t closure #3 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for ScreenSharingSpectatorToolbar() + 20);
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t result = Environment.init<A>(_:)();
  *(void *)uint64_t v2 = result;
  v2[8] = v4 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ScreenSharingSpectatorView<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ScreenSharingSpectatorView.body.getter(a1, a2);
}

uint64_t ScreenSharingSpectatorViewController.screenInfoDidChangeSubject.getter()
{
  return swift_retain();
}

uint64_t key path getter for ScreenSharingSpectatorViewController.isPipped : ScreenSharingSpectatorViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewController.isPipped : ScreenSharingSpectatorViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x98))(*a1);
}

uint64_t ScreenSharingSpectatorViewController.isPipped.getter()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 312))() & 1;
}

uint64_t ScreenSharingSpectatorViewController.isPipped.setter()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t (*ScreenSharingSpectatorViewController.isPipped.modify(uint64_t a1))()
{
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_model);
  OUTLINED_FUNCTION_50();
  *(unsigned char *)(a1 + 8) = (*(uint64_t (**)(void))(v3 + 312))() & 1;
  return ScreenSharingSpectatorViewController.isPipped.modify;
}

uint64_t ScreenSharingSpectatorViewController.isPipped.modify()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter()
{
  type metadata accessor for UIInterfaceOrientationMask(0);
  withObservationTracking<A>(_:onChange:)();
  return v1;
}

unint64_t closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1
                                                                       + OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_model)
                                                         + 648))(&v6);
  unint64_t v3 = v6;
  unint64_t result = outlined consume of RemoteControlState(v6);
  uint64_t v5 = v3 >> 61;
  if (v3 >> 61 != 2)
  {
    unint64_t result = static Platform.current.getter();
    uint64_t v5 = 26;
    if (result == 1) {
      uint64_t v5 = 30;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t (*implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter())()
{
  return partial apply for closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter;
}

uint64_t closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a1;
  v4[6] = a4;
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter, v6, v5);
}

uint64_t closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1 + 16);
  unint64_t v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, sel_setNeedsUpdateOfSupportedInterfaceOrientations);
  }
  OUTLINED_FUNCTION_13_44(v3 == 0);
  return v4();
}

id ScreenSharingSpectatorViewController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *ScreenSharingSpectatorViewController.init()()
{
  id v1 = self;
  uint64_t v2 = v0;
  unint64_t result = (char *)objc_msgSend(v1, sel_sharedInstance);
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_model;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v6 = one-time initialization token for sharedMonitor;
    uint64_t v7 = static ScreenSharingInteractionController.shared;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = static ScreenSharingStateMonitor.sharedMonitor;
    type metadata accessor for ScreenSharingSpectatorViewModel();
    uint64_t v9 = OUTLINED_FUNCTION_8_9();
    *(void *)&v2[v5] = specialized ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v4, v7, v8, v9);
    uint64_t v10 = OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_screenInfoDidChangeSubject;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<()?, Never>);
    OUTLINED_FUNCTION_8_9();
    *(void *)&v2[v10] = CurrentValueSubject.init(_:)();
    id v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SharedContentViewController()), sel_init);
    id v12 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PictureInPictureWrapperViewController<SharedContentViewController>));
    *(void *)&v2[OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController] = specialized PictureInPictureWrapperViewController.init(wrappedViewController:)((uint64_t)v11);

    v29.receiver = v2;
    v29.super_class = (Class)type metadata accessor for ScreenSharingSpectatorViewController();
    uint64_t v13 = (char *)objc_msgSendSuper2(&v29, sel_initWithNibName_bundle_, 0, 0);
    uint64_t v14 = OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController;
    char v15 = *(void **)(*(void *)&v13[OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController]
                     + direct field offset for PictureInPictureWrapperViewController.wrappedViewController);
    uint64_t v16 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v17 = *(void (**)(char *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *v15) + 0xB8);
    uint64_t v18 = v13;
    uint64_t v19 = v15;
    v17(v13, &protocol witness table for ScreenSharingSpectatorViewController);

    uint64_t v20 = *(void **)&v13[v14];
    OUTLINED_FUNCTION_2();
    double v21 = *(double *)&static Layout.ParticipantViews.screenSharingInteractionTouchInsets;
    double v22 = unk_1EA355680;
    double v23 = *(double *)&qword_1EA355688;
    double v24 = unk_1EA355690;
    uint64_t v25 = *(void (**)(double, double, double, double))((*v16 & *v20) + 0x70);
    uint64_t v26 = v20;
    v25(v21, v22, v23, v24);

    uint64_t v27 = *(void (**)(void))((*v16 & *(void *)static ScreenSharingStateMonitor.sharedMonitor) + 0x140);
    id v28 = objc_retain(*(id *)(*(void *)&v13[v14]
                            + direct field offset for PictureInPictureWrapperViewController.wrappedViewController));
    v27();

    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id ScreenSharingSpectatorViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ScreenSharingSpectatorViewController.init(coder:)()
{
  id v1 = v0;
  id v2 = objc_msgSend(self, sel_sharedInstance);
  if (!v2) {
    __break(1u);
  }
  uint64_t v9 = (uint64_t)v2;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_model;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = one-time initialization token for sharedMonitor;
  uint64_t v5 = static ScreenSharingInteractionController.shared;
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = static ScreenSharingStateMonitor.sharedMonitor;
  type metadata accessor for ScreenSharingSpectatorViewModel();
  uint64_t v7 = OUTLINED_FUNCTION_8_9();
  *(void *)&v1[v3] = specialized ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v9, v5, v6, v7);
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_screenInfoDidChangeSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<()?, Never>);
  OUTLINED_FUNCTION_8_9();
  *(void *)&v1[v8] = CurrentValueSubject.init(_:)();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ScreenSharingSpectatorViewController.loadView()()
{
  id v1 = v0;
  v55.receiver = v0;
  v55.super_class = (Class)type metadata accessor for ScreenSharingSpectatorViewController();
  objc_msgSendSuper2(&v55, sel_loadView);
  objc_msgSend(v0, sel_setOverrideUserInterfaceStyle_, 2);
  id v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v3 = v2;
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_blackColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v5);

  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_model];
  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  id v9 = v7;
  specialized ScreenSharingSpectatorView.init(model:content:)(v6, (uint64_t)partial apply for closure #1 in ScreenSharingSpectatorViewController.loadView(), v8, (uint64_t)&v56);
  long long v58 = *(_OWORD *)&v57[8];
  id v10 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockScreenHostingController<ScreenSharingSpectatorView<PictureInPictureWrapper<SharedContentViewController>>>));
  long long v52 = v56;
  long long v53 = *(_OWORD *)v57;
  uint64_t v54 = *(void *)&v57[16];
  swift_retain();
  swift_retain();
  outlined retain of State<Bool>((uint64_t)&v58);
  id v11 = (void *)UIHostingController.init(rootView:)();
  id v12 = objc_msgSend(v11, sel_view, v52, v53, v54);
  if (!v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = v12;
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v14 = OUTLINED_FUNCTION_3_84();
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  char v15 = v14;
  id v16 = objc_msgSend(v4, sel_blackColor);
  objc_msgSend(v15, sel_setBackgroundColor_, v16);

  id v17 = OUTLINED_FUNCTION_5_76();
  if (!v17)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v18 = v17;
  id v19 = OUTLINED_FUNCTION_3_84();
  if (!v19)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v20 = v19;
  objc_msgSend(v18, sel_addSubview_, v19);

  objc_msgSend(v1, sel_addChildViewController_, v11);
  objc_msgSend(v11, sel_didMoveToParentViewController_, v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1C3769580;
  id v22 = OUTLINED_FUNCTION_3_84();
  if (!v22)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  double v23 = v22;
  id v24 = objc_msgSend(v22, sel_leadingAnchor);

  id v25 = OUTLINED_FUNCTION_5_76();
  if (!v25)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = v25;
  id v27 = objc_msgSend(v25, sel_leadingAnchor);

  id v28 = OUTLINED_FUNCTION_2_74();
  *(void *)(v21 + 32) = v28;
  id v29 = OUTLINED_FUNCTION_3_84();
  if (!v29)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v30 = v29;
  id v31 = objc_msgSend(v29, sel_trailingAnchor);

  id v32 = OUTLINED_FUNCTION_5_76();
  if (!v32)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v33 = v32;
  id v34 = objc_msgSend(v32, sel_trailingAnchor);

  id v35 = OUTLINED_FUNCTION_2_74();
  *(void *)(v21 + 40) = v35;
  id v36 = OUTLINED_FUNCTION_3_84();
  if (!v36)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v37 = v36;
  id v38 = objc_msgSend(v36, sel_topAnchor);

  id v39 = OUTLINED_FUNCTION_5_76();
  if (!v39)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v40 = v39;
  id v41 = objc_msgSend(v39, sel_topAnchor);

  id v42 = OUTLINED_FUNCTION_2_74();
  *(void *)(v21 + 48) = v42;
  id v43 = OUTLINED_FUNCTION_3_84();
  if (!v43)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v44 = v43;
  id v45 = objc_msgSend(v43, sel_bottomAnchor);

  id v46 = OUTLINED_FUNCTION_5_76();
  if (v46)
  {
    char v47 = v46;
    uint64_t v48 = self;
    id v49 = objc_msgSend(v47, sel_bottomAnchor);

    id v50 = OUTLINED_FUNCTION_2_74();
    *(void *)(v21 + 56) = v50;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v48, sel_activateConstraints_, isa, v21);

    swift_release();
    swift_release();
    outlined release of State<Bool>((uint64_t)&v58);
    return;
  }
LABEL_27:
  __break(1u);
}

Swift::Void __swiftcall ScreenSharingSpectatorViewController.viewDidLoad()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for ScreenSharingSpectatorViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  ScreenSharingSpectatorViewController.updateSharedContentViewController()();
}

void ScreenSharingSpectatorViewController.updateSharedContentViewController()()
{
  id v1 = objc_retain(*(id *)(*(void *)(v0
                                     + OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController)
                         + direct field offset for PictureInPictureWrapperViewController.wrappedViewController));
  withObservationTracking<A>(_:onChange:)();
}

uint64_t closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_model);
  char v4 = (*(uint64_t (**)(void))(*(void *)v3 + 312))();
  id v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xD0))(v4 & 1);
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 856))(v6);
  uint64_t v8 = (*(uint64_t (**)(void))((*v5 & *a1) + 0xE8))(v7 & 1);
  char v9 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 264))(v8);
  uint64_t v10 = (*(uint64_t (**)(void))((*v5 & *a1) + 0x100))(v9 & 1);
  char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 800))(v10);
  return (*(uint64_t (**)(void))((*v5 & *a1) + 0x118))(v11 & 1);
}

uint64_t (*implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()())()
{
  return partial apply for closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController();
}

uint64_t closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  OUTLINED_FUNCTION_62();
  uint64_t v4 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v4);
  uint64_t v5 = swift_allocObject();
  OUTLINED_FUNCTION_2();
  uint64_t v6 = (void *)MEMORY[0x1C8776240](a1 + 16);
  swift_unknownObjectWeakInit();

  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = MEMORY[0x1E4FBCFD8];
  _OWORD v8[2] = v7;
  v8[3] = v9;
  v8[4] = v5;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a1;
  v4[6] = a4;
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController(), v6, v5);
}

uint64_t closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  OUTLINED_FUNCTION_2();
  id v2 = (void *)MEMORY[0x1C8776240](v1 + 16);
  if (v2)
  {
    ScreenSharingSpectatorViewController.updateSharedContentViewController()();
  }
  OUTLINED_FUNCTION_13_44(v2 == 0);
  return v3();
}

void __swiftcall ScreenSharingSpectatorViewController.parentViewControllerForRestoringPiP()(UIViewController *__return_ptr retstr)
{
  id v2 = objc_retain(*(id *)(v1
                         + OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController));
}

Swift::Void __swiftcall ScreenSharingSpectatorViewController.handlePictureInPictureRestored()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                          + OBJC_IVAR____TtC15ConversationKit36ScreenSharingSpectatorViewController_contentViewController))
                    + 0x90))();
}

uint64_t ScreenSharingSpectatorViewController.sharedContentViewControllerDidUpdateScreenInfo(_:)()
{
  return CurrentValueSubject.send(_:)();
}

id ScreenSharingSpectatorViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void ScreenSharingSpectatorViewController.init(nibName:bundle:)()
{
}

uint64_t ScreenSharingSpectatorViewController.__ivar_destroyer()
{
  swift_release();

  return swift_release();
}

id ScreenSharingSpectatorViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScreenSharingSpectatorViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SharedContentViewControllerDelegate.sharedContentViewControllerDidUpdateScreenInfo(_:) in conformance ScreenSharingSpectatorViewController()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t outlined release of State<Bool>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield;
  if (!lazy protocol witness table cache variable for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingTouchShield and conformance ScreenSharingTouchShield);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ScreenSharingSpectatorView.body.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t partial apply for closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter(*(void *)(v1 + 16), a1);
}

uint64_t (*partial apply for implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter())()
{
  return implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter();
}

uint64_t specialized ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v38 = (void *)a1;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ScreenSharingInteractionSession?>.Publisher);
  uint64_t v7 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__broadcastingParticipant;
  uint64_t v11 = type metadata accessor for Participant(0);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isZoomEnabled) = 0;
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isPipped) = 0;
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__disableRequestButton) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__activeParticipantObserver) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__sessionObserver) = 0;
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlState) = 0;
  *(void *)(a4
            + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlStateTask) = 0;
  uint64_t v12 = static Duration.seconds(_:)();
  uint64_t v13 = (uint64_t *)(a4
                  + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlStateTransitionTime);
  uint64_t *v13 = v12;
  v13[1] = v14;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlState) = 0xA000000000000010;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__requirmentsLock) = v15;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements) = 0;
  ObservationRegistrar.init()();
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel_interactionController) = a2;
  id v16 = a2;
  id v37 = a3;
  objc_msgSend(a3, sel_addObserver_, a4);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  id v19 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v20 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x1B0);
  uint64_t v21 = v16;
  uint64_t v22 = v20(partial apply for closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:), v18);
  uint64_t v23 = *v19;
  id v24 = v38;
  (*(void (**)(uint64_t))((v23 & *v21) + 0x110))(v22);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<ScreenSharingInteractionSession?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ScreenSharingInteractionSession?>.Publisher);
  swift_retain();
  uint64_t v25 = v39;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  ScreenSharingSpectatorViewModel.sessionObserver.setter();
  if (FTServerBag.remoteControlEnabled.getter())
  {
    id v26 = v37;
    swift_getKeyPath();
    (*(void (**)(void))(*(void *)a4 + 912))();
    swift_release();
    uint64_t v40 = a4;
    swift_getKeyPath();
    lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    uint64_t v27 = swift_release();
    uint64_t v35 = *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements);
    if ((v35 & 8) == 0) {
      *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements) = v35 | 8;
    }
    ScreenSharingSpectatorViewModel._remoteControlRequirements.didset(v27, v28, v29, v30, v31, v32, v33, v34, (uint64_t)v37, (uint64_t)v38, v39, v40, v41, v42, v43, v44, v45, v46, v47,
      v48,
      v49,
      v50);
    uint64_t v40 = a4;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();

    swift_release();
  }
  else
  {
  }
  return a4;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t (*v20)(uint64_t (*)(), uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  id v37 = (void *)a1;
  id v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ScreenSharingInteractionSession?>.Publisher);
  uint64_t v7 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__broadcastingParticipant;
  uint64_t v11 = type metadata accessor for Participant(0);
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isZoomEnabled) = 0;
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isPipped) = 0;
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__disableRequestButton) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__activeParticipantObserver) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__sessionObserver) = 0;
  *(unsigned char *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlState) = 0;
  *(void *)(a4
            + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlStateTask) = 0;
  uint64_t v12 = static Duration.seconds(_:)();
  uint64_t v13 = (uint64_t *)(a4
                  + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlStateTransitionTime);
  uint64_t *v13 = v12;
  v13[1] = v14;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlState) = 0xA000000000000010;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__requirmentsLock) = v15;
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements) = 0;
  ObservationRegistrar.init()();
  *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel_interactionController) = a2;
  id v16 = a2;
  id v36 = (uint64_t)a3;
  objc_msgSend(a3, sel_addObserver_, a4);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  id v19 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v20 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x1B0);
  uint64_t v21 = v16;
  uint64_t v22 = v20(partial apply for closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:), v18);
  uint64_t v23 = *v19;
  id v24 = v37;
  (*(void (**)(uint64_t))((v23 & *v21) + 0x110))(v22);
  lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<ScreenSharingInteractionSession?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ScreenSharingInteractionSession?>.Publisher);
  swift_retain();
  uint64_t v25 = v38;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  ScreenSharingSpectatorViewModel.sessionObserver.setter();
  if (FTServerBag.remoteControlEnabled.getter())
  {
    swift_getKeyPath();
    (*(void (**)(void))(*(void *)a4 + 912))();
    swift_release();
    uint64_t v39 = a4;
    swift_getKeyPath();
    _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    id v26 = swift_release();
    uint64_t v34 = *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements);
    if ((v34 & 8) == 0) {
      *(void *)(a4 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements) = v34 | 8;
    }
    ScreenSharingSpectatorViewModel._remoteControlRequirements.didset(v26, v27, v28, v29, v30, v31, v32, v33, v36, (uint64_t)v37, v38, v39, v40, v41, v42, v43, v44, v45, v46,
      v47,
      v48,
      v49);
    uint64_t v39 = a4;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
  }

  return a4;
}

uint64_t type metadata accessor for ScreenSharingSpectatorViewController()
{
  return self;
}

uint64_t sub_1C32253A4()
{
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

id partial apply for closure #1 in ScreenSharingSpectatorViewController.loadView()@<X0>(void *a1@<X8>)
{
  objc_super v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

uint64_t outlined retain of State<Bool>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip;
  if (!lazy protocol witness table cache variable for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip;
  if (!lazy protocol witness table cache variable for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingSpectatorTip and conformance ScreenSharingSpectatorTip);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingSpectatorView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C32254A8()
{
  return 16;
}

__n128 sub_1C32254B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingSpectatorTip()
{
  return &type metadata for ScreenSharingSpectatorTip;
}

uint64_t destroy for ScreenSharingSpectatorView()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScreenSharingSpectatorView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScreenSharingSpectatorView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ScreenSharingSpectatorView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingSpectatorView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingSpectatorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingSpectatorView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ScreenSharingSpectatorViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingSpectatorViewController);
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.isPipped.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.isPipped.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.isPipped.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.pipSourceProvider()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.parentViewControllerForRestoringPiP()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.handlePictureInPictureRestored()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewController.sharedContentViewControllerDidUpdateScreenInfo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t sub_1C3225898()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()()
{
  return closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t (*partial apply for implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()())()
{
  return implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()();
}

uint64_t sub_1C3225CBC()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()()
{
  return closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter(v0);
}

uint64_t partial apply for closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  uint64_t v2 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.updateSharedContentViewController()(v2, v3, v4, v5);
}

uint64_t sub_1C3225DCC()
{
  swift_weakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t sub_1C3225DFC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  return closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(uint64_t a1)
{
  return closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(a1, v1);
}

uint64_t partial apply for closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter()
{
  return closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter(v0);
}

uint64_t partial apply for closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter;
  uint64_t v2 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter(v2, v3, v4, v5);
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter((uint64_t (**)(void))(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t objectdestroy_31Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in ScreenSharingSpectatorView.body.getter(v1 + 32, a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type TipView<ScreenSharingSpectatorTip> and conformance TipView<A>, &demangling cache variable for type metadata for TipView<ScreenSharingSpectatorTip>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TipView<ScreenSharingSpectatorTip>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in ScreenSharingSpectatorView.body.getter(*(void *)(v1 + 32), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>?);
    lazy protocol witness table accessor for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>>);
    lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(&lazy protocol witness table cache variable for type ScreenSharingSpectatorModalOverlay and conformance ScreenSharingSpectatorModalOverlay, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorModalOverlay);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>, &demangling cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ScreenSharingSpectatorModalOverlay, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ScreenSharingSpectatorToolbar and conformance ScreenSharingSpectatorToolbar(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ScreenSharingSpectatorModalOverlay(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModalOverlayTransition and conformance ModalOverlayTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type ModalOverlayTransition and conformance ModalOverlayTransition;
  if (!lazy protocol witness table cache variable for type ModalOverlayTransition and conformance ModalOverlayTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModalOverlayTransition and conformance ModalOverlayTransition);
  }
  return result;
}

uint64_t outlined init with copy of ScreenSharingSpectatorModalOverlay(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ScreenSharingSpectatorModalOverlay(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PredicateExpressions.Variable<Bool> and conformance PredicateExpressions.Variable<A>, &demangling cache variable for type metadata for PredicateExpressions.Variable<Bool>);
    lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.Variable<Bool>, PredicateExpressions.Value<Bool>> and conformance <> PredicateExpressions.Equal<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>);
  }
  return result;
}

uint64_t one-time initialization function for joinLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OUTLINED_FUNCTION_0_74(a1, 2, a3, &static InvitationPreferences.joinLink);
}

uint64_t static InvitationPreferences.joinLink.getter()
{
  return static InvitationPreferences.joinLink.getter(&one-time initialization token for joinLink);
}

uint64_t one-time initialization function for startMultiwayCall(uint64_t a1)
{
  return one-time initialization function for joinLink(a1, 6, 6, &static InvitationPreferences.startMultiwayCall);
}

uint64_t static InvitationPreferences.startMultiwayCall.getter()
{
  return static InvitationPreferences.joinLink.getter(&one-time initialization token for startMultiwayCall);
}

uint64_t one-time initialization function for inviteWithMessages(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OUTLINED_FUNCTION_0_74(a1, 1, a3, &static InvitationPreferences.inviteWithMessages);
}

uint64_t one-time initialization function for joinLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769F40;
  *(void *)(inited + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB68]), sel_initWithHandleType_notificationStyles_, 2, a2);
  *(void *)(inited + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB68]), sel_initWithHandleType_notificationStyles_, 3, a3);
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB68]), sel_initWithHandleType_notificationStyles_, 1, a3);
  specialized Array._endMutation()();
  uint64_t result = specialized Set.init<A>(_:)(inited);
  *a4 = result;
  return result;
}

uint64_t static InvitationPreferences.inviteWithMessages.getter()
{
  return static InvitationPreferences.joinLink.getter(&one-time initialization token for inviteWithMessages);
}

uint64_t static InvitationPreferences.joinLink.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for InvitationPreferences()
{
  return &type metadata for InvitationPreferences;
}

uint64_t default argument 3 of ParticipantVideoView.ViewModel.init(videoProvider:videoTransform:prefersSnapshotFadeAnimation:prefersAnimatedVideoTransform:shouldRegisterVideoLayers:freezeFrameUntilUpdate:)()
{
  return 0;
}

uint64_t default argument 5 of ParticipantVideoView.ViewModel.init(videoProvider:videoTransform:prefersSnapshotFadeAnimation:prefersAnimatedVideoTransform:shouldRegisterVideoLayers:freezeFrameUntilUpdate:)()
{
  return 0;
}

void *ParticipantVideoView.ViewModel.init(videoProvider:videoTransform:prefersSnapshotFadeAnimation:prefersAnimatedVideoTransform:shouldRegisterVideoLayers:freezeFrameUntilUpdate:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, unsigned char *a7@<X8>)
{
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(a1, (uint64_t)a7, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  uint64_t result = memcpy(a7 + 40, a2, 0x80uLL);
  a7[168] = a3;
  a7[169] = a4;
  a7[170] = a5;
  a7[171] = a6;
  return result;
}

BOOL static ParticipantVideoView.ViewModel.== infix(_:_:)()
{
  OUTLINED_FUNCTION_7_1();
  ParticipantVideoView.ViewModel.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  OUTLINED_FUNCTION_7_1();
  ParticipantVideoView.ViewModel.hash(into:)();
  return v0 == Hasher._finalize()();
}

uint64_t ParticipantVideoView.ViewModel.contentsRect.getter()
{
  outlined init with copy of ParticipantVideoProvider?(v0, (uint64_t)v4);
  uint64_t v1 = v5;
  if (!v5) {
    return outlined destroy of ParticipantVideoProvider?((uint64_t)v4);
  }
  uint64_t v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 64))(&v7, v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v7, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t default argument 4 of ParticipantVideoView.ViewModel.init(videoProvider:videoTransform:prefersSnapshotFadeAnimation:prefersAnimatedVideoTransform:shouldRegisterVideoLayers:freezeFrameUntilUpdate:)()
{
  return 1;
}

uint64_t static ParticipantVideoView.Errors.== infix(_:_:)()
{
  return 1;
}

void ParticipantVideoView.Errors.hash(into:)()
{
}

Swift::Int ParticipantVideoView.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t ParticipantVideoView.ViewModel.videoProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ParticipantVideoProvider?(v1, a1);
}

uint64_t ParticipantVideoView.ViewModel.videoProvider.setter(uint64_t a1)
{
  return outlined assign with take of ParticipantVideoProvider?(a1, v1);
}

uint64_t (*ParticipantVideoView.ViewModel.videoProvider.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void *ParticipantVideoView.ViewModel.videoTransform.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_2_75(a1, (const void *)(v1 + 40));
}

void *ParticipantVideoView.ViewModel.videoTransform.setter(const void *a1)
{
  return OUTLINED_FUNCTION_2_75((void *)(v1 + 40), a1);
}

uint64_t (*ParticipantVideoView.ViewModel.videoTransform.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantVideoView.ViewModel.prefersSnapshotFadeAnimation.getter()
{
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t ParticipantVideoView.ViewModel.prefersSnapshotFadeAnimation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 168) = result;
  return result;
}

uint64_t (*ParticipantVideoView.ViewModel.prefersSnapshotFadeAnimation.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantVideoView.ViewModel.prefersAnimatedVideoTransform.getter()
{
  return *(unsigned __int8 *)(v0 + 169);
}

uint64_t ParticipantVideoView.ViewModel.prefersAnimatedVideoTransform.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 169) = result;
  return result;
}

uint64_t (*ParticipantVideoView.ViewModel.prefersAnimatedVideoTransform.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantVideoView.ViewModel.shouldRegisterVideoLayers.getter()
{
  return *(unsigned __int8 *)(v0 + 170);
}

uint64_t ParticipantVideoView.ViewModel.shouldRegisterVideoLayers.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 170) = result;
  return result;
}

uint64_t (*ParticipantVideoView.ViewModel.shouldRegisterVideoLayers.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantVideoView.ViewModel.freezeFrameUntilUpdate.getter()
{
  return *(unsigned __int8 *)(v0 + 171);
}

uint64_t ParticipantVideoView.ViewModel.freezeFrameUntilUpdate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 171) = result;
  return result;
}

uint64_t (*ParticipantVideoView.ViewModel.freezeFrameUntilUpdate.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id ParticipantVideoView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *ParticipantVideoView.init()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView;
  uint64_t v4 = (objc_class *)type metadata accessor for ParticipantVideoCameraView();
  uint64_t v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR____TtC15ConversationKit26ParticipantVideoCameraView_style] = 0;
  v30.receiver = v5;
  v30.super_class = v4;
  uint64_t v6 = v0;
  *(void *)&v1[v3] = objc_msgSendSuper2(&v30, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView;
  uint64_t v8 = objc_allocWithZone(v4);
  v8[OBJC_IVAR____TtC15ConversationKit26ParticipantVideoCameraView_style] = 0;
  v29.receiver = v8;
  v29.super_class = v4;
  *(void *)&v6[v7] = OUTLINED_FUNCTION_0_75(&v29, sel_initWithFrame_);
  uint64_t v9 = &v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousViewModelHash];
  *(void *)uint64_t v9 = 0;
  unsigned char v9[8] = 1;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot] = 0;
  v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_hasPerformedFirstVideoTransform] = 0;
  v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode] = 0;
  uint64_t v10 = &v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForFrontVideoProvider];
  *((void *)v10 + 4) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  uint64_t v11 = &v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForBackVideoProvider];
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((void *)v11 + 4) = 0;
  v6[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen] = 0;

  v28.receiver = v6;
  v28.super_class = ObjectType;
  uint64_t v12 = (char *)OUTLINED_FUNCTION_0_75(&v28, sel_initWithFrame_);
  objc_msgSend(v12, sel_setClipsToBounds_, 1);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 264))())
  {
    uint64_t v13 = self;
    uint64_t v14 = v12;
    id v15 = objc_msgSend(v13, sel_systemRedColor);
    objc_msgSend(v14, sel_setBackgroundColor_, v15);

    uint64_t v16 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView;
    id v17 = *(id *)&v14[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView];
    id v18 = objc_msgSend(v13, sel_systemBlueColor);
    objc_msgSend(v17, sel_setBackgroundColor_, v18);

    id v19 = objc_msgSend(*(id *)&v14[v16], sel_layer);
    CGColorRef GenericCMYK = CGColorCreateGenericCMYK(0.0, 0.0, 1.0, 0.0, 1.0);
    objc_msgSend(v19, sel_setBorderColor_, GenericCMYK);

    id v21 = objc_msgSend(*(id *)&v14[v16], sel_layer);
    objc_msgSend(v21, sel_setBorderWidth_, 5.0);
  }
  uint64_t v22 = *(void **)&v12[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView];
  OUTLINED_FUNCTION_47();
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(v23, v24, v22);
  uint64_t v25 = *(void **)&v12[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView];
  OUTLINED_FUNCTION_47();
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD00000000000001FLL, v26, v25);
  objc_msgSend(v12, sel_addSubview_, v22);
  objc_msgSend(v12, sel_addSubview_, v25);

  return v12;
}

id ParticipantVideoView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantVideoView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView;
  uint64_t v2 = (objc_class *)type metadata accessor for ParticipantVideoCameraView();
  id v3 = objc_allocWithZone(v2);
  v3[OBJC_IVAR____TtC15ConversationKit26ParticipantVideoCameraView_style] = 0;
  v10.receiver = v3;
  v10.super_class = v2;
  *(void *)&v0[v1] = OUTLINED_FUNCTION_0_75(&v10, sel_initWithFrame_);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView;
  uint64_t v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC15ConversationKit26ParticipantVideoCameraView_style] = 0;
  v9.receiver = v5;
  v9.super_class = v2;
  *(void *)&v0[v4] = OUTLINED_FUNCTION_0_75(&v9, sel_initWithFrame_);
  uint64_t v6 = &v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousViewModelHash];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_hasPerformedFirstVideoTransform] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode] = 0;
  uint64_t v7 = &v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForFrontVideoProvider];
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v8 = &v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForBackVideoProvider];
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 4) = 0;
  v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen] = 0;

  OUTLINED_FUNCTION_23_26();
  __break(1u);
}

id ParticipantVideoView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantVideoView.init(frame:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView;
  uint64_t v2 = (objc_class *)type metadata accessor for ParticipantVideoCameraView();
  id v3 = objc_allocWithZone(v2);
  v3[OBJC_IVAR____TtC15ConversationKit26ParticipantVideoCameraView_style] = 0;
  v10.receiver = v3;
  v10.super_class = v2;
  *(void *)&v0[v1] = OUTLINED_FUNCTION_0_75(&v10, sel_initWithFrame_);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView;
  uint64_t v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC15ConversationKit26ParticipantVideoCameraView_style] = 0;
  v9.receiver = v5;
  v9.super_class = v2;
  *(void *)&v0[v4] = OUTLINED_FUNCTION_0_75(&v9, sel_initWithFrame_);
  uint64_t v6 = &v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousViewModelHash];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_hasPerformedFirstVideoTransform] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode] = 0;
  uint64_t v7 = &v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForFrontVideoProvider];
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v8 = &v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForBackVideoProvider];
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 4) = 0;
  v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen] = 0;

  OUTLINED_FUNCTION_23_26();
  __break(1u);
}

Swift::Void __swiftcall ParticipantVideoView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  ParticipantVideoView._layout()();
}

uint64_t ParticipantVideoView._layout()()
{
  id v3 = v0;
  objc_msgSend(v0, sel_bounds);
  uint64_t result = CGRectIsInfinite(v59);
  if (result) {
    return result;
  }
  objc_msgSend(v0, sel_bounds);
  uint64_t result = CGRectIsEmpty(v60);
  if (result) {
    return result;
  }
  if (v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode] != 1) {
    goto LABEL_37;
  }
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView];
  id v6 = objc_msgSend(v5, sel_layer);
  objc_msgSend(v6, sel_bounds);
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;

  CGFloat v15 = *MEMORY[0x1E4F1DB28];
  CGFloat v16 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  CGFloat v17 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  CGFloat v18 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  v61.origin.CGFloat x = v8;
  v61.origin.CGFloat y = v10;
  v61.size.CGFloat width = v12;
  v61.size.CGFloat height = v14;
  v63.origin.CGFloat x = *(CGFloat *)MEMORY[0x1E4F1DB28];
  v63.origin.CGFloat y = v16;
  v63.size.CGFloat width = v17;
  v63.size.CGFloat height = v18;
  if (!CGRectEqualToRect(v61, v63))
  {
    uint64_t v19 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForFrontVideoProvider];
    swift_beginAccess();
    outlined init with copy of ParticipantVideoProvider?(v19, (uint64_t)&v56);
    uint64_t v20 = *((void *)&v57 + 1);
    outlined destroy of ParticipantVideoProvider?((uint64_t)&v56);
    if (v20)
    {
      if (*(void *)(v19 + 24))
      {
        outlined init with copy of IDSLookupManager(v19, (uint64_t)&v56);
        uint64_t v21 = v58;
        __swift_project_boxed_opaque_existential_1(&v56, *((uint64_t *)&v57 + 1));
        id v22 = objc_msgSend(v5, sel_layer);
        (*(void (**)(void))(v21 + 120))();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      }
      uint64_t v58 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      swift_beginAccess();
      outlined assign with take of ParticipantVideoProvider?((uint64_t)&v56, v19);
      swift_endAccess();
    }
  }
  uint64_t v1 = *(void *)&v3[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView];
  id v23 = objc_msgSend((id)v1, sel_layer);
  objc_msgSend(v23, sel_bounds);
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  CGFloat v31 = v30;

  v62.origin.CGFloat x = v25;
  v62.origin.CGFloat y = v27;
  v62.size.CGFloat width = v29;
  v62.size.CGFloat height = v31;
  v64.origin.CGFloat x = v15;
  v64.origin.CGFloat y = v16;
  v64.size.CGFloat width = v17;
  v64.size.CGFloat height = v18;
  if (!CGRectEqualToRect(v62, v64))
  {
    uint64_t v32 = (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForBackVideoProvider];
    swift_beginAccess();
    outlined init with copy of ParticipantVideoProvider?(v32, (uint64_t)&v56);
    uint64_t v33 = *((void *)&v57 + 1);
    outlined destroy of ParticipantVideoProvider?((uint64_t)&v56);
    if (v33)
    {
      if (*(void *)(v32 + 24))
      {
        outlined init with copy of IDSLookupManager(v32, (uint64_t)&v56);
        uint64_t v34 = v58;
        __swift_project_boxed_opaque_existential_1(&v56, *((uint64_t *)&v57 + 1));
        id v35 = objc_msgSend((id)v1, sel_layer);
        (*(void (**)(void))(v34 + 120))();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      }
      uint64_t v58 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      swift_beginAccess();
      outlined assign with take of ParticipantVideoProvider?((uint64_t)&v56, v32);
      swift_endAccess();
    }
  }
  unint64_t v36 = self;
  objc_msgSend((id)v36, sel_begin);
  uint64_t result = outlined bridged method (ob) of @objc CALayer.sublayers.getter(objc_msgSend(v5, sel_layer));
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (result) {
    uint64_t v37 = result;
  }
  else {
    uint64_t v37 = MEMORY[0x1E4FBC860];
  }
  if ((unint64_t)v37 >> 62) {
    goto LABEL_54;
  }
  uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v38)
  {
LABEL_19:
    if (v38 >= 1)
    {
      uint64_t v39 = 0;
      do
      {
        if ((v37 & 0xC000000000000001) != 0) {
          id v40 = (id)MEMORY[0x1C87744F0](v39, v37);
        }
        else {
          id v40 = *(id *)(v37 + 8 * v39 + 32);
        }
        uint64_t v41 = v40;
        ++v39;
        objc_msgSend(v3, sel_bounds);
        objc_msgSend(v41, sel_setFrame_);
      }
      while (v38 != v39);
      goto LABEL_25;
    }
    __break(1u);
LABEL_59:
    __break(1u);
    return result;
  }
  while (1)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t result = outlined bridged method (ob) of @objc CALayer.sublayers.getter(objc_msgSend((id)v1, sel_layer));
    unint64_t v42 = result ? result : v2;
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v1) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v1 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v1) {
        goto LABEL_36;
      }
    }
    if (v1 < 1) {
      goto LABEL_59;
    }
    uint64_t v43 = 0;
    do
    {
      if ((v42 & 0xC000000000000001) != 0) {
        id v44 = (id)MEMORY[0x1C87744F0](v43, v42);
      }
      else {
        id v44 = *(id *)(v42 + 8 * v43 + 32);
      }
      uint64_t v45 = v44;
      ++v43;
      objc_msgSend(v3, sel_bounds);
      objc_msgSend(v45, sel_setFrame_);
    }
    while (v1 != v43);
LABEL_36:
    swift_bridgeObjectRelease();
    objc_msgSend((id)v36, sel_commit);
LABEL_37:
    id v46 = objc_msgSend(v3, sel_subviews);
    type metadata accessor for UIView();
    unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v37) {
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v37) {
        return swift_bridgeObjectRelease();
      }
    }
    if (v37 >= 1) {
      break;
    }
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_19;
    }
  }
  for (uint64_t i = 0; i != v37; ++i)
  {
    if ((v36 & 0xC000000000000001) != 0) {
      id v48 = (id)MEMORY[0x1C87744F0](i, v36);
    }
    else {
      id v48 = *(id *)(v36 + 8 * i + 32);
    }
    uint64_t v49 = v48;
    objc_msgSend(v48, sel_frame);
    if (v51 == 0.0 && v50 == 0.0)
    {
      objc_msgSend(v3, sel_bounds);
      objc_msgSend(v49, sel_setFrame_);
    }
    else
    {
      id v52 = objc_msgSend(v3, sel_layer);
      long long v53 = self;
      id v54 = v49;
      objc_super v55 = v3;
      objc_msgSend(v53, sel_begin);
      objc_msgSend(v53, sel_setDisableActions_, 1);
      objc_msgSend(v55, sel_bounds);
      objc_msgSend(v54, sel_setFrame_);
      objc_msgSend(v53, sel_commit);
    }
  }
  return swift_bridgeObjectRelease();
}

void ParticipantVideoView.configure(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousViewModelHash];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousViewModelHash];
  int v6 = v1[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousViewModelHash + 8];
  Hasher.init(_seed:)();
  ParticipantVideoView.ViewModel.hash(into:)();
  if (v5 == Hasher._finalize()()) {
    int v7 = v6;
  }
  else {
    int v7 = 1;
  }
  uint64_t v74 = *(void *)v4;
  char v73 = v4[8];
  int log = v7;
  if (v7 == 1)
  {
    Hasher.init(_seed:)();
    ParticipantVideoView.ViewModel.hash(into:)();
    *(void *)uint64_t v4 = Hasher._finalize()();
    v4[8] = 0;
    outlined init with copy of ParticipantVideoView.ViewModel(a1, (uint64_t)v79);
    uint64_t v8 = MEMORY[0x1E4FBB1A0];
    if (v6)
    {
      outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v79);
      goto LABEL_11;
    }
    char v9 = v82;
    outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v79);
    if ((v9 & 1) == 0)
    {
LABEL_11:
      outlined init with copy of ParticipantVideoView.ViewModel(a1, (uint64_t)v77);
      if (v6)
      {
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v77);
      }
      else
      {
        char v17 = v78;
        outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v77);
        if (v17)
        {
          ParticipantVideoView.freezeCurrentFrame()();
          char v18 = 1;
LABEL_19:
          ParticipantVideoView.hideSnapshot(animated:)(v18);
          goto LABEL_20;
        }
      }
      if (v2[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen] != 1) {
        goto LABEL_20;
      }
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1C37696D0;
      _typeName(_:qualified:)();
      v20._uint64_t countAndFlagsBits = 46;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      OUTLINED_FUNCTION_47();
      v21._uint64_t countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v21);
      uint64_t v22 = String.init<A>(reflecting:)();
      uint64_t v24 = v23;
      *(void *)(v19 + 56) = v8;
      unint64_t v25 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v19 + 64) = v25;
      *(void *)(v19 + 32) = v22;
      *(void *)(v19 + 40) = v24;
      ParticipantVideoView.ViewModel.contentsRect.getter();
      type metadata accessor for CGRect(0);
      uint64_t v26 = String.init<A>(reflecting:)();
      *(void *)(v19 + 96) = v8;
      *(void *)(v19 + 104) = v25;
      *(void *)(v19 + 72) = v26;
      *(void *)(v19 + 80) = v27;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      char v18 = 0;
      goto LABEL_19;
    }
    ParticipantVideoView.freezeCurrentFrame()();
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
    v77[0] = _typeName(_:qualified:)();
    v77[1] = v11;
    v12._uint64_t countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    OUTLINED_FUNCTION_47();
    v13._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v16 = v15;
    *(void *)(v10 + 56) = v8;
    *(void *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v10 + 32) = v14;
    *(void *)(v10 + 40) = v16;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
LABEL_20:
  outlined init with copy of ParticipantVideoProvider?(a1, (uint64_t)v79);
  if (!v80)
  {
    outlined destroy of ParticipantVideoProvider?((uint64_t)v79);
    goto LABEL_33;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
  type metadata accessor for RemoteParticipantVideoProvider();
  if ((OUTLINED_FUNCTION_5_77() & 1) == 0) {
    goto LABEL_33;
  }
  double v28 = (void *)v77[0];
  OUTLINED_FUNCTION_3_16();
  uint64_t v30 = (*(uint64_t (**)(void))(v29 + 160))();
  if ((v30 & 0x100000000) != 0)
  {

    goto LABEL_33;
  }
  uint64_t v31 = VideoAttributeOrientation.deviceOrientation.getter(v30);
  OUTLINED_FUNCTION_3_16();
  double v33 = COERCE_DOUBLE((*(uint64_t (**)(void))(v32 + 288))());
  double v35 = v34;
  char v37 = v36;

  if (v37)
  {
LABEL_33:
    ParticipantVideoView.ViewModel.contentsRect.getter();
    char v39 = 0;
    goto LABEL_34;
  }
  if (!v31)
  {
    if (v33 < v35) {
      goto LABEL_60;
    }
    goto LABEL_33;
  }
  if (v31 != 2 || v33 >= v35) {
    goto LABEL_33;
  }
LABEL_60:
  char v39 = 1;
LABEL_34:
  outlined init with copy of ParticipantVideoProvider?(a1, (uint64_t)v79);
  uint64_t v40 = v80;
  if (v80)
  {
    uint64_t v41 = v81;
    __swift_project_boxed_opaque_existential_1(v79, v80);
    double v42 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v41 + 80))(v40, v41));
    double v44 = v43;
    char v46 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    BOOL v47 = (v46 & 1) != 0 || v42 == v44;
    BOOL v48 = (v46 & 1) != 0;
  }
  else
  {
    outlined destroy of ParticipantVideoProvider?((uint64_t)v79);
    double v42 = 0.0;
    double v44 = 0.0;
    BOOL v47 = 1;
    BOOL v48 = 1;
  }
  outlined init with copy of ParticipantVideoProvider?(a1, (uint64_t)v79);
  if (v80)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
    type metadata accessor for RemoteParticipantVideoProvider();
    if (OUTLINED_FUNCTION_5_77())
    {
      uint64_t v49 = (void *)v77[0];
      if (v47
        && (v39 & 1) == 0
        && ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v77[0]) + 0x178))() & 1) != 0)
      {
        id v83 = v49;
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationKit);
        double v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          logCGFloat a = v51;
          uint64_t v53 = swift_slowAlloc();
          uint64_t v72 = swift_slowAlloc();
          v77[0] = v72;
          *(_DWORD *)uint64_t v53 = 136315650;
          uint64_t v54 = _typeName(_:qualified:)();
          v79[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v53 + 12) = 2080;
          OUTLINED_FUNCTION_47();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v56, v77);
          OUTLINED_FUNCTION_9_53();
          *(_WORD *)(v53 + 22) = 2080;
          if (v48)
          {
            unint64_t v57 = 0xE300000000000000;
            uint64_t v58 = 7104878;
          }
          else
          {
            *(double *)uint64_t v79 = v42;
            *(double *)&v79[1] = v44;
            type metadata accessor for CGSize(0);
            uint64_t v58 = String.init<A>(reflecting:)();
            unint64_t v57 = v71;
          }
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, v77);
          OUTLINED_FUNCTION_9_53();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, loga, v52, "%s.%s: Skipping Attributes Update for Square Video %s", (uint8_t *)v53, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v72, -1, -1);
          MEMORY[0x1C87760E0](v53, -1, -1);
        }
        else
        {
        }
        *(void *)uint64_t v4 = v74;
        v4[8] = v73;
        lazy protocol witness table accessor for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors();
        swift_allocError();
        swift_willThrow();

        return;
      }
    }
  }
  else
  {
    outlined destroy of ParticipantVideoProvider?((uint64_t)v79);
  }
  outlined init with copy of ParticipantVideoView.ViewModel(a1, (uint64_t)v79);
  if (log)
  {
    outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v79);
  }
  else
  {
    ParticipantVideoView.ViewModel.contentsRect.getter();
    v84.origin.CGFloat x = OUTLINED_FUNCTION_15_40();
    BOOL v62 = CGRectEqualToRect(v84, v85);
    outlined destroy of ParticipantVideoView.ViewModel((uint64_t)v79);
    if (v62) {
      return;
    }
  }
  if (*(unsigned char *)(a1 + 170) == 1) {
    ParticipantVideoView.registerVideoLayers(with:)(a1, v59, v60, v61);
  }
  CGRect v63 = v2;
  id v64 = objc_msgSend(v63, sel_layer);
  uint64_t v65 = self;
  objc_msgSend(v65, sel_begin);
  objc_msgSend(v65, sel_setDisableActions_, 1);
  double v66 = OUTLINED_FUNCTION_15_40();
  closure #1 in ParticipantVideoView.configure(with:)(v67, (void *)a1, v66, v68, v69, v70);
  objc_msgSend(v65, sel_commit);
}

Swift::Int ParticipantVideoView.ViewModel.hashValue.getter()
{
  return Hasher._finalize()();
}

void ParticipantVideoView.freezeCurrentFrame()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen;
  if ((v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen] & 1) == 0)
  {
    uint64_t v2 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot;
    id v3 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot];
    if (v3) {
      objc_msgSend(v3, sel_removeFromSuperview);
    }
    id v4 = objc_msgSend(v0, sel_snapshotViewAfterScreenUpdates_, 0);
    uint64_t v5 = *(void **)&v0[v2];
    *(void *)&v0[v2] = v4;

    if (*(void *)&v0[v2])
    {
      objc_msgSend(v0, sel_addSubview_);
      v0[v1] = 1;
    }
  }
}

void ParticipantVideoView.hideSnapshot(animated:)(char a1)
{
  if (a1) {
    double v2 = 0.5;
  }
  else {
    double v2 = 0.0;
  }
  id v3 = self;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  uint64_t v14 = partial apply for closure #1 in ParticipantVideoView.hideSnapshot(animated:);
  uint64_t v15 = v4;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  Swift::String v12 = thunk for @escaping @callee_guaranteed () -> ();
  Swift::String v13 = &block_descriptor_22_2;
  uint64_t v5 = _Block_copy(&v10);
  id v6 = v1;
  swift_release();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  uint64_t v14 = partial apply for closure #2 in ParticipantVideoView.hideSnapshot(animated:);
  uint64_t v15 = v7;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  Swift::String v12 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  Swift::String v13 = &block_descriptor_28_2;
  uint64_t v8 = _Block_copy(&v10);
  id v9 = v6;
  swift_release();
  objc_msgSend(v3, sel_animateWithDuration_animations_completion_, v5, v8, v2);
  _Block_release(v8);
  _Block_release(v5);
}

uint64_t ParticipantVideoView.registerVideoLayers(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode) == 1)
  {
    objc_msgSend(OUTLINED_FUNCTION_11_37(), sel_bounds);
    OUTLINED_FUNCTION_12_41();
    BOOL v7 = OUTLINED_FUNCTION_1_92();
    if (v7)
    {
      uint64_t v11 = v4 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForFrontVideoProvider;
      OUTLINED_FUNCTION_6_1();
      outlined assign with copy of ParticipantVideoProvider?(a1, v11);
    }
    else
    {
      OUTLINED_FUNCTION_7_64(v7, v8, v9, v10);
      if (*((void *)&v33 + 1))
      {
        __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
        id v18 = OUTLINED_FUNCTION_11_37();
        OUTLINED_FUNCTION_14_39();
        v19();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      }
      else
      {
        outlined destroy of ParticipantVideoProvider?((uint64_t)&v32);
      }
      uint64_t v34 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      uint64_t v23 = v4 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForFrontVideoProvider;
      OUTLINED_FUNCTION_6_1();
      outlined assign with take of ParticipantVideoProvider?((uint64_t)&v32, v23);
    }
    swift_endAccess();
    objc_msgSend(OUTLINED_FUNCTION_11_37(), sel_bounds);
    OUTLINED_FUNCTION_12_41();
    BOOL v24 = OUTLINED_FUNCTION_1_92();
    if (v24)
    {
      uint64_t v28 = v5 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForBackVideoProvider;
      OUTLINED_FUNCTION_6_1();
      outlined assign with copy of ParticipantVideoProvider?(a1, v28);
    }
    else
    {
      OUTLINED_FUNCTION_7_64(v24, v25, v26, v27);
      if (*((void *)&v33 + 1))
      {
        __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
        id v29 = OUTLINED_FUNCTION_11_37();
        OUTLINED_FUNCTION_13_45();
        v30();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      }
      else
      {
        outlined destroy of ParticipantVideoProvider?((uint64_t)&v32);
      }
      uint64_t v34 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      uint64_t v31 = v5 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_pendingRegisterVideoLayerForBackVideoProvider;
      OUTLINED_FUNCTION_6_1();
      outlined assign with take of ParticipantVideoProvider?((uint64_t)&v32, v31);
    }
    return swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_7_64(a1, a2, a3, a4);
    if (*((void *)&v33 + 1))
    {
      __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
      id v12 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView), sel_layer);
      OUTLINED_FUNCTION_14_39();
      v13();

      uint64_t v14 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    }
    else
    {
      uint64_t v14 = outlined destroy of ParticipantVideoProvider?((uint64_t)&v32);
    }
    OUTLINED_FUNCTION_7_64(v14, v15, v16, v17);
    if (*((void *)&v33 + 1))
    {
      __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
      id v20 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView), sel_layer);
      OUTLINED_FUNCTION_13_45();
      v21();

      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    }
    else
    {
      return outlined destroy of ParticipantVideoProvider?((uint64_t)&v32);
    }
  }
}

void closure #1 in ParticipantVideoView.configure(with:)(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode) & 1) == 0)
  {
    id v12 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView);
    id v13 = objc_msgSend(v12, sel_layer);
    objc_msgSend(v13, sel_setContentsRect_, a3, a4, a5, a6);

    uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView);
    id v15 = objc_msgSend(v14, sel_layer);
    objc_msgSend(v15, sel_setContentsRect_, a3, a4, a5, a6);

    id v16 = objc_msgSend(v12, sel_layer);
    uint64_t v18 = a2[6];
    uint64_t v19 = a2[7];
    uint64_t v20 = a2[8];
    uint64_t v21 = a2[9];
    uint64_t v22 = a2[10];
    uint64_t v23 = a2[11];
    uint64_t v24 = a2[12];
    uint64_t v32 = a2[14];
    uint64_t v33 = a2[13];
    uint64_t v30 = a2[16];
    uint64_t v31 = a2[15];
    uint64_t v28 = a2[18];
    uint64_t v29 = a2[17];
    uint64_t v26 = a2[20];
    uint64_t v27 = a2[19];
    uint64_t v34 = a2[5];
    uint64_t v17 = v34;
    uint64_t v35 = v18;
    uint64_t v36 = v19;
    uint64_t v37 = v20;
    uint64_t v38 = v21;
    uint64_t v39 = v22;
    uint64_t v40 = v23;
    uint64_t v41 = v24;
    uint64_t v42 = v33;
    uint64_t v43 = v32;
    uint64_t v44 = v31;
    uint64_t v45 = v30;
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    uint64_t v48 = v27;
    uint64_t v49 = v26;
    objc_msgSend(v16, sel_setTransform_, &v34);

    id v25 = objc_msgSend(v14, sel_layer);
    uint64_t v34 = v17;
    uint64_t v35 = v18;
    uint64_t v36 = v19;
    uint64_t v37 = v20;
    uint64_t v38 = v21;
    uint64_t v39 = v22;
    uint64_t v40 = v23;
    uint64_t v41 = v24;
    uint64_t v42 = v33;
    uint64_t v43 = v32;
    uint64_t v44 = v31;
    uint64_t v45 = v30;
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    uint64_t v48 = v27;
    uint64_t v49 = v26;
    objc_msgSend(v25, sel_setTransform_, &v34);
  }
}

Swift::Void __swiftcall ParticipantVideoView.updatePreviewLayerHostMode(with:)(Swift::Bool with)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_shouldSkipTransformsForLayerHostMode) = with;
}

void ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(char a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v4;
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = a3;
  char v10 = a3 & 1;
  *(unsigned char *)(v9 + 17) = a1;
  *(void *)(v9 + 24) = v4;
  if (a4)
  {
    uint64_t v11 = &OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView;
    if (a1 != 1) {
      uint64_t v11 = &OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView;
    }
    id v12 = *(void **)&v4[*v11];
    id v13 = v4;
    id v14 = v12;
    objc_msgSend(v13, sel_bringSubviewToFront_, v14);
    id v15 = self;
    uint64_t v24 = partial apply for closure #1 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:);
    uint64_t v25 = v8;
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 1107296256;
    uint64_t v22 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v23 = &block_descriptor_46;
    id v16 = _Block_copy(&v20);
    swift_retain();
    swift_release();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for closure #2 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:);
    *(void *)(v17 + 24) = v9;
    *(unsigned char *)(v17 + 32) = v10;
    uint64_t v24 = partial apply for closure #3 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:);
    uint64_t v25 = v17;
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 1107296256;
    uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v23 = &block_descriptor_12_0;
    uint64_t v18 = _Block_copy(&v20);
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_transitionWithView_duration_options_animations_completion_, v13, 1048704, v16, v18, 0.5);

    swift_release();
    swift_release();
    _Block_release(v18);
    _Block_release(v16);
  }
  else
  {
    uint64_t v19 = v4;
    closure #1 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(a1, v19);
    closure #2 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(v10, a1, (uint64_t)v19);
    swift_release();
    swift_release();
  }
}

id closure #1 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(char a1, char *a2)
{
  if (a1 == 1) {
    id v3 = &OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView;
  }
  else {
    id v3 = &OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView;
  }
  uint64_t v4 = *(void **)&a2[*v3];
  objc_msgSend(v4, sel_setHidden_, 0);
  return objc_msgSend(a2, sel_bringSubviewToFront_, v4);
}

void closure #2 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(char a1, char a2, uint64_t a3)
{
  if (a1)
  {
    BOOL v4 = a2 != 1;
    BOOL v5 = a2 == 1;
    id v6 = *(void **)(a3 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_frontFacingCameraView);
    objc_msgSend(v6, sel_setHidden_, v5);
    id v7 = objc_msgSend(v6, sel_layer);
    objc_msgSend(v7, sel_setHidden_, v5);

    uint64_t v8 = *(void **)(a3 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_backFacingCameraView);
    objc_msgSend(v8, sel_setHidden_, v4);
    id v9 = objc_msgSend(v8, sel_layer);
    objc_msgSend(v9, sel_setHidden_, v4);
  }
}

void closure #3 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(char a1, void (*a2)(void), uint64_t a3, char a4)
{
  if (a1)
  {
    a2();
    if (a4)
    {
      id v5 = objc_msgSend(self, sel_defaultCenter);
      id v6 = v5;
      if (one-time initialization token for localPreviewDidFinishRotationAnimation != -1)
      {
        swift_once();
        id v5 = v6;
      }
      objc_msgSend(v5, sel_postNotificationName_object_, static Strings.Notifications.localPreviewDidFinishRotationAnimation, 0);
    }
  }
}

id closure #1 in ParticipantVideoView.hideSnapshot(animated:)(uint64_t a1)
{
  id result = *(id *)(a1 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot);
  if (result) {
    return objc_msgSend(result, sel_setAlpha_, 0.0);
  }
  return result;
}

void closure #2 in ParticipantVideoView.hideSnapshot(animated:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot;
  BOOL v4 = *(void **)(a2 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_previousVideoSnapshot);
  if (v4)
  {
    objc_msgSend(v4, sel_removeFromSuperview);
    id v5 = *(void **)(a2 + v3);
  }
  else
  {
    id v5 = 0;
  }
  *(void *)(a2 + v3) = 0;

  *(unsigned char *)(a2 + OBJC_IVAR____TtC15ConversationKit20ParticipantVideoView_isViewFrozen) = 0;
}

id ParticipantVideoView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ParticipantVideoView.ViewModel.hash(into:)()
{
  uint64_t v1 = v0;
  outlined init with copy of ParticipantVideoProvider?(v0, (uint64_t)v11);
  uint64_t v2 = v11[3];
  if (!v11[3])
  {
    outlined destroy of ParticipantVideoProvider?((uint64_t)v11);
    goto LABEL_5;
  }
  uint64_t v3 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  Swift::UInt v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  char v6 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (v6)
  {
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4);
LABEL_6:
  memcpy(v11, (const void *)(v1 + 40), sizeof(v11));
  CATransform3D.hash(into:)();
  ParticipantVideoView.ViewModel.contentsRect.getter();
  CGRect.hash(into:)(v7, v8, v9, v10);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantVideoView.ViewModel()
{
  return Hasher._finalize()();
}

uint64_t outlined destroy of ParticipantVideoProvider?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of ParticipantVideoProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors;
  if (!lazy protocol witness table cache variable for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors;
  if (!lazy protocol witness table cache variable for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantVideoView.Errors and conformance ParticipantVideoView.Errors);
  }
  return result;
}

uint64_t outlined assign with copy of ParticipantVideoProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3229240()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)()
{
  return closure #1 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(*(unsigned char *)(v0 + 16), *(char **)(v0 + 24));
}

void partial apply for closure #2 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)()
{
  closure #2 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(*(unsigned char *)(v0 + 16), *(unsigned char *)(v0 + 17), *(void *)(v0 + 24));
}

uint64_t sub_1C3229294()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #3 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(char a1)
{
  closure #3 in ParticipantVideoView.updateVideoLayers(with:localDeviceOrientation:isLocal:animated:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type ParticipantVideoView.ViewModel and conformance ParticipantVideoView.ViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantVideoView.ViewModel and conformance ParticipantVideoView.ViewModel;
  if (!lazy protocol witness table cache variable for type ParticipantVideoView.ViewModel and conformance ParticipantVideoView.ViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantVideoView.ViewModel and conformance ParticipantVideoView.ViewModel);
  }
  return result;
}

uint64_t type metadata accessor for ParticipantVideoView()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ParticipantVideoView.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C3229438);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantVideoView.Errors()
{
  return &type metadata for ParticipantVideoView.Errors;
}

uint64_t destroy for ParticipantVideoView.ViewModel(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ParticipantVideoView.ViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x84uLL);
  return a1;
}

uint64_t assignWithCopy for ParticipantVideoView.ViewModel(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
  *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
  *(unsigned char *)(a1 + 171) = *((unsigned char *)a2 + 171);
  return a1;
}

void *__swift_memcpy172_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xACuLL);
}

uint64_t assignWithTake for ParticipantVideoView.ViewModel(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantVideoView.ViewModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 172))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantVideoView.ViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 168) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 172) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 172) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantVideoView.ViewModel()
{
  return &type metadata for ParticipantVideoView.ViewModel;
}

uint64_t sub_1C32297E8()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in ParticipantVideoView.hideSnapshot(animated:)()
{
  return closure #1 in ParticipantVideoView.hideSnapshot(animated:)(*(void *)(v0 + 16));
}

void partial apply for closure #2 in ParticipantVideoView.hideSnapshot(animated:)(uint64_t a1)
{
  closure #2 in ParticipantVideoView.hideSnapshot(animated:)(a1, *(void *)(v1 + 16));
}

uint64_t dispatch thunk of ParticipantTile.isInRoster.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantTile.isInRoster.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ParticipantTile.isInRoster.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ParticipantTile.customCornerRadius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ParticipantTile.customCornerRadius.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ParticipantTile.customCornerRadius.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ParticipantTile.isExpanded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ParticipantTile.isExpanded.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ParticipantTile.isExpanded.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ParticipantTile.updateDebugOverlayLabel(text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of ParticipantTile.updateLayerTransform(to:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t (**)(_OWORD *))(a3 + 88);
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  _OWORD v6[2] = a1[2];
  return v3(v6);
}

id PickablePerson.__allocating_init(contact:handle:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return PickablePerson.init(contact:handle:)(a1, a2);
}

void *PickablePerson.contact.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit14PickablePerson_contact);
  id v2 = v1;
  return v1;
}

id PickablePerson.handle.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit14PickablePerson_handle);
}

uint64_t PickablePerson.address.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit14PickablePerson_address);
  swift_bridgeObjectRetain();
  return v1;
}

id PickablePerson.init(contact:handle:)(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit14PickablePerson_contact] = a1;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit14PickablePerson_handle] = a2;
  id v4 = a1;
  id v5 = a2;
  long long v6 = v2;
  id v7 = objc_msgSend(v5, sel_value);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v11 = (uint64_t *)&v6[OBJC_IVAR____TtC15ConversationKit14PickablePerson_address];
  uint64_t *v11 = v8;
  v11[1] = v10;

  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for PickablePerson();
  id v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

uint64_t type metadata accessor for PickablePerson()
{
  return self;
}

id PickablePerson.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PickablePerson.init()()
{
}

id PickablePerson.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PickablePerson();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for PickablePerson(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PickablePerson);
}

uint64_t dispatch thunk of PickablePerson.__allocating_init(contact:handle:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void CaptionsPauseTransition.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static CaptionsPauseTransition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int CaptionsPauseTransition.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static CaptionsPausedState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 4) {
    return v3 == 4;
  }
  if (v3 == 4) {
    return 0;
  }
  if (v2 != 3) {
    return v3 != 3 && v2 == v3;
  }
  return v3 == 3;
}

Swift::Void __swiftcall CaptionsStateController.updateCaptionsEnablement(pauseTransitionIfAllowed:)(ConversationKit::CaptionsPauseTransition pauseTransitionIfAllowed)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  int v5 = *(unsigned __int8 *)pauseTransitionIfAllowed;
  if (((*(uint64_t (**)())(v2 + 8))() & 1) == 0
    || (uint64_t v6 = OUTLINED_FUNCTION_2_76(), (v7(v6) & 1) != 0)
    || (uint64_t v8 = *(uint64_t (**)(uint64_t))(v3 + 16), v9 = OUTLINED_FUNCTION_4_76(), v8(v9) == 2)
    || ((uint64_t v10 = OUTLINED_FUNCTION_4_76(), v8(v10) != 1) ? (v11 = v5 == 0) : (v11 = 1), v11))
  {
    uint64_t v12 = OUTLINED_FUNCTION_1_93();
    v13(v12);
    if (v49[1] == 4)
    {
      objc_super v14 = *(void (**)(uint64_t))(v3 + 24);
      uint64_t v15 = OUTLINED_FUNCTION_6_70();
      v14(v15);
      if (v48 != 3 && v48)
      {
        uint64_t v16 = OUTLINED_FUNCTION_6_70();
        v14(v16);
      }
      OUTLINED_FUNCTION_7_65();
      v17();
    }
    goto LABEL_14;
  }
  if (v5 != 1)
  {
    uint64_t v28 = OUTLINED_FUNCTION_1_93();
    v29(v28);
    if (v47 == 4)
    {
      uint64_t v30 = *(uint64_t (**)(uint64_t))(v3 + 56);
      uint64_t v31 = OUTLINED_FUNCTION_5_78();
      if (v30(v31))
      {
        uint64_t v32 = *(void (**)(uint64_t))(v3 + 24);
        uint64_t v33 = OUTLINED_FUNCTION_0_76();
        v32(v33);
        if (v46 == 3 || !v46)
        {
          int v18 = 1;
        }
        else
        {
          uint64_t v34 = OUTLINED_FUNCTION_0_76();
          v32(v34);
          if (v45 == 3) {
            int v18 = 1;
          }
          else {
            int v18 = v45;
          }
        }
      }
      else
      {
        int v18 = 0;
      }
      uint64_t v39 = OUTLINED_FUNCTION_5_78();
      char v19 = v30(v39);
LABEL_44:
      if (v18 != 1) {
        goto LABEL_15;
      }
      goto LABEL_45;
    }
LABEL_14:
    LOBYTE(v18) = 0;
    char v19 = 0;
    goto LABEL_15;
  }
  uint64_t v20 = OUTLINED_FUNCTION_1_93();
  v21(v20);
  if (v44 == 4)
  {
    uint64_t v22 = *(uint64_t (**)(uint64_t))(v3 + 56);
    uint64_t v23 = OUTLINED_FUNCTION_3_85();
    char v19 = v22(v23);
    uint64_t v24 = OUTLINED_FUNCTION_3_85();
    if ((v22(v24) & 1) == 0)
    {
      LOBYTE(v18) = 0;
      goto LABEL_15;
    }
    uint64_t v25 = *(void (**)(uint64_t))(v3 + 24);
    uint64_t v26 = OUTLINED_FUNCTION_0_76();
    v25(v26);
    if (v43 == 3) {
      goto LABEL_45;
    }
    if (!v43) {
      goto LABEL_45;
    }
    uint64_t v27 = OUTLINED_FUNCTION_0_76();
    v25(v27);
    int v18 = v42;
    if (v42 == 3) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  OUTLINED_FUNCTION_7_65();
  v35();
  uint64_t v36 = OUTLINED_FUNCTION_2_76();
  if ((v37(v36) & 1) == 0) {
    goto LABEL_14;
  }
  if (v44 <= 1u) {
    LOBYTE(v18) = 1;
  }
  else {
    LOBYTE(v18) = v44;
  }
  char v19 = 1;
  if (v44 <= 3u && v44 != 2)
  {
LABEL_45:
    uint64_t v40 = OUTLINED_FUNCTION_2_76();
    if (v41(v40)) {
      LOBYTE(v18) = 1;
    }
    else {
      LOBYTE(v18) = 2;
    }
  }
LABEL_15:
  v49[0] = v18;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v3 + 80))(v49, v19 & 1, v4, v3);
}

unint64_t lazy protocol witness table accessor for type CaptionsPauseTransition and conformance CaptionsPauseTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptionsPauseTransition and conformance CaptionsPauseTransition;
  if (!lazy protocol witness table cache variable for type CaptionsPauseTransition and conformance CaptionsPauseTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptionsPauseTransition and conformance CaptionsPauseTransition);
  }
  return result;
}

uint64_t dispatch thunk of CaptionsStateController.isFullScreen.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CaptionsStateController.pipState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CaptionsStateController.captionsLayoutState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CaptionsStateController.captionsPausedState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CaptionsStateController.captionsPausedState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CaptionsStateController.captionsPausedState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CaptionsStateController.isCaptioningEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CaptionsStateController.captionsBubbleModeIsAllowed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CaptionsStateController.isScreenSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CaptionsStateController.implementNewCaptionsState(newLayoutState:newRecognizerState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

unsigned char *storeEnumTagSinglePayload for CaptionsPauseTransition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C322A1F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptionsPauseTransition()
{
  return &type metadata for CaptionsPauseTransition;
}

uint64_t getEnumTagSinglePayload for CaptionsPausedState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C322A2ECLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  if (*a1 <= 3u) {
    int v7 = 3;
  }
  else {
    int v7 = *a1;
  }
  unsigned int v8 = v7 - 4;
  if (*a1 < 3u) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for CaptionsPausedState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1C322A3D4);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for CaptionsPausedState(unsigned __int8 *a1)
{
  if (*a1 <= 3u) {
    int v1 = 3;
  }
  else {
    int v1 = *a1;
  }
  unsigned int v2 = v1 - 3;
  if (*a1 >= 3u) {
    return v2;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for CaptionsPausedState(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptionsPausedState()
{
  return &type metadata for CaptionsPausedState;
}

uint64_t key path getter for ConversationControlsShareCardViewController.delegate : ConversationControlsShareCardViewController@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for ConversationControlsShareCardViewController.delegate : ConversationControlsShareCardViewController(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t ConversationControlsShareCardViewController.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

void ConversationControlsShareCardViewController.delegate.setter(void *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign();
}

void (*ConversationControlsShareCardViewController.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ConversationControlsShareCardViewController.delegate.modify;
}

void ConversationControlsShareCardViewController.delegate.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  *(void *)((char *)(*a1)[6] + (void)(*a1)[5] + 8) = (*a1)[4];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

uint64_t key path getter for ConversationControlsShareCardViewController.updateSheetDetent : ConversationControlsShareCardViewController@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_updateSheetDetent);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNComposeRecipient) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for ConversationControlsShareCardViewController.updateSheetDetent : ConversationControlsShareCardViewController(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNComposeRecipient) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_updateSheetDetent);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
}

uint64_t ConversationControlsShareCardViewController.updateSheetDetent.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v0);
  return v1;
}

uint64_t ConversationControlsShareCardViewController.updateSheetDetent.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = *v2;
  *uint64_t v2 = a1;
  v2[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
}

uint64_t (*ConversationControlsShareCardViewController.updateSheetDetent.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id ConversationControlsShareCardViewController.backgroundMaterialView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___backgroundMaterialView;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___backgroundMaterialView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___backgroundMaterialView);
  }
  else
  {
    id v4 = closure #1 in ConversationControlsShareCardViewController.backgroundMaterialView.getter();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ConversationControlsShareCardViewController.backgroundMaterialView.getter()
{
  id v0 = objc_msgSend(self, sel_effectWithStyle_, 18);
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v0);

  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v1;
}

id closure #1 in ConversationControlsShareCardViewController.headerView.getter(char *a1)
{
  id v1 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (v1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)swift_getObjectType();
    id v3 = v1;
    BOOL v4 = objc_msgSendSuper2(&v14, sel_modalPresentationStyle) == (id)7;
    State.init(wrappedValue:)();
    id v5 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingAutoResizableController<ShareCardHeaderView>));
    id v6 = specialized UIHostingAutoResizableController.init(rootView:canShowWhileLocked:)(v3, v4, v12, v13, 1);
    objc_msgSend(a1, sel_addChildViewController_, v6);
    id result = objc_msgSend(v6, sel_view);
    if (result)
    {
      uint64_t v8 = result;
      objc_msgSend(result, sel_setBackgroundColor_, 0);

      id result = objc_msgSend(v6, sel_view);
      if (result)
      {
        unsigned int v9 = result;
        objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

        objc_msgSend(v6, sel_didMoveToParentViewController_, a1);
        id result = objc_msgSend(v6, sel_view);
        if (result)
        {
          id v10 = result;

          return v10;
        }
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  id v11 = objc_allocWithZone(MEMORY[0x1E4FB1EB0]);
  return objc_msgSend(v11, sel_init);
}

id ConversationControlsShareCardViewController.modalPresentationStyle.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_modalPresentationStyle);
}

id ConversationControlsShareCardViewController.headerView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  BOOL v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    BOOL v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in ConversationControlsShareCardViewController.closeButton.getter(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_buttonWithType_, 7);
  uint64_t v3 = self;
  id v4 = objc_msgSend(v3, sel_labelColor);
  objc_msgSend(v2, sel__setImageColor_forState_, v4, 0);

  id v5 = objc_msgSend(v2, sel_backgroundImageForState_, 0);
  if (v5)
  {
    id v6 = v5;
    id v7 = objc_msgSend(v3, sel_secondarySystemFillColor);
    id v8 = objc_msgSend(v6, sel_imageWithTintColor_, v7);
  }
  else
  {
    id v8 = 0;
  }
  objc_msgSend(v2, sel_setBackgroundImage_forState_, v8, 0);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, a1, sel_didTapCloseButton, 64);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v9) = 1144750080;
  objc_msgSend(v2, sel_setContentHuggingPriority_forAxis_, 0, v9);

  return v2;
}

id ConversationControlsShareCardViewController.scrollView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollView;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1BE0]), sel_init);
    objc_msgSend(v4, sel_setShowsVerticalScrollIndicator_, 0);
    objc_msgSend(v4, sel_setShowsHorizontalScrollIndicator_, 0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id ConversationControlsShareCardViewController.scrollViewContent.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollViewContent;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollViewContent);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollViewContent);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ConversationControlsShareCardViewController.controlsView.getter(char *a1)
{
  uint64_t v2 = type metadata accessor for ShareCardControlsView(0);
  MEMORY[0x1F4188790](v2);
  id v4 = (void *)((char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (v5)
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for ShareCardViewModel(0);
    swift_allocObject();
    id v6 = v5;
    ShareCardViewModel.init(didTapScreenShareButton:didTapAskToScreenShareButton:didTapCollaborateButton:didTapEndSharePlay:)();
    uint64_t v8 = v7;
    v20[3] = type metadata accessor for ConversationControlsManager(0);
    v20[4] = &protocol witness table for ConversationControlsManager;
    v20[0] = v6;
    double v9 = *(void (**)(void *))(*(void *)v8 + 576);
    id v10 = v6;
    v9(v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    *id v4 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DismissAction>.Content);
    swift_storeEnumTagMultiPayload();
    id v11 = (char *)v4 + *(int *)(v2 + 20);
    *(void *)id v11 = partial apply for closure #2 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
    *((void *)v11 + 1) = v8;
    uint64_t v11[16] = 0;
    id v12 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingAutoResizableController<ShareCardControlsView>));
    swift_retain();
    id v13 = specialized UIHostingAutoResizableController.init(rootView:canShowWhileLocked:)((uint64_t)v4, 1);
    objc_msgSend(a1, sel_addChildViewController_, v13);
    id result = objc_msgSend(v13, sel_view);
    if (result)
    {
      uint64_t v15 = result;
      objc_msgSend(result, sel_setBackgroundColor_, 0);

      id result = objc_msgSend(v13, sel_view);
      if (result)
      {
        uint64_t v16 = result;
        objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

        objc_msgSend(v13, sel_didMoveToParentViewController_, a1);
        id result = objc_msgSend(v13, sel_view);
        if (result)
        {
          id v17 = result;

          swift_release();
          return v17;
        }
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  id v18 = objc_allocWithZone(MEMORY[0x1E4FB1EB0]);
  return objc_msgSend(v18, sel_init);
}

void ConversationControlsShareCardViewController.didTapScreenShareButton()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Did tap share card screen share button", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  id v6 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
    ConversationControlsManager.showHUD()();
    ConversationControlsManager.startScreenShareWithCountdown(completion:)();
  }
}

void closure #2 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(NSObject *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    ConversationControlsShareCardViewController.didTapAskToScreenShareButton(_:)(a1);
  }
}

void ConversationControlsShareCardViewController.didTapAskToScreenShareButton(_:)(NSObject *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, "Did tap share card ask to share screen button", v6, 2u);
    MEMORY[0x1C87760E0](v6, -1, -1);
  }

  objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, 0);
  if (!a1)
  {
    a1 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(a1, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C2F90000, a1, v21, "Cannot request to screen share without a handle", v22, 2u);
      MEMORY[0x1C87760E0](v22, -1, -1);
    }
    goto LABEL_17;
  }
  id v7 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (!v7)
  {
    uint64_t v23 = a1;
    goto LABEL_14;
  }
  uint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x290);
  double v9 = a1;
  id v10 = v8();
  if (!v10)
  {
LABEL_14:
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1C2F90000, v24, v25, "Cannot request to screen share without a conversation", v26, 2u);
      MEMORY[0x1C87760E0](v26, -1, -1);
    }

    goto LABEL_17;
  }
  id v11 = v10;
  id v12 = [v10 mergedActiveRemoteParticipants];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = specialized Set.count.getter(v13);
  swift_bridgeObjectRelease();
  if (v14)
  {
    id v15 = [v11 mergedActiveRemoteParticipants];
    uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v17 = v9;
    specialized Sequence.first(where:)(v16, v17);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19)
    {
      id v20 = objc_msgSend(self, sel_sharedInstance);
      a1 = objc_msgSend(v20, sel_conversationManager);

      [a1 requestParticipantToShareScreen:v19 forConversation:v11];
LABEL_17:
      uint64_t v27 = a1;
      goto LABEL_18;
    }
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1C2F90000, v31, v32, "Couldn't find participant for request to screen share", v33, 2u);
      MEMORY[0x1C87760E0](v33, -1, -1);
    }
  }
  else
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1C2F90000, v28, v29, "Cannot request to screen share with no participants", v30, 2u);
      MEMORY[0x1C87760E0](v30, -1, -1);
    }
  }
  uint64_t v27 = v11;
LABEL_18:
}

void ConversationControlsShareCardViewController.didTapCollaborateButton()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Did tap share card collaborate button", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  id v6 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
    objc_msgSend(v7, sel_collaborateButtonTapped);
  }
}

void closure #1 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    a2();
  }
}

uint64_t ConversationControlsShareCardViewController.didTapEndSharePlay()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Did Tap End Share Play", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  id v6 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (!v6)
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    return outlined destroy of Activity?((uint64_t)&v26);
  }
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x8C8))(&v26);
  if (!*((void *)&v27 + 1)) {
    return outlined destroy of Activity?((uint64_t)&v26);
  }
  uint64_t v8 = outlined init with take of Notice(&v26, (uint64_t)v29);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((*v7 & *v6) + 0x290))(v8);
  if (v9)
  {
    id v10 = (void *)v9;
    outlined init with copy of IDSLookupManager((uint64_t)v29, (uint64_t)&v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationActivitySession);
    if (swift_dynamicCast())
    {
      id v11 = v25;
      outlined init with copy of IDSLookupManager((uint64_t)v29, (uint64_t)&v26);
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v24 = (uint64_t)v25;
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        os_log_type_t v25 = (void *)v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        uint64_t v16 = *((void *)&v27 + 1);
        uint64_t v17 = v28;
        __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)&v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
        _os_log_impl(&dword_1C2F90000, v12, v13, "End active SharePlay activity: %s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v15, -1, -1);
        id v20 = v14;
        id v11 = (void *)v24;
        MEMORY[0x1C87760E0](v20, -1, -1);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      }

      id v22 = objc_msgSend(self, sel_sharedInstance);
      id v23 = objc_msgSend(v22, sel_conversationManager);

      objc_msgSend(v23, sel_presentDismissalAlertForActivitySession_onConversation_, v11, v10);
      objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

id ConversationControlsShareCardViewController.gelatoDiscoverabilityView.getter(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  os_log_type_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = closure #1 in ConversationControlsShareCardViewController.sharePlayDiscoverabilityView.getter(v2, a2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    os_log_type_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in ConversationControlsShareCardViewController.sharePlayDiscoverabilityView.getter(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(a1
                  + OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager);
  if (v3) {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x778))();
  }
  id v4 = objc_allocWithZone((Class)type metadata accessor for SharePlayDiscoverabilityMenuView());
  id v5 = SharePlayDiscoverabilityMenuView.init(type:presentationStyle:foregroundApp:)(a2, 1, v3);
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v5;
}

id ConversationControlsShareCardViewController.createSeparator()()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  id v1 = objc_msgSend(self, sel_tertiaryLabelColor);
  objc_msgSend(v0, sel_setBackgroundColor_, v1);

  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v0;
}

id ConversationControlsShareCardViewController.__allocating_init(conversationControlsManager:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationControlsShareCardViewController.init(conversationControlsManager:)(a1);
}

id ConversationControlsShareCardViewController.init(conversationControlsManager:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v4 = &v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_updateSheetDetent];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_foregroundAppCancellable] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___backgroundMaterialView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___headerView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___closeButton] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollViewContent] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___sharePlayDiscoverabilityView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___gelatoDiscoverabilityView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_initWithNibName_bundle_, 0, 0);
}

id ConversationControlsShareCardViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationControlsShareCardViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_updateSheetDetent];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_foregroundAppCancellable] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___backgroundMaterialView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___headerView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___closeButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___scrollViewContent] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___sharePlayDiscoverabilityView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___gelatoDiscoverabilityView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool __swiftcall ConversationControlsShareCardViewController._canShowWhileLocked()()
{
  return 1;
}

Swift::Void __swiftcall ConversationControlsShareCardViewController.viewDidLoad()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ForegroundApp?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v263 = v4;
  MEMORY[0x1F4188790](v5);
  uint64_t v262 = (char *)&v258 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<ForegroundApp?>.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)&v258 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v0, sel_setOverrideUserInterfaceStyle_, 2);
  os_log_type_t v13 = (UIView *)ConversationControlsShareCardViewController.backgroundMaterialView.getter();
  id v14 = objc_msgSend(v0, sel_view);
  if (!v14)
  {
    __break(1u);
    goto LABEL_144;
  }
  uint64_t v15 = v14;
  uint64_t v268 = v13;
  objc_msgSend(v14, sel_addSubview_, v13);

  id v16 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___headerView, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.headerView.getter);
  id v17 = OUTLINED_FUNCTION_13_46();
  if (!v17)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  uint64_t v18 = v17;
  id v275 = v16;
  objc_msgSend(v17, sel_addSubview_, v16);

  id v19 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___closeButton, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.closeButton.getter);
  id v20 = OUTLINED_FUNCTION_13_46();
  if (!v20)
  {
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  os_log_type_t v21 = v20;
  uint64_t v261 = v3;
  objc_msgSend(v20, sel_addSubview_, v19);

  id v22 = ConversationControlsShareCardViewController.scrollView.getter();
  id v23 = OUTLINED_FUNCTION_13_46();
  if (!v23)
  {
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  uint64_t v24 = v23;
  objc_msgSend(v23, sel_addSubview_, v22);

  id v25 = ConversationControlsShareCardViewController.scrollViewContent.getter();
  id v272 = v22;
  long long v26 = v22;
  long long v27 = v25;
  objc_msgSend(v26, sel_addSubview_, v25);
  id v28 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.controlsView.getter);
  objc_msgSend(v27, sel_addSubview_, v28);

  ConversationControlsShareCardViewController.createSeparator()();
  os_log_type_t v29 = (void *)OUTLINED_FUNCTION_16_31();
  id v271 = v30;
  [v29 v31];
  ConversationControlsShareCardViewController.gelatoDiscoverabilityView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___sharePlayDiscoverabilityView, 0);
  os_log_type_t v32 = (void *)OUTLINED_FUNCTION_16_31();
  id v270 = v33;
  [v32 v34];
  ConversationControlsShareCardViewController.createSeparator()();
  uint64_t v35 = (void *)OUTLINED_FUNCTION_16_31();
  id v269 = v36;
  [v35 v37];
  id v38 = ConversationControlsShareCardViewController.gelatoDiscoverabilityView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___gelatoDiscoverabilityView, 1);
  id v274 = v27;
  id v264 = v38;
  objc_msgSend(v27, sel_addSubview_);
  v277.receiver = v1;
  v277.super_class = ObjectType;
  id v39 = objc_msgSendSuper2(&v277, sel_modalPresentationStyle);
  id v273 = v19;
  objc_msgSend(v19, sel_setHidden_, v39 == (id)7);
  id v40 = OUTLINED_FUNCTION_13_46();
  if (!v40)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  uint64_t v41 = v40;
  UIView.addConstraintsToFill(_:insets:)(v268, *MEMORY[0x1E4FB12A8]);

  uint64_t v276 = MEMORY[0x1E4FBC860];
  id v42 = v275;
  id v43 = objc_msgSend(v275, sel_topAnchor);
  id v44 = OUTLINED_FUNCTION_13_46();
  if (!v44)
  {
LABEL_148:
    __break(1u);
    goto LABEL_149;
  }
  unsigned __int8 v45 = v44;
  uint64_t v258 = v12;
  uint64_t v259 = v9;
  uint64_t v260 = v7;
  id v46 = objc_msgSend(v44, sel_safeAreaLayoutGuide);

  id v47 = objc_msgSend(v46, sel_topAnchor);
  id v49 = OUTLINED_FUNCTION_14_40(v48, sel_constraintEqualToAnchor_);

  id v50 = objc_msgSend(v42, sel_leadingAnchor);
  id v51 = OUTLINED_FUNCTION_13_46();
  if (!v51)
  {
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  os_log_type_t v52 = v51;
  id v53 = objc_msgSend(v51, sel_safeAreaLayoutGuide);

  id v54 = objc_msgSend(v53, sel_leadingAnchor);
  id v55 = objc_msgSend(v50, sel_constraintEqualToAnchor_constant_, v54, 16.0);

  unint64_t v56 = (unint64_t)objc_msgSend(v42, sel_trailingAnchor);
  if (v39 == (id)7)
  {
    id v57 = objc_msgSend(v1, sel_view);
    uint64_t v58 = &selRef_ringButton;
    if (!v57)
    {
LABEL_162:
      __break(1u);
      return;
    }
    uint64_t v59 = v57;
    id v60 = objc_msgSend(v57, sel_safeAreaLayoutGuide);

    id v61 = objc_msgSend(v60, sel_trailingAnchor);
    id v62 = v273;
  }
  else
  {
    id v62 = v273;
    id v61 = objc_msgSend(v273, sel_leadingAnchor);
    uint64_t v58 = &selRef_ringButton;
  }
  id v63 = OUTLINED_FUNCTION_29_19();

  OUTLINED_FUNCTION_9_54();
  if (v64)
  {
    OUTLINED_FUNCTION_12_42();
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v65 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v65, 3))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49(v65 + 3);
    specialized Array._endMutation()();
    id v49 = v49;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_2_77();
    if (!v66) {
      goto LABEL_16;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_16:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v67 = v55;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_77();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v68 = v63;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_77();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  unint64_t v69 = (unint64_t)objc_msgSend(v62, sel_topAnchor);
  id v70 = objc_msgSend(v275, sel_topAnchor);
  id v71 = objc_msgSend((id)v69, sel_constraintEqualToAnchor_constant_, v70, 16.0);

  id v72 = objc_msgSend(v62, sel_trailingAnchor);
  id v73 = OUTLINED_FUNCTION_20_30();
  if (!v73) {
    goto LABEL_150;
  }
  uint64_t v74 = v73;
  id v75 = objc_msgSend(v73, sel_safeAreaLayoutGuide);

  id v76 = objc_msgSend(v75, sel_trailingAnchor);
  id v77 = OUTLINED_FUNCTION_29_19();

  OUTLINED_FUNCTION_9_54();
  if (v78)
  {
    swift_bridgeObjectRetain();
    uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v79 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v79, 2))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49(v79 + 2);
    specialized Array._endMutation()();
    id v71 = v71;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_23_28();
    if (!v66) {
      goto LABEL_25;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_25:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v80 = v77;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_23_28();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v81 = v272;
  id v82 = objc_msgSend(v272, sel_topAnchor);
  id v83 = OUTLINED_FUNCTION_10_49((uint64_t)objc_msgSend(v275, sel_bottomAnchor));

  id v84 = OUTLINED_FUNCTION_22_26();
  id v85 = OUTLINED_FUNCTION_11_38();
  if (!v85) {
    goto LABEL_151;
  }
  uint64_t v86 = v85;
  id v87 = objc_msgSend(v85, sel_leadingAnchor);

  id v88 = OUTLINED_FUNCTION_3_29();
  id v89 = objc_msgSend(v81, sel_trailingAnchor);
  id v90 = OUTLINED_FUNCTION_11_38();
  if (!v90)
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  uint64_t v91 = v90;
  id v92 = objc_msgSend(v90, sel_trailingAnchor);

  id v94 = OUTLINED_FUNCTION_14_40(v93, v58[181]);
  id v95 = objc_msgSend(v81, sel_bottomAnchor);
  id v96 = OUTLINED_FUNCTION_11_38();
  if (!v96)
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  uint64_t v97 = v96;
  id v98 = objc_msgSend(v96, sel_bottomAnchor);

  id v99 = OUTLINED_FUNCTION_4_77();
  OUTLINED_FUNCTION_9_54();
  if (v100)
  {
    OUTLINED_FUNCTION_6_71();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30_19();
  }
  else
  {
    OUTLINED_FUNCTION_24_24();
  }
  if (__OFADD__(v98, 4))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49((uint64_t)v98 + 4);
    specialized Array._endMutation()();
    id v83 = v83;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_1_94();
    if (!v66) {
      goto LABEL_34;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_34:
  OUTLINED_FUNCTION_27_22();
  specialized Array._endMutation()();
  id v101 = v88;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_28_18();
  specialized Array._endMutation()();
  id v102 = v94;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_25_24();
  specialized Array._endMutation()();
  id v103 = v99;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_26_22();
  specialized Array._endMutation()();

  id v104 = v274;
  id v105 = objc_msgSend(v274, sel_topAnchor);
  id v106 = v272;
  id v107 = objc_msgSend(v272, sel_contentLayoutGuide);
  id v108 = objc_msgSend(v107, (SEL)&selRef_insertAttributedString_atIndex_ + 3);

  char v109 = &selRef_ringButton;
  double v110 = (void *)OUTLINED_FUNCTION_21_27();
  id v267 = objc_msgSend(v110, v111, v108);

  id v112 = OUTLINED_FUNCTION_22_26();
  id v113 = OUTLINED_FUNCTION_15_41();
  id v114 = objc_msgSend(v113, sel_leadingAnchor);

  uint64_t v115 = (void *)OUTLINED_FUNCTION_21_27();
  id v266 = objc_msgSend(v115, v116, v114);

  id v117 = OUTLINED_FUNCTION_22_26();
  id v118 = objc_msgSend(v106, sel_frameLayoutGuide);
  id v119 = objc_msgSend(v118, sel_leadingAnchor);

  id v265 = OUTLINED_FUNCTION_14_40(v120, sel_constraintEqualToAnchor_);
  id v121 = objc_msgSend(v104, sel_trailingAnchor);
  id v122 = OUTLINED_FUNCTION_15_41();
  id v123 = objc_msgSend(v122, sel_trailingAnchor);

  id v125 = OUTLINED_FUNCTION_14_40(v124, sel_constraintEqualToAnchor_);
  unint64_t v126 = (unint64_t)objc_msgSend(v104, sel_trailingAnchor);
  id v127 = objc_msgSend(v106, sel_frameLayoutGuide);
  id v128 = objc_msgSend(v127, sel_trailingAnchor);

  uint64_t v129 = (void *)OUTLINED_FUNCTION_21_27();
  id v131 = objc_msgSend(v129, v130, v128);

  id v132 = objc_msgSend(v104, sel_bottomAnchor);
  id v133 = OUTLINED_FUNCTION_15_41();
  id v134 = objc_msgSend(v133, sel_bottomAnchor);

  uint64_t v135 = (void *)OUTLINED_FUNCTION_21_27();
  id v137 = objc_msgSend(v135, v136, v134);

  OUTLINED_FUNCTION_9_54();
  if (v138)
  {
    swift_bridgeObjectRetain();
    uint64_t v139 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v139 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v139, 6))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49(v139 + 6);
    specialized Array._endMutation()();
    char v109 = (char **)v267;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_3_86();
    if (!v66) {
      goto LABEL_44;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_44:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v140 = v266;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_86();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v141 = v265;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_86();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v142 = v125;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_86();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v143 = v131;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_86();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v144 = v137;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_3_86();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v145 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.controlsView.getter);
  id v146 = objc_msgSend(v145, sel_topAnchor);

  id v147 = objc_msgSend(v274, sel_topAnchor);
  id v148 = objc_msgSend(v146, sel_constraintEqualToAnchor_, v147);

  id v149 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.controlsView.getter);
  id v150 = objc_msgSend(v149, sel_leadingAnchor);

  id v151 = objc_msgSend(v275, sel_leadingAnchor);
  id v152 = objc_msgSend(v150, sel_constraintEqualToAnchor_, v151);

  id v153 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.controlsView.getter);
  id v154 = objc_msgSend(v153, sel_trailingAnchor);

  unint64_t v155 = (unint64_t)objc_msgSend(v273, sel_trailingAnchor);
  id v156 = objc_msgSend(v154, sel_constraintEqualToAnchor_, v155);

  OUTLINED_FUNCTION_9_54();
  if (v157)
  {
    OUTLINED_FUNCTION_12_42();
    uint64_t v158 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v158 = *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v159 = v271;
  if (__OFADD__(v158, 3))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49(v158 + 3);
    specialized Array._endMutation()();
    id v148 = v148;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_2_77();
    if (!v66) {
      goto LABEL_58;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_58:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v160 = v152;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_77();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v161 = v156;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_77();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v162 = objc_msgSend(v159, sel_topAnchor);
  id v163 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___controlsView, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.controlsView.getter);
  id v164 = objc_msgSend(v163, sel_bottomAnchor);

  id v165 = objc_msgSend(v162, sel_constraintEqualToAnchor_constant_, v164, 16.0);
  LODWORD(v166) = 1144750080;
  objc_msgSend(v165, sel_setPriority_, v166);
  id v167 = objc_msgSend(v159, sel_leadingAnchor);
  id v168 = OUTLINED_FUNCTION_7_66();
  if (!v168) {
    goto LABEL_154;
  }
  id v169 = v168;
  id v170 = objc_msgSend(v168, sel_leadingAnchor);

  id v171 = OUTLINED_FUNCTION_3_29();
  id v172 = objc_msgSend(v159, sel_trailingAnchor);
  id v173 = OUTLINED_FUNCTION_7_66();
  if (!v173)
  {
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  uint64_t v174 = v173;
  id v175 = objc_msgSend(v173, sel_trailingAnchor);

  id v176 = OUTLINED_FUNCTION_4_77();
  id v177 = objc_msgSend(v159, sel_heightAnchor);
  id v178 = objc_msgSend(v177, sel_constraintEqualToConstant_, 0.5);

  OUTLINED_FUNCTION_9_54();
  if (v179)
  {
    OUTLINED_FUNCTION_6_71();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30_19();
  }
  else
  {
    OUTLINED_FUNCTION_24_24();
  }
  if (__OFADD__(v175, 4))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49((uint64_t)v175 + 4);
    specialized Array._endMutation()();
    id v165 = v165;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_1_94();
    if (!v66) {
      goto LABEL_68;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_68:
  OUTLINED_FUNCTION_27_22();
  specialized Array._endMutation()();
  id v180 = v171;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_28_18();
  specialized Array._endMutation()();
  id v181 = v176;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_26_22();
  specialized Array._endMutation()();
  id v182 = v178;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_25_24();
  specialized Array._endMutation()();

  id v183 = v270;
  id v184 = objc_msgSend(v270, sel_topAnchor);
  id v267 = OUTLINED_FUNCTION_10_49((uint64_t)objc_msgSend(v271, sel_bottomAnchor));

  unint64_t v185 = (unint64_t)objc_msgSend(v183, sel_leadingAnchor);
  id v186 = objc_msgSend(v1, sel_view);
  if (!v186) {
    goto LABEL_156;
  }
  id v187 = v186;
  id v188 = &selRef_ringButton;
  id v189 = objc_msgSend(v186, sel_safeAreaLayoutGuide);

  id v190 = objc_msgSend(v189, sel_leadingAnchor);
  id v192 = OUTLINED_FUNCTION_14_40(v191, sel_constraintEqualToAnchor_);

  id v193 = objc_msgSend(v183, sel_trailingAnchor);
  id v194 = OUTLINED_FUNCTION_7_66();
  if (!v194)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  unint64_t v195 = v194;
  id v196 = objc_msgSend(v194, sel_safeAreaLayoutGuide);

  id v197 = objc_msgSend(v196, sel_trailingAnchor);
  id v198 = OUTLINED_FUNCTION_4_77();

  OUTLINED_FUNCTION_9_54();
  if (v199)
  {
    OUTLINED_FUNCTION_12_42();
    uint64_t v200 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v200 = *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v201 = v270;
  if (__OFADD__(v200, 3))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49(v200 + 3);
    specialized Array._endMutation()();
    id v188 = (char **)v267;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_2_77();
    if (!v66) {
      goto LABEL_80;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_80:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v202 = v192;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_77();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v203 = v198;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_77();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (one-time initialization token for appShelfSeparatorInsetBuffer != -1) {
    swift_once();
  }
  double v204 = *(double *)&static Layout.ShareCard.appShelfSeparatorInsetBuffer;
  id v205 = objc_msgSend(self, sel_sharedApplication);
  id v206 = objc_msgSend(v205, sel_preferredContentSizeCategory);

  LOBYTE(v205) = static UIContentSizeCategory.>= infix(_:_:)();
  if (v205) {
    double v204 = 16.0;
  }
  id v207 = v269;
  id v208 = objc_msgSend(v269, sel_topAnchor);
  id v209 = objc_msgSend(v201, sel_bottomAnchor);
  id v210 = objc_msgSend(v208, sel_constraintEqualToAnchor_constant_, v209, v204);

  LODWORD(v211) = 1144750080;
  objc_msgSend(v210, sel_setPriority_, v211);
  id v212 = objc_msgSend(v207, sel_leadingAnchor);
  id v213 = OUTLINED_FUNCTION_7_66();
  if (!v213) {
    goto LABEL_158;
  }
  uint64_t v214 = v213;
  id v215 = objc_msgSend(v213, sel_leadingAnchor);

  id v216 = OUTLINED_FUNCTION_3_29();
  id v217 = objc_msgSend(v207, sel_trailingAnchor);
  id v218 = OUTLINED_FUNCTION_7_66();
  if (!v218)
  {
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
  uint64_t v219 = v218;
  id v220 = objc_msgSend(v218, sel_trailingAnchor);

  id v221 = OUTLINED_FUNCTION_4_77();
  id v222 = objc_msgSend(v207, sel_heightAnchor);
  id v223 = objc_msgSend(v222, sel_constraintEqualToConstant_, 0.5);

  OUTLINED_FUNCTION_9_54();
  if (v224)
  {
    OUTLINED_FUNCTION_6_71();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30_19();
  }
  else
  {
    OUTLINED_FUNCTION_24_24();
  }
  if (__OFADD__(v220, 4))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_8_49((uint64_t)v220 + 4);
    specialized Array._endMutation()();
    id v210 = v210;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_1_94();
    if (!v66) {
      goto LABEL_94;
    }
  }
  OUTLINED_FUNCTION_0_77();
LABEL_94:
  OUTLINED_FUNCTION_27_22();
  specialized Array._endMutation()();
  id v225 = v216;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_28_18();
  specialized Array._endMutation()();
  id v226 = v221;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_26_22();
  specialized Array._endMutation()();
  id v227 = v223;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  id v228 = v264;
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_25_24();
  specialized Array._endMutation()();

  id v229 = objc_msgSend(v228, sel_topAnchor);
  id v267 = OUTLINED_FUNCTION_10_49((uint64_t)objc_msgSend(v269, sel_bottomAnchor));

  id v230 = OUTLINED_FUNCTION_22_26();
  id v231 = OUTLINED_FUNCTION_20_30();
  if (!v231) {
    goto LABEL_160;
  }
  id v232 = v231;
  id v233 = objc_msgSend(v231, sel_safeAreaLayoutGuide);

  id v234 = objc_msgSend(v233, sel_leadingAnchor);
  id v236 = OUTLINED_FUNCTION_14_40(v235, sel_constraintEqualToAnchor_);

  id v237 = objc_msgSend(v228, sel_trailingAnchor);
  id v238 = OUTLINED_FUNCTION_11_38();
  if (!v238)
  {
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  uint64_t v239 = v238;
  id v240 = objc_msgSend(v238, sel_safeAreaLayoutGuide);

  id v241 = objc_msgSend(v240, sel_trailingAnchor);
  id v242 = OUTLINED_FUNCTION_4_77();

  uint64_t v243 = &selRef_ringButton;
  id v244 = objc_msgSend(v228, sel_bottomAnchor);
  id v245 = objc_msgSend(v274, sel_bottomAnchor);
  id v246 = OUTLINED_FUNCTION_4_77();

  OUTLINED_FUNCTION_9_54();
  if (v247)
  {
    OUTLINED_FUNCTION_6_71();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30_19();
  }
  else
  {
    OUTLINED_FUNCTION_24_24();
  }
  if (__OFADD__(v245, 4))
  {
    __break(1u);
    goto LABEL_142;
  }
  OUTLINED_FUNCTION_8_49((uint64_t)v245 + 4);
  specialized Array._endMutation()();
  uint64_t v243 = (char **)v267;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
LABEL_142:
  }
    OUTLINED_FUNCTION_0_77();
  OUTLINED_FUNCTION_27_22();
  specialized Array._endMutation()();
  id v248 = v236;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_28_18();
  specialized Array._endMutation()();
  id v249 = v242;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_25_24();
  specialized Array._endMutation()();
  id v250 = v246;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_94();
  if (v66) {
    OUTLINED_FUNCTION_0_77();
  }
  OUTLINED_FUNCTION_26_22();
  specialized Array._endMutation()();

  uint64_t v251 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v251, sel_activateConstraints_, isa);

  ConversationControlsShareCardViewController.updateSize()();
  uint64_t v253 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_conversationControlsManager];
  if (v253)
  {
    uint64_t v254 = v262;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v253) + 0x790))();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<ForegroundApp?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ForegroundApp?>.Publisher);
    lazy protocol witness table accessor for type ForegroundApp? and conformance <A> A?();
    id v255 = v258;
    uint64_t v256 = v261;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v263 + 8))(v254, v256);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<ForegroundApp?>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<ForegroundApp?>.Publisher>);
    uint64_t v257 = v260;
    uint64_t v253 = (void *)Publisher<>.sink(receiveValue:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v259 + 8))(v255, v257);
  }
  else
  {
  }
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_foregroundAppCancellable] = v253;
  swift_release();
}

void ConversationControlsShareCardViewController.updateSize()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v3 = ConversationControlsShareCardViewController.scrollView.getter();
  id v4 = ConversationControlsShareCardViewController.scrollViewContent.getter();
  objc_msgSend(v4, sel_systemLayoutSizeFittingSize_, 375.0, *(double *)(MEMORY[0x1E4FB2C68] + 8));
  double v6 = v5;
  double v8 = v7;

  objc_msgSend(v3, sel_setContentSize_, v6, v8);
  id v9 = ConversationControlsShareCardViewController.scrollView.getter();
  objc_msgSend(v9, sel_contentSize);
  double v11 = v10;

  id v12 = ConversationControlsShareCardViewController.scrollView.getter();
  objc_msgSend(v12, sel_frame);
  double v14 = v13;

  double v15 = v11 + v14;
  v22.receiver = v1;
  v22.super_class = ObjectType;
  if (objc_msgSendSuper2(&v22, sel_modalPresentationStyle) == (id)7)
  {
    id v16 = ConversationControlsShareCardViewController.scrollView.getter();
    objc_msgSend(v16, sel_contentSize);
    double v18 = v17;

    objc_msgSend(v1, sel_setPreferredContentSize_, v18, v15);
  }
  else
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
    *(double *)(swift_allocObject() + 16) = v15;
    id v19 = (void *)static UISheetPresentationControllerDetent.custom(identifier:resolver:)();
    swift_release();
    id v20 = &v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_updateSheetDetent];
    swift_beginAccess();
    os_log_type_t v21 = *(void (**)(void *))v20;
    if (*(void *)v20)
    {
      swift_retain();
      v21(v19);
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v21);
    }
  }
}

void closure #1 in ConversationControlsShareCardViewController.viewDidLoad()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  id v3 = (void *)MEMORY[0x1C8776240](v2);
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

Swift::Void __swiftcall ConversationControlsShareCardViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  v8.receiver = v1;
  v8.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v8, sel_viewDidDisappear_, a1);
  id v3 = &v1[OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController_delegate];
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    double v5 = (void *)v4;
    uint64_t v6 = *((void *)v3 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 8))(v1, ObjectType, v6);
  }
}

void ConversationControlsShareCardViewController.modalPresentationStyle.setter(uint64_t a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_setModalPresentationStyle_, a1);
  ConversationControlsShareCardViewController.modalPresentationStyle.didset();
}

void ConversationControlsShareCardViewController.modalPresentationStyle.didset()
{
  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  BOOL v1 = objc_msgSendSuper2(&v3, sel_modalPresentationStyle) == (id)7;
  id v2 = ConversationControlsShareCardViewController.headerView.getter(&OBJC_IVAR____TtC15ConversationKit43ConversationControlsShareCardViewController____lazy_storage___closeButton, (uint64_t (*)(uint64_t))closure #1 in ConversationControlsShareCardViewController.closeButton.getter);
  objc_msgSend(v2, sel_setHidden_, v1);
}

void (*ConversationControlsShareCardViewController.modalPresentationStyle.modify(objc_super **a1))(objc_super **a1, char a2)
{
  objc_super v3 = (objc_super *)malloc(0x48uLL);
  *a1 = v3;
  v3[3].super_class = v1;
  uint64_t ObjectType = swift_getObjectType();
  v3[4].receiver = (id)ObjectType;
  v3->receiver = v1;
  v3->super_class = (Class)ObjectType;
  v3[3].receiver = [(objc_super *)v3 modalPresentationStyle];
  return ConversationControlsShareCardViewController.modalPresentationStyle.modify;
}

void ConversationControlsShareCardViewController.modalPresentationStyle.modify(objc_super **a1, char a2)
{
  id v2 = *a1;
  id receiver = (*a1)[3].receiver;
  Class super_class = (*a1)[3].super_class;
  uint64_t v4 = (objc_class *)(*a1)[4].receiver;
  uint64_t v6 = *a1;
  if (a2)
  {
    v6[1].id receiver = super_class;
    v6[1].Class super_class = v4;
    objc_msgSendSuper2(v6 + 1, sel_setModalPresentationStyle_, receiver);
  }
  else
  {
    v6[2].id receiver = super_class;
    v6[2].Class super_class = v4;
    objc_msgSendSuper2(v6 + 2, sel_setModalPresentationStyle_, receiver);
    ConversationControlsShareCardViewController.modalPresentationStyle.didset();
  }
  free(v2);
}

Swift::Void __swiftcall ConversationControlsShareCardViewController.viewDidLayoutSubviews()()
{
  v1.id receiver = v0;
  v1.Class super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_viewDidLayoutSubviews);
  ConversationControlsShareCardViewController.updateSize()();
}

id ConversationControlsShareCardViewController.didTapCloseButton()()
{
  objc_super v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  objc_super v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    double v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Did tap share card close button", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  return objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

id ConversationControlsShareCardViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_type_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void ConversationControlsShareCardViewController.init(nibName:bundle:)()
{
}

id ConversationControlsShareCardViewController.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized UIHostingAutoResizableController.init(rootView:canShowWhileLocked:)(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for UIHostingControllerSizingOptions();
  MEMORY[0x1F4188790](v9);
  double v10 = (void *)MEMORY[0x1E4FBC8C8];
  double v11 = (char *)v5
      + *(void *)(class metadata base offset for UIHostingAutoResizableController + (*MEMORY[0x1E4FBC8C8] & *v5) + 16);
  *(void *)double v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v11[16] = 1;
  *((unsigned char *)v5 + *(void *)(class metadata base offset for UIHostingAutoResizableController + (*v10 & *v5) + 24)) = a5;
  swift_retain();
  id v12 = a1;
  id v13 = a3;
  double v14 = (void *)UIHostingController.init(rootView:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIHostingControllerSizingOptions>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C37696D0;
  id v15 = v14;
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  lazy protocol witness table accessor for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIHostingControllerSizingOptions]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [UIHostingControllerSizingOptions] and conformance [A], &demangling cache variable for type metadata for [UIHostingControllerSizingOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of UIHostingController.sizingOptions.setter();
  swift_release();

  return v15;
}

id specialized UIHostingAutoResizableController.init(rootView:canShowWhileLocked:)(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for UIHostingControllerSizingOptions();
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = type metadata accessor for ShareCardControlsView(0);
  MEMORY[0x1F4188790](v6 - 8);
  objc_super v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = (char *)v2
     + *(void *)(class metadata base offset for UIHostingAutoResizableController + (*MEMORY[0x1E4FBC8C8] & *v2) + 16);
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  *((unsigned char *)v2 + *(void *)(class metadata base offset for UIHostingAutoResizableController + (*v8 & *v2) + 24)) = a2;
  outlined init with copy of ShareCardControlsView(a1, (uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v10 = (void *)UIHostingController.init(rootView:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIHostingControllerSizingOptions>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1C37696D0;
  id v12 = v10;
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  v14[1] = v11;
  lazy protocol witness table accessor for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIHostingControllerSizingOptions]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [UIHostingControllerSizingOptions] and conformance [A], &demangling cache variable for type metadata for [UIHostingControllerSizingOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of UIHostingController.sizingOptions.setter();

  outlined destroy of ShareCardControlsView(a1);
  return v12;
}

uint64_t sub_1C322F2CC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsShareCardViewController.viewDidLoad()(uint64_t a1)
{
  closure #1 in ConversationControlsShareCardViewController.viewDidLoad()(a1, v1);
}

uint64_t dispatch thunk of ConversationControlsShareCardViewControllerDelegate.shareCardViewControllerDidDismiss(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for ConversationControlsShareCardViewController()
{
  return self;
}

uint64_t method lookup function for ConversationControlsShareCardViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsShareCardViewController);
}

uint64_t dispatch thunk of ConversationControlsShareCardViewController.__allocating_init(conversationControlsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t outlined destroy of Activity?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject);
  }
  return result;
}

uint64_t sub_1C322F434()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C322F46C()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in ConversationControlsShareCardViewController.updateSize()(void *a1)
{
  double v2 = *(double *)(v1 + 16);
  objc_msgSend(a1, sel_maximumDetentValue);
  if (result >= v2) {
    return v2;
  }
  return result;
}

void partial apply for closure #1 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter()
{
  closure #1 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(v0, ConversationControlsShareCardViewController.didTapScreenShareButton());
}

void partial apply for closure #2 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(NSObject *a1)
{
  closure #2 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(a1, v1);
}

void partial apply for closure #3 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter()
{
  closure #1 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(v0, ConversationControlsShareCardViewController.didTapCollaborateButton());
}

void partial apply for closure #4 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter()
{
  closure #1 in closure #1 in ConversationControlsShareCardViewController.controlsView.getter(v0, (void (*)(void))ConversationControlsShareCardViewController.didTapEndSharePlay());
}

uint64_t outlined init with copy of ShareCardControlsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareCardControlsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions;
  if (!lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions)
  {
    type metadata accessor for UIHostingControllerSizingOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions);
  }
  return result;
}

uint64_t outlined destroy of ShareCardControlsView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareCardControlsView(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized StateHolder.state.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type StateHolder<Bool> and conformance StateHolder<A>, &demangling cache variable for type metadata for StateHolder<Bool>);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

{
  uint64_t v0;
  int v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type StateHolder<ShareMenuActionState> and conformance StateHolder<A>, &demangling cache variable for type metadata for StateHolder<ShareMenuActionState>);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 17)) {
    uint64_t v1 = 256;
  }
  else {
    uint64_t v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + 16);
}

uint64_t specialized StateHolder.state.setter(char a1)
{
  char v8 = a1;
  uint64_t v7 = MEMORY[0x1E4FBB390];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = v1;
  uint64_t v6 = &v8;
  specialized StateHolder.withMutation<A, B>(keyPath:_:)(KeyPath, (uint64_t)partial apply for specialized closure #1 in StateHolder.state.setter, (uint64_t)&v4, &lazy protocol witness table cache variable for type StateHolder<Bool> and conformance StateHolder<A>, &demangling cache variable for type metadata for StateHolder<Bool>);
  return swift_release();
}

uint64_t specialized StateHolder.state.setter(__int16 a1, uint64_t a2, __int16 a3)
{
  __int16 v10 = a1 & 0x101;
  uint64_t v11 = a2;
  __int16 v12 = a3 & 0x101;
  uint64_t v9 = &type metadata for ShareMenuActionState;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = v3;
  char v8 = &v10;
  specialized StateHolder.withMutation<A, B>(keyPath:_:)(KeyPath, (uint64_t)partial apply for specialized closure #1 in StateHolder.state.setter, (uint64_t)&v6, &lazy protocol witness table cache variable for type StateHolder<ShareMenuActionState> and conformance StateHolder<A>, &demangling cache variable for type metadata for StateHolder<ShareMenuActionState>);
  return swift_release();
}

uint64_t specialized closure #1 in StateHolder.state.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 16) = a2;
  return result;
}

uint64_t specialized closure #1 in StateHolder.state.setter(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 16) = a2 & 1;
  *(unsigned char *)(a1 + 17) = HIBYTE(a2) & 1;
  *(void *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 32) = a4 & 1;
  *(unsigned char *)(a1 + 33) = HIBYTE(a4) & 1;
  return result;
}

uint64_t specialized StateHolder.withMutation<A, B>(keyPath:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t VideoButtonViewModel.__allocating_init(service:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  VideoButtonViewModel.init(service:)(a1);
  return v2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned Bool) -> (@owned Color)(char *a1)
{
  return closure #1 in default argument 1 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)(*a1);
}

{
  return closure #1 in default argument 2 of static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)(*a1);
}

{
  return closure #1 in AudioMuteButtonViewModel.config.getter(*a1);
}

uint64_t VideoButtonViewModel.init(service:)(long long *a1)
{
  *(void *)(v1 + 56) = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 64) = 0;
  outlined init with take of Notice(a1, v1 + 16);
  return v1;
}

uint64_t VideoButtonViewModel.controlType.getter()
{
  return VideoButtonViewModel.config.getter();
}

uint64_t VideoButtonViewModel.config.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Font.Leading();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[8])
  {
    uint64_t v8 = v1[8];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = 0x69662E6F65646976;
    *(void *)(v9 + 24) = 0xEA00000000006C6CLL;
    uint64_t v10 = static Color.white.getter();
    static Font.subheadline.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4F3E0F8], v2);
    uint64_t v11 = Font.leading(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
    long long v28 = xmmword_1C376AA10;
    uint64_t v29 = 0x401C000000000000;
    uint64_t v30 = v10;
    uint64_t v31 = v11;
    os_log_type_t v32 = _s15ConversationKit12SystemSymbolVAASbRszlE19catalystCallControl4name5color15backgroundColorACySbGSS_7SwiftUI0K0VSbcAKSbctFZSSSbcfU_TA_0;
    uint64_t v33 = v9;
    SEL v34 = specialized thunk for @escaping @callee_guaranteed (@unowned Bool) -> (@owned Color);
    uint64_t v35 = 0;
    uint64_t v36 = specialized thunk for @escaping @callee_guaranteed (@unowned Bool) -> (@owned Color);
    uint64_t v37 = 0;
    id v38 = closure #1 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
    uint64_t v39 = 0;
    id v40 = partial apply for closure #2 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
    uint64_t v41 = 0;
    id v42 = partial apply for closure #3 in static SystemSymbol.catalystCallControl(name:color:backgroundColor:);
    uint64_t v43 = 0;
    __int16 v12 = self;
    id v13 = objc_msgSend(v12, sel_conversationKit);
    v44._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_7_7();
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v44._uint64_t countAndFlagsBits = 0;
    Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v13, v14, v44);

    v18.super.Class isa = (Class)objc_msgSend(v12, sel_conversationKit);
    v45._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_7_7();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v45._uint64_t countAndFlagsBits = 0;
    Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, v18, v19, v45);

    uint64_t v23 = v1[5];
    uint64_t v24 = v1[6];
    __swift_project_boxed_opaque_existential_1(v1 + 2, v23);
    LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 208))(v23, v24);
    uint64_t v25 = v1[5];
    uint64_t v26 = v1[6];
    __swift_project_boxed_opaque_existential_1(v1 + 2, v25);
    LOBYTE(v18.super.isa) = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 192))(v25, v26);
    swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButtonConfig<Bool>);
    swift_allocObject();
    uint64_t v8 = specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)((uint64_t)&v28, v17._countAndFlagsBits, (uint64_t)v17._object, 0, v22._countAndFlagsBits, (uint64_t)v22._object, 0xD000000000000011, 0x80000001C37971F0, v23 & 1, (uint64_t)v18.super.isa & 1);
    v1[8] = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

BOOL VideoButtonViewModel.enabled(for:)(uint64_t a1)
{
  return (a1 & 0xE100000000) != 0x100000000;
}

Swift::Void __swiftcall VideoButtonViewModel.onAppear()()
{
  swift_beginAccess();
  *(void *)(v0 + 56) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  VideoButtonViewModel.observeLocalVideoSupportedState()();
  VideoButtonViewModel.observeVideoState()();
  VideoButtonViewModel.updateLabels()();
}

Swift::Void __swiftcall VideoButtonViewModel.observeLocalVideoSupportedState()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  uint64_t v2 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  uint64_t v3 = OUTLINED_FUNCTION_7_3();
  v4(v3);
  id v9 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_6_72(v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  OUTLINED_FUNCTION_2_78();
  outlined destroy of NSRunLoop.SchedulerOptions?(v2);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v7 = OUTLINED_FUNCTION_5_15();
  v8(v7);
  OUTLINED_FUNCTION_4_20();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
}

Swift::Void __swiftcall VideoButtonViewModel.observeVideoState()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  uint64_t v2 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  uint64_t v3 = OUTLINED_FUNCTION_7_3();
  v4(v3);
  id v9 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_6_72(v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  OUTLINED_FUNCTION_2_78();
  outlined destroy of NSRunLoop.SchedulerOptions?(v2);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v7 = OUTLINED_FUNCTION_5_15();
  v8(v7);
  OUTLINED_FUNCTION_4_20();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
}

uint64_t VideoButtonViewModel.updateLabels()()
{
  ((void (*)(void))VideoButtonViewModel.config.getter)();
  char v0 = specialized StateHolder.state.getter();
  uint64_t v1 = swift_release();
  VideoButtonViewModel.config.getter(v1);
  id v2 = objc_msgSend(self, sel_conversationKit);
  if (v0)
  {
    unint64_t v3 = 0xD000000000000014;
    unint64_t v9 = 0xE000000000000000;
    unint64_t v4 = 0x80000001C37A2410;
  }
  else
  {
    unint64_t v9 = 0xE000000000000000;
    unint64_t v4 = 0x80000001C37A2460;
    unint64_t v3 = 0xD000000000000013;
  }
  v5.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v5.value._object = (void *)0xEF74694B6E6F6974;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  uint64_t v7 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, v5, (NSBundle)v2, v6, *(Swift::String *)(&v9 - 1));

  specialized IconButtonConfig.accessibilityLabel.setter();
  return swift_release();
}

Swift::Void __swiftcall VideoButtonViewModel.didTap()()
{
  VideoButtonViewModel.config.getter();
  char v1 = specialized StateHolder.state.getter();
  specialized StateHolder.state.setter((v1 & 1) == 0);
  swift_release();
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  VideoButtonViewModel.config.getter();
  char v4 = specialized StateHolder.state.getter();
  swift_release();
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 224))(v4 & 1, v2, v3);
  VideoButtonViewModel.updateLabels()();
}

uint64_t closure #1 in VideoButtonViewModel.observeLocalVideoSupportedState()(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    VideoButtonViewModel.config.getter();
    int v3 = specialized IconButtonConfig.enabled.getter() & 1;
    swift_release();
    if (v1 != v3)
    {
      VideoButtonViewModel.config.getter();
      specialized IconButtonConfig.enabled.setter();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized IconButtonConfig.enabled.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButtonConfig<Bool> and conformance IconButtonConfig<A>, &demangling cache variable for type metadata for IconButtonConfig<Bool>);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t closure #1 in VideoButtonViewModel.observeVideoState()(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    VideoButtonViewModel.config.getter();
    int v3 = specialized StateHolder.state.getter() & 1;
    swift_release();
    if (v1 != v3)
    {
      VideoButtonViewModel.config.getter();
      specialized StateHolder.state.setter(v1);
      swift_release();
      VideoButtonViewModel.updateLabels()();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3230898()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s15ConversationKit12SystemSymbolVAASbRszlE19catalystCallControl4name5color15backgroundColorACySbGSS_7SwiftUI0K0VSbcAKSbctFZSSSbcfU_TA_0(uint64_t a1)
{
  return closure #1 in static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C32308D8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in VideoButtonViewModel.config.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    VideoButtonViewModel.didTap()();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in VideoButtonViewModel.config.getter()
{
  return closure #1 in VideoButtonViewModel.config.getter();
}

uint64_t VideoButtonViewModel.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t VideoButtonViewModel.__deallocating_deinit()
{
  VideoButtonViewModel.deinit();
  return swift_deallocClassInstance();
}

BOOL protocol witness for CallControlsInCallButtonViewModel.enabled(for:) in conformance VideoButtonViewModel(uint64_t a1)
{
  return VideoButtonViewModel.enabled(for:)(a1 & 0xFFFFFFFFFFLL);
}

uint64_t protocol witness for CallControlsButtonViewModel.controlType.getter in conformance VideoButtonViewModel()
{
  return VideoButtonViewModel.controlType.getter();
}

void protocol witness for CallControlsButtonViewModel.onAppear() in conformance VideoButtonViewModel()
{
}

uint64_t partial apply for closure #1 in VideoButtonViewModel.observeLocalVideoSupportedState()(unsigned __int8 *a1)
{
  return closure #1 in VideoButtonViewModel.observeLocalVideoSupportedState()(a1);
}

uint64_t partial apply for closure #1 in VideoButtonViewModel.observeVideoState()(unsigned __int8 *a1)
{
  return closure #1 in VideoButtonViewModel.observeVideoState()(a1);
}

uint64_t sub_1C3230A58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VideoButtonViewModel.config.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for VideoButtonViewModel()
{
  return self;
}

uint64_t method lookup function for VideoButtonViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VideoButtonViewModel);
}

uint64_t dispatch thunk of VideoButtonViewModel.__allocating_init(service:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void *sub_1C3230AE4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t specialized closure #1 in StateHolder.state.setter(uint64_t a1, char *a2)
{
  return specialized closure #1 in StateHolder.state.setter(a1, *a2);
}

uint64_t specialized closure #1 in StateHolder.state.setter(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  __int16 v3 = a2[16];
  int v4 = a2[17];
  if (a2[1]) {
    __int16 v5 = 256;
  }
  else {
    __int16 v5 = 0;
  }
  __int16 v6 = v5 | *a2;
  if (v4) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  return specialized closure #1 in StateHolder.state.setter(a1, v6, v2, v7 | v3);
}

uint64_t partial apply for specialized closure #1 in StateHolder.state.setter()
{
  return specialized closure #1 in StateHolder.state.setter(*(void *)(v0 + 16), *(unsigned __int8 **)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in StateHolder.state.setter(*(void *)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t specialized CKStateMachine.currentState.getter@<X0>(uint64_t *a1@<X8>)
{
  __int16 v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 104));
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  unint64_t v10 = v3[6];
  uint64_t result = outlined copy of CallScreening.State(v4, v5, v6, v7, v8, v9, v10);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return result;
}

uint64_t CKStateMachine<>.update(with:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[15] = v2;
  v1[16] = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = static CKStateMachineActor.shared;
  v1[17] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](CKStateMachine<>.update(with:), v3, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  long long *v13;
  void *v14;
  os_log_type_t type;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  NSBundle v18 = v0;
  uint64_t v1 = v0[15];
  v0[18] = direct field offset for CKStateMachine.logger;
  swift_retain();
  outlined retain of AnsweringMachineCallStatus(v1);
  swift_retain();
  outlined retain of AnsweringMachineCallStatus(v1);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    type = v3;
    uint64_t v4 = v0[15];
    uint64_t v5 = swift_slowAlloc();
    Swift::String v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    swift_retain();
    uint64_t v6 = specialized CKStateMachine.description.getter();
    uint64_t v8 = v7;
    swift_release();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2082;
    outlined retain of AnsweringMachineCallStatus(v4);
    uint64_t v9 = AnsweringMachineCallStatus.description.getter();
    uint64_t v11 = v10;
    outlined release of AnsweringMachineCallStatus(v4);
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of AnsweringMachineCallStatus(v4);
    outlined release of AnsweringMachineCallStatus(v4);
    _os_log_impl(&dword_1C2F90000, v2, type, "Updating %{public}s with callupdate %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __int16 v12 = v0[15];

    swift_release_n();
    outlined release of AnsweringMachineCallStatus(v12);
    outlined release of AnsweringMachineCallStatus(v12);
  }
  id v13 = (long long *)(v0[16] + *(void *)(*(void *)v0[16] + 104));
  swift_beginAccess();
  outlined init with take of CallScreening.State(v13, (uint64_t)(v0 + 2));
  outlined retain of CallScreening.State(v0 + 2, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
  Swift::String v14 = (void *)swift_task_alloc();
  v0[19] = v14;
  void *v14 = v0;
  v14[1] = CKStateMachine<>.update(with:);
  return CallScreening.State.update(with:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  v3[20] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[17];
    return MEMORY[0x1F4188298](CKStateMachine<>.update(with:), v6, 0);
  }
  else
  {
    outlined retain of CallScreening.State(v3 + 2, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
    OUTLINED_FUNCTION_6();
    return v7();
  }
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = (void *)v0[20];
  outlined retain of CallScreening.State(v0 + 2, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[20];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543362;
    uint64_t v9 = v6;
    unint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v10;

    _os_log_impl(&dword_1C2F90000, v4, v5, "Failed to update callStatus with error: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v11 = (void *)v0[20];
  }
  __int16 v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

unint64_t specialized CKStateMachine.description.getter()
{
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v7[0] = v0;
  v1._uint64_t countAndFlagsBits = _Pointer.debugDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001C37A2500;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  uint64_t v3 = (long long *)(v7[0] + *(void *)(*(void *)v7[0] + 104));
  swift_beginAccess();
  outlined init with take of CallScreening.State(v3, (uint64_t)v7);
  outlined retain of CallScreening.State(v7, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
  v4._uint64_t countAndFlagsBits = CallScreening.State.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  outlined retain of CallScreening.State(v7, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
  v5._uint64_t countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000016;
}

uint64_t CallScreening.State.update(with:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[29] = v2;
  v1[30] = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = static CKStateMachineActor.shared;
  v1[31] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](CallScreening.State.update(with:), v3, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 248);
  if (v0) {
    Swift::String v4 = CallScreening.State.update(with:);
  }
  else {
    Swift::String v4 = CallScreening.State.update(with:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  Swift::String v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  OUTLINED_FUNCTION_6();
  return v1();
}

void CallScreening.State.update(with:)()
{
  Swift::String v1 = (_OWORD *)(v0 + 16);
  uint64_t v2 = (_OWORD *)(v0 + 72);
  outlined init with take of CallScreening.State(*(long long **)(v0 + 240), v0 + 16);
  unint64_t v3 = *(void *)(v0 + 64);
  switch(v3 >> 61)
  {
    case 1uLL:
      OUTLINED_FUNCTION_3_87(v3);
      uint64_t v12 = *(void *)(v0 + 16);
      uint64_t v13 = *(void *)(v0 + 24);
      uint64_t v14 = *(void *)(v0 + 32);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningListeningState<CKStateMachine<CallScreening.State>>);
      *(void *)(v0 + 144) = v15;
      *(void *)(v0 + 152) = &protocol witness table for CallScreeningListeningState<A>;
      *(void *)(v0 + 120) = v12;
      *(void *)(v0 + 128) = v13;
      *(void *)(v0 + 136) = v14;
      break;
    case 2uLL:
      OUTLINED_FUNCTION_3_87(v3);
      uint64_t v17 = *(void *)(v0 + 16);
      uint64_t v16 = *(void *)(v0 + 24);
      uint64_t v19 = *(void *)(v0 + 48);
      uint64_t v18 = *(void *)(v0 + 56);
      *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 32);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningTrackingState<CKStateMachine<CallScreening.State>>);
      *(void *)(v0 + 144) = v15;
      *(void *)(v0 + 152) = &protocol witness table for CallScreeningTrackingState<A>;
      uint64_t v20 = swift_allocObject();
      *(void *)(v0 + 120) = v20;
      *(void *)(v20 + 16) = v17;
      *(void *)(v20 + 24) = v16;
      *(_OWORD *)(v20 + 32) = *(_OWORD *)(v0 + 32);
      *(void *)(v20 + 48) = v19;
      *(void *)(v20 + 56) = v18;
      swift_retain();
      outlined retain of String(v0 + 216);
      break;
    case 3uLL:
      OUTLINED_FUNCTION_3_87(v3);
      uint64_t v21 = *(void *)(v0 + 48);
      *(_OWORD *)(v0 + 200) = *v1;
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningAnsweringState<CKStateMachine<CallScreening.State>>);
      *(void *)(v0 + 144) = v15;
      *(void *)(v0 + 152) = &protocol witness table for CallScreeningAnsweringState<A>;
      uint64_t v22 = swift_allocObject();
      *(void *)(v0 + 120) = v22;
      long long v23 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v22 + 16) = *v1;
      *(_OWORD *)(v22 + 32) = v23;
      *(void *)(v22 + 48) = v21;
      outlined retain of String(v0 + 200);
      break;
    case 4uLL:
      SEL v34 = (void *)(v0 + 120);
      uint64_t v24 = v3 & 0x1FFFFFFFFFFFFFFFLL;
      *(void *)(v0 + 64) = v3 & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v25 = *(void *)(v0 + 32);
      uint64_t v26 = *(void *)(v0 + 56);
      *(_OWORD *)(v0 + 184) = *v1;
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningScreeningState<CKStateMachine<CallScreening.State>>);
      *(void *)(v0 + 144) = v15;
      *(void *)(v0 + 152) = &protocol witness table for CallScreeningScreeningState<A>;
      uint64_t v27 = swift_allocObject();
      *(void *)(v0 + 120) = v27;
      *(_OWORD *)(v27 + 16) = *v1;
      *(void *)(v27 + 32) = v25;
      *(_OWORD *)(v27 + 40) = *(_OWORD *)(v0 + 40);
      *(void *)(v27 + 56) = v26;
      *(void *)(v27 + 64) = v24;
      outlined retain of String(v0 + 184);
      swift_retain();
      break;
    case 5uLL:
      OUTLINED_FUNCTION_3_87(v3);
      long long v28 = *(_OWORD *)(v0 + 32);
      *uint64_t v2 = *v1;
      *(_OWORD *)(v0 + 88) = v28;
      *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
      outlined init with take of CallScreening.EndingAction((long long *)(v0 + 72), v0 + 160);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningEndingState<CKStateMachine<CallScreening.State>>);
      *(void *)(v0 + 144) = v15;
      *(void *)(v0 + 152) = &protocol witness table for CallScreeningEndingState<A>;
      uint64_t v29 = (_OWORD *)swift_allocObject();
      *(void *)(v0 + 120) = v29;
      long long v30 = *(_OWORD *)(v0 + 88);
      v29[1] = *v2;
      void v29[2] = v30;
      v29[3] = *(_OWORD *)(v0 + 104);
      outlined retain of CallScreening.EndingAction(v0 + 160);
      break;
    default:
      *(void *)(v0 + 64) = v3 & 0x1FFFFFFFFFFFFFFFLL;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachine<CallScreening.State>.Error);
      lazy protocol witness table accessor for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error();
      swift_allocError();
      uint64_t v5 = v4;
      _StringGuts.grow(_:)(79);
      v6._uint64_t countAndFlagsBits = 0xD000000000000036;
      v6._object = (void *)0x80000001C37A2480;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = AnsweringMachineCallStatus.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._object = (void *)0x80000001C37A24C0;
      v8._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = CallScreening.State.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0xE000000000000000;
      *(unsigned char *)(v5 + 73) = 0;
      swift_willThrow();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_7_6();
      __asm { BRAA            X1, X16 }
      return;
  }
  swift_retain();
  swift_retain();
  __swift_project_boxed_opaque_existential_1(v34, v15);
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v31;
  *uint64_t v31 = v0;
  v31[1] = CallScreening.State.update(with:);
  OUTLINED_FUNCTION_7_6();
  __asm { BRAA            X4, X16 }
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance <> CKStateMachine<A>()
{
  Swift::String v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return CKStateMachine<>.update(with:)();
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreening.State()
{
  outlined init with take of CallScreening.State(v0, v1 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreening.State;
  return CallScreening.State.update(with:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t sub_1C3231D50()
{
  outlined consume of CallScreening.EndingAction(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C3231D9C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C3231DEC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C3231E34()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error;
  if (!lazy protocol witness table cache variable for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CKStateMachine<CallScreening.State>.Error);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error);
  }
  return result;
}

void dispatch thunk of UpdatesWithCallStatus.update(with:)(long long *a1)
{
  long long v13 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  char v4 = *((unsigned char *)a1 + 32);
  char v5 = *((unsigned char *)a1 + 33);
  char v6 = *((unsigned char *)a1 + 34);
  char v7 = *((unsigned char *)a1 + 35);
  uint64_t v8 = *((void *)a1 + 5);
  char v9 = *((unsigned char *)a1 + 48);
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v10;
  *(_OWORD *)(v1 + 16) = v13;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  *(unsigned char *)(v1 + 48) = v4;
  *(unsigned char *)(v1 + 49) = v5;
  *(unsigned char *)(v1 + 50) = v6;
  *(unsigned char *)(v1 + 51) = v7;
  *(void *)(v1 + 56) = v8;
  *(unsigned char *)(v1 + 64) = v9;
  *unint64_t v10 = v1;
  v10[1] = protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreening.State;
  OUTLINED_FUNCTION_7_6();
  __asm { BRAA            X4, X16 }
}

id ConversationHUDDetailsViewController.__allocating_init(controlsManager:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationHUDDetailsViewController.init(controlsManager:)(a1);
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.refreshTitleCell()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v1)
  {
    id v2 = v1;
    InCallControlsCollectionViewController.refreshTitleCell()();
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.resetScroll(animated:)(Swift::Bool animated)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v2)
  {
    char v4 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
    swift_beginAccess();
    if (*v4)
    {
      Class v5 = (Class)*v4;
      if ((uint64_t)[(objc_class *)v5 numberOfSections] >= 1
        && (uint64_t)[(objc_class *)v5 numberOfItemsInSection:0] >= 1)
      {
        uint64_t v6 = type metadata accessor for IndexPath();
        OUTLINED_FUNCTION_4();
        uint64_t v8 = v7;
        MEMORY[0x1F4188790](v9);
        OUTLINED_FUNCTION_60();
        MEMORY[0x1C876F270](0, 0);
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        (*(void (**)(id *, uint64_t))(v8 + 8))(v4, v6);
        [(objc_class *)v5 scrollToItemAtIndexPath:isa atScrollPosition:1 animated:animated];

        Class v5 = isa;
      }
    }
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.captioningStateDidChange()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v1)
  {
    id v2 = v1;
    InCallControlsCollectionViewController.captioningStateDidChange()();
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.controlsModeUpdated()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController))
  {
    OUTLINED_FUNCTION_12_43();
    id v2 = *(uint64_t (**)(void))(v1 + 2112);
    id v5 = v3;
    unsigned __int8 v4 = v2();
    InCallControlsCollectionViewController.mode.setter(v4);
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.layoutStyleUpdated()()
{
  void (*v2)(uint64_t *__return_ptr);
  id v3;
  id v4;
  unsigned __int8 v5;
  uint64_t v6;

  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController))
  {
    OUTLINED_FUNCTION_12_43();
    id v2 = *(void (**)(uint64_t *__return_ptr))(v1 + 2104);
    unsigned __int8 v4 = v3;
    v2(&v6);
    id v5 = v6;
    InCallControlsCollectionViewController.gridLayoutStyle.setter(&v5);
  }
}

void ConversationHUDDetailsViewController.updated(_:)(uint64_t a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v2)
  {
    outlined init with copy of FeatureEligibility?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Activity?);
    id v3 = v2;
    InCallControlsCollectionViewController.activity.setter((uint64_t)v4);
  }
}

void ConversationHUDDetailsViewController.update(participant:broadcastingState:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController))
  {
    OUTLINED_FUNCTION_12_43();
    id v3 = *(uint64_t (**)(void))(v2 + 656);
    id v5 = v4;
    uint64_t v6 = (void *)v3();
    InCallControlsCollectionViewController.conversation.setter(v6);

    uint64_t v7 = *(void **)(v0 + v1);
    if (v7)
    {
      id v8 = v7;
      InCallControlsCollectionViewController.update(participant:broadcastingState:)();
    }
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)(Swift::OpaquePointer a1, Swift::Bool isLocalMemberAuthorizedToChangeGroupMembership)
{
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController;
  if (*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController)
    && (OUTLINED_FUNCTION_12_43(),
        id v5 = *(uint64_t (**)(void))(v4 + 656),
        id v7 = v6,
        id v8 = (void *)v5(),
        InCallControlsCollectionViewController.conversation.setter(v8),
        v7,
        (uint64_t v9 = *(void **)(v2 + v3)) != 0))
  {
    id v10 = v9;
    uint64_t v11 = OUTLINED_FUNCTION_25_25();
    InCallControlsCollectionViewController.updateLocalViews(for:isLocalMemberAuthorizedToChangeGroupMembership:)((Swift::OpaquePointer)v11, v12);
    OUTLINED_FUNCTION_1_0();
  }
  else
  {
    OUTLINED_FUNCTION_1_0();
  }
}

void ConversationHUDDetailsViewController.update(participant:isKickingAvailable:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController)
    && (OUTLINED_FUNCTION_12_43(),
        uint64_t v3 = *(uint64_t (**)(void))(v2 + 656),
        id v5 = v4,
        id v6 = (void *)v3(),
        InCallControlsCollectionViewController.conversation.setter(v6),
        v5,
        (id v7 = *(void **)(v0 + v1)) != 0))
  {
    id v8 = v7;
    OUTLINED_FUNCTION_25_25();
    InCallControlsCollectionViewController.update(participant:isKickingAvailable:)();
    OUTLINED_FUNCTION_1_0();
  }
  else
  {
    OUTLINED_FUNCTION_1_0();
  }
}

void ConversationHUDDetailsViewController.update(with:updateReason:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController))
  {
    OUTLINED_FUNCTION_12_43();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 656);
    id v5 = v4;
    id v6 = (void *)v3();
    InCallControlsCollectionViewController.conversation.setter(v6);

    id v7 = *(void **)(v0 + v1);
    if (v7)
    {
      id v8 = v7;
      ConversationController.visibleParticipants.getter();
      InCallControlsCollectionViewController.update(with:updateReason:)();

      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_1_0();
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.updateRemoteAudioPaused(audioPaused:)(Swift::Bool audioPaused)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v2)
  {
    id v4 = (Swift::Bool *)(v2 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_remoteAudioPaused);
    OUTLINED_FUNCTION_9_26();
    *id v4 = audioPaused;
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.refreshToggleIgnoreLMIRequestsRowCell()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController))
  {
    OUTLINED_FUNCTION_12_43();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 656);
    id v5 = v3;
    id v4 = (void *)v2();
    InCallControlsCollectionViewController.conversation.setter(v4);
    InCallControlsCollectionViewController.refreshToggleIgnoreLMIRequestsRowCell()();
  }
}

uint64_t key path getter for ConversationHUDDetailsViewController.detailsDelegate : ConversationHUDDetailsViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDDetailsViewController.detailsDelegate : ConversationHUDDetailsViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x98);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t ConversationHUDDetailsViewController.detailsDelegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsDelegate;
  OUTLINED_FUNCTION_0_32();
  return MEMORY[0x1C8776240](v1);
}

uint64_t ConversationHUDDetailsViewController.detailsDelegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*ConversationHUDDetailsViewController.detailsDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsDelegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1C8776240](v5);
  return DestinationQueryController.delegate.modify;
}

uint64_t ConversationHUDDetailsViewController.isOnScreen.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_isOnScreen);
  OUTLINED_FUNCTION_0_32();
  return *v1;
}

uint64_t ConversationHUDDetailsViewController.isOnScreen.setter(char a1)
{
  ConversationHUDDetailsViewController.isOnScreen.willset(a1);
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_isOnScreen);
  uint64_t result = OUTLINED_FUNCTION_9_26();
  char *v3 = a1;
  return result;
}

uint64_t key path getter for ConversationHUDDetailsViewController.isOnScreen : ConversationHUDDetailsViewController@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ConversationHUDDetailsViewController.isOnScreen : ConversationHUDDetailsViewController(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB0))(*a1);
}

void ConversationHUDDetailsViewController.isOnScreen.willset(char a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v2)
  {
    uint64_t v4 = v2;
    a1 &= 1u;
    InCallControlsCollectionViewController.isOnScreen.willset(a1);
    uint64_t v5 = &v4[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_isOnScreen];
    swift_beginAccess();
    *uint64_t v5 = a1;
  }
}

void (*ConversationHUDDetailsViewController.isOnScreen.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_isOnScreen;
  v3[3] = v1;
  v3[4] = v4;
  uint64_t v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return ConversationHUDDetailsViewController.isOnScreen.modify;
}

void ConversationHUDDetailsViewController.isOnScreen.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 40);
  ConversationHUDDetailsViewController.isOnScreen.willset(v4);
  *(unsigned char *)(v2 + v3) = v4;
  free(v1);
}

id ConversationHUDDetailsViewController.controlsManager.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager);
}

void ConversationHUDDetailsViewController.detailsViewController.setter(uint64_t a1)
{
}

void ConversationHUDDetailsViewController.peoplePickerViewController.setter(uint64_t a1)
{
}

id ConversationHUDDetailsViewController.init(controlsManager:)(void *a1)
{
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_isOnScreen] = 0;
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_linkShareCoordinator];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((void *)v3 + 4) = 0;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_featureFlag;
  id v5 = objc_allocWithZone(MEMORY[0x1E4FADBD0]);
  id v6 = v1;
  *(void *)&v1[v4] = objc_msgSend(v5, sel_init);
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_peoplePickerViewController] = 0;
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_spamAlertBuilder;
  type metadata accessor for SpamAlertBuilder();
  *(void *)&v6[v7] = swift_allocObject();
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager] = a1;
  id v8 = a1;

  v11.id receiver = v6;
  v11.Class super_class = (Class)type metadata accessor for ConversationHUDDetailsViewController();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, 0, 0);

  return v9;
}

id ConversationHUDDetailsViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationHUDDetailsViewController.init(coder:)()
{
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_isOnScreen] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_linkShareCoordinator];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_featureFlag;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_peoplePickerViewController] = 0;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_spamAlertBuilder;
  type metadata accessor for SpamAlertBuilder();
  *(void *)&v0[v3] = swift_allocObject();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.viewDidLoad()()
{
  v1.id receiver = v0;
  v1.Class super_class = (Class)type metadata accessor for ConversationHUDDetailsViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  ConversationHUDDetailsViewController.setupRootView()();
}

void ConversationHUDDetailsViewController.setupRootView()()
{
  objc_super v1 = v0;
  id v2 = objc_msgSend(v0, sel_parentViewController);
  if (v2)
  {
    uint64_t v3 = v2;
    swift_getObjectType();
    uint64_t v4 = (void *)dynamic_cast_existential_1_conditional((uint64_t)v3);
    if (!v4) {
  }
    }
  else
  {
    uint64_t v4 = 0;
  }
  id v5 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager];
  id v6 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x290))();
  uint64_t v7 = ConversationController.visibleParticipants.getter();
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((*v6 & *v5) + 0x840))(v7);
  (*(void (**)(void *__return_ptr, uint64_t))((*v6 & *v5) + 0x838))(v22, v8);
  char v23 = v22[0];
  id v9 = objc_allocWithZone((Class)type metadata accessor for InCallControlsCollectionViewController(0));
  id v10 = v4;
  InCallControlsCollectionViewController.init(conversation:participants:mode:gridLayoutStyle:isLegacy:shareLinkEnabled:menuHostViewController:)();
  Swift::Bool v12 = v11;
  long long v13 = (void **)&v11[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_controlsManager];
  swift_beginAccess();
  uint64_t v14 = *v13;
  void *v13 = v5;
  uint64_t v15 = v5;

  (*(void (**)(void *__return_ptr))((*v6 & *v15) + 0x8C8))(v22);
  InCallControlsCollectionViewController.activity.setter((uint64_t)v22);
  uint64_t v16 = &v12[OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_inCallControlsCollectionViewControllerDelegate];
  swift_beginAccess();
  *((void *)v16 + 1) = &protocol witness table for ConversationHUDDetailsViewController;
  swift_unknownObjectWeakAssign();
  uint64_t v17 = v12;
  ConversationHUDDetailsViewController.detailsViewController.setter((uint64_t)v12);
  objc_msgSend(v1, sel_addChildViewController_, v17);
  id v18 = objc_msgSend(v1, sel_view);
  if (v18)
  {
    uint64_t v19 = v18;
    id v20 = objc_msgSend(v17, sel_view);
    if (v20)
    {
      uint64_t v21 = v20;
      objc_msgSend(v19, sel_addSubview_, v20);

      objc_msgSend(v17, sel_didMoveToParentViewController_, v1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ConversationHUDDetailsViewController.viewWillTransition(to:with:)(uint64_t a1, double a2, double a3)
{
  v16.id receiver = v3;
  v16.Class super_class = (Class)type metadata accessor for ConversationHUDDetailsViewController();
  objc_msgSendSuper2(&v16, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  uint64_t v7 = (uint64_t)v3 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_linkShareCoordinator;
  OUTLINED_FUNCTION_0_32();
  outlined init with copy of FeatureEligibility?(v7, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  if (!v15) {
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  }
  outlined init with copy of IDSLookupManager((uint64_t)v14, (uint64_t)v11);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

Swift::Bool __swiftcall ConversationHUDDetailsViewController._canShowWhileLocked()()
{
  return 1;
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.updateScrollableInsets(_:)(UIEdgeInsets a1)
{
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (v3)
  {
    uint64_t v4 = (id *)(v3 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
    OUTLINED_FUNCTION_0_32();
    if (*v4) {
      OUTLINED_FUNCTION_31_19(*v4, sel_setContentInset_);
    }
    uint64_t v5 = *(void *)(v1 + v2);
    if (v5)
    {
      id v6 = (id *)(v5 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
      OUTLINED_FUNCTION_0_32();
      if (*v6) {
        OUTLINED_FUNCTION_31_19(*v6, sel_setVerticalScrollIndicatorInsets_);
      }
    }
  }
}

void *ConversationHUDDetailsViewController.collectionView.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_detailsViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit38InCallControlsCollectionViewController_collectionView);
  OUTLINED_FUNCTION_0_32();
  uint64_t v3 = *v2;
  id v4 = v3;
  return v3;
}

id ConversationHUDDetailsViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void ConversationHUDDetailsViewController.init(nibName:bundle:)()
{
}

id ConversationHUDDetailsViewController.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for ConversationHUDDetailsViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ConversationHUDDetailsViewController.isCaptioningEnabled(inCallControlsCollectionViewController:)()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 144))();
  if (!v1) {
    return 0;
  }
  objc_super v2 = v1;
  if (objc_msgSend(v1, sel_respondsToSelector_, sel_isCaptioningEnabled)) {
    id v3 = objc_msgSend(v2, sel_isCaptioningEnabled);
  }
  else {
    id v3 = 0;
  }
  swift_unknownObjectRelease();
  return v3;
}

void ConversationHUDDetailsViewController.inCallControlsCollectionViewController(_:didTap:from:)()
{
  OUTLINED_FUNCTION_31();
  id v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v11 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_62();
  type metadata accessor for InCallControlsCollectionViewController.Action(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_60();
  outlined init with copy of InCallControlsCollectionViewController.Action(v7, (uint64_t)v0, (void (*)(void))type metadata accessor for InCallControlsCollectionViewController.Action);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v14 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v16 = v15;
      MEMORY[0x1F4188790](v17);
      uint64_t v19 = OUTLINED_FUNCTION_1_95(v18, v64);
      v20(v19);
      ConversationControlsManager.buzz(participantIdentifier:)();
      goto LABEL_6;
    case 2u:
      uint64_t v14 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v16 = v21;
      MEMORY[0x1F4188790](v22);
      uint64_t v24 = OUTLINED_FUNCTION_1_95(v23, v64);
      v25(v24);
      ConversationControlsManager.approve(participantIdentifier:)();
      goto LABEL_6;
    case 3u:
      uint64_t v14 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v16 = v26;
      MEMORY[0x1F4188790](v27);
      uint64_t v29 = OUTLINED_FUNCTION_1_95(v28, v64);
      v30(v29);
      ConversationControlsManager.dismiss(participantIdentifier:)();
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v2, v14);
      break;
    case 4u:
      uint64_t v31 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v33 = v32;
      MEMORY[0x1F4188790](v34);
      OUTLINED_FUNCTION_5_1();
      (*(void (**)(UIViewController_optional *, long long *, uint64_t))(v33 + 32))(v9, v0, v31);
      ConversationController.participant(with:)();
      if (__swift_getEnumTagSinglePayload(v1, 1, v11) == 1)
      {
        uint64_t v35 = OUTLINED_FUNCTION_33_19();
        v36(v35);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v1, &demangling cache variable for type metadata for Participant?);
      }
      else
      {
        outlined init with take of Participant(v1, v2);
        if (ConversationControlsManager.canKick(participantIdentifier:)()) {
          ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)();
        }
        outlined destroy of Participant(v2);
        uint64_t v51 = OUTLINED_FUNCTION_33_19();
        v52(v51);
      }
      break;
    case 5u:
      objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager), sel_openMessagesButtonTapped);
      break;
    case 6u:
      ConversationHUDDetailsViewController.handleAddParticipant()();
      break;
    case 7u:
      ConversationControlsManager.toggleMultiwayLayout()();
      break;
    case 8u:
      if (static Platform.current.getter() == 3)
      {
        uint64_t v37 = v9;
        id v38 = v5;
      }
      else
      {
        uint64_t v37 = 0;
        id v38 = 0;
      }
      ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(v37, v38);
      break;
    case 9u:
      ConversationHUDDetailsViewController.handleToggleIgnoreLMIRequestsAction()();
      break;
    case 0xAu:
      if (v5)
      {
        self;
        uint64_t v39 = swift_dynamicCastObjCClass();
        if (v39) {
          objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager), sel_joinButtonTappedWithButton_, v39);
        }
      }
      break;
    case 0xBu:
      if (v5)
      {
        self;
        uint64_t v40 = swift_dynamicCastObjCClass();
        if (v40) {
          objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager), sel_leaveButtonTappedWithButton_, v40);
        }
      }
      break;
    case 0xCu:
      ConversationControlsManager.toggleCaptionsButtonTapped()();
      break;
    case 0xDu:
      OUTLINED_FUNCTION_0_20();
      (*(void (**)(void))(v41 + 624))();
      self;
      id v42 = (void *)swift_dynamicCastObjCClass();
      if (v42 && objc_msgSend(v42, sel_isIncoming))
      {
        if (TUCall.isBlocked()())
        {
          specialized SpamModelable.unblockUnknown()();
        }
        else
        {
          uint64_t v53 = one-time initialization token for faceTime;
          swift_retain();
          swift_unknownObjectRetain();
          if (v53 != -1) {
            swift_once();
          }
          swift_unknownObjectRetain();
          TUCall.isGroupFaceTimeWithAllUnknownContacts.getter();
          if (v54)
          {
            uint64_t v55 = OUTLINED_FUNCTION_9_55();
            id v56 = (id)specialized SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(v55);
          }
          else if (TUCall.isGroupFaceTimeWithSomeUnknownContacts.getter())
          {
            uint64_t v58 = OUTLINED_FUNCTION_9_55();
            id v56 = (id)specialized SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(v58);
          }
          else
          {
            uint64_t v59 = (void *)OUTLINED_FUNCTION_9_55();
            id v56 = specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(v59, v60, v61, v62);
          }
          id v63 = v56;
          swift_release();
          swift_unknownObjectRelease_n();
          OUTLINED_FUNCTION_39_13(v3, sel_presentViewController_animated_completion_, (uint64_t)v63);
        }
      }
      goto LABEL_48;
    case 0xEu:
      OUTLINED_FUNCTION_0_20();
      (*(void (**)(void))(v43 + 624))();
      self;
      uint64_t v44 = swift_dynamicCastObjCClass();
      if (v44)
      {
        Swift::String v45 = (void *)v44;
        uint64_t v46 = one-time initialization token for faceTime;
        swift_retain();
        swift_unknownObjectRetain();
        if (v46 != -1) {
          swift_once();
        }
        id v47 = specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(v45, static ReportSpamManager.faceTime, 0, 0);
        swift_unknownObjectRelease();
        swift_release();
        if (TUCall.isGroupFaceTimeWithUnknownInitiator.getter())
        {
          unsigned int v48 = objc_msgSend(*(id *)((char *)v3+ OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_featureFlag), sel_unknownInitiatorReportEnabled);
          uint64_t v49 = static ReportSpamManager.faceTime;
          swift_unknownObjectRetain();
          swift_retain();
          if (v48) {
            id v50 = specialized SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:)(v45, v49, 0, 0);
          }
          else {
            id v50 = specialized SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(v45, v49, 0, 0);
          }
          id v57 = v50;
          swift_unknownObjectRelease();
          swift_release();

          id v47 = v57;
        }
        OUTLINED_FUNCTION_39_13(v3, sel_presentViewController_animated_completion_, (uint64_t)v47);
      }
LABEL_48:
      swift_unknownObjectRelease();
      break;
    default:
      outlined init with take of Notice(v0, (uint64_t)v65);
      ConversationControlsManager.viewActivity(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      break;
  }
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.handleAddParticipant()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  type metadata accessor for UITraitOverrides();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_62();
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  id v4 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)&v0[OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager])
                           + 0x290);
  uint64_t v5 = v4();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    LOBYTE(v46[0]) = 1;
    uint64_t v7 = v4();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      TUConversation.existingAddressesLowercased.getter();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = MEMORY[0x1E4FBC870];
    }
    id v16 = objc_allocWithZone((Class)type metadata accessor for PeoplePickerViewController());
    uint64_t v17 = v6;
    PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)((char *)v46, v10, v6, 0, (uint64_t)TPNumberPadCharacter.rawValue.getter, 0);
    uint64_t v19 = v18;
    id v20 = *(void (**)(uint64_t, _UNKNOWN **))((*v3 & *v18) + 0x368);
    uint64_t v21 = swift_unknownObjectRetain();
    v20(v21, &protocol witness table for ConversationHUDDetailsViewController);
    id v22 = objc_msgSend(v19, sel_view);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = self;
      id v25 = objc_msgSend(v24, sel_systemGreenColor);
      objc_msgSend(v23, sel_setTintColor_, v25);

      id v26 = v19;
      ConversationHUDDetailsViewController.peoplePickerViewController.setter((uint64_t)v19);
      id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB19E8]), sel_initWithRootViewController_, v26);
      id v28 = objc_msgSend(v27, sel_navigationBar);
      id v29 = objc_msgSend(v24, sel_systemGreenColor);
      objc_msgSend(v28, sel_setTintColor_, v29);

      v46[3] = type metadata accessor for ConversationHUDDetailsViewController();
      v46[0] = v1;
      id v30 = objc_allocWithZone(MEMORY[0x1E4FB14A8]);
      id v31 = v1;
      id v32 = @nonobjc UIBarButtonItem.init(barButtonSystemItem:target:action:)(1, v46, (uint64_t)sel_dismissPeoplePicker);
      id v33 = objc_msgSend(v27, sel_navigationItem);
      objc_msgSend(v33, sel_setRightBarButtonItem_, v32);

      id v34 = v27;
      id v35 = objc_msgSend(v31, sel_traitCollection);
      id v36 = objc_msgSend(v35, sel_userInterfaceIdiom);

      if (v36 == (id)5) {
        uint64_t v37 = -2;
      }
      else {
        uint64_t v37 = 6;
      }
      objc_msgSend(v34, sel_setModalPresentationStyle_, v37);

      id v38 = objc_msgSend(v34, sel_presentationController);
      if (v38)
      {
        uint64_t v39 = v38;
        MEMORY[0x1C8773D40]();
        UIMutableTraits.userInterfaceStyle.setter();
        MEMORY[0x1C8773D50]();
      }
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v41 = OUTLINED_FUNCTION_30(v40, (uint64_t)static Logger.conversationControls);
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
        OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v43, v44, "Present peoplePicker to add participant");
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_39_13(v31, sel_presentViewController_animated_completion_, (uint64_t)v34);
      OUTLINED_FUNCTION_28();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    Swift::String v45 = OUTLINED_FUNCTION_30(v11, (uint64_t)static Logger.conversationControls);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v12))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, v45, v13, "Unable to addParticipant, no conversation.");
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_28();
  }
}

void ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v43 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Participant(0);
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v42 = *(void *)(v44 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v41 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_conversationKit);
  v48._object = (void *)0xE000000000000000;
  OUTLINED_FUNCTION_4_6();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v48._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v6, v7, v48);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v10 = OUTLINED_FUNCTION_25_15();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  Participant.contactDetails.getter();
  uint64_t v11 = v45;
  uint64_t v12 = v46;
  uint64_t v13 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v13;
  uint64_t v14 = String.init(format:_:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v17 = objc_msgSend(v5, (SEL)&selRef_viewIfLoaded + 1);
  v49._object = (void *)0xE000000000000000;
  OUTLINED_FUNCTION_4_6();
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v49._uint64_t countAndFlagsBits = 0;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v17, v18, v49);

  id v22 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v21._countAndFlagsBits, (uint64_t)v21._object, v14, v16, 1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v23 = objc_msgSend(v5, (SEL)&selRef_viewIfLoaded + 1);
  uint64_t v24 = OUTLINED_FUNCTION_11_1(0xD000000000000032, 0x80000001C37A25F0);
  uint64_t v26 = v25;

  uint64_t v27 = swift_allocObject();
  id v28 = v43;
  swift_unknownObjectWeakInit();
  uint64_t v29 = v2;
  uint64_t v30 = v41;
  outlined init with copy of InCallControlsCollectionViewController.Action(v29, v41, (void (*)(void))type metadata accessor for Participant);
  unint64_t v31 = (*(unsigned __int8 *)(v44 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v27;
  outlined init with take of Participant(v30, v32 + v31);
  id v33 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v24, v26, 0, (uint64_t)partial apply for closure #1 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:), v32);
  id v34 = objc_msgSend(v5, sel_conversationKit);
  uint64_t v35 = OUTLINED_FUNCTION_11_1(0x4C45434E4143, 0xE600000000000000);
  uint64_t v37 = v36;

  uint64_t v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v39 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v35, v37, 0, (uint64_t)partial apply for closure #2 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:), v38);
  objc_msgSend(v22, sel_addAction_, v33);
  objc_msgSend(v22, sel_addAction_, v39);
  OUTLINED_FUNCTION_39_13(v28, sel_presentViewController_animated_completion_, (uint64_t)v22);

  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(UIViewController_optional *hostingViewController, UIView_optional *sourceView)
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v3;
  id v6 = v5;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v2, *MEMORY[0x1E4FBCB30], v7);
  v29[0] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  void v12[3] = v6;
  v12[4] = v4;
  v30[4] = partial apply for closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:);
  v30[5] = v12;
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1107296256;
  v30[2] = thunk for @escaping @callee_guaranteed () -> ();
  v30[3] = &block_descriptor_47;
  uint64_t v13 = _Block_copy(v30);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  Swift::String v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = v4;
  swift_retain();
  id v21 = v6;
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v28 = (void *)v29[0];
  MEMORY[0x1C8773BA0](0, v19, v27, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v14);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.handleToggleIgnoreLMIRequestsAction()()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 656))();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = objc_msgSend(v1, sel_ignoreLMIRequests) ^ 1;
    id v4 = objc_msgSend(self, sel_sharedInstance);
    uint64_t v8 = objc_msgSend(v4, sel_conversationManager);

    [v8 setIgnoreLMIRequests:v3 forConversation:v2];
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v8 = OUTLINED_FUNCTION_30(v5, (uint64_t)static Logger.conversationControls);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v6))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, v8, v7, "Unable to toggle mute join request state, no conversation.");
      OUTLINED_FUNCTION_3();
    }
  }
}

uint64_t specialized SpamModelable.unblockUnknown()()
{
  uint64_t v0 = TUCall.unknownHandles.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = (void **)(v0 + 32);
    do
    {
      uint64_t v3 = *v2++;
      objc_msgSend(v3, sel_unblock);
      --v1;
    }
    while (v1);
  }
  return swift_bridgeObjectRelease();
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  void *v4;
  uint64_t vars8;

  RecentsCallItem.tuHandles.getter();
  uint64_t v0 = specialized Sequence.filter(_:)();
  uint64_t v1 = specialized _arrayForceCast<A, B>(_:)(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      id v4 = *(void **)(v1 + 8 * i + 32);
      objc_msgSend(v4, sel_unblock);
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void closure #1 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, "ConversationHUDDetailsViewController: did tap on kick from the kick participant alert", v6, 2u);
    MEMORY[0x1C87760E0](v6, -1, -1);
  }

  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](v2);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    id v9 = *(id *)(v7 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager);

    ConversationControlsManager.kick(participant:)();
  }
}

void closure #2 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, "ConversationHUDDetailsViewController: did tap on cancel from the kick participant alert", v6, 2u);
    MEMORY[0x1C87760E0](v6, -1, -1);
  }

  swift_beginAccess();
  uint64_t v7 = (void *)MEMORY[0x1C8776240](v2);
  if (v7)
  {
    uint64_t v8 = v7;
    objc_msgSend(v7, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

void TUConversation.existingAddressesLowercased.getter()
{
  id v1 = objc_msgSend(v0, sel_remoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Set.count.getter(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v41 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = __CocoaSet.startIndex.getter();
      unsigned __int8 v7 = 1;
    }
    else
    {
      uint64_t v5 = specialized _NativeSet.startIndex.getter(v2);
      unsigned __int8 v7 = v9 & 1;
    }
    uint64_t v38 = v5;
    uint64_t v39 = v6;
    unsigned __int8 v40 = v7;
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = &selRef_ringButton;
      while (1)
      {
        specialized Set.subscript.getter(v38, v39, v40, v2);
        uint64_t v12 = v11;
        id v13 = [v11 v10[217]];
        id v14 = objc_msgSend(v13, sel_value);

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        uint64_t v18 = (void *)MEMORY[0x1C87730B0](v15, v17);
        swift_bridgeObjectRelease();
        uint64_t v19 = outlined bridged method (ob) of @objc NSString._im_normalizedURI()(v18);
        if (!v20) {
          break;
        }
        uint64_t v21 = v19;
        uint64_t v22 = v20;

        uint64_t v23 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v23 = v41;
        }
        unint64_t v24 = *(void *)(v23 + 16);
        if (v24 >= *(void *)(v23 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v23 = v41;
        }
        *(void *)(v23 + 16) = v24 + 1;
        uint64_t v25 = v23 + 16 * v24;
        *(void *)(v25 + 32) = v21;
        *(void *)(v25 + 40) = v22;
        if ((v2 & 0xC000000000000001) != 0)
        {
          if ((v40 & 1) == 0) {
            goto LABEL_24;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationMember>.Index);
          uint64_t v36 = (void (*)(char *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v36(v37, 0);
        }
        else
        {
          uint64_t v26 = v38;
          uint64_t v27 = v39;
          char v28 = v40;
          uint64_t v29 = specialized _NativeSet.index(after:)(v38, v39, v40, v2);
          uint64_t v31 = v30;
          uint64_t v32 = v10;
          char v34 = v33;
          outlined consume of Set<TUHandle>.Index._Variant(v26, v27, v28);
          uint64_t v38 = v29;
          uint64_t v39 = v31;
          unsigned __int8 v35 = v34 & 1;
          uint64_t v10 = v32;
          unsigned __int8 v40 = v35;
        }
        if (!--v4)
        {
          outlined consume of Set<TUHandle>.Index._Variant(v38, v39, v40);
          swift_bridgeObjectRelease();
          uint64_t v8 = v41;
          goto LABEL_21;
        }
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_21:
    specialized Set.init<A>(_:)(v8);
  }
}

uint64_t closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v5);
  if (result)
  {
    unsigned __int8 v7 = (void *)result;
    uint64_t v8 = *(void **)(result + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_controlsManager);
    char v9 = (void *)swift_allocObject();
    long long v9[2] = v7;
    v9[3] = a2;
    void v9[4] = a3;
    id v10 = a3;
    id v11 = v8;
    id v12 = v7;
    id v13 = a2;
    ConversationController.shareableLink(completionHandler:)((void (*)(uint64_t, void))partial apply for closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:), (uint64_t)v9);

    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a2 || !a1)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationControls);
    id v26 = a2;
    id v27 = a2;
    unsigned __int8 v35 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      aBlock[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v37 = (uint64_t)a2;
      id v31 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v35, v28, "Couldn't look up a link for the active conversation, error: %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v30, -1, -1);
      MEMORY[0x1C87760E0](v29, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    id v10 = a1;
    unsigned __int8 v35 = static OS_dispatch_queue.main.getter();
    id v11 = (void *)swift_allocObject();
    v11[2] = a3;
    void v11[3] = v10;
    v11[4] = a4;
    v11[5] = a5;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:);
    aBlock[5] = (uint64_t)v11;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_84;
    id v12 = _Block_copy(aBlock);
    id v13 = a5;
    v34[0] = v10;
    id v14 = a3;
    id v15 = a4;
    swift_release();
    uint64_t v16 = type metadata accessor for DispatchQoS();
    v34[1] = v34;
    uint64_t v17 = *(void *)(v16 - 8);
    MEMORY[0x1F4188790](v16);
    uint64_t v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.unspecified.getter();
    uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v21 = *(void *)(v20 - 8);
    MEMORY[0x1F4188790](v20);
    uint64_t v23 = (char *)v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v24 = v35;
    MEMORY[0x1C8773BA0](0, v19, v23, v12);
    _Block_release(v12);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
}

id closure #1 in closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(void *a1, void *a2, void *a3, void *a4)
{
  id v22 = a2;
  char v23 = 0;
  if (a3)
  {
    if (a4)
    {
LABEL_3:
      id v8 = a3;
      id v9 = a2;
      goto LABEL_6;
    }
  }
  else
  {
    id v10 = a1;
    if (a4) {
      goto LABEL_3;
    }
  }
  id v11 = a3;
  id v12 = a2;
  id result = objc_msgSend(a1, sel_view);
  if (!result)
  {
    __break(1u);
    return result;
  }
LABEL_6:
  id v14 = (objc_class *)type metadata accessor for LinkShareCoordinator();
  objc_allocWithZone(v14);
  id v15 = a4;
  unint64_t v24 = v14;
  uint64_t v25 = &protocol witness table for LinkShareCoordinator;
  id v22 = LinkShareCoordinator.init(type:hostViewController:originatingView:)();
  uint64_t v16 = (uint64_t)a1 + OBJC_IVAR____TtC15ConversationKit36ConversationHUDDetailsViewController_linkShareCoordinator;
  swift_beginAccess();
  outlined assign with take of LinkShareCoordinatorProtocol?((uint64_t)&v22, v16);
  swift_endAccess();
  outlined init with copy of FeatureEligibility?(v16, (uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  if (!v24) {
    return (id)outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  }
  outlined init with copy of IDSLookupManager((uint64_t)&v22, (uint64_t)v19);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  uint64_t v17 = v20;
  uint64_t v18 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t (*)(void), void, uint64_t, uint64_t))(v18 + 16))(TPNumberPadCharacter.rawValue.getter, 0, v17, v18);
  return (id)__swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

#error "1C3235F80: call analysis failed (funcsize=517)"

Swift::Void __swiftcall ConversationHUDDetailsViewController.peoplePickerCancelled()()
{
  objc_msgSend(v0, sel_dismissPeoplePicker);
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.peoplePickerAdded(_:shouldAddOtherInvitedToRemoteMembers:)(Swift::OpaquePointer _, Swift::Bool shouldAddOtherInvitedToRemoteMembers)
{
  OUTLINED_FUNCTION_10_1();
  if ((*(uint64_t (**)(void))(v5 + 656))())
  {
    OUTLINED_FUNCTION_10_1();
    osint log = v7;
    uint64_t v8 = (*(uint64_t (**)(void))(v6 + 624))();
    addPeople(_:toConversation:onActiveCall:shouldAddOtherInvitedToRemoteMembers:)(_._rawValue, oslog, v8, v9, shouldAddOtherInvitedToRemoteMembers);
    swift_unknownObjectRelease();
    objc_msgSend(v2, sel_dismissPeoplePicker);
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    osint log = OUTLINED_FUNCTION_30(v10, (uint64_t)static Logger.conversationControls);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_6_7(&dword_1C2F90000, oslog, v12, "Unable to add remote members, no conversation.");
      OUTLINED_FUNCTION_3();
    }
  }
}

Swift::Void __swiftcall ConversationHUDDetailsViewController.dismissPeoplePicker()()
{
  id v1 = v0;
  id v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_window);

    if (v4)
    {
      uint64_t v5 = (void *)MEMORY[0x1C87730B0](0x676E69646E69625FLL, 0xED0000726579614CLL);
      id v6 = objc_msgSend(v4, sel_valueForKey_, v5);

      if (v6)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v13, 0, sizeof(v13));
      }
      outlined init with take of Any?((uint64_t)v13, (uint64_t)v14);
      if (v15)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CALayer);
        if (swift_dynamicCast())
        {
          objc_msgSend(v12, sel_setTimeOffset_, 0.0);
        }
        else
        {
        }
      }
      else
      {

        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, &demangling cache variable for type metadata for Any?);
      }
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = OUTLINED_FUNCTION_30(v7, (uint64_t)static Logger.conversationControls);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v10, v11, "Dismiss peoplePicker");
      OUTLINED_FUNCTION_3();
    }

    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for ConversationHUDDetailsViewController()
{
  return self;
}

id @nonobjc TUConversationMember.init(handle:nickname:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (void *)MEMORY[0x1C87730B0](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = objc_msgSend(v3, sel_initWithHandle_nickname_, a1, v5);

  return v6;
}

id @nonobjc TUJoinConversationRequest.init(remoteMembers:otherInvitedHandles:originatingUIType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  Class v6 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v3, sel_initWithRemoteMembers_otherInvitedHandles_originatingUIType_, isa, v6, a3);

  return v7;
}

uint64_t outlined bridged method (ob) of @objc NSString._im_normalizedURI()(void *a1)
{
  id v2 = objc_msgSend(a1, sel__im_normalizedURIString);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[3] = type metadata accessor for RecentsCallItem(0);
  v17[4] = (uint64_t)&protocol witness table for RecentsCallItem;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  outlined init with copy of InCallControlsCollectionViewController.Action(a1, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for RecentsCallItem);
  outlined init with copy of IDSLookupManager((uint64_t)v17, (uint64_t)v16);
  uint64_t v9 = OUTLINED_FUNCTION_25_15();
  outlined init with take of Notice(v16, v9 + 16);
  *(void *)(v9 + 56) = a3;
  *(void *)(v9 + 64) = a4;
  outlined init with copy of IDSLookupManager((uint64_t)v17, (uint64_t)v15);
  uint64_t v10 = (void *)swift_allocObject();
  outlined init with take of Notice(v15, (uint64_t)(v10 + 2));
  v10[7] = a2;
  unsigned char v10[8] = a3;
  v10[9] = a4;
  uint64_t v11 = OUTLINED_FUNCTION_26();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  uint64_t v12 = OUTLINED_FUNCTION_26();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  swift_retain();
  id v13 = specialized SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC013buildBlockAllD03for4with10didDismissSo17UIAlertControllerCAA0C9Modelable_p_AA06ReportC7ManagerCyycSgtFySbcfU_TA_0, v9, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:), (uint64_t)v10, (uint64_t)partial apply for closure #3 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v13;
}

id specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v18[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  v18[4] = &protocol witness table for TUCall;
  v18[0] = a1;
  outlined init with copy of IDSLookupManager((uint64_t)v18, (uint64_t)v17);
  uint64_t v8 = OUTLINED_FUNCTION_25_15();
  outlined init with take of Notice(v17, v8 + 16);
  *(void *)(v8 + 56) = a3;
  *(void *)(v8 + 64) = a4;
  outlined init with copy of IDSLookupManager((uint64_t)v18, (uint64_t)v16);
  uint64_t v9 = (void *)swift_allocObject();
  outlined init with take of Notice(v16, (uint64_t)(v9 + 2));
  v9[7] = a2;
  unsigned char v9[8] = a3;
  v9[9] = a4;
  uint64_t v10 = OUTLINED_FUNCTION_26();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  uint64_t v11 = OUTLINED_FUNCTION_26();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  uint64_t v12 = v18[0];
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  id v13 = a1;
  swift_retain();
  id v14 = specialized SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(v12, (uint64_t)closure #1 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)partial apply, v8, (uint64_t)closure #2 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)partial apply, (uint64_t)v9, (uint64_t)closure #3 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)partial apply, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v14;
}

#error "1C3237A44: call analysis failed (funcsize=62)"

#error "1C3237B4C: call analysis failed (funcsize=58)"

#error "1C323840C: call analysis failed (funcsize=62)"

#error "1C3238514: call analysis failed (funcsize=58)"

id specialized SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v16[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  v16[4] = &protocol witness table for TUCall;
  v16[0] = a1;
  outlined init with copy of IDSLookupManager((uint64_t)v16, (uint64_t)v15);
  uint64_t v8 = (void *)swift_allocObject();
  outlined init with take of Notice(v15, (uint64_t)(v8 + 2));
  v8[7] = a2;
  v8[8] = a3;
  v8[9] = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  uint64_t v11 = v16[0];
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  id v12 = a1;
  swift_retain();
  id v13 = specialized SpamAlertBuilder.reportGroupInitiatorAlert(of:reportHandler:cancelHandler:preparationHandler:)(v11, (uint64_t)_s15ConversationKit16SpamAlertBuilderC025buildReportGroupInitiatorD03for4with10didDismissSo17UIAlertControllerCAA0C9Modelable_p_AA0gC7ManagerCyycSgtFySbcfU_TA_0, (uint64_t)v8, (uint64_t)partial apply for closure #3 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), v9);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v13;
}

id specialized SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v16[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  v16[4] = &protocol witness table for TUCall;
  v16[0] = a1;
  outlined init with copy of IDSLookupManager((uint64_t)v16, (uint64_t)v15);
  uint64_t v8 = (void *)swift_allocObject();
  outlined init with take of Notice(v15, (uint64_t)(v8 + 2));
  v8[7] = a2;
  v8[8] = a3;
  v8[9] = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  uint64_t v11 = v16[0];
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  id v12 = a1;
  swift_retain();
  id v13 = specialized SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(v11, (uint64_t)_s15ConversationKit16SpamAlertBuilderC025buildReportGroupInitiatorD03for4with10didDismissSo17UIAlertControllerCAA0C9Modelable_p_AA0gC7ManagerCyycSgtFySbcfU_TA_0, (uint64_t)v8, (uint64_t)partial apply for closure #3 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), v9);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v13;
}

uint64_t sub_1C32390C0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C32390F8()
{
  id v1 = (int *)type metadata accessor for Participant(0);
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + v2;
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      (*(void (**)(unint64_t))(v4 + 8))(v0 + v2);
      break;
    case 4u:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      (*(void (**)(unint64_t))(v12 + 8))(v0 + v2);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v14 = v3 + *(int *)(v13 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v14 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v14 + 96);
      }
      if (*(void *)(v14 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v3 + *(int *)(v13 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  uint64_t v5 = v3 + v1[5];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v6 + 8))(v5);
  id v7 = (id *)(v3 + v1[7]);
  if (*v7)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = v3 + v1[14];
  uint64_t v9 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = v8 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v10, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v10, v9);
  }
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)(uint64_t a1)
{
  type metadata accessor for Participant(0);
  uint64_t v3 = *(void *)(v1 + 16);
  closure #1 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)(a1, v3);
}

void partial apply for closure #2 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)(uint64_t a1)
{
  closure #2 in ConversationHUDDetailsViewController.showKickParticipantAlert(toKick:)(a1, v1);
}

uint64_t sub_1C323949C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)()
{
  return closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t method lookup function for ConversationHUDDetailsViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHUDDetailsViewController);
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.detailsDelegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.detailsDelegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.detailsDelegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.isOnScreen.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.isOnScreen.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.isOnScreen.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.__allocating_init(controlsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.updateScrollableInsets(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ConversationHUDDetailsViewController.collectionView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t outlined init with copy of InCallControlsCollectionViewController.Action(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t _s15ConversationKit16SpamAlertBuilderC013buildBlockAllD03for4with10didDismissSo17UIAlertControllerCAA0C9Modelable_p_AA06ReportC7ManagerCyycSgtFySbcfU_TA_0(uint64_t a1)
{
  return closure #1 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(a1, v1 + 16, *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t partial apply for closure #2 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(uint64_t a1)
{
  return closure #2 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t partial apply for closure #2 in SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1)
{
  return closure #2 in SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1C3239790()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(void *a1, void *a2)
{
  closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1C32397E4()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)()
{
  return closure #1 in closure #1 in closure #1 in ConversationHUDDetailsViewController.handleShareLinkAction(hostingViewController:sourceView:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t outlined assign with take of LinkShareCoordinatorProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkShareCoordinatorProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s15ConversationKit16SpamAlertBuilderC025buildReportGroupInitiatorD03for4with10didDismissSo17UIAlertControllerCAA0C9Modelable_p_AA0gC7ManagerCyycSgtFySbcfU_TA_0(uint64_t a1)
{
  return closure #1 in SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(a1, v1 + 2, v1[7], v1[8], v1[9]);
}

id specialized SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = self;
  id v8 = objc_msgSend(v7, sel_conversationKit);
  v9._uint64_t countAndFlagsBits = 0xD000000000000025;
  v39._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001C379E810;
  v10.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v10.value._object = (void *)0xEF74694B6E6F6974;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v39._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v39);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C3769620;
  uint64_t v13 = specialized SpamModelable.formattedInitiatorHandle.getter();
  unint64_t v15 = v14;
  *(void *)(v12 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (v15) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = 0xE000000000000000;
  }
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v17;
  uint64_t v18 = String.init(format:_:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v21 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v18, v20, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v22 = objc_msgSend(v7, sel_conversationKit);
  v40._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v40._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v40);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v27);
  id v29 = objc_msgSend(v7, sel_conversationKit);
  v30._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v41._object = (void *)0xE000000000000000;
  v30._object = (void *)0x80000001C379E840;
  v31.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v31.value._object = (void *)0xEF74694B6E6F6974;
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v41._uint64_t countAndFlagsBits = 0;
  Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v41);

  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a2;
  *(void *)(v34 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v35 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v33._countAndFlagsBits, (uint64_t)v33._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v34);
  objc_msgSend(v21, sel_addAction_, v28);
  objc_msgSend(v21, sel_addAction_, v35);

  return v21;
}

id specialized SpamAlertBuilder.reportGroupInitiatorAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = self;
  id v8 = objc_msgSend(v7, sel_conversationKit);
  v9._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v39._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001C379E7A0;
  v10.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v10.value._object = (void *)0xEF74694B6E6F6974;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v39._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v39);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C3769620;
  uint64_t v13 = specialized SpamModelable.formattedInitiatorHandle.getter();
  unint64_t v15 = v14;
  *(void *)(v12 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (v15) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = 0xE000000000000000;
  }
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v17;
  uint64_t v18 = String.init(format:_:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v21 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v18, v20, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v22 = objc_msgSend(v7, sel_conversationKit);
  v40._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v40._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v40);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v27);
  id v29 = objc_msgSend(v7, sel_conversationKit);
  v30._uint64_t countAndFlagsBits = 0xD000000000000034;
  v41._object = (void *)0xE000000000000000;
  v30._object = (void *)0x80000001C379E7D0;
  v31.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v31.value._object = (void *)0xEF74694B6E6F6974;
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v41._uint64_t countAndFlagsBits = 0;
  Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v41);

  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a2;
  *(void *)(v34 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v35 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v33._countAndFlagsBits, (uint64_t)v33._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v34);
  objc_msgSend(v21, sel_addAction_, v28);
  objc_msgSend(v21, sel_addAction_, v35);

  return v21;
}

uint64_t CallScreening.StateTransitioner.trackingServce.getter()
{
  return swift_retain();
}

uint64_t CallScreening.StateTransitioner.canScreenCall.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CallScreening.StateTransitioner.onEnterAnsweringState.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CallScreening.StateTransitioner.onEnterScreeningState.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CallScreening.StateTransitioner.onExitScreeningState.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CallScreening.StateTransitioner.endCall.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CallScreening.StateTransitioner.transition(state:transition:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, void *a5@<X8>)
{
  uint64_t v58 = a2;
  outlined init with take of CallScreening.State(a1, (uint64_t)v55);
  uint64_t v9 = v55[2];
  uint64_t v52 = v55[1];
  uint64_t v53 = v55[0];
  uint64_t v11 = v55[3];
  uint64_t v10 = v55[4];
  uint64_t v12 = v55[5];
  uint64_t v13 = v55[6];
  outlined init with take of CallScreening.State(a1, (uint64_t)v56);
  switch(v57 >> 61)
  {
    case 1uLL:
      OUTLINED_FUNCTION_4_78();
      if (v14)
      {
        uint64_t v21 = v5[3];
        uint64_t v41 = v5[4];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
        uint64_t v42 = OUTLINED_FUNCTION_20();
        uint64_t v43 = OUTLINED_FUNCTION_0_78();
        OUTLINED_FUNCTION_3_88(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, a3);
        uint64_t v19 = 0;
        unint64_t v22 = 0x6000000000000000;
        uint64_t v25 = v9;
        uint64_t v20 = v42;
        goto LABEL_27;
      }
      if (v16) {
        goto LABEL_22;
      }
      uint64_t v17 = *v5;
      uint64_t v13 = v5[1];
      uint64_t v18 = v5[2];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
      uint64_t v19 = OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_0_78();
      uint64_t v20 = v58;
      uint64_t v21 = a3;
      outlined copy of CallScreening.StateTransition(v58, a3, a4);
      swift_retain();
      unint64_t v22 = 0x4000000000000000;
      goto LABEL_19;
    case 2uLL:
      OUTLINED_FUNCTION_4_78();
      if (v14)
      {
        uint64_t v13 = v56[2];
        uint64_t v25 = v56[3];
        uint64_t v21 = v5[3];
        uint64_t v41 = v5[4];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
        uint64_t v20 = OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_0_78();
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        unint64_t v22 = 0x6000000000000000;
LABEL_27:
        uint64_t v17 = v41;
        goto LABEL_28;
      }
      BOOL v14 = v23 == 4;
LABEL_11:
      BOOL v24 = v14 && v58 == 1;
      if (!v24 || a3 || a4 != 128) {
        goto LABEL_22;
      }
      uint64_t v13 = v5[1];
      uint64_t v18 = v5[2];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
      uint64_t v20 = OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_0_78();
      uint64_t v21 = 0;
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      unint64_t v22 = 0x2000000000000000;
LABEL_19:
      uint64_t v25 = v18;
      goto LABEL_28;
    case 3uLL:
      v57 &= 0x1FFFFFFFFFFFFFFFuLL;
      int v15 = a4 >> 5;
      if (v15 == 2)
      {
        uint64_t v13 = v56[0];
        uint64_t v25 = v56[1];
        uint64_t v20 = v5[5];
        uint64_t v21 = v5[6];
        uint64_t v17 = v5[7];
        uint64_t v26 = v5[8];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
        uint64_t v40 = OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_0_78();
        unint64_t v22 = v40 | 0x8000000000000000;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        if (v15 != 3)
        {
LABEL_22:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachine<CallScreening.State>.Error);
          lazy protocol witness table accessor for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error();
          swift_allocError();
          *(void *)uint64_t v37 = v53;
          *(void *)(v37 + 8) = v52;
          *(void *)(v37 + 16) = v9;
          *(void *)(v37 + 24) = v11;
          *(void *)(v37 + 32) = v10;
          *(void *)(v37 + 40) = v12;
          uint64_t v38 = v58;
          *(void *)(v37 + 48) = v13;
          *(void *)(v37 + 56) = v38;
          *(void *)(v37 + 64) = a3;
          *(unsigned char *)(v37 + 72) = a4;
          *(unsigned char *)(v37 + 73) = 2;
          outlined copy of CallScreening.StateTransition(v38, a3, a4);
          outlined retain of CallScreening.State((uint64_t *)a1);
          return swift_willThrow();
        }
LABEL_21:
        uint64_t v17 = v5[9];
        uint64_t v26 = v5[10];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
        uint64_t v27 = OUTLINED_FUNCTION_20();
        uint64_t v29 = a4 & 0x1F;
        uint64_t v28 = OUTLINED_FUNCTION_0_78();
        OUTLINED_FUNCTION_3_88(v28, v30, v31, v32, v33, v34, v35, v36, v51, v52, v53, a3);
        unint64_t v22 = 0xA000000000000000;
        uint64_t v25 = v9;
        uint64_t v20 = v29;
        uint64_t v21 = v27;
      }
      uint64_t v19 = v26;
LABEL_28:
      uint64_t result = swift_retain();
      *a5 = v13;
      a5[1] = v25;
      a5[2] = v20;
      a5[3] = v21;
      a5[4] = v17;
      a5[5] = v19;
      a5[6] = v22;
      return result;
    case 4uLL:
      v57 &= 0x1FFFFFFFFFFFFFFFuLL;
      if ((a4 & 0xE0) == 0x60) {
        goto LABEL_21;
      }
      goto LABEL_22;
    default:
      v57 &= 0x1FFFFFFFFFFFFFFFuLL;
      BOOL v14 = (a4 & 0xE0) == 128;
      goto LABEL_11;
  }
}

__n128 CallScreening.StateTransitioner.init(trackingServce:canScreenCall:onEnterAnsweringState:onEnterScreeningState:onExitScreeningState:endCall:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11)
{
  __n128 result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  return result;
}

uint64_t destroy for CallScreening.StateTransitioner()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CallScreening.StateTransitioner(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CallScreening.StateTransitioner(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = a2[10];
  a1[9] = a2[9];
  a1[10] = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CallScreening.StateTransitioner(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallScreening.StateTransitioner(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallScreening.StateTransitioner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallScreening.StateTransitioner()
{
  return &type metadata for CallScreening.StateTransitioner;
}

id UIBlurEffect.init(privateStyle:)(uint64_t a1)
{
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_effectWithStyle_, a1);
  return v1;
}

id @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v8 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v9 = (void *)MEMORY[0x1C87730B0](a3, a4);
  swift_bridgeObjectRelease();
LABEL_6:
  id v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, v8, v9, a5);

  return v10;
}

id @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v8 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  v12[4] = a4;
  uint64_t v12[5] = a5;
  v12[0] = MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_35_11();
  v12[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  void v12[3] = &block_descriptor_193;
  uint64_t v9 = _Block_copy(v12);
  swift_release();
LABEL_6:
  id v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_actionWithTitle_style_handler_, v8, a3, v9);
  _Block_release(v9);

  return v10;
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for SGURL);
    lazy protocol witness table accessor for type SGURL and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type SGURL and conformance NSObject, &lazy cache variable for type metadata for SGURL);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v46[4];
    uint64_t v42 = v46[5];
    uint64_t v6 = v46[6];
    int64_t v7 = v46[7];
    unint64_t v8 = v46[8];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v42 = a1 + 56;
    uint64_t v11 = ~v9;
    uint64_t v12 = -v9;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v8 = v13 & v10;
    swift_bridgeObjectRetain();
    uint64_t v6 = v11;
    int64_t v7 = 0;
  }
  v40[0] = v6;
  v40[3] = v5 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v41 = (unint64_t)(v6 + 64) >> 6;
  int v43 = a4 & 1;
  _OWORD v40[2] = MEMORY[0x1E4FBC838] + 8;
  if (v5 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v8)
    {
      uint64_t v14 = (v8 - 1) & v8;
      unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
      int64_t v16 = v7;
      goto LABEL_29;
    }
    int64_t v20 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v20 >= v41) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v42 + 8 * v20);
    int64_t v16 = v7 + 1;
    if (!v21)
    {
      int64_t v16 = v7 + 2;
      if (v7 + 2 >= v41) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v42 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v7 + 3;
        if (v7 + 3 >= v41) {
          goto LABEL_34;
        }
        unint64_t v21 = *(void *)(v42 + 8 * v16);
        if (!v21)
        {
          int64_t v16 = v7 + 4;
          if (v7 + 4 >= v41) {
            goto LABEL_34;
          }
          unint64_t v21 = *(void *)(v42 + 8 * v16);
          if (!v21)
          {
            int64_t v16 = v7 + 5;
            if (v7 + 5 >= v41) {
              goto LABEL_34;
            }
            unint64_t v21 = *(void *)(v42 + 8 * v16);
            if (!v21)
            {
              int64_t v22 = v7 + 6;
              while (v22 < v41)
              {
                unint64_t v21 = *(void *)(v42 + 8 * v22++);
                if (v21)
                {
                  int64_t v16 = v22 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              swift_release();
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v14 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_29:
    id v19 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t v18 = v19;
    if (!v19) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v23 = (*(uint64_t (**)(id))(*(void *)v45 + 256))(v19);
      specialized Collection<>.firstIndex(of:)((uint64_t)v18, v23, v24, v25, v26, v27, v28, v29, v40[0], v40[1]);
      unint64_t v31 = v30;
      char v33 = v32;
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
      {
        uint64_t v34 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v45 + 272))(v46);

        v34(v46, 0);
      }
      id v35 = objc_msgSend(v18, sel_url);
      uint64_t v36 = type metadata accessor for URL();
      uint64_t v37 = *(void *)(v36 - 8);
      MEMORY[0x1F4188790](v36);
      Swift::String v39 = (char *)v40 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      RecentsLinkController.rejectSuggestedURL(_:refresh:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);

      int64_t v7 = v16;
      unint64_t v8 = v14;
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v17 = __CocoaSet.Iterator.next()();
      if (v17)
      {
        v46[10] = v17;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for SGURL);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v18 = (void *)v46[0];
        id v19 = (id)swift_unknownObjectRelease();
        int64_t v16 = v7;
        uint64_t v14 = v8;
        if (v18) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int32) -> ()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  long long v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t RecentsLinkController.__allocating_init(conversationManager:)(uint64_t a1)
{
  OUTLINED_FUNCTION_34_14();
  uint64_t v2 = swift_allocObject();
  RecentsLinkController.init(conversationManager:)(a1);
  return v2;
}

void specialized RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)()
{
  OUTLINED_FUNCTION_31();
  long long v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v61 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  uint64_t v59 = OUTLINED_FUNCTION_23_29(v11, v49);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_22_27(v13, v50);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = OUTLINED_FUNCTION_30_0();
  uint64_t v16 = type metadata accessor for RecentsCallItem(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1(v16);
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_17_0();
  uint64_t v20 = OUTLINED_FUNCTION_26();
  *(void *)(v20 + 16) = v5;
  *(void *)(v20 + 24) = v3;
  unint64_t v21 = *(void *)(v9 + 16);
  if (v21)
  {
    uint64_t v57 = v20;
    uint64_t v54 = v7;
    id v56 = v5;
    uint64_t v22 = v9 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v23 = *(void *)(v19 + 72);
    id v52 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v51 = v21;
    unint64_t v24 = v21;
    while (1)
    {
      _s15ConversationKit15RecentsCallItemVWOcTm_2(v22, v0, (void (*)(void))type metadata accessor for RecentsCallItem);
      _s15ConversationKit15RecentsCallItemVWOcTm_2(v0, (uint64_t)v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v25 = v60;
          outlined init with take of RecentOngoingConversationMetadata((uint64_t)v1, v60, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
          OUTLINED_FUNCTION_27_24(*(int *)(v61 + 28));
          uint64_t v26 = type metadata accessor for RecentOngoingConversationMetadata;
          goto LABEL_7;
        case 2u:
          long long v3 = *v1;
          goto LABEL_10;
        case 3u:
        case 4u:
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
          goto LABEL_8;
        default:
          uint64_t v25 = v58;
          outlined init with take of RecentOngoingConversationMetadata((uint64_t)v1, v58, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
          OUTLINED_FUNCTION_27_24(*(int *)(v59 + 44));
          uint64_t v26 = type metadata accessor for RecentCallRecentItemMetadata;
LABEL_7:
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_0(v25, (void (*)(void))v26);
          if (v3)
          {
LABEL_10:
            swift_release();
            swift_bridgeObjectRelease();
            unsigned int v27 = objc_msgSend(v3, sel_isLocallyCreated);

            _s15ConversationKit19RecentsCallItemTypeOWOhTm_0(v0, (void (*)(void))type metadata accessor for RecentsCallItem);
            if (v27)
            {
              swift_bridgeObjectRelease();
              uint64_t v29 = self;
              id v30 = objc_msgSend(v29, sel_conversationKit);
              OUTLINED_FUNCTION_25_26();
              if (v51 < 2)
              {
                OUTLINED_FUNCTION_19_1(v31, 0x80000001C37A26D0);
                OUTLINED_FUNCTION_24_25();
                id v35 = OUTLINED_FUNCTION_50_8();
                uint64_t v33 = OUTLINED_FUNCTION_39_14();
                uint64_t v34 = "DELETE_LINK_ALERT_MESSAGE";
              }
              else
              {
                OUTLINED_FUNCTION_19_1(0xD000000000000018, 0x80000001C37A2730);
                OUTLINED_FUNCTION_24_25();
                id v32 = OUTLINED_FUNCTION_50_8();
                uint64_t v33 = OUTLINED_FUNCTION_40_12();
                uint64_t v34 = "DELETE_LINKS_ALERT_MESSAGE";
              }
              OUTLINED_FUNCTION_6_73(v33, (uint64_t)v34);

              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
              swift_bridgeObjectRetain();
              id v36 = OUTLINED_FUNCTION_36_13();
              uint64_t v37 = (void *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
              uint64_t v38 = OUTLINED_FUNCTION_26();
              *(void *)(v38 + 16) = partial apply for closure #1 in RecentsListViewController.deleteAllRecents(_:);
              *(void *)(v38 + 24) = v57;
              id v39 = v36;
              uint64_t v40 = swift_retain();
              id v43 = OUTLINED_FUNCTION_52_6(v40, v41, v42, (uint64_t)closure #2 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)partial apply);
              id v44 = objc_msgSend(self, sel_conversationKit, v52, v54);
              OUTLINED_FUNCTION_41_12();
              OUTLINED_FUNCTION_2_79((uint64_t)"DELETE_LINK_ALERT_CANCEL");

              uint64_t v45 = OUTLINED_FUNCTION_26();
              *(void *)(v45 + 16) = partial apply for closure #1 in RecentsListViewController.deleteAllRecents(_:);
              *(void *)(v45 + 24) = v57;
              uint64_t v46 = swift_retain();
              OUTLINED_FUNCTION_54_4(v46, v47, v48, (uint64_t)closure #3 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)partial apply);
              OUTLINED_FUNCTION_38_11();
              objc_msgSend(v39, (SEL)(v45 + 3459), v37);
              objc_msgSend(v55, sel_presentViewController_animated_completion_, v39, 1, 0);

              swift_release();
              goto LABEL_15;
            }
          }
          else
          {
LABEL_8:
            _s15ConversationKit19RecentsCallItemTypeOWOhTm_0(v0, (void (*)(void))type metadata accessor for RecentsCallItem);
          }
          v22 += v23;
          if (!--v24)
          {
            swift_bridgeObjectRelease();
            uint64_t v5 = v56;
            goto LABEL_14;
          }
          break;
      }
    }
  }
  id v28 = v5;
  swift_bridgeObjectRetain();
LABEL_14:
  doRemoveAllRecents #1 () in RecentsListViewController.deleteAllRecents(_:)();

  swift_release();
LABEL_15:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28();
}

void specialized RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OUTLINED_FUNCTION_31();
  uint64_t v25 = v24;
  id v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  id v82 = v32;
  id v89 = (unint64_t *)v33;
  uint64_t v34 = a21;
  uint64_t v95 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_2_3();
  uint64_t v94 = v36;
  uint64_t v93 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_2_3();
  uint64_t v92 = v38;
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_17_0();
  uint64_t v40 = type metadata accessor for RecentsCallItem(0);
  uint64_t v41 = OUTLINED_FUNCTION_1(v40);
  uint64_t v87 = v42;
  MEMORY[0x1F4188790](v41);
  id v44 = (char *)&v79 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = (void *)swift_allocObject();
  uint64_t v46 = v31;
  v45[2] = v31;
  v45[3] = v29;
  uint64_t v47 = v29;
  v45[4] = v27;
  v45[5] = v25;
  v45[6] = a21;
  v45[7] = a22;
  id v90 = (char *)a23;
  uint64_t v91 = (void *)a22;
  id v88 = v45;
  v45[8] = a23;
  uint64_t v48 = v89;
  if (v89[2])
  {
    unint64_t v86 = v89[2];
    uint64_t v49 = a21;
    uint64_t v50 = v87;
    uint64_t v51 = (uint64_t)v89 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    id v81 = v46;
    id v80 = v46;
    uint64_t v83 = v47;
    uint64_t v84 = (uint64_t)v27;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v47);
    uint64_t v34 = *(void *)(v50 + 72);
    uint64_t v87 = v25;
    swift_retain();
    uint64_t v85 = a21;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = v86;
    while (1)
    {
      _s15ConversationKit15RecentsCallItemVWOcTm_2(v51, (uint64_t)v44, (void (*)(void))type metadata accessor for RecentsCallItem);
      _s15ConversationKit15RecentsCallItemVWOcTm_2((uint64_t)v44, (uint64_t)v23, (void (*)(void))type metadata accessor for RecentsCallItemType);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v49 = v94;
          outlined init with take of RecentOngoingConversationMetadata((uint64_t)v23, v94, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
          OUTLINED_FUNCTION_26_23(*(int *)(v95 + 28));
          id v52 = type metadata accessor for RecentOngoingConversationMetadata;
          goto LABEL_7;
        case 2u:
          uint64_t v48 = *v23;
          goto LABEL_10;
        case 3u:
        case 4u:
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v23, (void (*)(void))type metadata accessor for RecentsCallItemType);
          goto LABEL_8;
        default:
          uint64_t v49 = v92;
          outlined init with take of RecentOngoingConversationMetadata((uint64_t)v23, v92, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
          OUTLINED_FUNCTION_26_23(*(int *)(v93 + 44));
          id v52 = type metadata accessor for RecentCallRecentItemMetadata;
LABEL_7:
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_0(v49, (void (*)(void))v52);
          if (v48)
          {
LABEL_10:
            swift_release();
            swift_bridgeObjectRelease();
            id v27 = objc_msgSend(v48, sel_isLocallyCreated);

            _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v44, (void (*)(void))type metadata accessor for RecentsCallItem);
            if (v27)
            {
              swift_bridgeObjectRelease();
              uint64_t v57 = self;
              id v58 = objc_msgSend(v57, sel_conversationKit);
              if (v86 < 2)
              {
                OUTLINED_FUNCTION_25_26();
                OUTLINED_FUNCTION_19_1(v62, 0x80000001C37A26D0);
                OUTLINED_FUNCTION_24_25();
                id v63 = OUTLINED_FUNCTION_50_8();
                uint64_t v60 = OUTLINED_FUNCTION_39_14();
                uint64_t v61 = "DELETE_LINK_ALERT_MESSAGE";
              }
              else
              {
                OUTLINED_FUNCTION_25_26();
                OUTLINED_FUNCTION_19_1(0xD000000000000018, 0x80000001C37A2730);
                OUTLINED_FUNCTION_24_25();
                id v59 = OUTLINED_FUNCTION_50_8();
                uint64_t v60 = OUTLINED_FUNCTION_40_12();
                uint64_t v61 = "DELETE_LINKS_ALERT_MESSAGE";
              }
              OUTLINED_FUNCTION_6_73(v60, (uint64_t)v61);

              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
              swift_bridgeObjectRetain();
              id v64 = OUTLINED_FUNCTION_36_13();
              uint64_t v65 = (void *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
              uint64_t v66 = OUTLINED_FUNCTION_26();
              uint64_t v67 = (uint64_t)v88;
              *(void *)(v66 + 16) = partial apply for specialized closure #1 in RecentsListViewController.deleteRecentCalls(_:preparationHandler:);
              *(void *)(v66 + 24) = v67;
              id v68 = v64;
              uint64_t v69 = swift_retain();
              id v72 = OUTLINED_FUNCTION_52_6(v69, v70, v71, (uint64_t)closure #2 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)partial apply);
              id v73 = objc_msgSend(self, sel_conversationKit);
              OUTLINED_FUNCTION_41_12();
              uint64_t v49 = OUTLINED_FUNCTION_2_79((uint64_t)"DELETE_LINK_ALERT_CANCEL");

              uint64_t v74 = OUTLINED_FUNCTION_26();
              *(void *)(v74 + 16) = partial apply for specialized closure #1 in RecentsListViewController.deleteRecentCalls(_:preparationHandler:);
              *(void *)(v74 + 24) = v67;
              uint64_t v75 = swift_retain();
              OUTLINED_FUNCTION_54_4(v75, v76, v77, (uint64_t)closure #3 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)partial apply);
              OUTLINED_FUNCTION_38_11();
              objc_msgSend(v68, (SEL)(v74 + 3459), v65);
              objc_msgSend(v82, sel_presentViewController_animated_completion_, v68, 1, 0);

              swift_release();
              OUTLINED_FUNCTION_49_7();
              goto LABEL_15;
            }
          }
          else
          {
LABEL_8:
            _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v44, (void (*)(void))type metadata accessor for RecentsCallItem);
          }
          v51 += v34;
          if (!--v25)
          {
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_49_7();
            id v53 = v81;
            goto LABEL_14;
          }
          break;
      }
    }
  }
  id v53 = v46;
  id v54 = v46;
  uint64_t v49 = v29;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v29);
  swift_retain();
  swift_retain();
  uint64_t v48 = v91;
  swift_bridgeObjectRetain();
  id v44 = v90;
  swift_bridgeObjectRetain();
LABEL_14:
  OUTLINED_FUNCTION_2();
  uint64_t v55 = *(void *)(v25 + 16);
  OUTLINED_FUNCTION_2();
  uint64_t v56 = *(void *)(v34 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(v55, v56, (uint64_t)v48, (uint64_t)v44, (uint64_t)v53, v49, (uint64_t)v27, v25, v34, v78, v79, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87,
    (uint64_t)v88,
    (uint64_t)v89,
    (uint64_t)v90,
    (uint64_t)v91);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_15:
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28();
}

void RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  id v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v64 = type metadata accessor for RecentOngoingConversationMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  uint64_t v62 = OUTLINED_FUNCTION_23_29(v10, (uint64_t)v65._object);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_22_27(v12, (uint64_t)v65._object);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_36_4();
  uint64_t v14 = type metadata accessor for RecentsCallItem(0);
  uint64_t v15 = OUTLINED_FUNCTION_15_42(v14);
  __n128 v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v65._object - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = *(void *)(v8 + 16);
  if (!v20)
  {
LABEL_13:
    v4(1, v17);
    goto LABEL_14;
  }
  id v59 = v4;
  uint64_t v60 = v2;
  id v57 = v6;
  uint64_t v58 = v8;
  uint64_t v21 = v8 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v22 = *(void *)(v16 + 72);
  swift_bridgeObjectRetain();
  unint64_t v56 = v20;
  while (2)
  {
    _s15ConversationKit15RecentsCallItemVWOcTm_2(v21, (uint64_t)v19, (void (*)(void))type metadata accessor for RecentsCallItem);
    _s15ConversationKit15RecentsCallItemVWOcTm_2((uint64_t)v19, (uint64_t)v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v23 = v63;
        outlined init with take of RecentOngoingConversationMetadata((uint64_t)v0, v63, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
        OUTLINED_FUNCTION_28_20(*(int *)(v64 + 28));
        uint64_t v24 = type metadata accessor for RecentOngoingConversationMetadata;
        goto LABEL_7;
      case 2u:
        uint64_t v2 = *v0;
        goto LABEL_10;
      case 3u:
      case 4u:
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v0, (void (*)(void))type metadata accessor for RecentsCallItemType);
        goto LABEL_8;
      default:
        uint64_t v23 = v61;
        outlined init with take of RecentOngoingConversationMetadata((uint64_t)v0, v61, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
        OUTLINED_FUNCTION_28_20(*(int *)(v62 + 44));
        uint64_t v24 = type metadata accessor for RecentCallRecentItemMetadata;
LABEL_7:
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_0(v23, (void (*)(void))v24);
        if (!v2)
        {
LABEL_8:
          _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v19, (void (*)(void))type metadata accessor for RecentsCallItem);
LABEL_11:
          v21 += v22;
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            id v4 = v59;
            goto LABEL_13;
          }
          continue;
        }
LABEL_10:
        swift_release();
        swift_bridgeObjectRelease();
        unsigned __int8 v25 = objc_msgSend(v2, sel_isLocallyCreated);

        _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v19, (void (*)(void))type metadata accessor for RecentsCallItem);
        if ((v25 & 1) == 0) {
          goto LABEL_11;
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = self;
        id v27 = objc_msgSend(v26, sel_conversationKit);
        if (v56 < 2)
        {
          OUTLINED_FUNCTION_25_26();
          v34._object = (void *)0x80000001C37A26D0;
          v35.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
          v35.value._object = (void *)0xEF74694B6E6F6974;
          v36._uint64_t countAndFlagsBits = 0;
          v36._object = (void *)0xE000000000000000;
          v65._uint64_t countAndFlagsBits = 0;
          Swift::String v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, (NSBundle)v27, v36, v65);
          uint64_t countAndFlagsBits = v37._countAndFlagsBits;
          object = v37._object;

          id v38 = objc_msgSend(v26, sel_conversationKit);
          uint64_t v32 = OUTLINED_FUNCTION_39_14();
          uint64_t v33 = "DELETE_LINK_ALERT_MESSAGE";
        }
        else
        {
          OUTLINED_FUNCTION_25_26();
          uint64_t countAndFlagsBits = OUTLINED_FUNCTION_2_79((uint64_t)"DELETE_LINKS_ALERT_TITLE");
          object = v29;

          id v31 = objc_msgSend(v26, sel_conversationKit);
          uint64_t v32 = OUTLINED_FUNCTION_40_12();
          uint64_t v33 = "DELETE_LINKS_ALERT_MESSAGE";
        }
        uint64_t v39 = OUTLINED_FUNCTION_6_73(v32, (uint64_t)v33);
        uint64_t v41 = v40;

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
        swift_bridgeObjectRetain();
        id v42 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(countAndFlagsBits, (uint64_t)object, v39, v41, 1);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
        uint64_t v43 = OUTLINED_FUNCTION_26();
        uint64_t v45 = v59;
        id v44 = v60;
        *(void *)(v43 + 16) = v59;
        *(void *)(v43 + 24) = v44;
        id v46 = v42;
        swift_retain();
        id v47 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(countAndFlagsBits, (uint64_t)object, 2, (uint64_t)partial apply for closure #2 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:), v43);
        uint64_t v48 = self;
        id v49 = v47;
        id v50 = objc_msgSend(v48, sel_conversationKit);
        OUTLINED_FUNCTION_41_12();
        uint64_t v51 = OUTLINED_FUNCTION_2_79((uint64_t)"DELETE_LINK_ALERT_CANCEL");
        uint64_t v53 = v52;

        uint64_t v54 = OUTLINED_FUNCTION_26();
        *(void *)(v54 + 16) = v45;
        *(void *)(v54 + 24) = v44;
        swift_retain();
        id v55 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v51, v53, 1, (uint64_t)partial apply for closure #3 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:), v54);
        objc_msgSend(v46, sel_addAction_, v49);

        objc_msgSend(v46, sel_addAction_, v55);
        objc_msgSend(v57, sel_presentViewController_animated_completion_, v46, 1, 0);

LABEL_14:
        OUTLINED_FUNCTION_28();
        return;
    }
  }
}

BOOL specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

BOOL specialized SetAlgebra.isEmpty.getter(int a1)
{
  return a1 == 0;
}

uint64_t specialized OptionSet.symmetricDifference(_:)(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

uint64_t specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t result)
{
  *v1 ^= result;
  return result;
}

{
  _DWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

{
  _DWORD *v1;

  *v1 &= ~result;
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    uint64_t v3 = 0;
    for (uint64_t i = a1 + 48; ; i += 24)
    {
      uint64_t v19 = v3;
      id v5 = *(id *)(i - 16);
      swift_bridgeObjectRetain();
      swift_retain();
      id v6 = objc_msgSend(v5, sel_pseudonym);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      id v10 = objc_msgSend(v2, sel_pseudonym);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      if (v7 == v11 && v9 == v13)
      {

        swift_release();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        return v19;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15) {
        break;
      }
      uint64_t v3 = v19 + 1;
      uint64_t v2 = a2;
      if (v17 == v19 + 1)
      {

        return 0;
      }
    }

    return v19;
  }
  else
  {

    return 0;
  }
}

void *RecentsLinkControllerModel.UpdateState.fetchingLinks.unsafeMutableAddressor()
{
  return &static RecentsLinkControllerModel.UpdateState.fetchingLinks;
}

uint64_t static RecentsLinkControllerModel.UpdateState.fetchingLinks.getter()
{
  return 1;
}

void *RecentsLinkControllerModel.UpdateState.fetchingURLs.unsafeMutableAddressor()
{
  return &static RecentsLinkControllerModel.UpdateState.fetchingURLs;
}

uint64_t static RecentsLinkControllerModel.UpdateState.fetchingURLs.getter()
{
  return 2;
}

void *RecentsLinkControllerModel.UpdateState.itemsNeedUpdate.unsafeMutableAddressor()
{
  return &static RecentsLinkControllerModel.UpdateState.itemsNeedUpdate;
}

uint64_t static RecentsLinkControllerModel.UpdateState.itemsNeedUpdate.getter()
{
  return 4;
}

uint64_t RecentsLinkControllerModel.needsUpdateState.getter()
{
  return *(void *)(v0 + 16);
}

id RecentsLinkControllerModel.updateQueue.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t key path setter for RecentsLinkControllerModel.delegate : RecentsLinkControllerModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 144);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t RecentsLinkControllerModel.delegate.getter()
{
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 32);
}

void (*RecentsLinkControllerModel.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  OUTLINED_FUNCTION_53_5();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  v3[3] = v4;
  v3[4] = v5;
  return RecentsLinkControllerModel.delegate.modify;
}

void RecentsLinkControllerModel.delegate.modify()
{
  OUTLINED_FUNCTION_42_12();
  *(void *)(v2 + 40) = v3;
  swift_unknownObjectWeakAssign();
  if (v1)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v0);
}

uint64_t key path setter for RecentsLinkControllerModel.tuLinks : RecentsLinkControllerModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t RecentsLinkControllerModel.tuLinks.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_18_0();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RecentsLinkControllerModel.tuLinks.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t RecentsLinkControllerModel.updateState.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_18_0();
  *(void *)(v1 + 56) = a1;
  return RecentsLinkControllerModel.updateState.didset();
}

uint64_t key path setter for RecentsLinkControllerModel.conversationLinks : RecentsLinkControllerModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 240);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t RecentsLinkControllerModel.conversationLinks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RecentsLinkControllerModel.conversationLinks.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  specialized static Array<A>.== infix(_:_:)();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if (v4)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v1 + 64) = a1;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50();
    uint64_t v8 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(v6 + 200))(v9);
    if ((*v7 & 4) == 0) {
      *v7 |= 4uLL;
    }
    return v8(v9, 0);
  }
}

uint64_t (*RecentsLinkControllerModel.conversationLinks.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 64);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RecentsLinkControllerModel.conversationLinks.modify;
}

uint64_t RecentsLinkControllerModel.conversationLinks.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RecentsLinkControllerModel.conversationLinks.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  RecentsLinkControllerModel.conversationLinks.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for RecentsLinkControllerModel.suggestionsURLs : RecentsLinkControllerModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 264);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t RecentsLinkControllerModel.suggestionsURLs.didset(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized static Array<A>.== infix(_:_:)(v3, a1, v4, v5, v6, v7, v8, v9, v14, v15[0]);
  LOBYTE(a1) = v10;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v13 = (uint64_t (*)(unint64_t *, void))(*(uint64_t (**)(unint64_t *))(*(void *)v1 + 200))(v15);
    if ((*v12 & 4) == 0) {
      *v12 |= 4uLL;
    }
    return v13(v15, 0);
  }
  return result;
}

uint64_t RecentsLinkControllerModel.suggestionsURLs.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_18_0();
  uint64_t v3 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = a1;
  RecentsLinkControllerModel.suggestionsURLs.didset(v3);
  return swift_bridgeObjectRelease();
}

void (*RecentsLinkControllerModel.suggestionsURLs.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  OUTLINED_FUNCTION_2();
  v3[3] = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  return RecentsLinkControllerModel.suggestionsURLs.modify;
}

void RecentsLinkControllerModel.suggestionsURLs.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    RecentsLinkControllerModel.suggestionsURLs.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    RecentsLinkControllerModel.suggestionsURLs.setter(v3);
  }
  free(v2);
}

Swift::Void __swiftcall RecentsLinkControllerModel.updateCallItems()()
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_50();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 136))();
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    uint64_t v7 = OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_50();
    *(void *)(v7 + 16) = (*(uint64_t (**)(void))(v8 + 232))();
    OUTLINED_FUNCTION_3_2();
    uint64_t v10 = (*(uint64_t (**)(void))(v9 + 256))();
    OUTLINED_FUNCTION_50();
    uint64_t v13 = (void (*)(void *, void))(*(uint64_t (**)(void *))(v11 + 200))(v32);
    if ((*v12 & 4) != 0) {
      *v12 &= ~4uLL;
    }
    v13(v32, 0);
    uint64_t v30 = *(void *)(v0 + 24);
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = v0;
    v14[3] = v7;
    v14[4] = v10;
    uint64_t v14[5] = v5;
    v14[6] = v6;
    v32[4] = partial apply for closure #1 in RecentsLinkControllerModel.updateCallItems();
    v32[5] = v14;
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 1107296256;
    v32[2] = thunk for @escaping @callee_guaranteed () -> ();
    v32[3] = &block_descriptor_48;
    id v27 = _Block_copy(v32);
    uint64_t v28 = type metadata accessor for DispatchQoS();
    uint64_t v29 = &v26;
    OUTLINED_FUNCTION_4();
    uint64_t v16 = v15;
    MEMORY[0x1F4188790](v17);
    OUTLINED_FUNCTION_5_1();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v26 = (uint64_t)&v26;
    OUTLINED_FUNCTION_4();
    uint64_t v20 = v19;
    MEMORY[0x1F4188790](v21);
    OUTLINED_FUNCTION_21();
    uint64_t v24 = v23 - v22;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEB0]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unsigned __int8 v25 = v27;
    MEMORY[0x1C8773BA0](0, v1, v24, v27);
    _Block_release(v25);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v18);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v28);
    swift_release();
    swift_release();
  }
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in RecentsLinkControllerModel.updateCallItems()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  RecentsLinkControllerModel.generateCallItems(for:suggestionsURLs:)();
  uint64_t v9 = v8;
  swift_endAccess();
  uint64_t ObjectType = swift_getObjectType();
  v12[2] = a1;
  void v12[3] = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(a5 + 8))(a1, v9, partial apply for closure #1 in closure #1 in RecentsLinkControllerModel.updateCallItems(), v12, ObjectType, a5);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in RecentsLinkControllerModel.updateCallItems()(uint64_t a1, void *a2)
{
  *(void *)(a1 + 64) = *a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void RecentsLinkControllerModel.generateCallItems(for:suggestionsURLs:)()
{
  OUTLINED_FUNCTION_31();
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = OUTLINED_FUNCTION_31_20();
  uint64_t v53 = type metadata accessor for RecentsCallItem(v9);
  OUTLINED_FUNCTION_4();
  uint64_t v56 = v10;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v57 = (uint64_t)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v55 = (uint64_t)v50 - v14;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (void *)((char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v0 + 24);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v20, *MEMORY[0x1E4FBCBE8], v15);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v20, v15);
  if (v21)
  {
    uint64_t v23 = *v6;
    uint64_t v24 = *(void *)(*v6 + 16);
    unint64_t v25 = MEMORY[0x1E4FBC860];
    if (v24)
    {
      unint64_t v51 = v4;
      uint64_t v52 = v6;
      uint64_t v54 = v1;
      uint64_t v58 = (void *)MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v26 = v58;
      v50[1] = v23;
      uint64_t v27 = v23 + 48;
      do
      {
        id v28 = *(id *)(v27 - 16);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        id v29 = v28;
        uint64_t v2 = MEMORY[0x1E4FBC870];
        if ((v25 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(v25);
          uint64_t v2 = v30;
        }
        if (one-time initialization token for faceTime != -1) {
          swift_once();
        }
        uint64_t v31 = static ParticipantContactDetailsCache.faceTime;
        swift_retain();
        swift_release_n();
        swift_bridgeObjectRelease_n();

        uint64_t v58 = v26;
        unint64_t v32 = v26[2];
        if (v32 >= v26[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v26 = v58;
        }
        void v26[2] = v32 + 1;
        uint64_t v33 = &v26[3 * v32];
        v33[4] = v29;
        v33[5] = v2;
        v33[6] = v31;
        v27 += 24;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease_n();
      uint64_t v1 = v54;
      unint64_t v4 = v51;
      uint64_t v6 = v52;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = (void *)MEMORY[0x1E4FBC860];
    }
    *uint64_t v6 = v26;
    uint64_t v34 = type metadata accessor for Date();
    OUTLINED_FUNCTION_4();
    uint64_t v54 = v35;
    MEMORY[0x1F4188790](v36);
    OUTLINED_FUNCTION_36_4();
    uint64_t v37 = Date.init()();
    MEMORY[0x1F4188790](v37);
    v50[-2] = v6;
    v50[-1] = v2;
    specialized Sequence.forEach(_:)(partial apply for closure #2 in RecentsLinkControllerModel.generateCallItems(for:suggestionsURLs:), (uint64_t)&v50[-4], v4);
    unint64_t v61 = v25;
    uint64_t v38 = *v6;
    uint64_t v39 = *(void *)(*v6 + 16);
    if (v39)
    {
      unint64_t v51 = v34;
      uint64_t v52 = v50;
      swift_bridgeObjectRetain_n();
      uint64_t v40 = (uint64_t *)(v38 + 48);
      uint64_t v41 = MEMORY[0x1E4FBC860];
      uint64_t v42 = v53;
      do
      {
        uint64_t v43 = *(v40 - 1);
        uint64_t v44 = *v40;
        uint64_t v58 = (void *)*(v40 - 2);
        uint64_t v59 = v43;
        uint64_t v60 = v44;
        uint64_t v45 = v58;
        swift_bridgeObjectRetain();
        swift_retain();
        RecentsCallItem.init(link:)();
        if (__swift_getEnumTagSinglePayload(v1, 1, v42) == 1)
        {
          outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
        }
        else
        {
          uint64_t v46 = v55;
          outlined init with take of RecentOngoingConversationMetadata(v1, v55, (void (*)(void))type metadata accessor for RecentsCallItem);
          outlined init with take of RecentOngoingConversationMetadata(v46, v57, (void (*)(void))type metadata accessor for RecentsCallItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, v41);
          }
          unint64_t v48 = *(void *)(v41 + 16);
          unint64_t v47 = *(void *)(v41 + 24);
          if (v48 >= v47 >> 1) {
            uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v41);
          }
          *(void *)(v41 + 16) = v48 + 1;
          outlined init with take of RecentOngoingConversationMetadata(v57, v41+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v48, (void (*)(void))type metadata accessor for RecentsCallItem);
        }
        v40 += 3;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease_n();
    }
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_26_2();
    v49();
    OUTLINED_FUNCTION_28();
  }
  else
  {
    __break(1u);
  }
}

void closure #2 in RecentsLinkControllerModel.generateCallItems(for:suggestionsURLs:)(void **a1, unint64_t a2)
{
  unint64_t v4 = *a1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationLink);
  id v5 = objc_msgSend(v4, sel_url);
  uint64_t v6 = type metadata accessor for URL();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v10 = @nonobjc TUConversationLink.init(url:)((uint64_t)v8, v9);
  if (!v10) {
    return;
  }
  id v11 = v10;
  uint64_t v12 = swift_bridgeObjectRetain();
  unint64_t v13 = specialized Collection.firstIndex(where:)(v12, v11);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(void *)(*(void *)a2 + 16))
    {
      uint64_t v16 = (void *)(*(void *)a2 + 24 * v13);
      uint64_t v17 = v16[5];
      uint64_t v15 = v16[6];
      id v59 = (id)v16[4];
      uint64_t v60 = v17;
      uint64_t v61 = v15;
      id v18 = v59;
      swift_bridgeObjectRetain();
      swift_retain();
      ConversationLink.updated(with:)(v4, &v62);
      swift_release();
      swift_bridgeObjectRelease();

      long long v58 = v62;
      id v5 = v63;
      uint64_t v19 = *(void *)a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)a2 = v19;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_6:
        if (v13 < *(void *)(v19 + 16))
        {
          uint64_t v21 = v19 + 24 * v13;
          id v22 = *(void **)(v21 + 32);
          *(_OWORD *)(v21 + 32) = v58;
          *(void *)(v21 + 48) = v5;

          swift_release();
          swift_bridgeObjectRelease();

          return;
        }
        __break(1u);
LABEL_24:
        id v48 = v11;
        id v49 = v4;
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
LABEL_22:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v19 = v47;
      *(void *)a2 = v47;
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_22;
  }
  id v64 = v11;
  unint64_t v51 = a2;
  *(void *)&long long v58 = v2;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v57 = &v50;
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  MEMORY[0x1F4188790](v23);
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  SGURL.recentsDate.getter();
  uint64_t v55 = (char *)&v50 - v26;
  int v52 = static Date.< infix(_:_:)();
  uint64_t v27 = type metadata accessor for Calendar();
  uint64_t v54 = (void (*)(char *, uint64_t))&v50;
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = static Calendar.current.getter();
  uint64_t v53 = &v50;
  MEMORY[0x1F4188790](v31);
  unint64_t v32 = (char *)&v50 - v26;
  uint64_t v15 = v23;
  SGURL.recentsDate.getter();
  char v33 = Calendar.isDateInToday(_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v56 = v24 + 8;
  v34(v32, v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  if ((v33 & 1) == 0 && (v52 & 1) == 0)
  {
    v34(v55, v15);

    return;
  }
  uint64_t v54 = v34;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769830;
  *(void *)(inited + 32) = v4;
  *(void *)&long long v62 = inited;
  specialized Array._endMutation()();
  a2 = v62;
  id v11 = v64;
  if ((unint64_t)v62 >> 62) {
    goto LABEL_24;
  }
  uint64_t v36 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v37 = v64;
  id v38 = v4;
LABEL_13:
  unint64_t v39 = v51;
  if (v36)
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(a2);
    uint64_t v41 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = MEMORY[0x1E4FBC870];
  }
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v42 = static ParticipantContactDetailsCache.faceTime;
  swift_retain_n();
  id v43 = v11;
  swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v44 = *(void *)(*(void *)v39 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
  uint64_t v45 = *(void *)v39;
  *(void *)(v45 + 16) = v44 + 1;
  uint64_t v46 = (void *)(v45 + 24 * v44);
  void v46[4] = v43;
  void v46[5] = v41;
  v46[6] = v42;
  swift_release();
  swift_bridgeObjectRelease();

  v54(v55, v15);
}

uint64_t RecentsLinkControllerModel.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RecentsLinkControllerModel.__deallocating_deinit()
{
  RecentsLinkControllerModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t RecentsLinkControllerModel.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  RecentsLinkControllerModel.init()();
  return v0;
}

uint64_t key path setter for RecentLinkCallItems.callItems : RecentLinkCallItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t RecentLinkCallItems.callItems.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_18_0();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RecentLinkCallItems.callItems.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t RecentLinkCallItems.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RecentLinkCallItems.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocClassInstance();
}

uint64_t RecentLinkCallItems.__allocating_init()()
{
  uint64_t result = OUTLINED_FUNCTION_20();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t RecentLinkCallItems.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  return result;
}

void one-time initialization function for deleteLink()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  v5._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x4C5F4554454C4544;
  v1._object = (void *)0xEB000000004B4E49;
  v2.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v2.value._object = (void *)0xEF74694B6E6F6974;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v5);

  static RecentsLinkController.deleteLink = (__int128)v4;
}

uint64_t static RecentsLinkController.deleteLink.getter()
{
  if (one-time initialization token for deleteLink != -1) {
    swift_once();
  }
  uint64_t v0 = static RecentsLinkController.deleteLink;
  swift_bridgeObjectRetain();
  return v0;
}

void static RecentsLinkController.shouldTargetUpcomingSectionDate.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v21 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_30_0();
  uint64_t v6 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_60();
  static Calendar.current.getter();
  uint64_t v10 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v2, *MEMORY[0x1E4F27BF8], v10);
  uint64_t v14 = type metadata accessor for Date();
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  Date.init()();
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v14);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v6);
  if (__swift_getEnumTagSinglePayload(v1, 1, v14) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v21, v1, v14);
    OUTLINED_FUNCTION_28();
  }
}

id RecentsLinkController.conversationManager.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t key path setter for RecentsLinkController.delegate : RecentsLinkController(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t RecentsLinkController.delegate.getter()
{
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 24);
}

void (*RecentsLinkController.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  OUTLINED_FUNCTION_53_5();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = v4;
  v3[4] = v5;
  return RecentsLinkController.delegate.modify;
}

void RecentsLinkController.delegate.modify()
{
  OUTLINED_FUNCTION_42_12();
  *(void *)(v2 + 32) = v3;
  swift_unknownObjectWeakAssign();
  if (v1)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v0);
}

id *RecentsLinkController.deinit()
{
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 264))();

  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?((uint64_t)(v0 + 3));
  swift_unknownObjectRelease();
  return v0;
}

uint64_t RecentsLinkController.__deallocating_deinit()
{
  RecentsLinkController.deinit();
  OUTLINED_FUNCTION_34_14();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in closure #1 in RecentsLinkController.resume()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 352))(result);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall RecentsLinkController.suspend()()
{
  if ((*(unsigned char *)(v0 + 44) & 1) == 0)
  {
    notify_cancel(*(_DWORD *)(v0 + 40));
    *(_DWORD *)(v0 + 40) = 0;
    *(unsigned char *)(v0 + 44) = 1;
  }
}

uint64_t RecentsLinkController.shouldConfirmDeleteAll.getter()
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  id v0 = RecentsLinkController.modelLocked.getter();
  uint64_t v1 = OUTLINED_FUNCTION_20();
  *(void *)(v1 + 16) = &v11;
  uint64_t v2 = OUTLINED_FUNCTION_26();
  *(void *)(v2 + 16) = partial apply for closure #1 in RecentsLinkController.shouldConfirmDeleteAll.getter;
  *(void *)(v2 + 24) = v1;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RecentsLinkControllerModel) -> ();
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RecentLinkCallItems) -> ();
  aBlock[3] = &block_descriptor_33;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v0, sel_performWhileLocked_, v3);

  _Block_release(v3);
  LOBYTE(v0) = OUTLINED_FUNCTION_29_21();
  uint64_t result = swift_release();
  if (v0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v11;
    uint64_t v6 = *(char **)(v11 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = v6 - 1;
      uint64_t v8 = 32;
      do
      {
        uint64_t v9 = v7;
        uint64_t v6 = (char *)objc_msgSend(*(id *)(v5 + v8), sel_isLocallyCreated);
        if (v6) {
          break;
        }
        uint64_t v7 = v9 - 1;
        v8 += 24;
      }
      while (v9);
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  return result;
}

uint64_t closure #1 in RecentsLinkController.shouldConfirmDeleteAll.getter(uint64_t a1, void *a2)
{
  *a2 = (*(uint64_t (**)(void))(*(void *)a1 + 232))();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall RecentsLinkController.deleteAll()()
{
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v0 + 272))();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 296))();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall RecentsLinkController.delete(callItems:)(Swift::OpaquePointer callItems)
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for RecentsCallItem(0);
  uint64_t v5 = OUTLINED_FUNCTION_15_42(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v3 + 16);
  if (v9)
  {
    uint64_t v10 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v11 = *(void *)(v6 + 72);
    _s15ConversationKit15RecentsCallItemVWOcTm_2(v10 + v11 * (v9 - 1), (uint64_t)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v32 = 1;
    OUTLINED_FUNCTION_3_2();
    uint64_t v13 = v12 + 304;
    uint64_t v14 = *(void (**)(void, void))(v12 + 304);
    v29[1] = v3;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v15 = &unk_1EBBAA000;
    *(void *)&long long v16 = 134217984;
    long long v30 = v16;
    uint64_t v17 = v1;
    while (1)
    {
      static RecentsCallItem.== infix(_:_:)();
      int v31 = v18;
      if (v15[190] != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationKit);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v22 = v14;
        uint64_t v23 = v13;
        uint64_t v24 = v11;
        uint64_t v25 = v8;
        uint64_t v26 = v17;
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = v30;
        *(void *)(v27 + 4) = v32;
        _os_log_impl(&dword_1C2F90000, v20, v21, "Deleting link #%ld", (uint8_t *)v27, 0xCu);
        uint64_t v28 = v27;
        uint64_t v17 = v26;
        uint64_t v8 = v25;
        uint64_t v11 = v24;
        uint64_t v13 = v23;
        uint64_t v14 = v22;
        uint64_t v15 = (void *)&unk_1EBBAA000;
        MEMORY[0x1C87760E0](v28, -1, -1);
      }

      v14(v10, v31 & 1);
      if (__OFADD__(v32, 1)) {
        break;
      }
      ++v32;
      v10 += v11;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        _s15ConversationKit19RecentsCallItemTypeOWOhTm_0((uint64_t)v8, (void (*)(void))type metadata accessor for RecentsCallItem);
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    OUTLINED_FUNCTION_28();
  }
}

void RecentsLinkController.delete(callItem:refresh:)(uint64_t a1, char a2)
{
  RecentsCallItem.conversationLink.getter();
  uint64_t v3 = v4;
  if (v4)
  {
    RecentsLinkController.delete(conversationLink:refresh:)((uint64_t)&v4, a2 & 1);
    outlined consume of ConversationLink?(v3);
  }
}

uint64_t RecentsLinkController.delete(conversationLink:refresh:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  id v8 = RecentsLinkController.modelLocked.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v6;
  *(void *)(v9 + 32) = v7;
  *(void *)(v9 + 40) = v3;
  *(unsigned char *)(v9 + 48) = a2;
  uint64_t v10 = OUTLINED_FUNCTION_26();
  *(void *)(v10 + 16) = partial apply for closure #1 in RecentsLinkController.delete(conversationLink:refresh:);
  *(void *)(v10 + 24) = v9;
  v18[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RecentsLinkControllerModel) -> ();
  void v18[5] = v10;
  v18[0] = MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_35_11();
  v18[2] = thunk for @escaping @callee_guaranteed (@guaranteed RecentLinkCallItems) -> ();
  void v18[3] = &block_descriptor_179;
  uint64_t v11 = _Block_copy(v18);
  id v12 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_performWhileLocked_, v11, v18[0]);

  _Block_release(v11);
  LOBYTE(v8) = OUTLINED_FUNCTION_29_21();
  swift_release();
  if (v8)
  {
    __break(1u);
  }
  else if (one-time initialization token for conversationKit == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationKit);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    long long v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v16 = 67109120;
    LODWORD(v18[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v14, v15, "Deleting link, should refresh %{BOOL}d", v16, 8u);
    MEMORY[0x1C87760E0](v16, -1, -1);
  }

  (*(void (**)(id, void))(*(void *)v3 + 320))(v12, a2 & 1);
  return swift_release();
}

void closure #1 in RecentsLinkController.delete(conversationLink:refresh:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
  specialized Collection<>.firstIndex(of:)();
  unint64_t v10 = v9;
  char v12 = v11;
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_6;
  }
  uint64_t v13 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 248))(v26);
  os_log_type_t v15 = v14;
  uint64_t v16 = *v14;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *os_log_type_t v15 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    uint64_t v16 = v24;
    *os_log_type_t v15 = v24;
  }
  unint64_t v18 = *(void *)(v16 + 16);
  if (v10 < v18)
  {
    unint64_t v19 = v18 - 1;
    uint64_t v20 = v16 + 24 * v10;
    char v25 = a6;
    os_log_type_t v21 = (void (*)(unsigned char *, void))v13;
    id v22 = *(void **)(v20 + 32);
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v20 + 56), v18 - 1 - v10, (char *)(v20 + 32));
    *(void *)(v16 + 16) = v19;
    *os_log_type_t v15 = v16;
    swift_release();
    swift_bridgeObjectRelease();

    v21(v26, 0);
    a6 = v25;
LABEL_6:
    swift_retain();
    swift_retain();
    uint64_t v23 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v23, a1, a5, a6 & 1);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void RecentsLinkController.delete(tuLink:refresh:)(uint64_t a1, char a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v7 = OUTLINED_FUNCTION_26();
  *(unsigned char *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = v6;
  void v9[4] = partial apply for closure #1 in RecentsLinkController.delete(tuLink:refresh:);
  v9[5] = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_35_11();
  long long v9[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v9[3] = &block_descriptor_40_1;
  id v8 = _Block_copy(v9);
  swift_release();
  objc_msgSend(v5, sel_invalidateLink_completionHandler_, a1, v8, v9[0]);
  _Block_release(v8);
}

void closure #1 in RecentsLinkController.delete(tuLink:refresh:)(uint64_t a1, void *a2, char a3)
{
  if (a2)
  {
    swift_getErrorValue();
    id v5 = a2;
    Error.localizedDescription.getter();
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
    uint64_t v7 = MEMORY[0x1E4FBB1A0];
    uint64_t v8 = String.init<A>(reflecting:)();
    uint64_t v10 = v9;
    *(void *)(v6 + 56) = v7;
    *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v6 + 32) = v8;
    *(void *)(v6 + 40) = v10;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  if (a3)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      (*(void (**)(uint64_t))(*(void *)Strong + 344))(Strong);
      swift_release();
    }
  }
}

void RecentsLinkController.engaged(with:)(void *a1)
{
  id v3 = RecentsLinkController.suggestionsService.getter();
  id v4 = objc_msgSend(a1, sel_url);
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_32_5();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = URL.absoluteString.getter();
  uint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  char v12 = (void *)MEMORY[0x1C87730B0](v9, v11);
  swift_bridgeObjectRelease();
  aBlock[4] = TPNumberPadCharacter.rawValue.getter;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_43_0;
  uint64_t v13 = _Block_copy(aBlock);
  objc_msgSend(v3, sel_registerURLFeedback_absoluteURL_withCompletion_, 1, v12, v13);
  _Block_release(v13);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall RecentsLinkController.refresh(links:)(Swift::OpaquePointer links)
{
  id v2 = RecentsLinkController.modelLocked.getter();
  id v3 = (Swift::OpaquePointer *)OUTLINED_FUNCTION_20();
  v3[2]._rawValue = links._rawValue;
  uint64_t v4 = OUTLINED_FUNCTION_26();
  *(void *)(v4 + 16) = partial apply for closure #1 in RecentsLinkController.refresh(links:);
  *(void *)(v4 + 24) = v3;
  v6[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RecentsLinkControllerModel) -> ();
  v6[5] = v4;
  v6[0] = MEMORY[0x1E4F143A8];
  OUTLINED_FUNCTION_35_11();
  _OWORD v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed RecentLinkCallItems) -> ();
  _OWORD v6[3] = &block_descriptor_53;
  uint64_t v5 = _Block_copy(v6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_performWhileLocked_, v5, v6[0]);

  _Block_release(v5);
  LOBYTE(v2) = OUTLINED_FUNCTION_29_21();
  swift_release();
  swift_release();
  if (v2) {
    __break(1u);
  }
}

void closure #1 in RecentsLinkController.refresh(links:)(uint64_t a1, unint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1) & 1) == 0)
  {
    id v3 = *(uint64_t (**)(void *))(*(void *)a1 + 200);
    uint64_t v5 = (void (*)(void *, void))v3(v27);
    if ((*v4 & 1) == 0) {
      *v4 |= 1uLL;
    }
    uint64_t v25 = a1;
    v5(v27, 0);
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v7 = MEMORY[0x1E4FBC860];
    uint64_t v24 = v3;
    if (v6)
    {
      v27[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v6 < 0)
      {
        __break(1u);
        return;
      }
      uint64_t v8 = 0;
      uint64_t v9 = v27[0];
      unint64_t v10 = a2;
      do
      {
        if ((a2 & 0xC000000000000001) != 0) {
          id v11 = (id)MEMORY[0x1C87744F0](v8, v10);
        }
        else {
          id v11 = *(id *)(v10 + 8 * v8 + 32);
        }
        id v12 = v11;
        uint64_t v13 = MEMORY[0x1E4FBC870];
        if ((v7 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(v7);
          uint64_t v13 = v14;
        }
        if (one-time initialization token for faceTime != -1) {
          swift_once();
        }
        os_log_type_t v15 = static ParticipantContactDetailsCache.faceTime;
        swift_retain();

        v27[0] = v9;
        unint64_t v16 = *(void *)(v9 + 16);
        if (v16 >= *(void *)(v9 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          unint64_t v10 = a2;
          uint64_t v9 = v27[0];
        }
        ++v8;
        *(void *)(v9 + 16) = v16 + 1;
        uint64_t v17 = (void *)(v9 + 24 * v16);
        v17[4] = v12;
        uint64_t v17[5] = v13;
        v17[6] = v15;
      }
      while (v6 != v8);
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4FBC860];
    }
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1C3769620;
    v27[0] = *(void *)(v9 + 16);
    uint64_t v19 = String.init<A>(reflecting:)();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v25 + 240))(v9);
    uint64_t v23 = (void (*)(void *, void))v24(v27);
    if (*v22) {
      *v22 &= ~1uLL;
    }
    v23(v27, 0);
  }
}

void RecentsLinkController.rejectSuggestedURL(_:refresh:)()
{
  OUTLINED_FUNCTION_31();
  char v2 = v1;
  uint64_t v4 = v3;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769620;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_31_20();
  uint64_t v8 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v0, v4, v8);
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v8);
  uint64_t v10 = specialized >> prefix<A>(_:)(v0);
  uint64_t v12 = v11;
  outlined destroy of SystemUpdateNotice?(v0, &demangling cache variable for type metadata for URL?);
  *(void *)(v5 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v5 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v5 + 32) = v10;
  *(void *)(v5 + 40) = v12;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v13 = RecentsLinkController.suggestionsService.getter();
  uint64_t v14 = URL.absoluteString.getter();
  os_log_type_t v15 = (void *)MEMORY[0x1C87730B0](v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v17 = OUTLINED_FUNCTION_26();
  *(unsigned char *)(v17 + 16) = v2 & 1;
  *(void *)(v17 + 24) = v16;
  v19[4] = partial apply for closure #1 in RecentsLinkController.rejectSuggestedURL(_:refresh:);
  uint64_t v19[5] = v17;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  void v19[3] = &block_descriptor_135;
  uint64_t v18 = _Block_copy(v19);
  swift_release();
  objc_msgSend(v13, sel_registerURLFeedback_absoluteURL_withCompletion_, 0, v15, v18);
  _Block_release(v18);
  swift_unknownObjectRelease();

  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in RecentsLinkController.rejectSuggestedURL(_:refresh:)(uint64_t a1, char a2)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  uint64_t v4 = String.init<A>(reflecting:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 352))(result);
      return swift_release();
    }
  }
  return result;
}

uint64_t RecentsLinkController.recentsLinkControllerModel(_:updatedCallItems:handlerWithModelLocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = RecentsLinkController.callItemsLocked.getter();
  uint64_t v9 = OUTLINED_FUNCTION_20();
  *(void *)(v9 + 16) = a2;
  uint64_t v10 = OUTLINED_FUNCTION_26();
  *(void *)(v10 + 16) = partial apply for closure #1 in RecentsLinkController.recentsLinkControllerModel(_:updatedCallItems:handlerWithModelLocked:);
  *(void *)(v10 + 24) = v9;
  uint64_t v29 = partial apply for thunk for @callee_guaranteed (@guaranteed RecentsLinkControllerModel) -> ();
  uint64_t v30 = v10;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v26 = 1107296256;
  uint64_t v27 = thunk for @escaping @callee_guaranteed (@guaranteed RecentLinkCallItems) -> ();
  uint64_t v28 = &block_descriptor_80;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_performWhileLocked_, v11);

  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    id v12 = RecentsLinkController.modelLocked.getter();
    uint64_t v13 = OUTLINED_FUNCTION_26();
    *(void *)(v13 + 16) = a3;
    *(void *)(v13 + 24) = a4;
    uint64_t v14 = OUTLINED_FUNCTION_26();
    *(void *)(v14 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    *(void *)(v14 + 24) = v13;
    uint64_t v29 = partial apply for thunk for @callee_guaranteed (@guaranteed RecentsLinkControllerModel) -> ();
    uint64_t v30 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v26 = 1107296256;
    uint64_t v27 = thunk for @escaping @callee_guaranteed (@guaranteed RecentLinkCallItems) -> ();
    uint64_t v28 = &block_descriptor_90;
    os_log_type_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_performWhileLocked_, v15);

    _Block_release(v15);
    LOBYTE(v15) = OUTLINED_FUNCTION_29_21();
    swift_release();
    if ((v15 & 1) == 0)
    {
      if (one-time initialization token for conversationKit == -1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  swift_once();
LABEL_4:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1C3769620;
  uint64_t aBlock = *(void *)(a2 + 16);
  uint64_t v17 = String.init<A>(reflecting:)();
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v20 + 128))())
  {
    uint64_t v22 = v21;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 8))(v4, ObjectType, v22);
    swift_release();
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    return swift_release();
  }
}

uint64_t closure #1 in RecentsLinkController.recentsLinkControllerModel(_:updatedCallItems:handlerWithModelLocked:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96);
  swift_bridgeObjectRetain();
  return v3(a2);
}

void RecentsLinkController.delete(callItem:from:completionHandler:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v17[1] = v6;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for RecentsCallItem(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RecentsCallItem>);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C3769620;
  _s15ConversationKit15RecentsCallItemVWOcTm_2(v8, v13 + ((v12 + 32) & ~v12), (void (*)(void))type metadata accessor for RecentsCallItem);
  _s15ConversationKit15RecentsCallItemVWOcTm_2(v8, (uint64_t)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v14 = (v12 + 24) & ~v12;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  outlined init with take of RecentOngoingConversationMetadata((uint64_t)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v16 = (void *)(v15 + ((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v16 = v5;
  v16[1] = v3;
  swift_retain();
  swift_retain();
  RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in RecentsLinkController.delete(callItem:from:completionHandler:)(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 304))(a3, 1);
  }
  return a4(a1 & 1);
}

uint64_t sub_1C323FEC0()
{
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t partial apply for closure #3 in RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_1C323FF48()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RecentsLinkControllerModel.updateCallItems()()
{
  return closure #1 in RecentsLinkControllerModel.updateCallItems()(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t SGURL.linkURL.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_url);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = type metadata accessor for URL();
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v4);
}

uint64_t protocol witness for RecentsURLProviding.linkURL.getter in conformance SGURL@<X0>(uint64_t a1@<X8>)
{
  return SGURL.linkURL.getter(a1);
}

uint64_t TUConversationLink.linkURL.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_URL);
  if (v3)
  {
    uint64_t v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = type metadata accessor for URL();
  return __swift_storeEnumTagSinglePayload(a1, v5, 1, v6);
}

uint64_t protocol witness for RecentsURLProviding.linkURL.getter in conformance TUConversationLink@<X0>(uint64_t a1@<X8>)
{
  return TUConversationLink.linkURL.getter(a1);
}

uint64_t sub_1C32400E0()
{
  swift_weakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RecentsLinkController.resume()()
{
  return closure #1 in closure #1 in RecentsLinkController.resume()();
}

uint64_t sub_1C3240118()
{
  return OUTLINED_FUNCTION_7_44();
}

uint64_t sub_1C3240128()
{
  return OUTLINED_FUNCTION_7_44();
}

uint64_t partial apply for closure #1 in RecentsLinkController.shouldConfirmDeleteAll.getter(uint64_t a1)
{
  return closure #1 in RecentsLinkController.shouldConfirmDeleteAll.getter(a1, *(void **)(v1 + 16));
}

void partial apply for closure #1 in RecentsLinkController.delete(tuLink:refresh:)(uint64_t a1, void *a2)
{
  closure #1 in RecentsLinkController.delete(tuLink:refresh:)(a1, a2, *(unsigned char *)(v2 + 16));
}

uint64_t sub_1C324014C()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in RecentsLinkController.refresh(links:)(uint64_t a1)
{
  closure #1 in RecentsLinkController.refresh(links:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C3240188()
{
  return objectdestroy_66Tm(MEMORY[0x1E4FBC8D0], MEMORY[0x1E4FBC8F8]);
}

uint64_t partial apply for closure #1 in RecentsLinkController.recentsLinkControllerModel(_:updatedCallItems:handlerWithModelLocked:)(uint64_t a1)
{
  return closure #1 in RecentsLinkController.recentsLinkControllerModel(_:updatedCallItems:handlerWithModelLocked:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C32401C8()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = (int *)type metadata accessor for RecentsCallItem(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  id v3 = (id *)(v0 + ((v2 + 24) & ~v2));
  type metadata accessor for RecentsCallItemType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
    case 4u:
      swift_bridgeObjectRelease();
      uint64_t v4 = (int *)type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v5 = (uint64_t)v3 + v4[5];
      uint64_t v6 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload(v5, 1, v6))
      {
        OUTLINED_FUNCTION_48();
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      }

      swift_bridgeObjectRelease();
      uint64_t v8 = (uint64_t)v3 + v4[10];
      uint64_t v9 = type metadata accessor for UUID();
      if (!__swift_getEnumTagSinglePayload(v8, 1, v9))
      {
        OUTLINED_FUNCTION_48();
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      uint64_t v11 = (id *)((char *)v3 + v4[11]);
      if (*v11)
      {

        swift_bridgeObjectRelease();
        swift_release();
      }
      uint64_t v12 = (uint64_t)v3 + v4[12];
      if (!__swift_getEnumTagSinglePayload(v12, 1, v9))
      {
        OUTLINED_FUNCTION_48();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v9);
      }

      break;
    case 1u:
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v14();
      uint64_t v15 = type metadata accessor for RecentOngoingConversationMetadata(0);
      swift_bridgeObjectRelease();

      uint64_t v16 = (id *)((char *)v3 + *(int *)(v15 + 28));
      if (*v16)
      {

        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      break;
    case 2u:

      swift_bridgeObjectRelease();
LABEL_14:
      swift_release();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  uint64_t v17 = (uint64_t)v3 + v1[9];
  uint64_t v18 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v17, 1, v18))
  {
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_19();

  swift_release();
  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t outlined init with take of RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in RecentsLinkController.delete(callItem:from:completionHandler:)(char a1)
{
  uint64_t v3 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_1(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(uint64_t (**)(void))(v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in RecentsLinkController.delete(callItem:from:completionHandler:)(a1, v9, v1 + v8, v10);
}

unint64_t lazy protocol witness table accessor for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState;
  if (!lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState;
  if (!lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState;
  if (!lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState;
  if (!lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsLinkControllerModel.UpdateState and conformance RecentsLinkControllerModel.UpdateState);
  }
  return result;
}

uint64_t sub_1C3240794()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 136))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_1C32407D8()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 160))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C324081C()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C324085C()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t sub_1C32408A0()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 232))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C32408E4()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 256))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C3240930()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 88))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C3240974()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 128))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t dispatch thunk of RecentsLinkControllerDelegate.recentsLinkControllerRefreshedLinks(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of RecentsLinkControllerModelDelegate.recentsLinkControllerModel(_:updatedCallItems:handlerWithModelLocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t method lookup function for RecentsLinkControllerModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsLinkControllerModel);
}

uint64_t dispatch thunk of RecentsLinkControllerModel.delegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.delegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.delegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.tuLinks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.tuLinks.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.tuLinks.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.updateState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.updateState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.updateState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.conversationLinks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.conversationLinks.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.conversationLinks.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.suggestionsURLs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.suggestionsURLs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.suggestionsURLs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.updateCallItems()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of RecentsLinkControllerModel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

ValueMetadata *type metadata accessor for RecentsLinkControllerModel.UpdateState()
{
  return &type metadata for RecentsLinkControllerModel.UpdateState;
}

uint64_t method lookup function for RecentLinkCallItems(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentLinkCallItems);
}

uint64_t dispatch thunk of RecentLinkCallItems.callItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of RecentLinkCallItems.callItems.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of RecentLinkCallItems.callItems.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of RecentLinkCallItems.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for RecentsLinkController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsLinkController);
}

uint64_t dispatch thunk of RecentsLinkController.delegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RecentsLinkController.delegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RecentsLinkController.delegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RecentsLinkController.__allocating_init(conversationManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of RecentsLinkController.resume()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of RecentsLinkController.suspend()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of RecentsLinkController.callItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of RecentsLinkController.shouldConfirmDeleteAll.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of RecentsLinkController.deleteAll()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of RecentsLinkController.delete(callItems:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of RecentsLinkController.delete(callItem:refresh:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of RecentsLinkController.delete(tuLink:refresh:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of RecentsLinkController.engaged(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of RecentsLinkController.refresh(links:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of RecentsLinkController.refreshLinks()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of RecentsLinkController.refreshSuggestionsURLs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of RecentsURLProviding.linkURL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t partial apply for closure #1 in RecentsLinkController.rejectSuggestedURL(_:refresh:)(uint64_t a1)
{
  return closure #1 in RecentsLinkController.rejectSuggestedURL(_:refresh:)(a1, *(unsigned char *)(v1 + 16));
}

void partial apply for closure #2 in RecentsLinkControllerModel.generateCallItems(for:suggestionsURLs:)(void **a1)
{
  closure #2 in RecentsLinkControllerModel.generateCallItems(for:suggestionsURLs:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C3240FF8()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RecentsListViewController.deleteAllRecents(_:)(uint64_t result)
{
  return closure #1 in RecentsListViewController.deleteAllRecents(_:)(result);
}

uint64_t sub_1C3241038()
{
  return objectdestroy_66Tm(MEMORY[0x1E4FBC898], MEMORY[0x1E4FBC8F8]);
}

uint64_t lazy protocol witness table accessor for type SGURL and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C32410AC()
{
  return objectdestroy_66Tm(MEMORY[0x1E4FBC8B8], MEMORY[0x1E4FBC898]);
}

uint64_t sub_1C32410DC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in RecentsLinkController.delete(conversationLink:refresh:)(uint64_t a1)
{
  closure #1 in RecentsLinkController.delete(conversationLink:refresh:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in RecentsLinkControllerModel.updateCallItems()()
{
  return closure #1 in closure #1 in RecentsLinkControllerModel.updateCallItems()(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1C3241148()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_34_14();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(uint64_t a1)
{
  return specialized closure #1 in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

id NSCache.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return objc_msgSend(v0, sel_init);
}

id DefaultObjectCache.object(forKey:defaultObject:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = *(void **)(v2 + 16);
  id v6 = objc_msgSend(v5, sel_objectForKey_, a1);
  if (!v6)
  {
    id v6 = (id)a2();
    objc_msgSend(v5, sel_setObject_forKey_, v6, a1);
  }
  return v6;
}

uint64_t DefaultObjectCache.deinit()
{
  return v0;
}

uint64_t DefaultObjectCache.__deallocating_deinit()
{
  DefaultObjectCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t DefaultObjectCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  DefaultObjectCache.init()();
  return v0;
}

uint64_t DefaultObjectCache.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCache);
  *(void *)(v0 + 16) = NSCache.__allocating_init()();
  return v0;
}

double DefaultObjectCache<>.cgFloat(forKey:defaultValue:)(uint64_t a1, uint64_t a2, double a3)
{
  float v5 = a3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  float v7 = DefaultObjectCache<>.float(forKey:defaultValue:)(v5);
  swift_release();
  return v7;
}

uint64_t sub_1C324149C()
{
  swift_release();
  return swift_deallocObject();
}

float partial apply for implicit closure #1 in DefaultObjectCache<>.cgFloat(forKey:defaultValue:)()
{
  return (*(double (**)(void))(v0 + 16))();
}

float DefaultObjectCache<>.float(forKey:defaultValue:)(float a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  *(float *)&double v3 = a1;
  id v4 = objc_msgSend(v2, sel_initWithFloat_, v3);
  id v5 = DefaultObjectCache.object(forKey:defaultObject:)((uint64_t)v4, (uint64_t (*)(void))partial apply for implicit closure #1 in DefaultObjectCache<>.float(forKey:defaultValue:));

  objc_msgSend(v5, sel_floatValue);
  float v7 = v6;

  return v7;
}

id implicit closure #1 in DefaultObjectCache<>.float(forKey:defaultValue:)(float (*a1)(void))
{
  float v1 = a1();
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  *(float *)&double v3 = v1;
  return objc_msgSend(v2, sel_initWithFloat_, v3);
}

id partial apply for implicit closure #1 in DefaultObjectCache<>.float(forKey:defaultValue:)()
{
  return implicit closure #1 in DefaultObjectCache<>.float(forKey:defaultValue:)(*(float (**)(void))(v0 + 32));
}

uint64_t type metadata completion function for DefaultObjectCache()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DefaultObjectCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for DefaultObjectCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DefaultObjectCache);
}

uint64_t dispatch thunk of DefaultObjectCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t VideoAttributeOrientation.deviceOrientation.getter(int a1)
{
  if ((a1 - 1) > 2) {
    return 1;
  }
  else {
    return qword_1C3777750[a1 - 1];
  }
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  OUTLINED_FUNCTION_23_30(a1);
  uint64_t v3 = type metadata accessor for Participant(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3 - 8);
  float v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = *(void *)(v2 + 56);
  uint64_t v22 = v2 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v23 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_23;
    }
    BOOL v17 = __OFADD__(v14++, 1);
    if (v17)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v14 >= v23) {
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v22 + 8 * v14);
    if (!v18) {
      break;
    }
LABEL_22:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_23:
    outlined init with copy of Participant(*(void *)(v2 + 48) + *(void *)(v4 + 72) * v16, (uint64_t)v9);
    outlined init with take of Participant((uint64_t)v9, (uint64_t)v7);
    char v21 = v24(v7);
    outlined destroy of Participant((uint64_t)v7);
    if (v1 || (v21 & 1) != 0)
    {
LABEL_30:
      swift_release();
      return;
    }
  }
  OUTLINED_FUNCTION_17_34();
  if (v19 == v17) {
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_16_32();
  if (v18) {
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_17_34();
  if (v19 == v17) {
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_16_32();
  if (v18) {
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_17_34();
  if (v19 == v17) {
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_16_32();
  if (v18) {
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_17_34();
  if (v19 == v17) {
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_16_32();
  if (v18)
  {
LABEL_21:
    int64_t v14 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v23) {
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v22 + 8 * v14);
    ++v20;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_32:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  unsigned __int8 v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  void *v24;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationParticipant();
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    unint64_t v18 = v20;
    uint64_t v2 = v21;
    uint64_t v3 = v22;
    uint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    unint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      float v7 = ~(-1 << v6);
    }
    else {
      float v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  BOOL v17 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_32;
    }
    type metadata accessor for TUConversationParticipant();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v11 = v24;
    swift_unknownObjectRelease();
    if (!v24) {
      goto LABEL_32;
    }
LABEL_31:
    unint64_t v15 = objc_msgSend(v11, sel_capabilities);
    unint64_t v16 = objc_msgSend(v15, sel_isGondolaCallingAvailable);

    if ((v16 & 1) == 0) {
      goto LABEL_32;
    }
  }
  if (v4)
  {
    uint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    uint64_t v10 = v9 | (v3 << 6);
LABEL_30:
    uint64_t v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v17) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v18 + 8 * v12);
    ++v3;
    if (!v13)
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v3);
      if (!v13)
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v18 + 8 * v3);
        if (!v13)
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v18 + 8 * v3);
          if (!v13)
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v18 + 8 * v3);
            if (!v13)
            {
              int64_t v14 = v8 + 6;
              while (v14 < v17)
              {
                unint64_t v13 = *(void *)(v18 + 8 * v14++);
                if (v13)
                {
                  uint64_t v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_32:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v4 = (v13 - 1) & v13;
    uint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.makeIterator()(a3, a4, a5, (uint64_t)&v14);
  while (1)
  {
    specialized LazyMapSequence.Iterator.next()();
    if (v11 == 2) {
      break;
    }
    char v15 = v11 & 1;
    char v12 = a1(&v15);
    if (v6 || (v12 & 1) != 0)
    {
      outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
      swift_release();
      return 1;
    }
  }
  outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
  swift_release();
  return 0;
}

void ReportSpamManager.reportFaceTimeCallSpam<A>(call:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = ReportSpamManager.fetchLocalFaceTimeHandles()();
  specialized Collection.first.getter(v7);
  if (!v9)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static ReportSpamManager.logger);
    swift_bridgeObjectRetain();
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22))
    {

      OUTLINED_FUNCTION_32_1();
      return;
    }
    OUTLINED_FUNCTION_37();
    __src[0] = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_22_28(4.8149e-34);
    uint64_t v23 = Set.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, __src);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_32_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_2(&dword_1C2F90000, v26, v27, "Could not report video message spam for call due to zero registered facetime service IMAccount %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    goto LABEL_24;
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 80))(__src, v10, v11, a2, a3);
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v12 = ReportSpamManager.SpamDataModel.mapToDict.getter();
  outlined release of ReportSpamManager.SpamDataModel((uint64_t)__src);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static ReportSpamManager.logger);
  swift_bridgeObjectRetain_n();
  long long v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_37();
    __dst[0] = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)unint64_t v16 = 136315138;
    if (v12)
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyHashable : Any]);
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_32_1();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v14, v15, "ReportSpamManager: report spam, model.dictionary: %s", v16, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_32_1();
  }
  id v28 = *(id *)(v4 + 16);
  if (v12)
  {
    v29.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v29.super.Class isa = 0;
  }
  unsigned __int8 v30 = objc_msgSend(v28, sel_reportSpamMessage_, v29.super.isa, v36, __dst[0]);

  char v21 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v21, v31);
  if (v30)
  {
    if (v32)
    {
      char v33 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)char v33 = 0;
      os_log_type_t v34 = v31;
      uint64_t v35 = "ReportSpamManager: report spam was sent successfully";
LABEL_23:
      _os_log_impl(&dword_1C2F90000, v21, v34, v35, v33, 2u);
LABEL_24:
      OUTLINED_FUNCTION_3();
    }
  }
  else if (v32)
  {
    char v33 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)char v33 = 0;
    os_log_type_t v34 = v31;
    uint64_t v35 = "ReportSpamManager: report spam was rejected for some reason";
    goto LABEL_23;
  }
}

uint64_t *ReportSpamManager.faceTime.unsafeMutableAddressor()
{
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  return &static ReportSpamManager.faceTime;
}

uint64_t ReportSpamManager.reportVideoMessagingSpam(call:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v4 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for RecentsCallItem(0);
  outlined init with copy of Date?(a1 + *(int *)(v8 + 36), v7);
  uint64_t v9 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload(v7, 1, v9) == 1)
  {
    outlined destroy of Date?(v7);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static ReportSpamManager.logger);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (!OUTLINED_FUNCTION_12(v12)) {
      goto LABEL_13;
    }
    uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v13);
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v14, v15, "Could not report video message spam for call due to nil call date");
LABEL_12:
    OUTLINED_FUNCTION_3();
LABEL_13:

LABEL_14:
    char v27 = 0;
    return v27 & 1;
  }
  Date.timeIntervalSince1970.getter();
  uint64_t v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  uint64_t v18 = ReportSpamManager.fetchLocalFaceTimeHandles()();
  specialized Collection.first.getter(v18);
  if (!v20)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static ReportSpamManager.logger);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v11, v29))
    {

      OUTLINED_FUNCTION_32_1();
      goto LABEL_14;
    }
    OUTLINED_FUNCTION_37();
    uint64_t v37 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_22_28(4.8149e-34);
    uint64_t v30 = Set.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    v36[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_32_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_2(&dword_1C2F90000, v33, v34, "Could not report video message spam for call due to zero registered facetime service IMAccount %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    goto LABEL_12;
  }
  uint64_t v21 = v19;
  uint64_t v22 = v20;
  swift_bridgeObjectRelease();
  RecentsCallItem.tuHandles.getter();
  uint64_t v24 = v23;
  unint64_t v25 = (void *)swift_allocObject();
  void v25[2] = v17;
  v25[3] = v21;
  v25[4] = v22;
  uint64_t v26 = (void *)swift_allocObject();
  void v26[2] = partial apply for closure #2 in ReportSpamManager.reportVideoMessagingSpam(call:);
  v26[3] = v2;
  v26[4] = v24;
  v26[5] = partial apply for closure #1 in ReportSpamManager.reportVideoMessagingSpam(call:);
  v26[6] = v25;
  LOBYTE(v37) = 1;
  MEMORY[0x1F4188790](v26);
  v36[-2] = &v37;
  swift_retain();
  swift_bridgeObjectRetain();
  char v27 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)&v36[-4], v24, (uint64_t)partial apply for specialized closure #1 in LazyMapSequence<>.map<A>(_:), (uint64_t)v26);
  swift_release();
  swift_bridgeObjectRelease();
  return v27 & 1;
}

uint64_t static ReportSpamManager.faceTime.getter()
{
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static ReportSpamManager.logger);
  uint64_t v1 = OUTLINED_FUNCTION_35();
  __swift_project_value_buffer(v1, v2);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)logger);
  if (one-time initialization token for answeringMachine != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.answeringMachine);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)logger);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationKit);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)logger);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationKit);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

uint64_t ReportSpamManager.logger.unsafeMutableAddressor()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static ReportSpamManager.logger);
}

uint64_t static ReportSpamManager.logger.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static ReportSpamManager.logger);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

ConversationKit::ReportSpamManager::IDSServiceType_optional __swiftcall ReportSpamManager.IDSServiceType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ReportSpamManager.IDSServiceType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

unint64_t ReportSpamManager.IDSServiceType.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000026;
  }
  else {
    return 0xD00000000000002ALL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReportSpamManager.IDSServiceType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ReportSpamManager.IDSServiceType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReportSpamManager.IDSServiceType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReportSpamManager.IDSServiceType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::ReportSpamManager::IDSServiceType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ReportSpamManager.IDSServiceType(Swift::String *a1)
{
  return ReportSpamManager.IDSServiceType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ReportSpamManager.IDSServiceType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ReportSpamManager.IDSServiceType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ReportSpamManager.SpamDataModel.invitedMembers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReportSpamManager.SpamDataModel.callType.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.callLength.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ReportSpamManager.SpamDataModel.hasLink.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t ReportSpamManager.SpamDataModel.recipientHandleValue.getter()
{
  return OUTLINED_FUNCTION_35();
}

void *ReportSpamManager.SpamDataModel.senderHandle.getter()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

uint64_t ReportSpamManager.SpamDataModel.messageId.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.spamTime.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t ReportSpamManager.SpamDataModel.messageKey.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.callStatus.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.linkName.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.snapFirstName.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.snapLastName.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.snapRecordId.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ReportSpamManager.SpamDataModel.snapRecordInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReportSpamManager.SpamDataModel.mapToDict.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  LODWORD(v350) = *(unsigned __int8 *)(v0 + 33);
  HIDWORD(v350) = *(unsigned __int8 *)(v0 + 32);
  int v395 = *(_DWORD *)(v0 + 34);
  __int16 v396 = *(_WORD *)(v0 + 38);
  Swift::Int v5 = *(void **)(v0 + 56);
  uint64_t v326 = *(void *)(v0 + 48);
  uint64_t v338 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v302 = *(void *)(v0 + 80);
  uint64_t v314 = *(void *)(v0 + 64);
  char v7 = *(unsigned char *)(v0 + 88);
  int v8 = *(_DWORD *)(v0 + 89);
  *(_DWORD *)((char *)v394 + 3) = *(_DWORD *)(v0 + 92);
  v394[0] = v8;
  uint64_t v278 = *(void *)(v0 + 104);
  uint64_t v290 = *(void *)(v0 + 96);
  uint64_t v255 = *(void *)(v0 + 120);
  uint64_t v266 = *(void *)(v0 + 112);
  uint64_t v232 = *(void *)(v0 + 136);
  uint64_t v243 = *(void *)(v0 + 128);
  long long v9 = *(_OWORD *)(v0 + 160);
  long long v390 = *(_OWORD *)(v0 + 144);
  long long v391 = v9;
  long long v392 = *(_OWORD *)(v0 + 176);
  uint64_t v393 = *(void *)(v0 + 192);
  uint64_t v389 = Dictionary.init(dictionaryLiteral:)();
  unint64_t v387 = 0xEF737265626D656DLL;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  uint64_t v388 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v386 = v1;
  uint64_t v11 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_80(v11, v12, v13, v14, v15, v16, v17, v18, v141, v152, v163, v174, v185, v197, v208, v220, v232, v243, v255,
    v266,
    v278,
    v290,
    v302,
    v314,
    v326,
    v338,
    v350,
    v363[0]);
  if (v7)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static ReportSpamManager.logger);
    uint64_t v55 = (void *)Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v56)) {
      goto LABEL_21;
    }
    uint64_t v57 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v57);
    uint64_t v60 = "call date is nil, kIDSGeneralSpamReportTimeOfMessageKey is required to report spams";
    goto LABEL_20;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static ReportSpamManager.logger);
    uint64_t v55 = (void *)Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v62)) {
      goto LABEL_21;
    }
    uint64_t v63 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v63);
    uint64_t v60 = "message id is nil, kIDSGeneralSpamReportMessageIDKey is required to report spams";
    goto LABEL_20;
  }
  if (!v5)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static ReportSpamManager.logger);
    uint64_t v55 = (void *)Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v65)) {
      goto LABEL_21;
    }
    uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_1(v66);
    uint64_t v60 = "senderHandle is nil, kIDSGeneralSpamReportSenderURIKey is required to report spams";
LABEL_20:
    OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v58, v59, v60);
    OUTLINED_FUNCTION_3();
LABEL_21:

    return 0;
  }
  uint64_t v221 = v3;
  id v19 = v5;
  swift_bridgeObjectRetain();
  id v20 = (id)TUCopyIDSFromIDForHandle();
  if (!v20)
  {

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v21 = v20;
  uint64_t v164 = (uint64_t)v5;
  uint64_t v198 = v4;
  uint64_t v22 = (void *)MEMORY[0x1C87730B0](v339, v327);
  id v23 = (id)TUHandleForIDSCanonicalAddress();

  id v209 = (id)TUHandleForIDSCanonicalAddress();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_96();
  uint64_t v24 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_80(v24, v25, v26, v27, v28, v29, v30, v31, v142, v153, v164, (uint64_t)v19, v186, v198, (uint64_t)v209, v221, v233, v244, v256,
    v267,
    v279,
    v291,
    v303,
    v315,
    v327,
    v339,
    v351,
    v363[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = OUTLINED_FUNCTION_1_96();
  uint64_t v388 = MEMORY[0x1E4FBB3D0];
  OUTLINED_FUNCTION_9_56(v32, v33, v34, v35, v36, v37, v38, v39, v143, v154, v165, v175, v187, v199, v210, v222, v234, v245, v257,
    v268,
    v280,
    v292,
    v304,
    v316,
    v328,
    v340,
    v352,
    v363[0]);
  uint64_t v386 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v387 = v40;
  OUTLINED_FUNCTION_1_96();
  id v41 = (id)TUCopyIDSFromIDForHandle();
  uint64_t v188 = v2;
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    uint64_t v388 = v10;
    uint64_t v386 = v43;
    unint64_t v387 = v45;
    uint64_t v2 = v188;
  }
  else
  {
    OUTLINED_FUNCTION_7_68();
  }
  HIDWORD(v144) = v353 & 1;
  OUTLINED_FUNCTION_2_80(v46, v47, v48, v49, v50, v51, v52, v53, v144, (uint64_t)v23, v166, v176, v188, v200, v211, v223, v235, v246, v258,
    v269,
    v281,
    v293,
    v305,
    v317,
    v329,
    v341,
    v353,
    v363[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v68 = OUTLINED_FUNCTION_1_96();
  uint64_t v388 = v10;
  OUTLINED_FUNCTION_9_56(v68, v69, v70, v71, v72, v73, v74, v75, v145, v155, v167, v177, v189, v201, v212, v224, v236, v247, v259,
    v270,
    v282,
    v294,
    v306,
    v318,
    v330,
    v342,
    v354,
    v363[0]);
  OUTLINED_FUNCTION_13_47();
  uint64_t v386 = v76 | 0x7079742D00000000;
  unint64_t v387 = 0xE900000000000065;
  OUTLINED_FUNCTION_1_96();
  uint64_t v77 = v168;
  if (v225)
  {
    uint64_t v388 = v10;
    uint64_t v386 = v2;
    unint64_t v387 = v225;
  }
  else
  {
    OUTLINED_FUNCTION_7_68();
  }
  uint64_t v78 = v202;
  unint64_t v79 = v237;
  uint64_t v80 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_56(v80, v81, v82, v83, v84, v85, v86, v87, v146, v156, v168, v178, v190, v202, v213, v225, v237, v248, v260,
    v271,
    v283,
    v295,
    v307,
    v319,
    v331,
    v343,
    v355,
    v363[0]);
  OUTLINED_FUNCTION_13_47();
  uint64_t v386 = v88 | 0x6E656C2D00000000;
  unint64_t v387 = 0xEB00000000687467;
  uint64_t v89 = AnyHashable.init<A>(_:)();
  if ((v356 & 0x100000000) != 0)
  {
    OUTLINED_FUNCTION_7_68();
  }
  else
  {
    uint64_t v388 = MEMORY[0x1E4FBB3D0];
    uint64_t v386 = v78;
  }
  OUTLINED_FUNCTION_9_56(v89, v90, v91, v92, v93, v94, v95, v96, v147, v157, v169, v179, v191, v203, v214, v226, v238, v249, v261,
    v272,
    v284,
    v296,
    v308,
    v320,
    v332,
    v344,
    v356,
    v363[0]);
  uint64_t v97 = MEMORY[0x1E4FBB1A0];
  uint64_t v98 = OUTLINED_FUNCTION_18_38();
  uint64_t v388 = MEMORY[0x1E4FBB390];
  OUTLINED_FUNCTION_9_56(v98, v99, v100, v101, v102, v103, v104, v105, v148, v158, v170, v180, v192, v204, v215, v227, v239, v250, v262,
    v273,
    v285,
    v297,
    v309,
    v321,
    v333,
    v345,
    v357,
    v363[0]);
  OUTLINED_FUNCTION_13_47();
  uint64_t v386 = v106 | 0x6174732D00000000;
  unint64_t v387 = 0xEB00000000737574;
  OUTLINED_FUNCTION_18_38();
  uint64_t v107 = v263;
  if (v263)
  {
    uint64_t v388 = v97;
    uint64_t v386 = v274;
    unint64_t v387 = v263;
  }
  else
  {
    OUTLINED_FUNCTION_7_68();
  }
  uint64_t v108 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_56(v108, v109, v110, v111, v112, v113, v114, v115, v149, v159, v171, v181, v193, v205, v216, v228, v240, v251, v263,
    v274,
    v286,
    v298,
    v310,
    v322,
    v334,
    v346,
    v358,
    v363[0]);
  uint64_t v386 = 0x6D616E2D6B6E696CLL;
  unint64_t v387 = 0xE900000000000065;
  uint64_t v116 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  if (v79)
  {
    uint64_t v388 = v116;
    uint64_t v386 = v252;
    unint64_t v387 = v79;
  }
  else
  {
    OUTLINED_FUNCTION_7_68();
  }
  uint64_t v117 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_80(v117, v118, v119, v120, v121, v122, v123, v124, v150, v160, v172, v182, v194, v206, v217, v229, v241, v252, v264,
    v275,
    v287,
    v299,
    v311,
    v323,
    v335,
    v347,
    v359,
    v363[0]);
  uint64_t v386 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v387 = v125;
  uint64_t v126 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  id v127 = (id)TUCopyIDSFromIDForHandle();
  if (v127)
  {
    id v128 = v127;
    uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v131 = v130;

    uint64_t v388 = v126;
    uint64_t v386 = v129;
    unint64_t v387 = v131;
    uint64_t v107 = v265;
    unint64_t v79 = v242;
  }
  else
  {
    OUTLINED_FUNCTION_7_68();
  }
  OUTLINED_FUNCTION_2_80(v132, v133, v134, v135, v136, v137, v138, v139, v151, v161, v173, v183, v195, v207, v218, v230, v242, v253, v265,
    v276,
    v288,
    v300,
    v312,
    v324,
    v336,
    v348,
    v360,
    v363[0]);
  AnyHashable.init<A>(_:)();
  v363[1] = v196;
  v363[2] = v231;
  char v364 = v362;
  char v365 = v361;
  int v366 = v395;
  __int16 v367 = v396;
  uint64_t v368 = v349;
  uint64_t v369 = v337;
  uint64_t v370 = v77;
  uint64_t v371 = v325;
  uint64_t v372 = v6;
  uint64_t v373 = v313;
  char v374 = v7;
  *(_DWORD *)&v375[3] = *(_DWORD *)((char *)v394 + 3);
  *(_DWORD *)v375 = v394[0];
  uint64_t v376 = v301;
  uint64_t v377 = v289;
  uint64_t v378 = v277;
  uint64_t v379 = v107;
  uint64_t v380 = v254;
  unint64_t v381 = v79;
  uint64_t v385 = v393;
  long long v384 = v392;
  long long v383 = v391;
  long long v382 = v390;
  uint64_t v140 = ReportSpamManager.SpamDataModel.snapSpamDictionary.getter();
  v363[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyHashable : Any]);
  v363[0] = v140;
  specialized Dictionary.subscript.setter((uint64_t)v363, (uint64_t)&v386);

  return v389;
}

uint64_t ReportSpamManager.SpamDataModel.snapSpamDictionary.getter()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v6 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v7 = v0[24];
  uint64_t v63 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v44 = 0x616E2D7473726966;
  uint64_t v48 = 0xEA0000000000656DLL;
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  if (v1)
  {
    uint64_t v55 = v8;
    uint64_t v44 = v2;
    uint64_t v48 = v1;
  }
  else
  {
    OUTLINED_FUNCTION_14_41();
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5_79(v9, v10, v11, v12, v13, v14, v15, v16, v44, v48, v51, v55, v59);
  uint64_t v45 = 0x6D616E2D7473616CLL;
  uint64_t v49 = 0xE900000000000065;
  uint64_t v17 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  if (v3)
  {
    uint64_t v56 = v17;
    uint64_t v45 = v4;
    uint64_t v49 = v3;
  }
  else
  {
    OUTLINED_FUNCTION_14_41();
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5_79(v18, v19, v20, v21, v22, v23, v24, v25, v45, v49, v52, v56, v60);
  uint64_t v46 = 0x644964726F636572;
  uint64_t v50 = 0xE800000000000000;
  uint64_t v26 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  if (v5)
  {
    uint64_t v57 = v26;
    uint64_t v46 = v6;
    uint64_t v50 = v5;
  }
  else
  {
    OUTLINED_FUNCTION_14_41();
  }
  uint64_t v27 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5_79(v27, v28, v29, v30, v31, v32, v33, v34, v46, v50, v53, v57, v61);
  uint64_t v47 = 0xD000000000000017;
  AnyHashable.init<A>(_:)();
  if (v7)
  {
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]);
    uint64_t v47 = v7;
  }
  else
  {
    OUTLINED_FUNCTION_14_41();
  }
  uint64_t v35 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5_79(v35, v36, v37, v38, v39, v40, v41, v42, v47, 0x80000001C37A2C10, v54, v58, v62);
  return v63;
}

__n128 ReportSpamManager.SpamDataModel.init(invitedMembers:callType:callLength:hasLink:recipientHandleValue:senderHandle:messageId:spamTime:messageKey:callStatus:linkName:snapFirstName:snapLastName:snapRecordId:snapRecordInfo:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, char a13, long long a14, long long a15, long long a16, long long a17, long long a18, __n128 a19, uint64_t a20)
{
  __n128 result = a19;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(unsigned char *)(a9 + 32) = a5 & 1;
  *(unsigned char *)(a9 + 33) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = a13 & 1;
  *(_OWORD *)(a9 + 96) = a14;
  *(_OWORD *)(a9 + 112) = a15;
  *(_OWORD *)(a9 + 128) = a16;
  *(_OWORD *)(a9 + 144) = a17;
  *(_OWORD *)(a9 + 160) = a18;
  *(__n128 *)(a9 + 176) = a19;
  *(void *)(a9 + 192) = a20;
  return result;
}

void *ReportSpamManager.__allocating_init(idsService:imAccountController:imDaemonController:featureFlags:)()
{
  OUTLINED_FUNCTION_8_8();
  __n128 result = (void *)swift_allocObject();
  result[2] = v3;
  result[3] = v2;
  result[4] = v1;
  result[5] = v0;
  return result;
}

void *ReportSpamManager.init(idsService:imAccountController:imDaemonController:featureFlags:)()
{
  OUTLINED_FUNCTION_8_8();
  swift_getObjectType();
  return specialized ReportSpamManager.init(idsService:imAccountController:imDaemonController:featureFlags:)(v4, v3, v2, v0, v1);
}

uint64_t ReportSpamManager.fetchLocalFaceTimeHandles()()
{
  unint64_t v1 = v0;
  objc_msgSend(*(id *)(v0 + 32), sel_blockUntilConnected);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = self;
  id v4 = v2;
  uint64_t v5 = &selRef_trailingBarAlpha;
  id v6 = objc_msgSend(v3, sel_facetimeService);
  id v7 = objc_msgSend(v4, sel_accountsForService_, v6);

  if (!v7)
  {
    if (one-time initialization token for videoMessaging == -1)
    {
LABEL_16:
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.videoMessaging);
      swift_retain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_37();
        uint64_t v31 = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)uint64_t v15 = 136315138;
        id v16 = *(id *)(v1 + 24);
        id v17 = [v3 v5[346]];
        id v18 = objc_msgSend(v16, sel_accountsForService_, v17);

        if (v18)
        {
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for IMAccount);
          static Array._unconditionallyBridgeFromObjectiveC(_:)();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [IMAccount]?);
        uint64_t v19 = Optional.debugDescription.getter();
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v13, v14, "Could not find any facetime service IMAccount in IMAccountController %s", v15, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        swift_release_n();
      }
      return MEMORY[0x1E4FBC870];
    }
LABEL_45:
    swift_once();
    goto LABEL_16;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for IMAccount);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v31 = MEMORY[0x1E4FBC860];
  if (!(v1 >> 62))
  {
    uint64_t v8 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_4;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    unint64_t v1 = MEMORY[0x1E4FBC860];
    if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_23;
  }
LABEL_4:
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v9 = 0;
  uint64_t v5 = &selRef_trailingBarAlpha;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v10 = (id)MEMORY[0x1C87744F0](v9, v1);
    }
    else {
      id v10 = *(id *)(v1 + 8 * v9 + 32);
    }
    uint64_t v11 = v10;
    if (objc_msgSend(v10, sel_registrationStatus) == (id)5)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    ++v9;
  }
  while (v8 != v9);
  swift_bridgeObjectRelease();
  unint64_t v1 = v31;
  if (v31 < 0) {
    goto LABEL_38;
  }
LABEL_24:
  if ((v1 & 0x4000000000000000) == 0)
  {
    uint64_t v23 = *(void *)(v1 + 16);
    if (!v23) {
      goto LABEL_39;
    }
    goto LABEL_26;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v23)
  {
LABEL_39:
    swift_release();
    uint64_t v25 = MEMORY[0x1E4FBC860];
LABEL_40:
    return specialized Set.init<A>(_:)(v25);
  }
LABEL_26:
  uint64_t v31 = (uint64_t)v3;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v23 < 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v24 = 0;
  uint64_t v25 = v31;
  uint64_t v5 = (char **)(v1 & 0xC000000000000001);
  while (1)
  {
    if (v23 == v24)
    {
      __break(1u);
      goto LABEL_38;
    }
    id v26 = v5 ? (id)MEMORY[0x1C87744F0](v24, v1) : *(id *)(v1 + 8 * v24 + 32);
    uint64_t v27 = v26;
    uint64_t result = outlined bridged method (pb) of @objc IMAccount.strippedLogin.getter(v26);
    if (!v28) {
      break;
    }
    Swift::String v29 = String.lowercased()();

    swift_bridgeObjectRelease();
    uint64_t v31 = v25;
    unint64_t v30 = *(void *)(v25 + 16);
    uint64_t v3 = (void *)(v30 + 1);
    if (v30 >= *(void *)(v25 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v25 = v31;
    }
    ++v24;
    *(void *)(v25 + 16) = v3;
    *(Swift::String *)(v25 + 16 * v30 + 32) = v29;
    if (v23 == v24)
    {
      swift_release();
      goto LABEL_40;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ReportSpamManager.reportVideoMessagingSpam(call:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = *a1;
  uint64_t v8 = Double.description.getter();
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v7, sel_value);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  *a4 = v8;
  a4[1] = v10;
  a4[2] = v12;
  a4[3] = v14;
  a4[4] = a2;
  a4[5] = a3;
  return swift_bridgeObjectRetain();
}

uint64_t SpamMessageDataModel.init(timeStamp:messageType:callerHandle:recipientHandle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

void closure #2 in ReportSpamManager.reportVideoMessagingSpam(call:)(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  id v3 = *(id *)(a1 + 16);
  SpamMessageDataModel.dictionary.getter();
  specialized _dictionaryUpCast<A, B, C, D>(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  unsigned __int8 v6 = outlined bridged method (mbnn) of @objc IDSService.reportSpamMessage(_:)(v5, v3);

  *a2 = v6 & 1;
}

uint64_t SpamMessageDataModel.dictionary.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C376A6F0;
  *(void *)(inited + 32) = 0x6D617473656D6974;
  *(void *)(inited + 40) = 0xE900000000000070;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v1;
  *(void *)(inited + 64) = 0xD000000000000011;
  *(void *)(inited + 72) = 0x80000001C37A2C30;
  *(void *)(inited + 80) = 0xD000000000000018;
  *(void *)(inited + 88) = 0x80000001C3790AC0;
  OUTLINED_FUNCTION_13_47();
  v9[12] = v8 | 0x6148726500000000;
  v9[13] = 0xEC000000656C646ELL;
  v9[14] = v4;
  v9[15] = v3;
  v9[16] = 0x6E65697069636572;
  v9[17] = 0xEF656C646E614874;
  v9[18] = v6;
  v9[19] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t static ReportSpamManager.getContact(forHandle:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769830;
  *(void *)(inited + 32) = a1;
  uint64_t v15 = inited;
  specialized Array._endMutation()();
  id v3 = a1;
  uint64_t v4 = specialized Set.init<A>(_:)(v15);
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  uint64_t v5 = static ParticipantContactDetailsCache.faceTime;
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v4, (uint64_t)v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  unint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = 32;
    do
    {
      id v11 = *(void **)(v7 + v10);
      if (v11)
      {
        id v12 = v11;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += 56;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    unint64_t v8 = v16;
  }
  swift_bridgeObjectRelease();
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      return v8;
    }
    goto LABEL_13;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

id *ReportSpamManager.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ReportSpamManager.__deallocating_deinit()
{
  ReportSpamManager.deinit();
  return swift_deallocClassInstance();
}

BOOL SpamMessageDataModel.SpamMessageType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SpamMessageDataModel.SpamMessageType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t SpamMessageDataModel.SpamMessageType.rawValue.getter()
{
  return 0xD000000000000018;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SpamMessageDataModel.SpamMessageType@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = SpamMessageDataModel.SpamMessageType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SpamMessageDataModel.SpamMessageType@<X0>(void *a1@<X8>)
{
  unint64_t result = SpamMessageDataModel.SpamMessageType.rawValue.getter();
  *a1 = 0xD000000000000018;
  a1[1] = v3;
  return result;
}

uint64_t SpamMessageDataModel.timeStamp.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SpamMessageDataModel.callerHandle.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SpamMessageDataModel.recipientHandle.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t UInt32.stringValue.getter(int a1)
{
  if (*MEMORY[0x1E4F57CC8] == a1) {
    return 0x6E776F6E6B6E75;
  }
  uint64_t result = 0xD000000000000011;
  if (*MEMORY[0x1E4F57CA0] != a1 && *MEMORY[0x1E4F57CA8] != a1 && *MEMORY[0x1E4F57C90] != a1)
  {
    if (*MEMORY[0x1E4F57CB8] == a1)
    {
      return 0x64657373696DLL;
    }
    else if (*MEMORY[0x1E4F57C98] == a1)
    {
      return 0x656C6C65636E6163;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ReportSpamManager.canShowReportActions(for:)()
{
  RecentsCallItem.allowsFaceTimeSpamReporting.getter();
  return v0 & 1;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3243FCC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReportSpamManager.reportVideoMessagingSpam(call:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in ReportSpamManager.reportVideoMessagingSpam(call:)(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

void partial apply for closure #2 in ReportSpamManager.reportVideoMessagingSpam(call:)(unsigned char *a1@<X8>)
{
  closure #2 in ReportSpamManager.reportVideoMessagingSpam(call:)(v1, a1);
}

uint64_t specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v8 = a1;
  a5(&v7, &v8);
  a2(&v9, &v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t outlined bridged method (pb) of @objc IMAccount.strippedLogin.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_strippedLogin);
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_35();
}

id outlined bridged method (mbnn) of @objc IDSService.reportSpamMessage(_:)(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(a2, sel_reportSpamMessage_, isa);

  return v4;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t result = v14;
    uint64_t v7 = v15;
    long long v8 = v16;
    uint64_t v9 = v17;
  }
  else
  {
    uint64_t v10 = -1;
    uint64_t v11 = -1 << *(unsigned char *)(result + 32);
    uint64_t v12 = ~v11;
    uint64_t v7 = result + 56;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v10 = ~(-1 << v13);
    }
    uint64_t v9 = v10 & *(void *)(result + 56);
    long long v8 = (unint64_t)v12;
  }
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(_OWORD *)(a4 + 16) = v8;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  return result;
}

void specialized LazyMapSequence.Iterator.next()()
{
  void (*v10)(uint64_t *__return_ptr, void **);
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;

  id v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0x8000000000000000) == 0)
  {
    int64_t v4 = v0[3];
    unint64_t v3 = v1[4];
    if (v3)
    {
      uint64_t v5 = (v3 - 1) & v3;
      unint64_t v6 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_4:
      uint64_t v7 = *(void **)(*(void *)(v2 + 48) + 8 * v6);
      id v8 = v7;
      goto LABEL_5;
    }
    uint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      return;
    }
    uint64_t v12 = (unint64_t)(v1[2] + 64) >> 6;
    if (v11 >= v12)
    {
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      goto LABEL_5;
    }
    uint64_t v13 = v1[1];
    uint64_t v14 = *(void *)(v13 + 8 * v11);
    if (v14)
    {
LABEL_14:
      uint64_t v5 = (v14 - 1) & v14;
      unint64_t v6 = __clz(__rbit64(v14)) + (v11 << 6);
      int64_t v4 = v11;
      goto LABEL_4;
    }
    uint64_t v15 = v4 + 2;
    if (v4 + 2 >= v12) {
      goto LABEL_30;
    }
    uint64_t v14 = *(void *)(v13 + 8 * v15);
    if (v14)
    {
LABEL_18:
      uint64_t v11 = v15;
      goto LABEL_14;
    }
    if (v4 + 3 < v12)
    {
      uint64_t v14 = *(void *)(v13 + 8 * (v4 + 3));
      if (v14)
      {
        uint64_t v11 = v4 + 3;
        goto LABEL_14;
      }
      uint64_t v15 = v4 + 4;
      if (v4 + 4 >= v12)
      {
        uint64_t v7 = 0;
        uint64_t v5 = 0;
        v4 += 3;
LABEL_5:
        v1[3] = v4;
        v1[4] = v5;
        if (!v7) {
          return;
        }
LABEL_9:
        uint64_t v10 = (void (*)(uint64_t *__return_ptr, void **))v1[5];
        id v18 = v7;
        v10(&v17, &v18);

        return;
      }
      uint64_t v14 = *(void *)(v13 + 8 * v15);
      if (v14) {
        goto LABEL_18;
      }
      uint64_t v11 = v4 + 5;
      if (v4 + 5 < v12)
      {
        uint64_t v14 = *(void *)(v13 + 8 * v11);
        if (v14) {
          goto LABEL_14;
        }
        uint64_t v11 = v12 - 1;
        long long v16 = v4 + 6;
        while (v16 < v12)
        {
          uint64_t v14 = *(void *)(v13 + 8 * v16++);
          if (v14)
          {
            uint64_t v11 = v16 - 1;
            goto LABEL_14;
          }
        }
LABEL_30:
        uint64_t v7 = 0;
        uint64_t v5 = 0;
        int64_t v4 = v11;
        goto LABEL_5;
      }
    }
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    int64_t v4 = v15;
    goto LABEL_5;
  }
  uint64_t v9 = __CocoaSet.Iterator.next()();
  if (v9)
  {
    uint64_t v17 = v9;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v7 = v18;
    swift_unknownObjectRelease();
    if (v18) {
      goto LABEL_9;
    }
  }
}

void *specialized ReportSpamManager.init(idsService:imAccountController:imDaemonController:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[2] = a1;
  a5[3] = a2;
  a5[4] = a3;
  a5[5] = a4;
  return a5;
}

BOOL specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized closure #1 in Sequence<>.contains(_:)(*a1, *a2);
}

uint64_t specialized closure #1 in LazyMapSequence<>.map<A>(_:)@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t result = specialized closure #1 in LazyMapSequence<>.map<A>(_:)(*a1, a2, a3, *(void *)a4, *(void (**)(uint64_t *__return_ptr, uint64_t *))(a4 + 8));
  *a5 = result & 1;
  return result;
}

uint64_t sub_1C32444CC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in LazyMapSequence<>.map<A>(_:)@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized closure #1 in LazyMapSequence<>.map<A>(_:)(a1, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16), *(void *)(v2 + 24), v2 + 32, a2);
}

BOOL partial apply for specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1)
{
  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(unsigned __int8 **)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ReportSpamManager.IDSServiceType and conformance ReportSpamManager.IDSServiceType()
{
  unint64_t result = lazy protocol witness table cache variable for type ReportSpamManager.IDSServiceType and conformance ReportSpamManager.IDSServiceType;
  if (!lazy protocol witness table cache variable for type ReportSpamManager.IDSServiceType and conformance ReportSpamManager.IDSServiceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReportSpamManager.IDSServiceType and conformance ReportSpamManager.IDSServiceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpamMessageDataModel.SpamMessageType and conformance SpamMessageDataModel.SpamMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type SpamMessageDataModel.SpamMessageType and conformance SpamMessageDataModel.SpamMessageType;
  if (!lazy protocol witness table cache variable for type SpamMessageDataModel.SpamMessageType and conformance SpamMessageDataModel.SpamMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpamMessageDataModel.SpamMessageType and conformance SpamMessageDataModel.SpamMessageType);
  }
  return result;
}

uint64_t method lookup function for ReportSpamManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ReportSpamManager);
}

uint64_t dispatch thunk of ReportSpamManager.__allocating_init(idsService:imAccountController:imDaemonController:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for ReportSpamManager.IDSServiceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C32446D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ReportSpamManager.IDSServiceType()
{
}

uint64_t destroy for ReportSpamManager.SpamDataModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReportSpamManager.SpamDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  long long v16 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReportSpamManager.SpamDataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 56);
  uint64_t v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v6;
  id v7 = v6;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy200_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xC8uLL);
}

uint64_t assignWithTake for ReportSpamManager.SpamDataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReportSpamManager.SpamDataModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 200))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReportSpamManager.SpamDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ReportSpamManager.SpamDataModel()
{
}

uint64_t destroy for SpamMessageDataModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SpamMessageDataModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SpamMessageDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SpamMessageDataModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for SpamMessageDataModel()
{
}

unsigned char *storeEnumTagSinglePayload for SpamMessageDataModel.SpamMessageType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C3244E74);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for SpamMessageDataModel.SpamMessageType()
{
}

id UIColor.init(white:)(double a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return objc_msgSend(v2, sel_initWithWhite_alpha_, a1, 1.0);
}

BOOL static ColorStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

id Array<A>.interpolatedColor(percent:)(double a1)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_3_89();
  Collection.first.getter();
  if (v18)
  {
    double v2 = UIColor.hslaComponents.getter();
    double v4 = v3;
    double v6 = v5;
    double v8 = v7;

    swift_getWitnessTable();
    OUTLINED_FUNCTION_3_89();
    BidirectionalCollection.last.getter();
    double v9 = UIColor.hslaComponents.getter();
    double v11 = v10;
    double v13 = v12;
    double v17 = v14;

    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithHue_saturation_brightness_alpha_, (1.0 - a1) * v2 + v9 * a1, (1.0 - a1) * v4 + v11 * a1, (1.0 - a1) * v6 + v13 * a1, (1.0 - a1) * v8 + v17 * a1);
  }
  else
  {
    id v16 = objc_msgSend(self, sel_clearColor);
    return v16;
  }
}

id UIColor.screenBlendedColor.getter()
{
  double v0 = UIColor.rgbaComponents.getter();
  double v2 = v1;
  double v4 = v3;
  double v6 = v5;
  double v7 = -(pow(-(v0 + -1.0), 0.2) + -1.0);
  double v8 = -(pow(-(v2 + -1.0), 0.2) + -1.0);
  double v9 = -(pow(-(v4 + -1.0), 0.2) + -1.0);
  id v10 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v10, sel_initWithRed_green_blue_alpha_, v7, v8, v9, v6);
}

void UIColor.HSLAComponents.hue.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*UIColor.HSLAComponents.hue.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.HSLAComponents.saturation.getter(double a1, double a2)
{
  return a2;
}

void UIColor.HSLAComponents.saturation.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*UIColor.HSLAComponents.saturation.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.HSLAComponents.lightness.getter(double a1, double a2, double a3)
{
  return a3;
}

void UIColor.HSLAComponents.lightness.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*UIColor.HSLAComponents.lightness.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.HSLAComponents.alpha.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

void UIColor.HSLAComponents.alpha.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*UIColor.HSLAComponents.alpha.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void UIColor.RGBAComponents.red.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*UIColor.RGBAComponents.red.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.RGBAComponents.green.getter(double a1, double a2)
{
  return a2;
}

uint64_t (*UIColor.RGBAComponents.green.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.RGBAComponents.blue.getter(double a1, double a2, double a3)
{
  return a3;
}

uint64_t (*UIColor.RGBAComponents.blue.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.RGBAComponents.alpha.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

uint64_t (*UIColor.RGBAComponents.alpha.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double UIColor.hslaComponents.getter()
{
  return UIColor.hslaComponents.getter((SEL *)&selRef_getHue_saturation_brightness_alpha_);
}

double UIColor.rgbaComponents.getter()
{
  return UIColor.hslaComponents.getter((SEL *)&selRef_getRed_green_blue_alpha_);
}

double UIColor.hslaComponents.getter(SEL *a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  objc_msgSend(v1, *a1, v6, &v5, &v4, &v3);
  return *(double *)v6;
}

id static UIColor.faceTimeDarkGreen.getter()
{
  id v0 = objc_msgSend(self, sel_systemDarkGreenColor);
  return v0;
}

void ColorStyle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ColorStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ColorStyle and conformance ColorStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorStyle and conformance ColorStyle;
  if (!lazy protocol witness table cache variable for type ColorStyle and conformance ColorStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorStyle and conformance ColorStyle);
  }
  return result;
}

void type metadata accessor for UIColor.HSLAComponents()
{
}

void type metadata accessor for UIColor.RGBAComponents()
{
}

unsigned char *storeEnumTagSinglePayload for ColorStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3245630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ColorStyle()
{
}

uint64_t ParticipantMediaProviderCreator.createParticipantVideoProvider(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(a3 + 8))(a1, 0, 0, a2, a3);
}

uint64_t key path getter for DefaultParticipantMediaProviderCreator.avcRemoteVideoClientDelegate : DefaultParticipantMediaProviderCreator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with copy of DefaultParticipantMediaProviderCreator(a1, (uint64_t)v5);
  uint64_t v3 = MEMORY[0x1C8776240](v5);
  uint64_t result = outlined destroy of DefaultParticipantMediaProviderCreator((uint64_t)v5);
  *a2 = v3;
  return result;
}

void DefaultParticipantMediaProviderCreator.avcRemoteVideoClientDelegate.getter()
{
}

uint64_t DefaultParticipantMediaProviderCreator.avcRemoteVideoClientDelegate.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*DefaultParticipantMediaProviderCreator.avcRemoteVideoClientDelegate.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = MEMORY[0x1C8776240](v1);
  return DefaultParticipantMediaProviderCreator.avcRemoteVideoClientDelegate.modify;
}

uint64_t DefaultParticipantMediaProviderCreator.avcRemoteVideoClientDelegate.modify()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t DefaultParticipantMediaProviderCreator.createParticipantVideoProvider(with:oneToOneModeStateProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  outlined init with copy of DefaultParticipantMediaProviderCreator(v5, (uint64_t)v14);
  uint64_t v10 = MEMORY[0x1C8776240](v14);
  outlined destroy of DefaultParticipantMediaProviderCreator((uint64_t)v14);
  uint64_t result = swift_unknownObjectRelease();
  if (v10)
  {
    uint64_t v12 = MEMORY[0x1C8776240](v5);
    double v13 = (objc_class *)type metadata accessor for RemoteParticipantVideoProvider();
    objc_allocWithZone(v13);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t)RemoteParticipantVideoProvider.init(streamToken:avcRemoteVideoClientDelegate:oneToOneModeStateProvider:)(a1, v12, a2, a3);
    a4[3] = (uint64_t)v13;
    a4[4] = (uint64_t)&protocol witness table for RemoteParticipantVideoProvider;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DefaultParticipantMediaProviderCreator.init()()
{
  return swift_unknownObjectWeakInit();
}

uint64_t DefaultParticipantMediaProviderCreator.init(avcRemoteVideoClientDelegate:)()
{
  swift_unknownObjectWeakInit();
  return swift_unknownObjectRelease();
}

uint64_t sub_1C32458D8()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of ParticipantMediaProviderCreator.createParticipantVideoProvider(with:oneToOneModeStateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for DefaultParticipantMediaProviderCreator()
{
  return &type metadata for DefaultParticipantMediaProviderCreator;
}

id Features.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t Features.isSystemApertureEnabled.getter()
{
  return SBUIIsSystemApertureEnabled();
}

uint64_t Features.isIncomingCallBannerEnabled.getter()
{
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50))())
  {
    char v0 = 1;
  }
  else
  {
    lazy protocol witness table accessor for type Features.CallUI and conformance Features.CallUI();
    uint64_t v2 = OUTLINED_FUNCTION_7_69();
    OUTLINED_FUNCTION_6_74(v2);
  }
  return v0 & 1;
}